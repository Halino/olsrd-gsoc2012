cscope 15 $HOME/olsrd-gsoc2012               0002343471
	@android/arch/syslimits.h

	@android/linux/if_tunnel.h

1 #i‚de‡
_IF_TUNNEL_H_


2 
	#_IF_TUNNEL_H_


	)

4 
	~<löux/ty≥s.h
>

5 
	~<asm/byã‹dî.h
>

7 #ifde‡
__KERNEL__


8 
	~<löux/ù.h
>

9 
	~<löux/ö6.h
>

12 
	#SIOCGETTUNNEL
 (
SIOCDEVPRIVATE
 + 0)

	)

13 
	#SIOCADDTUNNEL
 (
SIOCDEVPRIVATE
 + 1)

	)

14 
	#SIOCDELTUNNEL
 (
SIOCDEVPRIVATE
 + 2)

	)

15 
	#SIOCCHGTUNNEL
 (
SIOCDEVPRIVATE
 + 3)

	)

16 
	#SIOCGETPRL
 (
SIOCDEVPRIVATE
 + 4)

	)

17 
	#SIOCADDPRL
 (
SIOCDEVPRIVATE
 + 5)

	)

18 
	#SIOCDELPRL
 (
SIOCDEVPRIVATE
 + 6)

	)

19 
	#SIOCCHGPRL
 (
SIOCDEVPRIVATE
 + 7)

	)

20 
	#SIOCGET6RD
 (
SIOCDEVPRIVATE
 + 8)

	)

21 
	#SIOCADD6RD
 (
SIOCDEVPRIVATE
 + 9)

	)

22 
	#SIOCDEL6RD
 (
SIOCDEVPRIVATE
 + 10)

	)

23 
	#SIOCCHG6RD
 (
SIOCDEVPRIVATE
 + 11)

	)

25 
	#GRE_CSUM
 
	`__˝u_to_be16
(0x8000)

	)

26 
	#GRE_ROUTING
 
	`__˝u_to_be16
(0x4000)

	)

27 
	#GRE_KEY
 
	`__˝u_to_be16
(0x2000)

	)

28 
	#GRE_SEQ
 
	`__˝u_to_be16
(0x1000)

	)

29 
	#GRE_STRICT
 
	`__˝u_to_be16
(0x0800)

	)

30 
	#GRE_REC
 
	`__˝u_to_be16
(0x0700)

	)

31 
	#GRE_FLAGS
 
	`__˝u_to_be16
(0x00F8)

	)

32 
	#GRE_VERSION
 
	`__˝u_to_be16
(0x0007)

	)

34 
	sù_tu¬ñ_∑rm
 {

35 
	m«me
[
IFNAMSIZ
];

36 
	mlök
;

37 
__be16
 
	mi_Êags
;

38 
__be16
 
	mo_Êags
;

39 
__be32
 
	mi_key
;

40 
__be32
 
	mo_key
;

41 
ùhdr
 
	mùh
;

45 
	#SIT_ISATAP
 0x0001

	)

47 
	sù_tu¬ñ_¥l
 {

48 
__be32
 
	maddr
;

49 
__u16
 
	mÊags
;

50 
__u16
 
	m__ª£rved
;

51 
__u32
 
	md©Æí
;

52 
__u32
 
	m__ª£rved2
;

57 
	#PRL_DEFAULT
 0x0001

	)

59 
	sù_tu¬ñ_6rd
 {

60 
ö6_addr
 
	m¥efix
;

61 
__be32
 
	mªœy_¥efix
;

62 
__u16
 
	m¥efixÀn
;

63 
__u16
 
	mªœy_¥efixÀn
;

67 
	mIFLA_GRE_UNSPEC
,

68 
	mIFLA_GRE_LINK
,

69 
	mIFLA_GRE_IFLAGS
,

70 
	mIFLA_GRE_OFLAGS
,

71 
	mIFLA_GRE_IKEY
,

72 
	mIFLA_GRE_OKEY
,

73 
	mIFLA_GRE_LOCAL
,

74 
	mIFLA_GRE_REMOTE
,

75 
	mIFLA_GRE_TTL
,

76 
	mIFLA_GRE_TOS
,

77 
	mIFLA_GRE_PMTUDISC
,

78 
	m__IFLA_GRE_MAX
,

81 
	#IFLA_GRE_MAX
 (
__IFLA_GRE_MAX
 - 1)

	)

	@android/linux/ip6_tunnel.h

1 #i‚de‡
_IP6_TUNNEL_H


2 
	#_IP6_TUNNEL_H


	)

4 
	~<löux/ty≥s.h
>

6 
	#IPV6_TLV_TNL_ENCAP_LIMIT
 4

	)

7 
	#IPV6_DEFAULT_TNL_ENCAP_LIMIT
 4

	)

10 
	#IP6_TNL_F_IGN_ENCAP_LIMIT
 0x1

	)

12 
	#IP6_TNL_F_USE_ORIG_TCLASS
 0x2

	)

14 
	#IP6_TNL_F_USE_ORIG_FLOWLABEL
 0x4

	)

16 
	#IP6_TNL_F_MIP6_DEV
 0x8

	)

18 
	#IP6_TNL_F_RCV_DSCP_COPY
 0x10

	)

20 
	sù6_äl_∑rm
 {

21 
	m«me
[
IFNAMSIZ
];

22 
	mlök
;

23 
__u8
 
	m¥Ÿo
;

24 
__u8
 
	míˇp_limô
;

25 
__u8
 
	mh›_limô
;

26 
__be32
 
	mÊowöfo
;

27 
__u32
 
	mÊags
;

28 
ö6_addr
 
	mœddr
;

29 
ö6_addr
 
	møddr
;

	@android/regex.h

39 #i‚de‡
_REGEX_H_


40 
	#_REGEX_H_


	)

42 
	~<sys/cdefs.h
>

43 
	~<sys/ty≥s.h
>

46 
off_t
 
	tªgoff_t
;

49 
	mª_magic
;

50 
size_t
 
	mª_nsub
;

51 c⁄° *
	mª_ídp
;

52 
ª_guts
 *
	mª_g
;

53 } 
	tªgex_t
;

56 
ªgoff_t
 
	mrm_so
;

57 
ªgoff_t
 
	mrm_eo
;

58 } 
	tªgm©ch_t
;

61 
	#REG_BASIC
 0000

	)

62 
	#REG_EXTENDED
 0001

	)

63 
	#REG_ICASE
 0002

	)

64 
	#REG_NOSUB
 0004

	)

65 
	#REG_NEWLINE
 0010

	)

66 
	#REG_NOSPEC
 0020

	)

67 
	#REG_PEND
 0040

	)

68 
	#REG_DUMP
 0200

	)

71 
	#REG_NOMATCH
 1

	)

72 
	#REG_BADPAT
 2

	)

73 
	#REG_ECOLLATE
 3

	)

74 
	#REG_ECTYPE
 4

	)

75 
	#REG_EESCAPE
 5

	)

76 
	#REG_ESUBREG
 6

	)

77 
	#REG_EBRACK
 7

	)

78 
	#REG_EPAREN
 8

	)

79 
	#REG_EBRACE
 9

	)

80 
	#REG_BADBR
 10

	)

81 
	#REG_ERANGE
 11

	)

82 
	#REG_ESPACE
 12

	)

83 
	#REG_BADRPT
 13

	)

84 
	#REG_EMPTY
 14

	)

85 
	#REG_ASSERT
 15

	)

86 
	#REG_INVARG
 16

	)

87 
	#REG_ATOI
 255

	)

88 
	#REG_ITOA
 0400

	)

91 
	#REG_NOTBOL
 00001

	)

92 
	#REG_NOTEOL
 00002

	)

93 
	#REG_STARTEND
 00004

	)

94 
	#REG_TRACE
 00400

	)

95 
	#REG_LARGE
 01000

	)

96 
	#REG_BACKR
 02000

	)

98 
__BEGIN_DECLS


99 
ªgcomp
(
ªgex_t
 *, const *, );

100 
size_t
 
ªgîr‹
(, c⁄° 
ªgex_t
 *, *, size_t);

101 
ªgexec
(c⁄° 
ªgex_t
 *, c⁄° *, 
size_t
, 
ªgm©ch_t
 [], );

102 
ªg‰ì
(
ªgex_t
 *);

103 
	g__END_DECLS


	@android/regex/cclass.h

39 
	sc˛ass
 {

40 *
	m«me
;

41 *
	mch¨s
;

42 *
	mmu…is
;

43 } 
	gc˛as£s
[] = {

67 { 
NULL
, 0, "" }

	@android/regex/cname.h

39 
	s˙ame
 {

40 *
	m«me
;

41 
	mcode
;

42 } 
	g˙ames
[] = {

138 { 
NULL
, 0 }

	@android/regex/engine.c

45 #ifde‡
SNAMES


46 
	#m©chî
 
sm©chî


	)

47 
	#Á°
 
sÁ°


	)

48 
	#¶ow
 
s¶ow


	)

49 
	#dis£˘
 
sdis£˘


	)

50 
	#backªf
 
sbackªf


	)

51 
	#°ï
 
s°ï


	)

52 
	#¥öt
 
•röt


	)

53 
	#©
 
ßt


	)

54 
	#m©ch
 
sm©


	)

55 
	#n›e
 
¢›e


	)

57 #ifde‡
LNAMES


58 
	#m©chî
 
lm©chî


	)

59 
	#Á°
 
lÁ°


	)

60 
	#¶ow
 
l¶ow


	)

61 
	#dis£˘
 
ldis£˘


	)

62 
	#backªf
 
lbackªf


	)

63 
	#°ï
 
l°ï


	)

64 
	#¥öt
 
Õröt


	)

65 
	#©
 
œt


	)

66 
	#m©ch
 
lm©


	)

67 
	#n›e
 
 ›e


	)

71 
	sm©ch
 {

72 
ª_guts
 *
	mg
;

73 
	meÊags
;

74 
ªgm©ch_t
 *
	mpm©ch
;

75 *
	mofÂ
;

76 *
	mbegöp
;

77 *
	mídp
;

78 *
	mcﬁdp
;

79 **
	mœ°pos
;

80 
	mSTATEVARS
;

81 
°©es
 
	m°
;

82 
°©es
 
	m‰esh
;

83 
°©es
 
	mtmp
;

84 
°©es
 
	mem±y
;

87 
m©chî
(
ª_guts
 *, *, 
size_t
, 
ªgm©ch_t
[], );

88 *
dis£˘
(
m©ch
 *, *, *, 
s›no
, sopno);

89 *
backªf
(
m©ch
 *, *, *, 
s›no
, sopno, sopno, );

90 *
Á°
(
m©ch
 *, *, *, 
s›no
, sopno);

91 *
¶ow
(
m©ch
 *, *, *, 
s›no
, sopno);

92 
°©es
 
°ï
(
ª_guts
 *, 
s›no
, sopno, states, , states);

93 
	#MAX_RECURSION
 100

	)

94 
	#BOL
 (
OUT
+1)

	)

95 
	#EOL
 (
BOL
+1)

	)

96 
	#BOLEOL
 (
BOL
+2)

	)

97 
	#NOTHING
 (
BOL
+3)

	)

98 
	#BOW
 (
BOL
+4)

	)

99 
	#EOW
 (
BOL
+5)

	)

100 
	#CODEMAX
 (
BOL
+5Ë

	)

101 
	#NONCHAR
(
c
Ë((cË> 
CHAR_MAX
)

	)

102 
	#NNONCHAR
 (
CODEMAX
-
CHAR_MAX
)

	)

103 #ifde‡
REDEBUG


104 
¥öt
(
m©ch
 *, *, 
°©es
, , 
FILE
 *);

106 #ifde‡
REDEBUG


107 
©
(
m©ch
 *, *, *, *, 
s›no
, sopno);

109 #ifde‡
REDEBUG


110 *
pch¨
();

113 #ifde‡
REDEBUG


114 
	#SP
(
t
, 
s
, 
c
Ë
	`¥öt
(
m
,Å, s, c, 
°dout
)

	)

115 
	#AT
(
t
, 
p1
, 
p2
, 
s1
, 
s2
Ë
	`©
(
m
,Å,Ö1,Ö2, s1, s2)

	)

116 
	#NOTE
(
°r
Ë{ i‡(
m
->
eÊags
&
REG_TRACE
Ë()
	`¥ötf
("=%s\n", (°r)); }

	)

117 
	gn›e
 = 0;

119 
	#SP
(
t
, 
s
, 
c
Ë

	)

120 
	#AT
(
t
, 
p1
, 
p2
, 
s1
, 
s2
Ë

	)

121 
	#NOTE
(
s
Ë

	)

128 
	$m©chî
(
ª_guts
 *
g
, *
°rög
, 
size_t
 
nm©ch
, 
ªgm©ch_t
 
pm©ch
[],

129 
eÊags
)

131 *
ídp
;

132 
i
;

133 
m©ch
 
mv
;

134 
m©ch
 *
m
 = &
mv
;

135 *
dp
;

136 c⁄° 
s›no
 
gf
 = 
g
->
fú°°©e
+1;

137 c⁄° 
s›no
 
gl
 = 
g
->
œ°°©e
;

138 *
°¨t
;

139 *
°›
;

142 i‡(
g
->
cÊags
&
REG_NOSUB
)

143 
nm©ch
 = 0;

144 i‡(
eÊags
&
REG_STARTEND
) {

145 
°¨t
 = 
°rög
 + 
pm©ch
[0].
rm_so
;

146 
°›
 = 
°rög
 + 
pm©ch
[0].
rm_eo
;

148 
°¨t
 = 
°rög
;

149 
°›
 = 
°¨t
 + 
	`°æí
(start);

151 i‡(
°›
 < 
°¨t
)

152 (
REG_INVARG
);

155 i‡(
g
->
mu°
 !
NULL
) {

156 
dp
 = 
°¨t
; d∞< 
°›
; dp++)

157 i‡(*
dp
 =
g
->
mu°
[0] && 
°›
 - d∞>g->
mÀn
 &&

158 
	`memcmp
(
dp
, 
g
->
mu°
, (
size_t
)g->
mÀn
) == 0)

160 i‡(
dp
 =
°›
)

161 (
REG_NOMATCH
);

165 
m
->
g
 = g;

166 
m
->
eÊags
 =Éflags;

167 
m
->
pm©ch
 = 
NULL
;

168 
m
->
œ°pos
 = 
NULL
;

169 
m
->
ofÂ
 = 
°rög
;

170 
m
->
begöp
 = 
°¨t
;

171 
m
->
ídp
 = 
°›
;

172 
	`STATESETUP
(
m
, 4);

173 
	`SETUP
(
m
->
°
);

174 
	`SETUP
(
m
->
‰esh
);

175 
	`SETUP
(
m
->
tmp
);

176 
	`SETUP
(
m
->
em±y
);

177 
	`CLEAR
(
m
->
em±y
);

181 
ídp
 = 
	`Á°
(
m
, 
°¨t
, 
°›
, 
gf
, 
gl
);

182 i‡(
ídp
 =
NULL
) {

183 
	`‰ì
(
m
->
pm©ch
);

184 
	`‰ì
(
m
->
œ°pos
);

185 
	`STATETEARDOWN
(
m
);

186 (
REG_NOMATCH
);

188 i‡(
nm©ch
 =0 && !
g
->
backªfs
)

192 
	`as£π
(
m
->
cﬁdp
 !
NULL
);

194 
	`NOTE
("finding start");

195 
ídp
 = 
	`¶ow
(
m
, m->
cﬁdp
, 
°›
, 
gf
, 
gl
);

196 i‡(
ídp
 !
NULL
)

198 
	`as£π
(
m
->
cﬁdp
 < m->
ídp
);

199 
m
->
cﬁdp
++;

201 i‡(
nm©ch
 =1 && !
g
->
backªfs
)

205 i‡(
m
->
pm©ch
 =
NULL
)

206 
m
->
pm©ch
 = (
ªgm©ch_t
 *)
	`mÆloc
((m->
g
->
nsub
 + 1) *

207 (
ªgm©ch_t
));

208 i‡(
m
->
pm©ch
 =
NULL
) {

209 
	`STATETEARDOWN
(
m
);

210 (
REG_ESPACE
);

212 
i
 = 1; i <
m
->
g
->
nsub
; i++)

213 
m
->
pm©ch
[
i
].
rm_so
 = m->pm©ch[i].
rm_eo
 = -1;

214 i‡(!
g
->
backªfs
 && !(
m
->
eÊags
&
REG_BACKR
)) {

215 
	`NOTE
("dissecting");

216 
dp
 = 
	`dis£˘
(
m
, m->
cﬁdp
, 
ídp
, 
gf
, 
gl
);

218 i‡(
g
->
≈lus
 > 0 && 
m
->
œ°pos
 =
NULL
)

219 
m
->
œ°pos
 = (**)
	`mÆloc
((
g
->
≈lus
+1) *

221 i‡(
g
->
≈lus
 > 0 && 
m
->
œ°pos
 =
NULL
) {

222 
	`‰ì
(
m
->
pm©ch
);

223 
	`STATETEARDOWN
(
m
);

224 (
REG_ESPACE
);

226 
	`NOTE
("backref dissect");

227 
dp
 = 
	`backªf
(
m
, m->
cﬁdp
, 
ídp
, 
gf
, 
gl
, (
s›no
)0, 0);

229 i‡(
dp
 !
NULL
)

233 
	`as£π
(
g
->
backªfs
);

234 
	`as£π
(
g
->
≈lus
 =0 || 
m
->
œ°pos
 !
NULL
);

236 i‡(
dp
 !
NULL
 || 
ídp
 <
m
->
cﬁdp
)

238 
	`NOTE
("backoff");

239 
ídp
 = 
	`¶ow
(
m
, m->
cﬁdp
,Éndp-1, 
gf
, 
gl
);

240 i‡(
ídp
 =
NULL
)

243 #i‚de‡
NDEBUG


244 
i
 = 1; i <
m
->
g
->
nsub
; i++) {

245 
	`as£π
(
m
->
pm©ch
[
i
].
rm_so
 == -1);

246 
	`as£π
(
m
->
pm©ch
[
i
].
rm_eo
 == -1);

249 
	`NOTE
("backoff dissect");

250 
dp
 = 
	`backªf
(
m
, m->
cﬁdp
, 
ídp
, 
gf
, 
gl
, (
s›no
)0, 0);

252 
	`as£π
(
dp
 =
NULL
 || d∞=
ídp
);

253 i‡(
dp
 !
NULL
)

257 
	`NOTE
("falseálarm");

258 i‡(
m
->
cﬁdp
 =
°›
)

260 
°¨t
 = 
m
->
cﬁdp
 + 1;

264 i‡(
nm©ch
 > 0) {

265 
pm©ch
[0].
rm_so
 = 
m
->
cﬁdp
 - m->
ofÂ
;

266 
pm©ch
[0].
rm_eo
 = 
ídp
 - 
m
->
ofÂ
;

268 i‡(
nm©ch
 > 1) {

269 
	`as£π
(
m
->
pm©ch
 !
NULL
);

270 
i
 = 1; i < 
nm©ch
; i++)

271 i‡(
i
 <
m
->
g
->
nsub
)

272 
pm©ch
[
i
] = 
m
->pmatch[i];

274 
pm©ch
[
i
].
rm_so
 = -1;

275 
pm©ch
[
i
].
rm_eo
 = -1;

279 i‡(
m
->
pm©ch
 !
NULL
)

280 
	`‰ì
((*)
m
->
pm©ch
);

281 i‡(
m
->
œ°pos
 !
NULL
)

282 
	`‰ì
((*)
m
->
œ°pos
);

283 
	`STATETEARDOWN
(
m
);

285 
	}
}

291 
	$dis£˘
(
m©ch
 *
m
, *
°¨t
, *
°›
, 
s›no
 
°¨t°
, s›nÿ
°›°
)

293 
i
;

294 
s›no
 
ss
;

295 
s›no
 
es
;

296 *
•
;

297 *
°p
;

298 *
ª°
;

299 *
èû
;

300 
s›no
 
ssub
;

301 
s›no
 
esub
;

302 *
s•
;

303 *
£p
;

304 *
ﬁds•
;

305 *
dp
;

307 
	`AT
("diss", 
°¨t
, 
°›
, 
°¨t°
, 
°›°
);

308 
•
 = 
°¨t
;

309 
ss
 = 
°¨t°
; s†< 
°›°
; s†
es
) {

311 
es
 = 
ss
;

312 
	`OP
(
m
->
g
->
°rù
[
es
])) {

313 
OPLUS_
:

314 
OQUEST_
:

315 
es
 +
	`OPND
(
m
->
g
->
°rù
[es]);

317 
OCH_
:

318 
	`OP
(
m
->
g
->
°rù
[
es
]Ë!
O_CH
)

319 
es
 +
	`OPND
(
m
->
g
->
°rù
[es]);

322 
es
++;

325 
	`OP
(
m
->
g
->
°rù
[
ss
])) {

326 
OEND
:

327 
	`as£π
(
n›e
);

329 
OCHAR
:

330 
•
++;

332 
OBOL
:

333 
OEOL
:

334 
OBOW
:

335 
OEOW
:

337 
OANY
:

338 
OANYOF
:

339 
•
++;

341 
OBACK_
:

342 
O_BACK
:

343 
	`as£π
(
n›e
);

346 
OQUEST_
:

347 
°p
 = 
°›
;

350 
ª°
 = 
	`¶ow
(
m
, 
•
, 
°p
, 
ss
, 
es
);

351 
	`as£π
(
ª°
 !
NULL
);

353 
èû
 = 
	`¶ow
(
m
, 
ª°
, 
°›
, 
es
, 
°›°
);

354 i‡(
èû
 =
°›
)

357 
°p
 = 
ª°
 - 1;

358 
	`as£π
(
°p
 >
•
);

360 
ssub
 = 
ss
 + 1;

361 
esub
 = 
es
 - 1;

363 i‡(
	`¶ow
(
m
, 
•
, 
ª°
, 
ssub
, 
esub
Ë!
NULL
) {

364 
dp
 = 
	`dis£˘
(
m
, 
•
, 
ª°
, 
ssub
, 
esub
);

365 
	`as£π
(
dp
 =
ª°
);

367 
	`as£π
(
•
 =
ª°
);

368 
•
 = 
ª°
;

370 
OPLUS_
:

371 
°p
 = 
°›
;

374 
ª°
 = 
	`¶ow
(
m
, 
•
, 
°p
, 
ss
, 
es
);

375 
	`as£π
(
ª°
 !
NULL
);

377 
èû
 = 
	`¶ow
(
m
, 
ª°
, 
°›
, 
es
, 
°›°
);

378 i‡(
èû
 =
°›
)

381 
°p
 = 
ª°
 - 1;

382 
	`as£π
(
°p
 >
•
);

384 
ssub
 = 
ss
 + 1;

385 
esub
 = 
es
 - 1;

386 
s•
 = 
•
;

387 
ﬁds•
 = 
s•
;

389 
£p
 = 
	`¶ow
(
m
, 
s•
, 
ª°
, 
ssub
, 
esub
);

390 i‡(
£p
 =
NULL
 || sï =
s•
)

392 
ﬁds•
 = 
s•
;

393 
s•
 = 
£p
;

395 i‡(
£p
 =
NULL
) {

397 
£p
 = 
s•
;

398 
s•
 = 
ﬁds•
;

400 
	`as£π
(
£p
 =
ª°
);

401 
	`as£π
(
	`¶ow
(
m
, 
s•
, 
£p
, 
ssub
, 
esub
Ë=
ª°
);

402 
dp
 = 
	`dis£˘
(
m
, 
s•
, 
£p
, 
ssub
, 
esub
);

403 
	`as£π
(
dp
 =
£p
);

404 
•
 = 
ª°
;

406 
OCH_
:

407 
°p
 = 
°›
;

410 
ª°
 = 
	`¶ow
(
m
, 
•
, 
°p
, 
ss
, 
es
);

411 
	`as£π
(
ª°
 !
NULL
);

413 
èû
 = 
	`¶ow
(
m
, 
ª°
, 
°›
, 
es
, 
°›°
);

414 i‡(
èû
 =
°›
)

417 
°p
 = 
ª°
 - 1;

418 
	`as£π
(
°p
 >
•
);

420 
ssub
 = 
ss
 + 1;

421 
esub
 = 
ss
 + 
	`OPND
(
m
->
g
->
°rù
[ss]) - 1;

422 
	`as£π
(
	`OP
(
m
->
g
->
°rù
[
esub
]Ë=
OOR1
);

424 i‡(
	`¶ow
(
m
, 
•
, 
ª°
, 
ssub
, 
esub
) ==Ñest)

427 
	`as£π
(
	`OP
(
m
->
g
->
°rù
[
esub
]Ë=
OOR1
);

428 
esub
++;

429 
	`as£π
(
	`OP
(
m
->
g
->
°rù
[
esub
]Ë=
OOR2
);

430 
ssub
 = 
esub
 + 1;

431 
esub
 +
	`OPND
(
m
->
g
->
°rù
[esub]);

432 i‡(
	`OP
(
m
->
g
->
°rù
[
esub
]Ë=
OOR2
)

433 
esub
--;

435 
	`as£π
(
	`OP
(
m
->
g
->
°rù
[
esub
]Ë=
O_CH
);

437 
dp
 = 
	`dis£˘
(
m
, 
•
, 
ª°
, 
ssub
, 
esub
);

438 
	`as£π
(
dp
 =
ª°
);

439 
•
 = 
ª°
;

441 
O_PLUS
:

442 
O_QUEST
:

443 
OOR1
:

444 
OOR2
:

445 
O_CH
:

446 
	`as£π
(
n›e
);

448 
OLPAREN
:

449 
i
 = 
	`OPND
(
m
->
g
->
°rù
[
ss
]);

450 
	`as£π
(0 < 
i
 && i <
m
->
g
->
nsub
);

451 
m
->
pm©ch
[
i
].
rm_so
 = 
•
 - m->
ofÂ
;

453 
ORPAREN
:

454 
i
 = 
	`OPND
(
m
->
g
->
°rù
[
ss
]);

455 
	`as£π
(0 < 
i
 && i <
m
->
g
->
nsub
);

456 
m
->
pm©ch
[
i
].
rm_eo
 = 
•
 - m->
ofÂ
;

459 
	`as£π
(
n›e
);

464 
	`as£π
(
•
 =
°›
);

465 (
•
);

466 
	}
}

472 
	$backªf
(
m©ch
 *
m
, *
°¨t
, *
°›
, 
s›no
 
°¨t°
, s›nÿ
°›°
,

473 
s›no
 
Àv
, 
ªc
)

475 
i
;

476 
s›no
 
ss
;

477 *
•
;

478 
s›no
 
ssub
;

479 
s›no
 
esub
;

480 *
s•
;

481 *
dp
;

482 
size_t
 
Àn
;

483 
h¨d
;

484 
s›
 
s
;

485 
ªgoff_t
 
offßve
;

486 
c£t
 *
cs
;

488 
	`AT
("back", 
°¨t
, 
°›
, 
°¨t°
, 
°›°
);

489 
•
 = 
°¨t
;

492 
h¨d
 = 0;

493 
ss
 = 
°¨t°
; !
h¨d
 && s†< 
°›°
; ss++)

494 
	`OP
(
s
 = 
m
->
g
->
°rù
[
ss
])) {

495 
OCHAR
:

496 i‡(
•
 =
°›
 || *•++ !()
	`OPND
(
s
))

497 (
NULL
);

499 
OANY
:

500 i‡(
•
 =
°›
)

501 (
NULL
);

502 
•
++;

504 
OANYOF
:

505 
cs
 = &
m
->
g
->
£ts
[
	`OPND
(
s
)];

506 i‡(
•
 =
°›
 || !
	`CHIN
(
cs
, *sp++))

507 (
NULL
);

509 
OBOL
:

510 i‡–(
•
 =
m
->
begöp
 && !(m->
eÊags
&
REG_NOTBOL
)) ||

511 (
•
 < 
m
->
ídp
 && *(sp-1) == '\n' &&

512 (
m
->
g
->
cÊags
&
REG_NEWLINE
)) )

515 (
NULL
);

517 
OEOL
:

518 i‡–(
•
 =
m
->
ídp
 && !(m->
eÊags
&
REG_NOTEOL
)) ||

519 (
•
 < 
m
->
ídp
 && *sp == '\n' &&

520 (
m
->
g
->
cÊags
&
REG_NEWLINE
)) )

523 (
NULL
);

525 
OBOW
:

526 i‡(–(
•
 =
m
->
begöp
 && !(m->
eÊags
&
REG_NOTBOL
)) ||

527 (
•
 < 
m
->
ídp
 && *(sp-1) == '\n' &&

528 (
m
->
g
->
cÊags
&
REG_NEWLINE
)) ||

529 (
•
 > 
m
->
begöp
 &&

530 !
	`ISWORD
(*(
•
-1))) ) &&

531 (
•
 < 
m
->
ídp
 && 
	`ISWORD
(*sp)) )

534 (
NULL
);

536 
OEOW
:

537 i‡(–(
•
 =
m
->
ídp
 && !(m->
eÊags
&
REG_NOTEOL
)) ||

538 (
•
 < 
m
->
ídp
 && *sp == '\n' &&

539 (
m
->
g
->
cÊags
&
REG_NEWLINE
)) ||

540 (
•
 < 
m
->
ídp
 && !
	`ISWORD
(*sp)) ) &&

541 (
•
 > 
m
->
begöp
 && 
	`ISWORD
(*(sp-1))) )

544 (
NULL
);

546 
O_QUEST
:

548 
OOR1
:

549 
ss
++;

550 
s
 = 
m
->
g
->
°rù
[
ss
];

552 
	`as£π
(
	`OP
(
s
Ë=
OOR2
);

553 
ss
 +
	`OPND
(
s
);

554 } 
	`OP
(
s
 = 
m
->
g
->
°rù
[
ss
]Ë!
O_CH
);

558 
h¨d
 = 1;

561 i‡(!
h¨d
) {

562 i‡(
•
 !
°›
)

563 (
NULL
);

564 (
•
);

566 
ss
--;

569 
	`AT
("h¨d", 
•
, 
°›
, 
ss
, 
°›°
);

570 
s
 = 
m
->
g
->
°rù
[
ss
];

571 
	`OP
(
s
)) {

572 
OBACK_
:

573 
i
 = 
	`OPND
(
s
);

574 
	`as£π
(0 < 
i
 && i <
m
->
g
->
nsub
);

575 i‡(
m
->
pm©ch
[
i
].
rm_eo
 == -1)

576 (
NULL
);

577 
	`as£π
(
m
->
pm©ch
[
i
].
rm_so
 != -1);

578 
Àn
 = 
m
->
pm©ch
[
i
].
rm_eo
 - m->pm©ch[i].
rm_so
;

579 i‡(
Àn
 =0 && 
ªc
++ > 
MAX_RECURSION
)

580 (
NULL
);

581 
	`as£π
(
°›
 - 
m
->
begöp
 >
Àn
);

582 i‡(
•
 > 
°›
 - 
Àn
)

583 (
NULL
);

584 
s•
 = 
m
->
ofÂ
 + m->
pm©ch
[
i
].
rm_so
;

585 i‡(
	`memcmp
(
•
, 
s•
, 
Àn
) != 0)

586 (
NULL
);

587 
m
->
g
->
°rù
[
ss
] !
	`SOP
(
O_BACK
, 
i
))

588 
ss
++;

589 (
	`backªf
(
m
, 
•
+
Àn
, 
°›
, 
ss
+1, 
°›°
, 
Àv
, 
ªc
));

591 
OQUEST_
:

592 
dp
 = 
	`backªf
(
m
, 
•
, 
°›
, 
ss
+1, 
°›°
, 
Àv
, 
ªc
);

593 i‡(
dp
 !
NULL
)

594 (
dp
);

595 (
	`backªf
(
m
, 
•
, 
°›
, 
ss
+
	`OPND
(
s
)+1, 
°›°
, 
Àv
, 
ªc
));

597 
OPLUS_
:

598 
	`as£π
(
m
->
œ°pos
 !
NULL
);

599 
	`as£π
(
Àv
+1 <
m
->
g
->
≈lus
);

600 
m
->
œ°pos
[
Àv
+1] = 
•
;

601 (
	`backªf
(
m
, 
•
, 
°›
, 
ss
+1, 
°›°
, 
Àv
+1, 
ªc
));

603 
O_PLUS
:

604 i‡(
•
 =
m
->
œ°pos
[
Àv
])

605 (
	`backªf
(
m
, 
•
, 
°›
, 
ss
+1, 
°›°
, 
Àv
-1, 
ªc
));

607 
m
->
œ°pos
[
Àv
] = 
•
;

608 
dp
 = 
	`backªf
(
m
, 
•
, 
°›
, 
ss
-
	`OPND
(
s
)+1, 
°›°
, 
Àv
, 
ªc
);

609 i‡(
dp
 =
NULL
)

610 (
	`backªf
(
m
, 
•
, 
°›
, 
ss
+1, 
°›°
, 
Àv
-1, 
ªc
));

612 (
dp
);

614 
OCH_
:

615 
ssub
 = 
ss
 + 1;

616 
esub
 = 
ss
 + 
	`OPND
(
s
) - 1;

617 
	`as£π
(
	`OP
(
m
->
g
->
°rù
[
esub
]Ë=
OOR1
);

619 
dp
 = 
	`backªf
(
m
, 
•
, 
°›
, 
ssub
, 
esub
, 
Àv
, 
ªc
);

620 i‡(
dp
 !
NULL
)

621 (
dp
);

623 i‡(
	`OP
(
m
->
g
->
°rù
[
esub
]Ë=
O_CH
)

624 (
NULL
);

625 
esub
++;

626 
	`as£π
(
	`OP
(
m
->
g
->
°rù
[
esub
]Ë=
OOR2
);

627 
ssub
 = 
esub
 + 1;

628 
esub
 +
	`OPND
(
m
->
g
->
°rù
[esub]);

629 i‡(
	`OP
(
m
->
g
->
°rù
[
esub
]Ë=
OOR2
)

630 
esub
--;

632 
	`as£π
(
	`OP
(
m
->
g
->
°rù
[
esub
]Ë=
O_CH
);

635 
OLPAREN
:

636 
i
 = 
	`OPND
(
s
);

637 
	`as£π
(0 < 
i
 && i <
m
->
g
->
nsub
);

638 
offßve
 = 
m
->
pm©ch
[
i
].
rm_so
;

639 
m
->
pm©ch
[
i
].
rm_so
 = 
•
 - m->
ofÂ
;

640 
dp
 = 
	`backªf
(
m
, 
•
, 
°›
, 
ss
+1, 
°›°
, 
Àv
, 
ªc
);

641 i‡(
dp
 !
NULL
)

642 (
dp
);

643 
m
->
pm©ch
[
i
].
rm_so
 = 
offßve
;

644 (
NULL
);

646 
ORPAREN
:

647 
i
 = 
	`OPND
(
s
);

648 
	`as£π
(0 < 
i
 && i <
m
->
g
->
nsub
);

649 
offßve
 = 
m
->
pm©ch
[
i
].
rm_eo
;

650 
m
->
pm©ch
[
i
].
rm_eo
 = 
•
 - m->
ofÂ
;

651 
dp
 = 
	`backªf
(
m
, 
•
, 
°›
, 
ss
+1, 
°›°
, 
Àv
, 
ªc
);

652 i‡(
dp
 !
NULL
)

653 (
dp
);

654 
m
->
pm©ch
[
i
].
rm_eo
 = 
offßve
;

655 (
NULL
);

658 
	`as£π
(
n›e
);

663 
	`as£π
(
n›e
);

665 
	}
}

671 
	$Á°
(
m©ch
 *
m
, *
°¨t
, *
°›
, 
s›no
 
°¨t°
, s›nÿ
°›°
)

673 
°©es
 
°
 = 
m
->st;

674 
°©es
 
‰esh
 = 
m
->fresh;

675 
°©es
 
tmp
 = 
m
->tmp;

676 *
p
 = 
°¨t
;

677 
c
 = (
°¨t
 =
m
->
begöp
Ë? 
OUT
 : *(start-1);

678 
œ°c
;

679 
Êagch
;

680 
i
;

681 *
cﬁdp
;

683 
	`CLEAR
(
°
);

684 
	`SET1
(
°
, 
°¨t°
);

685 
°
 = 
	`°ï
(
m
->
g
, 
°¨t°
, 
°›°
, st, 
NOTHING
, st);

686 
	`ASSIGN
(
‰esh
, 
°
);

687 
	`SP
("°¨t", 
°
, *
p
);

688 
cﬁdp
 = 
NULL
;

691 
œ°c
 = 
c
;

692 
c
 = (
p
 =
m
->
ídp
Ë? 
OUT
 : *p;

693 i‡(
	`EQ
(
°
, 
‰esh
))

694 
cﬁdp
 = 
p
;

697 
Êagch
 = '\0';

698 
i
 = 0;

699 i‡–(
œ°c
 ='\n' && 
m
->
g
->
cÊags
&
REG_NEWLINE
) ||

700 (
œ°c
 =
OUT
 && !(
m
->
eÊags
&
REG_NOTBOL
)) ) {

701 
Êagch
 = 
BOL
;

702 
i
 = 
m
->
g
->
nbﬁ
;

704 i‡–(
c
 ='\n' && 
m
->
g
->
cÊags
&
REG_NEWLINE
) ||

705 (
c
 =
OUT
 && !(
m
->
eÊags
&
REG_NOTEOL
)) ) {

706 
Êagch
 = (Êagch =
BOL
Ë? 
BOLEOL
 : 
EOL
;

707 
i
 +
m
->
g
->
√ﬁ
;

709 i‡(
i
 != 0) {

710 ; 
i
 > 0; i--)

711 
°
 = 
	`°ï
(
m
->
g
, 
°¨t°
, 
°›°
, st, 
Êagch
, st);

712 
	`SP
("bﬁeﬁ", 
°
, 
c
);

716 i‡–(
Êagch
 =
BOL
 || (
œ°c
 !
OUT
 && !
	`ISWORD
(lastc))) &&

717 (
c
 !
OUT
 && 
	`ISWORD
(c)) ) {

718 
Êagch
 = 
BOW
;

720 i‡–(
œ°c
 !
OUT
 && 
	`ISWORD
(lastc)) &&

721 (
Êagch
 =
EOL
 || (
c
 !
OUT
 && !
	`ISWORD
(c))) ) {

722 
Êagch
 = 
EOW
;

724 i‡(
Êagch
 =
BOW
 || fœgch =
EOW
) {

725 
°
 = 
	`°ï
(
m
->
g
, 
°¨t°
, 
°›°
, st, 
Êagch
, st);

726 
	`SP
("boweow", 
°
, 
c
);

730 i‡(
	`ISSET
(
°
, 
°›°
Ë|| 
p
 =
°›
)

734 
	`ASSIGN
(
tmp
, 
°
);

735 
	`ASSIGN
(
°
, 
‰esh
);

736 
	`as£π
(
c
 !
OUT
);

737 
°
 = 
	`°ï
(
m
->
g
, 
°¨t°
, 
°›°
, 
tmp
, 
c
, st);

738 
	`SP
("a·", 
°
, 
c
);

739 
	`as£π
(
	`EQ
(
	`°ï
(
m
->
g
, 
°¨t°
, 
°›°
, 
°
, 
NOTHING
, st), st));

740 
p
++;

743 
	`as£π
(
cﬁdp
 !
NULL
);

744 
m
->
cﬁdp
 = coldp;

745 i‡(
	`ISSET
(
°
, 
°›°
))

746 (
p
+1);

748 (
NULL
);

749 
	}
}

755 
	$¶ow
(
m©ch
 *
m
, *
°¨t
, *
°›
, 
s›no
 
°¨t°
, s›nÿ
°›°
)

757 
°©es
 
°
 = 
m
->st;

758 
°©es
 
em±y
 = 
m
->empty;

759 
°©es
 
tmp
 = 
m
->tmp;

760 *
p
 = 
°¨t
;

761 
c
 = (
°¨t
 =
m
->
begöp
Ë? 
OUT
 : *(start-1);

762 
œ°c
;

763 
Êagch
;

764 
i
;

765 *
m©chp
;

767 
	`AT
("¶ow", 
°¨t
, 
°›
, 
°¨t°
, 
°›°
);

768 
	`CLEAR
(
°
);

769 
	`SET1
(
°
, 
°¨t°
);

770 
	`SP
("s°¨t", 
°
, *
p
);

771 
°
 = 
	`°ï
(
m
->
g
, 
°¨t°
, 
°›°
, st, 
NOTHING
, st);

772 
m©chp
 = 
NULL
;

775 
œ°c
 = 
c
;

776 
c
 = (
p
 =
m
->
ídp
Ë? 
OUT
 : *p;

779 
Êagch
 = '\0';

780 
i
 = 0;

781 i‡–(
œ°c
 ='\n' && 
m
->
g
->
cÊags
&
REG_NEWLINE
) ||

782 (
œ°c
 =
OUT
 && !(
m
->
eÊags
&
REG_NOTBOL
)) ) {

783 
Êagch
 = 
BOL
;

784 
i
 = 
m
->
g
->
nbﬁ
;

786 i‡–(
c
 ='\n' && 
m
->
g
->
cÊags
&
REG_NEWLINE
) ||

787 (
c
 =
OUT
 && !(
m
->
eÊags
&
REG_NOTEOL
)) ) {

788 
Êagch
 = (Êagch =
BOL
Ë? 
BOLEOL
 : 
EOL
;

789 
i
 +
m
->
g
->
√ﬁ
;

791 i‡(
i
 != 0) {

792 ; 
i
 > 0; i--)

793 
°
 = 
	`°ï
(
m
->
g
, 
°¨t°
, 
°›°
, st, 
Êagch
, st);

794 
	`SP
("sbﬁeﬁ", 
°
, 
c
);

798 i‡–(
Êagch
 =
BOL
 || (
œ°c
 !
OUT
 && !
	`ISWORD
(lastc))) &&

799 (
c
 !
OUT
 && 
	`ISWORD
(c)) ) {

800 
Êagch
 = 
BOW
;

802 i‡–(
œ°c
 !
OUT
 && 
	`ISWORD
(lastc)) &&

803 (
Êagch
 =
EOL
 || (
c
 !
OUT
 && !
	`ISWORD
(c))) ) {

804 
Êagch
 = 
EOW
;

806 i‡(
Êagch
 =
BOW
 || fœgch =
EOW
) {

807 
°
 = 
	`°ï
(
m
->
g
, 
°¨t°
, 
°›°
, st, 
Êagch
, st);

808 
	`SP
("sboweow", 
°
, 
c
);

812 i‡(
	`ISSET
(
°
, 
°›°
))

813 
m©chp
 = 
p
;

814 i‡(
	`EQ
(
°
, 
em±y
Ë|| 
p
 =
°›
)

818 
	`ASSIGN
(
tmp
, 
°
);

819 
	`ASSIGN
(
°
, 
em±y
);

820 
	`as£π
(
c
 !
OUT
);

821 
°
 = 
	`°ï
(
m
->
g
, 
°¨t°
, 
°›°
, 
tmp
, 
c
, st);

822 
	`SP
("ß·", 
°
, 
c
);

823 
	`as£π
(
	`EQ
(
	`°ï
(
m
->
g
, 
°¨t°
, 
°›°
, 
°
, 
NOTHING
, st), st));

824 
p
++;

827 (
m©chp
);

828 
	}
}

834 
°©es


835 
	$°ï
(
ª_guts
 *
g
,

836 
s›no
 
°¨t
,

837 
s›no
 
°›
,

838 
°©es
 
bef
,

839 
ch
,

840 
°©es
 
a·
)

842 
c£t
 *
cs
;

843 
s›
 
s
;

844 
s›no
 
pc
;

845 
⁄e°©e
 
hîe
;

846 
s›no
 
look
;

847 
i
;

849 
pc
 = 
°¨t
, 
	`INIT
(
hîe
,Öc);Ö¯!
°›
;Öc++, 
	`INC
(here)) {

850 
s
 = 
g
->
°rù
[
pc
];

851 
	`OP
(
s
)) {

852 
OEND
:

853 
	`as£π
(
pc
 =
°›
-1);

855 
OCHAR
:

857 
	`as£π
(!
	`NONCHAR
(
ch
Ë|| ch !()
	`OPND
(
s
));

858 i‡(
ch
 =()
	`OPND
(
s
))

859 
	`FWD
(
a·
, 
bef
, 1);

861 
OBOL
:

862 i‡(
ch
 =
BOL
 || ch =
BOLEOL
)

863 
	`FWD
(
a·
, 
bef
, 1);

865 
OEOL
:

866 i‡(
ch
 =
EOL
 || ch =
BOLEOL
)

867 
	`FWD
(
a·
, 
bef
, 1);

869 
OBOW
:

870 i‡(
ch
 =
BOW
)

871 
	`FWD
(
a·
, 
bef
, 1);

873 
OEOW
:

874 i‡(
ch
 =
EOW
)

875 
	`FWD
(
a·
, 
bef
, 1);

877 
OANY
:

878 i‡(!
	`NONCHAR
(
ch
))

879 
	`FWD
(
a·
, 
bef
, 1);

881 
OANYOF
:

882 
cs
 = &
g
->
£ts
[
	`OPND
(
s
)];

883 i‡(!
	`NONCHAR
(
ch
Ë&& 
	`CHIN
(
cs
, ch))

884 
	`FWD
(
a·
, 
bef
, 1);

886 
OBACK_
:

887 
O_BACK
:

888 
	`FWD
(
a·
,áft, 1);

890 
OPLUS_
:

891 
	`FWD
(
a·
,áft, 1);

893 
O_PLUS
:

894 
	`FWD
(
a·
,áft, 1);

895 
i
 = 
	`ISSETBACK
(
a·
, 
	`OPND
(
s
));

896 
	`BACK
(
a·
,á·, 
	`OPND
(
s
));

897 i‡(!
i
 && 
	`ISSETBACK
(
a·
, 
	`OPND
(
s
))) {

899 
pc
 -
	`OPND
(
s
) + 1;

900 
	`INIT
(
hîe
, 
pc
);

903 
OQUEST_
:

904 
	`FWD
(
a·
,áft, 1);

905 
	`FWD
(
a·
,á·, 
	`OPND
(
s
));

907 
O_QUEST
:

908 
	`FWD
(
a·
,áft, 1);

910 
OLPAREN
:

911 
ORPAREN
:

912 
	`FWD
(
a·
,áft, 1);

914 
OCH_
:

915 
	`FWD
(
a·
,áft, 1);

916 
	`as£π
(
	`OP
(
g
->
°rù
[
pc
+
	`OPND
(
s
)]Ë=
OOR2
);

917 
	`FWD
(
a·
,á·, 
	`OPND
(
s
));

919 
OOR1
:

920 i‡(
	`ISSTATEIN
(
a·
, 
hîe
)) {

921 
look
 = 1;

922 
	`OP
(
s
 = 
g
->
°rù
[
pc
+
look
]Ë!
O_CH
;

923 
look
 +
	`OPND
(
s
))

924 
	`as£π
(
	`OP
(
s
Ë=
OOR2
);

925 
	`FWD
(
a·
,á·, 
look
);

928 
OOR2
:

929 
	`FWD
(
a·
,áft, 1);

930 i‡(
	`OP
(
g
->
°rù
[
pc
+
	`OPND
(
s
)]Ë!
O_CH
) {

931 
	`as£π
(
	`OP
(
g
->
°rù
[
pc
+
	`OPND
(
s
)]Ë=
OOR2
);

932 
	`FWD
(
a·
,á·, 
	`OPND
(
s
));

935 
O_CH
:

936 
	`FWD
(
a·
,áft, 1);

939 
	`as£π
(
n›e
);

944 (
a·
);

945 
	}
}

947 #ifde‡
REDEBUG


952 
	$¥öt
(
m©ch
 *
m
, *
ˇ±i⁄
, 
°©es
 
°
, 
ch
, 
FILE
 *
d
)

954 
ª_guts
 *
g
 = 
m
->g;

955 
i
;

956 
fú°
 = 1;

958 i‡(!(
m
->
eÊags
&
REG_TRACE
))

961 ()
	`Ârötf
(
d
, "%s", 
ˇ±i⁄
);

962 i‡(
ch
 != '\0')

963 ()
	`Ârötf
(
d
, " %s", 
	`pch¨
(
ch
));

964 
i
 = 0; i < 
g
->
n°©es
; i++)

965 i‡(
	`ISSET
(
°
, 
i
)) {

966 ()
	`Ârötf
(
d
, "%s%d", (
fú°
Ë? "\t" : ", ", 
i
);

967 
fú°
 = 0;

969 ()
	`Ârötf
(
d
, "\n");

970 
	}
}

976 
	$©
(
m©ch
 *
m
, *
tôÀ
, *
°¨t
, *
°›
, 
s›no
 
°¨t°
,

977 
s›no
 
°›°
)

979 i‡(!(
m
->
eÊags
&
REG_TRACE
))

982 ()
	`¥ötf
("%†%s-", 
tôÀ
, 
	`pch¨
(*
°¨t
));

983 ()
	`¥ötf
("%†", 
	`pch¨
(*
°›
));

984 ()
	`¥ötf
("%ld-%ld\n", ()
°¨t°
, ()
°›°
);

985 
	}
}

987 #i‚de‡
PCHARDONE


988 
	#PCHARDONE


	)

998 
	$pch¨
(
ch
)

1000 
pbuf
[10];

1002 i‡(
	`i•röt
(
ch
) || ch == ' ')

1003 ()
	`¢¥ötf
(
pbuf
, Öbuf, "%c", 
ch
);

1005 ()
	`¢¥ötf
(
pbuf
, Öbuf, "\\%o", 
ch
);

1006 (
pbuf
);

1007 
	}
}

1011 #unde‡
m©chî


1012 #unde‡
Á°


1013 #unde‡
¶ow


1014 #unde‡
dis£˘


1015 #unde‡
backªf


1016 #unde‡
°ï


1017 #unde‡
¥öt


1018 #unde‡
©


1019 #unde‡
m©ch


1020 #unde‡
n›e


	@android/regex/regcomp.c

37 
	~<sys/ty≥s.h
>

38 
	~<°dio.h
>

39 
	~<°rög.h
>

40 
	~<˘y≥.h
>

41 
	~<limôs.h
>

42 
	~<°dlib.h
>

43 
	~<ªgex.h
>

45 
	~"utûs.h
"

46 
	~"ªgex2.h
"

48 
	~"c˛ass.h
"

49 
	~"˙ame.h
"

55 
	s∑r£
 {

56 *
	m√xt
;

57 *
	míd
;

58 
	mîr‹
;

59 
s›
 *
	m°rù
;

60 
s›no
 
	mssize
;

61 
s›no
 
	m¶í
;

62 
	mncßŒoc
;

63 
ª_guts
 *
	mg
;

64 
	#NPAREN
 10

	)

65 
s›no
 
	mpbegö
[
NPAREN
];

66 
s›no
 
	m≥nd
[
NPAREN
];

69 
p_îe
(
∑r£
 *, );

70 
p_îe_exp
(
∑r£
 *);

71 
p_°r
(
∑r£
 *);

72 
p_bª
(
∑r£
 *, , );

73 
p_simp_ª
(
∑r£
 *, );

74 
p_cou¡
(
∑r£
 *);

75 
p_bøckë
(
∑r£
 *);

76 
p_b_ãrm
(
∑r£
 *, 
c£t
 *);

77 
p_b_c˛ass
(
∑r£
 *, 
c£t
 *);

78 
p_b_e˛ass
(
∑r£
 *, 
c£t
 *);

79 
p_b_symbﬁ
(
∑r£
 *);

80 
p_b_cﬁl_ñem
(
∑r£
 *, );

81 
Ÿhîˇ£
();

82 
bŸhˇ£s
(
∑r£
 *, );

83 
‹dö¨y
(
∑r£
 *, );

84 
n⁄√wlöe
(
∑r£
 *);

85 
ª≥©
(
∑r£
 *, 
s›no
, , );

86 
£ãº
(
∑r£
 *, );

87 
c£t
 *
Æloc£t
(
∑r£
 *);

88 
‰ì£t
(
∑r£
 *, 
c£t
 *);

89 
‰ìze£t
(
∑r£
 *, 
c£t
 *);

90 
fú°ch
(
∑r£
 *, 
c£t
 *);

91 
nch
(
∑r£
 *, 
c£t
 *);

92 
mˇdd
(
∑r£
 *, 
c£t
 *, *);

93 
mcövît
(
∑r£
 *, 
c£t
 *);

94 
mcˇ£
(
∑r£
 *, 
c£t
 *);

95 
isö£ts
(
ª_guts
 *, );

96 
ßme£ts
(
ª_guts
 *, , );

97 
ˇãg‹ize
(
∑r£
 *, 
ª_guts
 *);

98 
s›no
 
du∂
(
∑r£
 *, sopno, sopno);

99 
d€mô
(
∑r£
 *, 
s›
, 
size_t
);

100 
doö£π
(
∑r£
 *, 
s›
, 
size_t
, 
s›no
);

101 
dofwd
(
∑r£
 *, 
s›no
, 
s›
);

102 
íœrge
(
∑r£
 *, 
s›no
);

103 
°rù¢ug
(
∑r£
 *, 
ª_guts
 *);

104 
födmu°
(
∑r£
 *, 
ª_guts
 *);

105 
s›no
 
∂uscou¡
(
∑r£
 *, 
ª_guts
 *);

107 
	gnuls
[10];

113 
	#PEEK
(Ë(*
p
->
√xt
)

	)

114 
	#PEEK2
(Ë(*(
p
->
√xt
+1))

	)

115 
	#MORE
(Ë(
p
->
√xt
 <Ö->
íd
)

	)

116 
	#MORE2
(Ë(
p
->
√xt
+1 <Ö->
íd
)

	)

117 
	#SEE
(
c
Ë(
	`MORE
(Ë&& 
	`PEEK
(Ë=(c))

	)

118 
	#SEETWO
(
a
, 
b
Ë(
	`MORE
(Ë&& 
	`MORE2
(Ë&& 
	`PEEK
(Ë=◊Ë&& 
	`PEEK2
(Ë=(b))

	)

119 
	#EAT
(
c
Ë((
	`SEE
(c)Ë? (
	`NEXT
(), 1Ë: 0)

	)

120 
	#EATTWO
(
a
, 
b
Ë((
	`SEETWO
◊, b)Ë? (
	`NEXT2
(), 1Ë: 0)

	)

121 
	#NEXT
(Ë(
p
->
√xt
++)

	)

122 
	#NEXT2
(Ë(
p
->
√xt
 +2)

	)

123 
	#NEXTn
(
n
Ë(
p
->
√xt
 +“))

	)

124 
	#GETNEXT
(Ë(*
p
->
√xt
++)

	)

125 
	#SETERROR
(
e
Ë
	`£ãº
(
p
, (e))

	)

126 
	#REQUIRE
(
co
, 
e
Ë((coË|| 
	`SETERROR
”))

	)

127 
	#MUSTSEE
(
c
, 
e
Ë(
	`REQUIRE
(
	`MORE
(Ë&& 
	`PEEK
(Ë=(c),É))

	)

128 
	#MUSTEAT
(
c
, 
e
Ë(
	`REQUIRE
(
	`MORE
(Ë&& 
	`GETNEXT
(Ë=(c),É))

	)

129 
	#MUSTNOTSEE
(
c
, 
e
Ë(
	`REQUIRE
(!
	`MORE
(Ë|| 
	`PEEK
(Ë!(c),É))

	)

130 
	#EMIT
(
›
, 
s›nd
Ë
	`d€mô
(
p
, (
s›
)(›), (
size_t
)(s›nd))

	)

131 
	#INSERT
(
›
, 
pos
Ë
	`doö£π
(
p
, (
s›
)(›), 
	`HERE
()-’os)+1,Öos)

	)

132 
	#AHEAD
(
pos
Ë
	`dofwd
(
p
,Öos, 
	`HERE
()-’os))

	)

133 
	#ASTERN
(
s›
, 
pos
Ë
	`EMIT
(s›, 
	`HERE
()-pos)

	)

134 
	#HERE
(Ë(
p
->
¶í
)

	)

135 
	#THERE
(Ë(
p
->
¶í
 - 1)

	)

136 
	#THERETHERE
(Ë(
p
->
¶í
 - 2)

	)

137 
	#DROP
(
n
Ë(
p
->
¶í
 -“))

	)

139 #i‚de‡
NDEBUG


140 
	g√vî
 = 0;

142 
	#√vî
 0

	)

149 
	$ªgcomp
(
ªgex_t
 *
¥eg
, c⁄° *
∑âîn
, 
cÊags
)

151 
∑r£
 
∑
;

152 
ª_guts
 *
g
;

153 
∑r£
 *
p
 = &
∑
;

154 
i
;

155 
size_t
 
Àn
;

156 #ifde‡
REDEBUG


157 
	#GOODFLAGS
(
f
Ë(f)

	)

159 
	#GOODFLAGS
(
f
Ë((f)&~
REG_DUMP
)

	)

162 
cÊags
 = 
	`GOODFLAGS
(cflags);

163 i‡((
cÊags
&
REG_EXTENDED
Ë&& (cÊags&
REG_NOSPEC
))

164 (
REG_INVARG
);

166 i‡(
cÊags
&
REG_PEND
) {

167 i‡(
¥eg
->
ª_ídp
 < 
∑âîn
)

168 (
REG_INVARG
);

169 
Àn
 = 
¥eg
->
ª_ídp
 - 
∑âîn
;

171 
Àn
 = 
	`°æí
((*)
∑âîn
);

174 
g
 = (
ª_guts
 *)
	`mÆloc
((re_guts) +

175 (
NC
-1)*(
ˇt_t
));

176 i‡(
g
 =
NULL
)

177 (
REG_ESPACE
);

178 
p
->
ssize
 = 
Àn
/(
size_t
)2*(size_t)3 + (size_t)1;

179 
p
->
°rù
 = (
s›
 *)
	`ˇŒoc
’->
ssize
, (sop));

180 
p
->
¶í
 = 0;

181 i‡(
p
->
°rù
 =
NULL
) {

182 
	`‰ì
((*)
g
);

183 (
REG_ESPACE
);

187 
p
->
g
 = g;

188 
p
->
√xt
 = (*)
∑âîn
;

189 
p
->
íd
 =Ö->
√xt
 + 
Àn
;

190 
p
->
îr‹
 = 0;

191 
p
->
ncßŒoc
 = 0;

192 
i
 = 0; i < 
NPAREN
; i++) {

193 
p
->
pbegö
[
i
] = 0;

194 
p
->
≥nd
[
i
] = 0;

196 
g
->
c£tsize
 = 
NC
;

197 
g
->
£ts
 = 
NULL
;

198 
g
->
£tbôs
 = 
NULL
;

199 
g
->
nc£ts
 = 0;

200 
g
->
cÊags
 = cflags;

201 
g
->
iÊags
 = 0;

202 
g
->
nbﬁ
 = 0;

203 
g
->
√ﬁ
 = 0;

204 
g
->
mu°
 = 
NULL
;

205 
g
->
mÀn
 = 0;

206 
g
->
nsub
 = 0;

207 
g
->
nˇãg‹õs
 = 1;

208 
g
->
ˇãg‹õs
 = &g->
ˇt•a˚
[-(
CHAR_MIN
)];

209 (Ë
	`mem£t
((*)
g
->
ˇt•a˚
, 0, 
NC
*(
ˇt_t
));

210 
g
->
backªfs
 = 0;

213 
	`EMIT
(
OEND
, 0);

214 
g
->
fú°°©e
 = 
	`THERE
();

215 i‡(
cÊags
&
REG_EXTENDED
)

216 
	`p_îe
(
p
, 
OUT
);

217 i‡(
cÊags
&
REG_NOSPEC
)

218 
	`p_°r
(
p
);

220 
	`p_bª
(
p
, 
OUT
, OUT);

221 
	`EMIT
(
OEND
, 0);

222 
g
->
œ°°©e
 = 
	`THERE
();

225 
	`ˇãg‹ize
(
p
, 
g
);

226 
	`°rù¢ug
(
p
, 
g
);

227 
	`födmu°
(
p
, 
g
);

228 
g
->
≈lus
 = 
	`∂uscou¡
(
p
, g);

229 
g
->
magic
 = 
MAGIC2
;

230 
¥eg
->
ª_nsub
 = 
g
->
nsub
;

231 
¥eg
->
ª_g
 = 
g
;

232 
¥eg
->
ª_magic
 = 
MAGIC1
;

233 #i‚de‡
REDEBUG


235 i‡(
g
->
iÊags
&
BAD
)

236 
	`SETERROR
(
REG_ASSERT
);

240 i‡(
p
->
îr‹
 != 0)

241 
	`ªg‰ì
(
¥eg
);

242 (
p
->
îr‹
);

243 
	}
}

249 
	$p_îe
(
∑r£
 *
p
, 
°›
)

251 
c
;

252 
s›no
 
¥evback
;

253 
s›no
 
¥evfwd
;

254 
s›no
 
c⁄c
;

255 
fú°
 = 1;

259 
c⁄c
 = 
	`HERE
();

260 
	`MORE
(Ë&& (
c
 = 
	`PEEK
()Ë!'|' && c !
°›
)

261 
	`p_îe_exp
(
p
);

262 
	`REQUIRE
(
	`HERE
(Ë!
c⁄c
, 
REG_EMPTY
);

264 i‡(!
	`EAT
('|'))

267 i‡(
fú°
) {

268 
	`INSERT
(
OCH_
, 
c⁄c
);

269 
¥evfwd
 = 
c⁄c
;

270 
¥evback
 = 
c⁄c
;

271 
fú°
 = 0;

273 
	`ASTERN
(
OOR1
, 
¥evback
);

274 
¥evback
 = 
	`THERE
();

275 
	`AHEAD
(
¥evfwd
);

276 
¥evfwd
 = 
	`HERE
();

277 
	`EMIT
(
OOR2
, 0);

280 i‡(!
fú°
) {

281 
	`AHEAD
(
¥evfwd
);

282 
	`ASTERN
(
O_CH
, 
¥evback
);

285 
	`as£π
(!
	`MORE
(Ë|| 
	`SEE
(
°›
));

286 
	}
}

292 
	$p_îe_exp
(
∑r£
 *
p
)

294 
c
;

295 
s›no
 
pos
;

296 
cou¡
;

297 
cou¡2
;

298 
s›no
 
subno
;

299 
wasˇªt
 = 0;

301 
	`as£π
(
	`MORE
());

302 
c
 = 
	`GETNEXT
();

304 
pos
 = 
	`HERE
();

305 
c
) {

307 
	`REQUIRE
(
	`MORE
(), 
REG_EPAREN
);

308 
p
->
g
->
nsub
++;

309 
subno
 = 
p
->
g
->
nsub
;

310 i‡(
subno
 < 
NPAREN
)

311 
p
->
pbegö
[
subno
] = 
	`HERE
();

312 
	`EMIT
(
OLPAREN
, 
subno
);

313 i‡(!
	`SEE
(')'))

314 
	`p_îe
(
p
, ')');

315 i‡(
subno
 < 
NPAREN
) {

316 
p
->
≥nd
[
subno
] = 
	`HERE
();

317 
	`as£π
(
p
->
≥nd
[
subno
] != 0);

319 
	`EMIT
(
ORPAREN
, 
subno
);

320 
	`MUSTEAT
(')', 
REG_EPAREN
);

322 #i‚de‡
POSIX_MISTAKE


331 
	`SETERROR
(
REG_EPAREN
);

335 
	`EMIT
(
OBOL
, 0);

336 
p
->
g
->
iÊags
 |
USEBOL
;

337 
p
->
g
->
nbﬁ
++;

338 
wasˇªt
 = 1;

341 
	`EMIT
(
OEOL
, 0);

342 
p
->
g
->
iÊags
 |
USEEOL
;

343 
p
->
g
->
√ﬁ
++;

346 
	`SETERROR
(
REG_EMPTY
);

351 
	`SETERROR
(
REG_BADRPT
);

354 i‡(
p
->
g
->
cÊags
&
REG_NEWLINE
)

355 
	`n⁄√wlöe
(
p
);

357 
	`EMIT
(
OANY
, 0);

360 
	`p_bøckë
(
p
);

363 
	`REQUIRE
(
	`MORE
(), 
REG_EESCAPE
);

364 
c
 = 
	`GETNEXT
();

365 
	`‹dö¨y
(
p
, 
c
);

368 
	`REQUIRE
(!
	`MORE
(Ë|| !
	`isdigô
((
uch
)
	`PEEK
()), 
REG_BADRPT
);

371 
	`‹dö¨y
(
p
, 
c
);

375 i‡(!
	`MORE
())

377 
c
 = 
	`PEEK
();

379 i‡(!–
c
 == '*' || c == '+' || c == '?' ||

380 (
c
 ='{' && 
	`MORE2
(Ë&& 
	`isdigô
((
uch
)
	`PEEK2
())) ))

382 
	`NEXT
();

384 
	`REQUIRE
(!
wasˇªt
, 
REG_BADRPT
);

385 
c
) {

388 
	`INSERT
(
OPLUS_
, 
pos
);

389 
	`ASTERN
(
O_PLUS
, 
pos
);

390 
	`INSERT
(
OQUEST_
, 
pos
);

391 
	`ASTERN
(
O_QUEST
, 
pos
);

394 
	`INSERT
(
OPLUS_
, 
pos
);

395 
	`ASTERN
(
O_PLUS
, 
pos
);

399 
	`INSERT
(
OCH_
, 
pos
);

400 
	`ASTERN
(
OOR1
, 
pos
);

401 
	`AHEAD
(
pos
);

402 
	`EMIT
(
OOR2
, 0);

403 
	`AHEAD
(
	`THERE
());

404 
	`ASTERN
(
O_CH
, 
	`THERETHERE
());

407 
cou¡
 = 
	`p_cou¡
(
p
);

408 i‡(
	`EAT
(',')) {

409 i‡(
	`isdigô
((
uch
)
	`PEEK
())) {

410 
cou¡2
 = 
	`p_cou¡
(
p
);

411 
	`REQUIRE
(
cou¡
 <
cou¡2
, 
REG_BADBR
);

413 
cou¡2
 = 
INFINITY
;

415 
cou¡2
 = 
cou¡
;

416 
	`ª≥©
(
p
, 
pos
, 
cou¡
, 
cou¡2
);

417 i‡(!
	`EAT
('}')) {

418 
	`MORE
(Ë&& 
	`PEEK
() != '}')

419 
	`NEXT
();

420 
	`REQUIRE
(
	`MORE
(), 
REG_EBRACE
);

421 
	`SETERROR
(
REG_BADBR
);

426 i‡(!
	`MORE
())

428 
c
 = 
	`PEEK
();

429 i‡(!–
c
 == '*' || c == '+' || c == '?' ||

430 (
c
 ='{' && 
	`MORE2
(Ë&& 
	`isdigô
((
uch
)
	`PEEK2
())) ) )

432 
	`SETERROR
(
REG_BADRPT
);

433 
	}
}

439 
	$p_°r
(
∑r£
 *
p
)

441 
	`REQUIRE
(
	`MORE
(), 
REG_EMPTY
);

442 
	`MORE
())

443 
	`‹dö¨y
(
p
, 
	`GETNEXT
());

444 
	}
}

457 
	$p_bª
(
∑r£
 *
p
,

458 
íd1
,

459 
íd2
)

461 
s›no
 
°¨t
 = 
	`HERE
();

462 
fú°
 = 1;

463 
wasdﬁœr
 = 0;

465 i‡(
	`EAT
('^')) {

466 
	`EMIT
(
OBOL
, 0);

467 
p
->
g
->
iÊags
 |
USEBOL
;

468 
p
->
g
->
nbﬁ
++;

470 
	`MORE
(Ë&& !
	`SEETWO
(
íd1
, 
íd2
)) {

471 
wasdﬁœr
 = 
	`p_simp_ª
(
p
, 
fú°
);

472 
fú°
 = 0;

474 i‡(
wasdﬁœr
) {

475 
	`DROP
(1);

476 
	`EMIT
(
OEOL
, 0);

477 
p
->
g
->
iÊags
 |
USEEOL
;

478 
p
->
g
->
√ﬁ
++;

481 
	`REQUIRE
(
	`HERE
(Ë!
°¨t
, 
REG_EMPTY
);

482 
	}
}

488 
	$p_simp_ª
(
∑r£
 *
p
,

489 
°¨‹dö¨y
)

491 
c
;

492 
cou¡
;

493 
cou¡2
;

494 
s›no
 
pos
;

495 
i
;

496 
s›no
 
subno
;

497 
	#BACKSL
 (1<<
CHAR_BIT
)

	)

499 
pos
 = 
	`HERE
();

501 
	`as£π
(
	`MORE
());

502 
c
 = 
	`GETNEXT
();

503 i‡(
c
 == '\\') {

504 
	`REQUIRE
(
	`MORE
(), 
REG_EESCAPE
);

505 
c
 = 
BACKSL
 | 
	`GETNEXT
();

507 
c
) {

509 i‡(
p
->
g
->
cÊags
&
REG_NEWLINE
)

510 
	`n⁄√wlöe
(
p
);

512 
	`EMIT
(
OANY
, 0);

515 
	`p_bøckë
(
p
);

517 
BACKSL
|'{':

518 
	`SETERROR
(
REG_BADRPT
);

520 
BACKSL
|'(':

521 
p
->
g
->
nsub
++;

522 
subno
 = 
p
->
g
->
nsub
;

523 i‡(
subno
 < 
NPAREN
)

524 
p
->
pbegö
[
subno
] = 
	`HERE
();

525 
	`EMIT
(
OLPAREN
, 
subno
);

527 i‡(
	`MORE
(Ë&& !
	`SEETWO
('\\', ')'))

528 
	`p_bª
(
p
, '\\', ')');

529 i‡(
subno
 < 
NPAREN
) {

530 
p
->
≥nd
[
subno
] = 
	`HERE
();

531 
	`as£π
(
p
->
≥nd
[
subno
] != 0);

533 
	`EMIT
(
ORPAREN
, 
subno
);

534 
	`REQUIRE
(
	`EATTWO
('\\', ')'), 
REG_EPAREN
);

536 
BACKSL
|')':

537 
BACKSL
|'}':

538 
	`SETERROR
(
REG_EPAREN
);

540 
BACKSL
|'1':

541 
BACKSL
|'2':

542 
BACKSL
|'3':

543 
BACKSL
|'4':

544 
BACKSL
|'5':

545 
BACKSL
|'6':

546 
BACKSL
|'7':

547 
BACKSL
|'8':

548 
BACKSL
|'9':

549 
i
 = (
c
&~
BACKSL
) - '0';

550 
	`as£π
(
i
 < 
NPAREN
);

551 i‡(
p
->
≥nd
[
i
] != 0) {

552 
	`as£π
(
i
 <
p
->
g
->
nsub
);

553 
	`EMIT
(
OBACK_
, 
i
);

554 
	`as£π
(
p
->
pbegö
[
i
] != 0);

555 
	`as£π
(
	`OP
(
p
->
°rù
[p->
pbegö
[
i
]]Ë=
OLPAREN
);

556 
	`as£π
(
	`OP
(
p
->
°rù
[p->
≥nd
[
i
]]Ë=
ORPAREN
);

557 (Ë
	`du∂
(
p
,Ö->
pbegö
[
i
]+1,Ö->
≥nd
[i]);

558 
	`EMIT
(
O_BACK
, 
i
);

560 
	`SETERROR
(
REG_ESUBREG
);

561 
p
->
g
->
backªfs
 = 1;

564 
	`REQUIRE
(
°¨‹dö¨y
, 
REG_BADRPT
);

567 
	`‹dö¨y
(
p
, ()
c
);

571 i‡(
	`EAT
('*')) {

573 
	`INSERT
(
OPLUS_
, 
pos
);

574 
	`ASTERN
(
O_PLUS
, 
pos
);

575 
	`INSERT
(
OQUEST_
, 
pos
);

576 
	`ASTERN
(
O_QUEST
, 
pos
);

577 } i‡(
	`EATTWO
('\\', '{')) {

578 
cou¡
 = 
	`p_cou¡
(
p
);

579 i‡(
	`EAT
(',')) {

580 i‡(
	`MORE
(Ë&& 
	`isdigô
((
uch
)
	`PEEK
())) {

581 
cou¡2
 = 
	`p_cou¡
(
p
);

582 
	`REQUIRE
(
cou¡
 <
cou¡2
, 
REG_BADBR
);

584 
cou¡2
 = 
INFINITY
;

586 
cou¡2
 = 
cou¡
;

587 
	`ª≥©
(
p
, 
pos
, 
cou¡
, 
cou¡2
);

588 i‡(!
	`EATTWO
('\\', '}')) {

589 
	`MORE
(Ë&& !
	`SEETWO
('\\', '}'))

590 
	`NEXT
();

591 
	`REQUIRE
(
	`MORE
(), 
REG_EBRACE
);

592 
	`SETERROR
(
REG_BADBR
);

594 } i‡(
c
 == '$')

598 
	}
}

604 
	$p_cou¡
(
∑r£
 *
p
)

606 
cou¡
 = 0;

607 
ndigôs
 = 0;

609 
	`MORE
(Ë&& 
	`isdigô
((
uch
)
	`PEEK
()Ë&& 
cou¡
 <
DUPMAX
) {

610 
cou¡
 = cou¡*10 + (
	`GETNEXT
() - '0');

611 
ndigôs
++;

614 
	`REQUIRE
(
ndigôs
 > 0 && 
cou¡
 <
DUPMAX
, 
REG_BADBR
);

615 (
cou¡
);

616 
	}
}

625 
	$p_bøckë
(
∑r£
 *
p
)

627 
c£t
 *
cs
;

628 
övît
 = 0;

631 i‡(
p
->
√xt
 + 5 <Ö->
íd
 && 
	`°∫cmp
(p->next, "[:<:]]", 6) == 0) {

632 
	`EMIT
(
OBOW
, 0);

633 
	`NEXTn
(6);

636 i‡(
p
->
√xt
 + 5 <Ö->
íd
 && 
	`°∫cmp
(p->next, "[:>:]]", 6) == 0) {

637 
	`EMIT
(
OEOW
, 0);

638 
	`NEXTn
(6);

642 i‡((
cs
 = 
	`Æloc£t
(
p
)Ë=
NULL
) {

647 i‡(
	`EAT
('^'))

648 
övît
++;

649 i‡(
	`EAT
(']'))

650 
	`CHadd
(
cs
, ']');

651 i‡(
	`EAT
('-'))

652 
	`CHadd
(
cs
, '-');

653 
	`MORE
(Ë&& 
	`PEEK
(Ë!']' && !
	`SEETWO
('-', ']'))

654 
	`p_b_ãrm
(
p
, 
cs
);

655 i‡(
	`EAT
('-'))

656 
	`CHadd
(
cs
, '-');

657 
	`MUSTEAT
(']', 
REG_EBRACK
);

659 i‡(
p
->
îr‹
 != 0) {

660 
	`‰ì£t
(
p
, 
cs
);

664 i‡(
p
->
g
->
cÊags
&
REG_ICASE
) {

665 
i
;

666 
ci
;

668 
i
 = 
p
->
g
->
c£tsize
 - 1; i >= 0; i--)

669 i‡(
	`CHIN
(
cs
, 
i
Ë&& 
	`ißÕha
(i)) {

670 
ci
 = 
	`Ÿhîˇ£
(
i
);

671 i‡(
ci
 !
i
)

672 
	`CHadd
(
cs
, 
ci
);

674 i‡(
cs
->
mu…is
 !
NULL
)

675 
	`mcˇ£
(
p
, 
cs
);

677 i‡(
övît
) {

678 
i
;

680 
i
 = 
p
->
g
->
c£tsize
 - 1; i >= 0; i--)

681 i‡(
	`CHIN
(
cs
, 
i
))

682 
	`CHsub
(
cs
, 
i
);

684 
	`CHadd
(
cs
, 
i
);

685 i‡(
p
->
g
->
cÊags
&
REG_NEWLINE
)

686 
	`CHsub
(
cs
, '\n');

687 i‡(
cs
->
mu…is
 !
NULL
)

688 
	`mcövît
(
p
, 
cs
);

691 
	`as£π
(
cs
->
mu…is
 =
NULL
);

693 i‡(
	`nch
(
p
, 
cs
) == 1) {

694 
	`‹dö¨y
(
p
, 
	`fú°ch
’, 
cs
));

695 
	`‰ì£t
(
p
, 
cs
);

697 
	`EMIT
(
OANYOF
, 
	`‰ìze£t
(
p
, 
cs
));

698 
	}
}

704 
	$p_b_ãrm
(
∑r£
 *
p
, 
c£t
 *
cs
)

706 
c
;

707 
°¨t
, 
föish
;

708 
i
;

711 (
	`MORE
()Ë? 
	`PEEK
() : '\0') {

713 
c
 = (
	`MORE2
()Ë? 
	`PEEK2
() : '\0';

716 
	`SETERROR
(
REG_ERANGE
);

720 
c
 = '\0';

724 
c
) {

726 
	`NEXT2
();

727 
	`REQUIRE
(
	`MORE
(), 
REG_EBRACK
);

728 
c
 = 
	`PEEK
();

729 
	`REQUIRE
(
c
 !'-' && c !']', 
REG_ECTYPE
);

730 
	`p_b_c˛ass
(
p
, 
cs
);

731 
	`REQUIRE
(
	`MORE
(), 
REG_EBRACK
);

732 
	`REQUIRE
(
	`EATTWO
(':', ']'), 
REG_ECTYPE
);

735 
	`NEXT2
();

736 
	`REQUIRE
(
	`MORE
(), 
REG_EBRACK
);

737 
c
 = 
	`PEEK
();

738 
	`REQUIRE
(
c
 !'-' && c !']', 
REG_ECOLLATE
);

739 
	`p_b_e˛ass
(
p
, 
cs
);

740 
	`REQUIRE
(
	`MORE
(), 
REG_EBRACK
);

741 
	`REQUIRE
(
	`EATTWO
('=', ']'), 
REG_ECOLLATE
);

745 
°¨t
 = 
	`p_b_symbﬁ
(
p
);

746 i‡(
	`SEE
('-'Ë&& 
	`MORE2
(Ë&& 
	`PEEK2
() != ']') {

748 
	`NEXT
();

749 i‡(
	`EAT
('-'))

750 
föish
 = '-';

752 
föish
 = 
	`p_b_symbﬁ
(
p
);

754 
föish
 = 
°¨t
;

756 
	`REQUIRE
(
°¨t
 <
föish
, 
REG_ERANGE
);

757 
i
 = 
°¨t
; i <
föish
; i++)

758 
	`CHadd
(
cs
, 
i
);

761 
	}
}

767 
	$p_b_c˛ass
(
∑r£
 *
p
, 
c£t
 *
cs
)

769 *
•
 = 
p
->
√xt
;

770 
c˛ass
 *
˝
;

771 
size_t
 
Àn
;

772 *
u
;

773 
c
;

775 
	`MORE
(Ë&& 
	`ißÕha
(
	`PEEK
()))

776 
	`NEXT
();

777 
Àn
 = 
p
->
√xt
 - 
•
;

778 
˝
 = 
c˛as£s
; cp->
«me
 !
NULL
; cp++)

779 i‡(
	`°∫cmp
(
˝
->
«me
, 
•
, 
Àn
) == 0 && cp->name[len] == '\0')

781 i‡(
˝
->
«me
 =
NULL
) {

783 
	`SETERROR
(
REG_ECTYPE
);

787 
u
 = 
˝
->
ch¨s
;

788 (
c
 = *
u
++) != '\0')

789 
	`CHadd
(
cs
, 
c
);

790 
u
 = 
˝
->
mu…is
; *u !'\0'; u +
	`°æí
(u) + 1)

791 
	`MCadd
(
p
, 
cs
, 
u
);

792 
	}
}

800 
	$p_b_e˛ass
(
∑r£
 *
p
, 
c£t
 *
cs
)

802 
c
;

804 
c
 = 
	`p_b_cﬁl_ñem
(
p
, '=');

805 
	`CHadd
(
cs
, 
c
);

806 
	}
}

812 
	$p_b_symbﬁ
(
∑r£
 *
p
)

814 
vÆue
;

816 
	`REQUIRE
(
	`MORE
(), 
REG_EBRACK
);

817 i‡(!
	`EATTWO
('[', '.'))

818 (
	`GETNEXT
());

821 
vÆue
 = 
	`p_b_cﬁl_ñem
(
p
, '.');

822 
	`REQUIRE
(
	`EATTWO
('.', ']'), 
REG_ECOLLATE
);

823 (
vÆue
);

824 
	}
}

830 
	$p_b_cﬁl_ñem
(
∑r£
 *
p
,

831 
ídc
)

833 *
•
 = 
p
->
√xt
;

834 
˙ame
 *
˝
;

835 
Àn
;

837 
	`MORE
(Ë&& !
	`SEETWO
(
ídc
, ']'))

838 
	`NEXT
();

839 i‡(!
	`MORE
()) {

840 
	`SETERROR
(
REG_EBRACK
);

843 
Àn
 = 
p
->
√xt
 - 
•
;

844 
˝
 = 
˙ames
; cp->
«me
 !
NULL
; cp++)

845 i‡(
	`°∫cmp
(
˝
->
«me
, 
•
, 
Àn
) == 0 && cp->name[len] == '\0')

846 (
˝
->
code
);

847 i‡(
Àn
 == 1)

848 (*
•
);

849 
	`SETERROR
(
REG_ECOLLATE
);

851 
	}
}

857 
	$Ÿhîˇ£
(
ch
)

859 
ch
 = (
uch
)ch;

860 
	`as£π
(
	`ißÕha
(
ch
));

861 i‡(
	`isuµî
(
ch
))

862  ((
uch
)
	`tﬁowî
(
ch
));

863 i‡(
	`i¶owî
(
ch
))

864  ((
uch
)
	`touµî
(
ch
));

866 (
ch
);

867 
	}
}

875 
	$bŸhˇ£s
(
∑r£
 *
p
, 
ch
)

877 *
ﬁd√xt
 = 
p
->
√xt
;

878 *
ﬁdíd
 = 
p
->
íd
;

879 
bøckë
[3];

881 
ch
 = (
uch
)ch;

882 
	`as£π
(
	`Ÿhîˇ£
(
ch
) != ch);

883 
p
->
√xt
 = 
bøckë
;

884 
p
->
íd
 = 
bøckë
+2;

885 
bøckë
[0] = 
ch
;

886 
bøckë
[1] = ']';

887 
bøckë
[2] = '\0';

888 
	`p_bøckë
(
p
);

889 
	`as£π
(
p
->
√xt
 =
bøckë
+2);

890 
p
->
√xt
 = 
ﬁd√xt
;

891 
p
->
íd
 = 
ﬁdíd
;

892 
	}
}

898 
	$‹dö¨y
(
∑r£
 *
p
, 
ch
)

900 
ˇt_t
 *
ˇp
 = 
p
->
g
->
ˇãg‹õs
;

902 i‡((
p
->
g
->
cÊags
&
REG_ICASE
Ë&& 
	`ißÕha
((
uch
)
ch
Ë&& 
	`Ÿhîˇ£
(ch) != ch)

903 
	`bŸhˇ£s
(
p
, 
ch
);

905 
	`EMIT
(
OCHAR
, (
uch
)
ch
);

906 i‡(
ˇp
[
ch
] == 0)

907 
ˇp
[
ch
] = 
p
->
g
->
nˇãg‹õs
++;

909 
	}
}

917 
	$n⁄√wlöe
(
∑r£
 *
p
)

919 *
ﬁd√xt
 = 
p
->
√xt
;

920 *
ﬁdíd
 = 
p
->
íd
;

921 
bøckë
[4];

923 
p
->
√xt
 = 
bøckë
;

924 
p
->
íd
 = 
bøckë
+3;

925 
bøckë
[0] = '^';

926 
bøckë
[1] = '\n';

927 
bøckë
[2] = ']';

928 
bøckë
[3] = '\0';

929 
	`p_bøckë
(
p
);

930 
	`as£π
(
p
->
√xt
 =
bøckë
+3);

931 
p
->
√xt
 = 
ﬁd√xt
;

932 
p
->
íd
 = 
ﬁdíd
;

933 
	}
}

939 
	$ª≥©
(
∑r£
 *
p
,

940 
s›no
 
°¨t
,

941 
‰om
,

942 
to
)

944 
s›no
 
föish
 = 
	`HERE
();

945 
	#N
 2

	)

946 
	#INF
 3

	)

947 
	#REP
(
f
, 
t
Ë((f)*8 + (t))

	)

948 
	#MAP
(
n
Ë((“Ë<1Ë? (nË: (“Ë=
INFINITY
Ë? 
INF
 : 
N
)

	)

949 
s›no
 
c›y
;

951 i‡(
p
->
îr‹
 != 0)

954 
	`as£π
(
‰om
 <
to
);

956 
	`REP
(
	`MAP
(
‰om
), MAP(
to
))) {

957 
	`REP
(0, 0):

958 
	`DROP
(
föish
-
°¨t
);

960 
	`REP
(0, 1):

961 
	`REP
(0, 
N
):

962 
	`REP
(0, 
INF
):

964 
	`INSERT
(
OCH_
, 
°¨t
);

965 
	`ª≥©
(
p
, 
°¨t
+1, 1, 
to
);

966 
	`ASTERN
(
OOR1
, 
°¨t
);

967 
	`AHEAD
(
°¨t
);

968 
	`EMIT
(
OOR2
, 0);

969 
	`AHEAD
(
	`THERE
());

970 
	`ASTERN
(
O_CH
, 
	`THERETHERE
());

972 
	`REP
(1, 1):

975 
	`REP
(1, 
N
):

977 
	`INSERT
(
OCH_
, 
°¨t
);

978 
	`ASTERN
(
OOR1
, 
°¨t
);

979 
	`AHEAD
(
°¨t
);

980 
	`EMIT
(
OOR2
, 0);

981 
	`AHEAD
(
	`THERE
());

982 
	`ASTERN
(
O_CH
, 
	`THERETHERE
());

983 
c›y
 = 
	`du∂
(
p
, 
°¨t
+1, 
föish
+1);

984 
	`as£π
(
c›y
 =
föish
+4);

985 
	`ª≥©
(
p
, 
c›y
, 1, 
to
-1);

987 
	`REP
(1, 
INF
):

988 
	`INSERT
(
OPLUS_
, 
°¨t
);

989 
	`ASTERN
(
O_PLUS
, 
°¨t
);

991 
	`REP
(
N
, N):

992 
c›y
 = 
	`du∂
(
p
, 
°¨t
, 
föish
);

993 
	`ª≥©
(
p
, 
c›y
, 
‰om
-1, 
to
-1);

995 
	`REP
(
N
, 
INF
):

996 
c›y
 = 
	`du∂
(
p
, 
°¨t
, 
föish
);

997 
	`ª≥©
(
p
, 
c›y
, 
‰om
-1, 
to
);

1000 
	`SETERROR
(
REG_ASSERT
);

1003 
	}
}

1009 
	$£ãº
(
∑r£
 *
p
, 
e
)

1011 i‡(
p
->
îr‹
 == 0)

1012 
p
->
îr‹
 = 
e
;

1013 
p
->
√xt
 = 
nuls
;

1014 
p
->
íd
 = 
nuls
;

1016 
	}
}

1021 
c£t
 *

1022 
	$Æloc£t
(
∑r£
 *
p
)

1024 
no
 = 
p
->
g
->
nc£ts
++;

1025 
size_t
 
nc
;

1026 
size_t
 
nbyãs
;

1027 
c£t
 *
cs
;

1028 
size_t
 
css
 = (size_t)
p
->
g
->
c£tsize
;

1029 
i
;

1031 i‡(
no
 >
p
->
ncßŒoc
) {

1032 *
±r
;

1034 
p
->
ncßŒoc
 +
CHAR_BIT
;

1035 
nc
 = 
p
->
ncßŒoc
;

1036 
	`as£π
(
nc
 % 
CHAR_BIT
 == 0);

1037 
nbyãs
 = 
nc
 / 
CHAR_BIT
 * 
css
;

1039 
±r
 = (
c£t
 *)
	`ªÆloc
((*)
p
->
g
->
£ts
, 
nc
 * (cset));

1040 i‡(
±r
 =
NULL
)

1041 
nomem
;

1042 
p
->
g
->
£ts
 = 
±r
;

1044 
±r
 = (
uch
 *)
	`ªÆloc
((*)
p
->
g
->
£tbôs
, 
nbyãs
);

1045 i‡(
±r
 =
NULL
)

1046 
nomem
;

1047 
p
->
g
->
£tbôs
 = 
±r
;

1049 
i
 = 0; i < 
no
; i++)

1050 
p
->
g
->
£ts
[
i
].
±r
 =Ö->g->
£tbôs
 + 
css
*(i/
CHAR_BIT
);

1052 (Ë
	`mem£t
((*)
p
->
g
->
£tbôs
 + (
nbyãs
 - 
css
), 0, css);

1055 i‡(
p
->
g
->
£ts
 =
NULL
 ||Ö->g->
£tbôs
 == NULL)

1056 
nomem
;

1058 
cs
 = &
p
->
g
->
£ts
[
no
];

1059 
cs
->
±r
 = 
p
->
g
->
£tbôs
 + 
css
*((
no
)/
CHAR_BIT
);

1060 
cs
->
mask
 = 1 << ((
no
Ë% 
CHAR_BIT
);

1061 
cs
->
hash
 = 0;

1062 
cs
->
smu…is
 = 0;

1063 
cs
->
mu…is
 = 
NULL
;

1065 (
cs
);

1066 
nomem
:

1067 
	`‰ì
(
p
->
g
->
£ts
);

1068 
p
->
g
->
£ts
 = 
NULL
;

1069 
	`‰ì
(
p
->
g
->
£tbôs
);

1070 
p
->
g
->
£tbôs
 = 
NULL
;

1072 
	`SETERROR
(
REG_ESPACE
);

1074 (
NULL
);

1075 
	}
}

1081 
	$‰ì£t
(
∑r£
 *
p
, 
c£t
 *
cs
)

1083 
i
;

1084 
c£t
 *
t›
 = &
p
->
g
->
£ts
[p->g->
nc£ts
];

1085 
size_t
 
css
 = (size_t)
p
->
g
->
c£tsize
;

1087 
i
 = 0; i < 
css
; i++)

1088 
	`CHsub
(
cs
, 
i
);

1089 i‡(
cs
 =
t›
-1)

1090 
p
->
g
->
nc£ts
--;

1091 
	}
}

1103 
	$‰ìze£t
(
∑r£
 *
p
, 
c£t
 *
cs
)

1105 
uch
 
h
 = 
cs
->
hash
;

1106 
i
;

1107 
c£t
 *
t›
 = &
p
->
g
->
£ts
[p->g->
nc£ts
];

1108 
c£t
 *
cs2
;

1109 
size_t
 
css
 = (size_t)
p
->
g
->
c£tsize
;

1112 
cs2
 = &
p
->
g
->
£ts
[0]; cs2 < 
t›
; cs2++)

1113 i‡(
cs2
->
hash
 =
h
 && cs2 !
cs
) {

1115 
i
 = 0; i < 
css
; i++)

1116 i‡(!!
	`CHIN
(
cs2
, 
i
Ë!!!CHIN(
cs
, i))

1118 i‡(
i
 =
css
)

1122 i‡(
cs2
 < 
t›
) {

1123 
	`‰ì£t
(
p
, 
cs
);

1124 
cs
 = 
cs2
;

1127 (()(
cs
 - 
p
->
g
->
£ts
));

1128 
	}
}

1134 
	$fú°ch
(
∑r£
 *
p
, 
c£t
 *
cs
)

1136 
i
;

1137 
size_t
 
css
 = (size_t)
p
->
g
->
c£tsize
;

1139 
i
 = 0; i < 
css
; i++)

1140 i‡(
	`CHIN
(
cs
, 
i
))

1141 (()
i
);

1142 
	`as£π
(
√vî
);

1144 
	}
}

1150 
	$nch
(
∑r£
 *
p
, 
c£t
 *
cs
)

1152 
i
;

1153 
size_t
 
css
 = (size_t)
p
->
g
->
c£tsize
;

1154 
n
 = 0;

1156 
i
 = 0; i < 
css
; i++)

1157 i‡(
	`CHIN
(
cs
, 
i
))

1158 
n
++;

1159 (
n
);

1160 
	}
}

1166 
	$mˇdd
–
∑r£
 *
p
, 
c£t
 *
cs
, *
˝
)

1168 
size_t
 
ﬁdíd
 = 
cs
->
smu…is
;

1169 *
≈
;

1171 
cs
->
smu…is
 +
	`°æí
(
˝
) + 1;

1172 
≈
 = 
	`ªÆloc
(
cs
->
mu…is
, cs->
smu…is
);

1173 i‡(
≈
 =
NULL
) {

1174 i‡(
cs
->
mu…is
)

1175 
	`‰ì
(
cs
->
mu…is
);

1176 
cs
->
mu…is
 = 
NULL
;

1177 
	`SETERROR
(
REG_ESPACE
);

1180 
cs
->
mu…is
 = 
≈
;

1182 
	`°æ˝y
(
cs
->
mu…is
 + 
ﬁdíd
 - 1, 
˝
, cs->
smu…is
 - oldend + 1);

1183 
	}
}

1193 
	$mcövît
(
∑r£
 *
p
, 
c£t
 *
cs
)

1195 
	`as£π
(
cs
->
mu…is
 =
NULL
);

1196 
	}
}

1206 
	$mcˇ£
(
∑r£
 *
p
, 
c£t
 *
cs
)

1208 
	`as£π
(
cs
->
mu…is
 =
NULL
);

1209 
	}
}

1215 
	$isö£ts
(
ª_guts
 *
g
, 
c
)

1217 
uch
 *
cﬁ
;

1218 
i
;

1219 
ncﬁs
 = (
g
->
nc£ts
+(
CHAR_BIT
-1)) / CHAR_BIT;

1220 
uc
 = (
uch
)
c
;

1222 
i
 = 0, 
cﬁ
 = 
g
->
£tbôs
; i < 
ncﬁs
; i++, cﬁ +g->
c£tsize
)

1223 i‡(
cﬁ
[
uc
] != 0)

1226 
	}
}

1232 
	$ßme£ts
(
ª_guts
 *
g
, 
c1
, 
c2
)

1234 
uch
 *
cﬁ
;

1235 
i
;

1236 
ncﬁs
 = (
g
->
nc£ts
+(
CHAR_BIT
-1)) / CHAR_BIT;

1237 
uc1
 = (
uch
)
c1
;

1238 
uc2
 = (
uch
)
c2
;

1240 
i
 = 0, 
cﬁ
 = 
g
->
£tbôs
; i < 
ncﬁs
; i++, cﬁ +g->
c£tsize
)

1241 i‡(
cﬁ
[
uc1
] !cﬁ[
uc2
])

1244 
	}
}

1250 
	$ˇãg‹ize
(
∑r£
 *
p
, 
ª_guts
 *
g
)

1252 
ˇt_t
 *
ˇts
 = 
g
->
ˇãg‹õs
;

1253 
c
;

1254 
c2
;

1255 
ˇt_t
 
ˇt
;

1258 i‡(
p
->
îr‹
 != 0)

1261 
c
 = 
CHAR_MIN
; c <
CHAR_MAX
; c++)

1262 i‡(
ˇts
[
c
] =0 && 
	`isö£ts
(
g
, c)) {

1263 
ˇt
 = 
g
->
nˇãg‹õs
++;

1264 
ˇts
[
c
] = 
ˇt
;

1265 
c2
 = 
c
+1; c2 <
CHAR_MAX
; c2++)

1266 i‡(
ˇts
[
c2
] =0 && 
	`ßme£ts
(
g
, 
c
, c2))

1267 
ˇts
[
c2
] = 
ˇt
;

1269 
	}
}

1274 
s›no


1275 
	$du∂
(
∑r£
 *
p
,

1276 
s›no
 
°¨t
,

1277 
s›no
 
föish
)

1279 
s›no
 
ªt
 = 
	`HERE
();

1280 
s›no
 
Àn
 = 
föish
 - 
°¨t
;

1282 
	`as£π
(
föish
 >
°¨t
);

1283 i‡(
Àn
 == 0)

1284 (
ªt
);

1285 
	`íœrge
(
p
,Ö->
ssize
 + 
Àn
);

1286 
	`as£π
(
p
->
ssize
 >p->
¶í
 + 
Àn
);

1287 (Ë
	`mem˝y
((*)(
p
->
°rù
 +Ö->
¶í
),

1288 (*)(
p
->
°rù
 + 
°¨t
), (
size_t
)
Àn
*(
s›
));

1289 
p
->
¶í
 +
Àn
;

1290 (
ªt
);

1291 
	}
}

1301 
	$d€mô
(
∑r£
 *
p
, 
s›
 
›
, 
size_t
 
›nd
)

1304 i‡(
p
->
îr‹
 != 0)

1308 
	`as£π
(
›nd
 < 1<<
OPSHIFT
);

1311 i‡(
p
->
¶í
 >p->
ssize
)

1312 
	`íœrge
(
p
, (p->
ssize
+1) / 2 * 3);

1313 
	`as£π
(
p
->
¶í
 <Ö->
ssize
);

1316 
p
->
°rù
[p->
¶í
++] = 
	`SOP
(
›
, 
›nd
);

1317 
	}
}

1323 
	$doö£π
(
∑r£
 *
p
, 
s›
 
›
, 
size_t
 
›nd
, 
s›no
 
pos
)

1325 
s›no
 
¢
;

1326 
s›
 
s
;

1327 
i
;

1330 i‡(
p
->
îr‹
 != 0)

1333 
¢
 = 
	`HERE
();

1334 
	`EMIT
(
›
, 
›nd
);

1335 
	`as£π
(
	`HERE
(Ë=
¢
+1);

1336 
s
 = 
p
->
°rù
[
¢
];

1339 
	`as£π
(
pos
 > 0);

1340 
i
 = 1; i < 
NPAREN
; i++) {

1341 i‡(
p
->
pbegö
[
i
] >
pos
) {

1342 
p
->
pbegö
[
i
]++;

1344 i‡(
p
->
≥nd
[
i
] >
pos
) {

1345 
p
->
≥nd
[
i
]++;

1349 
	`memmove
((*)&
p
->
°rù
[
pos
+1], (*)&p->strip[pos],

1350 (
	`HERE
()-
pos
-1)*(
s›
));

1351 
p
->
°rù
[
pos
] = 
s
;

1352 
	}
}

1358 
	$dofwd
(
∑r£
 *
p
, 
s›no
 
pos
, 
s›
 
vÆue
)

1361 i‡(
p
->
îr‹
 != 0)

1364 
	`as£π
(
vÆue
 < 1<<
OPSHIFT
);

1365 
p
->
°rù
[
pos
] = 
	`OP
’->°rù[pos]Ë| 
vÆue
;

1366 
	}
}

1372 
	$íœrge
(
∑r£
 *
p
, 
s›no
 
size
)

1374 
s›
 *
•
;

1376 i‡(
p
->
ssize
 >
size
)

1379 
•
 = (
s›
 *)
	`ªÆloc
(
p
->
°rù
, 
size
*(sop));

1380 i‡(
•
 =
NULL
) {

1381 
	`SETERROR
(
REG_ESPACE
);

1384 
p
->
°rù
 = 
•
;

1385 
p
->
ssize
 = 
size
;

1386 
	}
}

1392 
	$°rù¢ug
(
∑r£
 *
p
, 
ª_guts
 *
g
)

1394 
g
->
n°©es
 = 
p
->
¶í
;

1395 
g
->
°rù
 = (
s›
 *)
	`ªÆloc
((*)
p
->°rù,Ö->
¶í
 * (sop));

1396 i‡(
g
->
°rù
 =
NULL
) {

1397 
	`SETERROR
(
REG_ESPACE
);

1398 
g
->
°rù
 = 
p
->strip;

1400 
	}
}

1412 
	$födmu°
(
∑r£
 *
p
, 
ª_guts
 *
g
)

1414 
s›
 *
sˇn
;

1415 
s›
 *
°¨t
;

1416 
s›
 *
√w°¨t
;

1417 
s›no
 
√wÀn
;

1418 
s›
 
s
;

1419 *
˝
;

1420 
s›no
 
i
;

1423 i‡(
p
->
îr‹
 != 0)

1427 
√wÀn
 = 0;

1428 
sˇn
 = 
g
->
°rù
 + 1;

1430 
s
 = *
sˇn
++;

1431 
	`OP
(
s
)) {

1432 
OCHAR
:

1433 i‡(
√wÀn
 == 0)

1434 
√w°¨t
 = 
sˇn
 - 1;

1435 
√wÀn
++;

1437 
OPLUS_
:

1438 
OLPAREN
:

1439 
ORPAREN
:

1441 
OQUEST_
:

1442 
OCH_
:

1443 
sˇn
--;

1445 
sˇn
 +
	`OPND
(
s
);

1446 
s
 = *
sˇn
;

1448 i‡(
	`OP
(
s
Ë!
O_QUEST
 && OP(sË!
O_CH
 &&

1449 
	`OP
(
s
Ë!
OOR2
) {

1450 
g
->
iÊags
 |
BAD
;

1453 } 
	`OP
(
s
Ë!
O_QUEST
 && OP(sË!
O_CH
);

1456 i‡(
√wÀn
 > 
g
->
mÀn
) {

1457 
°¨t
 = 
√w°¨t
;

1458 
g
->
mÀn
 = 
√wÀn
;

1460 
√wÀn
 = 0;

1463 } 
	`OP
(
s
Ë!
OEND
);

1465 i‡(
g
->
mÀn
 == 0)

1469 
g
->
mu°
 = 
	`mÆloc
((
size_t
)g->
mÀn
 + 1);

1470 i‡(
g
->
mu°
 =
NULL
) {

1471 
g
->
mÀn
 = 0;

1474 
˝
 = 
g
->
mu°
;

1475 
sˇn
 = 
°¨t
;

1476 
i
 = 
g
->
mÀn
; i > 0; i--) {

1477 
	`OP
(
s
 = *
sˇn
++Ë!
OCHAR
)

1479 
	`as£π
(
˝
 < 
g
->
mu°
 + g->
mÀn
);

1480 *
˝
++ = ()
	`OPND
(
s
);

1482 
	`as£π
(
˝
 =
g
->
mu°
 + g->
mÀn
);

1483 *
˝
++ = '\0';

1484 
	}
}

1489 
s›no


1490 
	$∂uscou¡
(
∑r£
 *
p
, 
ª_guts
 *
g
)

1492 
s›
 *
sˇn
;

1493 
s›
 
s
;

1494 
s›no
 
∂u¢e°
 = 0;

1495 
s›no
 
max√°
 = 0;

1497 i‡(
p
->
îr‹
 != 0)

1500 
sˇn
 = 
g
->
°rù
 + 1;

1502 
s
 = *
sˇn
++;

1503 
	`OP
(
s
)) {

1504 
OPLUS_
:

1505 
∂u¢e°
++;

1507 
O_PLUS
:

1508 i‡(
∂u¢e°
 > 
max√°
)

1509 
max√°
 = 
∂u¢e°
;

1510 
∂u¢e°
--;

1513 } 
	`OP
(
s
Ë!
OEND
);

1514 i‡(
∂u¢e°
 != 0)

1515 
g
->
iÊags
 |
BAD
;

1516 (
max√°
);

1517 
	}
}

	@android/regex/regerror.c

37 
	~<sys/ty≥s.h
>

38 
	~<°dio.h
>

39 
	~<°rög.h
>

40 
	~<˘y≥.h
>

41 
	~<limôs.h
>

42 
	~<°dlib.h
>

43 
	~<ªgex.h
>

45 
	~"utûs.h
"

47 *
ªg©oi
(c⁄° 
ªgex_t
 *, *, );

49 
	sªº
 {

50 
	mcode
;

51 *
	m«me
;

52 *
	mex∂aö
;

53 } 
	gªºs
[] = {

54 { 
REG_NOMATCH
, "REG_NOMATCH", "regexec() failedÅo match" },

55 { 
REG_BADPAT
, "REG_BADPAT", "invalidÑegularÉxpression" },

56 { 
REG_ECOLLATE
, "REG_ECOLLATE", "invalid collatingÉlement" },

57 { 
REG_ECTYPE
, "REG_ECTYPE", "invalid character class" },

58 { 
REG_EESCAPE
, "REG_EESCAPE", "trailing backslash (\\)" },

59 { 
REG_ESUBREG
, "REG_ESUBREG", "invalid backreferenceÇumber" },

60 { 
REG_EBRACK
, "REG_EBRACK", "brackets ([ ])Çot balanced" },

61 { 
REG_EPAREN
, "REG_EPAREN", "parenthesesÇot balanced" },

62 { 
REG_EBRACE
, "REG_EBRACE", "bracesÇot balanced" },

63 { 
REG_BADBR
, "REG_BADBR", "invalidÑepetition count(s)" },

64 { 
REG_ERANGE
, "REG_ERANGE", "invalid characterÑange" },

65 { 
REG_ESPACE
, "REG_ESPACE", "out of memory" },

66 { 
REG_BADRPT
, "REG_BADRPT", "repetition-operator operand invalid" },

67 { 
REG_EMPTY
, "REG_EMPTY", "empty (sub)expression" },

68 { 
REG_ASSERT
, "REG_ASSERT", "\"can't happen\" -- you foundá bug" },

69 { 
REG_INVARG
, "REG_INVARG", "invalidárgumentÅoÑegexÑoutine" },

78 
size_t


79 
	$ªgîr‹
(
îrcode
, c⁄° 
ªgex_t
 *
¥eg
, *
îrbuf
, 
size_t
 
îrbuf_size
)

81 
ªº
 *
r
;

82 
size_t
 
Àn
;

83 
èrgë
 = 
îrcode
 &~ 
REG_ITOA
;

84 *
s
;

85 
c⁄vbuf
[50];

87 i‡(
îrcode
 =
REG_ATOI
)

88 
s
 = 
	`ªg©oi
(
¥eg
, 
c⁄vbuf
,  convbuf);

90 
r
 = 
ªºs
;Ñ->
code
 != 0;Ñ++)

91 i‡(
r
->
code
 =
èrgë
)

94 i‡(
îrcode
&
REG_ITOA
) {

95 i‡(
r
->
code
 != 0) {

96 
	`as£π
(
	`°æí
(
r
->
«me
Ë< (
c⁄vbuf
));

97 (Ë
	`°æ˝y
(
c⁄vbuf
, 
r
->
«me
,  convbuf);

99 ()
	`¢¥ötf
(
c⁄vbuf
,  convbuf,

100 "REG_0x%x", 
èrgë
);

101 
s
 = 
c⁄vbuf
;

103 
s
 = 
r
->
ex∂aö
;

106 
Àn
 = 
	`°æí
(
s
) + 1;

107 i‡(
îrbuf_size
 > 0) {

108 
	`°æ˝y
(
îrbuf
, 
s
, 
îrbuf_size
);

111 (
Àn
);

112 
	}
}

118 
	$ªg©oi
(c⁄° 
ªgex_t
 *
¥eg
, *
loˇlbuf
, 
loˇlbufsize
)

120 
ªº
 *
r
;

122 
r
 = 
ªºs
;Ñ->
code
 != 0;Ñ++)

123 i‡(
	`°rcmp
(
r
->
«me
, 
¥eg
->
ª_ídp
) == 0)

125 i‡(
r
->
code
 == 0)

128 ()
	`¢¥ötf
(
loˇlbuf
, 
loˇlbufsize
, "%d", 
r
->
code
);

129 (
loˇlbuf
);

130 
	}
}

	@android/regex/regex2.h

41 
	#MAGIC1
 ((('r'^0200)<<8Ë| 'e')

	)

62 
	ts›
;

63 
	ts›no
;

64 
	#OPRMASK
 0xf8000000LU

	)

65 
	#OPDMASK
 0x07ffffffLU

	)

66 
	#OPSHIFT
 (()27)

	)

67 
	#OP
(
n
Ë(“)&
OPRMASK
)

	)

68 
	#OPND
(
n
Ë(“)&
OPDMASK
)

	)

69 
	#SOP
(
›
, 
›nd
Ë((›)|(›nd))

	)

72 
	#OEND
 (1LU<<
OPSHIFT
Ë

	)

73 
	#OCHAR
 (2LU<<
OPSHIFT
Ë

	)

74 
	#OBOL
 (3LU<<
OPSHIFT
Ë

	)

75 
	#OEOL
 (4LU<<
OPSHIFT
Ë

	)

76 
	#OANY
 (5LU<<
OPSHIFT
Ë

	)

77 
	#OANYOF
 (6LU<<
OPSHIFT
Ë

	)

78 
	#OBACK_
 (7LU<<
OPSHIFT
Ë

	)

79 
	#O_BACK
 (8LU<<
OPSHIFT
Ë

	)

80 
	#OPLUS_
 (9LU<<
OPSHIFT
Ë

	)

81 
	#O_PLUS
 (10LU<<
OPSHIFT
Ë

	)

82 
	#OQUEST_
 (11LU<<
OPSHIFT
Ë

	)

83 
	#O_QUEST
 (12LU<<
OPSHIFT
Ë

	)

84 
	#OLPAREN
 (13LU<<
OPSHIFT
Ë

	)

85 
	#ORPAREN
 (14LU<<
OPSHIFT
Ë

	)

86 
	#OCH_
 (15LU<<
OPSHIFT
Ë

	)

87 
	#OOR1
 (16LU<<
OPSHIFT
Ë

	)

88 
	#OOR2
 (17LU<<
OPSHIFT
Ë

	)

89 
	#O_CH
 (18LU<<
OPSHIFT
Ë

	)

90 
	#OBOW
 (19LU<<
OPSHIFT
Ë

	)

91 
	#OEOW
 (20LU<<
OPSHIFT
Ë

	)

106 
uch
 *
	m±r
;

107 
uch
 
	mmask
;

108 
uch
 
	mhash
;

109 
size_t
 
	msmu…is
;

110 *
	mmu…is
;

111 } 
	tc£t
;

113 
	#CHadd
(
cs
, 
c
Ë((cs)->
±r
[(
uch
)(c)] |(cs)->
mask
, (cs)->
hash
 +(c))

	)

114 
	#CHsub
(
cs
, 
c
Ë((cs)->
±r
[(
uch
)(c)] &~(cs)->
mask
, (cs)->
hash
 -(c))

	)

115 
	#CHIN
(
cs
, 
c
Ë((cs)->
±r
[(
uch
)(c)] & (cs)->
mask
)

	)

116 
	#MCadd
(
p
, 
cs
, 
˝
Ë
	`mˇdd
’, cs, cpË

	)

117 
	#MCsub
(
p
, 
cs
, 
˝
Ë
	`mcsub
’, cs, cp)

	)

118 
	#MCö
(
p
, 
cs
, 
˝
Ë
	`mcö
’, cs, cp)

	)

121 
	tˇt_t
;

126 
	sª_guts
 {

127 
	mmagic
;

128 
	#MAGIC2
 ((('R'^0200)<<8)|'E')

	)

129 
s›
 *
	m°rù
;

130 
	mc£tsize
;

131 
	mnc£ts
;

132 
c£t
 *
	m£ts
;

133 
uch
 *
	m£tbôs
;

134 
	mcÊags
;

135 
s›no
 
	mn°©es
;

136 
s›no
 
	mfú°°©e
;

137 
s›no
 
	mœ°°©e
;

138 
	miÊags
;

139 
	#USEBOL
 01

	)

140 
	#USEEOL
 02

	)

141 
	#BAD
 04

	)

142 
	mnbﬁ
;

143 
	m√ﬁ
;

144 
	mnˇãg‹õs
;

145 
ˇt_t
 *
	mˇãg‹õs
;

146 *
	mmu°
;

147 
	mmÀn
;

148 
size_t
 
	mnsub
;

149 
	mbackªfs
;

150 
s›no
 
	m≈lus
;

152 
ˇt_t
 
	mˇt•a˚
[1];

156 
	#OUT
 (
CHAR_MAX
+1Ë

	)

157 
	#ISWORD
(
c
Ë(
	`iß um
(cË|| (cË='_')

	)

	@android/regex/regexec.c

44 
	~<sys/ty≥s.h
>

45 
	~<°dio.h
>

46 
	~<°dlib.h
>

47 
	~<°rög.h
>

48 
	~<limôs.h
>

49 
	~<˘y≥.h
>

50 
	~<ªgex.h
>

52 
	~"utûs.h
"

53 
	~"ªgex2.h
"

56 
	#°©es
 

	)

57 
	#°©es1
 
°©es


	)

58 
	#CLEAR
(
v
Ë((vË0)

	)

59 
	#SET0
(
v
, 
n
Ë((vË&~(()1 << (n)))

	)

60 
	#SET1
(
v
, 
n
Ë((vË|()1 << (n))

	)

61 
	#ISSET
(
v
, 
n
Ë(((vË& (()1 << (n))Ë!0)

	)

62 
	#ASSIGN
(
d
, 
s
Ë((dË(s))

	)

63 
	#EQ
(
a
, 
b
Ë(◊Ë=(b))

	)

64 
	#STATEVARS
 
dummy


	)

65 
	#STATESETUP
(
m
, 
n
Ë

	)

66 
	#STATETEARDOWN
(
m
Ë

	)

67 
	#SETUP
(
v
Ë((vË0)

	)

68 
	#⁄e°©e
 

	)

69 
	#INIT
(
o
, 
n
Ë((oË()1 << (n))

	)

70 
	#INC
(
o
Ë((oË<<1)

	)

71 
	#ISSTATEIN
(
v
, 
o
Ë(((vË& (o)Ë!0)

	)

74 
	#FWD
(
d°
, 
§c
, 
n
Ë((d°Ë|(()(§c)&(
hîe
)Ë<< (n))

	)

75 
	#BACK
(
d°
, 
§c
, 
n
Ë((d°Ë|(()(§c)&(
hîe
)Ë>> (n))

	)

76 
	#ISSETBACK
(
v
, 
n
Ë(((vË& (()
hîe
 >> (n))Ë!0)

	)

78 
	#SNAMES


	)

80 
	~"ígöe.c
"

83 #unde‡
°©es


84 #unde‡
CLEAR


85 #unde‡
SET0


86 #unde‡
SET1


87 #unde‡
ISSET


88 #unde‡
ASSIGN


89 #unde‡
EQ


90 #unde‡
STATEVARS


91 #unde‡
STATESETUP


92 #unde‡
STATETEARDOWN


93 #unde‡
SETUP


94 #unde‡
⁄e°©e


95 #unde‡
INIT


96 #unde‡
INC


97 #unde‡
ISSTATEIN


98 #unde‡
FWD


99 #unde‡
BACK


100 #unde‡
ISSETBACK


101 #unde‡
SNAMES


104 
	#°©es
 *

	)

105 
	#CLEAR
(
v
Ë
	`mem£t
(v, 0, 
m
->
g
->
n°©es
)

	)

106 
	#SET0
(
v
, 
n
Ë((v)[n] = 0)

	)

107 
	#SET1
(
v
, 
n
Ë((v)[n] = 1)

	)

108 
	#ISSET
(
v
, 
n
Ë((v)[n])

	)

109 
	#ASSIGN
(
d
, 
s
Ë
	`mem˝y
(d, s, 
m
->
g
->
n°©es
)

	)

110 
	#EQ
(
a
, 
b
Ë(
	`memcmp
◊, b, 
m
->
g
->
n°©es
Ë=0)

	)

111 
	#STATEVARS
 
vn
; *
•a˚


	)

112 
	#STATESETUP
(
m
, 
nv
Ë{ (m)->
•a˚
 = 
	`mÆloc
(“v)*(m)->
g
->
n°©es
); \

113 i‡((
m
)->
•a˚
 =
NULL
Ë(
REG_ESPACE
); \

114 (
m
)->
vn
 = 0; }

	)

115 
	#STATETEARDOWN
(
m
Ë{ 
	`‰ì
((m)->
•a˚
); }

	)

116 
	#SETUP
(
v
Ë((vË&
m
->
•a˚
[m->
vn
++ * m->
g
->
n°©es
])

	)

117 
	#⁄e°©e
 

	)

118 
	#INIT
(
o
, 
n
Ë((oË“))

	)

119 
	#INC
(
o
Ë((o)++)

	)

120 
	#ISSTATEIN
(
v
, 
o
Ë((v)[o])

	)

123 
	#FWD
(
d°
, 
§c
, 
n
Ë((d°)[
hîe
+“)] |(§c)[hîe])

	)

124 
	#BACK
(
d°
, 
§c
, 
n
Ë((d°)[
hîe
-“)] |(§c)[hîe])

	)

125 
	#ISSETBACK
(
v
, 
n
Ë((v)[
hîe
 - (n)])

	)

127 
	#LNAMES


	)

129 
	~"ígöe.c
"

139 
	$ªgexec
(c⁄° 
ªgex_t
 *
¥eg
, c⁄° *
°rög
, 
size_t
 
nm©ch
,

140 
ªgm©ch_t
 
pm©ch
[], 
eÊags
)

142 
ª_guts
 *
g
 = 
¥eg
->
ª_g
;

143 #ifde‡
REDEBUG


144 
	#GOODFLAGS
(
f
Ë(f)

	)

146 
	#GOODFLAGS
(
f
Ë((f)&(
REG_NOTBOL
|
REG_NOTEOL
|
REG_STARTEND
))

	)

149 i‡(
¥eg
->
ª_magic
 !
MAGIC1
 || 
g
->
magic
 !
MAGIC2
)

150 (
REG_BADPAT
);

151 
	`as£π
(!(
g
->
iÊags
&
BAD
));

152 i‡(
g
->
iÊags
&
BAD
)

153 (
REG_BADPAT
);

154 
eÊags
 = 
	`GOODFLAGS
(eflags);

156 i‡(
g
->
n°©es
 <
CHAR_BIT
*(
°©es1
Ë&& !(
eÊags
&
REG_LARGE
))

157 (
	`sm©chî
(
g
, (*)
°rög
, 
nm©ch
, 
pm©ch
, 
eÊags
));

159 (
	`lm©chî
(
g
, (*)
°rög
, 
nm©ch
, 
pm©ch
, 
eÊags
));

160 
	}
}

	@android/regex/regfree.c

37 
	~<sys/ty≥s.h
>

38 
	~<°dio.h
>

39 
	~<°dlib.h
>

40 
	~<limôs.h
>

41 
	~<ªgex.h
>

43 
	~"utûs.h
"

44 
	~"ªgex2.h
"

50 
	$ªg‰ì
(
ªgex_t
 *
¥eg
)

52 
ª_guts
 *
g
;

54 i‡(
¥eg
->
ª_magic
 !
MAGIC1
)

57 
g
 = 
¥eg
->
ª_g
;

58 i‡(
g
 =
NULL
 || g->
magic
 !
MAGIC2
)

60 
¥eg
->
ª_magic
 = 0;

61 
g
->
magic
 = 0;

63 i‡(
g
->
°rù
 !
NULL
)

64 
	`‰ì
((*)
g
->
°rù
);

65 i‡(
g
->
£ts
 !
NULL
)

66 
	`‰ì
((*)
g
->
£ts
);

67 i‡(
g
->
£tbôs
 !
NULL
)

68 
	`‰ì
((*)
g
->
£tbôs
);

69 i‡(
g
->
mu°
 !
NULL
)

70 
	`‰ì
(
g
->
mu°
);

71 
	`‰ì
((*)
g
);

72 
	}
}

	@android/regex/utils.h

39 
	#DUPMAX
 
_POSIX2_RE_DUP_MAX


	)

40 
	#INFINITY
 (
DUPMAX
 + 1)

	)

41 
	#NC
 (
CHAR_MAX
 - 
CHAR_MIN
 + 1)

	)

42 
	tuch
;

45 #i‚de‡
REDEBUG


46 #i‚de‡
NDEBUG


47 
	#NDEBUG


	)

50 
	~<as£π.h
>

53 #ifde‡
USEBCOPY


54 
	#memmove
(
d
, 
s
, 
c
Ë
	`bc›y
(s, d, c)

	)

	@contrib/netsimpcap/src/config.c

20 
	~<°dio.h
>

21 
	~<°dlib.h
>

22 
	~<°rög.h
>

24 
	~"c⁄fig.h
"

25 
	~"debug.h
"

36 
	$°rùSåög
(*
°r
)

40 *
°r
 == ' ' || *str == '\t') {

41 
°r
++;

45 
i
 = 
	`°æí
(
°r
);

46 --
i
 >= 0) {

47 i‡(
°r
[
i
] == ' ' || str[i] == '\r' || str[i] == '\n' || str[i] == '\t') {

48 
°r
[
i
] = 0;

53  
°r
;

54 
	}
}

68 
	$ªadC⁄√˘i⁄M©rix
(*
c⁄√˘i⁄M©rix
, *
fûíame
, 
Àn
)

70 
FILE
 *
fûe
 = 
	`f›í
(
fûíame
, "r");

71 i‡(!
fûe
) {

75 
buf„r
[1024];

76 
	`fgës
(
buf„r
, 1024, 
fûe
)) {

77 
‰om
, 
to
;

78 
¥›abûôy
;

80 *
löe
 = 
	`°rùSåög
(
buf„r
);

81 
	`DPRINT
("%s\n", 
löe
);

83 i‡(
löe
[0] == '#' ||Üine[0] == 0) {

87 i‡(
	`ssˇnf
(
löe
, "%d %d %f", &
‰om
, &
to
, &
¥›abûôy
) != 3) {

91 i‡(
‰om
 < 0 || from >
Àn
 || 
to
 < 0 ||Åo >=Üen || from ==Åo) {

95 
c⁄√˘i⁄M©rix
[
	`GRID
(
‰om
, 
to
, 
Àn
)] = 
¥›abûôy
;

96 i‡(
c⁄√˘i⁄M©rix
[
	`GRID
(
to
, 
‰om
, 
Àn
)] == 0) {

97 
c⁄√˘i⁄M©rix
[
	`GRID
(
to
, 
‰om
, 
Àn
)] = 
¥›abûôy
;

100 
	`f˛o£
(
fûe
);

102 
	}
}

	@contrib/netsimpcap/src/config.h

20 #i‚de‡
CONFIG_H_


22 
	#CONFIG_H_


	)

24 
	#GRID
(
x
,
y
,
width
Ë((xË+ (yË* (width))

	)

26 
ªadC⁄√˘i⁄M©rix
(*
c⁄√˘i⁄M©rix
, *
fûíame
, 
Àn
);

	@contrib/netsimpcap/src/debug.h

20 #i‚de‡
WLAN_DEBUG_H


21 
	#WLAN_DEBUG_H


	)

23 
	#DPRINT
(...Ëif(
debugMode
Ë{ 
	`¥ötf
(
__VA_ARGS__
); }

	)

25 
	#DHEXDUMP
(
puΩo£
, 
d©a
,
Àngth
Ëi‡(
debugMode
) { \

26 
i
; \

27 
	`¥ötf
("Hexdump: %s\n", 
puΩo£
); \

28 
i
=0; i<
Àngth
; i++) { \

29 i‡((
i
 & 31Ë=0Ë
	`¥ötf
("%04x: ", i);\

30 
	`¥ötf
("%02x", (()
d©a
[
i
]) & 255); \

31 i‡((
i
 & 3Ë=3Ë
	`¥ötf
(" "); \

32 i‡((
i
 & 31Ë=31Ë
	`¥ötf
("\n"); \

34 
	`¥ötf
("\n\n"); \

35 }

	)

37 
debugMode
;

	@contrib/netsimpcap/src/netsimpcap.c

20 
	~<î∫o.h
>

21 
	~<f˙é.h
>

22 
	~<pˇp.h
>

23 
	~<±hªad.h
>

24 
	~<°ddef.h
>

25 
	~<°dio.h
>

26 
	~<°rög.h
>

27 
	~<°d¨g.h
>

28 
	~<°dlib.h
>

29 
	~<sig«l.h
>

30 
	~<time.h
>

31 
	~<uni°d.h
>

32 
	~<¨∑/öë.h
>

33 
	~<löux/if_ëhî.h
>

34 
	~<löux/if_∑ckë.h
>

35 
	~<löux/if_tun.h
>

36 
	~<√t/if_¨p.h
>

37 
	~<√töë/ù.h
>

38 
	~<√töë/udp.h
>

39 
	~<√t/if.h
>

40 
	~<√t/rouã.h
>

41 
	~<sys/io˘l.h
>

42 
	~<sys/time.h
>

43 
	~<sys/ty≥s.h
>

45 
	~"c⁄fig.h
"

46 
	~"√tw‹k_èp.h
"

48 
	gdebugMode
 = 0;

50 
	gru¬ög
;

52 
pˇp_t
 *
	gdevi˚s
[128];

53 
	gdevi˚FD
[128];

54 
	gdevi˚Cou¡
;

56 
	gèpFD
;

58 
u_öt32_t
 *
	gc⁄nBC
;

59 
u_öt32_t
 *
	gc⁄nUni
;

61 
u_öt8_t
 
	gbuf„r
[65536];

62 
u_öt8_t
 
	gmac_bc
[6] = { 0xff, 0xff, 0xff, 0xff, 0xff, 0xff };

71 
sig«lH™dÀr
(
signo
 
__©åibuã__
 ((
unu£d
)))

73 
	gru¬ög
 = 0;

84 
	$ˇlcuœãC⁄√˘i⁄s
(*
c⁄nM©rix
, 
sockëcou¡
, 
dr›
)

88 
c⁄nUni
 = 
	`mÆloc
((
u_öt32_t
Ë* 
sockëcou¡
 * socketcount);

89 
	`mem£t
(
c⁄nUni
, 0, (
u_öt32_t
Ë* 
sockëcou¡
 * socketcount);

90 
c⁄nBC
 = 
	`mÆloc
((
u_öt32_t
Ë* 
sockëcou¡
 * socketcount);

91 
	`mem£t
(
c⁄nBC
, 0, (
u_öt32_t
Ë* 
sockëcou¡
 * socketcount);

93 
brﬂdˇ°
, 
uniˇ°
;

94 
i
, 
j
;

95 
j
 = 0; j < 
sockëcou¡
; j++) {

96 
i
 = 0; i < 
sockëcou¡
; i++) {

97 
¥›
 = 
c⁄nM©rix
[
	`GRID
(
i
, 
j
, 
sockëcou¡
)];

98 i‡(
dr›
) {

99 
¥›
 = 1.0 -Örop;

101 
brﬂdˇ°
 = 
¥›
;

107 
¥›
 = 1 -Örop;

108 
uniˇ°
 = (1 - 
¥›
) * (1 +Örop +Örop *Örop +Örop *Örop *Örop +Örop *Örop *Örop *Örop);

110 
c⁄nBC
[
	`GRID
(
i
, 
j
, 
sockëcou¡
)] = (1 << 24Ë* 
brﬂdˇ°
;

111 
c⁄nUni
[
	`GRID
(
i
, 
j
, 
sockëcou¡
)] = (1 << 24Ë* 
uniˇ°
;

115 i‡(
debugMode
) {

116 
	`¥ötf
("Connection matrix for unicast:\n");

117 
j
 = 0; j < 
sockëcou¡
; j++) {

118 
i
 = 0; i < 
sockëcou¡
; i++) {

119 i‡(
i
 > 0) {

120 
	`¥ötf
(" ");

123 
	`¥ötf
("%1.2f", ()
c⁄nBC
[
	`GRID
(
i
, 
j
, 
sockëcou¡
)] / ()(1 << 24));

125 
	`¥ötf
("\n");

127 
	`¥ötf
("\nConnectionmatrix for broadcast:\n");

128 
j
 = 0; j < 
sockëcou¡
; j++) {

129 
i
 = 0; i < 
sockëcou¡
; i++) {

130 i‡(
i
 > 0) {

131 
	`¥ötf
(" ");

134 
	`¥ötf
("%1.2f", ()
c⁄nUni
[
	`GRID
(
i
, 
j
, 
sockëcou¡
)] / ()(1 << 24));

136 
	`¥ötf
("\n");

139 
	}
}

148 
	$èp_ˇŒback
()

150 
Àn
, 
i
;

152 
Àn
 = 
	`ªad
(
èpFD
, 
buf„r
, (buffer));

153 i‡(
Àn
 > 0) {

154 
i
 = 0; i < 
devi˚Cou¡
; i++) {

155 
	`pˇp_öje˘
(
devi˚s
[
i
], 
buf„r
, 
Àn
);

158 
	}
}

171 
	$ˇ±uª_ˇŒback
(
u_ch¨
 * 
¨gs
, c⁄° 
pˇp_pkthdr
 *
hdr
, c⁄° u_ch¨ * 
∑ckë
)

173 *
ödex
 = (*)
¨gs
;

174 
uniˇ°
 = 
	`memcmp
(
∑ckë
, 
mac_bc
, 6) != 0;

176 
i
, 
Àn
;

178 
Àn
 = 
hdr
->len;

179 
	`mem˝y
(
buf„r
, 
∑ckë
, 
Àn
);

181 i‡(
èpFD
 != -1) {

182 
£nd
 = 0;

183 
£nd
 < 
Àn
) {

184 
t
 = 
	`wrôe
(
èpFD
, &
buf„r
[
£nd
], 
Àn
 - send);

185 i‡(
t
 == -1) {

186 
	`¥ötf
("Error while sendingÅoÅap device!\n");

189 
£nd
 +
t
;

193 
i
 = 0; i < 
devi˚Cou¡
; i++) {

194 
u_öt32_t
 
¥›
;

195 i‡(
uniˇ°
) {

196 
¥›
 = 
c⁄nUni
[
	`GRID
(*
ödex
, 
i
, 
devi˚Cou¡
)];

198 
¥›
 = 
c⁄nBC
[
	`GRID
(*
ödex
, 
i
, 
devi˚Cou¡
)];

201 i‡(
¥›
 =0 ||Ör› < (
	`ønd
() % (1 << 24))) {

205 
	`pˇp_öje˘
(
devi˚s
[
i
], 
buf„r
, 
Àn
);

207 
	}
}

210 
	$maö
(
¨gc
, **
¨gv
)

212 
i
;

213 
dr›Pr›abûôy
 = 0;

214 *
c⁄√˘i⁄Fûe
 = 
NULL
;

215 
devi˚Index
 = -1;

216 
hubMode
 = 0;

218 
MacAddªss
 
mac
;

219 *
è≤ame
 = 
NULL
;

221 i‡(
¨gc
 =1 || (¨g¯=2 && 
	`°rcmp
(
¨gv
[1], "--help") == 0)) {

222 
	`¥ötf
("%s: [-c⁄ <c⁄√˘i⁄fûe>] [-hub] [-debug]" " [-è∞<dev«me> <mac>] [-dr›] -dev <dev1> <dev2> <dev3>...\n", 
¨gv
[0]);

226 
devi˚Cou¡
 = 0;

227 
èpFD
 = -1;

229 
i
 = 1; i < 
¨gc
; i++) {

230 i‡(
	`°rcmp
(
¨gv
[
i
], "-c⁄"Ë=0 && i < 
¨gc
 - 1) {

231 
c⁄√˘i⁄Fûe
 = 
¨gv
[
i
 + 1];

232 
i
++;

234 i‡(
	`°rcmp
(
¨gv
[
i
], "-drop") == 0) {

235 
dr›Pr›abûôy
 = 1;

237 i‡(
	`°rcmp
(
¨gv
[
i
], "-dev") == 0) {

238 
devi˚Index
 = ++
i
;

239 
i
 < 
¨gc
 && 
¨gv
[i][0] != '-') {

240 
i
++;

241 
devi˚Cou¡
++;

243 
i
--;

245 i‡(
	`°rcmp
(
¨gv
[
i
], "-hub") == 0) {

246 
hubMode
 = 1;

248 i‡(
	`°rcmp
(
¨gv
[
i
], "-èp"Ë=0 && i < 
¨gc
 - 2) {

249 
è≤ame
 = 
¨gv
[++
i
];

250 
	`ªadMac
(
¨gv
[++
i
], &
mac
);

252 i‡(
	`°rcmp
(
¨gv
[
i
], "-debug") == 0) {

253 
debugMode
 = 1;

257 i‡(
hubMode
 =1 && 
c⁄√˘i⁄Fûe
 !
NULL
) {

258 
	`¥ötf
("Error, you cannot set matrix file in hub mode.\n");

262 i‡(
c⁄√˘i⁄Fûe
 =
NULL
 && 
hubMode
 == 0) {

263 
	`¥ötf
("Error,ÇetsimÇeedsá matrix file for connections ifÇotÑunning in hub mode.\n");

267 i‡(
devi˚Index
 < 0) {

268 
	`¥ötf
("Error, you must specifyÅhe devicesÅheÖrogramm connectsÅo.\n");

272 i‡(
devi˚Cou¡
 < 2) {

273 
	`¥ötf
("Error, youÇeedÅo bindátÜeastÅwo devicesÅoÅhe bridge.\n");

277 i‡(
è≤ame
) {

278 
èpFD
 = 
	`¸óãT≠
(
è≤ame
, &
mac
);

279 i‡(
èpFD
 == -1) {

280 
	`¥ötf
("Eº‹, c™nŸ o≥¿è∞devi˚ '%s'\n", 
è≤ame
);

285 
ru¬ög
 = 1;

287 *
c⁄nM©rix
 = 
	`mÆloc
((Ë* 
devi˚Cou¡
 * deviceCount);

288 i‡(!
c⁄nM©rix
) {

289 
	`¥ötf
("Error,ÇotÉnough memory for mac buffer!");

290 i‡(
èpFD
 != -1)

291 
	`˛o£T≠
(
èpFD
);

295 i‡(
hubMode
) {

296 
x
, 
y
;

302 
y
 = 0; y < 
devi˚Cou¡
; y++) {

303 
x
 = 0; x < 
devi˚Cou¡
; x++) {

304 i‡(
x
 !
y
) {

305 
c⁄nM©rix
[
	`GRID
(
x
, 
y
, 
devi˚Cou¡
)] = 1.0;

310 i‡(
	`ªadC⁄√˘i⁄M©rix
(
c⁄nM©rix
, 
c⁄√˘i⁄Fûe
, 
devi˚Cou¡
)) {

311 
	`¥ötf
("Error whileÑeading matrix file\n");

312 
	`‰ì
(
c⁄nM©rix
);

313 i‡(
èpFD
 != -1)

314 
	`˛o£T≠
(
èpFD
);

318 
	`ˇlcuœãC⁄√˘i⁄s
(
c⁄nM©rix
, 
devi˚Cou¡
, 
dr›Pr›abûôy
);

319 
	`‰ì
(
c⁄nM©rix
);

321 
îrbuf
[
PCAP_ERRBUF_SIZE
];

322 
maxDevi˚FD
 = 0;

324 i‡(
èpFD
 != -1) {

325 
maxDevi˚FD
 = 
èpFD
;

327 
i
 = 0; i < 
devi˚Cou¡
; i++) {

328 
devi˚s
[
i
] = 
	`pˇp_›í_live
(
¨gv
[ò+ 
devi˚Index
], 
BUFSIZ
, 0, -1, 
îrbuf
);

329 
devi˚FD
[
i
] = -1;

330 i‡(
devi˚s
[
i
] =
NULL
) {

331 
	`¥ötf
("Eº‹, c™nŸ o≥¿pˇ∞f‹ devi˚ '%s'.\n", 
¨gv
[
i
 + 
devi˚Index
]);

332 
ru¬ög
 = 0;

334 
devi˚FD
[
i
] = 
	`pˇp_fûío
(
devi˚s
[i]);

335 i‡(
devi˚FD
[
i
] > 
maxDevi˚FD
) {

336 
maxDevi˚FD
 = 
devi˚FD
[
i
];

342 
	`sig«l
(
SIGABRT
, &
sig«lH™dÀr
);

343 
	`sig«l
(
SIGTERM
, &
sig«lH™dÀr
);

344 
	`sig«l
(
SIGQUIT
, &
sig«lH™dÀr
);

345 
	`sig«l
(
SIGINT
, &
sig«lH™dÀr
);

347 
ru¬ög
) {

348 
fd_£t
 
sockëSë
;

349 
sockësRódy
;

350 
timevÆ
 
timeout
;

351 
timeout
.
tv_£c
 = 1;

352 
timeout
.
tv_u£c
 = 0;

354 
	`FD_ZERO
(&
sockëSë
);

355 
i
 = 0; i < 
devi˚Cou¡
; i++) {

356 
	`FD_SET
(
devi˚FD
[
i
], &
sockëSë
);

358 i‡(
èpFD
 != -1) {

359 
	`FD_SET
(
èpFD
, &
sockëSë
);

362 
sockësRódy
 = 
	`£À˘
(
maxDevi˚FD
 + 1, &
sockëSë
, (
fd_£t
 *Ë0, (fd_£à*Ë0, &
timeout
);

363 i‡(
sockësRódy
 <= 0) {

367 
i
 = 0; i < 
devi˚Cou¡
; i++) {

368 i‡(
	`FD_ISSET
(
devi˚FD
[
i
], &
sockëSë
)) {

369 
îr‹
 = 
	`pˇp_di•©ch
(
devi˚s
[
i
], -1, 
ˇ±uª_ˇŒback
,

370 (
u_ch¨
 *Ë& 
i
);

372 i‡(
îr‹
 == -1) {

373 
	`¥ötf
("Eº‹ durögÖˇp_di•©ch f‹ devi˚ %s\n", 
¨gv
[
i
 + 
devi˚Index
]);

374 
ru¬ög
 = 0;

379 i‡(
èpFD
 !-1 && 
	`FD_ISSET
—≠FD, &
sockëSë
)) {

380 
	`èp_ˇŒback
();

384 
i
 = 0; i < 
devi˚Cou¡
; i++) {

385 i‡(
devi˚s
[
i
] !
NULL
) {

386 
	`pˇp_˛o£
(
devi˚s
[
i
]);

389 
	`‰ì
(
c⁄nUni
);

390 
	`‰ì
(
c⁄nBC
);

392 i‡(
èpFD
 != -1)

393 
	`˛o£T≠
(
èpFD
);

395 
	}
}

	@contrib/netsimpcap/src/network_tap.c

20 
	~<î∫o.h
>

21 
	~<f˙é.h
>

22 
	~<±hªad.h
>

23 
	~<°ddef.h
>

24 
	~<°dio.h
>

25 
	~<°rög.h
>

26 
	~<°d¨g.h
>

27 
	~<sig«l.h
>

28 
	~<time.h
>

29 
	~<uni°d.h
>

30 
	~<¨∑/öë.h
>

31 
	~<löux/if_ëhî.h
>

32 
	~<löux/if_∑ckë.h
>

33 
	~<löux/if_tun.h
>

34 
	~<√t/if_¨p.h
>

35 
	~<√töë/ù.h
>

36 
	~<√töë/udp.h
>

37 
	~<√t/if.h
>

38 
	~<√t/rouã.h
>

39 
	~<sys/io˘l.h
>

40 
	~<sys/time.h
>

41 
	~<sys/ty≥s.h
>

43 
	~"c⁄fig.h
"

44 
	~"debug.h
"

45 
	~"√tw‹k_èp.h
"

47 
	gmacBrﬂdˇ°
[] = { 0xff, 0xff, 0xff, 0xff, 0xff, 0xff };

58 
	$ªadMac
(*
vÆue
, 
MacAddªss
 * 
èrgë
)

60 
buf„r
[13];

61 
ödex
 = 0;

63 
	`mem£t
(
buf„r
, 0, (buffer));

65 
c
;

66 (
c
 = *
vÆue
++)) {

67 
c
) {

90 i‡(
ödex
 > 11) {

93 
buf„r
[
ödex
++] = 
c
;

100 i‡(
ödex
 < 12) {

104 
ödex
 = 5; index >= 0; index--) {

105 
buf„r
[
ödex
 * 2 + 2] = 0;

107 
vÆue
;

108 
	`ssˇnf
(&
buf„r
[
ödex
], "%x", &
vÆue
);

109 
èrgë
->
mac
[
ödex
] = ()
vÆue
;

112 
	}
}

122 
	$˛o£T≠
(
fd
)

124 
	`˛o£
(
fd
);

125 
	}
}

139 
	$¸óãT≠
(*
«me
, 
MacAddªss
 * 
mac
)

141 c⁄° 
devi˚Name
[] = "/dev/net/tun";

142 
ëfd
;

143 
i‰eq
 ifreq;

145 
io˘lSkfd
;

146 
io˘Ães
;

148 
ëfd
 = 
	`›í
(
devi˚Name
, 
O_RDWR
);

149 i‡(
ëfd
 < 0) {

150 
	`¥ötf
("Cannot openÅap device!\n");

154 
	`mem£t
(&
i‰eq
, 0, (ifreq));

155 
	`°∫˝y
(
i‰eq
.
i‰_«me
, 
«me
, 
IFNAMSIZ
 - 1);

156 
i‰eq
.
i‰_«me
[
IFNAMSIZ
 - 1] = '\0';

162 
i‰eq
.
i‰_Êags
 = 
IFF_TAP
;

163 
i‰eq
.
i‰_Êags
 |
IFF_NO_PI
;

165 i‡(
	`io˘l
(
ëfd
, 
TUNSETIFF
, (*)&
i‰eq
) < 0) {

166 
	`˛o£
(
ëfd
);

167 
	`¥ötf
("Cannot setÅun deviceÅype!\n");

171 
	`mem£t
(&
i‰eq
, 0, (ifreq));

172 
	`°∫˝y
(
i‰eq
.
i‰_«me
, 
«me
, 
IFNAMSIZ
 - 1);

173 
i‰eq
.
i‰_«me
[
IFNAMSIZ
 - 1] = '\0';

174 
i‰eq
.
i‰_addr
.
ß_Ámûy
 = 
AF_INET
;

176 
io˘lSkfd
 = 
	`sockë
(
PF_INET
, 
SOCK_DGRAM
, 0);

177 i‡(
io˘lSkfd
 < 0) {

178 
	`˛o£
(
ëfd
);

179 
	`¥ötf
("Cannot open configuration socket!\n");

184 
i‰eq
.
i‰_addr
.
ß_Ámûy
 = 
ARPHRD_ETHER
;

185 
	`mem˝y
(
i‰eq
.
i‰_addr
.
ß_d©a
, 
mac
, 6);

186 
io˘Ães
 = 
	`io˘l
(
io˘lSkfd
, 
SIOCSIFHWADDR
, &
i‰eq
);

187 i‡(
io˘Ães
 >= 0) {

189 
	`mem˝y
(
i‰eq
.
i‰_addr
.
ß_d©a
, 
macBrﬂdˇ°
, 6);

190 
io˘Ães
 = 
	`io˘l
(
io˘lSkfd
, 
SIOCSIFHWBROADCAST
, &
i‰eq
);

191 i‡(
io˘Ães
 >= 0) {

193 
i‰eq
.
i‰_addr
.
ß_Ámûy
 = 
AF_INET
;

194 
io˘Ães
 = 
	`io˘l
(
io˘lSkfd
, 
SIOCGIFFLAGS
, &
i‰eq
);

195 i‡(
io˘Ães
 >= 0) {

196 
i‰eq
.
i‰_Êags
 |(
IFF_UP
 | 
IFF_RUNNING
 | 
IFF_BROADCAST
);

197 
io˘Ães
 = 
	`io˘l
(
io˘lSkfd
, 
SIOCSIFFLAGS
, &
i‰eq
);

201 i‡(
io˘Ães
 < 0) {

202 
	`¥ötf
("C⁄figuøti⁄ o‡tu¿devi˚ faûed! (%d %s)\n", 
î∫o
, 
	`°ªº‹
(errno));

203 
	`˛o£
(
ëfd
);

204 
	`˛o£
(
io˘lSkfd
);

209 
	`mem£t
(&
i‰eq
, 0, (ifreq));

210 
	`°∫˝y
(
i‰eq
.
i‰_«me
, 
«me
, 
IFNAMSIZ
 - 1);

211 
i‰eq
.
i‰_«me
[
IFNAMSIZ
 - 1] = '\0';

213 
io˘Ães
 = 
	`io˘l
(
io˘lSkfd
, 
SIOCGIFFLAGS
, &
i‰eq
);

214 i‡(
io˘Ães
 >= 0) {

215 
i‰eq
.
i‰_Êags
 |
IFF_MULTICAST
;

216 
io˘Ães
 = 
	`io˘l
(
io˘lSkfd
, 
SIOCSIFFLAGS
, &
i‰eq
);

219 
	`˛o£
(
io˘lSkfd
);

220  
ëfd
;

221 
	}
}

	@contrib/netsimpcap/src/network_tap.h

20 #i‚de‡
NETWORK_H_


21 
	#NETWORK_H_


	)

23 
	~<löux/ty≥s.h
>

25 
	sMacAddªss
 {

26 
	mmac
[6];

27 } 
	tMacAddªss
;

29 
ªadMac
(*
vÆue
, 
MacAddªss
 * 
èrgë
);

30 
˛o£T≠
(
fd
);

31 
¸óãT≠
(*
«me
, 
MacAddªss
 * 
mac
);

	@gui/linux-gtk/src/callbacks.c

24 
	~"comm⁄.h
"

25 
	~"öãrÁ˚.h
"

28 
	$£À˘i⁄_made
(
GtkWidgë
 * 
˛i°
, 
göt
 
row
, göà
cﬁumn
, 
GdkEvítBuâ⁄
 * 
evít
, 
gpoöãr
 
d©a
)

30 
gch¨
 *
ù
, *
h›s
, *
gw
, *
dev
;

31 c⁄° 
gch¨
 
ãxt
[100];

36 
	`gtk_˛i°_gë_ãxt
(
	`GTK_CLIST
(
˛i°
), 
row
, 0, &
ù
);

37 
	`gtk_˛i°_gë_ãxt
(
	`GTK_CLIST
(
˛i°
), 
row
, 1, &
gw
);

38 
	`gtk_˛i°_gë_ãxt
(
	`GTK_CLIST
(
˛i°
), 
row
, 2, &
h›s
);

39 
	`gtk_˛i°_gë_ãxt
(
	`GTK_CLIST
(
˛i°
), 
row
, 3, &
dev
);

42 
	`•rötf
((*)&
ãxt
[0], "IP:%s\nGATEWAY:%s\nHOPCOUNT:%s\nINTERFACE:%s\n", 
ù
, 
gw
, 
h›s
, 
dev
);

51 
	}
}

54 
	$node_£À˘i⁄
(
GtkWidgë
 * 
˛i°
, 
göt
 
row
, göà
cﬁumn
, 
GdkEvítBuâ⁄
 * 
evít
, 
gpoöãr
 
d©a
)

57 
gch¨
 *
ãxt
;

58 
node
 *
ho°
;

59 
mid
 *
mids
;

60 
m¥
 *
m¥s
;

61 
h«
 *
h«s
;

62 
i
;

63 
gch¨
 *
tmpshô
[1] = { "" };

68 
	`gtk_˛i°_˛ór
(
	`GTK_CLIST
(
mid_li°
));

69 
	`gtk_˛i°_˛ór
(
	`GTK_CLIST
(
m¥_li°
));

70 
	`gtk_˛i°_˛ór
(
	`GTK_CLIST
(
h«_li°
));

71 
i
 = 0;

76 
	`gtk_˛i°_gë_ãxt
(
	`GTK_CLIST
(
node_li°
), 
row
, 0, &
ãxt
);

79 i‡(
	`°∫cmp
(
ãxt
, "local", ("local")) == 0)

80 
ho°
 = 
	`föd_node_t
(&
maö_addr
);

82 
ho°
 = 
	`föd_node
(
ãxt
);

84 i‡(
ho°
) {

86 
	`time_out_m¥s
(&
ho°
->
addr
);

89 
m¥s
 = 
ho°
->
m¥
.
√xt
;

90 
mids
 = 
ho°
->
mid
.
√xt
;

91 
h«s
 = 
ho°
->
h«
.
√xt
;

93 
mids
 !&
ho°
->
mid
) {

94 
	`gtk_˛i°_≠≥nd
(
	`GTK_CLIST
(
mid_li°
), 
tmpshô
);

95 
	`gtk_˛i°_£t_ãxt
(
	`GTK_CLIST
(
mid_li°
), 
i
, 0, 
	`ù_to_°rög
(&
mids
->
Æüs
));

96 
i
++;

97 
mids
 = mids->
√xt
;

100 
i
 = 0;

102 
m¥s
 !&
ho°
->
m¥
) {

104 
	`gtk_˛i°_≠≥nd
(
	`GTK_CLIST
(
m¥_li°
), 
tmpshô
);

105 
	`gtk_˛i°_£t_ãxt
(
	`GTK_CLIST
(
m¥_li°
), 
i
, 0, 
	`ù_to_°rög
(&
m¥s
->
addr
));

106 
i
++;

107 
m¥s
 = m¥s->
√xt
;

109 
i
 = 0;

111 
h«s
 !&
ho°
->
h«
) {

112 
	`gtk_˛i°_≠≥nd
(
	`GTK_CLIST
(
h«_li°
), 
tmpshô
);

113 
	`gtk_˛i°_£t_ãxt
(
	`GTK_CLIST
(
h«_li°
), 
i
, 0, 
	`ù_to_°rög
(&
h«s
->
√t
));

114 
i
++;

115 
h«s
 = h«s->
√xt
;

119 
	`¥ötf
("CouldÇŸ föd infÿabouà%s!\n", 
ãxt
);

122 
	}
}

125 
	$∑ckë_£À˘i⁄
(
GtkWidgë
 * 
˛i°
, 
göt
 
row
, göà
cﬁumn
, 
GdkEvítBuâ⁄
 * 
evít
, 
gpoöãr
 
d©a
)

128 
ﬁ§_mesßge
 *
∑ck
;

129 *
∑ckë
;

130 
y
, 
x
;

131 
size
;

132 *
c⁄ã¡
[4];

133 
mem_size
 = 10;

135 
c⁄ã¡
[0] = (*)
	`mÆloc
(
mem_size
);

136 
c⁄ã¡
[1] = (*)
	`mÆloc
(
mem_size
);

137 
c⁄ã¡
[2] = (*)
	`mÆloc
(
mem_size
);

138 
c⁄ã¡
[3] = (*)
	`mÆloc
(
mem_size
);

140 
∑ck
 = 
	`gë_∑ckë
(
row
);

141 
∑ckë
 = (*)
∑ck
;

145 
	`gtk_˛i°_˛ór
(
	`GTK_CLIST
(
∑ckë_c⁄ã¡_li°
));

147 
size
 = 
	`¡ohs
(
∑ck
->
v4
.
ﬁ§_msgsize
);

149 
y
 = 0; y < 
size
; y += 4) {

151 
x
 = 0; x < 4; x++) {

152 i‡(
di•œy_dec
)

153 
	`•rötf
(
c⁄ã¡
[
x
], "%03i", (
u_ch¨
Ë
∑ckë
[
y
 + x]);

155 
	`•rötf
(
c⁄ã¡
[
x
], "%02x", (
u_ch¨
Ë
∑ckë
[
y
 + x]);

158 
	`gtk_˛i°_≠≥nd
(
	`GTK_CLIST
(
∑ckë_c⁄ã¡_li°
), 
c⁄ã¡
);

161 
	`‰ì
(
c⁄ã¡
[0]);

162 
	`‰ì
(
c⁄ã¡
[1]);

163 
	`‰ì
(
c⁄ã¡
[2]);

164 
	`‰ì
(
c⁄ã¡
[3]);

166 
	}
}

169 
	$cﬁumn_˛icked_ˇŒback
(
GtkWidgë
 * 
li°
, 
göt
 
cﬁumn
)

174 
	}
}

180 
	$c⁄√˘_ˇŒback
(
GtkWidgë
 * 
widgë
, 
gpoöãr
 
d©a
)

182 
	`ùc_c⁄√˘
();

183 
	}
}

189 
	$∑ckë_ˇŒback
(
GtkWidgë
 * 
widgë
, 
gpoöãr
 
d©a
)

191 i‡(
‰ìze_∑ckës
) {

192 
‰ìze_∑ckës
 = 0;

193 
	`gtk_buâ⁄_£t_œbñ
(
	`GTK_BUTTON
(
∑ckë_buâ⁄
), "FreezeÖackets");

195 
‰ìze_∑ckës
 = 1;

196 
	`gtk_buâ⁄_£t_œbñ
(
	`GTK_BUTTON
(
∑ckë_buâ⁄
), "GrabÖackets");

198 
	}
}

204 
	$∑ckë_di•_ˇŒback
(
GtkWidgë
 * 
widgë
, 
gpoöãr
 
d©a
)

206 i‡(
di•œy_dec
) {

207 
di•œy_dec
 = 0;

208 
	`gtk_buâ⁄_£t_œbñ
(
	`GTK_BUTTON
(
∑ckë_di•_buâ⁄
), "Display decimal");

210 
di•œy_dec
 = 1;

211 
	`gtk_buâ⁄_£t_œbñ
(
	`GTK_BUTTON
(
∑ckë_di•_buâ⁄
), "Display hex");

213 
	}
}

216 
	$gui_shutdown
(
GtkObje˘
 * 
obje˘
, 
gpoöãr
 
u£r_d©a
)

218 
	`¥ötf
("Shutting down...\n");

220 i‡(
	`ùc_˛o£
() < 0)

221 
	`¥ötf
("CouldÇot close socket!\n");

223 
	`¥ötf
("BYE-BYE!\n");

224 
	`exô
(0);

226 
	}
}

	@gui/linux-gtk/src/common.h

28 #i‚de‡
_OLSRD_FORNTEND_COMMON


29 
	#_OLSRD_FORNTEND_COMMON


	)

31 
	~<gtk/gtk.h
>

32 
	~<glib.h
>

33 
	~<°dlib.h
>

34 
	~<√töë/ö.h
>

35 
	~<°dio.h
>

36 
	~<°rög.h
>

38 
	~"ﬁ§_¥Ÿocﬁ.h
"

40 
	#ﬁ§d_vîsi⁄
 "ﬁ§.‹g GUI 0.2.7"

	)

41 
	#IPC_INTERVAL
 500

42 
	#MAXPACKS
 20

	)

43 
	#BUFFSIZE
 512

	)

45 
c⁄√˘ed
;

46 
timevÆ
 
hﬁd_time_nodes
;

47 
timevÆ
 
now
;

50 
ﬁ§_ù_addr
 
	gmaö_addr
;

51 
ﬁ§_ù_addr
 
	gnuŒ_addr
;

53 
	gùvîsi⁄
;

54 
	gùsize
;

55 
	gùv6_buf
[100];

57 
	gnodes_timeout
;

59 
	g‰ìze_∑ckës
;

60 
	gdi•œy_dec
;

61 
timeouts
;

67 
	smid
 {

68 
ﬁ§_ù_addr
 
	mÆüs
;

69 
mid
 *
	m√xt
;

70 
mid
 *
	m¥ev
;

73 
	sh«
 {

74 
ﬁ§_ù_addr
 
	m√t
;

75 
ﬁ§_ù_addr
 
	mmask
;

76 
h«
 *
	m√xt
;

77 
h«
 *
	m¥ev
;

80 
	sm¥
 {

81 
ﬁ§_ù_addr
 
	maddr
;

82 
timevÆ
 
	mtimî
;

83 
m¥
 *
	m√xt
;

84 
m¥
 *
	m¥ev
;

87 
	snode
 {

88 
ﬁ§_ù_addr
 
	maddr
;

89 
ﬁ§_ù_addr
 
	mgw_addr
;

90 
	mh›cou¡
;

91 
	mdi•œy
;

92 
	mdev
[5];

93 
mid
 
	mmid
;

94 
h«
 
	mh«
;

95 
m¥
 
	mm¥
;

96 
timevÆ
 
	mtimî
;

97 
node
 *
	m√xt
;

98 
node
 *
	m¥ev
;

105 
GtkWidgë
 *
¸óã_maö_wödow
();

107 
∑ckë_li°_add
(*, *, *);

109 
rouã_li°_add
(*, *, *, *);

111 
rouã_li°_dñ
(*);

113 
rouã_li°_upd©e
(*);

115 
£t_√t_öfo
(
gch¨
 *, );

117 
£t_√t_öfo_ofÊöe
();

119 
upd©e_nodes_li°
(
node
 *);

121 
ªmove_nodes_li°
(
ﬁ§_ù_addr
 *);

126 
ùc_c⁄√˘
();

128 
ùc_˛o£
();

130 
ùc_ªad
();

132 
ùc_£nd
();

134 *
ù_to_°rög
(
ﬁ§_ù_addr
 *);

136 
gui_ôﬂ
(, *);

142 
add_∑ckë_to_buf„r
(
ﬁ§_mesßge
 *, );

144 
ﬁ§_mesßge
 *
gë_∑ckë
();

150 
öô_nodes
();

152 
node
 *
föd_node
(*);

154 
node
 *
föd_node_t
(
ﬁ§_ù_addr
 *);

156 
upd©e_timî_node
(
ﬁ§_ù_addr
 *, 
ﬁ§_u8_t
);

158 
add_h«_node
(
ﬁ§_ù_addr
 *, ﬁ§_ù_add∏*, ﬁ§_ù_add∏*, 
ﬁ§_u8_t
);

160 
add_mid_node
(
ﬁ§_ù_addr
 *, ﬁ§_ù_add∏*, 
ﬁ§_u8_t
);

162 
öô_timî
(
ﬁ§_u32_t
, 
timevÆ
 *);

164 
göt
 
time_out_nodes
(
gpoöãr
);

166 
add_node
(
ﬁ§_ù_addr
 *, 
ﬁ§_u8_t
);

168 
add_m¥
(
ﬁ§_ù_addr
 *, ﬁ§_ù_add∏*, 
timevÆ
 *);

170 
upd©e_timî_m¥
(
ﬁ§_ù_addr
 *, ﬁ§_ù_add∏*, 
ﬁ§_u8_t
);

172 
time_out_m¥s
(
ﬁ§_ù_addr
 *);

	@gui/linux-gtk/src/interface.c

24 
	~"comm⁄.h
"

25 
	~"öãrÁ˚.h
"

26 
	~"pixm≠s.h
"

32 
GdkBôm≠
 *
	gmask
;

34 
	g∑ckë_li°_size
 = 0;

35 
	grouã_li°_size
 = 0;

36 
	gnode_li°_size
 = 0;

38 
GtkWidgë
 *
	gmaö_wödow
;

40 
GtkWidgë
 *

41 
	$¸óã_maö_wödow
()

43 
GtkWidgë
 *
nŸebook1
;

44 
GtkWidgë
 *
‰ame3
;

45 
GtkWidgë
 *
‰ame4
;

46 
GtkWidgë
 *
hbox1
;

47 
GtkWidgë
 *
vbox1
;

48 
GtkWidgë
 *
s¸ﬁÀdwödow1
;

49 
GtkWidgë
 *
node_œbñ1
;

50 
GtkWidgë
 *
node_œbñ2
;

51 
GtkWidgë
 *
node_œbñ3
;

52 
GtkWidgë
 *
node_œbñ4
;

53 
GtkWidgë
 *
node_œbñ7
;

54 
GtkWidgë
 *
node_œbñ8
;

55 
GtkWidgë
 *
node_œbñ9
;

56 
GtkWidgë
 *
mid_‰ame
;

57 
GtkWidgë
 *
m¥_‰ame
;

58 
GtkWidgë
 *
h«_‰ame
;

59 
GtkWidgë
 *
mid_s¸ﬁÀdwödow
;

60 
GtkWidgë
 *
m¥_s¸ﬁÀdwödow
;

61 
GtkWidgë
 *
h«_s¸ﬁÀdwödow
;

62 
GtkWidgë
 *
Maö
;

63 
GtkWidgë
 *
œbñ_rouãs
;

64 
GtkWidgë
 *
hbox2
;

65 
GtkWidgë
 *
‰ame2
;

66 
GtkWidgë
 *
s¸ﬁÀdwödow4
;

67 
GtkWidgë
 *
œbñ17
;

68 
GtkWidgë
 *
œbñ18
;

69 
GtkWidgë
 *
œbñ19
;

70 
GtkWidgë
 *
s¸ﬁÀdwödow3
;

71 
GtkWidgë
 *
œbñ13
;

72 
GtkWidgë
 *
œbñ14
;

73 
GtkWidgë
 *
œbñ15
;

74 
GtkWidgë
 *
œbñ16
;

75 
GtkWidgë
 *
œbñ_∑ckës
;

77 
GtkWidgë
 *
œbñ3
;

78 
GtkWidgë
 *
√t_vbox
;

79 
GtkWidgë
 *
∑ck_vbox
;

80 
GtkWidgë
 *
∑ck_di•_vbox
;

81 
GtkWidgë
 *
di•_‰ame
;

82 
GtkWidgë
 *
rouã_‰ame
;

83 
GtkWidgë
 *
rouã_°©s_‰ame
;

84 
GtkWidgë
 *
rouã_s¸ﬁÀdwödow
;

85 
GtkWidgë
 *
rouã_œbñ1
;

86 
GtkWidgë
 *
rouã_œbñ2
;

87 
GtkWidgë
 *
rouã_œbñ3
;

88 
GtkWidgë
 *
rouã_œbñ4
;

89 
GtkWidgë
 *
rouã_hbox1
;

91 
GtkWidgë
 *
åaffic_œbñ
;

93 
GtkWidgë
 *
£âögs_œbñ
;

94 
GtkWidgë
 *
£âögs_hbox1
;

96 
GtkWidgë
 *
about_hbox1
;

97 
GtkWidgë
 *
about_œbñ
;

99 
GtkWidgë
 *
em±y1
;

101 
GdkPixm≠
 *
unik_logo_gdk
;

102 
GtkWidgë
 *
unik_logo
;

108 
maö_wödow
 = 
	`gtk_wödow_√w
(
GTK_WINDOW_TOPLEVEL
);

109 
	`gtk_obje˘_£t_d©a
(
	`GTK_OBJECT
(
maö_wödow
), "main_window", main_window);

110 
	`gtk_wödow_£t_tôÀ
(
	`GTK_WINDOW
(
maö_wödow
), (
ﬁ§d_vîsi⁄
));

111 
	`gtk_wödow_£t_deÁu…_size
(
	`GTK_WINDOW
(
maö_wödow
), 600, 550);

112 
	`gtk_sig«l_c⁄√˘
(
	`GTK_OBJECT
(
maö_wödow
), "de°roy", 
	`GTK_SIGNAL_FUNC
(
gui_shutdown
),

114 
NULL
);

115 
	`gtk_wödow_£t_posôi⁄
(
	`GTK_WINDOW
(
maö_wödow
), 
GTK_WIN_POS_CENTER
);

116 
	`gtk_wödow_£t_pﬁicy
(
	`GTK_WINDOW
(
maö_wödow
), 
FALSE
, 
TRUE
, TRUE);

121 
unik_logo_gdk
 =

122 
	`gdk_pixm≠_cﬁ‹m≠_¸óã_‰om_xpm_d
(
NULL
, 
	`gtk_widgë_gë_cﬁ‹m≠
(
maö_wödow
), &
mask
, NULL, (
gch¨
 **Ë
logo_xpm
);

124 
unik_logo
 = 
	`gtk_pixm≠_√w
(
unik_logo_gdk
, 
mask
);

130 
nŸebook1
 = 
	`gtk_nŸebook_√w
();

131 
	`gtk_widgë_ªf
(
nŸebook1
);

132 
	`gtk_obje˘_£t_d©a_fuŒ
(
	`GTK_OBJECT
(
maö_wödow
), "nŸebook1", 
nŸebook1
, (
GtkDe°royNŸify
Ë
gtk_widgë_uƒef
);

133 
	`gtk_widgë_show
(
nŸebook1
);

134 
	`gtk_c⁄èöî_add
(
	`GTK_CONTAINER
(
maö_wödow
), 
nŸebook1
);

139 
vbox1
 = 
	`gtk_vbox_√w
(
FALSE
, 0);

140 
	`gtk_widgë_ªf
(
vbox1
);

141 
	`gtk_obje˘_£t_d©a_fuŒ
(
	`GTK_OBJECT
(
maö_wödow
), "vbox1", 
vbox1
, (
GtkDe°royNŸify
Ë
gtk_widgë_uƒef
);

142 
	`gtk_widgë_show
(
vbox1
);

144 
	`gtk_c⁄èöî_add
(
	`GTK_CONTAINER
(
nŸebook1
), 
vbox1
);

149 
‰ame3
 = 
	`gtk_‰ame_√w
("RegisteredÇodes:");

150 
	`gtk_widgë_ªf
(
‰ame3
);

151 
	`gtk_obje˘_£t_d©a_fuŒ
(
	`GTK_OBJECT
(
maö_wödow
), "‰ame3", 
‰ame3
, (
GtkDe°royNŸify
Ë
gtk_widgë_uƒef
);

152 
	`gtk_widgë_show
(
‰ame3
);

153 
	`gtk_box_∑ck_°¨t
(
	`GTK_BOX
(
vbox1
), 
‰ame3
, 
TRUE
, TRUE, 0);

154 
	`gtk_widgë_£t_size_ªque°
(
‰ame3
, -1, 300);

155 
	`gtk_c⁄èöî_£t_b‹dî_width
(
	`GTK_CONTAINER
(
‰ame3
), 1);

161 
s¸ﬁÀdwödow1
 = 
	`gtk_s¸ﬁÀd_wödow_√w
(
NULL
, NULL);

162 
	`gtk_widgë_ªf
(
s¸ﬁÀdwödow1
);

163 
	`gtk_obje˘_£t_d©a_fuŒ
(
	`GTK_OBJECT
(
maö_wödow
), "s¸ﬁÀdwödow1", 
s¸ﬁÀdwödow1
, (
GtkDe°royNŸify
Ë
gtk_widgë_uƒef
);

164 
	`gtk_widgë_show
(
s¸ﬁÀdwödow1
);

165 
	`gtk_c⁄èöî_add
(
	`GTK_CONTAINER
(
‰ame3
), 
s¸ﬁÀdwödow1
);

166 
	`gtk_s¸ﬁÀd_wödow_£t_pﬁicy
(
	`GTK_SCROLLED_WINDOW
(
s¸ﬁÀdwödow1
), 
GTK_POLICY_NEVER
, 
GTK_POLICY_AUTOMATIC
);

175 
node_li°
 = 
	`gtk_˛i°_√w
(7);

176 
	`gtk_widgë_ªf
(
node_li°
);

177 
	`gtk_obje˘_£t_d©a_fuŒ
(
	`GTK_OBJECT
(
maö_wödow
), "node_li°", 
node_li°
, (
GtkDe°royNŸify
Ë
gtk_widgë_uƒef
);

178 
	`gtk_widgë_show
(
node_li°
);

179 
	`gtk_c⁄èöî_add
(
	`GTK_CONTAINER
(
s¸ﬁÀdwödow1
), 
node_li°
);

180 
	`gtk_˛i°_£t_cﬁumn_width
(
	`GTK_CLIST
(
node_li°
), 0, 150);

182 
	`gtk_˛i°_£t_cﬁumn_width
(
	`GTK_CLIST
(
node_li°
), 1, 150);

184 
	`gtk_˛i°_£t_cﬁumn_width
(
	`GTK_CLIST
(
node_li°
), 2, 50);

185 
	`gtk_˛i°_£t_cﬁumn_ju°ifiˇti⁄
(
	`GTK_CLIST
(
node_li°
), 2, 
GTK_JUSTIFY_CENTER
);

186 
	`gtk_˛i°_£t_cﬁumn_width
(
	`GTK_CLIST
(
node_li°
), 3, 80);

187 
	`gtk_˛i°_£t_cﬁumn_ju°ifiˇti⁄
(
	`GTK_CLIST
(
node_li°
), 3, 
GTK_JUSTIFY_CENTER
);

189 
	`gtk_˛i°_£t_cﬁumn_width
(
	`GTK_CLIST
(
node_li°
), 4, 70);

190 
	`gtk_˛i°_£t_cﬁumn_ju°ifiˇti⁄
(
	`GTK_CLIST
(
node_li°
), 4, 
GTK_JUSTIFY_CENTER
);

194 
	`gtk_˛i°_£t_cﬁumn_width
(
	`GTK_CLIST
(
node_li°
), 5, 40);

195 
	`gtk_˛i°_£t_cﬁumn_ju°ifiˇti⁄
(
	`GTK_CLIST
(
node_li°
), 5, 
GTK_JUSTIFY_CENTER
);

196 
	`gtk_˛i°_£t_cﬁumn_width
(
	`GTK_CLIST
(
node_li°
), 6, 40);

197 
	`gtk_˛i°_£t_cﬁumn_ju°ifiˇti⁄
(
	`GTK_CLIST
(
node_li°
), 6, 
GTK_JUSTIFY_CENTER
);

199 
	`gtk_˛i°_cﬁumn_tôÀs_show
(
	`GTK_CLIST
(
node_li°
));

204 
	`gtk_sig«l_c⁄√˘
(
	`GTK_OBJECT
(
node_li°
), "£À˘_row", 
	`GTK_SIGNAL_FUNC
(
£À˘i⁄_made
), 
NULL
);

209 
	`gtk_sig«l_c⁄√˘
(
	`GTK_OBJECT
(
node_li°
), "˛ick_cﬁumn", 
	`GTK_SIGNAL_FUNC
(
cﬁumn_˛icked_ˇŒback
), 
NULL
);

211 
node_œbñ1
 = 
	`gtk_œbñ_√w
("Dest");

212 
	`gtk_widgë_ªf
(
node_œbñ1
);

213 
	`gtk_obje˘_£t_d©a_fuŒ
(
	`GTK_OBJECT
(
maö_wödow
), "IP", 
node_œbñ1
, (
GtkDe°royNŸify
Ë
gtk_widgë_uƒef
);

214 
	`gtk_widgë_show
(
node_œbñ1
);

215 
	`gtk_˛i°_£t_cﬁumn_widgë
(
	`GTK_CLIST
(
node_li°
), 0, 
node_œbñ1
);

217 
node_œbñ2
 = 
	`gtk_œbñ_√w
("Gateway");

218 
	`gtk_widgë_ªf
(
node_œbñ2
);

219 
	`gtk_obje˘_£t_d©a_fuŒ
(
	`GTK_OBJECT
(
maö_wödow
), "h›s", 
node_œbñ2
, (
GtkDe°royNŸify
Ë
gtk_widgë_uƒef
);

220 
	`gtk_widgë_show
(
node_œbñ2
);

221 
	`gtk_˛i°_£t_cﬁumn_widgë
(
	`GTK_CLIST
(
node_li°
), 1, 
node_œbñ2
);

223 
node_œbñ3
 = 
	`gtk_œbñ_√w
("Metric");

224 
	`gtk_widgë_ªf
(
node_œbñ3
);

225 
	`gtk_obje˘_£t_d©a_fuŒ
(
	`GTK_OBJECT
(
maö_wödow
), "öfo", 
node_œbñ3
, (
GtkDe°royNŸify
Ë
gtk_widgë_uƒef
);

226 
	`gtk_widgë_show
(
node_œbñ3
);

227 
	`gtk_˛i°_£t_cﬁumn_widgë
(
	`GTK_CLIST
(
node_li°
), 2, 
node_œbñ3
);

229 
node_œbñ4
 = 
	`gtk_œbñ_√w
("Device");

230 
	`gtk_widgë_ªf
(
node_œbñ4
);

231 
	`gtk_obje˘_£t_d©a_fuŒ
(
	`GTK_OBJECT
(
maö_wödow
), "Devi˚", 
node_œbñ4
, (
GtkDe°royNŸify
Ë
gtk_widgë_uƒef
);

232 
	`gtk_widgë_show
(
node_œbñ4
);

233 
	`gtk_˛i°_£t_cﬁumn_widgë
(
	`GTK_CLIST
(
node_li°
), 3, 
node_œbñ4
);

235 
node_œbñ7
 = 
	`gtk_œbñ_√w
("Timer");

236 
	`gtk_widgë_ªf
(
node_œbñ7
);

237 
	`gtk_obje˘_£t_d©a_fuŒ
(
	`GTK_OBJECT
(
maö_wödow
), "LMF", 
node_œbñ7
, (
GtkDe°royNŸify
Ë
gtk_widgë_uƒef
);

238 
	`gtk_widgë_show
(
node_œbñ7
);

239 
	`gtk_˛i°_£t_cﬁumn_widgë
(
	`GTK_CLIST
(
node_li°
), 4, 
node_œbñ7
);

250 
node_œbñ8
 = 
	`gtk_œbñ_√w
("MID");

251 
	`gtk_widgë_ªf
(
node_œbñ8
);

252 
	`gtk_obje˘_£t_d©a_fuŒ
(
	`GTK_OBJECT
(
maö_wödow
), "MID", 
node_œbñ8
, (
GtkDe°royNŸify
Ë
gtk_widgë_uƒef
);

253 
	`gtk_widgë_show
(
node_œbñ8
);

254 
	`gtk_˛i°_£t_cﬁumn_widgë
(
	`GTK_CLIST
(
node_li°
), 5, 
node_œbñ8
);

256 
node_œbñ9
 = 
	`gtk_œbñ_√w
("HNA");

257 
	`gtk_widgë_ªf
(
node_œbñ9
);

258 
	`gtk_obje˘_£t_d©a_fuŒ
(
	`GTK_OBJECT
(
maö_wödow
), "HNA", 
node_œbñ9
, (
GtkDe°royNŸify
Ë
gtk_widgë_uƒef
);

259 
	`gtk_widgë_show
(
node_œbñ9
);

260 
	`gtk_˛i°_£t_cﬁumn_widgë
(
	`GTK_CLIST
(
node_li°
), 6, 
node_œbñ9
);

262 
	`gtk_˛i°_cﬁumn_tôÀs_a˘ive
(
	`GTK_CLIST
(
node_li°
));

264 
	`gtk_widgë_show_now
(
node_li°
);

269 
	`gtk_sig«l_c⁄√˘
(
	`GTK_OBJECT
(
node_li°
), "£À˘_row", 
	`GTK_SIGNAL_FUNC
(
node_£À˘i⁄
), 
NULL
);

274 
hbox1
 = 
	`gtk_hbox_√w
(
FALSE
, 0);

275 
	`gtk_widgë_ªf
(
hbox1
);

276 
	`gtk_obje˘_£t_d©a_fuŒ
(
	`GTK_OBJECT
(
maö_wödow
), "hbox1", 
hbox1
, (
GtkDe°royNŸify
Ë
gtk_widgë_uƒef
);

277 
	`gtk_widgë_show
(
hbox1
);

278 
	`gtk_box_∑ck_°¨t
(
	`GTK_BOX
(
vbox1
), 
hbox1
, 
FALSE
, FALSE, 0);

280 
	`gtk_c⁄èöî_£t_b‹dî_width
(
	`GTK_CONTAINER
(
hbox1
), 4);

281 
	`gtk_widgë_£t_size_ªque°
(
hbox1
, -1, 200);

286 
‰ame4
 = 
	`gtk_‰ame_√w
("Info:");

287 
	`gtk_widgë_ªf
(
‰ame4
);

288 
	`gtk_obje˘_£t_d©a_fuŒ
(
	`GTK_OBJECT
(
maö_wödow
), "‰ame4", 
‰ame4
, (
GtkDe°royNŸify
Ë
gtk_widgë_uƒef
);

289 
	`gtk_widgë_show
(
‰ame4
);

290 
	`gtk_box_∑ck_°¨t
(
	`GTK_BOX
(
hbox1
), 
‰ame4
, 
TRUE
, TRUE, 0);

292 
	`gtk_c⁄èöî_£t_b‹dî_width
(
	`GTK_CONTAINER
(
‰ame4
), 1);

297 
√t_vbox
 = 
	`gtk_vbox_√w
(
FALSE
, 0);

298 
	`gtk_widgë_ªf
(
√t_vbox
);

299 
	`gtk_obje˘_£t_d©a_fuŒ
(
	`GTK_OBJECT
(
maö_wödow
), "√t_vbox", 
√t_vbox
, (
GtkDe°royNŸify
Ë
gtk_widgë_uƒef
);

300 
	`gtk_widgë_show
(
√t_vbox
);

301 
	`gtk_c⁄èöî_add
(
	`GTK_CONTAINER
(
‰ame4
), 
√t_vbox
);

306 
√t_œbñ
 = 
	`gtk_œbñ_√w
(
NULL
);

307 
	`gtk_widgë_ªf
(
√t_œbñ
);

308 
	`gtk_misc_£t_Æignmít
((
GtkMisc
 *Ë
√t_œbñ
, 0, 0);

310 
	`gtk_obje˘_£t_d©a_fuŒ
(
	`GTK_OBJECT
(
maö_wödow
), "√t_œbñ", 
√t_œbñ
, (
GtkDe°royNŸify
Ë
gtk_widgë_uƒef
);

313 
	`gtk_widgë_show
(
√t_œbñ
);

314 
	`gtk_box_∑ck_°¨t
(
	`GTK_BOX
(
√t_vbox
), 
√t_œbñ
, 
TRUE
, TRUE, 0);

322 
c⁄√˘_buâ⁄
 = 
	`gtk_buâ⁄_√w_wôh_œbñ
("ConnectÅo host");

323 
	`gtk_widgë_ªf
(
c⁄√˘_buâ⁄
);

324 
	`gtk_obje˘_£t_d©a_fuŒ
(
	`GTK_OBJECT
(
maö_wödow
), "c⁄√˘_buâ⁄", 
c⁄√˘_buâ⁄
, (
GtkDe°royNŸify
Ë
gtk_widgë_uƒef
);

326 
	`gtk_sig«l_c⁄√˘
(
	`GTK_OBJECT
(
c⁄√˘_buâ⁄
), "˛icked", 
	`GTK_SIGNAL_FUNC
(
c⁄√˘_ˇŒback
), 
NULL
);

327 
	`gtk_widgë_show
(
c⁄√˘_buâ⁄
);

328 
	`gtk_box_∑ck_°¨t
(
	`GTK_BOX
(
√t_vbox
), 
c⁄√˘_buâ⁄
, 
FALSE
, FALSE, 1);

329 
	`gtk_c⁄èöî_£t_b‹dî_width
(
	`GTK_CONTAINER
(
c⁄√˘_buâ⁄
), 5);

334 
m¥_‰ame
 = 
	`gtk_‰ame_√w
("MPR:");

335 
	`gtk_widgë_ªf
(
m¥_‰ame
);

336 
	`gtk_obje˘_£t_d©a_fuŒ
(
	`GTK_OBJECT
(
maö_wödow
), "m¥_‰ame", 
m¥_‰ame
, (
GtkDe°royNŸify
Ë
gtk_widgë_uƒef
);

337 
	`gtk_widgë_show
(
m¥_‰ame
);

338 
	`gtk_box_∑ck_°¨t
(
	`GTK_BOX
(
hbox1
), 
m¥_‰ame
, 
FALSE
, FALSE, 0);

340 
	`gtk_c⁄èöî_£t_b‹dî_width
(
	`GTK_CONTAINER
(
m¥_‰ame
), 1);

345 
m¥_s¸ﬁÀdwödow
 = 
	`gtk_s¸ﬁÀd_wödow_√w
(
NULL
, NULL);

346 
	`gtk_widgë_ªf
(
m¥_s¸ﬁÀdwödow
);

347 
	`gtk_obje˘_£t_d©a_fuŒ
(
	`GTK_OBJECT
(
maö_wödow
), "m¥_s¸ﬁÀdwödow", 
m¥_s¸ﬁÀdwödow
, (
GtkDe°royNŸify
Ë
gtk_widgë_uƒef
);

349 
	`gtk_widgë_show
(
m¥_s¸ﬁÀdwödow
);

350 
	`gtk_c⁄èöî_add
(
	`GTK_CONTAINER
(
m¥_‰ame
), 
m¥_s¸ﬁÀdwödow
);

351 
	`gtk_s¸ﬁÀd_wödow_£t_pﬁicy
(
	`GTK_SCROLLED_WINDOW
(
m¥_s¸ﬁÀdwödow
), 
GTK_POLICY_NEVER
, 
GTK_POLICY_AUTOMATIC
);

352 
	`gtk_c⁄èöî_£t_b‹dî_width
(
	`GTK_CONTAINER
(
m¥_s¸ﬁÀdwödow
), 3);

357 
mid_‰ame
 = 
	`gtk_‰ame_√w
("MID:");

358 
	`gtk_widgë_ªf
(
mid_‰ame
);

359 
	`gtk_obje˘_£t_d©a_fuŒ
(
	`GTK_OBJECT
(
maö_wödow
), "mid_‰ame", 
mid_‰ame
, (
GtkDe°royNŸify
Ë
gtk_widgë_uƒef
);

360 
	`gtk_widgë_show
(
mid_‰ame
);

361 
	`gtk_box_∑ck_°¨t
(
	`GTK_BOX
(
hbox1
), 
mid_‰ame
, 
FALSE
, FALSE, 0);

363 
	`gtk_c⁄èöî_£t_b‹dî_width
(
	`GTK_CONTAINER
(
mid_‰ame
), 1);

368 
mid_s¸ﬁÀdwödow
 = 
	`gtk_s¸ﬁÀd_wödow_√w
(
NULL
, NULL);

369 
	`gtk_widgë_ªf
(
mid_s¸ﬁÀdwödow
);

370 
	`gtk_obje˘_£t_d©a_fuŒ
(
	`GTK_OBJECT
(
maö_wödow
), "mid_s¸ﬁÀdwödow", 
mid_s¸ﬁÀdwödow
, (
GtkDe°royNŸify
Ë
gtk_widgë_uƒef
);

372 
	`gtk_widgë_show
(
mid_s¸ﬁÀdwödow
);

373 
	`gtk_c⁄èöî_add
(
	`GTK_CONTAINER
(
mid_‰ame
), 
mid_s¸ﬁÀdwödow
);

374 
	`gtk_s¸ﬁÀd_wödow_£t_pﬁicy
(
	`GTK_SCROLLED_WINDOW
(
mid_s¸ﬁÀdwödow
), 
GTK_POLICY_NEVER
, 
GTK_POLICY_AUTOMATIC
);

375 
	`gtk_c⁄èöî_£t_b‹dî_width
(
	`GTK_CONTAINER
(
mid_s¸ﬁÀdwödow
), 3);

380 
m¥_li°
 = 
	`gtk_˛i°_√w
(1);

381 
	`gtk_widgë_ªf
(
m¥_li°
);

382 
	`gtk_obje˘_£t_d©a_fuŒ
(
	`GTK_OBJECT
(
maö_wödow
), "m¥_li°", 
m¥_li°
, (
GtkDe°royNŸify
Ë
gtk_widgë_uƒef
);

383 
	`gtk_widgë_show
(
m¥_li°
);

384 
	`gtk_c⁄èöî_add
(
	`GTK_CONTAINER
(
m¥_s¸ﬁÀdwödow
), 
m¥_li°
);

385 
	`gtk_˛i°_£t_cﬁumn_width
(
	`GTK_CLIST
(
m¥_li°
), 0, 120);

386 
	`gtk_˛i°_cﬁumn_tôÀs_hide
(
	`GTK_CLIST
(
m¥_li°
));

391 
mid_li°
 = 
	`gtk_˛i°_√w
(1);

392 
	`gtk_widgë_ªf
(
mid_li°
);

393 
	`gtk_obje˘_£t_d©a_fuŒ
(
	`GTK_OBJECT
(
maö_wödow
), "mid_li°", 
mid_li°
, (
GtkDe°royNŸify
Ë
gtk_widgë_uƒef
);

394 
	`gtk_widgë_show
(
mid_li°
);

395 
	`gtk_c⁄èöî_add
(
	`GTK_CONTAINER
(
mid_s¸ﬁÀdwödow
), 
mid_li°
);

396 
	`gtk_˛i°_£t_cﬁumn_width
(
	`GTK_CLIST
(
mid_li°
), 0, 120);

397 
	`gtk_˛i°_cﬁumn_tôÀs_hide
(
	`GTK_CLIST
(
mid_li°
));

402 
h«_‰ame
 = 
	`gtk_‰ame_√w
("HNA:");

403 
	`gtk_widgë_ªf
(
h«_‰ame
);

404 
	`gtk_obje˘_£t_d©a_fuŒ
(
	`GTK_OBJECT
(
maö_wödow
), "h«_‰ame", 
h«_‰ame
, (
GtkDe°royNŸify
Ë
gtk_widgë_uƒef
);

405 
	`gtk_widgë_show
(
h«_‰ame
);

406 
	`gtk_box_∑ck_°¨t
(
	`GTK_BOX
(
hbox1
), 
h«_‰ame
, 
FALSE
, FALSE, 0);

408 
	`gtk_c⁄èöî_£t_b‹dî_width
(
	`GTK_CONTAINER
(
h«_‰ame
), 1);

413 
h«_s¸ﬁÀdwödow
 = 
	`gtk_s¸ﬁÀd_wödow_√w
(
NULL
, NULL);

414 
	`gtk_widgë_ªf
(
h«_s¸ﬁÀdwödow
);

415 
	`gtk_obje˘_£t_d©a_fuŒ
(
	`GTK_OBJECT
(
maö_wödow
), "h«_s¸ﬁÀdwödow", 
h«_s¸ﬁÀdwödow
, (
GtkDe°royNŸify
Ë
gtk_widgë_uƒef
);

417 
	`gtk_widgë_show
(
h«_s¸ﬁÀdwödow
);

418 
	`gtk_c⁄èöî_add
(
	`GTK_CONTAINER
(
h«_‰ame
), 
h«_s¸ﬁÀdwödow
);

419 
	`gtk_s¸ﬁÀd_wödow_£t_pﬁicy
(
	`GTK_SCROLLED_WINDOW
(
h«_s¸ﬁÀdwödow
), 
GTK_POLICY_NEVER
, 
GTK_POLICY_AUTOMATIC
);

420 
	`gtk_c⁄èöî_£t_b‹dî_width
(
	`GTK_CONTAINER
(
h«_s¸ﬁÀdwödow
), 3);

425 
h«_li°
 = 
	`gtk_˛i°_√w
(1);

426 
	`gtk_widgë_ªf
(
h«_li°
);

427 
	`gtk_obje˘_£t_d©a_fuŒ
(
	`GTK_OBJECT
(
maö_wödow
), "h«_li°", 
h«_li°
, (
GtkDe°royNŸify
Ë
gtk_widgë_uƒef
);

428 
	`gtk_widgë_show
(
h«_li°
);

429 
	`gtk_c⁄èöî_add
(
	`GTK_CONTAINER
(
h«_s¸ﬁÀdwödow
), 
h«_li°
);

430 
	`gtk_˛i°_£t_cﬁumn_width
(
	`GTK_CLIST
(
h«_li°
), 0, 120);

431 
	`gtk_˛i°_cﬁumn_tôÀs_hide
(
	`GTK_CLIST
(
h«_li°
));

436 
Maö
 = 
	`gtk_œbñ_√w
("Main");

437 
	`gtk_widgë_ªf
(
Maö
);

438 
	`gtk_obje˘_£t_d©a_fuŒ
(
	`GTK_OBJECT
(
maö_wödow
), "Maö", 
Maö
, (
GtkDe°royNŸify
Ë
gtk_widgë_uƒef
);

439 
	`gtk_widgë_show
(
Maö
);

440 
	`gtk_nŸebook_£t_èb_œbñ
(
	`GTK_NOTEBOOK
(
nŸebook1
), 
	`gtk_nŸebook_gë_¡h_∑ge
(GTK_NOTEBOOK“Ÿebook1), 0), 
Maö
);

446 
hbox2
 = 
	`gtk_hbox_√w
(
FALSE
, 0);

447 
	`gtk_widgë_ªf
(
hbox2
);

448 
	`gtk_obje˘_£t_d©a_fuŒ
(
	`GTK_OBJECT
(
maö_wödow
), "hbox2", 
hbox2
, (
GtkDe°royNŸify
Ë
gtk_widgë_uƒef
);

449 
	`gtk_widgë_show
(
hbox2
);

450 
	`gtk_c⁄èöî_add
(
	`GTK_CONTAINER
(
nŸebook1
), 
hbox2
);

455 
∑ck_vbox
 = 
	`gtk_vbox_√w
(
FALSE
, 0);

456 
	`gtk_widgë_ªf
(
∑ck_vbox
);

457 
	`gtk_obje˘_£t_d©a_fuŒ
(
	`GTK_OBJECT
(
maö_wödow
), "∑ck_vbox", 
∑ck_vbox
, (
GtkDe°royNŸify
Ë
gtk_widgë_uƒef
);

458 
	`gtk_widgë_show
(
∑ck_vbox
);

459 
	`gtk_box_∑ck_°¨t
(
	`GTK_BOX
(
hbox2
), 
∑ck_vbox
, 
TRUE
, TRUE, 0);

465 
‰ame2
 = 
	`gtk_‰ame_√w
("Packet");

466 
	`gtk_widgë_ªf
(
‰ame2
);

467 
	`gtk_obje˘_£t_d©a_fuŒ
(
	`GTK_OBJECT
(
maö_wödow
), "‰ame2", 
‰ame2
, (
GtkDe°royNŸify
Ë
gtk_widgë_uƒef
);

468 
	`gtk_widgë_show
(
‰ame2
);

469 
	`gtk_box_∑ck_°¨t
(
	`GTK_BOX
(
∑ck_vbox
), 
‰ame2
, 
TRUE
, TRUE, 0);

474 
s¸ﬁÀdwödow4
 = 
	`gtk_s¸ﬁÀd_wödow_√w
(
NULL
, NULL);

475 
	`gtk_widgë_ªf
(
s¸ﬁÀdwödow4
);

476 
	`gtk_obje˘_£t_d©a_fuŒ
(
	`GTK_OBJECT
(
maö_wödow
), "s¸ﬁÀdwödow4", 
s¸ﬁÀdwödow4
, (
GtkDe°royNŸify
Ë
gtk_widgë_uƒef
);

478 
	`gtk_widgë_show
(
s¸ﬁÀdwödow4
);

479 
	`gtk_s¸ﬁÀd_wödow_£t_pﬁicy
(
	`GTK_SCROLLED_WINDOW
(
s¸ﬁÀdwödow4
), 
GTK_POLICY_NEVER
, 
GTK_POLICY_AUTOMATIC
);

481 
	`gtk_c⁄èöî_add
(
	`GTK_CONTAINER
(
‰ame2
), 
s¸ﬁÀdwödow4
);

487 
∑ckë_li°
 = 
	`gtk_˛i°_√w
(3);

488 
	`gtk_widgë_ªf
(
∑ckë_li°
);

489 
	`gtk_obje˘_£t_d©a_fuŒ
(
	`GTK_OBJECT
(
maö_wödow
), "∑ckë_li°", 
∑ckë_li°
, (
GtkDe°royNŸify
Ë
gtk_widgë_uƒef
);

490 
	`gtk_widgë_show
(
∑ckë_li°
);

491 
	`gtk_c⁄èöî_add
(
	`GTK_CONTAINER
(
s¸ﬁÀdwödow4
), 
∑ckë_li°
);

492 
	`gtk_˛i°_£t_cﬁumn_width
(
	`GTK_CLIST
(
∑ckë_li°
), 0, 80);

493 
	`gtk_˛i°_£t_cﬁumn_width
(
	`GTK_CLIST
(
∑ckë_li°
), 1, 150);

494 
	`gtk_˛i°_£t_cﬁumn_width
(
	`GTK_CLIST
(
∑ckë_li°
), 2, 20);

495 
	`gtk_˛i°_cﬁumn_tôÀs_show
(
	`GTK_CLIST
(
∑ckë_li°
));

497 
œbñ17
 = 
	`gtk_œbñ_√w
("Type");

498 
	`gtk_widgë_ªf
(
œbñ17
);

499 
	`gtk_obje˘_£t_d©a_fuŒ
(
	`GTK_OBJECT
(
maö_wödow
), "œbñ17", 
œbñ17
, (
GtkDe°royNŸify
Ë
gtk_widgë_uƒef
);

500 
	`gtk_widgë_show
(
œbñ17
);

501 
	`gtk_˛i°_£t_cﬁumn_widgë
(
	`GTK_CLIST
(
∑ckë_li°
), 0, 
œbñ17
);

503 
œbñ18
 = 
	`gtk_œbñ_√w
("Origin");

504 
	`gtk_widgë_ªf
(
œbñ18
);

505 
	`gtk_obje˘_£t_d©a_fuŒ
(
	`GTK_OBJECT
(
maö_wödow
), "œbñ18", 
œbñ18
, (
GtkDe°royNŸify
Ë
gtk_widgë_uƒef
);

506 
	`gtk_widgë_show
(
œbñ18
);

507 
	`gtk_˛i°_£t_cﬁumn_widgë
(
	`GTK_CLIST
(
∑ckë_li°
), 1, 
œbñ18
);

509 
œbñ19
 = 
	`gtk_œbñ_√w
("Size");

510 
	`gtk_widgë_ªf
(
œbñ19
);

511 
	`gtk_obje˘_£t_d©a_fuŒ
(
	`GTK_OBJECT
(
maö_wödow
), "œbñ19", 
œbñ19
, (
GtkDe°royNŸify
Ë
gtk_widgë_uƒef
);

512 
	`gtk_widgë_show
(
œbñ19
);

513 
	`gtk_˛i°_£t_cﬁumn_widgë
(
	`GTK_CLIST
(
∑ckë_li°
), 2, 
œbñ19
);

518 
	`gtk_sig«l_c⁄√˘
(
	`GTK_OBJECT
(
∑ckë_li°
), "£À˘_row", 
	`GTK_SIGNAL_FUNC
(
∑ckë_£À˘i⁄
), 
NULL
);

524 
∑ckë_buâ⁄
 = 
	`gtk_buâ⁄_√w_wôh_œbñ
("GrabÖackets");

525 
	`gtk_widgë_ªf
(
∑ckë_buâ⁄
);

526 
	`gtk_obje˘_£t_d©a_fuŒ
(
	`GTK_OBJECT
(
maö_wödow
), "∑ckë_buâ⁄", 
∑ckë_buâ⁄
, (
GtkDe°royNŸify
Ë
gtk_widgë_uƒef
);

529 
	`gtk_sig«l_c⁄√˘
(
	`GTK_OBJECT
(
∑ckë_buâ⁄
), "˛icked", 
	`GTK_SIGNAL_FUNC
(
∑ckë_ˇŒback
), 
NULL
);

530 
	`gtk_widgë_show
(
∑ckë_buâ⁄
);

531 
	`gtk_box_∑ck_°¨t
(
	`GTK_BOX
(
∑ck_vbox
), 
∑ckë_buâ⁄
, 
FALSE
, FALSE, 5);

536 
∑ck_di•_vbox
 = 
	`gtk_vbox_√w
(
FALSE
, 0);

537 
	`gtk_widgë_ªf
(
∑ck_di•_vbox
);

538 
	`gtk_obje˘_£t_d©a_fuŒ
(
	`GTK_OBJECT
(
maö_wödow
), "∑ck_di•_vbox", 
∑ck_di•_vbox
, (
GtkDe°royNŸify
Ë
gtk_widgë_uƒef
);

539 
	`gtk_widgë_show
(
∑ck_di•_vbox
);

540 
	`gtk_box_∑ck_°¨t
(
	`GTK_BOX
(
hbox2
), 
∑ck_di•_vbox
, 
TRUE
, TRUE, 0);

546 
di•_‰ame
 = 
	`gtk_‰ame_√w
("Packet content");

547 
	`gtk_widgë_ªf
(
di•_‰ame
);

548 
	`gtk_obje˘_£t_d©a_fuŒ
(
	`GTK_OBJECT
(
maö_wödow
), "di•_‰ame", 
di•_‰ame
, (
GtkDe°royNŸify
Ë
gtk_widgë_uƒef
);

549 
	`gtk_widgë_show
(
di•_‰ame
);

550 
	`gtk_box_∑ck_°¨t
(
	`GTK_BOX
(
∑ck_di•_vbox
), 
di•_‰ame
, 
TRUE
, TRUE, 0);

557 
s¸ﬁÀdwödow3
 = 
	`gtk_s¸ﬁÀd_wödow_√w
(
NULL
, NULL);

558 
	`gtk_widgë_ªf
(
s¸ﬁÀdwödow3
);

559 
	`gtk_obje˘_£t_d©a_fuŒ
(
	`GTK_OBJECT
(
maö_wödow
), "s¸ﬁÀdwödow3", 
s¸ﬁÀdwödow3
, (
GtkDe°royNŸify
Ë
gtk_widgë_uƒef
);

560 
	`gtk_widgë_show
(
s¸ﬁÀdwödow3
);

561 
	`gtk_s¸ﬁÀd_wödow_£t_pﬁicy
(
	`GTK_SCROLLED_WINDOW
(
s¸ﬁÀdwödow3
), 
GTK_POLICY_NEVER
, 
GTK_POLICY_AUTOMATIC
);

563 
	`gtk_c⁄èöî_add
(
	`GTK_CONTAINER
(
di•_‰ame
), 
s¸ﬁÀdwödow3
);

570 
∑ckë_c⁄ã¡_li°
 = 
	`gtk_˛i°_√w
(4);

571 
	`gtk_widgë_ªf
(
∑ckë_c⁄ã¡_li°
);

572 
	`gtk_obje˘_£t_d©a_fuŒ
(
	`GTK_OBJECT
(
maö_wödow
), "∑ckë_c⁄ã¡_li°", 
∑ckë_c⁄ã¡_li°
,

573 (
GtkDe°royNŸify
Ë
gtk_widgë_uƒef
);

575 
	`gtk_widgë_show
(
∑ckë_c⁄ã¡_li°
);

576 
	`gtk_c⁄èöî_add
(
	`GTK_CONTAINER
(
s¸ﬁÀdwödow3
), 
∑ckë_c⁄ã¡_li°
);

577 
	`gtk_˛i°_£t_cﬁumn_width
(
	`GTK_CLIST
(
∑ckë_c⁄ã¡_li°
), 0, 70);

578 
	`gtk_˛i°_£t_cﬁumn_ju°ifiˇti⁄
(
	`GTK_CLIST
(
∑ckë_c⁄ã¡_li°
), 0, 
GTK_JUSTIFY_CENTER
);

579 
	`gtk_˛i°_£t_cﬁumn_width
(
	`GTK_CLIST
(
∑ckë_c⁄ã¡_li°
), 1, 70);

580 
	`gtk_˛i°_£t_cﬁumn_ju°ifiˇti⁄
(
	`GTK_CLIST
(
∑ckë_c⁄ã¡_li°
), 1, 
GTK_JUSTIFY_CENTER
);

581 
	`gtk_˛i°_£t_cﬁumn_width
(
	`GTK_CLIST
(
∑ckë_c⁄ã¡_li°
), 2, 70);

582 
	`gtk_˛i°_£t_cﬁumn_ju°ifiˇti⁄
(
	`GTK_CLIST
(
∑ckë_c⁄ã¡_li°
), 2, 
GTK_JUSTIFY_CENTER
);

583 
	`gtk_˛i°_£t_cﬁumn_width
(
	`GTK_CLIST
(
∑ckë_c⁄ã¡_li°
), 3, 70);

584 
	`gtk_˛i°_£t_cﬁumn_ju°ifiˇti⁄
(
	`GTK_CLIST
(
∑ckë_c⁄ã¡_li°
), 3, 
GTK_JUSTIFY_CENTER
);

585 
	`gtk_˛i°_cﬁumn_tôÀs_show
(
	`GTK_CLIST
(
∑ckë_c⁄ã¡_li°
));

587 
œbñ13
 = 
	`gtk_œbñ_√w
("0 - 7");

588 
	`gtk_widgë_ªf
(
œbñ13
);

589 
	`gtk_obje˘_£t_d©a_fuŒ
(
	`GTK_OBJECT
(
maö_wödow
), "œbñ13", 
œbñ13
, (
GtkDe°royNŸify
Ë
gtk_widgë_uƒef
);

590 
	`gtk_widgë_show
(
œbñ13
);

591 
	`gtk_˛i°_£t_cﬁumn_widgë
(
	`GTK_CLIST
(
∑ckë_c⁄ã¡_li°
), 0, 
œbñ13
);

593 
œbñ14
 = 
	`gtk_œbñ_√w
("8 - 15");

594 
	`gtk_widgë_ªf
(
œbñ14
);

595 
	`gtk_obje˘_£t_d©a_fuŒ
(
	`GTK_OBJECT
(
maö_wödow
), "œbñ14", 
œbñ14
, (
GtkDe°royNŸify
Ë
gtk_widgë_uƒef
);

596 
	`gtk_widgë_show
(
œbñ14
);

597 
	`gtk_˛i°_£t_cﬁumn_widgë
(
	`GTK_CLIST
(
∑ckë_c⁄ã¡_li°
), 1, 
œbñ14
);

599 
œbñ15
 = 
	`gtk_œbñ_√w
("16 - 23");

600 
	`gtk_widgë_ªf
(
œbñ15
);

601 
	`gtk_obje˘_£t_d©a_fuŒ
(
	`GTK_OBJECT
(
maö_wödow
), "œbñ15", 
œbñ15
, (
GtkDe°royNŸify
Ë
gtk_widgë_uƒef
);

602 
	`gtk_widgë_show
(
œbñ15
);

603 
	`gtk_˛i°_£t_cﬁumn_widgë
(
	`GTK_CLIST
(
∑ckë_c⁄ã¡_li°
), 2, 
œbñ15
);

605 
œbñ16
 = 
	`gtk_œbñ_√w
("24 - 31");

606 
	`gtk_widgë_ªf
(
œbñ16
);

607 
	`gtk_obje˘_£t_d©a_fuŒ
(
	`GTK_OBJECT
(
maö_wödow
), "œbñ16", 
œbñ16
, (
GtkDe°royNŸify
Ë
gtk_widgë_uƒef
);

608 
	`gtk_widgë_show
(
œbñ16
);

609 
	`gtk_˛i°_£t_cﬁumn_widgë
(
	`GTK_CLIST
(
∑ckë_c⁄ã¡_li°
), 3, 
œbñ16
);

617 
∑ckë_di•_buâ⁄
 = 
	`gtk_buâ⁄_√w_wôh_œbñ
("Display hex");

618 
	`gtk_widgë_ªf
(
∑ckë_di•_buâ⁄
);

619 
	`gtk_obje˘_£t_d©a_fuŒ
(
	`GTK_OBJECT
(
maö_wödow
), "∑ckë_di•_buâ⁄", 
∑ckë_di•_buâ⁄
, (
GtkDe°royNŸify
Ë
gtk_widgë_uƒef
);

622 
	`gtk_sig«l_c⁄√˘
(
	`GTK_OBJECT
(
∑ckë_di•_buâ⁄
), "˛icked", 
	`GTK_SIGNAL_FUNC
(
∑ckë_di•_ˇŒback
), 
NULL
);

623 
	`gtk_widgë_show
(
∑ckë_di•_buâ⁄
);

624 
	`gtk_box_∑ck_°¨t
(
	`GTK_BOX
(
∑ck_di•_vbox
), 
∑ckë_di•_buâ⁄
, 
FALSE
, FALSE, 5);

630 
œbñ_∑ckës
 = 
	`gtk_œbñ_√w
("Packets");

631 
	`gtk_widgë_ªf
(
œbñ_∑ckës
);

632 
	`gtk_obje˘_£t_d©a_fuŒ
(
	`GTK_OBJECT
(
maö_wödow
), "œbñ_∑ckës", 
œbñ_∑ckës
, (
GtkDe°royNŸify
Ë
gtk_widgë_uƒef
);

633 
	`gtk_widgë_show
(
œbñ_∑ckës
);

634 
	`gtk_nŸebook_£t_èb_œbñ
(
	`GTK_NOTEBOOK
(
nŸebook1
), 
	`gtk_nŸebook_gë_¡h_∑ge
(GTK_NOTEBOOK“Ÿebook1), 1), 
œbñ_∑ckës
);

639 
rouã_hbox1
 = 
	`gtk_hbox_√w
(
FALSE
, 0);

640 
	`gtk_widgë_ªf
(
rouã_hbox1
);

641 
	`gtk_obje˘_£t_d©a_fuŒ
(
	`GTK_OBJECT
(
maö_wödow
), "rouã_hbox1", 
rouã_hbox1
, (
GtkDe°royNŸify
Ë
gtk_widgë_uƒef
);

642 
	`gtk_widgë_show
(
rouã_hbox1
);

644 
	`gtk_c⁄èöî_add
(
	`GTK_CONTAINER
(
nŸebook1
), 
rouã_hbox1
);

650 
rouã_‰ame
 = 
	`gtk_‰ame_√w
("OLSRÑoutes in kernel:");

651 
	`gtk_widgë_ªf
(
rouã_‰ame
);

652 
	`gtk_obje˘_£t_d©a_fuŒ
(
	`GTK_OBJECT
(
maö_wödow
), "rouã_‰ame", 
rouã_‰ame
, (
GtkDe°royNŸify
Ë
gtk_widgë_uƒef
);

653 
	`gtk_widgë_show
(
rouã_‰ame
);

656 
	`gtk_widgë_£t_size_ªque°
(
rouã_‰ame
, 200, -1);

657 
	`gtk_box_∑ck_°¨t
(
	`GTK_BOX
(
rouã_hbox1
), 
rouã_‰ame
, 
TRUE
, TRUE, 0);

664 
rouã_s¸ﬁÀdwödow
 = 
	`gtk_s¸ﬁÀd_wödow_√w
(
NULL
, NULL);

665 
	`gtk_widgë_ªf
(
rouã_s¸ﬁÀdwödow
);

666 
	`gtk_obje˘_£t_d©a_fuŒ
(
	`GTK_OBJECT
(
maö_wödow
), "rouã_s¸ﬁÀdwödow", 
rouã_s¸ﬁÀdwödow
,

667 (
GtkDe°royNŸify
Ë
gtk_widgë_uƒef
);

668 
	`gtk_widgë_show
(
rouã_s¸ﬁÀdwödow
);

669 
	`gtk_s¸ﬁÀd_wödow_£t_pﬁicy
(
	`GTK_SCROLLED_WINDOW
(
rouã_s¸ﬁÀdwödow
), 
GTK_POLICY_NEVER
, 
GTK_POLICY_AUTOMATIC
);

671 
	`gtk_c⁄èöî_add
(
	`GTK_CONTAINER
(
rouã_‰ame
), 
rouã_s¸ﬁÀdwödow
);

678 
rouã_li°
 = 
	`gtk_˛i°_√w
(4);

679 
	`gtk_widgë_ªf
(
rouã_li°
);

680 
	`gtk_obje˘_£t_d©a_fuŒ
(
	`GTK_OBJECT
(
maö_wödow
), "rouã_li°", 
rouã_li°
, (
GtkDe°royNŸify
Ë
gtk_widgë_uƒef
);

682 
	`gtk_widgë_show
(
rouã_li°
);

683 
	`gtk_c⁄èöî_add
(
	`GTK_CONTAINER
(
rouã_s¸ﬁÀdwödow
), 
rouã_li°
);

684 
	`gtk_˛i°_£t_cﬁumn_width
(
	`GTK_CLIST
(
rouã_li°
), 0, 120);

686 
	`gtk_˛i°_£t_cﬁumn_width
(
	`GTK_CLIST
(
rouã_li°
), 1, 120);

688 
	`gtk_˛i°_£t_cﬁumn_width
(
	`GTK_CLIST
(
rouã_li°
), 2, 50);

689 
	`gtk_˛i°_£t_cﬁumn_ju°ifiˇti⁄
(
	`GTK_CLIST
(
rouã_li°
), 2, 
GTK_JUSTIFY_CENTER
);

690 
	`gtk_˛i°_£t_cﬁumn_width
(
	`GTK_CLIST
(
rouã_li°
), 3, 70);

691 
	`gtk_˛i°_£t_cﬁumn_ju°ifiˇti⁄
(
	`GTK_CLIST
(
rouã_li°
), 3, 
GTK_JUSTIFY_CENTER
);

692 
	`gtk_˛i°_cﬁumn_tôÀs_show
(
	`GTK_CLIST
(
rouã_li°
));

694 
rouã_œbñ1
 = 
	`gtk_œbñ_√w
("Destination");

695 
	`gtk_widgë_ªf
(
rouã_œbñ1
);

696 
	`gtk_obje˘_£t_d©a_fuŒ
(
	`GTK_OBJECT
(
maö_wödow
), "rouã_œbñ1", 
rouã_œbñ1
, (
GtkDe°royNŸify
Ë
gtk_widgë_uƒef
);

697 
	`gtk_widgë_show
(
rouã_œbñ1
);

698 
	`gtk_˛i°_£t_cﬁumn_widgë
(
	`GTK_CLIST
(
rouã_li°
), 0, 
rouã_œbñ1
);

700 
rouã_œbñ2
 = 
	`gtk_œbñ_√w
("Gateway");

701 
	`gtk_widgë_ªf
(
rouã_œbñ2
);

702 
	`gtk_obje˘_£t_d©a_fuŒ
(
	`GTK_OBJECT
(
maö_wödow
), "rouã_œbñ2", 
rouã_œbñ2
, (
GtkDe°royNŸify
Ë
gtk_widgë_uƒef
);

703 
	`gtk_widgë_show
(
rouã_œbñ2
);

704 
	`gtk_˛i°_£t_cﬁumn_widgë
(
	`GTK_CLIST
(
rouã_li°
), 1, 
rouã_œbñ2
);

706 
rouã_œbñ3
 = 
	`gtk_œbñ_√w
("Weight");

707 
	`gtk_widgë_ªf
(
rouã_œbñ3
);

708 
	`gtk_obje˘_£t_d©a_fuŒ
(
	`GTK_OBJECT
(
maö_wödow
), "rouã_œbñ3", 
rouã_œbñ3
, (
GtkDe°royNŸify
Ë
gtk_widgë_uƒef
);

709 
	`gtk_widgë_show
(
rouã_œbñ3
);

710 
	`gtk_˛i°_£t_cﬁumn_widgë
(
	`GTK_CLIST
(
rouã_li°
), 2, 
rouã_œbñ3
);

712 
rouã_œbñ4
 = 
	`gtk_œbñ_√w
("Interface");

713 
	`gtk_widgë_ªf
(
rouã_œbñ4
);

714 
	`gtk_obje˘_£t_d©a_fuŒ
(
	`GTK_OBJECT
(
maö_wödow
), "rouã_œbñ4", 
rouã_œbñ4
, (
GtkDe°royNŸify
Ë
gtk_widgë_uƒef
);

715 
	`gtk_widgë_show
(
rouã_œbñ4
);

716 
	`gtk_˛i°_£t_cﬁumn_widgë
(
	`GTK_CLIST
(
rouã_li°
), 3, 
rouã_œbñ4
);

724 
rouã_°©s_‰ame
 = 
	`gtk_‰ame_√w
("Stats:");

725 
	`gtk_widgë_ªf
(
rouã_°©s_‰ame
);

726 
	`gtk_obje˘_£t_d©a_fuŒ
(
	`GTK_OBJECT
(
maö_wödow
), "rouã_°©s_‰ame", 
rouã_°©s_‰ame
, (
GtkDe°royNŸify
Ë
gtk_widgë_uƒef
);

727 
	`gtk_widgë_show
(
rouã_°©s_‰ame
);

730 
	`gtk_box_∑ck_°¨t
(
	`GTK_BOX
(
rouã_hbox1
), 
rouã_°©s_‰ame
, 
TRUE
, TRUE, 1);

735 
œbñ_rouãs
 = 
	`gtk_œbñ_√w
("Routes");

736 
	`gtk_widgë_ªf
(
œbñ_rouãs
);

737 
	`gtk_obje˘_£t_d©a_fuŒ
(
	`GTK_OBJECT
(
maö_wödow
), "œbñ_rouãs", 
œbñ_rouãs
, (
GtkDe°royNŸify
Ë
gtk_widgë_uƒef
);

738 
	`gtk_widgë_show
(
œbñ_rouãs
);

739 
	`gtk_nŸebook_£t_èb_œbñ
(
	`GTK_NOTEBOOK
(
nŸebook1
), 
	`gtk_nŸebook_gë_¡h_∑ge
(GTK_NOTEBOOK“Ÿebook1), 2), 
œbñ_rouãs
);

741 
em±y1
 = 
	`gtk_vbox_√w
(
FALSE
, 0);

742 
	`gtk_widgë_show
(
em±y1
);

743 
	`gtk_c⁄èöî_add
(
	`GTK_CONTAINER
(
nŸebook1
), 
em±y1
);

748 
åaffic_œbñ
 = 
	`gtk_œbñ_√w
("Traffic");

749 
	`gtk_widgë_ªf
(
åaffic_œbñ
);

750 
	`gtk_obje˘_£t_d©a_fuŒ
(
	`GTK_OBJECT
(
maö_wödow
), "åaffic_œbñ", 
åaffic_œbñ
, (
GtkDe°royNŸify
Ë
gtk_widgë_uƒef
);

751 
	`gtk_widgë_show
(
åaffic_œbñ
);

752 
	`gtk_nŸebook_£t_èb_œbñ
(
	`GTK_NOTEBOOK
(
nŸebook1
), 
	`gtk_nŸebook_gë_¡h_∑ge
(GTK_NOTEBOOK“Ÿebook1), 3), 
åaffic_œbñ
);

757 
£âögs_hbox1
 = 
	`gtk_hbox_√w
(
FALSE
, 0);

758 
	`gtk_widgë_ªf
(
£âögs_hbox1
);

759 
	`gtk_obje˘_£t_d©a_fuŒ
(
	`GTK_OBJECT
(
maö_wödow
), "£âögs_hbox1", 
£âögs_hbox1
, (
GtkDe°royNŸify
Ë
gtk_widgë_uƒef
);

760 
	`gtk_widgë_show
(
£âögs_hbox1
);

762 
	`gtk_c⁄èöî_add
(
	`GTK_CONTAINER
(
nŸebook1
), 
£âögs_hbox1
);

767 
öfo_œbñ
 = 
	`gtk_œbñ_√w
(
NULL
);

768 
	`gtk_widgë_ªf
(
öfo_œbñ
);

769 
	`gtk_misc_£t_Æignmít
((
GtkMisc
 *Ë
öfo_œbñ
, 0, 0);

771 
	`gtk_obje˘_£t_d©a_fuŒ
(
	`GTK_OBJECT
(
maö_wödow
), "öfo_œbñ", 
öfo_œbñ
, (
GtkDe°royNŸify
Ë
gtk_widgë_uƒef
);

774 
	`gtk_widgë_show
(
öfo_œbñ
);

775 
	`gtk_box_∑ck_°¨t
(
	`GTK_BOX
(
£âögs_hbox1
), 
öfo_œbñ
, 
TRUE
, TRUE, 0);

780 
£âögs_œbñ
 = 
	`gtk_œbñ_√w
("Settings");

781 
	`gtk_widgë_ªf
(
£âögs_œbñ
);

782 
	`gtk_obje˘_£t_d©a_fuŒ
(
	`GTK_OBJECT
(
maö_wödow
), "£âögs_œbñ", 
£âögs_œbñ
, (
GtkDe°royNŸify
Ë
gtk_widgë_uƒef
);

783 
	`gtk_widgë_show
(
£âögs_œbñ
);

784 
	`gtk_nŸebook_£t_èb_œbñ
(
	`GTK_NOTEBOOK
(
nŸebook1
), 
	`gtk_nŸebook_gë_¡h_∑ge
(GTK_NOTEBOOK“Ÿebook1), 4), 
£âögs_œbñ
);

789 
about_hbox1
 = 
	`gtk_hbox_√w
(
FALSE
, 0);

790 
	`gtk_widgë_ªf
(
about_hbox1
);

791 
	`gtk_obje˘_£t_d©a_fuŒ
(
	`GTK_OBJECT
(
maö_wödow
), "about_hbox1", 
about_hbox1
, (
GtkDe°royNŸify
Ë
gtk_widgë_uƒef
);

792 
	`gtk_widgë_show
(
about_hbox1
);

794 
	`gtk_c⁄èöî_add
(
	`GTK_CONTAINER
(
nŸebook1
), 
about_hbox1
);

795 
	`gtk_c⁄èöî_£t_b‹dî_width
(
	`GTK_CONTAINER
(
about_hbox1
), 10);

800 
about_œbñ
 = 
	`gtk_œbñ_√w
(
NULL
);

801 
	`gtk_widgë_ªf
(
about_œbñ
);

802 
	`gtk_misc_£t_Æignmít
((
GtkMisc
 *Ë
about_œbñ
, 0, 0);

803 
	`gtk_œbñ_£t_ju°ify
((
GtkLabñ
 *Ë
about_œbñ
, 
GTK_JUSTIFY_CENTER
);

804 
	`gtk_obje˘_£t_d©a_fuŒ
(
	`GTK_OBJECT
(
maö_wödow
), "about_œbñ", 
about_œbñ
, (
GtkDe°royNŸify
Ë
gtk_widgë_uƒef
);

807 
	`gtk_widgë_show
(
about_œbñ
);

808 
	`gtk_box_∑ck_°¨t
(
	`GTK_BOX
(
about_hbox1
), 
unik_logo
, 
TRUE
, TRUE, 0);

809 
	`gtk_box_∑ck_°¨t
(
	`GTK_BOX
(
about_hbox1
), 
about_œbñ
, 
TRUE
, TRUE, 0);

810 
	`gtk_widgë_show
(
unik_logo
);

812 
	`gtk_œbñ_£t_ãxt
((
GtkLabñ
 *Ë
about_œbñ
, "OLSRD-GUI by Andreas Tonnesen (andreto@ifi.uio.no)");

817 
œbñ3
 = 
	`gtk_œbñ_√w
("About");

818 
	`gtk_widgë_ªf
(
œbñ3
);

819 
	`gtk_obje˘_£t_d©a_fuŒ
(
	`GTK_OBJECT
(
maö_wödow
), "About", 
œbñ3
, (
GtkDe°royNŸify
Ë
gtk_widgë_uƒef
);

820 
	`gtk_widgë_show
(
œbñ3
);

821 
	`gtk_nŸebook_£t_èb_œbñ
(
	`GTK_NOTEBOOK
(
nŸebook1
), 
	`gtk_nŸebook_gë_¡h_∑ge
(GTK_NOTEBOOK“Ÿebook1), 5), 
œbñ3
);

823  
maö_wödow
;

825 
	}
}

831 
	$rouã_li°_add
(*
de°
, *
gw
, *
mëric
, *
dev
)

833 
gch¨
 *
tmp
[4] = { 
de°
, 
gw
, 
dev
, 
mëric
 };

834 
rouã_li°_size
++;

836 
	`gtk_˛i°_‰ìze
(
	`GTK_CLIST
(
rouã_li°
));

838 
	`gtk_˛i°_≠≥nd
(
	`GTK_CLIST
(
rouã_li°
), 
tmp
);

840 
	`gtk_˛i°_thaw
(
	`GTK_CLIST
(
rouã_li°
));

842 
	}
}

848 
	$rouã_li°_upd©e
(*
addr
)

851 
	}
}

857 
	$rouã_li°_dñ
(*
de°
)

859 
i
 = 0;

860 *
ù
;

862 
	`gtk_˛i°_‰ìze
(
	`GTK_CLIST
(
rouã_li°
));

864 
i
 = 0; i < 
rouã_li°_size
; i++) {

865 
	`gtk_˛i°_gë_ãxt
(
	`GTK_CLIST
(
rouã_li°
), 
i
, 0, (
gch¨
 **Ë& 
ù
);

866 i‡(
	`°rcmp
(
de°
, 
ù
) == 0) {

868 
	`gtk_˛i°_ªmove
(
	`GTK_CLIST
(
rouã_li°
), 
i
);

869 
rouã_li°_size
--;

870 
	`gtk_˛i°_thaw
(
	`GTK_CLIST
(
rouã_li°
));

875 
	`gtk_˛i°_thaw
(
	`GTK_CLIST
(
rouã_li°
));

877 
	}
}

883 
	$ªmove_nodes_li°
(
ﬁ§_ù_addr
 *
node
)

885 *
ù
;

886 *
ö_ù
 = 
	`ù_to_°rög
(
node
);

887 
i
;

889 
i
 = 0; i < 
node_li°_size
; i++) {

890 
	`gtk_˛i°_gë_ãxt
(
	`GTK_CLIST
(
node_li°
), 
i
, 0, (
gch¨
 **Ë& 
ù
);

891 i‡(
	`°rcmp
(
ö_ù
, 
ù
) == 0) {

893 
	`gtk_˛i°_ªmove
(
	`GTK_CLIST
(
node_li°
), 
i
);

894 
node_li°_size
--;

900 
	}
}

907 
	$upd©e_nodes_li°
(
node
 *node)

909 
i
 = 0;

910 *
ù
;

911 
found
 = 0;

912 *
de°
;

913 *
tmp
[9] = { "", "", "", "", "", "", "", "", "" };

914 
timî
[20];

915 
tm
 *
time_°
;

916 
ôﬂ_buf
[10];

918 i‡(
	`memcmp
(&
node
->
addr
, &
maö_addr
, 
ùsize
) == 0)

919 
de°
 = "local";

921 
de°
 = 
	`ù_to_°rög
(&
node
->
addr
);

923 
	`gtk_˛i°_‰ìze
(
	`GTK_CLIST
(
node_li°
));

925 (
i
 < 
node_li°_size
Ë&& !
found
) {

926 
	`gtk_˛i°_gë_ãxt
(
	`GTK_CLIST
(
node_li°
), 
i
, 0, (
gch¨
 **Ë& 
ù
);

927 i‡(
	`°rcmp
(
de°
, 
ù
) == 0)

928 
found
 = 1;

929 
i
++;

933 i‡(
found
) {

934 
i
--;

938 i‡(
	`memcmp
(&
node
->
addr
, &
maö_addr
, 
ùsize
) != 0) {

939 i‡(
	`memcmp
(&
node
->
gw_addr
, &
nuŒ_addr
, 
ùsize
) != 0)

940 
	`gtk_˛i°_£t_ãxt
(
	`GTK_CLIST
(
node_li°
), 
i
, 1, 
	`ù_to_°rög
(&
node
->
gw_addr
));

942 i‡(
node
->
h›cou¡
 != 0) {

943 
	`gui_ôﬂ
(
node
->
h›cou¡
, 
ôﬂ_buf
);

944 
	`gtk_˛i°_£t_ãxt
(
	`GTK_CLIST
(
node_li°
), 
i
, 2, 
ôﬂ_buf
);

947 
	`gtk_˛i°_£t_ãxt
(
	`GTK_CLIST
(
node_li°
), 
i
, 3, &
node
->
dev
[0]);

951 i‡(
node
->
timî
.
tv_u£c
) {

952 
	`mem£t
(&
timî
[0], 0, 20);

953 
time_°
 = 
	`loˇ…ime
((
time_t
 *Ë& 
node
->
timî
.
tv_£c
);

954 
	`•rötf
(&
timî
[0], "%02d:%02d:%02d", 
time_°
->
tm_hour
,Åime_°->
tm_mö
,Åime_°->
tm_£c
);

955 
	`gtk_˛i°_£t_ãxt
(
	`GTK_CLIST
(
node_li°
), 
i
, 4, &
timî
[0]);

959 i‡(
node
->
mid
.
√xt
 != &node->mid)

960 
	`gtk_˛i°_£t_ãxt
(
	`GTK_CLIST
(
node_li°
), 
i
, 5, "yes");

962 
	`gtk_˛i°_£t_ãxt
(
	`GTK_CLIST
(
node_li°
), 
i
, 5, "no");

964 i‡(
node
->
h«
.
√xt
 != &node->hna)

965 
	`gtk_˛i°_£t_ãxt
(
	`GTK_CLIST
(
node_li°
), 
i
, 6, "yes");

967 
	`gtk_˛i°_£t_ãxt
(
	`GTK_CLIST
(
node_li°
), 
i
, 6, "no");

972 
i
 = 
node_li°_size
;

974 
	`gtk_˛i°_ö£π
(
	`GTK_CLIST
(
node_li°
), 
i
, 
tmp
);

976 
	`gtk_˛i°_£t_ãxt
(
	`GTK_CLIST
(
node_li°
), 
i
, 0, 
de°
);

977 i‡(
	`memcmp
(&
node
->
addr
, &
maö_addr
, 
ùsize
) == 0) {

978 i‡(
	`memcmp
(&
node
->
gw_addr
, &
nuŒ_addr
, 
ùsize
) != 0)

979 
	`gtk_˛i°_£t_ãxt
(
	`GTK_CLIST
(
node_li°
), 
i
, 1, 
	`ù_to_°rög
(&
node
->
gw_addr
));

981 i‡(
node
->
h›cou¡
 != 0) {

982 
	`gui_ôﬂ
(
node
->
h›cou¡
, 
ôﬂ_buf
);

983 
	`gtk_˛i°_£t_ãxt
(
	`GTK_CLIST
(
node_li°
), 
i
, 2, 
ôﬂ_buf
);

986 
	`gtk_˛i°_£t_ãxt
(
	`GTK_CLIST
(
node_li°
), 
i
, 3, &
node
->
dev
[0]);

990 i‡(
node
->
mid
.
√xt
 != &node->mid)

991 
	`gtk_˛i°_£t_ãxt
(
	`GTK_CLIST
(
node_li°
), 
i
, 5, "yes");

993 
	`gtk_˛i°_£t_ãxt
(
	`GTK_CLIST
(
node_li°
), 
i
, 5, "no");

995 i‡(
node
->
h«
.
√xt
 != &node->hna)

996 
	`gtk_˛i°_£t_ãxt
(
	`GTK_CLIST
(
node_li°
), 
i
, 6, "yes");

998 
	`gtk_˛i°_£t_ãxt
(
	`GTK_CLIST
(
node_li°
), 
i
, 6, "no");

1000 
node_li°_size
++;

1003 
	`gtk_˛i°_thaw
(
	`GTK_CLIST
(
node_li°
));

1005 
	}
}

1011 
	$∑ckë_li°_add
(*
ty≥
, *
‰om
, *
Àngth
)

1013 
gch¨
 *
nfo
[3] = { 
ty≥
, 
‰om
, 
Àngth
 };

1017 i‡(
∑ckë_li°_size
 >
MAXPACKS
)

1018 
	`gtk_˛i°_ªmove
(
	`GTK_CLIST
(
∑ckë_li°
), 
MAXPACKS
 - 1);

1020 
∑ckë_li°_size
++;

1022 
	`gtk_˛i°_¥ïíd
(
	`GTK_CLIST
(
∑ckë_li°
), 
nfo
);

1026 
	}
}

1029 
	$£t_√t_öfo
(
gch¨
 * 
öfo
, 
di•_buâ⁄
)

1031 
gch¨
 
tôÀ
[255];

1033 
	`mem£t
(&
tôÀ
[0], 0, 255);

1034 
	`gtk_œbñ_£t_ãxt
((
GtkLabñ
 *Ë
öfo_œbñ
, 
öfo
);

1035 
	`gtk_œbñ_£t_ãxt
((
GtkLabñ
 *Ë
√t_œbñ
, "Connected");

1037 
	`°rˇt
(
tôÀ
, 
ﬁ§d_vîsi⁄
);

1038 
	`°rˇt
(
tôÀ
, " - ");

1039 
	`°rˇt
(
tôÀ
, 
	`ù_to_°rög
(&
maö_addr
));

1041 
	`gtk_wödow_£t_tôÀ
(
	`GTK_WINDOW
(
maö_wödow
), 
tôÀ
);

1043 i‡(
di•_buâ⁄
)

1044 
	`gtk_widgë_show
(
c⁄√˘_buâ⁄
);

1046 
	`gtk_widgë_hide
(
c⁄√˘_buâ⁄
);

1047 
	}
}

1050 
	$£t_√t_öfo_ofÊöe
()

1052 
	`gtk_œbñ_£t_ãxt
((
GtkLabñ
 *Ë
√t_œbñ
, "ConnectionÑefused...");

1053 
	`gtk_widgë_show
(
c⁄√˘_buâ⁄
);

1054 
	}
}

1057 
	$£t_√t_öfo_c⁄√˘ög
()

1059 
	`gtk_œbñ_£t_ãxt
((
GtkLabñ
 *Ë
√t_œbñ
, "Connecting...");

1060 
	}
}

	@gui/linux-gtk/src/interface.h

24 #ifde‡
HAVE_CONFIG_H


25 
	~<c⁄fig.h
>

28 
	~<sys/ty≥s.h
>

29 
	~<sys/°©.h
>

30 
	~<time.h
>

31 
	~<uni°d.h
>

32 
	~<°rög.h
>

34 
	~<gdk/gdk.h
>

35 
	~<gdk/gdkkeysyms.h
>

37 
GtkWidgë
 *
	g√t_œbñ
;

38 
GtkWidgë
 *
	göfo_œbñ
;

39 
GtkTextBuf„r
 *
	gãxtBuf„r
;

40 
GtkWidgë
 *
	gc⁄√˘_buâ⁄
;

41 
GtkWidgë
 *
	g∑ckë_li°
;

42 
GtkWidgë
 *
	g∑ckë_c⁄ã¡_li°
;

43 
GtkWidgë
 *
	g∑ckë_buâ⁄
;

44 
GtkWidgë
 *
	g∑ckë_di•_buâ⁄
;

45 
GtkWidgë
 *
	gnode_li°
;

46 
GtkWidgë
 *
	gmid_li°
;

47 
GtkWidgë
 *
	gm¥_li°
;

48 
GtkWidgë
 *
	gh«_li°
;

49 
GtkWidgë
 *
	grouã_li°
;

51 
fûl_˛i°
(
GtkCLi°
 *);

53 
£À˘i⁄_made
(
GtkWidgë
 * 
˛i°
, 
göt
 
row
, göà
cﬁumn
, 
GdkEvítBuâ⁄
 * 
evít
, 
gpoöãr
 
d©a
);

55 
£t_√t_öfo_c⁄√˘ög
();

57 
cﬁumn_˛icked_ˇŒback
(
GtkWidgë
 *, 
göt
);

59 
c⁄√˘_ˇŒback
(
GtkWidgë
 * 
widgë
, 
gpoöãr
 
d©a
);

61 
∑ckë_ˇŒback
(
GtkWidgë
 * 
widgë
, 
gpoöãr
 
d©a
);

63 
∑ckë_di•_ˇŒback
(
GtkWidgë
 * 
widgë
, 
gpoöãr
 
d©a
);

65 
∑ckë_£À˘i⁄
(
GtkWidgë
 * 
˛i°
, 
göt
 
row
, göà
cﬁumn
, 
GdkEvítBuâ⁄
 * 
evít
, 
gpoöãr
 
d©a
);

67 
node_£À˘i⁄
(
GtkWidgë
 * 
˛i°
, 
göt
 
row
, göà
cﬁumn
, 
GdkEvítBuâ⁄
 * 
evít
, 
gpoöãr
 
d©a
);

69 
gui_shutdown
(
GtkObje˘
 *, 
gpoöãr
);

	@gui/linux-gtk/src/ipc.c

24 
	~"comm⁄.h
"

25 
	~"ùc.h
"

26 
	~"∑ckë.h
"

27 
	~"rouãs.h
"

29 #ifde‡
WIN32


30 
	#˛o£
(
x
Ë
	`˛o£sockë
(x)

	)

31 #unde‡
î∫o


32 
	#î∫o
 
	`WSAGëLa°Eº‹
()

	)

33 #unde‡
°ªº‹


34 
	#°ªº‹
(
x
Ë
	`SåEº‹
(x)

	)

35 
	#≥º‹
(
x
Ë
	`WöSockPEº‹
(x)

	)

38 
	gùc_sockë
 = 0;

41 
	$ùc_˛o£
()

44 i‡(
	`˛o£
(
ùc_sockë
))

48 
	}
}

51 
	$ùc_c⁄√˘
(
sockaddr_ö
 *
pö
)

53 #ifde‡
WIN32


54 
On
 = 1;

55 
Lí
;

57 
Êags
;

60 
c⁄√˘ed
 = 0;

62 i‡(!
ùc_sockë
)

63 i‡((
ùc_sockë
 = 
	`sockë
(
AF_INET
, 
SOCK_STREAM
, 0)) == -1) {

64 
	`≥º‹
("socket");

65 
	`exô
(1);

68 
	`¥ötf
("Attempting connect...");

71 i‡(
	`c⁄√˘
(
ùc_sockë
, (
sockaddr
 *)
pö
, (*pin)) < 0) {

72 
	`Ârötf
(
°dîr
, "Eº‹ c⁄√˘ög %d - %s\n", 
î∫o
, 
	`°ªº‹
(errno));

73 
	`£t_√t_öfo_ofÊöe
();

74 
	`¥ötf
("connectionÑefused\n");

76 
	`£t_√t_öfo
("C⁄√˘ed!", 
FALSE
);

77 
	`¥ötf
("Connected!!\n");

81 #ifde‡
WIN32


82 i‡(
	`WSAIo˘l
(
ùc_sockë
, 
FIONBIO
, &
On
, (On), 
NULL
, 0, &
Lí
, NULL, NULL) < 0) {

83 
	`Ârötf
(
°dîr
, "Error while making socketÇon-blocking!\n");

84 
	`exô
(1);

87 i‡((
Êags
 = 
	`f˙é
(
ùc_sockë
, 
F_GETFL
, 0)) < 0) {

88 
	`Ârötf
(
°dîr
, "Error getting socket flags!\n");

89 
	`exô
(1);

92 i‡(
	`f˙é
(
ùc_sockë
, 
F_SETFL
, 
Êags
 | 
O_NONBLOCK
) < 0) {

93 
	`Ârötf
(
°dîr
, "Error setting socket flags!\n");

94 
	`exô
(1);

97 
c⁄√˘ed
 = 1;

104 
	}
}

107 
	$ùc_ªad
()

110 
byãs
, 
tmp_Àn
;

111 *
tmp
;

112 
ﬁ§_mesßge
 *
msg
;

114 
buf
[
BUFFSIZE
 + 1];

115 
ﬁ§_mesßge
 
ﬁ§_msg
;

116 } 
öbuf
;

120 
	`mem£t
(&
öbuf
, 0, (
BUFFSIZE
 + 1));

123 i‡(
c⁄√˘ed
) {

124 
byãs
 = 
	`ªcv
(
ùc_sockë
, (*)&
öbuf
, 
BUFFSIZE
, 0);

125 i‡(
byãs
 == 0) {

126 
	`shutdown
(
ùc_sockë
, 
SHUT_RDWR
);

127 
	`£t_√t_öfo
("Disc⁄√˘ed from sîvî...", 
TRUE
);

128 
c⁄√˘ed
 = 0;

129 
	`˛o£
(
ùc_sockë
);

132 i‡(
byãs
 > 0) {

134 
tmp
 = (*)&
öbuf
.
ﬁ§_msg
;

153 
msg
 = &
öbuf
.
ﬁ§_msg
;

158 i‡(
	`¡ohs
(
öbuf
.
ﬁ§_msg
.
v4
.
ﬁ§_msgsize
Ë< 
byãs
) {

160 
	`¡ohs
(
msg
->
v4
.
ﬁ§_msgsize
Ë< 
byãs
) {

161 
	`ùc_evÆu©e_mesßge
(
msg
);

163 
tmp_Àn
 = 
	`¡ohs
(
msg
->
v4
.
ﬁ§_msgsize
);

164 
msg
 = (
ﬁ§_mesßge
 *)&
tmp
[
tmp_Àn
];

165 
tmp
 = &tmp[
tmp_Àn
];

166 i‡(
tmp_Àn
 == 0)

168 
byãs
 = byã†- 
tmp_Àn
;

170 
tmp_Àn
 = 
	`¡ohs
(
msg
->
v4
.
ﬁ§_msgsize
);

174 i‡(
tmp_Àn
 > 
byãs
) {

178 
	`mem˝y
(&
öbuf
, 
tmp
, 
byãs
);

180 
byãs
 = 
	`ªcv
(
ùc_sockë
, (*)&
öbuf
.
buf
[byãs], 
tmp_Àn
 - bytes, 0);

182 
tmp
 = (*)&
öbuf
.
ﬁ§_msg
;

183 
msg
 = (
ﬁ§_mesßge
 *)
tmp
;

190 
	`ùc_evÆu©e_mesßge
(
msg
);

197 
	}
}

200 
	$ùc_£nd
()

204 
	}
}

207 
	$ùc_evÆu©e_mesßge
(
ﬁ§_mesßge
 *
ﬁ§_ö
)

209 
ùc_∑ck
 = 0;

210 
ﬁ§_u8_t
 
ty≥
;

211 
msgsize
;

212 
ôﬂ_buf
[10];

213 
ﬁ§_u8_t
 
vtime
;

214 
ﬁ§_ù_addr
 *
‹igö©‹
;

217 
ty≥
 = 
ﬁ§_ö
->
v4
.
ﬁ§_msgty≥
;

218 
msgsize
 = 
	`¡ohs
(
ﬁ§_ö
->
v4
.
ﬁ§_msgsize
);

219 
vtime
 = 
ﬁ§_ö
->
v4
.
ﬁ§_vtime
;

220 
‹igö©‹
 = (
ﬁ§_ù_addr
 *)&
ﬁ§_ö
->
v4
.originator;

222 
	`gui_ôﬂ
(
msgsize
, 
ôﬂ_buf
);

224 
ty≥
) {

225 
HELLO_MESSAGE
:

227 i‡(!
‰ìze_∑ckës
)

228 
	`∑ckë_li°_add
("HELLO", 
	`ù_to_°rög
(
‹igö©‹
), 
ôﬂ_buf
);

230 i‡(
ùvîsi⁄
 =
AF_INET
) {

231 
	`¥o˚ss_hñlo
(
msgsize
, 
vtime
, 
‹igö©‹
, (
hñlo_mesßge
 *)&
ﬁ§_ö
->
v4
.
mesßge
.
hñlo
);

233 
	`¥o˚ss_hñlo
(
msgsize
, 
vtime
, 
‹igö©‹
, (
hñlo_mesßge
 *)&
ﬁ§_ö
->
v6
.
mesßge
.
hñlo
);

237 
TC_MESSAGE
:

238 i‡(!
‰ìze_∑ckës
)

239 
	`∑ckë_li°_add
("TC", 
	`ù_to_°rög
(
‹igö©‹
), 
ôﬂ_buf
);

241 i‡(
ùvîsi⁄
 =
AF_INET
) {

242 
	`¥o˚ss_tc
(
msgsize
, 
vtime
, 
‹igö©‹
, (
tc_mesßge
 *)&
ﬁ§_ö
->
v4
.
mesßge
.
tc
);

245 
	`¥o˚ss_tc
(
msgsize
, 
vtime
, 
‹igö©‹
, (
tc_mesßge
 *)&
ﬁ§_ö
->
v6
.
mesßge
.
tc
);

250 
MID_MESSAGE
:

251 i‡(!
‰ìze_∑ckës
)

252 
	`∑ckë_li°_add
("MID", 
	`ù_to_°rög
(
‹igö©‹
), 
ôﬂ_buf
);

253 i‡(
ùvîsi⁄
 =
AF_INET
) {

254 
	`¥o˚ss_mid
(
msgsize
, 
vtime
, 
‹igö©‹
, (
mid_mesßge
 *)&
ﬁ§_ö
->
v4
.
mesßge
.
mid
);

257 
	`¥o˚ss_mid
(
msgsize
, 
vtime
, 
‹igö©‹
, (
mid_mesßge
 *)&
ﬁ§_ö
->
v6
.
mesßge
.
mid
);

263 
HNA_MESSAGE
:

265 i‡(!
‰ìze_∑ckës
)

266 
	`∑ckë_li°_add
("HNA", 
	`ù_to_°rög
(
‹igö©‹
), 
ôﬂ_buf
);

267 i‡(
ùvîsi⁄
 =
AF_INET
) {

268 
	`¥o˚ss_h«
(
msgsize
, 
vtime
, 
‹igö©‹
, (
h«_mesßge
 *)&
ﬁ§_ö
->
v4
.
mesßge
.
h«
);

271 
	`¥o˚ss_h«
(
msgsize
, 
vtime
, 
‹igö©‹
, (
h«_mesßge
 *)&
ﬁ§_ö
->
v6
.
mesßge
.
h«
);

277 
IPC_MESSAGE
:

279 
ùc_∑ck
 = 1;

280 
	`ùc_evÆ_rouã_∑ckë
((
rouãmsg
 *)
ﬁ§_ö
);

282 
IPC_NET
:

284 
ùc_∑ck
 = 1;

285 
	`ùc_evÆ_√t_öfo
((
√tmsg
 *)
ﬁ§_ö
);

288 i‡(!
‰ìze_∑ckës
) {

289 
unk_œbñ
[8];

290 
	`•rötf
(
unk_œbñ
, "%d", 
ty≥
);

291 
	`∑ckë_li°_add
(
unk_œbñ
, 
	`ù_to_°rög
(
‹igö©‹
), 
ôﬂ_buf
);

293 
	`¥ötf
("Unknow¿∑ckëÅy≥ %d\n", 
ty≥
);

297 i‡(!
‰ìze_∑ckës
 && !
ùc_∑ck
) {

298 
	`add_∑ckë_to_buf„r
(
ﬁ§_ö
, 
msgsize
);

302 
	}
}

305 
	$ùc_evÆ_√t_öfo
(
√tmsg
 *
msg
)

307 
öfo
[256];

308 
	`¥ötf
("Evaluating NET info...\n");

320 i‡(
msg
->
ùv6
 == 0) {

321 
ùvîsi⁄
 = 
AF_INET
;

322 
ùsize
 = (
ö_addr
);

323 
	`•rötf
(&
öfo
[0],

325 
	`ù_to_°rög
(&
msg
->
maö_addr
), msg->
mids
, msg->
h«s
, 
	`¡ohs
(msg->
hñlo_öt
),Çtohs(msg->
hñlo_œn_öt
),

326 
	`¡ohs
(
msg
->
tc_öt
),Çtohs(msg->
√igh_hﬁd
),Çtohs(msg->
t›ﬁogy_hﬁd
));

328 
ùvîsi⁄
 = 
AF_INET6
;

329 
ùsize
 = (
ö6_addr
);

330 
	`•rötf
(&
öfo
[0],

332 
	`ù_to_°rög
(&
msg
->
maö_addr
), msg->
mids
, msg->
h«s
, 
	`¡ohs
(msg->
hñlo_öt
),Çtohs(msg->
hñlo_œn_öt
),

333 
	`¡ohs
(
msg
->
tc_öt
),Çtohs(msg->
√igh_hﬁd
),Çtohs(msg->
t›ﬁogy_hﬁd
));

336 
	`mem˝y
(&
maö_addr
, &
msg
->maö_addr, 
ùsize
);

338 
	`£t_√t_öfo
(&
öfo
[0], 0);

341 
	}
}

344 
	$ùc_evÆ_rouã_∑ckë
(
rouãmsg
 *
msg
)

346 
rouã_íåy
 
π_ít
;

347 
dev
[5];

348 
gw
[16];

349 
ôﬂ_buf
[10];

350 
dev
[4] = '\0';

351 
	`mem£t
(&
gw
[0], 0, 16);

353 
	`¥ötf
("ProcessingÑouteÖacket\n");

355 
	`mem£t
(
π_ít
.
if_«me
, 0, 
MAX_IF_NAMESIZ
);

359 
	`mem˝y
(&
π_ít
.
gw
, &
msg
->
g©eway_addr
, 
ùsize
);

360 
	`mem˝y
(&
π_ít
.
d°
, &
msg
->
èrgë_addr
, 
ùsize
);

361 
	`mem˝y
(
π_ít
.
if_«me
, 
msg
->
devi˚
, 4);

362 
π_ít
.
h›˙t
 = 
msg
->
mëric
;

364 i‡(
msg
->
add
) {

365 
	`mem˝y
(&
dev
[0], &
msg
->
devi˚
[0], 4);

368 
	`mem˝y
(&
gw
[0], 
	`ù_to_°rög
(&
msg
->
g©eway_addr
), 16);

370 
	`gui_ôﬂ
(
msg
->
mëric
, 
ôﬂ_buf
);

372 
	`rouã_li°_add
(
	`ù_to_°rög
(&
msg
->
èrgë_addr
), 
gw
, 
dev
, 
ôﬂ_buf
);

374 
	`¥ötf
("\tRouãÅÿ%s(h¯%dËadded\n", 
	`ù_to_°rög
(&
msg
->
èrgë_addr
), 
π_ít
.
h›˙t
);

384 i‡(
	`rouã_li°_dñ
(
	`ù_to_°rög
(&
msg
->
èrgë_addr
)) < 1)

385 
	`¥ötf
("COULD NOT FIND ROUTE TO DELETE!\n\n");

387 
	`¥ötf
("\tRouãÅÿ%†dñëed\n", 
	`ù_to_°rög
(&
msg
->
èrgë_addr
));

390 
	}
}

393 
	$¥o˚ss_hñlo
(
size
, 
ﬁ§_u8_t
 
vtime
, 
ﬁ§_ù_addr
 *
‹igö©‹
, 
hñlo_mesßge
 *
m
)

395 
hñlöfo
 *
√igh
;

396 
hñlöfo6
 *
√igh6
;

397 
i
;

398 
nsize
;

399 
ty≥
;

402 
	`¥ötf
("Pro˚ssög HELLO from %†sizê%d\n", 
	`ù_to_°rög
(
‹igö©‹
), 
size
);

404 i‡(!
	`upd©e_timî_node
(
‹igö©‹
, 
vtime
))

405 
	`add_node
(
‹igö©‹
, 
vtime
);

408 
size
 = sizê- 4 - 8 - 
ùsize
;

410 i‡(!
size
)

414 
√igh
 = 
m
->
v4
.
hñl_öfo
;

415 
√igh6
 = 
m
->
v6
.
hñl_öfo
;

419 
size
 > 0) {

422 i‡(
ùvîsi⁄
 =
AF_INET
) {

423 
nsize
 = 
	`¡ohs
(
√igh
->
size
);

424 
ty≥
 = 
	`EXTRACT_STATUS
(
	`¡ohs
(
√igh
->
lök_code
));

428 
nsize
 = 
	`¡ohs
(
√igh6
->
size
);

429 
ty≥
 = 
	`EXTRACT_STATUS
(
	`¡ohs
(
√igh6
->
lök_code
));

433 
size
 -
nsize
;

435 
nsize
 =Çsize - 4;

437 
i
 = 0;

438 
nsize
 > 0) {

445 i‡(
ùvîsi⁄
 =
AF_INET
) {

446 i‡(
ty≥
 =
MPR_NEIGH
) {

448 
	`upd©e_timî_m¥
((
ﬁ§_ù_addr
 *)&
√igh
->
√igh_addr
[
i
], 
‹igö©‹
, 
vtime
);

450 
	`add_node
((
ﬁ§_ù_addr
 *)&
√igh
->
√igh_addr
[
i
++], 
vtime
);

452 i‡(
ty≥
 =
MPR_NEIGH
) {

454 
	`upd©e_timî_m¥
((
ﬁ§_ù_addr
 *)&
√igh6
->
√igh_addr
[
i
], 
‹igö©‹
, 
vtime
);

456 
	`add_node
((
ﬁ§_ù_addr
 *)&
√igh6
->
√igh_addr
[
i
++], 
vtime
);

459 
nsize
 =Çsizê- 
ùsize
;

463 
√igh
 = (
hñlöfo
 *)&√igh->
√igh_addr
[
i
];

464 
√igh6
 = (
hñlöfo6
 *)&√igh6->
√igh_addr
[
i
];

470 
	}
}

473 
	$¥o˚ss_tc
(
size
, 
ﬁ§_u8_t
 
vtime
, 
ﬁ§_ù_addr
 *
‹igö©‹
, 
tc_mesßge
 *
m
)

476 
√igh_öfo
 *
m¥söfo
;

477 
√igh_öfo6
 *
m¥söfo6
;

479 
	`¥ötf
("Pro˚ssög TC from %†sizê%d\n", 
	`ù_to_°rög
(
‹igö©‹
), 
size
);

482 i‡(!
	`upd©e_timî_node
(
‹igö©‹
, 
vtime
))

483 
	`add_node
(
‹igö©‹
, 
vtime
);

486 
size
 = sizê- 4 - 8 - 
ùsize
;

490 i‡(
ùvîsi⁄
 =
AF_INET
)

491 
m¥söfo
 = &
m
->
v4
.
√igh
[0];

493 
m¥söfo6
 = &
m
->
v6
.
√igh
[0];

495 
size
 > 0) {

496 i‡(
ùvîsi⁄
 =
AF_INET
) {

498 
	`add_node
((
ﬁ§_ù_addr
 *)&
m¥söfo
->
addr
, 
vtime
);

499 
	`upd©e_timî_m¥
((
ﬁ§_ù_addr
 *)&
m¥söfo
->
addr
, 
‹igö©‹
, 
vtime
);

500 
m¥söfo
++;

504 
	`add_node
((
ﬁ§_ù_addr
 *)&
m¥söfo6
->
addr
, 
vtime
);

505 
	`upd©e_timî_m¥
((
ﬁ§_ù_addr
 *)&
m¥söfo6
->
addr
, 
‹igö©‹
, 
vtime
);

506 
m¥söfo6
++;

508 
size
 = sizê- 
ùsize
;

514 
	}
}

517 
	$¥o˚ss_mid
(
size
, 
ﬁ§_u8_t
 
vtime
, 
ﬁ§_ù_addr
 *
‹igö©‹
, 
mid_mesßge
 *
m
)

519 
midaddr
 *midaddr;

520 
midaddr6
 *midaddr6;

522 
	`¥ötf
("Pro˚ssög MID from %†sizê%d\n", 
	`ù_to_°rög
(
‹igö©‹
), 
size
);

525 
size
 = sizê- 4 - 4 - 
ùsize
;

527 i‡(
ùvîsi⁄
 =
AF_INET
)

528 
midaddr
 = &
m
->
v4
.
mid_addr
[0];

530 
midaddr6
 = &
m
->
v6
.
mid_addr
[0];

534 
size
 > 0) {

535 i‡(
ùvîsi⁄
 =
AF_INET
) {

537 
	`add_mid_node
(
‹igö©‹
, (
ﬁ§_ù_addr
 *)&
midaddr
->
addr
, 
vtime
);

538 
midaddr
++;

540 
	`add_mid_node
(
‹igö©‹
, (
ﬁ§_ù_addr
 *)&
midaddr6
->
addr
, 
vtime
);

542 
midaddr6
++;

544 
size
 = sizê- 
ùsize
;

549 
	}
}

552 
	$¥o˚ss_h«
(
size
, 
ﬁ§_u8_t
 
vtime
, 
ﬁ§_ù_addr
 *
‹igö©‹
, 
h«_mesßge
 *
m
)

555 
	`¥ötf
("Pro˚ssög HNA sizê%d\n", 
size
);

556 
h«∑ú
 *
h«∑ús
;

557 
h«∑ú6
 *
h«∑ús6
;

560 
size
 = sizê- 4 - 4 - 
ùsize
;

562 i‡(
ùvîsi⁄
 =
AF_INET
)

563 
h«∑ús
 = &
m
->
v4
.
h«_√t
[0];

565 
h«∑ús6
 = &
m
->
v6
.
h«_√t
[0];

567 
size
 > 0) {

568 i‡(
ùvîsi⁄
 =
AF_INET
) {

570 
	`add_h«_node
(
‹igö©‹
, (
ﬁ§_ù_addr
 *)&
h«∑ús
->
addr
, (ﬁ§_ù_add∏*)&h«∑ús->
√tmask
, 
vtime
);

571 
h«∑ús
++;

573 
	`add_h«_node
(
‹igö©‹
, (
ﬁ§_ù_addr
 *)&
h«∑ús6
->
addr
, (ﬁ§_ù_add∏*)&h«∑ús6->
√tmask
, 
vtime
);

574 
h«∑ús6
++;

577 
size
 = sizê- 
ùsize
 - ipsize;

581 
	}
}

584 
	$ù_to_°rög
(
ﬁ§_ù_addr
 *
addr
)

586 *
ªt
;

587 
ö_addr
 
ö
;

589 i‡(
ùvîsi⁄
 =
AF_INET
) {

590 
ö
 = 
addr
->
v4
;

591 
ªt
 = 
	`öë_¡ﬂ
(
ö
);

594 
ªt
 = (*)
	`öë_¡›
(
AF_INET6
, &
addr
->
v6
, 
ùv6_buf
, (ipv6_buf));

597  
ªt
;

599 
	}
}

602 
	$gui_ôﬂ
(
i
, *
buf
)

604 
tmp
[10];

606 i‡(
	`•rötf
(
buf
, "%hd", 
i
)) {

608 
	`°r˝y
(
tmp
, 
	`g_loˇÀ_to_utf8
(
buf
, -1, 
NULL
, NULL, NULL));

609 
	`°r˝y
(
buf
, 
tmp
);

614 
	}
}

	@gui/linux-gtk/src/ipc.h

24 
	~<°dio.h
>

25 
	~<sys/ty≥s.h
>

26 
	~<sys/sockë.h
>

27 
	~<√tdb.h
>

28 
	~<°rög.h
>

29 
	~<¨∑/öë.h
>

30 
	~<uni°d.h
>

31 
	~<f˙é.h
>

32 
	~<î∫o.h
>

33 
	~"ﬁ§_¥Ÿocﬁ.h
"

34 
	~"∑ckë.h
"

36 
	#IPC_PORT
 1212

	)

37 
	#IPC_MESSAGE
 11

	)

38 
	#IPC_NET
 12

	)

41 
	gc⁄√˘ed
;

50 
	srouãmsg
 {

51 
ﬁ§_u8_t
 
	mmsgty≥
;

52 
ﬁ§_u16_t
 
	msize
;

53 
ﬁ§_u8_t
 
	mmëric
;

54 
ﬁ§_u8_t
 
	madd
;

55 
ﬁ§_ù_addr
 
	mèrgë_addr
;

56 
ﬁ§_ù_addr
 
	mg©eway_addr
;

57 
	mdevi˚
[4];

60 
	s√tmsg
 {

61 
ﬁ§_u8_t
 
	mmsgty≥
;

62 
ﬁ§_u16_t
 
	msize
;

63 
ﬁ§_u8_t
 
	mmids
;

64 
ﬁ§_u8_t
 
	mh«s
;

65 
ﬁ§_u8_t
 
	munu£d1
;

66 
ﬁ§_u16_t
 
	mhñlo_öt
;

67 
ﬁ§_u16_t
 
	mhñlo_œn_öt
;

68 
ﬁ§_u16_t
 
	mtc_öt
;

69 
ﬁ§_u16_t
 
	m√igh_hﬁd
;

70 
ﬁ§_u16_t
 
	mt›ﬁogy_hﬁd
;

71 
ﬁ§_u8_t
 
	mùv6
;

72 
ﬁ§_ù_addr
 
	mmaö_addr
;

79 
ùc_gë_sockë
();

81 
ùc_evÆu©e_mesßge
(
ﬁ§_mesßge
 *);

83 
ùc_evÆ_rouã_∑ckë
(
rouãmsg
 *);

85 
ùc_evÆ_√t_öfo
(
√tmsg
 *);

87 
¥o˚ss_hñlo
(, 
ﬁ§_u8_t
, 
ﬁ§_ù_addr
 *, 
hñlo_mesßge
 *);

89 
¥o˚ss_tc
(, 
ﬁ§_u8_t
, 
ﬁ§_ù_addr
 *, 
tc_mesßge
 *);

91 
¥o˚ss_mid
(, 
ﬁ§_u8_t
, 
ﬁ§_ù_addr
 *, 
mid_mesßge
 *);

93 
¥o˚ss_h«
(, 
ﬁ§_u8_t
, 
ﬁ§_ù_addr
 *, 
h«_mesßge
 *);

	@gui/linux-gtk/src/main.c

24 
	~"comm⁄.h
"

25 
	~"maö.h
"

26 
	~"ùc.h
"

29 
	$maö
(
¨gc
, *
¨gv
[])

31 
ho°ít
 *
hp
;

32 
ö_addr
 
ö
;

33 
sockaddr_ö
 
pö
;

35 #ifde‡
WIN32


36 
WSADATA
 
WßD©a
;

38 
GtkWidgë
 *
maö_wödow
;

40 #ifde‡
WIN32


41 i‡(
	`WSASèπup
(0x0202, &
WßD©a
)) {

42 
	`Ârötf
(
°dîr
, "CouldÇot initialize WinSock.\n");

43 
	`exô
(1);

48 i‡((
hp
 = 
	`gëho°by«me
(
¨gc
 > 1 ? 
¨gv
[1] : "localhost")) == 0) {

49 
	`Ârötf
(
°dîr
, "NŸá vÆid ho° \"%s\"\n", 
¨gv
[1]);

50 
	`exô
(1);

53 
ö
.
s_addr
 = ((
ö_addr
 *)(
hp
->
h_addr
))->s_addr;

54 
	`¥ötf
("Addªss: %s\n", 
	`öë_¡ﬂ
(
ö
));

57 
	`mem£t
(&
pö
, 0, (pin));

58 
pö
.
sö_Ámûy
 = 
AF_INET
;

59 
pö
.
sö_addr
.
s_addr
 = ((
ö_addr
 *)(
hp
->
h_addr
))->s_addr;

60 
pö
.
sö_p‹t
 = 
	`ht⁄s
(
IPC_PORT
);

62 
	`gtk_öô
(&
¨gc
, &
¨gv
);

64 
	`öô_nodes
();

66 
‰ìze_∑ckës
 = 1;

67 
di•œy_dec
 = 1;

70 
ùvîsi⁄
 = 
AF_INET
;

71 
ùsize
 = (
ö_addr
);

73 
maö_wödow
 = 
	`¸óã_maö_wödow
();

74 
	`gtk_widgë_show
(
maö_wödow
);

76 
	`¥ötf
("Done building GUI\n");

78 
	`mem£t
(&
maö_addr
, 0, (
ﬁ§_ù_addr
));

79 
	`mem£t
(&
nuŒ_addr
, 0, (
ﬁ§_ù_addr
));

82 
	`sig«l
(
SIGINT
, 
shutdown_
);

85 
nodes_timeout
 = 
NEIGHB_HOLD_TIME_NW
;

86 
	`öô_timî
((
ﬁ§_u32_t
Ë(
nodes_timeout
 * 1000), &
hﬁd_time_nodes
);

88 
	`ùc_c⁄√˘
(&
pö
);

90 
	`add_timeouts
();

92 
	`gtk_maö
();

94 
	}
}

101 
	$add_timeouts
()

108 
	`gtk_timeout_add
(
IPC_INTERVAL
, 
ùc_timeout
, 
NULL
);

113 
timeouts
 = 5;

114 
	`gtk_timeout_add
(
TOP_HOLD_TIME
, 
time_out_nodes
, 
NULL
);

117 
	}
}

119 
göt


120 
	$ùc_timeout
(
gpoöãr
 
d©a
)

123 
	`ùc_ªad
();

125 
	}
}

128 
	$shutdown_
(
sig«l
)

130 
	`¥ötf
("Cleaning up...\n");

132 i‡(
	`ùc_˛o£
() < 0)

133 
	`¥ötf
("CouldÇot close socket!\n");

135 
	`¥ötf
("BYE-BYE!\n");

136 
	`exô
(
sig«l
);

137 
	}
}

	@gui/linux-gtk/src/main.h

24 
	~<sig«l.h
>

26 
	gtimeouts
;

28 
add_timeouts
();

30 
göt
 
ùc_timeout
(
gpoöãr
);

32 
shutdown_
();

	@gui/linux-gtk/src/nodes.c

24 
	~"comm⁄.h
"

25 
	~"nodes.h
"

26 
	~<m©h.h
>

29 
	$öô_nodes
()

32 
nodes
.
√xt
 = &nodes;

33 
nodes
.
¥ev
 = &nodes;

34 
	}
}

40 
node
 *

41 
	$ö£π_node
(
node
 *
n
, 
ﬁ§_u8_t
 
vtime
)

43 
node
 *
√w_node
;

45 
	`¥ötf
("In£πögÇodê%s\n", 
	`ù_to_°rög
((
ﬁ§_ù_addr
 *)&
n
->
addr
));

47 i‡((
√w_node
 = 
	`mÆloc
((
node
))) == 0) {

48 
	`Ârötf
(
°dîr
, "OUT OF MEMORY!\n");

49 
	`exô
(1);

52 
	`mem˝y
(
√w_node
, 
n
, (
node
));

55 
nodes
.
√xt
->
¥ev
 = 
√w_node
;

56 
√w_node
->
√xt
 = 
nodes
.next;

57 
nodes
.
√xt
 = 
√w_node
;

58 
√w_node
->
¥ev
 = &
nodes
;

60 
√w_node
->
h«
.
√xt
 = &new_node->hna;

61 
√w_node
->
h«
.
¥ev
 = &new_node->hna;

62 
√w_node
->
mid
.
√xt
 = &new_node->mid;

63 
√w_node
->
mid
.
¥ev
 = &new_node->mid;

64 
√w_node
->
m¥
.
√xt
 = &new_node->mpr;

65 
√w_node
->
m¥
.
¥ev
 = &new_node->mpr;

67 
	`upd©e_timî_node
(&
n
->
addr
, 
vtime
);

69  
√w_node
;

70 
	}
}

76 
	$add_node
(
ﬁ§_ù_addr
 *
node
, 
ﬁ§_u8_t
 
vtime
)

78 
node
 
√w
;

79 
node
 *
tmp_nodes
;

80 
timevÆ
 
tmp_timî
;

81 
dbl_time
;

82 
ﬁ§_u32_t
 
time_vÆue
;

83 
mid
 *
tmp_mid
;

85 
dbl_time
 = 
	`me_to_doubÀ
(
vtime
);

86 
time_vÆue
 = (
ﬁ§_u32_t
Ë
dbl_time
 *1000;

88 
tmp_timî
.
tv_£c
 = 
time_vÆue
 / 1000;

89 
tmp_timî
.
tv_u£c
 = (
time_vÆue
 - (tmp_timî.
tv_£c
 * 1000)) * 1000;

92 
tmp_nodes
 = 
nodes
.
√xt
;Åmp_nodes != &nodes;Åmp_nodes =Åmp_nodes->next) {

93 i‡(
	`memcmp
(&
tmp_nodes
->
addr
, 
node
, 
ùsize
) == 0) {

97 
	`gëtimeofday
(&
now
, (
timez⁄e
 *)
NULL
);

98 
	`timîadd
(&
now
, &
tmp_timî
, &
tmp_nodes
->
timî
);

102 
tmp_mid
 = 
tmp_nodes
->
mid
.
√xt
;Åmp_mid != &tmp_nodes->mid;Åmp_mid =Åmp_mid->next) {

103 i‡(
	`memcmp
(&
tmp_mid
->
Æüs
, 
node
, 
ùsize
) == 0) {

107 
	`gëtimeofday
(&
now
, (
timez⁄e
 *)
NULL
);

108 
	`timîadd
(&
now
, &
tmp_timî
, &
tmp_nodes
->
timî
);

115 
	`mem£t
(&
√w
, 0, (
node
));

116 
	`mem˝y
(&
√w
.
addr
, 
node
, 
ùsize
);

117 
√w
.
di•œy
 = 1;

118 
	`¥ötf
("1:");

119 
	`ö£π_node
(&
√w
, 
vtime
);

120 
	`upd©e_nodes_li°
(&
√w
);

123 
	}
}

126 
	$upd©e_timî_node
(
ﬁ§_ù_addr
 *
node
, 
ﬁ§_u8_t
 
vtime
)

128 
node
 *
tmp_nodes
;

129 
timevÆ
 
tmp_timî
;

130 
dbl_time
;

131 
ﬁ§_u32_t
 
time_vÆue
;

133 
dbl_time
 = 
	`me_to_doubÀ
(
vtime
);

134 
time_vÆue
 = (
ﬁ§_u32_t
Ë
dbl_time
 *1000;

136 
tmp_timî
.
tv_£c
 = 
time_vÆue
 / 1000;

137 
tmp_timî
.
tv_u£c
 = (
time_vÆue
 - (tmp_timî.
tv_£c
 * 1000)) * 1000;

142 
tmp_nodes
 = 
nodes
.
√xt
;Åmp_nodes != &nodes;Åmp_nodes =Åmp_nodes->next) {

143 i‡(
	`memcmp
(&
tmp_nodes
->
addr
, 
node
, 
ùsize
) == 0) {

145 
	`gëtimeofday
(&
now
, (
timez⁄e
 *)
NULL
);

146 
	`timîadd
(&
now
, &
tmp_timî
, &
tmp_nodes
->
timî
);

147 i‡(
tmp_nodes
->
di•œy
)

148 
	`upd©e_nodes_li°
(
tmp_nodes
);

154 
	}
}

165 
	$upd©e_timî_m¥
(
ﬁ§_ù_addr
 *
node
, ﬁ§_ù_add∏*
m¥
, 
ﬁ§_u8_t
 
vtime
)

167 
node
 *
tmp_nodes
;

168 
m¥
 *
tmp_m¥
;

169 
timevÆ
 
tmp_timî
;

170 
dbl_time
;

171 
ﬁ§_u32_t
 
time_vÆue
;

173 
dbl_time
 = 
	`me_to_doubÀ
(
vtime
);

174 
time_vÆue
 = (
ﬁ§_u32_t
Ë
dbl_time
 *1000;

176 
tmp_timî
.
tv_£c
 = 
time_vÆue
 / 1000;

177 
tmp_timî
.
tv_u£c
 = (
time_vÆue
 - (tmp_timî.
tv_£c
 * 1000)) * 1000;

183 
tmp_nodes
 = 
nodes
.
√xt
;Åmp_nodes != &nodes;Åmp_nodes =Åmp_nodes->next) {

184 i‡(
	`memcmp
(&
tmp_nodes
->
addr
, 
node
, 
ùsize
) == 0) {

185 
tmp_m¥
 = 
tmp_nodes
->
m¥
.
√xt
;Åmp_mpr != &tmp_nodes->mpr;Åmp_mpr =Åmp_mpr->next) {

186 i‡(
	`memcmp
(&
tmp_m¥
->
addr
, 
m¥
, 
ùsize
) == 0) {

189 
	`gëtimeofday
(&
now
, (
timez⁄e
 *)
NULL
);

190 
	`timîadd
(&
now
, &
tmp_timî
, &
tmp_m¥
->
timî
);

195 
	`add_m¥
(
node
, 
m¥
, &
tmp_timî
);

201 
	}
}

204 
	$add_mid_node
(
ﬁ§_ù_addr
 *
node
, ﬁ§_ù_add∏*
Æüs
, 
ﬁ§_u8_t
 
vtime
)

207 
node
 *
tmp_nodes
;

208 
mid
 *
tmp_mid
;

209 
node
 
√w
, *
ö£πed
;

215 
tmp_nodes
 = 
nodes
.
√xt
;Åmp_nodes != &nodes;Åmp_nodes =Åmp_nodes->next) {

216 i‡(
	`memcmp
(&
tmp_nodes
->
addr
, 
node
, 
ùsize
) == 0) {

217 
tmp_mid
 = 
tmp_nodes
->
mid
.
√xt
;Åmp_mid != &tmp_nodes->mid;Åmp_mid =Åmp_mid->next) {

218 i‡(
	`memcmp
(&
tmp_mid
->
Æüs
,álüs, 
ùsize
) == 0)

223 
	`¥ötf
("(1)NEW MID %†", 
	`ù_to_°rög
(
Æüs
));

224 
	`¥ötf
("ADDED FOR %s\n", 
	`ù_to_°rög
(
node
));

225 i‡((
tmp_mid
 = 
	`mÆloc
((
mid
))) == 0) {

226 
	`Ârötf
(
°dîr
, "OUT OF MEMORY\n");

227 
	`exô
(1);

230 
	`mem˝y
(&
tmp_mid
->
Æüs
,álüs, 
ùsize
);

232 
tmp_nodes
->
mid
.
√xt
->
¥ev
 = 
tmp_mid
;

233 
tmp_mid
->
√xt
 = 
tmp_nodes
->
mid
.next;

234 
tmp_nodes
->
mid
.
√xt
 = 
tmp_mid
;

235 
tmp_mid
->
¥ev
 = &
tmp_nodes
->
mid
;

237 
	`ªmove_node_addr
(
Æüs
);

239 
	`upd©e_nodes_li°
(
tmp_nodes
);

247 
	`¥ötf
("ADDING NEW NODE %†FROM MID...\n", 
	`ù_to_°rög
(
node
));

249 
	`mem£t
(&
√w
, 0, (
node
));

250 
	`mem˝y
(&
√w
.
addr
, 
node
, 
ùsize
);

251 
ö£πed
 = 
	`ö£π_node
(&
√w
, 
vtime
);

253 i‡((
tmp_mid
 = 
	`mÆloc
((
mid
))) == 0) {

254 
	`Ârötf
(
°dîr
, "OUT OF MEMORY!\n");

255 
	`exô
(1);

258 
	`mem˝y
(&
tmp_mid
->
Æüs
,álüs, 
ùsize
);

260 
tmp_mid
->
√xt
 = &
ö£πed
->
mid
;

261 
tmp_mid
->
¥ev
 = &
ö£πed
->
mid
;

262 
ö£πed
->
mid
.
√xt
 = 
tmp_mid
;

263 
ö£πed
->
mid
.
¥ev
 = 
tmp_mid
;

265 
	`upd©e_nodes_li°
(
ö£πed
);

268 
	}
}

271 
	$add_h«_node
(
ﬁ§_ù_addr
 *
node
, ﬁ§_ù_add∏*
√t
, ﬁ§_ù_add∏*
mask
, 
ﬁ§_u8_t
 
vtime
)

274 
node
 *
tmp_nodes
;

275 
h«
 *
tmp_h«
;

276 
node
 
√w
, *
ö£πed
;

280 
	`upd©e_timî_node
(
node
, 
vtime
);

282 
tmp_nodes
 = 
nodes
.
√xt
;Åmp_nodes != &nodes;Åmp_nodes =Åmp_nodes->next) {

283 i‡(
	`memcmp
(&
tmp_nodes
->
addr
, 
node
, 
ùsize
) == 0) {

284 
tmp_h«
 = 
tmp_nodes
->
h«
.
√xt
;Åmp_hna != &tmp_nodes->hna;Åmp_hna =Åmp_hna->next) {

285 i‡((
	`memcmp
(&
tmp_h«
->
√t
,Çë, 
ùsize
Ë=0Ë&& (memcmp(&tmp_h«->
mask
, mask, ipsize) == 0))

292 i‡((
tmp_h«
 = 
	`mÆloc
((
h«
))) == 0) {

293 
	`Ârötf
(
°dîr
, "OUT OF MEMORY\n");

294 
	`exô
(1);

297 
	`mem˝y
(&
tmp_h«
->
√t
,Çë, 
ùsize
);

298 
	`mem˝y
(&
tmp_h«
->
mask
, mask, 
ùsize
);

301 
tmp_nodes
->
h«
.
√xt
->
¥ev
 = 
tmp_h«
;

302 
tmp_h«
->
√xt
 = 
tmp_nodes
->
h«
.next;

303 
tmp_nodes
->
h«
.
√xt
 = 
tmp_h«
;

304 
tmp_h«
->
¥ev
 = &
tmp_nodes
->
h«
;

306 
	`upd©e_nodes_li°
(
tmp_nodes
);

311 
	`¥ötf
("ADDING NEW NODE %†FROM HNA...\n", 
	`ù_to_°rög
(
node
));

313 
	`mem£t
(&
√w
, 0, (
node
));

314 
	`mem˝y
(&
√w
.
addr
, 
node
, 
ùsize
);

315 
ö£πed
 = 
	`ö£π_node
(&
√w
, 
vtime
);

317 i‡((
tmp_h«
 = 
	`mÆloc
((
h«
))) == 0) {

318 
	`Ârötf
(
°dîr
, "OUT OF MEMORY!\n");

319 
	`exô
(1);

322 
	`mem˝y
(&
tmp_h«
->
√t
,Çë, 
ùsize
);

323 
	`mem˝y
(&
tmp_h«
->
mask
, mask, 
ùsize
);

325 
tmp_h«
->
√xt
 = &
ö£πed
->
h«
;

326 
tmp_h«
->
¥ev
 = &
ö£πed
->
h«
;

327 
ö£πed
->
h«
.
√xt
 = 
tmp_h«
;

328 
ö£πed
->
h«
.
¥ev
 = 
tmp_h«
;

330 
	`upd©e_nodes_li°
(
ö£πed
);

333 
	}
}

344 
	$add_m¥
(
ﬁ§_ù_addr
 *
node
, ﬁ§_ù_add∏*
m¥
, 
timevÆ
 *
tmp_timî
)

347 
node
 *
tmp_nodes
;

348 
m¥
 *
m¥s
;

349 
m¥
 *
tmp_m¥
;

351 
tmp_nodes
 = 
nodes
.
√xt
;Åmp_nodes != &nodes;Åmp_nodes =Åmp_nodes->next) {

352 i‡(
	`memcmp
(&
tmp_nodes
->
addr
, 
node
, 
ùsize
) == 0) {

353 
m¥s
 = 
tmp_nodes
->
m¥
.
√xt
; mprs != &tmp_nodes->mpr; mprs = mprs->next) {

354 i‡(
	`memcmp
(&
m¥s
->
addr
, 
m¥
, 
ùsize
) == 0)

362 i‡((
tmp_m¥
 = 
	`mÆloc
((
m¥
))) == 0) {

363 
	`Ârötf
(
°dîr
, "OUT OF MEMORY\n");

364 
	`exô
(1);

367 
	`mem˝y
(&
tmp_m¥
->
addr
, 
m¥
, 
ùsize
);

369 
	`gëtimeofday
(&
now
, (
timez⁄e
 *)
NULL
);

370 
	`timîadd
(&
now
, 
tmp_timî
, &
tmp_m¥
->
timî
);

373 
tmp_nodes
->
m¥
.
√xt
->
¥ev
 = 
tmp_m¥
;

374 
tmp_m¥
->
√xt
 = 
tmp_nodes
->
m¥
.next;

375 
tmp_nodes
->
m¥
.
√xt
 = 
tmp_m¥
;

376 
tmp_m¥
->
¥ev
 = &
tmp_nodes
->
m¥
;

378 
	`upd©e_nodes_li°
(
tmp_nodes
);

385 
	}
}

388 
	$ªmove_node
(
node
 *node)

390 
h«
 *
tmp_h«
, *
tmp_h«2
;

391 
mid
 *
tmp_mid
, *
tmp_mid2
;

392 
m¥
 *
tmp_m¥
, *
tmp_m¥2
;

394 
	`¥ötf
("Removênodê%s\n", 
	`ù_to_°rög
(&
node
->
addr
));

396 
tmp_h«
 = 
node
->
h«
.
√xt
;

397 
tmp_h«
 !&
node
->
h«
) {

398 
tmp_h«2
 = 
tmp_h«
;

399 
tmp_h«
 =Åmp_h«->
√xt
;

400 
	`‰ì
(
tmp_h«2
);

402 
tmp_m¥
 = 
node
->
m¥
.
√xt
;

403 
tmp_m¥
 !&
node
->
m¥
) {

404 
tmp_m¥2
 = 
tmp_m¥
;

405 
tmp_m¥
 =Åmp_m¥->
√xt
;

406 
	`‰ì
(
tmp_m¥2
);

408 
tmp_mid
 = 
node
->
mid
.
√xt
;

409 
tmp_mid
 !&
node
->
mid
) {

410 
tmp_mid2
 = 
tmp_mid
;

411 
tmp_mid
 =Åmp_mid->
√xt
;

412 
	`‰ì
(
tmp_mid2
);

416 
	`ªmove_nodes_li°
(&
node
->
addr
);

419 
node
->
¥ev
->
√xt
 =Çode->next;

420 
node
->
√xt
->
¥ev
 =Çode->prev;

422 
	`‰ì
(
node
);

425 
	}
}

432 
	$ªmove_node_addr
(
ﬁ§_ù_addr
 *
node
)

434 
node
 *
tmp_nodes
;

435 
h«
 *
tmp_h«
, *
tmp_h«2
;

436 
mid
 *
tmp_mid
, *
tmp_mid2
;

437 
m¥
 *
tmp_m¥
, *
tmp_m¥2
;

439 
	`¥ötf
("Removênodê%s\n", 
	`ù_to_°rög
(
node
));

441 
tmp_nodes
 = 
nodes
.
√xt
;

443 
tmp_nodes
 !&
nodes
) {

444 i‡(
	`memcmp
(&
tmp_nodes
->
addr
, 
node
, 
ùsize
) == 0) {

445 
	`¥ötf
("(2)DñëögÇodê%s\n", 
	`ù_to_°rög
((
ﬁ§_ù_addr
 *)&
tmp_nodes
->
addr
));

447 
tmp_h«
 = 
tmp_nodes
->
h«
.
√xt
;

448 
tmp_h«
 !&
tmp_nodes
->
h«
) {

449 
tmp_h«2
 = 
tmp_h«
;

450 
tmp_h«
 =Åmp_h«->
√xt
;

451 
	`‰ì
(
tmp_h«2
);

453 
tmp_m¥
 = 
tmp_nodes
->
m¥
.
√xt
;

454 
tmp_m¥
 !&
tmp_nodes
->
m¥
) {

455 
tmp_m¥2
 = 
tmp_m¥
;

456 
tmp_m¥
 =Åmp_m¥->
√xt
;

457 
	`‰ì
(
tmp_m¥2
);

459 
tmp_mid
 = 
tmp_nodes
->
mid
.
√xt
;

460 
tmp_mid
 !&
tmp_nodes
->
mid
) {

461 
tmp_mid2
 = 
tmp_mid
;

462 
tmp_mid
 =Åmp_mid->
√xt
;

463 
	`‰ì
(
tmp_mid2
);

467 
	`ªmove_nodes_li°
(&
tmp_nodes
->
addr
);

470 
tmp_nodes
->
¥ev
->
√xt
 =Åmp_nodes->next;

471 
tmp_nodes
->
√xt
->
¥ev
 =Åmp_nodes->prev;

473 
	`‰ì
(
tmp_nodes
);

478 
tmp_nodes
 =Åmp_nodes->
√xt
;

482 
	}
}

484 
node
 *

485 
	$föd_node
(*
ù
)

487 
node
 *
tmp_nodes
;

489 
tmp_nodes
 = 
nodes
.
√xt
;Åmp_nodes != &nodes;Åmp_nodes =Åmp_nodes->next) {

490 i‡(
	`°rcmp
(
	`ù_to_°rög
((
ﬁ§_ù_addr
 *)&
tmp_nodes
->
addr
), 
ù
) == 0)

491  
tmp_nodes
;

494  
NULL
;

495 
	}
}

497 
node
 *

498 
	$föd_node_t
(
ﬁ§_ù_addr
 *
ù
)

500 
node
 *
tmp_nodes
;

502 
tmp_nodes
 = 
nodes
.
√xt
;Åmp_nodes != &nodes;Åmp_nodes =Åmp_nodes->next) {

503 i‡(
	`memcmp
(&
tmp_nodes
->
addr
, 
ù
, 
ùsize
) == 0)

504  
tmp_nodes
;

508 
	}
}

513 
göt


514 
	$time_out_nodes
(
gpoöãr
 
d©a
)

516 
node
 *
tmp_nodes
;

517 
node
 *
node_to_dñëe
;

520 i‡(
timeouts
) {

521 
timeouts
--;

526 
	`gëtimeofday
(&
now
, (
timez⁄e
 *)
NULL
);

528 
tmp_nodes
 = 
nodes
.
√xt
;

530 
tmp_nodes
 !&
nodes
) {

532 i‡(
	`timîcmp
(&
tmp_nodes
->
timî
, &
now
, <)) {

533 
	`¥ötf
("Nodê%†timed out...\n", 
	`ù_to_°rög
((
ﬁ§_ù_addr
 *)&
tmp_nodes
->
addr
));

534 
node_to_dñëe
 = 
tmp_nodes
;

536 
tmp_nodes
 =Åmp_nodes->
√xt
;

538 
	`ªmove_nodes_li°
(&
node_to_dñëe
->
addr
);

539 
	`ªmove_node
(
node_to_dñëe
);

541 
tmp_nodes
 =Åmp_nodes->
√xt
;

545 
	}
}

554 
	$time_out_m¥s
(
ﬁ§_ù_addr
 *
node
)

557 
node
 *
tmp_nodes
;

558 
m¥
 *
m¥_to_dñëe
;

559 
m¥
 *
tmp_m¥
;

561 
	`gëtimeofday
(&
now
, (
timez⁄e
 *)
NULL
);

569 
tmp_nodes
 = 
nodes
.
√xt
;Åmp_nodes != &nodes;Åmp_nodes =Åmp_nodes->next) {

570 i‡(
	`memcmp
(&
tmp_nodes
->
addr
, 
node
, 
ùsize
) == 0) {

571 
tmp_m¥
 = 
tmp_nodes
->
m¥
.
√xt
;

573 
tmp_m¥
 !&
tmp_nodes
->
m¥
) {

574 i‡(
	`timîcmp
(&
tmp_m¥
->
timî
, &
now
, <)) {

575 
	`¥ötf
("MPR %†OF NODE ", 
	`ù_to_°rög
((
ﬁ§_ù_addr
 *)&
tmp_m¥
->
addr
));

576 
	`¥ötf
("%†TIMIED OUT ", 
	`ù_to_°rög
((
ﬁ§_ù_addr
 *)&
tmp_nodes
->
addr
));

577 
	`fÊush
(
°dout
);

579 
m¥_to_dñëe
 = 
tmp_m¥
;

580 
tmp_m¥
 =Åmp_m¥->
√xt
;

583 
m¥_to_dñëe
->
√xt
->
¥ev
 = mpr_to_delete->prev;

584 
m¥_to_dñëe
->
¥ev
->
√xt
 = mpr_to_delete->next;

586 
	`‰ì
(
m¥_to_dñëe
);

588 
tmp_m¥
 =Åmp_m¥->
√xt
;

596 
	}
}

599 
	$öô_timî
(
ﬁ§_u32_t
 
time_vÆue
, 
timevÆ
 *
hﬁd_timî
)

601 
ﬁ§_u16_t
 
time_vÆue_£c
 = 0;

602 
ﬁ§_u16_t
 
time_vÆue_m£c
 = 0;

604 
time_vÆue_£c
 = 
time_vÆue
 / 1000;

605 
time_vÆue_m£c
 = 
time_vÆue
 - (
time_vÆue_£c
 * 1000);

607 
hﬁd_timî
->
tv_£c
 = 
time_vÆue_£c
;

608 
hﬁd_timî
->
tv_u£c
 = 
time_vÆue_m£c
 * 1000;

610 
	}
}

627 
	$me_to_doubÀ
(
ﬁ§_u8_t
 
me
)

629 
a
 = 
me
 >> 4;

630 
b
 = 
me
 - 
a
 * 16;

631  ()(
VTIME_SCALE_FACTOR
 * (1 + ()
a
 / 16Ë* ()
	`pow
(2, 
b
));

632 
	}
}

	@gui/linux-gtk/src/nodes.h

30 
	~<sys/time.h
>

33 
timevÆ
 
	gnow
;

34 
timevÆ
 
	ghﬁd_time_nodes
;

37 
node
 
	gnodes
;

39 
node
 *
ö£π_node
(nodê*, 
ﬁ§_u8_t
);

41 
ªmove_node
(
node
 *);

43 
ªmove_node_addr
(
ﬁ§_ù_addr
 *);

45 
me_to_doubÀ
(
ﬁ§_u8_t
);

	@gui/linux-gtk/src/olsr.c

24 
	~"comm⁄.h
"

	@gui/linux-gtk/src/olsr_protocol.h

29 #i‚de‡
_PROTOCOLS_OLSR_H


30 
	#_PROTOCOLS_OLSR_H


	)

34 
	#OLSRPORT
 698

	)

38 
	#OLSR_IPV6_MULTICAST_ADDR
 "ff05::15"

	)

41 
	~<sys/ty≥s.h
>

43 #ifde‡
WIN32


44 
	tﬁ§_u8_t
;

45 
	tﬁ§_u16_t
;

46 
	tﬁ§_u32_t
;

47 
	tﬁ§_8_t
;

48 
	tﬁ§_16_t
;

49 
	tﬁ§_32_t
;

51 
u_öt8_t
 
	tﬁ§_u8_t
;

52 
u_öt16_t
 
	tﬁ§_u16_t
;

53 
u_öt32_t
 
	tﬁ§_u32_t
;

54 
öt8_t
 
	tﬁ§_8_t
;

55 
öt16_t
 
	tﬁ§_16_t
;

56 
öt32_t
 
	tﬁ§_32_t
;

60 
	~<√töë/ö.h
>

62 
	uﬁ§_ù_addr
 {

63 
ö_addr
 
	mv4
;

64 
ö6_addr
 
	mv6
;

71 
	#HELLO_INTERVAL
 2

	)

72 
	#HELLO_INTERVAL_NW
 
HELLO_INTERVAL
 * 2

	)

73 
	#REFRESH_INTERVAL
 2

	)

74 
	#TC_INTERVAL
 5

	)

75 
	#MID_INTERVAL
 
TC_INTERVAL


	)

76 
	#HNA_INTERVAL
 
TC_INTERVAL


	)

82 
	#NEIGHB_HOLD_TIME
 3 * 
REFRESH_INTERVAL


	)

85 
	#NEIGHB_HOLD_TIME_NW
 
NEIGHB_HOLD_TIME
 * 2

	)

86 
	#TOP_HOLD_TIME
 3 * 
TC_INTERVAL


	)

87 
	#DUP_HOLD_TIME
 30

	)

88 
	#MID_HOLD_TIME
 3 * 
MID_INTERVAL


	)

89 
	#HNA_HOLD_TIME
 3 * 
HNA_INTERVAL


	)

95 
	#VTIME_SCALE_FACTOR
 0.0625

	)

101 
	#HELLO_MESSAGE
 1

	)

102 
	#TC_MESSAGE
 2

	)

103 
	#MID_MESSAGE
 3

	)

104 
	#HNA_MESSAGE
 4

	)

105 
	#MAX_MESSAGE
 4

	)

111 
	#UNSPEC_LINK
 0

	)

112 
	#ASYM_LINK
 1

	)

113 
	#SYM_LINK
 2

	)

114 
	#LOST_LINK
 3

	)

115 
	#MAX_LINK
 3

	)

121 
	#NOT_NEIGH
 0

	)

122 
	#SYM_NEIGH
 1

	)

123 
	#MPR_NEIGH
 2

	)

124 
	#MAX_NEIGH
 2

	)

130 
	#NOT_SYM
 0

	)

131 
	#SYM
 1

	)

137 
	#HYST_THRESHOLD_HIGH
 0.8

	)

138 
	#HYST_THRESHOLD_LOW
 0.3

	)

139 
	#HYST_SCALING
 0.5

	)

145 
	#WILL_NEVER
 0

	)

146 
	#WILL_LOW
 1

	)

147 
	#WILL_DEFAULT
 3

	)

148 
	#WILL_HIGH
 6

	)

149 
	#WILL_ALWAYS
 7

	)

155 
	#TC_REDUNDANCY
 0

	)

156 
	#MPR_COVERAGE
 1

	)

157 
	#MAXJITTER
 
HELLO_INTERVAL
 / 4

	)

158 
	#MAX_TTL
 0xff

	)

166 
	#MAXVALUE
 0xFFFF

	)

169 
	#SEQNO_GREATER_THAN
(
s1
, 
s2
) \

170 (((
s1
 > 
s2
Ë&& (s1 - s2 <(
MAXVALUE
/2))) \

171 || ((
s2
 > 
s1
Ë&& (s2 - s1 > (
MAXVALUE
/2))))

	)

179 
	#CREATE_LINK_CODE
(
°©us
, 
lök
Ë÷ök | (°©us<<2))

	)

181 
	#EXTRACT_STATUS
(
lök_code
Ë(÷ök_codê& 0xC)>>2)

	)

183 
	#EXTRACT_LINK
(
lök_code
Ë÷ök_codê& 0x3)

	)

196 
	shñlöfo
 {

197 
ﬁ§_u8_t
 
	mlök_code
;

198 
ﬁ§_u8_t
 
	mª£rved
;

199 
ﬁ§_u16_t
 
	msize
;

200 
ﬁ§_u32_t
 
	m√igh_addr
[1];

203 
	shñlomsg
 {

204 
ﬁ§_u16_t
 
	mª£rved
;

205 
ﬁ§_u8_t
 
	mhtime
;

206 
ﬁ§_u8_t
 
	mwûlög√ss
;

207 
hñlöfo
 
	mhñl_öfo
[1];

214 
	shñlöfo6
 {

215 
ﬁ§_u8_t
 
	mlök_code
;

216 
ﬁ§_u8_t
 
	mª£rved
;

217 
ﬁ§_u16_t
 
	msize
;

218 
ö6_addr
 
	m√igh_addr
[1];

221 
	shñlomsg6
 {

222 
ﬁ§_u16_t
 
	mª£rved
;

223 
ﬁ§_u8_t
 
	mhtime
;

224 
ﬁ§_u8_t
 
	mwûlög√ss
;

225 
hñlöfo6
 
	mhñl_öfo
[1];

232 
	s√igh_öfo
 {

233 
ﬁ§_u32_t
 
	maddr
;

236 
	sﬁ§_tcmsg
 {

237 
ﬁ§_u16_t
 
	m™¢
;

238 
ﬁ§_u16_t
 
	mª£rved
;

239 
√igh_öfo
 
	m√igh
[1];

246 
	s√igh_öfo6
 {

247 
ö6_addr
 
	maddr
;

250 
	sﬁ§_tcmsg6
 {

251 
ﬁ§_u16_t
 
	m™¢
;

252 
ﬁ§_u16_t
 
	mª£rved
;

253 
√igh_öfo6
 
	m√igh
[1];

265 
	smidaddr
 {

266 
ﬁ§_u32_t
 
	maddr
;

269 
	smidmsg
 {

270 
midaddr
 
	mmid_addr
[1];

276 
	smidaddr6
 {

277 
ö6_addr
 
	maddr
;

280 
	smidmsg6
 {

281 
midaddr6
 
	mmid_addr
[1];

287 
	sh«∑ú
 {

288 
ﬁ§_u32_t
 
	maddr
;

289 
ﬁ§_u32_t
 
	m√tmask
;

292 
	sh«msg
 {

293 
h«∑ú
 
	mh«_√t
[1];

300 
	sh«∑ú6
 {

301 
ö6_addr
 
	maddr
;

302 
ö6_addr
 
	m√tmask
;

305 
	sh«msg6
 {

306 
h«∑ú6
 
	mh«_√t
[1];

313 
	sﬁ§msg
 {

314 
ﬁ§_u8_t
 
	mﬁ§_msgty≥
;

315 
ﬁ§_u8_t
 
	mﬁ§_vtime
;

316 
ﬁ§_u16_t
 
	mﬁ§_msgsize
;

317 
ﬁ§_u32_t
 
	m‹igö©‹
;

318 
ﬁ§_u8_t
 
	mâl
;

319 
ﬁ§_u8_t
 
	mh›˙t
;

320 
ﬁ§_u16_t
 
	m£qno
;

323 
hñlomsg
 
	mhñlo
;

324 
ﬁ§_tcmsg
 
	mtc
;

325 
h«msg
 
	mh«
;

326 
midmsg
 
	mmid
;

327 } 
	mmesßge
;

335 
	sﬁ§msg6
 {

336 
ﬁ§_u8_t
 
	mﬁ§_msgty≥
;

337 
ﬁ§_u8_t
 
	mﬁ§_vtime
;

338 
ﬁ§_u16_t
 
	mﬁ§_msgsize
;

339 
ö6_addr
 
	m‹igö©‹
;

340 
ﬁ§_u8_t
 
	mâl
;

341 
ﬁ§_u8_t
 
	mh›˙t
;

342 
ﬁ§_u16_t
 
	m£qno
;

345 
hñlomsg6
 
	mhñlo
;

346 
ﬁ§_tcmsg6
 
	mtc
;

347 
h«msg6
 
	mh«
;

348 
midmsg6
 
	mmid
;

349 } 
	mmesßge
;

357 
	sﬁ§
 {

358 
ﬁ§_u16_t
 
	mﬁ§_∑ckÀn
;

359 
ﬁ§_u16_t
 
	mﬁ§_£qno
;

360 
ﬁ§msg
 
	mﬁ§_msg
[1];

363 
	sﬁ§6
 {

364 
ﬁ§_u16_t
 
	mﬁ§_∑ckÀn
;

365 
ﬁ§_u16_t
 
	mﬁ§_£qno
;

366 
ﬁ§msg6
 
	mﬁ§_msg
[1];

371 
	uﬁ§_mesßge
 {

372 
ﬁ§msg
 
	mv4
;

373 
ﬁ§msg6
 
	mv6
;

376 
	uﬁ§_∑ckë
 {

377 
ﬁ§
 
	mv4
;

378 
ﬁ§6
 
	mv6
;

	@gui/linux-gtk/src/packet.c

31 
	~"comm⁄.h
"

32 
	~"∑ckë.h
"

34 
∑cknode
 *
	g∑ckës
 = 
NULL
;

35 
	gno_∑ckës
 = 0;

42 
	$add_∑ckë_to_buf„r
(
ﬁ§_mesßge
 *
p
, 
size
)

44 
∑cknode
 *
tmp
;

48 i‡(!
∑ckës
) {

50 
∑ckës
 = 
	`mÆloc
((
∑cknode
));

51 
∑ckës
->
∑ckë
 = 
	`mÆloc
(
size
);

52 
	`mem˝y
(
∑ckës
->
∑ckë
, 
p
, 
size
);

53 
∑ckës
->
√xt
 = 
NULL
;

54 
no_∑ckës
++;

58 i‡(
no_∑ckës
 < 
MAXPACKS
) {

60 
tmp
 = 
∑ckës
;

61 
∑ckës
 = 
	`mÆloc
((
∑cknode
));

62 
∑ckës
->
∑ckë
 = 
	`mÆloc
(
size
);

63 
	`mem˝y
(
∑ckës
->
∑ckë
, 
p
, 
size
);

64 
∑ckës
->
√xt
 = 
tmp
;

65 
no_∑ckës
++;

71 
tmp
 = 
∑ckës
;

73 
tmp
->
√xt
->next) {

74 
tmp
 =Åmp->
√xt
;

77 
	`‰ì
(
tmp
->
√xt
->
∑ckë
);

78 
	`‰ì
(
tmp
->
√xt
);

79 
tmp
->
√xt
 = 
NULL
;

82 
tmp
 = 
∑ckës
;

83 
∑ckës
 = 
	`mÆloc
((
∑cknode
));

84 
∑ckës
->
∑ckë
 = 
	`mÆloc
(
size
);

85 
	`mem˝y
(
∑ckës
->
∑ckë
, 
p
, 
size
);

86 
∑ckës
->
√xt
 = 
tmp
;

92 
	}
}

97 
ﬁ§_mesßge
 *

98 
	$gë_∑ckë
(
ödex
)

100 
i
 = 0;

101 
∑cknode
 *
tmp
;

103 i‡(
ödex
 > 
MAXPACKS
)

106 i‡(
ödex
 == 0)

107  
∑ckës
->
∑ckë
;

109 
tmp
 = 
∑ckës
;

111 
i
 !
ödex
) {

112 
tmp
 =Åmp->
√xt
;

113 
i
++;

115  
tmp
->
∑ckë
;

117 
	}
}

	@gui/linux-gtk/src/packet.h

31 #i‚de‡
_PACKET_H


32 
	#_PACKET_H


	)

34 
	s∑cknode
 {

35 
ﬁ§_mesßge
 *
	m∑ckë
;

36 
∑cknode
 *
	m√xt
;

43 
	uhñlo_mesßge
 {

44 
hñlomsg
 
	mv4
;

45 
hñlomsg6
 
	mv6
;

48 
	utc_mesßge
 {

49 
ﬁ§_tcmsg
 
	mv4
;

50 
ﬁ§_tcmsg6
 
	mv6
;

53 
	umid_mesßge
 {

54 
midmsg
 
	mv4
;

55 
midmsg6
 
	mv6
;

58 
	uh«_mesßge
 {

59 
h«msg
 
	mv4
;

60 
h«msg6
 
	mv6
;

	@gui/linux-gtk/src/pixmaps.h

24 
	~"pixm≠s/logo.xpm
"

	@gui/linux-gtk/src/routes.c

32 
	~"rouãs.h
"

35 
	$öô_rouã_íåõs
()

37 
rouã_cou¡
 = 0;

39 
rouã_£t
.
√xt
 = &route_set;

40 
rouã_£t
.
¥ev
 = &route_set;

43 
	}
}

46 
	$add_rouã_íåy
(
rouã_íåy
 *
íåy
)

48 
rouã_íåy
 *
√w_íåy
;

50 i‡((
√w_íåy
 = 
	`mÆloc
((
rouã_íåy
))) == 0) {

51 
	`Ârötf
(
°dîr
, "OUT OF MEMORY!\n");

52 
	`exô
(1);

56 
√w_íåy
->
√xt
 = 
rouã_£t
.next;

57 
rouã_£t
.
√xt
->
¥ev
 = 
√w_íåy
;

58 
rouã_£t
.
√xt
 = 
√w_íåy
;

59 
√w_íåy
->
¥ev
 = &
rouã_£t
;

61 
rouã_cou¡
++;

65 
	}
}

68 
	$dñ_rouã_íåy
(
rouã_íåy
 *
íåy
)

71 
rouã_cou¡
--;

74 
	}
}

	@gui/linux-gtk/src/routes.h

32 #i‚de‡
_OLSRD_FRONTEND_ROUTE


33 
	#_OLSRD_FRONTEND_ROUTE


	)

35 
	~"comm⁄.h
"

37 
	#MAX_IF_NAMESIZ
 10

	)

39 
	srouã_íåy
 {

40 
ﬁ§_ù_addr
 
	mgw
;

41 
ﬁ§_ù_addr
 
	md°
;

42 
ﬁ§_u16_t
 
	mh›˙t
;

43 
	mif_«me
[
MAX_IF_NAMESIZ
];

44 
rouã_íåy
 *
	m√xt
;

45 
rouã_íåy
 *
	m¥ev
;

49 
rouã_íåy
 
	grouã_£t
;

52 
ﬁ§_u32_t
 
	grouã_cou¡
;

56 
öô_rouã_íåõs
();

58 
add_rouã_íåy
(
rouã_íåy
 *);

60 
dñ_rouã_íåy
(
rouã_íåy
 *);

	@gui/win32/Main/Frontend.cpp

41 
	~"°dafx.h
"

42 
	~"Fr⁄ãnd.h
"

43 
	~"Fr⁄ãndDlg.h
"

44 
	~"TøyIc⁄.h
"

46 #ifde‡
_DEBUG


47 
	#√w
 
DEBUG_NEW


	)

48 #unde‡
THIS_FILE


49 
	gTHIS_FILE
[] = 
__FILE__
;

52 
	$BEGIN_MESSAGE_MAP
(
CFr⁄ãndAµ
, 
CWöAµ
)

55 
	`ON_COMMAND
(
ID_HELP
, 
CWöAµ
::
OnHñp
)

56 
	$END_MESSAGE_MAP
()

58 
CFr⁄ãndAµ
::
	$CFr⁄ãndAµ
()

60 
	}
}

62 
CFr⁄ãndAµ
 
theAµ
;

64 
	$SëE«bÀRedúKey
(
New
)

66 
HKEY
 
Key
;

67 
Ty≥
;

68 
Lí
;

69 
Old
;

71 i‡(::
	`RegO≥nKeyEx
(
HKEY_LOCAL_MACHINE
,

73 0, 
KEY_READ
 | 
KEY_WRITE
, &
Key
Ë!
ERROR_SUCCESS
)

76 
Lí
 =  (
Old
);

78 i‡(::
	`RegQuîyVÆueEx
(
Key
, "E«bÀICMPRedúe˘", 
NULL
, &
Ty≥
,

79 (*)&
Old
, &
Lí
Ë!
ERROR_SUCCESS
 ||

80 
Ty≥
 !
REG_DWORD
)

81 
Old
 = 1;

83 i‡(::
	`RegSëVÆueEx
(
Key
, "E«bÀICMPRedúe˘", 0, 
REG_DWORD
,

84 (*)&
New
,  (New)))

86 ::
	`RegClo£Key
(
Key
);

90 ::
	`RegClo£Key
(
Key
);

91  
Old
;

92 
	}
}

94 
BOOL
 
	gCFr⁄ãndAµ
::
	$InôIn°™˚
()

96 
Res
;

98 
CComm™dLöeInfo
 
CmdLöeInfo
;

99 
	`P¨£Comm™dLöe
(
CmdLöeInfo
);

101 
CFr⁄ãndDlg
 
dlg
;

103 
åay_ic⁄
 = 
√w
 
	`TøyIc⁄
–
dlg
, 
	`AfxGëIn°™˚H™dÀ
() );

105 
dlg
.
C⁄figFûe
 = 
CmdLöeInfo
.
m_°rFûeName
;

107 
m_pMaöWnd
 = &
dlg
;

109 
Res
 = 
	`SëE«bÀRedúKey
(0);

111 i‡(
Res
 == 1)

113 
Res
 = 
	`AfxMesßgeBox
("- WARNING -\n\n"

118 " (PÀa£ say \"Yes\".)", 
MB_YESNO
 | 
MB_ICONEXCLAMATION
);

120 i‡(
Res
 =
IDYES
)

122 
HANDLE
 
Proc
;

123 
HMODULE
 
Lib
;

124 
	`BOOL
 (*
O≥n
)(
HANDLE
, 
DWORD
, HANDLE *);

125 
	`BOOL
 (*
Lookup
)(*, *, 
LUID
 *);

126 
	`BOOL
 (*
Adju°
)(
HANDLE
, 
BOOL
, 
TOKEN_PRIVILEGES
 *, 
DWORD
,

127 
TOKEN_PRIVILEGES
 *, 
DWORD
 *);

128 
HANDLE
 
Tokí
;

130 
Proc
 = ::
	`GëCuºítPro˚ss
();

132 
Lib
 = ::
	`LﬂdLibøry
("advapi32.dll");

134 i‡(
Lib
 !
NULL
)

136 
O≥n
 = (
	`BOOL
 (*)(
HANDLE
, 
DWORD
, HANDLE *))

137 ::
	`GëProcAddªss
(
Lib
, "OpenProcessToken");

139 
Lookup
 = (
	`BOOL
 (*)(*, *, 
LUID
 *))

140 ::
	`GëProcAddªss
(
Lib
, "LookupPrivilegeValueA");

142 
Adju°
 = (
	`BOOL
 (*)(
HANDLE
, 
BOOL
, 
TOKEN_PRIVILEGES
 *, 
DWORD
,

143 
TOKEN_PRIVILEGES
 *, 
DWORD
 *))

144 ::
	`GëProcAddªss
(
Lib
, "AdjustTokenPrivileges");

146 i‡(
O≥n
 !
NULL
 && 
Lookup
 !NULL && 
Adju°
 != NULL)

150 
DWORD
 
Cou¡
;

151 
LUID_AND_ATTRIBUTES
 
Priv
;

153 
TokPriv
;

155 
Proc
 = ::
	`GëCuºítPro˚ss
();

157 i‡(!
	`O≥n
(
Proc
, 
TOKEN_ALL_ACCESS
, &
Tokí
))

158 
	`AfxMesßgeBox
("OpenProcessToken() failed.");

160 i‡(!
	`Lookup
("", "SeShutdownPrivûege", &
TokPriv
.
Priv
.
Luid
))

161 
	`AfxMesßgeBox
("LookupPrivilegeValue() failed.");

165 
TokPriv
.
Cou¡
 = 1;

166 
TokPriv
.
Priv
.
Aâribuãs
 = 
SE_PRIVILEGE_ENABLED
;

168 i‡(!
	`Adju°
(
Tokí
, 
FALSE
, (
TOKEN_PRIVILEGES
 *)&
TokPriv
,

169 0, 
NULL
, NULL))

170 
	`AfxMesßgeBox
("AdjustTokenPrivilege() failed.");

174 ::
	`FªeLibøry
(
Lib
);

177 ::
	`ExôWödowsEx
(
EWX_REBOOT
, 0);

178 ::
	`Tîmö©ePro˚ss
(
Proc
, 0);

182 
	`Redúe˘StdH™dÀs
();

184 
dlg
.
	`DoModÆ
();

186  
FALSE
;

187 
	}
}

189 
	gCFr⁄ãndAµ
::
	$Redúe˘ThªadFunc
()

191 
Buff
[1000];

192 
Lí
;

193 
Le·
, 
Right
;

194 
CSåög
 
Löe
;

195 
CSåög
 
I¡
;

197 ::
	`RódFûe
(
OutRód
, 
Buff
,  (BuffË- 1, (*)&
Lí
, 
NULL
))

199 i‡(
Lí
 == 0)

202 
Le·
 = 0;

204 
Right
 = 0; Righà< 
Lí
; Right++)

206 i‡(
Buff
[
Right
] != 13)

207 
Buff
[
Le·
++] = Buff[
Right
];

210 
Lí
 = 
Le·
;

212 
Le·
 = 0;

214 
Right
 = 0; Righà< 
Lí
; Right++)

216 i‡(
Buff
[
Right
] == 10)

218 
Buff
[
Right
] = 0;

219 
Löe
 +(
Buff
 + 
Le·
);

221 
	`AfxMesßgeBox
(
Löe
);

223 
Löe
.
	`Em±y
();

225 
Le·
 = 
Right
 + 1;

229 
Buff
[
Right
] = 0;

230 
Löe
 +(
Buff
 + 
Le·
);

233 
	`AfxEndThªad
(0);

235 
	}
}

237 
	$Redúe˘ThªadStub
(*
Arg
)

239 
˛ass
 
CFr⁄ãndAµ
 *
This
;

241 
This
 = (
˛ass
 
CFr⁄ãndAµ
 *)
Arg
;

243  
This
->
	`Redúe˘ThªadFunc
();

244 
	}
}

246 
	sIoInfo


248 
HANDLE
 
	mH™d
;

249 
	mAâr
;

250 
	mBuff
;

251 #i‡
deföed
 
_MT


252 
	mFœg
;

253 
CRITICAL_SECTION
 
	mLock
;

257 "C" 
IoInfo
 *
__pioöfo
[];

259 
	gCFr⁄ãndAµ
::
	$Redúe˘StdH™dÀs
()

261 
SECURITY_ATTRIBUTES
 
SecAâr
;

262 
HANDLE
 
OutWrôe
;

263 
IoInfo
 *
Info
;

265 
SecAâr
.
nLígth
 =  (
SECURITY_ATTRIBUTES
);

266 
SecAâr
.
ÕSecurôyDes¸ùt‹
 = 
NULL
;

267 
SecAâr
.
bInhîôH™dÀ
 = 
TRUE
;

269 i‡(!::
	`Cª©ePùe
(&
OutRód
, &
OutWrôe
, &
SecAâr
, 0))

271 
	`AfxMesßgeBox
("Cannot create stdoutÖipe.");

275 
	`AfxBegöThªad
(
Redúe˘ThªadStub
, (*)
this
);

277 
Info
 = 
__pioöfo
[0];

282 
Info
[2].
H™d
 = 
OutWrôe
;

283 
Info
[2].
Aâr
 = 0x89;

286 
°dîr
->
_fûe
 = 2;

288 
	`wö32_°dio_hack
(()
OutWrôe
);

291 
	}
}

	@gui/win32/Main/Frontend.h

42 #i‡!
deföed
(
AFX_FRONTEND_H__8033A41F_6FDC_4054_A582_AB7B6AC5EEAE__INCLUDED_
)

43 
	#AFX_FRONTEND_H__8033A41F_6FDC_4054_A582_AB7B6AC5EEAE__INCLUDED_


	)

45 #i‡
_MSC_VER
 > 1000

46 #¥agm®
⁄˚


49 #i‚de‡
__AFXWIN_H__


50 #îr‹ 
ö˛ude
 '°dafx.h' 
bef‹e
 
ö˛udög
 
this
 
fûe
 
PCH


53 
	~"ªsour˚.h
"

55 
˛ass
 
	gTøyIc⁄
;

57 ˛as†
	cCFr⁄ãndAµ
:
public
 
CWöAµ
 {

58 
public
:

59 
CFr⁄ãndAµ
();

61 
Redúe˘StdH™dÀs
();

62 
Redúe˘ThªadFunc
();

64 
HANDLE
 
	mOutRód
;

65 
TøyIc⁄
 *
	måay_ic⁄
;

68 
	mpublic
:

69 
vútuÆ
 
BOOL
 
InôIn°™˚
();

74 
DECLARE_MESSAGE_MAP
()};

	@gui/win32/Main/FrontendDlg.cpp

41 
	~"°dafx.h
"

42 
	~"Fr⁄ãnd.h
"

43 
	~"Fr⁄ãndDlg.h
"

44 
	~"TøyIc⁄.h
"

46 
	~"Ipc.h
"

48 #ifde‡
_DEBUG


49 
	#√w
 
DEBUG_NEW


	)

50 #unde‡
THIS_FILE


51 
	gTHIS_FILE
[] = 
__FILE__
;

54 
	gCFr⁄ãndDlg
::
	$CFr⁄ãndDlg
(
CWnd
* 
pP¨ít
)

55 : 
	`CDülog
(
CFr⁄ãndDlg
::
IDD
, 
pP¨ít
)

60 
Evít
 = 
	`Cª©eEvít
(
NULL
, 
FALSE
, FALSE, "TheOlsrdShimEvent");

62 
LogThªad
 = 
NULL
;

63 
NëThªad
 = 
NULL
;

64 
	}
}

66 
	gCFr⁄ãndDlg
::
	$DoD©aExch™ge
(
CD©aExch™ge
* 
pDX
)

68 
CDülog
::
	`DoD©aExch™ge
(
pDX
);

70 
	`DDX_C⁄åﬁ
(
pDX
, 
IDC_BUTTON2
, 
m_St›Buâ⁄
);

71 
	`DDX_C⁄åﬁ
(
pDX
, 
IDC_BUTTON1
, 
m_SèπBuâ⁄
);

72 
	`DDX_C⁄åﬁ
(
pDX
, 
IDC_TAB1
, 
m_TabCål
);

74 
	}
}

76 
	$BEGIN_MESSAGE_MAP
(
CFr⁄ãndDlg
, 
CDülog
)

78 
	$ON_BN_CLICKED
(
IDC_BUTTON1
, 
OnSèπBuâ⁄
)

79 
	$ON_BN_CLICKED
(
IDC_BUTTON2
, 
OnSt›Buâ⁄
)

80 
	$ON_BN_CLICKED
(
IDC_BUTTON3
, 
OnExôBuâ⁄
)

81 
	$ON_BN_CLICKED
(
IDOK
, 
OnOK
)

82 
	$ON_BN_CLICKED
(
IDCANCEL
, 
OnC™˚l
)

84 
	$END_MESSAGE_MAP
()

87 
	$HexDump
(*
Mem
, 
Lí
)

89 
Buff
[10000];

90 
i
, 
k
;

91 *
WÆkî
 = 
Buff
;

93 
i
 = 0; i < 
Lí
; i +
k
)

95 
WÆkî
 +
	`•rötf
(WÆkî, "%08x:", 
i
);

97 
k
 = 0; 
i
 + k < 
Lí
 && k < 16; k++)

98 
WÆkî
 +
	`•rötf
(WÆkî, " %02x", 
Mem
[
i
 + 
k
]);

100 
k
 < 16)

102 
WÆkî
 +
	`•rötf
(Walker, " ");

103 
k
++;

106 
WÆkî
 +
	`•rötf
(Walker, " ");

108 
k
 = 0; 
i
 + k < 
Lí
 && k < 16; k++)

109 i‡(
Mem
[
i
 + 
k
] < 32 || Mem[i + k] > 126)

110 
WÆkî
 +
	`•rötf
(Walker, ".");

113 
WÆkî
 +
	`•rötf
(WÆkî, "%c", 
Mem
[
i
 + 
k
]);

115 
WÆkî
 +
	`•rötf
(Walker, "\r\n");

118 ::
	`MesßgeBox
(
NULL
, 
Buff
, "HEXDUMP", 
MB_OK
);

119 
	}
}

124 
	gCFr⁄ãndDlg
::
	$Timeout
()

126 
POSITION
 
Pos
, 
Pos2
;

127 
˛ass
 
NodeE¡ry
 
E¡ry
;

128 
˛ass
 
M¥E¡ry
 MprEntry;

129 
˛ass
 
MidE¡ry
 MidEntry;

130 
˛ass
 
H«E¡ry
 HnaEntry;

132 
Re°¨t0
:

133 
Pos
 = 
NodeLi°
.
	`GëHódPosôi⁄
();

135 
Pos
 !
NULL
)

137 
E¡ry
 = 
NodeLi°
.
	`GëAt
(
Pos
);

139 i‡(
E¡ry
.
Timeout
 < 
Now
)

141 
NodeLi°
.
	`RemoveAt
(
Pos
);

142 
Re°¨t0
;

145 
Re°¨t1
:

146 
Pos2
 = 
E¡ry
.
M¥Li°
.
	`GëHódPosôi⁄
();

148 
Pos2
 !
NULL
)

150 
M¥E¡ry
 = 
E¡ry
.
M¥Li°
.
	`GëAt
(
Pos2
);

152 i‡(
M¥E¡ry
.
Timeout
 < 
Now
)

154 
E¡ry
.
M¥Li°
.
	`RemoveAt
(
Pos2
);

155 
Re°¨t1
;

158 
E¡ry
.
M¥Li°
.
	`GëNext
(
Pos2
);

161 
Re°¨t2
:

162 
Pos2
 = 
E¡ry
.
MidLi°
.
	`GëHódPosôi⁄
();

164 
Pos2
 !
NULL
)

166 
MidE¡ry
 = 
E¡ry
.
MidLi°
.
	`GëAt
(
Pos2
);

168 i‡(
MidE¡ry
.
Timeout
 < 
Now
)

170 
E¡ry
.
MidLi°
.
	`RemoveAt
(
Pos2
);

171 
Re°¨t2
;

174 
E¡ry
.
MidLi°
.
	`GëNext
(
Pos2
);

177 
Re°¨t3
:

178 
Pos2
 = 
E¡ry
.
H«Li°
.
	`GëHódPosôi⁄
();

180 
Pos2
 !
NULL
)

182 
H«E¡ry
 = 
E¡ry
.
H«Li°
.
	`GëAt
(
Pos2
);

184 i‡(
H«E¡ry
.
Timeout
 < 
Now
)

186 
E¡ry
.
H«Li°
.
	`RemoveAt
(
Pos2
);

187 
Re°¨t3
;

190 
E¡ry
.
H«Li°
.
	`GëNext
(
Pos2
);

193 
NodeLi°
.
	`GëNext
(
Pos
);

196 if–
NodeLi°
.
	`IsEm±y
() )

197 
TøyIc⁄
::
	`gëIn°™˚
()->
	`£tSètus
–TøyIc⁄::
ON
, "NoÇodes found" );

199 
TøyIc⁄
::
	`gëIn°™˚
()->
	`£tSètus
–TøyIc⁄::
CONNECTED
, "Nodesávailable" );

201 
m_TabCål
.
m_Dülog3
.
	`Upd©eNodeInfo
(
NodeLi°
);

202 
	}
}

204 
	$VTimeToI¡
(
VTime
)

206  ((0x10 | ((
VTime
 & 0xf0) >> 4)) << (VTime & 0x0f)) >> 8;

207 
	}
}

209 
	gCFr⁄ãndDlg
::
	$AddM¥
(
M¥Addr
, 
NodeAddr
,

210 
VTime
)

212 
˛ass
 
NodeE¡ry
 
NewE¡ry
;

213 
POSITION
 
Pos
;

214 
__öt64
 
Timeout
;

216 
Timeout
 = 
Now
 +

217 (
__öt64
)
	`VTimeToI¡
(
VTime
) * (__int64)10000000;

219 
	`AddNode
(
NodeAddr
, 
VTime
);

220 
	`AddNode
(
M¥Addr
, 
VTime
);

222 
NewE¡ry
.
Addr
 = 
NodeAddr
;

224 
Pos
 = 
NodeLi°
.
	`Föd
(
NewE¡ry
);

226 i‡(
Pos
 =
NULL
)

229 
˛ass
 
NodeE¡ry
 &
OldE¡ry
 = 
NodeLi°
.
	`GëAt
(
Pos
);

231 
OldE¡ry
.
	`AddM¥
(
M¥Addr
, 
Timeout
);

233 
m_TabCål
.
m_Dülog3
.
	`Upd©eNodeInfo
(
NodeLi°
);

234 
	}
}

236 
	gCFr⁄ãndDlg
::
	$AddMid
(
I¡Addr
, 
NodeAddr
,

237 
VTime
)

239 
˛ass
 
NodeE¡ry
 
NewE¡ry
;

240 
POSITION
 
Pos
;

241 
__öt64
 
Timeout
;

243 
Timeout
 = 
Now
 +

244 (
__öt64
)
	`VTimeToI¡
(
VTime
) * (__int64)10000000;

246 
	`AddNode
(
NodeAddr
, 
VTime
);

248 
NewE¡ry
.
Addr
 = 
NodeAddr
;

250 
Pos
 = 
NodeLi°
.
	`Föd
(
NewE¡ry
);

252 i‡(
Pos
 =
NULL
)

255 
˛ass
 
NodeE¡ry
 &
OldE¡ry
 = 
NodeLi°
.
	`GëAt
(
Pos
);

257 
OldE¡ry
.
	`AddMid
(
I¡Addr
, 
Timeout
);

259 
m_TabCål
.
m_Dülog3
.
	`Upd©eNodeInfo
(
NodeLi°
);

260 
	}
}

262 
	gCFr⁄ãndDlg
::
	$AddH«
(
NëAddr
, 
NëMask
,

263 
NodeAddr
, 
VTime
)

265 
˛ass
 
NodeE¡ry
 
NewE¡ry
;

266 
POSITION
 
Pos
;

267 
__öt64
 
Timeout
;

269 
Timeout
 = 
Now
 +

270 (
__öt64
)
	`VTimeToI¡
(
VTime
) * (__int64)10000000;

272 
	`AddNode
(
NodeAddr
, 
VTime
);

274 
NewE¡ry
.
Addr
 = 
NodeAddr
;

276 
Pos
 = 
NodeLi°
.
	`Föd
(
NewE¡ry
);

278 i‡(
Pos
 =
NULL
)

281 
˛ass
 
NodeE¡ry
 &
OldE¡ry
 = 
NodeLi°
.
	`GëAt
(
Pos
);

283 
OldE¡ry
.
	`AddH«
(
NëAddr
, 
NëMask
, 
Timeout
);

285 
m_TabCål
.
m_Dülog3
.
	`Upd©eNodeInfo
(
NodeLi°
);

286 
	}
}

288 
	gCFr⁄ãndDlg
::
	$AddNode
(
NodeAddr
, 
VTime
)

290 
˛ass
 
NodeE¡ry
 
NewE¡ry
;

291 
POSITION
 
Pos
;

292 
__öt64
 
Timeout
;

294 i‡(
NodeAddr
 =
LoˇlHo°
)

297 
Timeout
 = 
Now
 +

298 (
__öt64
)
	`VTimeToI¡
(
VTime
) * (__int64)10000000;

300 
NewE¡ry
.
Addr
 = 
NodeAddr
;

302 
Pos
 = 
NodeLi°
.
	`Föd
(
NewE¡ry
);

304 i‡(
Pos
 !
NULL
)

306 
˛ass
 
NodeE¡ry
 &
OldE¡ry
 = 
NodeLi°
.
	`GëAt
(
Pos
);

307 
OldE¡ry
.
Timeout
 = Timeout;

312 
NewE¡ry
.
Timeout
 = Timeout;

313 
NodeLi°
.
	`AddTaû
(
NewE¡ry
);

316 
m_TabCål
.
m_Dülog3
.
	`Upd©eNodeInfo
(
NodeLi°
);

317 
	}
}

319 
	gCFr⁄ãndDlg
::
	$H™dÀOl§Tc
(
Ol§Tc
 *
Msg
, 
U£Lq
)

321 
Size
;

322 *
Addr
;

324 
Msg
->
Hódî
.
SeqNo
 = ::
	`¡ohs
(Msg->Header.SeqNo);

325 
Msg
->
An¢
 = ::
	`¡ohs
(Msg->Ansn);

327 
	`AddNode
(
Msg
->
Hódî
.
Orig
, Msg->Hódî.
VTime
);

329 
Size
 = 
Msg
->
Hódî
.Size;

331 
Size
 - (
Ol§Tc
);

333 
Addr
 = (*)(
Msg
 + 1);

335 
Size
 > 0)

337 
Size
 -= 4;

339 
	`AddM¥
(*
Addr
, 
Msg
->
Hódî
.
Orig
, Msg->Hódî.
VTime
);

341 
Addr
++;

343 i‡(
U£Lq
 != 0)

345 
Size
 -= 4;

346 
Addr
++;

350 
	}
}

352 
	gCFr⁄ãndDlg
::
	$H™dÀOl§Mid
(
Ol§Hódî
 *
Msg
)

354 
Size
;

355 *
Addr
;

357 
Msg
->
SeqNo
 = ::
	`¡ohs
(Msg->SeqNo);

359 
	`AddNode
(
Msg
->
Orig
, Msg->
VTime
);

361 
Size
 = 
Msg
->Size;

363 
Size
 - (
Ol§Hódî
);

365 
Addr
 = (*)(
Msg
 + 1);

367 
Size
 > 0)

369 
Size
 -= 4;

371 
	`AddMid
(*
Addr
, 
Msg
->
Orig
, Msg->
VTime
);

373 
Addr
++;

375 
	}
}

377 
	gCFr⁄ãndDlg
::
	$H™dÀOl§H«
(
Ol§Hódî
 *
Msg
)

379 
Size
;

380 *
Addr
;

382 
Msg
->
SeqNo
 = ::
	`¡ohs
(Msg->SeqNo);

384 
	`AddNode
(
Msg
->
Orig
, Msg->
VTime
);

386 
Size
 = 
Msg
->Size;

388 
Size
 - (
Ol§Hódî
);

390 
Addr
 = (*)(
Msg
 + 1);

392 
Size
 > 0)

394 
Size
 -= 8;

396 
	`AddH«
(
Addr
[0], Addr[1], 
Msg
->
Orig
, Msg->
VTime
);

398 
Addr
 += 2;

400 
	}
}

402 
	gCFr⁄ãndDlg
::
	$H™dÀOl§Hñlo
(
Ol§Hñlo
 *
Msg
, 
U£Lq
)

404 
Size
, 
LökSize
;

405 
Ol§HñloLök
 *
Lök
;

406 *
Addr
;

408 
Msg
->
Hódî
.
SeqNo
 = ::
	`¡ohs
(Msg->Header.SeqNo);

410 
	`AddNode
(
Msg
->
Hódî
.
Orig
, Msg->Hódî.
VTime
);

412 
Size
 = 
Msg
->
Hódî
.Size;

414 
Size
 - (
Ol§Hñlo
);

416 
Lök
 = (
Ol§HñloLök
 *)(
Msg
 + 1);

418 
Size
 > 0)

420 
Lök
->
Size
 = ::
	`¡ohs
(Link->Size);

422 
LökSize
 = 
Lök
->
Size
;

424 
Size
 -
LökSize
;

426 
LökSize
 - (
Ol§HñloLök
);

428 
Addr
 = (*)(
Lök
 + 1);

430 
LökSize
 > 0)

432 
LökSize
 -= 4;

434 
	`AddNode
(*
Addr
, 
Msg
->
Hódî
.
VTime
);

436 i‡((
Lök
->
LökCode
 & 0x0c) == 0x08)

437 
	`AddM¥
(*
Addr
, 
Msg
->
Hódî
.
Orig
, Msg->Hódî.
VTime
);

439 
Addr
++;

441 i‡(
U£Lq
 != 0)

443 
LökSize
 -= 4;

444 
Addr
++;

448 
Lök
 = (
Ol§HñloLök
 *)
Addr
;

450 
	}
}

452 
	gCFr⁄ãndDlg
::
	$H™dÀIpcRouã
(
IpcRouã
 *
Msg
)

454 i‡(
Msg
->
Hódî
.
Size
 ! (
IpcRouã
))

457 i‡(
Msg
->
Add
 == 0)

458 
m_TabCål
.
m_Dülog4
.
	`DñëeRouã
(
Msg
->
De°
.
v4
);

461 
m_TabCål
.
m_Dülog4
.
	`AddRouã
(
Msg
->
De°
.
v4
, Msg->
G©e
.v4, Msg->
Mëric
,

462 
Msg
->
I¡
);

463 
	}
}

465 
	gCFr⁄ãndDlg
::
	$H™dÀIpcC⁄fig
(
IpcC⁄fig
 *
Msg
)

467 i‡(
Msg
->
Hódî
.
Size
 ! (
IpcC⁄fig
))

470 
Msg
->
HñloI¡
 = ::
	`¡ohs
(Msg->HelloInt);

471 
Msg
->
WúedHñloI¡
 = ::
	`¡ohs
(Msg->WiredHelloInt);

472 
Msg
->
TcI¡
 = ::
	`¡ohs
(Msg->TcInt);

474 
Msg
->
HñloHﬁd
 = ::
	`¡ohs
(Msg->HelloHold);

475 
Msg
->
TcHﬁd
 = ::
	`¡ohs
(Msg->TcHold);

477 
LoˇlHo°
 = 
Msg
->
MaöAddr
.
v4
;

478 
	}
}

480 
	$FuŒRód
(
SOCKET
 
SockH™d
, *
Buff
, 
Lí
)

482 
Res
;

486 
Res
 = ::
	`ªcv
(
SockH™d
, 
Buff
, 
Lí
, 0);

488 i‡(
Res
 <= 0)

491 
Lí
 -
Res
;

492 
Buff
 +
Res
;

494 
Lí
 > 0);

497 
	}
}

501 
	gCFr⁄ãndDlg
::
	$NëThªadFunc
()

503 
IpcHódî
 
Hódî
;

504 
Res
;

505 *
Msg
;

509 
Res
 = 
	`FuŒRód
(
SockH™d
, (*)&
Hódî
,  (
IpcHódî
));

511 i‡(
Res
 < 0)

514 
Hódî
.
Size
 = 
	`¡ohs
(Header.Size);

516 
Msg
 = 
√w
 [
Hódî
.
Size
];

518 ::
	`mem˝y
(
Msg
, &
Hódî
,  (
IpcHódî
));

520 
Res
 = 
	`FuŒRód
(
SockH™d
, 
Msg
 +  (
IpcHódî
),

521 
Hódî
.
Size
 -  (
IpcHódî
));

523 i‡(
Res
 < 0)

526 
SYSTEMTIME
 
SysTime
;

527 
FILETIME
 
FûeTime
;

529 ::
	`GëSy°emTime
(&
SysTime
);

530 ::
	`Sy°emTimeToFûeTime
(&
SysTime
, &
FûeTime
);

532 
Now
 = *(
__öt64
 *)&
FûeTime
;

534 
Hódî
.
Ty≥
)

536 
MSG_TYPE_IPC_ROUTE
:

537 
	`H™dÀIpcRouã
((
IpcRouã
 *)
Msg
);

540 
MSG_TYPE_IPC_CONFIG
:

541 
	`H™dÀIpcC⁄fig
((
IpcC⁄fig
 *)
Msg
);

544 
MSG_TYPE_OLSR_HELLO
:

545 
	`H™dÀOl§Hñlo
((
Ol§Hñlo
 *)
Msg
, 0);

548 
MSG_TYPE_OLSR_TC
:

549 
	`H™dÀOl§Tc
((
Ol§Tc
 *)
Msg
, 0);

552 
MSG_TYPE_OLSR_MID
:

553 
	`H™dÀOl§Mid
((
Ol§Hódî
 *)
Msg
);

556 
MSG_TYPE_OLSR_HNA
:

557 
	`H™dÀOl§H«
((
Ol§Hódî
 *)
Msg
);

560 
MSG_TYPE_OLSR_LQ_HELLO
:

561 
	`H™dÀOl§Hñlo
((
Ol§Hñlo
 *)
Msg
, 1);

564 
MSG_TYPE_OLSR_LQ_TC
:

565 
	`H™dÀOl§Tc
((
Ol§Tc
 *)
Msg
, 1);

569 
dñëe
[] 
Msg
;

573 
	`Timeout
();

576 
	`AfxEndThªad
(0);

578 
	}
}

580 
	gCFr⁄ãndDlg
::
	$LogThªadFunc
()

582 
Buff
[1000];

583 
Lí
;

584 
Le·
, 
Right
;

585 
CSåög
 
Löe
;

586 
CSåög
 
I¡
;

588 ::
	`RódFûe
(
OutRód
, 
Buff
,  (BuffË- 1, (*)&
Lí
, 
NULL
))

590 i‡(
Lí
 == 0)

593 
Le·
 = 0;

595 
Right
 = 0; Righà< 
Lí
; Right++)

597 i‡(
Buff
[
Right
] != 13)

598 
Buff
[
Le·
++] = Buff[
Right
];

601 
Lí
 = 
Le·
;

603 
Le·
 = 0;

605 
Right
 = 0; Righà< 
Lí
; Right++)

607 i‡(
Buff
[
Right
] == 10)

609 
Buff
[
Right
] = 0;

610 
Löe
 +(
Buff
 + 
Le·
);

612 i‡(
PùeMode
 =
PIPE_MODE_RUN
)

613 
m_TabCål
.
m_Dülog1
.
	`AddOuçutLöe
(
Löe
);

615 i‡(
Löe
.
	`GëLígth
() > 8 && Line[0] == 'i' && Line[1] == 'f')

617 
I¡
 = 
Löe
.
	`Mid
(0, 4);

618 
I¡
.
	`MakeUµî
();

620 
I¡îÁ˚s
.
	`Add
(
I¡
);

621 
IsWœn
.
	`Add
(
Löe
.
	`Mid
(6, 1));

622 
Addªs£s
.
	`Add
(
Löe
.
	`Mid
(8));

625 
Löe
.
	`Em±y
();

627 
Le·
 = 
Right
 + 1;

631 
Buff
[
Right
] = 0;

632 
Löe
 +(
Buff
 + 
Le·
);

635 i‡(
PùeMode
 =
PIPE_MODE_RUN
)

637 
m_St›Buâ⁄
.
	`E«bÀWödow
(
FALSE
);

638 
m_SèπBuâ⁄
.
	`E«bÀWödow
(
TRUE
);

641 
	`AfxEndThªad
(0);

643 
	}
}

645 
	$LogThªadStub
(*
Arg
)

647 
˛ass
 
CFr⁄ãndDlg
 *
This
;

649 
This
 = (
˛ass
 
CFr⁄ãndDlg
 *)
Arg
;

651  
This
->
	`LogThªadFunc
();

652 
	}
}

654 
	$NëThªadStub
(*
Arg
)

656 
˛ass
 
CFr⁄ãndDlg
 *
This
;

658 
This
 = (
˛ass
 
CFr⁄ãndDlg
 *)
Arg
;

660  
This
->
	`NëThªadFunc
();

661 
	}
}

663 
	gCFr⁄ãndDlg
::
	$ExecuãPùe
(c⁄° *
CmdLöe
, 
HANDLE
 *
InWrôe
,

664 
HANDLE
 *
OutRód
, HANDLE *
ShimProc
)

666 
SECURITY_ATTRIBUTES
 
SecAâr
;

667 
HANDLE
 
OutWrôe
, 
OutRódTmp
;

668 
HANDLE
 
EºWrôe
;

669 
HANDLE
 
InRód
, 
InWrôeTmp
;

670 
HANDLE
 
Proc
;

671 
STARTUPINFO
 
SèπupInfo
;

672 
PROCESS_INFORMATION
 
Pro˚ssInfo
;

674 
SecAâr
.
nLígth
 =  (
SECURITY_ATTRIBUTES
);

675 
SecAâr
.
ÕSecurôyDes¸ùt‹
 = 
NULL
;

676 
SecAâr
.
bInhîôH™dÀ
 = 
TRUE
;

678 
Proc
 = ::
	`GëCuºítPro˚ss
();

680 i‡(!::
	`Cª©ePùe
(&
OutRódTmp
, &
OutWrôe
, &
SecAâr
, 0))

682 
	`AfxMesßgeBox
("Cannot create stdoutÖipe.");

686 i‡(!::
	`Du∂iˇãH™dÀ
(
Proc
, 
OutRódTmp
, Proc, 
OutRód
,

687 0, 
FALSE
, 
DUPLICATE_SAME_ACCESS
))

689 
	`AfxMesßgeBox
("Cannot duplicateÅemporary stdoutÑead handle.");

693 i‡(!::
	`Clo£H™dÀ
(
OutRódTmp
))

695 
	`AfxMesßgeBox
("Cannot closeÅemporary stdoutÑead handle.");

699 i‡(!::
	`Cª©ePùe
(&
InRód
, &
InWrôeTmp
, &
SecAâr
, 0))

701 
	`AfxMesßgeBox
("Cannot create stdinÖipe.");

705 i‡(!::
	`Du∂iˇãH™dÀ
(
Proc
, 
InWrôeTmp
, Proc, 
InWrôe
,

706 0, 
FALSE
, 
DUPLICATE_SAME_ACCESS
))

708 
	`AfxMesßgeBox
("Cannot duplicateÅemporary stdin write handle.");

712 i‡(!::
	`Clo£H™dÀ
(
InWrôeTmp
))

714 
	`AfxMesßgeBox
("Cannot closeÅemporary stdin write handle.");

718 i‡(!::
	`Du∂iˇãH™dÀ
(
Proc
, 
OutWrôe
, Proc, &
EºWrôe
,

719 0, 
TRUE
, 
DUPLICATE_SAME_ACCESS
))

721 
	`AfxMesßgeBox
("Cannot duplicate stdout write handle for stderr.");

725 ::
	`mem£t
(&
SèπupInfo
, 0,  (
STARTUPINFO
));

727 
SèπupInfo
.
cb
 =  (
STARTUPINFO
);

729 
SèπupInfo
.
dwFœgs
 = 
STARTF_USESTDHANDLES
 | 
STARTF_USESHOWWINDOW
;

731 
SèπupInfo
.
hStdI≈ut
 = 
InRód
;

732 
SèπupInfo
.
hStdOuçut
 = 
OutWrôe
;

733 
SèπupInfo
.
hStdEº‹
 = 
EºWrôe
;

735 
SèπupInfo
.
wShowWödow
 = 
SW_HIDE
;

737 i‡(!::
	`Cª©ePro˚ss
(
NULL
, (*)
CmdLöe
, NULL, NULL, 
TRUE
,

738 0, 
NULL
, NULL, &
SèπupInfo
, &
Pro˚ssInfo
))

740 
	`AfxMesßgeBox
("Cannot create OLSR serverÖrocess.");

744 i‡(!::
	`Clo£H™dÀ
(
InRód
))

746 
	`AfxMesßgeBox
("Cannot close stdinÑead handle.");

750 i‡(!::
	`Clo£H™dÀ
(
OutWrôe
))

752 
	`AfxMesßgeBox
("Cannot close stdout write handle.");

756 i‡(!::
	`Clo£H™dÀ
(
EºWrôe
))

758 
	`AfxMesßgeBox
("Cannot close stderr write handle.");

762 *
ShimProc
 = 
Pro˚ssInfo
.
hPro˚ss
;

765 
	}
}

767 
	gCFr⁄ãndDlg
::
	$GëI¡îÁ˚s
()

769 
GuiP©h
[
MAX_PATH
];

770 
CSåög
 
CmdLöe
;

771 
CWöThªad
 *
I¡Thªad
;

773 ::
	`GëModuÀFûeName
(
NULL
, 
GuiP©h
, 
MAX_PATH
);

775 
CmdLöe
 = 
GuiP©h
;

776 
CmdLöe
 = CmdLöe.
	`Mid
(0, CmdLöe.
	`Revî£Föd
('\\')) + "\\olsrd.exe -int";

778 i‡(
	`ExecuãPùe
((c⁄° *)
CmdLöe
, &
InWrôe
, &
OutRód
, &
ShimProc
) < 0)

780 
	`AfxMesßgeBox
("C™nŸÉxecuã '" + 
CmdLöe
 + "'.");

784 
PùeMode
 = 
PIPE_MODE_INT
;

786 
I¡Thªad
 = 
	`AfxBegöThªad
(
LogThªadStub
, (*)
this
);

788 ::
	`WaôF‹SögÀObje˘
((
HANDLE
)(*
I¡Thªad
), 
INFINITE
);

791 
	}
}

793 
	gCFr⁄ãndDlg
::
	$SèπOl§d
()

795 
WSADATA
 
WßD©a
;

796 
CSåög
 
CmdLöe
;

797 
P©h
[
MAX_PATH
];

798 
TempP©h
[
MAX_PATH
];

799 
Try
;

801 
m_TabCål
.
m_Dülog3
.
	`CÀ¨NodeInfo
();

802 
m_TabCål
.
m_Dülog4
.
	`CÀ¨Rouãs
();

804 i‡(
	`WSASèπup
(0x0202, &
WßD©a
))

806 
	`AfxMesßgeBox
("Cannot initialize WinSockÜibrary.");

810 ::
	`GëModuÀFûeName
(
NULL
, 
P©h
, 
MAX_PATH
);

812 
CmdLöe
 = 
P©h
;

813 
CmdLöe
 = CmdLöe.
	`Mid
(0, CmdLöe.
	`Revî£Föd
('\\')) + "\\Shim.exe";

815 ::
	`GëTempP©h
(
MAX_PATH
 - 16, 
P©h
);

816 ::
	`GëTempFûeName
(
P©h
, "GNU", 0, 
TempP©h
);

818 
St‹edTempFûe
 = 
TempP©h
;

820 i‡(
m_TabCål
.
m_Dülog2
.
	`SaveC⁄figFûe
(
St‹edTempFûe
, 0) < 0)

822 
	`AfxMesßgeBox
("Cannot saveÅemporary configuration file '" +

823 
St‹edTempFûe
 + "'.");

827 
CmdLöe
 +" -‡" + 
St‹edTempFûe
;

829 i‡(
	`ExecuãPùe
((c⁄° *)
CmdLöe
, &
InWrôe
, &
OutRód
, &
ShimProc
) < 0)

831 
	`AfxMesßgeBox
("C™nŸÉxecuã '" + 
CmdLöe
 + "'.");

835 
PùeMode
 = 
PIPE_MODE_RUN
;

837 
LogThªad
 = 
	`AfxBegöThªad
(
LogThªadStub
, (*)
this
);

839 
sockaddr_ö
 
Addr
;

841 
Addr
.
sö_Ámûy
 = 
AF_INET
;

842 
Addr
.
sö_p‹t
 = ::
	`ht⁄s
(1212);

843 
Addr
.
sö_addr
.
s_addr
 = ::
	`öë_addr
("127.0.0.1");

845 
SockH™d
 = ::
	`sockë
(
AF_INET
, 
SOCK_STREAM
, 
IPPROTO_TCP
);

847 i‡(
SockH™d
 < 0)

849 
	`AfxMesßgeBox
("Cannot create IPC socket.");

851 ::
	`SëEvít
(
Evít
);

852 ::
	`WaôF‹SögÀObje˘
((
HANDLE
)
LogThªad
, 
INFINITE
);

854 
LogThªad
 = 
NULL
;

859 
Try
 = 0; Try < 5; Try++)

861 i‡(::
	`c⁄√˘
(
SockH™d
, (
sockaddr
 *)&
Addr
,

862  (
sockaddr_ö
)) >= 0)

865 ::
	`SÀï
(500);

868 i‡(
Try
 == 10)

870 
	`AfxMesßgeBox
("Cannot connectÅo IPCÖort.");

872 ::
	`SëEvít
(
Evít
);

873 ::
	`WaôF‹SögÀObje˘
((
HANDLE
)
LogThªad
, 
INFINITE
);

875 ::
	`˛o£sockë
(
SockH™d
);

877 
LogThªad
 = 
NULL
;

882 
NëThªad
 = 
	`AfxBegöThªad
(
NëThªadStub
, (*)
this
);

885 
	}
}

887 
	gCFr⁄ãndDlg
::
	$St›Ol§d
()

889 i‡(
LogThªad
 =
NULL
 && 
NëThªad
 == NULL)

892 
TøyIc⁄
::
	`gëIn°™˚
()->
	`£tSètus
–TøyIc⁄::
OFF
, "Off" );

894 ::
	`SëEvít
(
Evít
);

896 ::
	`WaôF‹SögÀObje˘
((
HANDLE
)
LogThªad
, 
INFINITE
);

897 ::
	`WaôF‹SögÀObje˘
((
HANDLE
)
NëThªad
, 
INFINITE
);

899 
LogThªad
 = 
NULL
;

900 
NëThªad
 = 
NULL
;

902 ::
	`DñëeFûe
(
St‹edTempFûe
);

905 
	}
}

907 
BOOL
 
	gCFr⁄ãndDlg
::
	$OnInôDülog
()

909 
HICON
 
SmÆl
, 
L¨ge
;

911 
CDülog
::
	`OnInôDülog
();

913 
SmÆl
 = (
HICON
)::
	`LﬂdImage
(
	`AfxGëAµ
()->
m_hIn°™˚
,

914 
	`MAKEINTRESOURCE
(
IDI_ICON1
),

915 
IMAGE_ICON
, 
	`GëSy°emMërics
(
SM_CXSMICON
),

916 
	`GëSy°emMërics
(
SM_CYSMICON
), 0);

918 
L¨ge
 = (
HICON
)::
	`LﬂdImage
(
	`AfxGëAµ
()->
m_hIn°™˚
,

919 
	`MAKEINTRESOURCE
(
IDI_ICON1
),

920 
IMAGE_ICON
, 
	`GëSy°emMërics
(
SM_CXICON
),

921 
	`GëSy°emMërics
(
SM_CYICON
), 0);

923 
	`SëIc⁄
(
SmÆl
, 
FALSE
);

924 
	`SëIc⁄
(
L¨ge
, 
TRUE
);

926 
	`GëI¡îÁ˚s
();

928 
m_TabCål
.
	`In£πIãm
(0, "Settings");

929 
m_TabCål
.
	`In£πIãm
(1, "Output");

930 
m_TabCål
.
	`In£πIãm
(2, "Nodes");

931 
m_TabCål
.
	`In£πIãm
(3, "Routes");

933 
m_TabCål
.
	`InôTabDülogs
(&
I¡îÁ˚s
, &
Addªs£s
, &
IsWœn
);

935 
m_St›Buâ⁄
.
	`E«bÀWödow
(
FALSE
);

937 i‡(!
C⁄figFûe
.
	`IsEm±y
())

939 i‡(
m_TabCål
.
m_Dülog2
.
	`O≥nC⁄figFûe
(
C⁄figFûe
) < 0)

940 
	`AfxMesßgeBox
("C™nŸ o≥¿c⁄figuøti⁄ fûê'" + 
C⁄figFûe
 + "'.");

944 
	`OnSèπBuâ⁄
();

946 
m_TabCål
.
	`SëCurSñ
(1);

947 
m_TabCål
.
	`Di•œyTabDülog
();

951  
TRUE
;

952 
	}
}

954 
	gCFr⁄ãndDlg
::
	$OnOK
()

956 
	}
}

958 
CFr⁄ãndDlg
::
	$OnC™˚l
()

960 
	`OnExôBuâ⁄
();

961 
	}
}

963 
	gCFr⁄ãndDlg
::
	$OnSèπBuâ⁄
()

965 
m_SèπBuâ⁄
.
	`E«bÀWödow
(
FALSE
);

967 
m_TabCål
.
m_Dülog1
.
	`SëFrozí
(1);

969 i‡(
	`SèπOl§d
() < 0)

971 
m_TabCål
.
m_Dülog1
.
	`SëFrozí
(0);

972 
m_TabCål
.
m_Dülog1
.
	`AddOuçutLöe
("");

974 
	`AfxMesßgeBox
("Cannot start OLSR server.");

976 
m_SèπBuâ⁄
.
	`E«bÀWödow
(
TRUE
);

981 
m_TabCål
.
m_Dülog1
.
	`H™dÀSèπ
();

983 
m_St›Buâ⁄
.
	`E«bÀWödow
(
TRUE
);

984 
	}
}

986 
	gCFr⁄ãndDlg
::
	$OnSt›Buâ⁄
()

988 i‡(
	`St›Ol§d
() < 0)

991 
m_TabCål
.
m_Dülog1
.
	`H™dÀSt›
();

993 
m_St›Buâ⁄
.
	`E«bÀWödow
(
FALSE
);

994 
m_SèπBuâ⁄
.
	`E«bÀWödow
(
TRUE
);

995 
	}
}

997 
	gCFr⁄ãndDlg
::
	$OnExôBuâ⁄
()

999 
dñëe
 
TøyIc⁄
::
	`gëIn°™˚
();

1001 i‡(
	`St›Ol§d
() < 0)

1004 
m_TabCål
.
m_Dülog3
.
	`CÀ¨NodeInfo
();

1005 
m_TabCål
.
m_Dülog4
.
	`CÀ¨Rouãs
();

1007 
	`De°royWödow
();

1008 
	}
}

	@gui/win32/Main/FrontendDlg.h

42 #i‡!
deföed
(
AFX_FRONTENDDLG_H__7D68FBC0_7448_479B_81F0_3FBBDE291395__INCLUDED_
)

43 
	#AFX_FRONTENDDLG_H__7D68FBC0_7448_479B_81F0_3FBBDE291395__INCLUDED_


	)

45 #i‡
_MSC_VER
 > 1000

46 #¥agm®
⁄˚


49 
	~"MyTabCål.h
"

50 
	~"NodeE¡ry.h
"

52 
	#PIPE_MODE_RUN
 0

	)

53 
	#PIPE_MODE_INT
 1

	)

55 ˛as†
	cCFr⁄ãndDlg
:
public
 
CDülog
 {

56 
public
:

57 
CFr⁄ãndDlg
(
CWnd
 * 
pP¨ít
 = 
NULL
);

60 íum { 
	mIDD
 = 
IDD_FRONTEND_DIALOG
 };

61 
CBuâ⁄
 
	gm_St›Buâ⁄
;

62 
CBuâ⁄
 
	gm_SèπBuâ⁄
;

63 
MyTabCål
 
	gm_TabCål
;

66 
LogThªadFunc
();

67 
NëThªadFunc
();

69 
CSåög
 
	gC⁄figFûe
;

70 
	g¥Ÿe˘ed
:

73 
vútuÆ
 
DoD©aExch™ge
(
CD©aExch™ge
 * 
pDX
);

76 
	gpublic
:

78 
vútuÆ
 
BOOL
 
OnInôDülog
();

79 
afx_msg
 
OnOK
();

80 
afx_msg
 
OnC™˚l
();

81 
afx_msg
 
OnSèπBuâ⁄
();

82 
afx_msg
 
OnSt›Buâ⁄
();

83 
afx_msg
 
OnExôBuâ⁄
();

86 
	g¥Ÿe˘ed
:

87 
	$DECLARE_MESSAGE_MAP
(Ë
	`SèπOl§d
();

88 
	`St›Ol§d
();

90 
	`GëI¡îÁ˚s
();

92 
HANDLE
 
Evít
;

94 
CSåög
 
St‹edTempFûe
;

96 
SOCKET
 
SockH™d
;

98 
PùeMode
;

99 
	`ExecuãPùe
(c⁄° *, 
HANDLE
 *, HANDLE *, HANDLE *);

101 
CWöThªad
 *
LogThªad
;

102 
CWöThªad
 *
NëThªad
;

104 
CSåögAºay
 
I¡îÁ˚s
;

105 
CSåögAºay
 
Addªs£s
;

106 
CSåögAºay
 
IsWœn
;

108 
HANDLE
 
OutRód
, 
InWrôe
;

109 
HANDLE
 
ShimProc
;

111 
	`H™dÀIpcRouã
(
IpcRouã
 *);

112 
	`H™dÀIpcC⁄fig
(
IpcC⁄fig
 *);

113 
	`H™dÀOl§Hñlo
(
Ol§Hñlo
 *, );

114 
	`H™dÀOl§Tc
(
Ol§Tc
 *, );

115 
	`H™dÀOl§Mid
(
Ol§Hódî
 *);

116 
	`H™dÀOl§H«
(
Ol§Hódî
 *);

118 
	`AddNode
(, );

119 
	`AddM¥
(, , );

120 
	`AddMid
(, , );

121 
	`AddH«
(, , , );

123 
CLi°
 < 
˛ass
 
NodeE¡ry
, cœs†NodeE¡ry & >
NodeLi°
;

125 
	`Timeout
();

127 
__öt64
 
Now
;

129 
LoˇlHo°
;

130 
	}
};

	@gui/win32/Main/HnaEntry.cpp

41 
	~"°dafx.h
"

42 
	~"H«E¡ry.h
"

44 
˛ass
 
	gH«E¡ry
 &H«E¡ry::
›î©‹
=(˛as†
H«E¡ry
 &
Src
)

46 
Addr
 = 
Src
.Addr;

47 
	gMask
 = 
Src
.
Mask
;

48 
	gTimeout
 = 
Src
.
Timeout
;

50  *
	gthis
;

53 
BOOL
 
	gH«E¡ry
::
›î©‹
==(c⁄° 
˛ass
 
H«E¡ry
 &
Comp
) const

55  
Addr
 =
Comp
.Add∏&& 
Mask
 == Comp.Mask;

	@gui/win32/Main/HnaEntry.h

42 #i‡!
deföed
 
TL_HNAENTRY_H


43 
	#TL_HNAENTRY_H


	)

45 ˛as†
	cH«E¡ry
 {

46 
	mpublic
:

47 
Addr
;

48 
	mMask
;

49 
__öt64
 
	mTimeout
;

51 
˛ass
 
	mH«E¡ry
 & H«E¡ry::
›î©‹
=(˛as†
H«E¡ry
 &);

52 
BOOL
 
	mH«E¡ry
::
›î©‹
==(c⁄° 
˛ass
 
H«E¡ry
 &) const;

	@gui/win32/Main/Ipc.h

42 #i‡!
deföed
 
TL_IPC_H


43 
	#TL_IPC_H


	)

45 
	#MSG_TYPE_OLSR_HELLO
 1

	)

46 
	#MSG_TYPE_OLSR_TC
 2

	)

47 
	#MSG_TYPE_OLSR_MID
 3

	)

48 
	#MSG_TYPE_OLSR_HNA
 4

	)

49 
	#MSG_TYPE_OLSR_LQ_HELLO
 201

	)

50 
	#MSG_TYPE_OLSR_LQ_TC
 202

	)

52 
	#MSG_TYPE_IPC_ROUTE
 11

	)

53 
	#MSG_TYPE_IPC_CONFIG
 12

	)

55 #¥agm®
∑ck
(
push
, 
Bef‹eIpcMesßges
, 1)

57 
	sOl§Hódî
 {

58 
	mTy≥
;

59 
	mVTime
;

60 
	mSize
;

61 
	mOrig
;

62 
	mTé
;

63 
	mH›s
;

64 
	mSeqNo
;

67 
	sOl§Hñlo
 {

68 
Ol§Hódî
 
	mHódî
;

70 
	mRe£rved
;

71 
	mHTime
;

72 
	mWûl
;

75 
	sOl§HñloLök
 {

76 
	mLökCode
;

77 
	mRe£rved
;

78 
	mSize
;

81 
	sOl§Tc
 {

82 
Ol§Hódî
 
	mHódî
;

84 
	mAn¢
;

85 
	mRe£rved
;

88 
	uIpcIpAddr
 {

89 
	mv4
;

90 
	mv6
[16];

93 
	sIpcHódî
 {

94 
	mTy≥
;

95 
	mRe£rved
;

96 
	mSize
;

99 
	sIpcRouã
 {

100 
IpcHódî
 
	mHódî
;

102 
	mMëric
;

103 
	mAdd
;

104 
	mRe£rved
[2];

105 
IpcIpAddr
 
	mDe°
;

106 
IpcIpAddr
 
	mG©e
;

107 
	mI¡
[4];

110 
	sIpcC⁄fig
 {

111 
IpcHódî
 
	mHódî
;

113 
	mNumMid
;

114 
	mNumH«
;

115 
	mRe£rved1
[2];

116 
	mHñloI¡
;

117 
	mWúedHñloI¡
;

118 
	mTcI¡
;

119 
	mHñloHﬁd
;

120 
	mTcHﬁd
;

121 
	mIpv6
;

122 
	mRe£rved2
;

123 
IpcIpAddr
 
	mMaöAddr
;

126 #¥agm®
∑ck
 (
p›
, 
Bef‹eIpcMesßges
)

	@gui/win32/Main/MidEntry.cpp

41 
	~"°dafx.h
"

42 
	~"MidE¡ry.h
"

44 
˛ass
 
	gMidE¡ry
 &MidE¡ry::
›î©‹
=(˛as†
MidE¡ry
 &
Src
)

46 
Addr
 = 
Src
.Addr;

47 
	gTimeout
 = 
Src
.
Timeout
;

49  *
	gthis
;

52 
BOOL
 
	gMidE¡ry
::
›î©‹
==(c⁄° 
˛ass
 
MidE¡ry
 &
Comp
) const

54  
Addr
 =
Comp
.Addr;

	@gui/win32/Main/MidEntry.h

42 #i‡!
deföed
 
TL_MIDENTRY_H


43 
	#TL_MIDENTRY_H


	)

45 ˛as†
	cMidE¡ry
 {

46 
	mpublic
:

47 
Addr
;

48 
__öt64
 
	mTimeout
;

50 
˛ass
 
	mMidE¡ry
 & MidE¡ry::
›î©‹
=(˛as†
MidE¡ry
 &);

51 
BOOL
 
	mMidE¡ry
::
›î©‹
==(c⁄° 
˛ass
 
MidE¡ry
 &) const;

	@gui/win32/Main/MprEntry.cpp

41 
	~"°dafx.h
"

42 
	~"M¥E¡ry.h
"

44 
˛ass
 
	gM¥E¡ry
 &M¥E¡ry::
›î©‹
=(˛as†
M¥E¡ry
 &
Src
)

46 
Addr
 = 
Src
.Addr;

47 
	gTimeout
 = 
Src
.
Timeout
;

49  *
	gthis
;

52 
BOOL
 
	gM¥E¡ry
::
›î©‹
==(c⁄° 
˛ass
 
M¥E¡ry
 &
Comp
) const

54  
Addr
 =
Comp
.Addr;

	@gui/win32/Main/MprEntry.h

42 #i‡!
deföed
 
TL_MPRENTRY_H


43 
	#TL_MPRENTRY_H


	)

45 ˛as†
	cM¥E¡ry
 {

46 
	mpublic
:

47 
Addr
;

48 
__öt64
 
	mTimeout
;

50 
˛ass
 
	mM¥E¡ry
 & M¥E¡ry::
›î©‹
=(˛as†
M¥E¡ry
 &);

51 
BOOL
 
	mM¥E¡ry
::
›î©‹
==(c⁄° 
˛ass
 
M¥E¡ry
 &) const;

	@gui/win32/Main/MyDialog1.cpp

41 
	~"°dafx.h
"

42 
	~"Fr⁄ãnd.h
"

43 
	~"MyDülog1.h
"

45 #ifde‡
_DEBUG


46 
	#√w
 
DEBUG_NEW


	)

47 #unde‡
THIS_FILE


48 
	gTHIS_FILE
[] = 
__FILE__
;

51 
	gMyDülog1
::
	$MyDülog1
(
CWnd
* 
pP¨ít
)

52 : 
	`CDülog
(
MyDülog1
::
IDD
, 
pP¨ít
)

54 
NumLöes
 = 0;

58 
	}
}

60 
BOOL
 
	gMyDülog1
::
	$Cª©e
(
CWnd
 *
P¨ít
)

62  
CDülog
::
	`Cª©e
(
MyDülog1
::
IDD
, 
P¨ít
);

63 
	}
}

65 
	gMyDülog1
::
	$DoD©aExch™ge
(
CD©aExch™ge
* 
pDX
)

67 
CDülog
::
	`DoD©aExch™ge
(
pDX
);

69 
	`DDX_C⁄åﬁ
(
pDX
, 
IDC_BUTTON4
, 
m_SaveBuâ⁄
);

70 
	`DDX_C⁄åﬁ
(
pDX
, 
IDC_BUTTON3
, 
m_FªezeBuâ⁄
);

71 
	`DDX_C⁄åﬁ
(
pDX
, 
IDC_BUTTON2
, 
m_C⁄töueBuâ⁄
);

72 
	`DDX_C⁄åﬁ
(
pDX
, 
IDC_BUTTON1
, 
m_CÀ¨Buâ⁄
);

73 
	`DDX_C⁄åﬁ
(
pDX
, 
IDC_EDIT1
, 
m_OuçutWödow
);

75 
	}
}

78 
	$BEGIN_MESSAGE_MAP
(
MyDülog1
, 
CDülog
)

80 
	$ON_BN_CLICKED
(
IDC_BUTTON1
, 
OnCÀ¨Buâ⁄
)

81 
	$ON_BN_CLICKED
(
IDC_BUTTON2
, 
OnC⁄töueBuâ⁄
)

82 
	$ON_BN_CLICKED
(
IDC_BUTTON3
, 
OnFªezeBuâ⁄
)

83 
	$ON_WM_CTLCOLOR
()

84 
	$ON_BN_CLICKED
(
IDOK
, 
OnOK
)

85 
	$ON_BN_CLICKED
(
IDCANCEL
, 
OnC™˚l
)

86 
	$ON_BN_CLICKED
(
IDC_BUTTON4
, 
OnSaveBuâ⁄
)

88 
	$END_MESSAGE_MAP
()

90 
MyDülog1
::
	$OnOK
()

92 
	}
}

94 
MyDülog1
::
	$OnC™˚l
()

96 
	}
}

98 
MyDülog1
::
	$AddOuçutLöe
(
CSåög
 
Löe
)

100 
Index
;

102 
CrôSe˘
.
	`Lock
();

104 
Ouçut
 +
Löe
 + "\r\n";

106 i‡(
NumLöes
 == 1000)

108 
Index
 = 
Ouçut
.
	`Föd
("\r\n");

109 
Ouçut
.
	`Dñëe
(0, 
Index
 + 2);

113 
NumLöes
++;

115 
CrôSe˘
.
	`U∆ock
();

117 i‡(
Frozí
 == 0)

119 
m_OuçutWödow
.
	`SëWödowText
(
Ouçut
);

120 
m_OuçutWödow
.
	`SëSñ
(
Ouçut
.
	`GëLígth
(), Output.GetLength());

122 
	}
}

124 
	gMyDülog1
::
	$SëFrozí
(
NewFrozí
)

126 
Frozí
 = 
NewFrozí
;

127 
	}
}

129 
BOOL
 
	gMyDülog1
::
	$OnInôDülog
()

131 
CDülog
::
	`OnInôDülog
();

133 
CClõ¡DC
 
	`DevC⁄t
(&
m_OuçutWödow
);

135 
EdôF⁄t
.
	`Cª©ePoötF⁄t
(90, "Courõ∏New", 
NULL
);

136 
m_OuçutWödow
.
	`SëF⁄t
(&
EdôF⁄t
);

138 
m_FªezeBuâ⁄
.
	`E«bÀWödow
(
FALSE
);

139 
m_C⁄töueBuâ⁄
.
	`E«bÀWödow
(
FALSE
);

141 
Frozí
 = 0;

143 
WhôeBrush
.
	`Cª©eSﬁidBrush
(
	`RGB
(255, 255, 255));

145  
TRUE
;

146 
	}
}

148 
	gMyDülog1
::
	$OnCÀ¨Buâ⁄
()

150 
CrôSe˘
.
	`Lock
();

151 
Ouçut
.
	`Em±y
();

152 
NumLöes
 = 0;

153 
CrôSe˘
.
	`U∆ock
();

155 
m_OuçutWödow
.
	`SëWödowText
(
Ouçut
);

156 
m_OuçutWödow
.
	`SëSñ
(0, 0);

157 
	}
}

159 
	gMyDülog1
::
	$OnC⁄töueBuâ⁄
()

161 
CSåög
 
C›y
;

162 
Lí
;

164 
m_FªezeBuâ⁄
.
	`E«bÀWödow
(
TRUE
);

165 
m_C⁄töueBuâ⁄
.
	`E«bÀWödow
(
FALSE
);

167 
Frozí
 = 0;

169 
CrôSe˘
.
	`Lock
();

170 
C›y
 = 
Ouçut
;

171 
Lí
 = 
Ouçut
.
	`GëLígth
();

172 
CrôSe˘
.
	`U∆ock
();

174 
m_OuçutWödow
.
	`SëWödowText
(
C›y
);

175 
m_OuçutWödow
.
	`SëSñ
(
Lí
, Len);

176 
	}
}

178 
	gMyDülog1
::
	$OnFªezeBuâ⁄
()

180 
m_FªezeBuâ⁄
.
	`E«bÀWödow
(
FALSE
);

181 
m_C⁄töueBuâ⁄
.
	`E«bÀWödow
(
TRUE
);

183 
Frozí
 = 1;

184 
	}
}

186 
	gMyDülog1
::
	$H™dÀSèπ
()

188 
CSåög
 
C›y
;

189 
Lí
;

191 
m_FªezeBuâ⁄
.
	`E«bÀWödow
(
TRUE
);

192 
m_C⁄töueBuâ⁄
.
	`E«bÀWödow
(
FALSE
);

194 
Frozí
 = 0;

196 
CrôSe˘
.
	`Lock
();

197 
C›y
 = 
Ouçut
;

198 
Lí
 = 
Ouçut
.
	`GëLígth
();

199 
CrôSe˘
.
	`U∆ock
();

201 
m_OuçutWödow
.
	`SëWödowText
(
C›y
);

202 
m_OuçutWödow
.
	`SëSñ
(
Lí
, Len);

203 
	}
}

205 
	gMyDülog1
::
	$H™dÀSt›
()

207 
CSåög
 
C›y
;

208 
Lí
;

210 
m_FªezeBuâ⁄
.
	`E«bÀWödow
(
FALSE
);

211 
m_C⁄töueBuâ⁄
.
	`E«bÀWödow
(
FALSE
);

213 
Frozí
 = 0;

215 
CrôSe˘
.
	`Lock
();

216 
C›y
 = 
Ouçut
;

217 
Lí
 = 
Ouçut
.
	`GëLígth
();

218 
CrôSe˘
.
	`U∆ock
();

220 
m_OuçutWödow
.
	`SëWödowText
(
C›y
);

221 
m_OuçutWödow
.
	`SëSñ
(
Lí
, Len);

222 
	}
}

224 
HBRUSH
 
	gMyDülog1
::
	$OnCéCﬁ‹
(
CDC
* 
pDC
, 
CWnd
* 
pWnd
, 
UINT
 
nCéCﬁ‹
)

226 
HBRUSH
 
hbr
 = 
CDülog
::
	`OnCéCﬁ‹
(
pDC
, 
pWnd
, 
nCéCﬁ‹
);

228 i‡(
pWnd
 =&
m_OuçutWödow
)

230 
pDC
->
	`SëBkCﬁ‹
(
	`RGB
(255, 255, 255));

231 
hbr
 = 
WhôeBrush
;

234  
hbr
;

235 
	}
}

237 
	gMyDülog1
::
	$OnSaveBuâ⁄
()

239 
CSåög
 
C›y
;

240 
Lí
;

241 
CFûeDülog
 
	`FûeDülog
(
FALSE
);

242 
CSåög
 
FûeName
 = "OLSRÜog.txt";

243 
CSåög
 
P©hName
;

244 
CFûe
 
Fûe
;

246 
CrôSe˘
.
	`Lock
();

247 
C›y
 = 
Ouçut
;

248 
Lí
 = 
Ouçut
.
	`GëLígth
();

249 
CrôSe˘
.
	`U∆ock
();

251 
FûeDülog
.
m_o‚
.
Õ°rFûãr
 = "Text file (*.txt)\0*.txt\0";

252 
FûeDülog
.
m_o‚
.
nFûãrIndex
 = 1;

254 
FûeDülog
.
m_o‚
.
Õ°rFûe
 = 
FûeName
.
	`GëBuf„r
(500);

255 
FûeDülog
.
m_o‚
.
nMaxFûe
 = 500;

257 i‡(
FûeDülog
.
	`DoModÆ
(Ë=
IDOK
)

259 
P©hName
 = 
FûeDülog
.
	`GëP©hName
();

261 i‡(
Fûe
.
	`O≥n
(
P©hName
, 
CFûe
::
modeCª©e
 | CFûe::
modeWrôe
 |

262 
CFûe
::
sh¨eEx˛usive
) == 0)

263 
	`AfxMesßgeBox
("C™nŸ o≥¿logfûê'" + 
P©hName
 + "'.");

267 
Fûe
.
	`Wrôe
((c⁄° *)
C›y
, 
Lí
);

268 
Fûe
.
	`Clo£
();

272 
FûeName
.
	`Rñó£Buf„r
();

273 
	}
}

	@gui/win32/Main/MyDialog1.h

42 #i‡!
deföed
(
AFX_MYDIALOG1_H__1A381668_A36B_4C51_9B79_643BC2A59D88__INCLUDED_
)

43 
	#AFX_MYDIALOG1_H__1A381668_A36B_4C51_9B79_643BC2A59D88__INCLUDED_


	)

45 #i‡
_MSC_VER
 > 1000

46 #¥agm®
⁄˚


49 ˛as†
	cMyDülog1
:
public
 
CDülog
 {

50 
public
:

51 
MyDülog1
(
CWnd
 * 
pP¨ít
 = 
NULL
);

53 
BOOL
 
Cª©e
(
CWnd
 * 
P¨ít
);

55 
AddOuçutLöe
(
CSåög
);

56 
SëFrozí
();

57 
H™dÀSèπ
();

58 
H™dÀSt›
();

61 íum { 
	mIDD
 = 
IDD_DIALOG1
 };

62 
CBuâ⁄
 
	gm_SaveBuâ⁄
;

63 
CBuâ⁄
 
	gm_FªezeBuâ⁄
;

64 
CBuâ⁄
 
	gm_C⁄töueBuâ⁄
;

65 
CBuâ⁄
 
	gm_CÀ¨Buâ⁄
;

66 
CEdô
 
	gm_OuçutWödow
;

70 
	g¥Ÿe˘ed
:

71 
vútuÆ
 
DoD©aExch™ge
(
CD©aExch™ge
 * 
pDX
);

74 
	g¥Ÿe˘ed
:

77 
afx_msg
 
OnOK
();

78 
afx_msg
 
OnC™˚l
();

79 
vútuÆ
 
BOOL
 
OnInôDülog
();

80 
afx_msg
 
OnCÀ¨Buâ⁄
();

81 
afx_msg
 
OnC⁄töueBuâ⁄
();

82 
afx_msg
 
OnFªezeBuâ⁄
();

83 
afx_msg
 
HBRUSH
 
OnCéCﬁ‹
(
CDC
 * 
pDC
, 
CWnd
 * 
pWnd
, 
UINT
 
nCéCﬁ‹
);

84 
afx_msg
 
OnSaveBuâ⁄
();

86 
	$DECLARE_MESSAGE_MAP
(Ë
CCrôiˇlSe˘i⁄
 
CrôSe˘
;

87 
CSåög
 
Ouçut
;

88 
NumLöes
;

90 
Frozí
;

92 
CF⁄t
 
EdôF⁄t
;

93 
CBrush
 
WhôeBrush
;

94 
	}
};

	@gui/win32/Main/MyDialog2.cpp

41 
	~"°dafx.h
"

42 
	~"Fr⁄ãnd.h
"

43 
	~"MyDülog2.h
"

45 #ifde‡
_DEBUG


46 
	#√w
 
DEBUG_NEW


	)

47 #unde‡
THIS_FILE


48 
	gTHIS_FILE
[] = 
__FILE__
;

51 
	#MAXIF
 100

	)

53 
	gMyDülog2
::
	$MyDülog2
(
CWnd
* 
pP¨ít
)

54 : 
	`CDülog
(
MyDülog2
::
IDD
, 
pP¨ít
)

56 
C⁄f
 = 
NULL
;

60 
	}
}

62 
	gMyDülog2
::
	$SëDebugLevñ
(
Levñ
)

64 
LevñText
[2];

66 
LevñText
[0] = ()(
Levñ
 + '0');

67 
LevñText
[1] = 0;

69 
DebugLevñ
 = 
Levñ
;

70 
m_DebugLevñ
.
	`SëPos
(
Levñ
);

71 
m_DebugLevñText
.
	`SëWödowText
(
LevñText
);

72 
	}
}

74 
BOOL
 
	gMyDülog2
::
	$Cª©e
(
CWnd
 *
P¨ít
)

76  
CDülog
::
	`Cª©e
(
MyDülog2
::
IDD
, 
P¨ít
);

77 
	}
}

79 
	gMyDülog2
::
	$DoD©aExch™ge
(
CD©aExch™ge
* 
pDX
)

81 
CDülog
::
	`DoD©aExch™ge
(
pDX
);

83 
	`DDX_C⁄åﬁ
(
pDX
, 
IDC_COMBO3
, 
m_LqAlgo
);

84 
	`DDX_C⁄åﬁ
(
pDX
, 
IDC_COMBO1
, 
m_TcRed
);

85 
	`DDX_C⁄åﬁ
(
pDX
, 
IDC_EDIT15
, 
m_M¥Cov
);

86 
	`DDX_C⁄åﬁ
(
pDX
, 
IDC_RADIO2
, 
m_EtxRadio2
);

87 
	`DDX_C⁄åﬁ
(
pDX
, 
IDC_RADIO1
, 
m_EtxRadio1
);

88 
	`DDX_C⁄åﬁ
(
pDX
, 
IDC_CHECK4
, 
m_EtxCheck
);

89 
	`DDX_C⁄åﬁ
(
pDX
, 
IDC_CHECK3
, 
m_Ipv6Check
);

90 
	`DDX_C⁄åﬁ
(
pDX
, 
IDC_CHECK2
, 
m_I¡î√tCheck
);

91 
	`DDX_C⁄åﬁ
(
pDX
, 
IDC_CHECK1
, 
m_Hy°Check
);

92 
	`DDX_C⁄åﬁ
(
pDX
, 
IDC_CHECK5
, 
m_FishEyeCheck
);

93 
	`DDX_C⁄åﬁ
(
pDX
, 
IDC_EDIT13
, 
m_Hy°ThªshﬁdHigh
);

94 
	`DDX_C⁄åﬁ
(
pDX
, 
IDC_EDIT12
, 
m_Hy°ThªshﬁdLow
);

95 
	`DDX_C⁄åﬁ
(
pDX
, 
IDC_EDIT11
, 
m_Hy°Sˇlög
);

96 
	`DDX_C⁄åﬁ
(
pDX
, 
IDC_EDIT10
, 
m_H«Hﬁd
);

97 
	`DDX_C⁄åﬁ
(
pDX
, 
IDC_EDIT9
, 
m_MidHﬁd
);

98 
	`DDX_C⁄åﬁ
(
pDX
, 
IDC_EDIT7
, 
m_PﬁlI¡
);

99 
	`DDX_C⁄åﬁ
(
pDX
, 
IDC_EDIT6
, 
m_TcHﬁd
);

100 
	`DDX_C⁄åﬁ
(
pDX
, 
IDC_EDIT5
, 
m_TcI¡
);

101 
	`DDX_C⁄åﬁ
(
pDX
, 
IDC_EDIT4
, 
m_H«I¡
);

102 
	`DDX_C⁄åﬁ
(
pDX
, 
IDC_EDIT3
, 
m_MidI¡
);

103 
	`DDX_C⁄åﬁ
(
pDX
, 
IDC_EDIT2
, 
m_HñloHﬁd
);

104 
	`DDX_C⁄åﬁ
(
pDX
, 
IDC_EDIT1
, 
m_HñloI¡
);

105 
	`DDX_C⁄åﬁ
(
pDX
, 
IDC_LIST1
, 
m_I¡îÁ˚Li°
);

106 
	`DDX_C⁄åﬁ
(
pDX
, 
IDC_TEXT1
, 
m_DebugLevñText
);

107 
	`DDX_C⁄åﬁ
(
pDX
, 
IDC_SLIDER2
, 
m_DebugLevñ
);

109 
	}
}

111 
	$BEGIN_MESSAGE_MAP
(
MyDülog2
, 
CDülog
)

113 
	$ON_WM_HSCROLL
()

114 
	$ON_BN_CLICKED
(
IDC_CHECK1
, 
OnHy°Check
)

115 
	$ON_BN_CLICKED
(
IDC_BUTTON4
, 
OnO≥nBuâ⁄
)

116 
	$ON_BN_CLICKED
(
IDC_BUTTON5
, 
OnSaveBuâ⁄
)

117 
	$ON_BN_CLICKED
(
IDC_BUTTON1
, 
OnRe£tBuâ⁄
)

118 
	$ON_BN_CLICKED
(
IDC_CHECK4
, 
OnEtxCheck
)

119 
	$ON_BN_CLICKED
(
IDC_RADIO1
, 
OnEtxRadio1
)

120 
	$ON_BN_CLICKED
(
IDC_RADIO2
, 
OnEtxRadio2
)

121 
	$ON_BN_CLICKED
(
IDOK
, 
OnOK
)

122 
	$ON_BN_CLICKED
(
IDCANCEL
, 
OnC™˚l
)

124 
	$END_MESSAGE_MAP
()

126 
MyDülog2
::
	$OnOK
()

128 
	}
}

130 
MyDülog2
::
	$OnC™˚l
()

132 
	}
}

134 
MyDülog2
::
	$OnHS¸ﬁl
(
UINT
 
nSBCode
, UINT 
nPos
, 
CS¸ﬁlB¨
* 
pS¸ﬁlB¨
)

136 i‡(
pS¸ﬁlB¨
 =(
CS¸ﬁlB¨
 *)&
m_DebugLevñ
)

137 
	`SëDebugLevñ
(
m_DebugLevñ
.
	`GëPos
());

139 
CDülog
::
	`OnHS¸ﬁl
(
nSBCode
, 
nPos
, 
pS¸ﬁlB¨
);

140 
	}
}

142 
	gMyDülog2
::
	$Re£t
()

144 
P©hName
[
MAX_PATH
 + 50];

145 *
WÆkî
;

146 
i
;

148 ::
	`GëModuÀFûeName
(
NULL
, 
P©hName
, 
MAX_PATH
);

150 
WÆkî
 = 
P©hName
; *Walker != 0; Walker++);

152 *
WÆkî
 != '\\')

153 
WÆkî
--;

155 
	`l°r˝y
(
WÆkî
 + 1, "Default.olsr");

157 i‡(
	`O≥nC⁄figFûe
(
P©hName
) < 0)

160 
m_Ipv6Check
.
	`SëCheck
(
FALSE
);

162 i‡(
C⁄f
->
öãrÁ˚s
 =
NULL
)

164 
i
 = 0; i < 
I¡îÁ˚s
->
	`GëSize
(); i++)

166 i‡((*
IsWœn
)[
i
] == "-")

167 
m_I¡îÁ˚Li°
.
	`SëCheck
(
i
, 
FALSE
);

170 
m_I¡îÁ˚Li°
.
	`SëCheck
(
i
, 
TRUE
);

173 
	}
}

175 
BOOL
 
	gMyDülog2
::
	$OnInôDülog
()

177 
i
;

179 
CDülog
::
	`OnInôDülog
();

181 
m_DebugLevñ
.
	`SëR™ge
(0, 9, 
TRUE
);

183 
m_I¡îÁ˚Li°
.
	`SëExãndedStyÀ
(m_I¡îÁ˚Li°.
	`GëExãndedStyÀ
() |

184 
LVS_EX_CHECKBOXES
);

186 
i
 = 0; i < 
I¡îÁ˚s
->
	`GëSize
(); i++)

188 
m_I¡îÁ˚Li°
.
	`In£πIãm
(
i
,

189 (*
I¡îÁ˚s
)[
i
] + " - " + (*
Addªs£s
)[i]);

192 
MIB_IPFORWARDROW
 
IpFwdRow
;

194 i‡(::
	`GëBe°Rouã
(0, 0, &
IpFwdRow
Ë!
NO_ERROR
)

195 
m_I¡î√tCheck
.
	`E«bÀWödow
(
FALSE
);

197 
m_M¥Cov
.
	`LimôText
(1);

199 
	`Re£t
();

201  
TRUE
;

202 
	}
}

204 
	gMyDülog2
::
	$OnHy°Check
()

206 
BOOL
 
E«Dis
 = 
m_Hy°Check
.
	`GëCheck
();

208 
m_Hy°ThªshﬁdLow
.
	`E«bÀWödow
(
E«Dis
);

209 
m_Hy°ThªshﬁdHigh
.
	`E«bÀWödow
(
E«Dis
);

210 
m_Hy°Sˇlög
.
	`E«bÀWödow
(
E«Dis
);

211 
	}
}

213 
	gMyDülog2
::
	$OnEtxCheckW‹kî
()

215 
BOOL
 
E«Dis
 = 
m_EtxCheck
.
	`GëCheck
();

217 
m_EtxRadio1
.
	`E«bÀWödow
(
E«Dis
);

218 
m_EtxRadio2
.
	`E«bÀWödow
(
E«Dis
);

219 
m_FishEyeCheck
.
	`E«bÀWödow
(
E«Dis
);

220 
	}
}

222 
	gMyDülog2
::
	$OnEtxCheck
()

224 
	`OnEtxCheckW‹kî
();

226 
	`AfxMesßgeBox
("WARNING - ThisÖarameter breaks compliance withÅhe OLSR standard.\n\n"

229 
	}
}

231 
	gMyDülog2
::
	$O≥nC⁄figFûe
(
CSåög
 
P©hName
)

233 
ù_¥efix_li°
 *
H«
;

234 
ﬁ§_if
 *
I¡
, *
PªvI¡
;

235 
ﬁ§_msg_∑øms
 *
MsgP¨
;

236 
NumI¡
 = 
m_I¡îÁ˚Li°
.
	`GëIãmCou¡
();

237 
i
;

238 
CSåög
 
I¡Name
;

239 
CSåög
 
C⁄v
;

241 i‡(
C⁄f
 !
NULL
)

242 
	`ﬁ§d_‰ì_˙f
(
C⁄f
);

244 i‡(
	`ﬁ§d_∑r£_˙f
(
P©hName
) < 0)

247 
C⁄f
 = 
ﬁ§_˙f
;

249 
i
 = 0; i < 
NumI¡
; i++)

250 
m_I¡îÁ˚Li°
.
	`SëCheck
(
i
, 
FALSE
);

252 
I¡
 = 
C⁄f
->
öãrÁ˚s
; I¡ !
NULL
; I¡ = I¡->
√xt
)

254 
I¡Name
 = 
I¡
->
«me
;

255 
I¡Name
.
	`MakeUµî
();

257 
i
 = 0; i < 
NumI¡
; i++)

259 i‡(
m_I¡îÁ˚Li°
.
	`GëIãmText
(
i
, 0).
	`Mid
(0, 4Ë=
I¡Name
)

260 
m_I¡îÁ˚Li°
.
	`SëCheck
(
i
, 
TRUE
);

264 
I¡
 = 
C⁄f
->
öãrÁ˚s
;

266 
MsgP¨
 = &
I¡
->
˙f
->
hñlo_∑øms
;

268 
C⁄v
.
	`F‹m©
("%.2f", 
MsgP¨
->
emissi⁄_öãrvÆ
);

269 
m_HñloI¡
.
	`SëWödowText
(
C⁄v
);

271 
C⁄v
.
	`F‹m©
("%.2f", 
MsgP¨
->
vÆidôy_time
);

272 
m_HñloHﬁd
.
	`SëWödowText
(
C⁄v
);

274 
MsgP¨
 = &
I¡
->
˙f
->
tc_∑øms
;

276 
C⁄v
.
	`F‹m©
("%.2f", 
MsgP¨
->
emissi⁄_öãrvÆ
);

277 
m_TcI¡
.
	`SëWödowText
(
C⁄v
);

279 
C⁄v
.
	`F‹m©
("%.2f", 
MsgP¨
->
vÆidôy_time
);

280 
m_TcHﬁd
.
	`SëWödowText
(
C⁄v
);

282 
MsgP¨
 = &
I¡
->
˙f
->
mid_∑øms
;

284 
C⁄v
.
	`F‹m©
("%.2f", 
MsgP¨
->
emissi⁄_öãrvÆ
);

285 
m_MidI¡
.
	`SëWödowText
(
C⁄v
);

287 
C⁄v
.
	`F‹m©
("%.2f", 
MsgP¨
->
vÆidôy_time
);

288 
m_MidHﬁd
.
	`SëWödowText
(
C⁄v
);

290 
MsgP¨
 = &
I¡
->
˙f
->
h«_∑øms
;

292 
C⁄v
.
	`F‹m©
("%.2f", 
MsgP¨
->
emissi⁄_öãrvÆ
);

293 
m_H«I¡
.
	`SëWödowText
(
C⁄v
);

295 
C⁄v
.
	`F‹m©
("%.2f", 
MsgP¨
->
vÆidôy_time
);

296 
m_H«Hﬁd
.
	`SëWödowText
(
C⁄v
);

298 
	`SëDebugLevñ
(
C⁄f
->
debug_Àvñ
);

300 
C⁄v
.
	`F‹m©
("%.2f", 
C⁄f
->
pﬁÃ©e
);

301 
m_PﬁlI¡
.
	`SëWödowText
(
C⁄v
);

303 
C⁄v
.
	`F‹m©
("%d", 
C⁄f
->
m¥_covîage
);

304 
m_M¥Cov
.
	`SëWödowText
(
C⁄v
);

306 
m_TcRed
.
	`SëCurSñ
(
C⁄f
->
tc_ªdund™cy
);

308 
m_LqAlgo
.
	`SëCurSñ
(m_LqAlgo.
	`FödSåögExa˘
(-1, 
C⁄f
->
lq_Æg‹ôhm
));

310 
m_Hy°Check
.
	`SëCheck
(
C⁄f
->
u£_hy°îesis
);

312 
C⁄v
.
	`F‹m©
("%.2f", 
C⁄f
->
hy°îesis_∑øm
.
sˇlög
);

313 
m_Hy°Sˇlög
.
	`SëWödowText
(
C⁄v
);

315 
C⁄v
.
	`F‹m©
("%.2f", 
C⁄f
->
hy°îesis_∑øm
.
thr_high
);

316 
m_Hy°ThªshﬁdHigh
.
	`SëWödowText
(
C⁄v
);

318 
C⁄v
.
	`F‹m©
("%.2f", 
C⁄f
->
hy°îesis_∑øm
.
thr_low
);

319 
m_Hy°ThªshﬁdLow
.
	`SëWödowText
(
C⁄v
);

321 
	`OnHy°Check
();

323 
m_FishEyeCheck
.
	`SëCheck
(
C⁄f
->
lq_fish
 > 0);

325 
m_EtxCheck
.
	`SëCheck
(
C⁄f
->
lq_Àvñ
 > 0);

328 
C⁄v
.
	`F‹m©
("%d", 
C⁄f
->
lq_wsize
);

329 
m_EtxWödowSize
.
	`SëWödowText
(
C⁄v
);

332 
m_EtxRadio1
.
	`SëCheck
(
C⁄f
->
lq_Àvñ
 == 1);

333 
m_EtxRadio2
.
	`SëCheck
(
C⁄f
->
lq_Àvñ
 == 0 || Conf->lq_level == 2);

335 
	`OnEtxCheckW‹kî
();

337 
m_I¡î√tCheck
.
	`SëCheck
(
FALSE
);

339 
H«
 = 
C⁄f
->
h«_íåõs
; H« !
NULL
; H« = H«->
√xt
)

340 i‡(0 =
H«
->
√t
.
¥efix_Àn
 &&

341 
m_I¡î√tCheck
.
	`IsWödowE«bÀd
())

342 
m_I¡î√tCheck
.
	`SëCheck
(
TRUE
);

344 
PªvI¡
 = 
NULL
;

346 
I¡
 = 
C⁄f
->
öãrÁ˚s
; I¡ !
NULL
; I¡ = I¡->
√xt
)

348 
I¡Name
 = 
I¡
->
«me
;

350 i‡(
I¡Name
.
	`Com∑ªNoCa£
("GUI") == 0)

353 
PªvI¡
 = 
I¡
;

356 i‡(
I¡
 !
NULL
)

358 i‡(
PªvI¡
 =
NULL
)

359 
C⁄f
->
öãrÁ˚s
 = 
I¡
->
√xt
;

362 
PªvI¡
->
√xt
 = 
I¡
->next;

364 
	`wö32_ﬁ§d_‰ì
(
I¡
);

368 
	}
}

370 
ﬁ§_if
 *
	$AddI¡îÁ˚
(
ﬁ§d_c⁄fig
 **
C⁄f
, 
CSåög
 
Name
)

372 
ﬁ§_if
 *
I¡
;

374 
I¡
 = (
ﬁ§_if
 *)
	`wö32_ﬁ§d_mÆloc
( (olsr_if));

376 i‡(
I¡
 =
NULL
)

378 
	`AfxMesßgeBox
("Cannotállocate memory.");

379  
NULL
;

382 
I¡
->
«me
 = (*)
	`wö32_ﬁ§d_mÆloc
(
Name
.
	`GëLígth
() + 1);

384 i‡(
I¡
->
«me
 =
NULL
)

386 
	`wö32_ﬁ§d_‰ì
(
I¡
);

388 
	`AfxMesßgeBox
("Cannotállocate memory.");

389  
NULL
;

392 ::
	`l°r˝y
(
I¡
->
«me
, 
Name
);

394 
I¡
->
c⁄fig
 = 
NULL
;

395 
I¡
->
c⁄figuªd
 = 
Ál£
;

396 
I¡
->
öãrf
 = 
NULL
;

398 
I¡
->
˙f
 = 
	`gë_deÁu…_if_c⁄fig
();

400 
I¡
->
√xt
 = (*
C⁄f
)->
öãrÁ˚s
;

401 (*
C⁄f
)->
öãrÁ˚s
 = 
I¡
;

403  
I¡
;

404 
	}
}

406 
	gMyDülog2
::
	$SaveC⁄figFûe
(
CSåög
 
P©hName
, 
Ról
)

408 
ﬁ§_if
 *
I¡
, *
PªvI¡
;

409 
ﬁ§_msg_∑øms
 *
MsgP¨
;

410 
CSåög
 
C⁄v
;

411 
ù_¥efix_li°
 *
H«
, *
NewH«
, *
PªvH«
;

412 
NumI¡
 = 
m_I¡îÁ˚Li°
.
	`GëIãmCou¡
();

413 
i
;

414 
CSåög
 
I¡Name
, 
I¡Name2
;

415 
ù_¥efix_li°
 *
IpcHo°
;

416 
ﬁ§_ù_addr
 
Loˇl
;

418 
PªvI¡
 = 
NULL
;

422 
I¡
 = 
C⁄f
->
öãrÁ˚s
; I¡ !
NULL
; I¡ = I¡->
√xt
)

424 
I¡Name
 = 
I¡
->
«me
;

425 
I¡Name
.
	`MakeUµî
();

427 
i
 = 0; i < 
NumI¡
; i++)

428 i‡(
m_I¡îÁ˚Li°
.
	`GëIãmText
(
i
, 0).
	`Mid
(0, 4Ë=
I¡Name
)

431 i‡(
i
 =
NumI¡
 || !
m_I¡îÁ˚Li°
.
	`GëCheck
(i))

433 i‡(
PªvI¡
 !
NULL
)

434 
PªvI¡
->
√xt
 = 
I¡
->next;

437 
C⁄f
->
öãrÁ˚s
 = 
I¡
->
√xt
;

443 
i
 = 0; i < 
NumI¡
; i++)

445 i‡(!
m_I¡îÁ˚Li°
.
	`GëCheck
(
i
))

448 
I¡Name2
 = 
m_I¡îÁ˚Li°
.
	`GëIãmText
(
i
, 0).
	`Mid
(0, 4);

450 
I¡
 = 
C⁄f
->
öãrÁ˚s
; I¡ !
NULL
; I¡ = I¡->
√xt
)

452 
I¡Name
 = 
I¡
->
«me
;

453 
I¡Name
.
	`MakeUµî
();

455 i‡(
I¡Name2
 =
I¡Name
)

459 i‡(
I¡
 =
NULL
)

460 
	`AddI¡îÁ˚
(&
C⁄f
, 
m_I¡îÁ˚Li°
.
	`GëIãmText
(
i
, 0).
	`Mid
(0, 4));

465 i‡(
C⁄f
->
öãrÁ˚s
 =
NULL
 && 
Ról
 != 0)

466 
	`AddI¡îÁ˚
(&
C⁄f
, "GUI");

470 
I¡
 = 
C⁄f
->
öãrÁ˚s
; I¡ !
NULL
; I¡ = I¡->
√xt
)

472 
MsgP¨
 = &
I¡
->
˙f
->
hñlo_∑øms
;

474 
m_HñloI¡
.
	`GëWödowText
(
C⁄v
);

475 
MsgP¨
->
emissi⁄_öãrvÆ
 = ()
	`©of
(
C⁄v
);

477 
m_HñloHﬁd
.
	`GëWödowText
(
C⁄v
);

478 
MsgP¨
->
vÆidôy_time
 = ()
	`©of
(
C⁄v
);

480 
MsgP¨
 = &
I¡
->
˙f
->
tc_∑øms
;

482 
m_TcI¡
.
	`GëWödowText
(
C⁄v
);

483 
MsgP¨
->
emissi⁄_öãrvÆ
 = ()
	`©of
(
C⁄v
);

485 
m_TcHﬁd
.
	`GëWödowText
(
C⁄v
);

486 
MsgP¨
->
vÆidôy_time
 = ()
	`©of
(
C⁄v
);

488 
MsgP¨
 = &
I¡
->
˙f
->
mid_∑øms
;

490 
m_MidI¡
.
	`GëWödowText
(
C⁄v
);

491 
MsgP¨
->
emissi⁄_öãrvÆ
 = ()
	`©of
(
C⁄v
);

493 
m_MidHﬁd
.
	`GëWödowText
(
C⁄v
);

494 
MsgP¨
->
vÆidôy_time
 = ()
	`©of
(
C⁄v
);

496 
MsgP¨
 = &
I¡
->
˙f
->
h«_∑øms
;

498 
m_H«I¡
.
	`GëWödowText
(
C⁄v
);

499 
MsgP¨
->
emissi⁄_öãrvÆ
 = ()
	`©of
(
C⁄v
);

501 
m_H«Hﬁd
.
	`GëWödowText
(
C⁄v
);

502 
MsgP¨
->
vÆidôy_time
 = ()
	`©of
(
C⁄v
);

507 
C⁄f
->
debug_Àvñ
 = 
DebugLevñ
;

509 
m_PﬁlI¡
.
	`GëWödowText
(
C⁄v
);

510 
C⁄f
->
pﬁÃ©e
 = ()
	`©of
(
C⁄v
);

512 
C⁄f
->
tc_ªdund™cy
 = ()
m_TcRed
.
	`GëCurSñ
();

514 
i
 = 
m_LqAlgo
.
	`GëCurSñ
();

515 
C⁄f
->
lq_Æg‹ôhm
 = 
NULL
;

516 i‡(0 <
i
)

518 
CSåög
 
°r
;

519 
m_LqAlgo
.
	`GëLBText
(
i
, 
°r
);

520 
C⁄f
->
lq_Æg‹ôhm
 = 
	`°rdup
((
LPCTSTR
)
°r
);

523 
m_M¥Cov
.
	`GëWödowText
(
C⁄v
);

524 
C⁄f
->
m¥_covîage
 = ()
	`©oi
(
C⁄v
);

526 
C⁄f
->
u£_hy°îesis
 = 
m_Hy°Check
.
	`GëCheck
(Ë? 
åue
 : 
Ál£
;

528 
m_Hy°Sˇlög
.
	`GëWödowText
(
C⁄v
);

529 
C⁄f
->
hy°îesis_∑øm
.
sˇlög
 = ()
	`©of
(
C⁄v
);

531 
m_Hy°ThªshﬁdHigh
.
	`GëWödowText
(
C⁄v
);

532 
C⁄f
->
hy°îesis_∑øm
.
thr_high
 = ()
	`©of
(
C⁄v
);

534 
m_Hy°ThªshﬁdLow
.
	`GëWödowText
(
C⁄v
);

535 
C⁄f
->
hy°îesis_∑øm
.
thr_low
 = ()
	`©of
(
C⁄v
);

537 i‡(!
m_EtxCheck
.
	`GëCheck
())

538 
C⁄f
->
lq_Àvñ
 = 0;

540 i‡(
m_EtxRadio1
.
	`GëCheck
())

541 
C⁄f
->
lq_Àvñ
 = 1;

544 
C⁄f
->
lq_Àvñ
 = 2;

546 i‡(!
m_FishEyeCheck
.
	`GëCheck
())

547 
C⁄f
->
lq_fish
 = 0;

550 
C⁄f
->
lq_fish
 = 1;

552 
PªvH«
 = 
NULL
;

556 
H«
 = 
C⁄f
->
h«_íåõs
; H« !
NULL
; H« = H«->
√xt
)

558 i‡(0 =
H«
->
√t
.
¥efix_Àn
)

561 
PªvH«
 = 
H«
;

566 i‡(
m_I¡î√tCheck
.
	`GëCheck
(Ë&& 
H«
 =
NULL
)

568 
NewH«
 = (
ù_¥efix_li°
 * )

569 
	`wö32_ﬁ§d_mÆloc
( (
ù_¥efix_li°
));

571 i‡(
NewH«
 =
NULL
)

573 
	`AfxMesßgeBox
("Cannotállocate memory.");

577 
	`mem£t
(
NewH«
, 0,  (
ù_¥efix_li°
));

579 
NewH«
->
√xt
 = 
C⁄f
->
h«_íåõs
;

580 
C⁄f
->
h«_íåõs
 = 
NewH«
;

585 i‡(!
m_I¡î√tCheck
.
	`GëCheck
(Ë&& 
H«
 !
NULL
)

587 i‡(
PªvH«
 =
NULL
)

588 
C⁄f
->
h«_íåõs
 = 
H«
->
√xt
;

591 
PªvH«
->
√xt
 = 
H«
->next;

593 
	`wö32_ﬁ§d_‰ì
(
H«
);

596 i‡(
AF_INET
 =
C⁄f
->
ù_vîsi⁄
)

598 
Loˇl
.
v4
.
s_addr
 = ::
	`öë_addr
("127.0.0.1");

602 
	`mem£t
(&
Loˇl
, 0, (Local));

603 
Loˇl
.
v6
.
u
.
Byã
[15] = 1;

606 
IpcHo°
 = 
C⁄f
->
ùc_√ts
; IpcHo° !
NULL
; IpcHo° = IpcHo°->
√xt
)

607 i‡(0 =
	`memcmp
(&
IpcHo°
->
√t
.
¥efix
, &
Loˇl
, 
C⁄f
->
ùsize
))

610 i‡(
IpcHo°
 =
NULL
 && 
Ról
 == 0)

612 
IpcHo°
 = (
ù_¥efix_li°
 *)

613 
	`wö32_ﬁ§d_mÆloc
( (
ù_¥efix_li°
));

615 i‡(
IpcHo°
 =
NULL
)

617 
	`AfxMesßgeBox
("Cannotállocate memory.");

621 
IpcHo°
->
√t
.
¥efix
 = 
Loˇl
;

622 
IpcHo°
->
√t
.
¥efix_Àn
 = (
uöt8_t
)
C⁄f
->
ùsize
;

624 
IpcHo°
->
√xt
 = 
C⁄f
->
ùc_√ts
;

625 
C⁄f
->
ùc_√ts
 = 
IpcHo°
;

627 
C⁄f
->
ùc_c⁄√˘i⁄s
++;

632 i‡(
	`ﬁ§d_wrôe_˙f
(
C⁄f
, 
P©hName
) < 0)

636 
	}
}

638 
	gMyDülog2
::
	$OnSaveBuâ⁄
()

640 
CFûeDülog
 
	`FûeDülog
(
FALSE
);

641 
CSåög
 
FûeName
 = "Default.olsr";

642 
CSåög
 
P©hName
;

644 
FûeDülog
.
m_o‚
.
Õ°rFûãr
 = "Configuration file (*.olsr)\0*.olsr\0";

645 
FûeDülog
.
m_o‚
.
nFûãrIndex
 = 1;

647 
FûeDülog
.
m_o‚
.
Õ°rFûe
 = 
FûeName
.
	`GëBuf„r
(500);

648 
FûeDülog
.
m_o‚
.
nMaxFûe
 = 500;

650 i‡(
FûeDülog
.
	`DoModÆ
(Ë=
IDOK
)

652 
P©hName
 = 
FûeDülog
.
	`GëP©hName
();

654 i‡(
	`SaveC⁄figFûe
(
P©hName
, 1) < 0)

655 
	`AfxMesßgeBox
("C™nŸ savêc⁄figuøti⁄ fûê'" + 
P©hName
 + "'.");

658 
FûeName
.
	`Rñó£Buf„r
();

659 
	}
}

661 
	gMyDülog2
::
	$OnO≥nBuâ⁄
()

663 
CFûeDülog
 
	`FûeDülog
(
TRUE
);

664 
CSåög
 
FûeName
 = "Default.olsr";

665 
CSåög
 
P©hName
;

667 
FûeDülog
.
m_o‚
.
Õ°rFûãr
 = "Configuration file (*.olsr)\0*.olsr\0";

668 
FûeDülog
.
m_o‚
.
nFûãrIndex
 = 1;

670 
FûeDülog
.
m_o‚
.
Õ°rFûe
 = 
FûeName
.
	`GëBuf„r
(500);

671 
FûeDülog
.
m_o‚
.
nMaxFûe
 = 500;

673 i‡(
FûeDülog
.
	`DoModÆ
(Ë=
IDOK
)

675 
P©hName
 = 
FûeDülog
.
	`GëP©hName
();

677 i‡(
	`O≥nC⁄figFûe
(
P©hName
) < 0)

678 
	`AfxMesßgeBox
("C™nŸ o≥¿c⁄figuøti⁄ fûê'" + 
P©hName
 + "'.");

681 
FûeName
.
	`Rñó£Buf„r
();

682 
	}
}

684 
	gMyDülog2
::
	$OnRe£tBuâ⁄
()

686 
	`Re£t
();

687 
	}
}

689 
	gMyDülog2
::
	$OnEtxRadio1
()

691 
m_EtxRadio2
.
	`SëCheck
(
FALSE
);

692 
	}
}

694 
	gMyDülog2
::
	$OnEtxRadio2
()

696 
m_EtxRadio1
.
	`SëCheck
(
FALSE
);

697 
	}
}

	@gui/win32/Main/MyDialog2.h

42 #i‡!
deföed
(
AFX_MYDIALOG2_H__1A381668_A36B_4C51_9B79_643BC2A59D88__INCLUDED_
)

43 
	#AFX_MYDIALOG2_H__1A381668_A36B_4C51_9B79_643BC2A59D88__INCLUDED_


	)

45 #i‡
_MSC_VER
 > 1000

46 #¥agm®
⁄˚


49 
	~"MyEdô.h
"

51 
	#MAKELIB


	)

52 
	#OLSR_PLUGIN


	)

53 
	~<ﬁ§_cfg.h
>

54 
	~"afxwö.h
"

56 ˛as†
	cMyDülog2
:
public
 
CDülog
 {

57 
public
:

58 
MyDülog2
(
CWnd
 * 
pP¨ít
 = 
NULL
);

60 
BOOL
 
Cª©e
(
CWnd
 * 
P¨ít
);

62 
O≥nC⁄figFûe
(
CSåög
);

63 
SaveC⁄figFûe
(
CSåög
, );

65 
CSåögAºay
 *
	mI¡îÁ˚s
;

66 
CSåögAºay
 *
	mAddªs£s
;

67 
CSåögAºay
 *
	mIsWœn
;

69 
ﬁ§d_c⁄fig
 *
	mC⁄f
;

72 íum { 
	mIDD
 = 
IDD_DIALOG2
 };

73 
CComboBox
 
	gm_LqAlgo
;

74 
CComboBox
 
	gm_TcRed
;

75 
CEdô
 
	gm_M¥Cov
;

76 
CBuâ⁄
 
	gm_EtxRadio2
;

77 
CBuâ⁄
 
	gm_EtxRadio1
;

78 
CBuâ⁄
 
	gm_EtxCheck
;

79 
CBuâ⁄
 
	gm_Ipv6Check
;

80 
CBuâ⁄
 
	gm_I¡î√tCheck
;

81 
CBuâ⁄
 
	gm_Hy°Check
;

82 
CBuâ⁄
 
	gm_FishEyeCheck
;

83 
MyEdô
 
	gm_Hy°ThªshﬁdHigh
;

84 
MyEdô
 
	gm_Hy°ThªshﬁdLow
;

85 
MyEdô
 
	gm_Hy°Sˇlög
;

86 
MyEdô
 
	gm_H«Hﬁd
;

87 
MyEdô
 
	gm_MidHﬁd
;

88 
MyEdô
 
	gm_PﬁlI¡
;

89 
MyEdô
 
	gm_TcHﬁd
;

90 
MyEdô
 
	gm_TcI¡
;

91 
MyEdô
 
	gm_H«I¡
;

92 
MyEdô
 
	gm_MidI¡
;

93 
MyEdô
 
	gm_HñloHﬁd
;

94 
MyEdô
 
	gm_HñloI¡
;

95 
CLi°Cål
 
	gm_I¡îÁ˚Li°
;

96 
CSètic
 
	gm_DebugLevñText
;

97 
CSlidîCål
 
	gm_DebugLevñ
;

101 
	g¥Ÿe˘ed
:

102 
vútuÆ
 
DoD©aExch™ge
(
CD©aExch™ge
 * 
pDX
);

105 
	g¥Ÿe˘ed
:

108 
afx_msg
 
OnOK
();

109 
afx_msg
 
OnC™˚l
();

110 
afx_msg
 
OnHS¸ﬁl
(
UINT
 
nSBCode
, UINT 
nPos
, 
CS¸ﬁlB¨
 * 
pS¸ﬁlB¨
);

111 
vútuÆ
 
BOOL
 
OnInôDülog
();

112 
afx_msg
 
OnHy°Check
();

113 
afx_msg
 
OnO≥nBuâ⁄
();

114 
afx_msg
 
OnSaveBuâ⁄
();

115 
afx_msg
 
OnRe£tBuâ⁄
();

116 
afx_msg
 
OnEtxCheck
();

117 
afx_msg
 
OnEtxRadio1
();

118 
afx_msg
 
OnEtxRadio2
();

120 
	$DECLARE_MESSAGE_MAP
(Ë
CF⁄t
 
EdôF⁄t
;

122 
DebugLevñ
;

123 
	`SëDebugLevñ
();

125 
	`Re£t
();

127 
	`OnEtxCheckW‹kî
();

128 
	}
};

	@gui/win32/Main/MyDialog3.cpp

41 
	~"°dafx.h
"

42 
	~"Fr⁄ãnd.h
"

43 
	~"MyDülog3.h
"

45 
	~"M¥E¡ry.h
"

46 
	~"MidE¡ry.h
"

47 
	~"H«E¡ry.h
"

49 #ifde‡
_DEBUG


50 
	#√w
 
DEBUG_NEW


	)

51 #unde‡
THIS_FILE


52 
	gTHIS_FILE
[] = 
__FILE__
;

55 
	gMyDülog3
::
	$MyDülog3
(
CWnd
* 
pP¨ít
)

56 : 
	`CDülog
(
MyDülog3
::
IDD
, 
pP¨ít
)

58 
La°Upd©e
 = 0;

59 
Info
 = 
NULL
;

63 
	}
}

65 
BOOL
 
	gMyDülog3
::
	$Cª©e
(
CWnd
 *
P¨ít
)

67  
CDülog
::
	`Cª©e
(
MyDülog3
::
IDD
, 
P¨ít
);

68 
	}
}

70 
	gMyDülog3
::
	$DoD©aExch™ge
(
CD©aExch™ge
* 
pDX
)

72 
CDülog
::
	`DoD©aExch™ge
(
pDX
);

74 
	`DDX_C⁄åﬁ
(
pDX
, 
IDC_LIST6
, 
m_H«Li°
);

75 
	`DDX_C⁄åﬁ
(
pDX
, 
IDC_LIST5
, 
m_MidLi°
);

76 
	`DDX_C⁄åﬁ
(
pDX
, 
IDC_LIST4
, 
m_M¥Li°
);

77 
	`DDX_C⁄åﬁ
(
pDX
, 
IDC_LIST1
, 
m_NodeLi°
);

79 
	}
}

81 
	$BEGIN_MESSAGE_MAP
(
MyDülog3
, 
CDülog
)

83 
	$ON_BN_CLICKED
(
IDOK
, 
OnOK
)

84 
	$ON_BN_CLICKED
(
IDCANCEL
, 
OnC™˚l
)

85 
	$ON_NOTIFY
(
LVN_ITEMCHANGED
, 
IDC_LIST1
, 
OnIãmch™gedNodeLi°
)

87 
	$END_MESSAGE_MAP
()

89 
MyDülog3
::
	$OnOK
()

91 
	}
}

93 
MyDülog3
::
	$OnC™˚l
()

95 
	}
}

97 
BOOL
 
MyDülog3
::
	$OnInôDülog
()

99 
CDülog
::
	`OnInôDülog
();

101 
m_NodeLi°
.
	`In£πCﬁumn
(0, "Addªss", 
LVCFMT_LEFT
, 110, 0);

102 
m_NodeLi°
.
	`In£πCﬁumn
(1, "Timeout", 
LVCFMT_LEFT
, 110, 1);

103 
m_NodeLi°
.
	`In£πCﬁumn
(2, "MID", 
LVCFMT_LEFT
, 68, 2);

104 
m_NodeLi°
.
	`In£πCﬁumn
(3, "HNA", 
LVCFMT_LEFT
, 67, 3);

106 
m_M¥Li°
.
	`In£πCﬁumn
(0, "MPR", 
LVCFMT_LEFT
, 169, 0);

108 
m_MidLi°
.
	`In£πCﬁumn
(0, "MID", 
LVCFMT_LEFT
, 169, 0);

110 
m_H«Li°
.
	`In£πCﬁumn
(0, "HNA", 
LVCFMT_LEFT
, 169, 0);

112  
TRUE
;

113 
	}
}

115 
	gMyDülog3
::
	$CÀ¨NodeInfo
()

117 
m_NodeLi°
.
	`DñëeAŒIãms
();

119 
m_M¥Li°
.
	`DñëeAŒIãms
();

120 
m_MidLi°
.
	`DñëeAŒIãms
();

121 
m_H«Li°
.
	`DñëeAŒIãms
();

123 i‡(
Info
 !
NULL
)

125 
dñëe
[] 
Info
;

126 
Info
 = 
NULL
;

128 
	}
}

130 
	gMyDülog3
::
Upd©eNodeInfo
(
CLi°
<
˛ass
 
NodeE¡ry
, cœs†NodeE¡ry &> &
NodeLi°
)

132 
SYSTEMTIME
 
	gSysTime
;

133 
FILETIME
 
	gFûeTime
;

134 
__öt64
 
	gNow
;

135 
˛ass
 
NodeE¡ry
 
	gE¡ry
;

136 
POSITION
 
	gPos
;

137 
CSåög
 
	gAddrSå
;

138 
CSåög
 
	gTimeoutSå
;

139 
	gIdx
, 
	gNum
;

140 
POSITION
 
	gPos2
;

141 
˛ass
 
M¥E¡ry
 
	gM¥E¡ry
;

142 
˛ass
 
MidE¡ry
 
	gMidE¡ry
;

143 
˛ass
 
H«E¡ry
 
	gH«E¡ry
;

144 
CSåög
 
	gCuºNode
;

146 ::
GëSy°emTime
(&
SysTime
);

147 ::
Sy°emTimeToFûeTime
(&
SysTime
, &
FûeTime
);

149 
	gNow
 = *(
__öt64
 *)&
FûeTime
;

151 i‡(
	gNow
 < 
	gLa°Upd©e
 + (
	g__öt64
)3 * (__int64)10000000)

154 
	gLa°Upd©e
 = 
Now
;

156 
	gCuºIãm
 = 
m_NodeLi°
.
GëNextIãm
(-1, 
LVNI_SELECTED
);

158 i‡(
	gCuºIãm
 >= 0)

159 
CuºNode
 = 
m_NodeLi°
.
GëIãmText
(
CuºIãm
, 0);

161 
	gm_NodeLi°
.
DñëeAŒIãms
();

163 i‡(
	gInfo
 !
NULL
)

165 
dñëe
[] 
Info
;

166 
	gInfo
 = 
NULL
;

169 
	gNum
 = 
NodeLi°
.
GëCou¡
();

171 i‡(
	gNum
 == 0)

174 
	gInfo
 = 
√w
 
˛ass
 
NodeInfo
[
Num
];

176 
	gPos
 = 
NodeLi°
.
GëHódPosôi⁄
();

178 
	gIdx
 = 0;

180 
	gPos
 !
NULL
)

182 
E¡ry
 = 
NodeLi°
.
GëNext
(
Pos
);

184 
	gPos2
 = 
E¡ry
.
M¥Li°
.
GëHódPosôi⁄
();

186 
	gPos2
 !
NULL
)

188 
M¥E¡ry
 = 
E¡ry
.
M¥Li°
.
GëNext
(
Pos2
);

190 
	gAddrSå
.
F‹m©
("%d.%d.%d.%d",

191 ((*)&
M¥E¡ry
.
Addr
)[0], ((*)&MprEntry.Addr)[1],

192 ((*)&
M¥E¡ry
.
Addr
)[2], ((*)&MprEntry.Addr)[3]);

194 
	gInfo
[
Idx
].
	gM¥Li°
.
Add
(
AddrSå
);

197 
	gPos2
 = 
E¡ry
.
MidLi°
.
GëHódPosôi⁄
();

199 
	gPos2
 !
NULL
)

201 
MidE¡ry
 = 
E¡ry
.
MidLi°
.
GëNext
(
Pos2
);

203 
	gAddrSå
.
F‹m©
("%d.%d.%d.%d",

204 ((*)&
MidE¡ry
.
Addr
)[0], ((*)&MidEntry.Addr)[1],

205 ((*)&
MidE¡ry
.
Addr
)[2], ((*)&MidEntry.Addr)[3]);

207 
	gInfo
[
Idx
].
	gMidLi°
.
Add
(
AddrSå
);

210 
	gPos2
 = 
E¡ry
.
H«Li°
.
GëHódPosôi⁄
();

212 
	gPos2
 !
NULL
)

214 
H«E¡ry
 = 
E¡ry
.
H«Li°
.
GëNext
(
Pos2
);

216 
	gMask
 = 0x80000000;

217 
	gVÆ
 = ::
¡ohl
(
H«E¡ry
.
Mask
);

218 
	gBôs
;

220 
	gBôs
 = 0; Bits < 32; Bits++)

222 i‡((
	gVÆ
 & 
	gMask
) == 0)

225 
	gMask
 >>= 1;

228 
	gAddrSå
.
F‹m©
("%d.%d.%d.%d/%d",

229 ((*)&
H«E¡ry
.
Addr
)[0], ((*)&HnaEntry.Addr)[1],

230 ((*)&
H«E¡ry
.
Addr
)[2], ((*)&HnaEntry.Addr)[3],

231 
Bôs
);

233 
	gInfo
[
Idx
].
	gH«Li°
.
Add
(
AddrSå
);

236 
	gAddrSå
.
F‹m©
("%d.%d.%d.%d",

237 ((*)&
E¡ry
.
Addr
)[0], ((*)&Entry.Addr)[1],

238 ((*)&
E¡ry
.
Addr
)[2], ((*)&Entry.Addr)[3]);

240 
	gm_NodeLi°
.
In£πIãm
(
Idx
, 
AddrSå
);

242 i‡(
	gAddrSå
 =
CuºNode
)

243 
m_NodeLi°
.
SëIãmSèã
(
Idx
, 
LVIS_SELECTED
, LVIS_SELECTED);

245 
SYSTEMTIME
 
	gSysTime
;

246 
FILETIME
 
	gLoˇlFûeTime
;

248 ::
FûeTimeToLoˇlFûeTime
((
FILETIME
 *)&
E¡ry
.
Timeout
, &
LoˇlFûeTime
);

249 ::
FûeTimeToSy°emTime
(&
LoˇlFûeTime
, &
SysTime
);

251 
	gTimeoutSå
.
F‹m©
("%02d:%02d:%02d", 
SysTime
.
wHour
, SysTime.
wMöuã
,

252 
SysTime
.
wSec⁄d
);

254 
	gm_NodeLi°
.
SëIãmText
(
Idx
, 1, 
TimeoutSå
);

256 i‡(
	gE¡ry
.
	gMidLi°
.
IsEm±y
())

257 
	gm_NodeLi°
.
SëIãmText
(
Idx
, 2, "no");

260 
	gm_NodeLi°
.
SëIãmText
(
Idx
, 2, "yes");

262 i‡(
	gE¡ry
.
	gH«Li°
.
IsEm±y
())

263 
	gm_NodeLi°
.
SëIãmText
(
Idx
, 3, "no");

266 
	gm_NodeLi°
.
SëIãmText
(
Idx
, 3, "yes");

268 
	gIdx
++;

272 
	gMyDülog3
::
	$OnIãmch™gedNodeLi°
(
NMHDR
* 
pNMHDR
, 
LRESULT
* 
pResu…
)

274 
Iãm
;

275 
Idx
;

276 
Num
;

278 
pNMHDR
 =ÖNMHDR;

280 *
pResu…
 = 0;

282 
Iãm
 = 
m_NodeLi°
.
	`GëNextIãm
(-1, 
LVNI_SELECTED
);

284 i‡(
Iãm
 < 0)

287 
m_M¥Li°
.
	`DñëeAŒIãms
();

289 
Num
 = 
Info
[
Iãm
].
M¥Li°
.
	`GëSize
();

291 
Idx
 = 0; Idx < 
Num
; Idx++)

292 
m_M¥Li°
.
	`In£πIãm
(
Idx
, 
Info
[
Iãm
].
M¥Li°
.
	`GëAt
(Idx));

294 
m_MidLi°
.
	`DñëeAŒIãms
();

296 
Num
 = 
Info
[
Iãm
].
MidLi°
.
	`GëSize
();

298 
Idx
 = 0; Idx < 
Num
; Idx++)

299 
m_MidLi°
.
	`In£πIãm
(
Idx
, 
Info
[
Iãm
].
MidLi°
.
	`GëAt
(Idx));

301 
m_H«Li°
.
	`DñëeAŒIãms
();

303 
Num
 = 
Info
[
Iãm
].
H«Li°
.
	`GëSize
();

305 
Idx
 = 0; Idx < 
Num
; Idx++)

306 
m_H«Li°
.
	`In£πIãm
(
Idx
, 
Info
[
Iãm
].
H«Li°
.
	`GëAt
(Idx));

307 
	}
}

	@gui/win32/Main/MyDialog3.h

42 #i‡!
deföed
(
AFX_MYDIALOG3_H__1A381668_A36B_4C51_9B79_643BC2A59D88__INCLUDED_
)

43 
	#AFX_MYDIALOG3_H__1A381668_A36B_4C51_9B79_643BC2A59D88__INCLUDED_


	)

45 #i‡
_MSC_VER
 > 1000

46 #¥agm®
⁄˚


49 
	~"NodeE¡ry.h
"

51 ˛as†
	cNodeInfo
 {

52 
	mpublic
:

53 
CSåögAºay
 
M¥Li°
;

54 
CSåögAºay
 
	mMidLi°
;

55 
CSåögAºay
 
	mH«Li°
;

58 ˛as†
	cMyDülog3
:
public
 
CDülog
 {

59 
public
:

60 
MyDülog3
(
CWnd
 * 
pP¨ít
 = 
NULL
);

62 
BOOL
 
Cª©e
(
CWnd
 * 
P¨ít
);

64 
Upd©eNodeInfo
(
CLi°
 < 
˛ass
 
NodeE¡ry
, class NodeEntry & >&);

65 
CÀ¨NodeInfo
();

68 íum { 
	mIDD
 = 
IDD_DIALOG3
 };

69 
CLi°Cål
 
	gm_H«Li°
;

70 
CLi°Cål
 
	gm_MidLi°
;

71 
CLi°Cål
 
	gm_M¥Li°
;

72 
CLi°Cål
 
	gm_NodeLi°
;

76 
	g¥Ÿe˘ed
:

77 
vútuÆ
 
DoD©aExch™ge
(
CD©aExch™ge
 * 
pDX
);

80 
	g¥Ÿe˘ed
:

81 
__öt64
 
La°Upd©e
;

82 
˛ass
 
NodeInfo
 *
	gInfo
;

85 
afx_msg
 
OnOK
();

86 
afx_msg
 
OnC™˚l
();

87 
vútuÆ
 
BOOL
 
OnInôDülog
();

88 
afx_msg
 
OnIãmch™gedNodeLi°
(
NMHDR
 * 
pNMHDR
, 
LRESULT
 * 
pResu…
);

90 
DECLARE_MESSAGE_MAP
()};

	@gui/win32/Main/MyDialog4.cpp

41 
	~"°dafx.h
"

42 
	~"Fr⁄ãnd.h
"

43 
	~"MyDülog4.h
"

45 #ifde‡
_DEBUG


46 
	#√w
 
DEBUG_NEW


	)

47 #unde‡
THIS_FILE


48 
	gTHIS_FILE
[] = 
__FILE__
;

51 
	gMyDülog4
::
	$MyDülog4
(
CWnd
* 
pP¨ít
)

52 : 
	`CDülog
(
MyDülog4
::
IDD
, 
pP¨ít
)

56 
	}
}

58 
BOOL
 
	gMyDülog4
::
	$Cª©e
(
CWnd
 *
P¨ít
)

60  
CDülog
::
	`Cª©e
(
MyDülog4
::
IDD
, 
P¨ít
);

61 
	}
}

63 
	gMyDülog4
::
	$DoD©aExch™ge
(
CD©aExch™ge
* 
pDX
)

65 
CDülog
::
	`DoD©aExch™ge
(
pDX
);

67 
	`DDX_C⁄åﬁ
(
pDX
, 
IDC_LIST1
, 
m_RoutögTabÀ
);

69 
	}
}

72 
	$BEGIN_MESSAGE_MAP
(
MyDülog4
, 
CDülog
)

74 
	$ON_BN_CLICKED
(
IDOK
, 
OnOK
)

75 
	$ON_BN_CLICKED
(
IDCANCEL
, 
OnC™˚l
)

77 
	$END_MESSAGE_MAP
()

79 
MyDülog4
::
	$OnOK
()

81 
	}
}

83 
MyDülog4
::
	$OnC™˚l
()

85 
	}
}

87 
BOOL
 
MyDülog4
::
	$OnInôDülog
()

89 
CDülog
::
	`OnInôDülog
();

91 
m_RoutögTabÀ
.
	`In£πCﬁumn
(0, "De°ö©i⁄", 
LVCFMT_LEFT
, 110, 0);

92 
m_RoutögTabÀ
.
	`In£πCﬁumn
(1, "G©eway", 
LVCFMT_LEFT
, 110, 1);

93 
m_RoutögTabÀ
.
	`In£πCﬁumn
(2, "Mëric", 
LVCFMT_LEFT
, 68, 2);

94 
m_RoutögTabÀ
.
	`In£πCﬁumn
(3, "I¡îÁ˚", 
LVCFMT_LEFT
, 67, 3);

96  
TRUE
;

97 
	}
}

99 
	gMyDülog4
::
	$AddRouã
(
De°
, 
G©e
, 
Mëric
,

100 *
I¡
)

102 
CSåög
 
De°Så
;

103 
CSåög
 
G©eSå
;

104 
CSåög
 
MëricSå
;

105 
CSåög
 
I¡Så
;

106 
Idx
;

108 
De°Så
.
	`F‹m©
("%d.%d.%d.%d",

109 ((*)&
De°
)[0], ((*)&Dest)[1],

110 ((*)&
De°
)[2], ((*)&Dest)[3]);

112 
G©eSå
.
	`F‹m©
("%d.%d.%d.%d",

113 ((*)&
G©e
)[0], ((*)&Gate)[1],

114 ((*)&
G©e
)[2], ((*)&Gate)[3]);

116 
MëricSå
.
	`F‹m©
("%d", 
Mëric
);

118 
I¡Så
.
	`F‹m©
("%c%c%c%c", 
I¡
[0], Int[1], Int[2], Int[3]);

119 
I¡Så
.
	`MakeUµî
();

121 
Idx
 = 
m_RoutögTabÀ
.
	`GëIãmCou¡
();

123 
m_RoutögTabÀ
.
	`In£πIãm
(
Idx
, 
De°Så
);

125 
m_RoutögTabÀ
.
	`SëIãmText
(
Idx
, 1, 
G©eSå
);

126 
m_RoutögTabÀ
.
	`SëIãmText
(
Idx
, 2, 
MëricSå
);

127 
m_RoutögTabÀ
.
	`SëIãmText
(
Idx
, 3, 
I¡Så
);

128 
	}
}

130 
	gMyDülog4
::
	$DñëeRouã
(
De°
)

132 
CSåög
 
De°Så
;

133 
Idx
, 
Num
;

135 
De°Så
.
	`F‹m©
("%d.%d.%d.%d",

136 ((*)&
De°
)[0], ((*)&Dest)[1],

137 ((*)&
De°
)[2], ((*)&Dest)[3]);

139 
Num
 = 
m_RoutögTabÀ
.
	`GëIãmCou¡
();

141 
Idx
 = 0; Idx < 
Num
; Idx++)

143 i‡(
m_RoutögTabÀ
.
	`GëIãmText
(
Idx
, 0Ë=
De°Så
)

145 
m_RoutögTabÀ
.
	`DñëeIãm
(
Idx
);

149 
	}
}

151 
	gMyDülog4
::
	$CÀ¨Rouãs
()

153 
m_RoutögTabÀ
.
	`DñëeAŒIãms
();

154 
	}
}

	@gui/win32/Main/MyDialog4.h

42 #i‡!
deföed
(
AFX_MYDIALOG4_H__1A381668_A36B_4C51_9B79_643BC2A59D88__INCLUDED_
)

43 
	#AFX_MYDIALOG4_H__1A381668_A36B_4C51_9B79_643BC2A59D88__INCLUDED_


	)

45 #i‡
_MSC_VER
 > 1000

46 #¥agm®
⁄˚


49 ˛as†
	cMyDülog4
:
public
 
CDülog
 {

50 
public
:

51 
MyDülog4
(
CWnd
 * 
pP¨ít
 = 
NULL
);

53 
BOOL
 
Cª©e
(
CWnd
 * 
P¨ít
);

55 
AddRouã
(, , , *);

56 
DñëeRouã
();

57 
CÀ¨Rouãs
();

60 íum { 
	mIDD
 = 
IDD_DIALOG4
 };

61 
CLi°Cål
 
	gm_RoutögTabÀ
;

65 
	g¥Ÿe˘ed
:

66 
vútuÆ
 
DoD©aExch™ge
(
CD©aExch™ge
 * 
pDX
);

69 
	g¥Ÿe˘ed
:

72 
afx_msg
 
OnOK
();

73 
afx_msg
 
OnC™˚l
();

74 
vútuÆ
 
BOOL
 
OnInôDülog
();

76 
DECLARE_MESSAGE_MAP
()};

	@gui/win32/Main/MyEdit.cpp

41 
	~"°dafx.h
"

42 
	~"‰⁄ãnd.h
"

43 
	~"MyEdô.h
"

45 #ifde‡
_DEBUG


46 
	#√w
 
DEBUG_NEW


	)

47 #unde‡
THIS_FILE


48 
	gTHIS_FILE
[] = 
__FILE__
;

51 
	gMyEdô
::
	$MyEdô
()

53 
	}
}

55 
MyEdô
::~
	$MyEdô
()

57 
	}
}

60 
	$BEGIN_MESSAGE_MAP
(
MyEdô
, 
CEdô
)

62 
	$ON_WM_CHAR
()

63 
	$ON_WM_KILLFOCUS
()

65 
	$END_MESSAGE_MAP
()

67 
MyEdô
::
	$OnCh¨
(
UINT
 
nCh¨
, UINT 
nRïC¡
, UINT 
nFœgs
)

69 *
AŒowed
 = (*)"0123456789.";

70 
i
;

71 
CSåög
 
Text
;

73 i‡(
nCh¨
 >= 32)

75 
i
 = 0; 
AŒowed
[i] != 0; i++)

76 i‡(
nCh¨
 =
AŒowed
[
i
])

79 i‡(
AŒowed
[
i
] == 0)

82 
	`GëWödowText
(
Text
);

84 i‡(
nCh¨
 ='.' && 
Text
.
	`Föd
('.') >= 0)

87 i‡(
Text
.
	`GëLígth
(Ë> 2 && Text.
	`Föd
('.'Ë< 0 && 
nCh¨
 != '.')

91 
CEdô
::
	`OnCh¨
(
nCh¨
, 
nRïC¡
, 
nFœgs
);

92 
	}
}

94 
	gMyEdô
::
	$OnKûlFocus
(
CWnd
* 
pNewWnd
)

96 
CSåög
 
Text
;

97 
Index
;

98 
Lí
;

100 
	`GëWödowText
(
Text
);

102 
Index
 = 
Text
.
	`Föd
('.');

104 
Lí
 = 
Text
.
	`GëLígth
();

106 i‡(
Lí
 == 0)

107 
	`SëWödowText
("0.0");

109 i‡(
Index
 < 0)

110 
	`SëWödowText
(
Text
 + ".0");

112 i‡(
Index
 =
Lí
 - 1)

113 
	`SëWödowText
(
Text
 + "0");

115 
CEdô
::
	`OnKûlFocus
(
pNewWnd
);

116 
	}
}

	@gui/win32/Main/MyEdit.h

42 #i‡!
deföed
(
AFX_MYEDIT_H__951EC391_AFE3_428F_865D_24CA55C68C7C__INCLUDED_
)

43 
	#AFX_MYEDIT_H__951EC391_AFE3_428F_865D_24CA55C68C7C__INCLUDED_


	)

45 #i‡
_MSC_VER
 > 1000

46 #¥agm®
⁄˚


49 ˛as†
	cMyEdô
:
public
 
CEdô
 {

50 
public
:

52 
MyEdô
();

57 
	mvútuÆ
 ~ 
MyEdô
();

59 
	m¥Ÿe˘ed
:

61 
afx_msg
 
OnCh¨
(
UINT
 
nCh¨
, UINT 
nRïC¡
, UINT 
nFœgs
);

62 
afx_msg
 
OnKûlFocus
(
CWnd
 * 
pNewWnd
);

65 
DECLARE_MESSAGE_MAP
()};

	@gui/win32/Main/MyTabCtrl.cpp

41 
	~"°dafx.h
"

42 
	~"Fr⁄ãnd.h
"

43 
	~"MyTabCål.h
"

45 #ifde‡
_DEBUG


46 
	#√w
 
DEBUG_NEW


	)

47 #unde‡
THIS_FILE


48 
	gTHIS_FILE
[] = 
__FILE__
;

51 
	gMyTabCål
::
	$MyTabCål
()

53 
	}
}

55 
MyTabCål
::~
	$MyTabCål
()

57 
	}
}

59 
	$BEGIN_MESSAGE_MAP
(
MyTabCål
, 
CTabCål
)

61 
	$ON_NOTIFY_REFLECT
(
TCN_SELCHANGE
, 
OnSñch™ge
)

63 
	$END_MESSAGE_MAP
()

65 
MyTabCål
::
	$InôTabDülogs
(
CSåögAºay
 *
I¡îÁ˚s
,

66 
CSåögAºay
 *
Addªs£s
,

67 
CSåögAºay
 *
IsWœn
)

69 
i
;

70 
CRe˘
 
Clõ¡
;

71 
CRe˘
 
Wö
;

73 
m_Dülog2
.
I¡îÁ˚s
 = Interfaces;

74 
m_Dülog2
.
Addªs£s
 = Addresses;

75 
m_Dülog2
.
IsWœn
 = IsWlan;

77 
m_Dülog1
.
	`Cª©e
(
	`GëP¨ít
());

78 
m_Dülog2
.
	`Cª©e
(
	`GëP¨ít
());

79 
m_Dülog3
.
	`Cª©e
(
	`GëP¨ít
());

80 
m_Dülog4
.
	`Cª©e
(
	`GëP¨ít
());

82 
Dülogs
[0] = &
m_Dülog2
;

83 
Dülogs
[1] = &
m_Dülog1
;

84 
Dülogs
[2] = &
m_Dülog3
;

85 
Dülogs
[3] = &
m_Dülog4
;

87 
Sñ
 = -1;

89 
i
 = 0; i < 4; i++)

91 
	`GëClõ¡Re˘
(
Clõ¡
);

92 
	`Adju°Re˘
(
FALSE
, 
Clõ¡
);

94 
	`GëWödowRe˘
(
Wö
);

95 
	`GëP¨ít
()->
	`S¸ìnToClõ¡
(
Wö
);

97 
Clõ¡
.
	`Off£tRe˘
(
Wö
.
À·
, Wö.
t›
);

99 
Dülogs
[
i
]->
	`SëWödowPos
(&
wndT›
, 
Clõ¡
.
À·
, Clõ¡.
t›
,

100 
Clõ¡
.
	`Width
(), Clõ¡.
	`Height
(), 
SWP_HIDEWINDOW
);

103 
	`Di•œyTabDülog
();

104 
	}
}

106 
	gMyTabCål
::
	$Di•œyTabDülog
()

108 i‡(
Sñ
 != -1)

109 
Dülogs
[
Sñ
]->
	`ShowWödow
(
SW_HIDE
);

111 
Sñ
 = 
	`GëCurSñ
();

113 
Dülogs
[
Sñ
]->
	`ShowWödow
(
SW_SHOW
);

114 
	}
}

116 
	gMyTabCål
::
	$OnSñch™ge
(
NMHDR
* 
pNMHDR
, 
LRESULT
* 
pResu…
)

118 
pNMHDR
 =ÖNMHDR;

120 
	`Di•œyTabDülog
();

122 *
pResu…
 = 0;

123 
	}
}

	@gui/win32/Main/MyTabCtrl.h

42 #i‡!
deföed
(
AFX_MYTABCTRL_H__D443FF52_C52D_4C89_AB4B_19B09687EBAE__INCLUDED_
)

43 
	#AFX_MYTABCTRL_H__D443FF52_C52D_4C89_AB4B_19B09687EBAE__INCLUDED_


	)

45 #i‡
_MSC_VER
 > 1000

46 #¥agm®
⁄˚


49 
	~"MyDülog1.h
"

50 
	~"MyDülog2.h
"

51 
	~"MyDülog3.h
"

52 
	~"MyDülog4.h
"

54 ˛as†
	cMyTabCål
:
public
 
CTabCål
 {

55 
public
:

56 
MyTabCål
();

58 
˛ass
 
MyDülog1
 
	mm_Dülog1
;

59 
˛ass
 
MyDülog2
 
	mm_Dülog2
;

60 
˛ass
 
MyDülog3
 
	mm_Dülog3
;

61 
˛ass
 
MyDülog4
 
	mm_Dülog4
;

63 
InôTabDülogs
(
CSåögAºay
 *, CStringArray *, CStringArray *);

64 
Di•œyTabDülog
();

69 
	mvútuÆ
 ~ 
MyTabCål
();

71 
	m¥Ÿe˘ed
:

72 
CDülog
 * 
Dülogs
[4];

74 
	mSñ
;

77 
afx_msg
 
OnSñch™ge
(
NMHDR
 * 
pNMHDR
, 
LRESULT
 * 
pResu…
);

80 
DECLARE_MESSAGE_MAP
()};

	@gui/win32/Main/NodeEntry.cpp

41 
	~"°dafx.h
"

42 
	~"NodeE¡ry.h
"

44 
˛ass
 
	gNodeE¡ry
 &NodeE¡ry::
›î©‹
=(˛as†
NodeE¡ry
 &
Src
)

46 
Addr
 = 
Src
.Addr;

47 
	gTimeout
 = 
Src
.
Timeout
;

49 
	gM¥Li°
.
RemoveAŒ
();

50 
	gM¥Li°
.
AddHód
(&
Src
.
M¥Li°
);

52 
	gH«Li°
.
RemoveAŒ
();

53 
	gH«Li°
.
AddHód
(&
Src
.
H«Li°
);

55 
	gMidLi°
.
RemoveAŒ
();

56 
	gMidLi°
.
AddHód
(&
Src
.
MidLi°
);

58  *
	gthis
;

61 
BOOL
 
	gNodeE¡ry
::
›î©‹
==(c⁄° 
˛ass
 
NodeE¡ry
 &
Comp
) const

63  
Addr
 =
Comp
.Addr;

66 
	gNodeE¡ry
::
	$AddM¥
(
M¥Addr
, 
__öt64
 
Timeout
)

68 
˛ass
 
M¥E¡ry
 
NewE¡ry
;

69 
POSITION
 
Pos
;

71 
NewE¡ry
.
Addr
 = 
M¥Addr
;

73 
Pos
 = 
M¥Li°
.
	`Föd
(
NewE¡ry
);

75 i‡(
Pos
 !
NULL
)

77 
˛ass
 
M¥E¡ry
 &
OldE¡ry
 = 
M¥Li°
.
	`GëAt
(
Pos
);

78 
OldE¡ry
.
Timeout
 = Timeout;

83 
NewE¡ry
.
Timeout
 = Timeout;

84 
M¥Li°
.
	`AddTaû
(
NewE¡ry
);

86 
	}
}

88 
	gNodeE¡ry
::
	$AddMid
(
I¡Addr
, 
__öt64
 
Timeout
)

90 
˛ass
 
MidE¡ry
 
NewE¡ry
;

91 
POSITION
 
Pos
;

93 
NewE¡ry
.
Addr
 = 
I¡Addr
;

95 
Pos
 = 
MidLi°
.
	`Föd
(
NewE¡ry
);

97 i‡(
Pos
 !
NULL
)

99 
˛ass
 
MidE¡ry
 &
OldE¡ry
 = 
MidLi°
.
	`GëAt
(
Pos
);

100 
OldE¡ry
.
Timeout
 = Timeout;

105 
NewE¡ry
.
Timeout
 = Timeout;

106 
MidLi°
.
	`AddTaû
(
NewE¡ry
);

108 
	}
}

110 
	gNodeE¡ry
::
	$AddH«
(
NëAddr
, 
NëMask
,

111 
__öt64
 
Timeout
)

113 
˛ass
 
H«E¡ry
 
NewE¡ry
;

114 
POSITION
 
Pos
;

116 
NewE¡ry
.
Addr
 = 
NëAddr
;

117 
NewE¡ry
.
Mask
 = 
NëMask
;

119 
Pos
 = 
H«Li°
.
	`Föd
(
NewE¡ry
);

121 i‡(
Pos
 !
NULL
)

123 
˛ass
 
H«E¡ry
 &
OldE¡ry
 = 
H«Li°
.
	`GëAt
(
Pos
);

124 
OldE¡ry
.
Timeout
 = Timeout;

129 
NewE¡ry
.
Timeout
 = Timeout;

130 
H«Li°
.
	`AddTaû
(
NewE¡ry
);

132 
	}
}

	@gui/win32/Main/NodeEntry.h

42 #i‡!
deföed
 
TL_NODEENTRY_H


43 
	#TL_NODEENTRY_H


	)

45 
	~"M¥E¡ry.h
"

46 
	~"MidE¡ry.h
"

47 
	~"H«E¡ry.h
"

49 ˛as†
	cNodeE¡ry
 {

50 
	mpublic
:

51 
Addr
;

52 
__öt64
 
	mTimeout
;

54 
	mCLi°
 < 
˛ass
 
	mM¥E¡ry
, cœs†M¥E¡ry & >
	mM¥Li°
;

55 
	mCLi°
 < 
˛ass
 
	mMidE¡ry
, cœs†MidE¡ry & >
	mMidLi°
;

56 
	mCLi°
 < 
˛ass
 
	mH«E¡ry
, cœs†H«E¡ry & >
	mH«Li°
;

58 
AddM¥
(, 
__öt64
);

59 
AddMid
(, 
__öt64
);

60 
AddH«
(, , 
__öt64
);

62 
˛ass
 
	mNodeE¡ry
 & NodeE¡ry::
›î©‹
=(˛as†
NodeE¡ry
 &);

63 
BOOL
 
	mNodeE¡ry
::
›î©‹
==(c⁄° 
˛ass
 
NodeE¡ry
 &) const;

	@gui/win32/Main/StdAfx.cpp

1 
	~"°dafx.h
"

	@gui/win32/Main/StdAfx.h

6 #i‡!
deföed
(
AFX_STDAFX_H__D43BD17B_AEC0_43A5_9F3B_1DAA99152E38__INCLUDED_
)

7 
	#AFX_STDAFX_H__D43BD17B_AEC0_43A5_9F3B_1DAA99152E38__INCLUDED_


	)

9 #i‡
_MSC_VER
 > 1000

10 #¥agm®
⁄˚


13 
	#VC_EXTRALEAN


14 

	)

15 
	~<afxwö.h
>

16 
	~<afxext.h
>

17 
	~<afxdt˘l.h
>

18 #i‚de‡
_AFX_NO_AFXCMN_SUPPORT


19 
	~<afxcmn.h
>

22 
	~<afxmt.h
>

23 
	~<afxãm∂.h
>

24 
	~<wösock2.h
>

25 
	~<ùhÕ≠i.h
>

	@gui/win32/Main/TrayIcon.cpp

1 
	~"°dafx.h
"

2 
	~"TøyIc⁄.h
"

4 
	~<wödows.h
>

5 
	~<shñœpi.h
>

7 
	~"Fr⁄ãnd.h
"

8 
	~"Fr⁄ãndDlg.h
"

9 
	~"Resour˚.h
"

11 
	#TRAYICONID
 987435

	)

13 
HWND
 
	gs_hWnd
;

14 
TøyIc⁄
* 
	gTøyIc⁄
::
ö°™˚
 = 
NULL
;

16 
LRESULT
 
CALLBACK
 
	$TøyIc⁄Proc
–
HWND
, 
UINT
, 
WPARAM
, 
LPARAM
 
lP¨am
 )

18 
lP¨am
)

20 
WM_LBUTTONDOWN
:

21 
WM_RBUTTONDOWN
:

22 
TøyIc⁄
::
ö°™˚
->
	`di•œyP›up
();

27 
	}
}

29 
	gTøyIc⁄
::
	$di•œyP›up
()

31 
HMENU
 
hMíu
 = 
	`LﬂdMíu
(
	`AfxGëIn°™˚H™dÀ
(), 
	`MAKEINTRESOURCE
(
IDR_TRAYMENU
));

32 
HMENU
 
hSubMíu
 = 
	`GëSubMíu
(
hMíu
, 0);

34 
	`E«bÀMíuIãm
(
hSubMíu
, 
IDM_STOP
,

35 
MF_BYCOMMAND
 | (
maö_dlg
.
m_St›Buâ⁄
.
	`IsWödowE«bÀd
(Ë? 
MF_ENABLED
 : 
MF_GRAYED
));

37 
	`E«bÀMíuIãm
(
hSubMíu
, 
IDM_START
,

38 
MF_BYCOMMAND
 | (
maö_dlg
.
m_SèπBuâ⁄
.
	`IsWödowE«bÀd
(Ë? 
MF_ENABLED
 : 
MF_GRAYED
));

40 
POINT
 
±
;

42 
	`GëCurs‹Pos
(&
±
);

44 
	`SëF‹egroundWödow
–
s_hWnd
 );

46 
cmd
 = 
	`TøckP›upMíu
(
hSubMíu
,

47 
TPM_RIGHTBUTTON
 | 
TPM_RETURNCMD
,

48 
±
.
x
,

49 
±
.
y
,

51 
s_hWnd
,

52 
NULL
);

54 
	`Po°Mesßge
(
s_hWnd
, 
WM_NULL
, 0, 0);

56 
cmd
)

58 
IDM_EXIT
:

59 
maö_dlg
.
	`OnExôBuâ⁄
();

62 
IDM_WINDOW
:

63 
maö_dlg
.
	`O≥nIc⁄
();

64 
maö_dlg
.
	`SëWödowPos
(&
CWnd
::
wndT›
, 0, 0, 0, 0, 
SWP_NOMOVE
 | 
SWP_NOSIZE
);

67 
IDM_SETTINGS
:

68 
maö_dlg
.
m_TabCål
.
	`SëCurSñ
(0);

69 
maö_dlg
.
m_TabCål
.
	`Di•œyTabDülog
();

70 
maö_dlg
.
	`O≥nIc⁄
();

71 
maö_dlg
.
	`SëWödowPos
(&
CWnd
::
wndT›
, 0, 0, 0, 0, 
SWP_NOMOVE
 | 
SWP_NOSIZE
);

74 
IDM_OUTPUT
:

75 
maö_dlg
.
m_TabCål
.
	`SëCurSñ
(1);

76 
maö_dlg
.
m_TabCål
.
	`Di•œyTabDülog
();

77 
maö_dlg
.
	`O≥nIc⁄
();

78 
maö_dlg
.
	`SëWödowPos
(&
CWnd
::
wndT›
, 0, 0, 0, 0, 
SWP_NOMOVE
 | 
SWP_NOSIZE
);

81 
IDM_STOP
:

82 
maö_dlg
.
	`OnSt›Buâ⁄
();

85 
IDM_START
:

86 
maö_dlg
.
	`OnSèπBuâ⁄
();

90 
	`De°royMíu
(
hMíu
);

91 
	}
}

93 
	gTøyIc⁄
::
	$£tSètus
–
°©us
 
c⁄_°©
, c⁄° * 
mesßge
 )

95  
c⁄_°©
 )

97 
CONNECTED
:

98 
	`£tTøyAµóøn˚
–
Ál£
, 
IDI_ICON2
, 
mesßge
 );

101 
OFF
:

102 
	`£tTøyAµóøn˚
–
Ál£
, 
IDI_ICON3
, 
mesßge
 );

105 
ON
:

106 
	`£tTøyAµóøn˚
–
Ál£
, 
IDI_ICON1
, 
mesßge
 );

109 
	}
}

111 
	gTøyIc⁄
::
	$£tTøyAµóøn˚
–
boﬁ
 
°¨t
, 
ªs_id
, c⁄° * 
mesßge
 )

113 
NOTIFYICONDATA
 
nŸifyIc⁄D©a
;

115 
nŸifyIc⁄D©a
.
cbSize
 = (notifyIconData);

116 
nŸifyIc⁄D©a
.
hWnd
 = 
s_hWnd
;

118 
nŸifyIc⁄D©a
.
uFœgs
 = 
NIF_ICON
 | 
NIF_MESSAGE
 | 
NIF_TIP
;

119 
nŸifyIc⁄D©a
.
uCÆlbackMesßge
 = 123456;

120 
nŸifyIc⁄D©a
.
uID
 = 
TRAYICONID
;

121 
nŸifyIc⁄D©a
.
hIc⁄
 = (
HICON
)
	`LﬂdIc⁄
–
hIn°
, 
	`MAKEINTRESOURCE
–
ªs_id
 ) );

122 
	`°∫˝y
–
nŸifyIc⁄D©a
.
szTù
, 
mesßge
,  (notifyIconData.szTip) );

124 if–
°¨t
 )

125 
	`Shñl_NŸifyIc⁄
–
NIM_ADD
, &
nŸifyIc⁄D©a
 );

127 
	`Shñl_NŸifyIc⁄
–
NIM_MODIFY
, &
nŸifyIc⁄D©a
 );

128 
	}
}

130 
	gTøyIc⁄
::
	$TøyIc⁄
–
CFr⁄ãndDlg
& 
dlg
, 
HINSTANCE
 
hIn°
 ) : 
	`maö_dlg
–dlg ), 
	$hIn°
–
hIn°
 )

132 
ö°™˚
 = 
this
;

133 
WNDCLASS
 
wndCœss
;

135 
wndCœss
.
°yÀ
 = 0;

136 
wndCœss
.
Õ‚WndProc
 = 
TøyIc⁄Proc
;

137 
wndCœss
.
cbClsExåa
 = 0;

138 
wndCœss
.
cbWndExåa
 = 0;

139 
wndCœss
.
hIn°™˚
 = 
hIn°
;

140 
wndCœss
.
hIc⁄
 = 
NULL
;

141 
wndCœss
.
hCurs‹
 = 
NULL
;

142 
wndCœss
.
hbrBackground
 = (
HBRUSH
)
	`GëStockObje˘
(
WHITE_BRUSH
);

143 
wndCœss
.
ÕszMíuName
 = 
NULL
;

144 
wndCœss
.
ÕszCœssName
 = "OLSRdTrayIcon";

146 i‡(0 !
	`Regi°îCœss
(&
wndCœss
))

148 
s_hWnd
 = 
	`Cª©eWödow
(

151 
WS_OVERLAPPEDWINDOW
,

152 
CW_USEDEFAULT
,

153 
CW_USEDEFAULT
,

154 
CW_USEDEFAULT
,

155 
CW_USEDEFAULT
,

156 
NULL
,

157 
NULL
,

158 
hIn°
,

159 
NULL
);

161 i‡(
s_hWnd
)

163 
	`ShowWödow
(
s_hWnd
, 
SW_HIDE
);

165 
	`Upd©eWödow
(
s_hWnd
);

169 
	`£tTøyAµóøn˚
–
åue
, 
IDI_ICON3
, "Starting..." );

170 
	}
}

172 
	gTøyIc⁄
::~
	$TøyIc⁄
()

174 
NOTIFYICONDATA
 
nŸifyIc⁄D©a
;

176 
nŸifyIc⁄D©a
.
cbSize
 = (notifyIconData);

177 
nŸifyIc⁄D©a
.
hWnd
 = 
s_hWnd
;

179 
nŸifyIc⁄D©a
.
uFœgs
 = 
NIF_ICON
 | 
NIF_MESSAGE
 | 
NIF_TIP
;

180 
nŸifyIc⁄D©a
.
uCÆlbackMesßge
 = 123456;

181 
nŸifyIc⁄D©a
.
uID
 = 
TRAYICONID
;

182 
nŸifyIc⁄D©a
.
hIc⁄
 = 
NULL
;

184 
	`Shñl_NŸifyIc⁄
–
NIM_DELETE
, &
nŸifyIc⁄D©a
 );

185 
	}
}

	@gui/win32/Main/TrayIcon.h

1 #i‚de‡
TRAYICON_H_171149531


2 
	#TRAYICON_H_171149531


	)

4 
˛ass
 
	gCFr⁄ãndDlg
;

6 ˛as†
	cTøyIc⁄
 {

7 
	mpublic
:

8 
TøyIc⁄
(
CFr⁄ãndDlg
 &, 
HINSTANCE
);

9 ~
TøyIc⁄
();

11 
di•œyP›up
();

13 
TøyIc⁄
 *
	$gëIn°™˚
() {

14  
ö°™˚
;

16 
	e°©us
 { 
CONNECTED
, 
ON
, 
OFF
 
	}
};

18 
£tSètus
(
°©us
 
c⁄_°©us
, c⁄° *
mesßge
);

20 
	g¥iv©e
:

21 
£tTøyAµóøn˚
(
boﬁ
, , c⁄° *
mesßge
);

23 
HINSTANCE
 
	ghIn°
;

25 
	gCFr⁄ãndDlg
 & 
	gmaö_dlg
;

27 
‰õnd
 
LRESULT
 
CALLBACK
 
TøyIc⁄Proc
(
HWND
, 
UINT
, 
WPARAM
, 
LPARAM
);

28 
TøyIc⁄
 *
	gö°™˚
;

	@gui/win32/Main/resource.h

5 
	#IDD_FRONTEND_DIALOG
 102

	)

6 
	#IDP_SOCKETS_INIT_FAILED
 103

	)

7 
	#IDR_MAINFRAME
 128

	)

8 
	#IDD_DIALOG1
 129

	)

9 
	#IDD_DIALOG2
 130

	)

10 
	#IDD_DIALOG3
 131

	)

11 
	#IDD_DIALOG4
 132

	)

12 
	#IDI_ICON1
 132

	)

13 
	#IDR_241
 138

	)

14 
	#IDI_ICON3
 141

	)

15 
	#IDR_TRAYMENU
 141

	)

16 
	#IDI_ICON2
 142

	)

17 
	#IDC_TAB1
 1000

	)

18 
	#IDC_BUTTON1
 1001

	)

19 
	#IDC_EDIT1
 1003

	)

20 
	#IDC_BUTTON2
 1004

	)

21 
	#IDC_EDIT2
 1004

	)

22 
	#IDC_EDIT3
 1005

	)

23 
	#IDC_BUTTON3
 1006

	)

24 
	#IDC_EDIT4
 1006

	)

25 
	#IDC_EDIT5
 1007

	)

26 
	#IDC_LIST1
 1008

	)

27 
	#IDC_SLIDER2
 1009

	)

28 
	#IDC_TEXT1
 1010

	)

29 
	#IDC_EDIT6
 1011

	)

30 
	#IDC_EDIT7
 1012

	)

31 
	#IDC_CHECK1
 1013

	)

32 
	#IDC_CHECK2
 1014

	)

33 
	#IDC_EDIT9
 1015

	)

34 
	#IDC_CHECK3
 1016

	)

35 
	#IDC_BUTTON4
 1017

	)

36 
	#IDC_BUTTON5
 1018

	)

37 
	#IDC_CHECK4
 1019

	)

38 
	#IDC_EDIT10
 1020

	)

39 
	#IDC_EDIT11
 1021

	)

40 
	#IDC_EDIT8
 1022

	)

41 
	#IDC_CHECK5
 1022

	)

42 
	#IDC_EDIT12
 1023

	)

43 
	#IDC_EDIT13
 1024

	)

44 
	#IDC_LIST4
 1025

	)

45 
	#IDC_LIST5
 1026

	)

46 
	#IDC_EDIT15
 1026

	)

47 
	#IDC_LIST6
 1027

	)

48 
	#IDC_RADIO1
 1029

	)

49 
	#IDC_RADIO2
 1030

	)

50 
	#IDC_COMBO1
 1031

	)

51 
	#IDC_COMBO3
 1035

	)

52 
	#IDM_START
 32773

	)

53 
	#IDM_STOP
 32774

	)

54 
	#IDM_WINDOW
 32775

	)

55 
	#IDM_SETTINGS
 32776

	)

56 
	#IDM_OUTPUT
 32777

	)

57 
	#IDM_EXIT
 32778

	)

61 #ifde‡
APSTUDIO_INVOKED


62 #i‚de‡
APSTUDIO_READONLY_SYMBOLS


63 
	#_APS_NEXT_RESOURCE_VALUE
 143

	)

64 
	#_APS_NEXT_COMMAND_VALUE
 32779

	)

65 
	#_APS_NEXT_CONTROL_VALUE
 1036

	)

66 
	#_APS_NEXT_SYMED_VALUE
 101

	)

	@gui/win32/Shim/shim.c

42 
	~<wödows.h
>

45 
	$maö
(
¨gc
, *
¨gv
[])

47 
STARTUPINFO
 
SèπInfo
;

48 
PROCESS_INFORMATION
 
ProcInfo
;

49 
i
;

50 *
CmdLöe
;

51 *
WÆkî
;

52 
NewCmdLöe
[
MAX_PATH
 + 500];

53 
HANDLE
 
H™dÀs
[2];

54 
Res
;

55 
QuŸes
;

57 
H™dÀs
[0] = 
	`O≥nEvít
(
EVENT_ALL_ACCESS
, 
FALSE
, "TheOlsrdShimEvent");

59 i‡(
H™dÀs
[0] =
NULL
) {

60 
	`MesßgeBox
(
NULL
, "C™nŸ o≥¿evít.", "Shim Eº‹", 
MB_ICONERROR
 | 
MB_OK
);

61 
	`ExôPro˚ss
(1);

64 
CmdLöe
 = 
	`GëComm™dLöe
();

66 
QuŸes
 = 0;

68 *
CmdLöe
 != 0) {

69 i‡(*
CmdLöe
 == '"')

70 
QuŸes
 = !Quotes;

72 i‡(*
CmdLöe
 =' ' && !
QuŸes
)

75 
CmdLöe
++;

78 i‡(*
CmdLöe
 == 0) {

79 
	`MesßgeBox
(
NULL
, "Missögárgumíts.", "Shim Eº‹", 
MB_ICONERROR
 | 
MB_OK
);

80 
	`ExôPro˚ss
(1);

83 
	`GëModuÀFûeName
(
NULL
, 
NewCmdLöe
, 
MAX_PATH
);

85 
WÆkî
 = 
NewCmdLöe
; *Walker != 0; Walker++);

87 *
WÆkî
 != '\\')

88 
WÆkî
--;

90 
WÆkî
[1] = 'o';

91 
WÆkî
[2] = 'l';

92 
WÆkî
[3] = 's';

93 
WÆkî
[4] = 'r';

94 
WÆkî
[5] = 'd';

95 
WÆkî
[6] = '.';

96 
WÆkî
[7] = 'e';

97 
WÆkî
[8] = 'x';

98 
WÆkî
[9] = 'e';

100 
WÆkî
[10] = ' ';

102 
WÆkî
 += 11;

104 (*
WÆkî
++ = *
CmdLöe
++) != 0);

106 
i
 = 0; i < (
STARTUPINFO
); i++)

107 ((*)&
SèπInfo
)[
i
] = 0;

109 
SèπInfo
.
cb
 = (
STARTUPINFO
);

111 i‡(!
	`Cª©ePro˚ss
(
NULL
, 
NewCmdLöe
, NULL, NULL, 
TRUE
, 
CREATE_NEW_PROCESS_GROUP
, NULL, NULL, &
SèπInfo
, &
ProcInfo
)) {

112 
	`MesßgeBox
(
NULL
, "C™nŸÉxecuã OLSR sîvî.", "Shim Eº‹", 
MB_ICONERROR
 | 
MB_OK
);

113 
	`ExôPro˚ss
(1);

116 
H™dÀs
[1] = 
ProcInfo
.
hPro˚ss
;

118 
Res
 = 
	`WaôF‹Mu…ùÀObje˘s
(2, 
H™dÀs
, 
FALSE
, 
INFINITE
);

120 i‡(
Res
 =
WAIT_OBJECT_0
) {

121 
	`Gíî©eC⁄sﬁeCålEvít
(
CTRL_BREAK_EVENT
, 
ProcInfo
.
dwPro˚ssId
);

122 
	`WaôF‹SögÀObje˘
(
ProcInfo
.
hPro˚ss
, 
INFINITE
);

125 
	`Clo£H™dÀ
(
ProcInfo
.
hThªad
);

126 
	`Clo£H™dÀ
(
ProcInfo
.
hPro˚ss
);

128 
	`ExôPro˚ss
(0);

129 
	}
}

	@lib/arprefresh/src/olsrd_arprefresh.c

37 
	~<°dio.h
>

38 
	~<°rög.h
>

39 
	~<°dlib.h
>

40 
	~<f˙é.h
>

41 
	~<sys/io˘l.h
>

42 
	~<sys/sockë.h
>

43 
	~<√t/if.h
>

44 
	~<√t/if_¨p.h
>

45 #i‚de‡
™droid


46 
	~<√t/ëhî√t.h
>

48 
	~<√töë/ù.h
>

49 
	~<√töë/udp.h
>

50 
	~<√çackë/∑ckë.h
>

51 
	~<löux/ty≥s.h
>

52 
	~<löux/fûãr.h
>

53 
	~<uni°d.h
>

55 
	~"ﬁ§d_¨¥e‰esh.h
"

56 
	~"kî√l_rouãs.h
"

57 
	~"scheduÀr.h
"

59 #unde‡
ARPREFRESH_DEBUG


60 
	#PLUGIN_INTERFACE_VERSION
 5

	)

71 
	$ﬁ§d_∂ugö_öãrÁ˚_vîsi⁄
()

73  
PLUGIN_INTERFACE_VERSION
;

74 
	}
}

76 c⁄° 
ﬁ§d_∂ugö_∑ømëîs
 
	g∂ugö_∑ømëîs
[] = {

80 
	$ﬁ§d_gë_∂ugö_∑ømëîs
(c⁄° 
ﬁ§d_∂ugö_∑ømëîs
 **
∑øms
, *
size
)

82 *
∑øms
 = 
∂ugö_∑ømëîs
;

83 *
size
 = (
∂ugö_∑ømëîs
) / (*plugin_parameters);

84 
	}
}

87 
ëhhdr
 
	mëh
;

88 
ùhdr
 
	mù
;

89 
udphdr
 
	mudp
;

90 } 
	t__©åibuã__
 ((
	t∑cked
)Ë
	t¨¥e‰esh_buf
;

92 
	g¨¥e‰esh_sockfd
 = -1;

93 c⁄° 
	g¨¥e‰esh_p‹äum
 = 698;

100 
ﬁ§_¨p_evít
(*
foo
 
__©åibuã__
 ((
unu£d
)))

102 i‡(0 <
¨¥e‰esh_sockfd
) {

103 
¨¥e‰esh_buf
 
buf
;

104 
sockaddr_Œ
 
	g‰om
;

105 
sockÀn_t
 
	g‰omÀn
 = (
‰om
);

111 
ssize_t
 
	gsize
 = 
ªcv‰om
(
¨¥e‰esh_sockfd
, &
buf
, (buf),

112 
MSG_TRUNC
, (
sockaddr
 *)&
‰om
,

113 &
‰omÀn
);

115 i‡(0 <
size
 && sizê>(
ssize_t
Ë(
buf
)

124 
¨¥eq
 
¨p
;

125 
sockaddr_ö
 
	gö_∑
;

126 
sockaddr_ö6
 
	gö_∑6
;

127 } 
	gªq
;

129 
mem£t
(&
ªq
, 0, (req));

130 
	gªq
.
	gö_∑
.
	gsö_Ámûy
 = 
AF_INET
;

131 
mem˝y
(&
ªq
.
ö_∑
.
sö_addr
, &
buf
.
ù
.
ßddr
, (buf.ip.saddr));

132 
	gªq
.
	g¨p
.
	g¨p_ha
.
	gß_Ámûy
 = 
AF_LOCAL
;

133 
mem˝y
(&
ªq
.
¨p
.
¨p_ha
.
ß_d©a
, &
buf
.
ëh
.
h_sour˚
, (buf.eth.h_source));

134 
	gªq
.
	g¨p
.
	g¨p_Êags
 = 
ATF_COM
;

135 
if_ödext⁄ame
(
‰om
.
¶l_ifödex
, 
ªq
.
¨p
.
¨p_dev
);

136 #ifde‡
ARPREFRESH_DEBUG


138 
	gi
;

139 
OLSR_PRINTF
(0, "Re‰esh o¿%s, %s=", 
ªq
.
¨p
.
¨p_dev
, 
öë_¡ﬂ
(*((
ö_addr
 *)&
buf
.
ù
.
ßddr
)));

140 
	gi
 = 0; i < (
	gssize_t
Ë(
	gbuf
.
	gëh
.
	gh_sour˚
); i++) {

141 
OLSR_PRINTF
(0, "%02x%s", ((*)&
buf
.
ëh
.
h_sour˚
)[
i
],

142 
i
 < (
ssize_t
Ë(
buf
.
ëh
.
h_sour˚
) - 1 ? ":" : "\n");

146 i‡(
io˘l
(
¨¥e‰esh_sockfd
, 
SIOCSARP
, &
ªq
) < 0) {

147 
OLSR_PRINTF
(1, "*** ARPREFRESH: SIOCSARP: %s\n", 
°ªº‹
(
î∫o
));

148 
˛o£
(
¨¥e‰esh_sockfd
);

149 
	g¨¥e‰esh_sockfd
 = -1;

161 
	$ﬁ§d_∂ugö_öô
()

163 
ªt
 = 0;

164 i‡(
AF_INET
 =
ﬁ§_˙f
->
ù_vîsi⁄
) {

165 
Êags
;

166 
sock_Ârog
 
fûãr
;

167 
sock_fûãr
 
BPF_code
[] = {

174 {0x15, 8, 9, 
¨¥e‰esh_p‹äum
},

182 {0x15, 0, 1, 
¨¥e‰esh_p‹äum
},

183 {0x6, 0, 0, (
¨¥e‰esh_buf
)}

187 
fûãr
.
Àn
 = (
BPF_code
) / (BPF_code[0]);

188 
fûãr
.fûã∏
BPF_code
;

189 i‡(0 <(
¨¥e‰esh_sockfd
 = 
	`sockë
(
PF_PACKET
, 
SOCK_RAW
, 
	`ht⁄s
(
ETH_P_IP
)))

190 && 0 <(
Êags
 = 
	`f˙é
(
¨¥e‰esh_sockfd
, 
F_GETFL
))

191 && 0 <
	`f˙é
(
¨¥e‰esh_sockfd
, 
F_SETFL
, 
Êags
 | 
O_NONBLOCK
)

192 && 0 <
	`£tsock›t
(
¨¥e‰esh_sockfd
, 
SOL_SOCKET
, 
SO_ATTACH_FILTER
, &
fûãr
, (filter))) {

194 
	`ﬁ§_°¨t_timî
(2 * 
MSEC_PER_SEC
, 0, 
OLSR_TIMER_PERIODIC
, &
ﬁ§_¨p_evít
, 
NULL
, 0);

195 
ªt
 = 1;

197 
	`OLSR_PRINTF
(1, "*** ARPREFRESH: C™nŸ cª©ên⁄-blockög fûãrögÖackë sockë: %s\n", 
	`°ªº‹
(
î∫o
));

200 
	`OLSR_PRINTF
(1, "*** ARPREFRESH: IPv6Çot supported\n");

202  
ªt
;

203 
	}
}

209 
__©åibuã__
 ((
c⁄°ru˘‹
)Ë
my_öô
();

210 
__©åibuã__
 ((
de°ru˘‹
)Ë
my_föi
();

213 
	$my_öô
()

215 
	`¥ötf
("OLSRDárprefreshÖlugin by Sven-Ola\n");

216 
	}
}

222 
	$my_föi
()

224 i‡(0 <
¨¥e‰esh_sockfd
) {

225 
	`˛o£
(
¨¥e‰esh_sockfd
);

226 
¨¥e‰esh_sockfd
 = -1;

228 
	}
}

	@lib/arprefresh/src/olsrd_arprefresh.h

33 #i‚de‡
_OLSRD_ARPREFRESH


34 
	#_OLSRD_ARPREFRESH


	)

36 
	~"ﬁ§_ty≥s.h
"

37 
	~"ﬁ§d_∂ugö.h
"

38 
	~"∂ugö_utû.h
"

40 
ﬁ§d_∂ugö_öô
();

41 
ﬁ§d_gë_∂ugö_∑ømëîs
(c⁄° 
ﬁ§d_∂ugö_∑ømëîs
 **
∑øms
, *
size
);

42 
ﬁ§d_∂ugö_öãrÁ˚_vîsi⁄
();

	@lib/bmf/src/Address.c

40 
	~"Addªss.h
"

43 
	~<°ddef.h
>

44 
	~<as£π.h
>

45 
	~<√töë/ù.h
>

46 
	~<√töë/udp.h
>

49 
	~"defs.h
"

52 
	~"Bmf.h
"

53 
	~"Nëw‹kI¡îÁ˚s.h
"

58 
	gE«bÀLoˇlBrﬂdˇ°
 = 1;

71 
DoLoˇlBrﬂdˇ°
(

72 c⁄° * 
íabÀ
,

73 * 
d©a
 
__©åibuã__
((
unu£d
)),

74 
£t_∂ugö_∑ømëî_add⁄
 
add⁄
 
__©åibuã__
((
unu£d
)))

76 i‡(
°rcmp
(
íabÀ
, "yes") == 0)

78 
E«bÀLoˇlBrﬂdˇ°
 = 1;

81 i‡(
°rcmp
(
íabÀ
, "no") == 0)

83 
E«bÀLoˇlBrﬂdˇ°
 = 0;

99 
	$IsMu…iˇ°
(
ﬁ§_ù_addr
* 
ùAddªss
)

101 
	`as£π
(
ùAddªss
 !
NULL
);

103  
	`IN_MULTICAST
(
	`¡ohl
(
ùAddªss
->
v4
.
s_addr
));

104 
	}
}

114 
	$IsOl§OrBmfPackë
(* 
ùPackë
)

116 
ù
* 
ùHódî
;

117 
ùHódîLí
;

118 
udphdr
* 
udpHódî
;

119 
u_öt16_t
 
de°P‹t
;

121 
	`as£π
(
ùPackë
 !
NULL
);

128 
ùHódî
 = (
ù
*Ë
	`ARM_NOWARN_ALIGN
(
ùPackë
);

129 i‡(
ùHódî
->
ù_p
 !
SOL_UDP
)

136 
ùHódîLí
 = 
	`GëIpHódîLígth
(
ùPackë
);

137 i‡(
	`GëIpTŸÆLígth
(
ùPackë
Ë< 
ùHódîLí
 + (
udphdr
))

144 
udpHódî
 = (
udphdr
*Ë
	`ARM_NOWARN_ALIGN
((
ùPackë
 + 
ùHódîLí
));

145 
de°P‹t
 = 
	`¡ohs
(
udpHódî
->
de°
);

147 i‡(
de°P‹t
 =
ﬁ§_˙f
->
ﬁ§p‹t
 || de°P‹à=
BMF_ENCAP_PORT
 || destPort == 51698)

154 
	}
}

	@lib/bmf/src/Address.h

1 #i‚de‡
_BMF_ADDRESS_H


2 
	#_BMF_ADDRESS_H


	)

43 
	~"ﬁ§_ty≥s.h
"

44 
	~"ﬁ§d_∂ugö.h
"

45 
	~"öãrÁ˚s.h
"

47 
	gTBmfI¡îÁ˚
;

49 
E«bÀLoˇlBrﬂdˇ°
;

51 
DoLoˇlBrﬂdˇ°
(c⁄° * 
íabÀ
, * 
d©a
, 
£t_∂ugö_∑ømëî_add⁄
 
add⁄
);

52 
IsMu…iˇ°
(
ﬁ§_ù_addr
* 
ùAddªss
);

53 
IsOl§OrBmfPackë
(* 
ùPackë
);

	@lib/bmf/src/Bmf.c

40 
	#_MULTI_THREADED


	)

42 
	~"Bmf.h
"

45 
	~<°ddef.h
>

46 
	~<sys/ty≥s.h
>

47 
	~<°rög.h
>

48 
	~<°d¨g.h
>

49 
	~<î∫o.h
>

50 
	~<as£π.h
>

51 
	~<löux/if_ëhî.h
>

52 
	~<löux/if_∑ckë.h
>

53 
	~<sig«l.h
>

54 
	~<√töë/ù.h
>

55 
	~<√töë/udp.h
>

56 
	~<uni°d.h
>

57 
	~<sys/pﬁl.h
>

60 
	~"∂ugö_utû.h
"

61 
	~"defs.h
"

62 
	~"ùˇlc.h
"

63 
	~"ﬁ§.h
"

64 
	~"mid_£t.h
"

65 
	~"m¥_£À˘‹_£t.h
"

66 
	~"lök_£t.h
"

67 
	~"√t_ﬁ§.h
"

70 
	~"Nëw‹kI¡îÁ˚s.h
"

71 
	~"Addªss.h
"

72 
	~"Packë.h
"

73 
	~"PackëHi°‹y.h
"

76 
	gF™OutLimô
 = 2;

78 
	gBrﬂdˇ°RëønsmôCou¡
 = 1;

91 
	$BmfPEº‹
(c⁄° * 
f‹m©
, ...)

93 
	#MAX_STR_DESC
 255

	)

94 * 
°rEº
 = 
	`°ªº‹
(
î∫o
);

95 
°rDesc
[
MAX_STR_DESC
];

98 i‡(
f‹m©
 =
NULL
 || *format == '\0')

100 
	`ﬁ§_¥ötf
(1, "%s: %s\n", 
PLUGIN_NAME
, 
°rEº
);

104 
va_li°
 
¨gli°
;

106 
	`ﬁ§_¥ötf
(1, "%s: ", 
PLUGIN_NAME
);

108 
	`va_°¨t
(
¨gli°
, 
f‹m©
);

109 
	`v¢¥ötf
(
°rDesc
, 
MAX_STR_DESC
, 
f‹m©
, 
¨gli°
);

110 
	`va_íd
(
¨gli°
);

112 
°rDesc
[
MAX_STR_DESC
 - 1] = '\0';

114 
	`ﬁ§_¥ötf
(1, "%s: %s\n", 
°rDesc
, 
°rEº
);

116 
	}
}

126 
ﬁ§_ù_addr
* 
	$MaöAddªssOf
(
ﬁ§_ù_addr
* 
ù
)

128 
ﬁ§_ù_addr
* 
ªsu…
;

130 
ªsu…
 = 
	`mid_lookup_maö_addr
(
ù
);

131 i‡(
ªsu…
 =
NULL
)

133 
ªsu…
 = 
ù
;

135  
ªsu…
;

136 
	}
}

150 
	$F‹w¨dPackë
(

151 
TBmfI¡îÁ˚
* 
ötf
,

152 * 
ùPackë
,

153 
u_öt16_t
 
ùPackëLí
,

154 c⁄° * 
debugInfo
)

156 
nByãsWrôãn
;

157 
sockaddr_Œ
 
de°
;

159 
pﬁÃë
;

160 
pﬁlfd
 
gu¨d
;

161 
gu¨d
.
fd
 = 
ötf
->
ˇ±urögSkfd
;

162 
gu¨d
.
evíts
 = 
POLLOUT
;

167 
	`CheckAndUpd©eLoˇlBrﬂdˇ°
(
ùPackë
, &
ötf
->
brﬂdAddr
);

169 
	`mem£t
(&
de°
, 0, (dest));

170 
de°
.
¶l_Ámûy
 = 
AF_PACKET
;

171 
de°
.
¶l_¥Ÿocﬁ
 = 
	`ht⁄s
(
ETH_P_IP
);

172 
de°
.
¶l_ifödex
 = 
	`if_«mëoödex
(
ötf
->
ifName
);

173 
de°
.
¶l_hÆí
 = 
IFHWADDRLEN
;

181 
	`mem£t
(
de°
.
¶l_addr
, 0xFF, 
IFHWADDRLEN
);

187 
pﬁÃë
 = 
	`pﬁl
 (&
gu¨d
, 1, 2 * 
ﬁ§_˙f
->
pﬁÃ©e
 * 
MSEC_PER_SEC
);

188 i‡(
pﬁÃë
 <= 0)

190 
	`BmfPEº‹
("£ndto(Ë⁄ \"%s\":ÇŸÑódyÅÿ£ndÖkt.ÖﬁÃë=%d\n", 
ötf
->
ifName
, 
pﬁÃë
);

197 
nByãsWrôãn
 = 
	`£ndto
(

198 
ötf
->
ˇ±urögSkfd
,

199 
ùPackë
,

200 
ùPackëLí
,

202 (
sockaddr
*Ë&
de°
,

203 (
de°
));

204 i‡(
nByãsWrôãn
 !
ùPackëLí
)

206 
	`BmfPEº‹
("£ndto(Ëîr‹ f‹w¨dögÖkà⁄ \"%s\"", 
ötf
->
ifName
);

211 
ötf
->
nBmfPackësTx
++;

213 
	`OLSR_PRINTF
(

216 
PLUGIN_NAME_SHORT
,

217 
debugInfo
,

218 
ötf
->
ifName
);

219 
	}
}

237 
	$EnˇpsuœãAndF‹w¨dPackë
(

238 
TBmfI¡îÁ˚
* 
ötf
,

239 * 
íˇpsuœti⁄UdpD©a
,

240 
ﬁ§_ù_addr
* 
sour˚
,

241 
ﬁ§_ù_addr
* 
f‹w¨dedBy
,

242 
ﬁ§_ù_addr
* 
f‹w¨dedTo
)

245 
u_öt16_t
 
udpD©aLí
 = 
	`GëEnˇpsuœti⁄UdpD©aLígth
(
íˇpsuœti⁄UdpD©a
);

248 
TBe°Neighb‹s
 
be°Neighb‹Löks
;

249 
lök_íåy
* 
be°Neighb‹
;

251 
nPossibÀNeighb‹s
 = 0;

252 
sockaddr_ö
 
f‹w¨dTo
;

253 
nPackësToSíd
;

254 
£ndUniˇ°
;

256 
i
;

259 
	`FödNeighb‹s
(

260 &
be°Neighb‹Löks
,

261 &
be°Neighb‹
,

262 
ötf
,

263 
sour˚
,

264 
f‹w¨dedBy
,

265 
f‹w¨dedTo
,

266 &
nPossibÀNeighb‹s
);

268 i‡(
nPossibÀNeighb‹s
 <= 0)

270 
	`OLSR_PRINTF
(

273 
PLUGIN_NAME_SHORT
,

274 
ötf
->
ifName
);

280 
	`mem£t
(&
f‹w¨dTo
, 0, (forwardTo));

281 
f‹w¨dTo
.
sö_Ámûy
 = 
AF_INET
;

282 
f‹w¨dTo
.
sö_p‹t
 = 
	`ht⁄s
(
BMF_ENCAP_PORT
);

285 
f‹w¨dTo
.
sö_addr
 = 
ötf
->
brﬂdAddr
.
v4
;

294 i‡(
BmfMech™ism
 =
BM_UNICAST_PROMISCUOUS
)

297 
nPackësToSíd
 = 1;

298 
£ndUniˇ°
 = 1;

299 
be°Neighb‹Löks
.
löks
[0] = 
be°Neighb‹
;

303 i‡(
nPossibÀNeighb‹s
 <
F™OutLimô
)

306 
nPackësToSíd
 = 
nPossibÀNeighb‹s
;

307 
£ndUniˇ°
 = 1;

313 
nPackësToSíd
 = 
Brﬂdˇ°RëønsmôCou¡
;

314 
£ndUniˇ°
 = 0;

318 
i
 = 0; i < 
nPackësToSíd
; i++)

320 
nByãsWrôãn
;

322 
pﬁÃë
;

323 
pﬁlfd
 
gu¨d
;

324 
gu¨d
.
fd
 = 
ötf
->
íˇpsuœtögSkfd
;

325 
gu¨d
.
evíts
 = 
POLLOUT
;

327 i‡(
£ndUniˇ°
 == 1)

330 
f‹w¨dTo
.
sö_addr
 = 
be°Neighb‹Löks
.
löks
[
i
]->
√ighb‹_iÁ˚_addr
.
v4
;

337 
pﬁÃë
 = 
	`pﬁl
 (&
gu¨d
, 1, 2 * 
ﬁ§_˙f
->
pﬁÃ©e
 * 
MSEC_PER_SEC
);

338 i‡(
pﬁÃë
 <= 0)

340 
	`BmfPEº‹
("£ndto(Ë⁄ \"%s\":ÇŸÑódyÅÿ£ndÖkt.ÖﬁÃë=%d\n", 
ötf
->
ifName
, 
pﬁÃë
);

347 
nByãsWrôãn
 = 
	`£ndto
(

348 
ötf
->
íˇpsuœtögSkfd
,

349 
íˇpsuœti⁄UdpD©a
,

350 
udpD©aLí
,

351 
MSG_DONTROUTE
,

352 (
sockaddr
*Ë&
f‹w¨dTo
,

353 (
f‹w¨dTo
));

356 i‡(
nByãsWrôãn
 !
udpD©aLí
)

358 
	`BmfPEº‹
("£ndto(Ëîr‹ f‹w¨dögÉnˇpsuœãdÖkà⁄ \"%s\"", 
ötf
->
ifName
);

363 
ötf
->
nBmfPackësTx
++;

365 
	`OLSR_PRINTF
(

368 
PLUGIN_NAME_SHORT
,

369 
ötf
->
ifName
,

370 
	`öë_¡ﬂ
(
f‹w¨dTo
.
sö_addr
));

372 
	}
}

388 
	$BmfPackëC≠tuªd
(

389 
TBmfI¡îÁ˚
* 
ötf
,

390 
¶lPkây≥
,

391 * 
íˇpsuœti⁄UdpD©a
)

393 
ﬁ§_ù_addr
 
§c
;

394 
ﬁ§_ù_addr
 
d°
;

395 
ﬁ§_ù_addr
* 
‹igIp
;

396 
TBmfI¡îÁ˚
* 
wÆkî
;

397 
isFromOl§I¡f
;

398 
isFromOl§Neighb‹
;

399 
iAmM¥
;

400 * 
ùPackë
;

401 
u_öt16_t
 
ùPackëLí
;

402 
ù
* 
ùHódî
;

403 
u_öt32_t
 
¸c32
;

404 
TEnˇpHódî
* 
íˇpHdr
;

405 #i‚de‡
NODEBUG


406 
ùaddr_°r
 
§cBuf
, 
d°Buf
;

408 
ùHódî
 = 
	`GëIpHódî
(
íˇpsuœti⁄UdpD©a
);

410 
d°
.
v4
 = 
ùHódî
->
ù_d°
;

413 i‡(
	`IsMu…iˇ°
(&
d°
) ||

414 (
E«bÀLoˇlBrﬂdˇ°
 !0 && 
	`ùequÆ
(&
d°
, &
ötf
->
brﬂdAddr
)))

423 
ùPackë
 = 
	`GëIpPackë
(
íˇpsuœti⁄UdpD©a
);

432 i‡(
	`IsIpFøgmít
(
ùPackë
Ë|| 
	`IsOl§OrBmfPackë
(ipPacket))

438 
ötf
->
nBmfPackësRx
++;

441 
isFromOl§I¡f
 = (
ötf
->
ﬁ§I¡f
 !
NULL
);

444 
ùPackëLí
 = 
	`GëIpTŸÆLígth
(
ùPackë
);

446 
§c
.
v4
 = 
ùHódî
->
ù_§c
;

448 
	`OLSR_PRINTF
(

451 
PLUGIN_NAME_SHORT
,

452 
¶lPkây≥
 =
PACKET_OUTGOING
 ? "outgoing" : "incoming",

453 ()
ùPackëLí
,

454 
isFromOl§I¡f
 ? "OLSR" : "non-OLSR",

455 
ötf
->
ifName
,

456 
	`ﬁ§_ù_to_°rög
(&
§cBuf
, &
§c
),

457 
	`ﬁ§_ù_to_°rög
(&
d°Buf
, &
d°
));

460 
‹igIp
 = 
	`MaöAddªssOf
(&
§c
);

463 
¸c32
 = 
	`PackëCrc32
(
ùPackë
, 
ùPackëLí
);

466 i‡(
	`CheckAndM¨kRe˚¡Packë
(
¸c32
))

469 
ötf
->
nBmfPackësRxDup
++;

471 
	`OLSR_PRINTF
(

474 
PLUGIN_NAME_SHORT
);

479 
íˇpHdr
 = (
TEnˇpHódî
*Ë
íˇpsuœti⁄UdpD©a
;

480 
	`mem£t
 (
íˇpHdr
, 0, 
ENCAP_HDR_LEN
);

481 
íˇpHdr
->
ty≥
 = 
BMF_ENCAP_TYPE
;

482 
íˇpHdr
->
Àn
 = 
BMF_ENCAP_LEN
;

483 
íˇpHdr
->
ª£rved
 = 0;

484 
íˇpHdr
->
¸c32
 = 
	`ht⁄l
(crc32);

489 
isFromOl§Neighb‹
 =

490 (
isFromOl§I¡f


491 && 
	`gë_be°_lök_to_√ighb‹
(
‹igIp
Ë!
NULL
);

494 
iAmM¥
 = 
	`ﬁ§_lookup_m¥s_£t
(
‹igIp
Ë!
NULL
;

497 
wÆkî
 = 
BmfI¡îÁ˚s
; wÆkî !
NULL
; wÆkî = wÆkî->
√xt
)

500 
isToOl§I¡f
 = (
wÆkî
->
ﬁ§I¡f
 !
NULL
);

544 i‡(
isFromOl§I¡f
 && 
isToOl§I¡f
)

548 i‡(
isFromOl§Neighb‹
 && !
iAmM¥
)

552 #i‚de‡
NODEBUG


553 
ùaddr_°r
 
buf
;

555 
	`OLSR_PRINTF
(

558 
PLUGIN_NAME_SHORT
,

559 
wÆkî
->
ifName
,

560 
	`ﬁ§_ù_to_°rög
(&
buf
, &
§c
));

563 i‡(
¶lPkây≥
 =
PACKET_OUTGOING
 && 
ötf
 =
wÆkî
)

565 
	`OLSR_PRINTF
(

568 
PLUGIN_NAME_SHORT
,

569 
wÆkî
->
ifName
);

574 
	`EnˇpsuœãAndF‹w¨dPackë
(
wÆkî
, 
íˇpsuœti⁄UdpD©a
, 
NULL
, NULL, NULL);

578 i‡(
isFromOl§I¡f
 && !
isToOl§I¡f
)

581 
	`F‹w¨dPackë
 (
wÆkî
, 
ùPackë
, 
ùPackëLí
, "forwardedÅoÇon-OLSR interface");

584 i‡(!
isFromOl§I¡f
 && 
isToOl§I¡f
)

588 
	`EnˇpsuœãAndF‹w¨dPackë
(
wÆkî
, 
íˇpsuœti⁄UdpD©a
, 
NULL
, NULL, NULL);

596 i‡(
ötf
 =
wÆkî
)

598 
	`OLSR_PRINTF
(

601 
PLUGIN_NAME_SHORT
,

602 
wÆkî
->
ifName
);

607 
	`F‹w¨dPackë
 (
wÆkî
, 
ùPackë
, 
ùPackëLí
, "forwarded fromÇon-OLSRÅoÇon-OLSR interface");

611 
	}
}

629 
	$BmfEnˇpsuœti⁄PackëRe˚ived
(

630 
TBmfI¡îÁ˚
* 
ötf
,

631 
ﬁ§_ù_addr
* 
f‹w¨dedBy
,

632 
ﬁ§_ù_addr
* 
f‹w¨dedTo
,

633 * 
íˇpsuœti⁄UdpD©a
)

635 
iAmM¥
;

636 * 
ùPackë
;

637 
u_öt16_t
 
ùPackëLí
;

638 
ù
* 
ùHódî
;

639 
ﬁ§_ù_addr
 
mcSrc
;

640 
ﬁ§_ù_addr
 
mcD°
;

641 
TEnˇpHódî
* 
íˇpsuœti⁄Hdr
;

642 
TBmfI¡îÁ˚
* 
wÆkî
;

643 #i‚de‡
NODEBUG


644 
ùaddr_°r
 
mcSrcBuf
, 
mcD°Buf
, 
f‹w¨dedByBuf
, 
f‹w¨dedToBuf
;

647 i‡(
	`if_ifwôhaddr
(
f‹w¨dedBy
Ë!
NULL
)

653 i‡(
ötf
->
ﬁ§I¡f
 =
NULL
)

659 
ùPackë
 = 
	`GëIpPackë
(
íˇpsuœti⁄UdpD©a
);

660 
ùPackëLí
 = 
	`GëIpTŸÆLígth
(
ùPackë
);

661 
ùHódî
 = 
	`GëIpHódî
(
íˇpsuœti⁄UdpD©a
);

663 
mcSrc
.
v4
 = 
ùHódî
->
ù_§c
;

664 
mcD°
.
v4
 = 
ùHódî
->
ù_d°
;

667 
ötf
->
nBmfPackësRx
++;

670 
	`OLSR_PRINTF
(

673 
PLUGIN_NAME_SHORT
,

674 ()
ùPackëLí
,

675 
ötf
->
ifName
,

676 
	`ﬁ§_ù_to_°rög
(&
mcSrcBuf
, &
mcSrc
),

677 
	`ﬁ§_ù_to_°rög
(&
mcD°Buf
, &
mcD°
),

678 
	`ﬁ§_ù_to_°rög
(&
f‹w¨dedByBuf
, 
f‹w¨dedBy
),

679 
f‹w¨dedTo
 !
NULL
 ? 
	`ﬁ§_ù_to_°rög
(&
f‹w¨dedToBuf
, forwardedTo) : "me");

682 
íˇpsuœti⁄Hdr
 = (
TEnˇpHódî
*Ë
íˇpsuœti⁄UdpD©a
;

685 i‡(
íˇpsuœti⁄Hdr
->
ty≥
 !
BMF_ENCAP_TYPE
 ||

686 
íˇpsuœti⁄Hdr
->
Àn
 !
BMF_ENCAP_LEN
 ||

687 
	`¡ohs
(
íˇpsuœti⁄Hdr
->
ª£rved
 != 0))

689 
	`OLSR_PRINTF
(

692 
PLUGIN_NAME_SHORT
);

697 i‡(
	`CheckAndM¨kRe˚¡Packë
(
	`¡ohl
(
íˇpsuœti⁄Hdr
->
¸c32
)))

700 
ötf
->
nBmfPackësRxDup
++;

702 
	`OLSR_PRINTF
(

705 
PLUGIN_NAME_SHORT
);

709 i‡(
EthîTunT≠Fd
 >= 0)

714 
ﬁ§_ù_addr
 
brﬂdAddr
;

715 
nByãsToWrôe
, 
nByãsWrôãn
;

716 * 
buf„rToWrôe
;

721 
brﬂdAddr
.
v4
.
s_addr
 = 
	`ht⁄l
(
EthîTunT≠IpBrﬂdˇ°
);

722 
	`CheckAndUpd©eLoˇlBrﬂdˇ°
(
ùPackë
, &
brﬂdAddr
);

724 
buf„rToWrôe
 = 
ùPackë
;

725 
nByãsToWrôe
 = 
ùPackëLí
;

728 
nByãsWrôãn
 = 
	`wrôe
(
EthîTunT≠Fd
, 
buf„rToWrôe
, 
nByãsToWrôe
);

729 i‡(
nByãsWrôãn
 !
nByãsToWrôe
)

731 
	`BmfPEº‹
("wrôe(Ëîr‹ f‹w¨dögÉnˇpsuœãdÖkà⁄ \"%s\"", 
EthîTunT≠IfName
);

735 
	`OLSR_PRINTF
(

738 
PLUGIN_NAME_SHORT
,

739 
EthîTunT≠IfName
);

744 
iAmM¥
 = (
	`ﬁ§_lookup_m¥s_£t
(
	`MaöAddªssOf
(
f‹w¨dedBy
)Ë!
NULL
);

747 
wÆkî
 = 
BmfI¡îÁ˚s
; wÆkî !
NULL
; wÆkî = wÆkî->
√xt
)

759 i‡(
wÆkî
->
ﬁ§I¡f
 =
NULL
)

761 
	`F‹w¨dPackë
 (
wÆkî
, 
ùPackë
, 
ùPackëLí
, "unpackedánd forwardedÅoÇon-OLSR interface");

766 i‡(
iAmM¥
)

768 
	`EnˇpsuœãAndF‹w¨dPackë
 (

769 
wÆkî
,

770 
íˇpsuœti⁄UdpD©a
,

771 &
mcSrc
,

772 
f‹w¨dedBy
,

773 
f‹w¨dedTo
);

778 #i‚de‡
NODEBUG


779 
ùaddr_°r
 
buf
;

783 
	`OLSR_PRINTF
(

786 
PLUGIN_NAME_SHORT
,

787 
wÆkî
->
ifName
,

788 
	`ﬁ§_ù_to_°rög
(&
buf
, 
f‹w¨dedBy
));

791 
	}
}

804 
	$BmfTunPackëC≠tuªd
(* 
íˇpsuœti⁄UdpD©a
)

806 
ﬁ§_ù_addr
 
§cIp
;

807 
ﬁ§_ù_addr
 
d°Ip
;

808 
ﬁ§_ù_addr
 
brﬂdAddr
;

809 
TBmfI¡îÁ˚
* 
wÆkî
;

810 * 
ùPackë
;

811 
u_öt16_t
 
ùPackëLí
;

812 
ù
* 
ùHódî
;

813 
u_öt32_t
 
¸c32
;

814 
TEnˇpHódî
* 
íˇpHdr
;

815 #i‚de‡
NODEBUG


816 
ùaddr_°r
 
§cIpBuf
, 
d°IpBuf
;

818 
ùPackë
 = 
	`GëIpPackë
(
íˇpsuœti⁄UdpD©a
);

819 
ùPackëLí
 = 
	`GëIpTŸÆLígth
(
ùPackë
);

820 
ùHódî
 = 
	`GëIpHódî
(
íˇpsuœti⁄UdpD©a
);

822 
d°Ip
.
v4
 = 
ùHódî
->
ù_d°
;

823 
brﬂdAddr
.
v4
.
s_addr
 = 
	`ht⁄l
(
EthîTunT≠IpBrﬂdˇ°
);

826 i‡(
	`IsMu…iˇ°
(&
d°Ip
) ||

827 (
E«bÀLoˇlBrﬂdˇ°
 !0 && 
	`ùequÆ
(&
d°Ip
, &
brﬂdAddr
)))

836 
§cIp
.
v4
 = 
ùHódî
->
ù_§c
;

838 
	`OLSR_PRINTF
(

841 
PLUGIN_NAME_SHORT
,

842 ()
ùPackëLí
,

843 
EthîTunT≠IfName
,

844 
	`ﬁ§_ù_to_°rög
(&
§cIpBuf
, &
§cIp
),

845 
	`ﬁ§_ù_to_°rög
(&
d°IpBuf
, &
d°Ip
));

848 
¸c32
 = 
	`PackëCrc32
(
ùPackë
, 
ùPackëLí
);

851 i‡(
	`CheckAndM¨kRe˚¡Packë
(
¸c32
))

853 
	`OLSR_PRINTF
(

856 
PLUGIN_NAME_SHORT
);

861 
íˇpHdr
 = (
TEnˇpHódî
*Ë
íˇpsuœti⁄UdpD©a
;

862 
	`mem£t
 (
íˇpHdr
, 0, 
ENCAP_HDR_LEN
);

863 
íˇpHdr
->
ty≥
 = 
BMF_ENCAP_TYPE
;

864 
íˇpHdr
->
Àn
 = 
BMF_ENCAP_LEN
;

865 
íˇpHdr
->
ª£rved
 = 0;

866 
íˇpHdr
->
¸c32
 = 
	`ht⁄l
(crc32);

869 
wÆkî
 = 
BmfI¡îÁ˚s
; wÆkî !
NULL
; wÆkî = wÆkî->
√xt
)

872 i‡(
wÆkî
->
ﬁ§I¡f
 !
NULL
)

875 
	`EnˇpsuœãAndF‹w¨dPackë
(
wÆkî
, 
íˇpsuœti⁄UdpD©a
, 
NULL
, NULL, NULL);

883 
	`F‹w¨dPackë
 (
wÆkî
, 
ùPackë
, 
ùPackëLí
, "forwarded fromÇon-OLSRÅoÇon-OLSR interface");

886 
	}
}

898 
BMF_h™dÀ_ˇ±uªFd
(
skfd
, *
d©a
, 
Êags
 
__©åibuã__
 ((
unu£d
))) {

899 
	grxBuf„r
[
BMF_BUFFER_SIZE
];

900 
TBmfI¡îÁ˚
* 
	gwÆkî
 = 
d©a
;

901 
sockaddr_Œ
 
	gpktAddr
;

902 
sockÀn_t
 
	gaddrLí
 = (
pktAddr
);

903 
	gnByãs
;

904 * 
	gùPackë
;

908 
	gùPackë
 = 
GëIpPackë
(
rxBuf„r
);

909 
	gnByãs
 = 
ªcv‰om
(

910 
skfd
,

911 
ùPackë
,

912 
BMF_BUFFER_SIZE
 - 
ENCAP_HDR_LEN
,

914 (
sockaddr
*)&
pktAddr
,

915 &
addrLí
);

916 i‡(
	gnByãs
 < 0)

918 
BmfPEº‹
("ªcv‰om(Ëîr‹ o¿\"%s\"", 
wÆkî
->
ifName
);

928 i‡(
	gnByãs
 < ()(
	gù
))

930 
ﬁ§_¥ötf
(

933 
PLUGIN_NAME
,

934 
nByãs
,

935 
wÆkî
->
ifName
);

939 i‡(
	gpktAddr
.
	g¶l_pkây≥
 =
PACKET_OUTGOING
 ||

940 
pktAddr
.
¶l_pkây≥
 =
PACKET_MULTICAST
 ||

941 
pktAddr
.
¶l_pkây≥
 =
PACKET_BROADCAST
)

945 
BmfPackëC≠tuªd
(
wÆkî
, 
pktAddr
.
¶l_pkây≥
, 
rxBuf„r
);

951 
BMF_h™dÀ_li°íögFd
(
skfd
, *
d©a
, 
Êags
 
__©åibuã__
 ((
unu£d
))) {

952 
	grxBuf„r
[
BMF_BUFFER_SIZE
];

953 
TBmfI¡îÁ˚
* 
	gwÆkî
 = 
d©a
;

954 
sockaddr_Œ
 
	gpktAddr
;

955 
sockÀn_t
 
	gaddrLí
 = (
pktAddr
);

956 
	gnByãs
;

957 
	gmöimumLígth
;

958 
ù
* 
	gùHódî
;

959 
udphdr
* 
	gudpHódî
;

960 
u_öt16_t
 
	gde°P‹t
;

961 
ﬁ§_ù_addr
 
	gf‹w¨dedBy
;

962 
ﬁ§_ù_addr
 
	gf‹w¨dedTo
;

966 
	gnByãs
 = 
ªcv‰om
(

967 
skfd
,

968 
rxBuf„r
,

969 
BMF_BUFFER_SIZE
,

971 (
sockaddr
*)&
pktAddr
,

972 &
addrLí
);

973 i‡(
	gnByãs
 < 0)

975 
BmfPEº‹
("ªcv‰om(Ëîr‹ o¿\"%s\"", 
wÆkî
->
ifName
);

981 i‡(
	gpktAddr
.
	g¶l_pkây≥
 !
PACKET_OTHERHOST
)

990 
	gùHódî
 = (
ù
*Ë
ARM_NOWARN_ALIGN
(
rxBuf„r
);

991 i‡(
	gùHódî
->
	gù_p
 !
SOL_UDP
)

997 
	gudpHódî
 = (
udphdr
*Ë
ARM_NOWARN_ALIGN
((
rxBuf„r
 + 
GëIpHódîLígth
(rxBuffer)));

998 
	gde°P‹t
 = 
¡ohs
(
udpHódî
->
de°
);

999 i‡(
	gde°P‹t
 !
BMF_ENCAP_PORT
)

1014 
	gmöimumLígth
 =

1015 
GëIpHódîLígth
(
rxBuf„r
) +

1016 (
udphdr
) +

1017 
ENCAP_HDR_LEN
 +

1018 (
ù
);

1019 i‡(
	gnByãs
 < 
	gmöimumLígth
)

1021 
ﬁ§_¥ötf
(

1024 
PLUGIN_NAME
,

1025 
nByãs
,

1026 
wÆkî
->
ifName
);

1031 
	gf‹w¨dedBy
.
	gv4
 = 
ùHódî
->
ù_§c
;

1032 
	gf‹w¨dedTo
.
	gv4
 = 
ùHódî
->
ù_d°
;

1033 
BmfEnˇpsuœti⁄PackëRe˚ived
(

1034 
wÆkî
,

1035 &
f‹w¨dedBy
,

1036 &
f‹w¨dedTo
,

1037 
rxBuf„r
 + 
GëIpHódîLígth
‘xBuf„rË+ (
udphdr
));

1042 
BMF_h™dÀ_íˇpsuœtögFd
(
skfd
, *
d©a
, 
Êags
 
__©åibuã__
 ((
unu£d
))) {

1043 
	grxBuf„r
[
BMF_BUFFER_SIZE
];

1044 
TBmfI¡îÁ˚
* 
	gwÆkî
 = 
d©a
;

1045 
sockaddr_ö
 
	g‰om
;

1046 
sockÀn_t
 
	g‰omLí
 = (
‰om
);

1047 
	gnByãs
;

1048 
	gmöimumLígth
;

1049 
ﬁ§_ù_addr
 
	gf‹w¨dedBy
;

1052 
	gnByãs
 = 
ªcv‰om
(

1053 
skfd
,

1054 
rxBuf„r
,

1055 
BMF_BUFFER_SIZE
,

1057 (
sockaddr
*)&
‰om
,

1058 &
‰omLí
);

1059 i‡(
	gnByãs
 < 0)

1061 
BmfPEº‹
("ªcv‰om(Ëîr‹ o¿\"%s\"", 
wÆkî
->
ifName
);

1066 
	gf‹w¨dedBy
.
	gv4
 = 
‰om
.
sö_addr
;

1072 
	gmöimumLígth
 =

1073 
ENCAP_HDR_LEN
 +

1074 (
ù
);

1075 i‡(
	gnByãs
 < 
	gmöimumLígth
)

1077 
ùaddr_°r
 
	gbuf
;

1078 
ﬁ§_¥ötf
(

1081 
PLUGIN_NAME
,

1082 
nByãs
,

1083 
ﬁ§_ù_to_°rög
(&
buf
, &
f‹w¨dedBy
),

1084 
wÆkî
->
ifName
);

1092 
BmfEnˇpsuœti⁄PackëRe˚ived
(
wÆkî
, &
f‹w¨dedBy
, 
NULL
, 
rxBuf„r
);

1096 
BMF_h™dÀ_tu¡≠Fd
(
skfd
 
__©åibuã__
 ((
unu£d
)),

1097 *
d©a
 
__©åibuã__
 ((
unu£d
)), 
Êags
 __attribute__ ((unused))) {

1098 
	grxBuf„r
[
BMF_BUFFER_SIZE
];

1099 
	gnByãs
;

1100 * 
	gùPackë
;

1101 * 
	gbuf„rToRód
;

1102 
size_t
 
	gnByãsToRód
;

1105 
	gùPackë
 = 
GëIpPackë
(
rxBuf„r
);

1107 
	gbuf„rToRód
 = 
ùPackë
;

1108 
	gnByãsToRód
 = 
BMF_BUFFER_SIZE
 - 
ENCAP_HDR_LEN
;

1110 
	gnByãs
 = 
ªad
(
EthîTunT≠Fd
, 
buf„rToRód
, 
nByãsToRód
);

1111 i‡(
	gnByãs
 < 0)

1113 
BmfPEº‹
("ªcv‰om(Ëîr‹ o¿\"%s\"", 
EthîTunT≠IfName
);

1119 i‡(
	gnByãs
 < ()(
	gù
))

1121 
ﬁ§_¥ötf
(

1124 
PLUGIN_NAME
,

1125 
nByãs
,

1126 
EthîTunT≠IfName
);

1130 
BmfTunPackëC≠tuªd
(
rxBuf„r
);

1145 
I¡îÁ˚Ch™ge
(
if_ödex
 
__©åibuã__
((
unu£d
)), 
öãrÁ˚
* 
öãrf
,

1146 
ﬁ§_ifchg_Êag
 
a˘i⁄
)

1148 i‡(
	göãrf
 =
NULL
) {

1151 
	ga˘i⁄
)

1153 (
	gIFCHG_IF_ADD
):

1158 
Clo£Bmf
();

1159 
InôBmf
(
NULL
);

1160 
ﬁ§_¥ötf
(1, "%s: i¡îÁ˚ %†added\n", 
PLUGIN_NAME
, 
öãrf
->
öt_«me
);

1163 (
	gIFCHG_IF_REMOVE
):

1169 
Clo£Bmf
();

1170 
InôBmf
(
öãrf
);

1171 
ﬁ§_¥ötf
(1, "%s: i¡îÁ˚ %†ªmoved\n", 
PLUGIN_NAME
, 
öãrf
->
öt_«me
);

1174 (
	gIFCHG_IF_UPDATE
):

1175 
ﬁ§_¥ötf
(1, "%s: i¡îÁ˚ %†upd©ed\n", 
PLUGIN_NAME
, 
öãrf
->
öt_«me
);

1179 
ﬁ§_¥ötf
(

1182 
PLUGIN_NAME
,

1183 
öãrf
->
öt_«me
, 
a˘i⁄
);

1199 
SëF™OutLimô
(

1200 c⁄° * 
vÆue
,

1201 * 
d©a
 
__©åibuã__
((
unu£d
)),

1202 
£t_∂ugö_∑ømëî_add⁄
 
add⁄
 
__©åibuã__
((
unu£d
)))

1204 i‡(
£t_∂ugö_öt
(
vÆue
, &
F™OutLimô
, 
add⁄
) == 0)

1207 i‡(
F™OutLimô
 >0 && F™OutLimô <
MAX_UNICAST_NEIGHBORS
)

1224 
	$InôBmf
(
öãrÁ˚
* 
skùThisI¡f
)

1226 
	`Cª©eBmfNëw‹kI¡îÁ˚s
(
skùThisI¡f
);

1228 i‡(
EthîTunT≠Fd
 >= 0)

1231 
	`Dó˘iv©eSpoofFûãr
();

1235 i‡(
EthîTunT≠Ip
 !
ETHERTUNTAPDEFAULTIP
)

1237 
	`AddMu…iˇ°Rouã
();

1242 
	}
}

1252 
	$Clo£Bmf
()

1254 i‡(
EthîTunT≠Fd
 >= 0)

1257 
	`DñëeMu…iˇ°Rouã
();

1260 
	`Re°‹eSpoofFûãr
();

1264 
	`Clo£BmfNëw‹kI¡îÁ˚s
();

1265 
	}
}

	@lib/bmf/src/Bmf.h

1 #i‚de‡
_BMF_BMF_H


2 
	#_BMF_BMF_H


	)

43 
	~"ﬁ§d_∂ugö.h
"

44 
	~"öãrÁ˚s.h
"

47 
	#PLUGIN_NAME
 "OLSRD Basi¯Mu…iˇ° F‹w¨dög (BMFË∂ugö"

	)

48 
	#PLUGIN_NAME_SHORT
 "OLSRD BMF"

	)

49 
	#PLUGIN_VERSION
 "1.7.0 (" 
__DATE__
 " " 
__TIME__
 ")"

	)

50 
	#PLUGIN_COPYRIGHT
 " (CËThÆe†Communiˇti⁄†Huizí, Nëhîœnds"

	)

51 
	#PLUGIN_AUTHOR
 " Erik Trom∞”rikåomp@u£rs.sour˚f‹ge.√t)"

	)

52 
	#MOD_DESC
 
PLUGIN_NAME
 " " 
PLUGIN_VERSION
 "\n" 
PLUGIN_COPYRIGHT
 "\n" 
PLUGIN_AUTHOR


	)

53 
	#PLUGIN_INTERFACE_VERSION
 5

	)

56 
	#BMF_ENCAP_PORT
 50698

	)

59 
	göãrÁ˚
;

61 
F™OutLimô
;

62 
Brﬂdˇ°RëønsmôCou¡
;

64 
BMF_h™dÀ_ˇ±uªFd
(
skfd
, *
d©a
, );

65 
BMF_h™dÀ_li°íögFd
(
skfd
, *
d©a
, );

66 
BMF_h™dÀ_íˇpsuœtögFd
(
skfd
, *
d©a
, );

67 
BMF_h™dÀ_tu¡≠Fd
(, *, );

69 
	$BmfPEº‹
(c⁄° * 
f‹m©
, ...Ë
	`__©åibuã__
((
	`f‹m©
(
¥ötf
, 1, 2)));

70 
ﬁ§_ù_addr
* 
	`MaöAddªssOf
(ﬁ§_ù_addr* 
ù
);

71 
	`I¡îÁ˚Ch™ge
(, 
öãrÁ˚
* 
öãrf
, 
ﬁ§_ifchg_Êag
 
a˘i⁄
);

72 
	`SëF™OutLimô
(c⁄° * 
vÆue
, * 
d©a
, 
£t_∂ugö_∑ømëî_add⁄
 
add⁄
);

73 
	`InôBmf
(
öãrÁ˚
* 
skùThisI¡f
);

74 
	`Clo£Bmf
();

	@lib/bmf/src/NetworkInterfaces.c

40 
	~"Nëw‹kI¡îÁ˚s.h
"

43 
	~<°ddef.h
>

44 
	~<sy¶og.h
>

45 
	~<°rög.h
>

46 
	~<î∫o.h
>

47 
	~<uni°d.h
>

48 
	~<sys/io˘l.h
>

49 
	~<f˙é.h
>

50 
	~<as£π.h
>

51 
	~<√t/if.h
>

52 
	~<√töë/ö.h
>

53 
	~<löux/if_ëhî.h
>

54 
	~<löux/if_∑ckë.h
>

55 
	~<löux/if_tun.h
>

56 
	~<√töë/ù.h
>

57 
	~<√töë/udp.h
>

60 
	~"ﬁ§.h
"

61 
	~"ùˇlc.h
"

62 
	~"defs.h
"

63 
	~"lök_£t.h
"

64 
	~"tc_£t.h
"

65 
	~"√t_ﬁ§.h
"

66 
	~"lq_∂ugö.h
"

69 
	~"Packë.h
"

70 
	~"Bmf.h
"

71 
	~"Addªss.h
"

74 
TBmfI¡îÁ˚
* 
	gBmfI¡îÁ˚s
 = 
NULL
;

75 
TBmfI¡îÁ˚
* 
	gLa°BmfI¡îÁ˚
 = 
NULL
;

79 
	gHighe°Skfd
 = -1;

82 
fd_£t
 
	gI≈utSë
;

85 
	gEthîTunT≠Fd
 = -1;

89 
	gEthîTunT≠IfName
[
IFNAMSIZ
] = "bmf0";

95 
TBmfMech™ism
 
	gBmfMech™ism
 = 
BM_BROADCAST
;

97 
	#ETHERTUNTAPIPNOTSET
 0

	)

101 
u_öt32_t
 
	gEthîTunT≠Ip
 = 
ETHERTUNTAPIPNOTSET
;

105 
u_öt32_t
 
	gEthîTunT≠IpMask
 = 0xFFFFFFFF;

109 
u_öt32_t
 
	gEthîTunT≠IpBrﬂdˇ°
 = 
ETHERTUNTAPIPNOTSET
;

113 
	gTunT≠IpOvîruÀd
 = 0;

118 
	gC≠tuªPackësOnOl§I¡îÁ˚s
 = 0;

131 
SëBmfI¡îÁ˚Name
(

132 c⁄° * 
i‚ame
,

133 * 
d©a
 
__©åibuã__
((
unu£d
)),

134 
£t_∂ugö_∑ømëî_add⁄
 
add⁄
 
__©åibuã__
((
unu£d
)))

136 
°∫˝y
(
EthîTunT≠IfName
, 
i‚ame
, 
IFNAMSIZ
 - 1);

137 
	gEthîTunT≠IfName
[
IFNAMSIZ
 - 1] = '\0';

153 
SëBmfI¡îÁ˚Ip
(

154 c⁄° * 
ù
,

155 * 
d©a
 
__©åibuã__
((
unu£d
)),

156 
£t_∂ugö_∑ømëî_add⁄
 
add⁄
 
__©åibuã__
((
unu£d
)))

158 
	#IPV4_MAX_ADDRLEN
 16

	)

159 
	#IPV4_MAX_PREFIXLEN
 32

	)

160 * 
	g¶ashAt
;

161 
	gùAddr
[
IPV4_MAX_ADDRLEN
];

162 
ö_addr
 
	gsöaddr
;

163 
	g¥efixLí
;

164 
	gi
;

170 
	g¶ashAt
 = 
°rchr
(
ù
, '/');

173 i‡(
	g¶ashAt
 =
NULL
 || 
¶ashAt
 - 
ù
 >
IPV4_MAX_ADDRLEN
)

179 
°∫˝y
(
ùAddr
, 
ù
, 
¶ashAt
 - ip);

180 *(
	gùAddr
 + (
	g¶ashAt
 - 
	gù
)) = '\0';

181 i‡(
öë_©⁄
(
ùAddr
, &
söaddr
) == 0)

187 
	gEthîTunT≠Ip
 = 
¡ohl
(
söaddr
.
s_addr
);

190 
	g¥efixLí
 = 
©oi
(++
¶ashAt
);

191 i‡(
	g¥efixLí
 <0 || 
¥efixLí
 > 
IPV4_MAX_PREFIXLEN
)

197 
	gEthîTunT≠IpMask
 = 0;

198 
	gi
 = 0; i < 
	g¥efixLí
; i++)

200 
	gEthîTunT≠IpMask
 |(1 << (
IPV4_MAX_PREFIXLEN
 - 1 - 
i
));

204 
	gEthîTunT≠IpBrﬂdˇ°
 = 
EthîTunT≠Ip
;

205 
	gi
 = 
¥efixLí
; i < 
	gIPV4_MAX_PREFIXLEN
; i++)

207 
	gEthîTunT≠IpBrﬂdˇ°
 |(1 << (
IPV4_MAX_PREFIXLEN
 - 1 - 
i
));

210 
	gTunT≠IpOvîruÀd
 = 1;

226 
SëC≠tuªPackësOnOl§I¡îÁ˚s
(

227 c⁄° * 
íabÀ
,

228 * 
d©a
 
__©åibuã__
((
unu£d
)),

229 
£t_∂ugö_∑ømëî_add⁄
 
add⁄
 
__©åibuã__
((
unu£d
)))

231 i‡(
°rcmp
(
íabÀ
, "yes") == 0)

233 
C≠tuªPackësOnOl§I¡îÁ˚s
 = 1;

236 i‡(
°rcmp
(
íabÀ
, "no") == 0)

238 
C≠tuªPackësOnOl§I¡îÁ˚s
 = 0;

257 
SëBmfMech™ism
(

258 c⁄° * 
mech™ism
,

259 * 
d©a
 
__©åibuã__
((
unu£d
)),

260 
£t_∂ugö_∑ømëî_add⁄
 
add⁄
 
__©åibuã__
((
unu£d
)))

262 i‡(
°rcmp
(
mech™ism
, "Broadcast") == 0)

264 
BmfMech™ism
 = 
BM_BROADCAST
;

267 i‡(
°rcmp
(
mech™ism
, "UnicastPromiscuous") == 0)

269 
BmfMech™ism
 = 
BM_UNICAST_PROMISCUOUS
;

286 
	$AddDes¸ùt‹ToI≈utSë
(
skfd
)

289 i‡(
skfd
 > 
Highe°Skfd
)

291 
Highe°Skfd
 = 
skfd
;

295 
	`FD_SET
(
skfd
, &
I≈utSë
);

296 
	}
}

299 
	gEthT≠SpoofSèã
 = '1';

311 
	$Dó˘iv©eSpoofFûãr
()

313 
FILE
* 
¥ocSpoof
;

314 
¥ocFûe
[
FILENAME_MAX
];

317 
	`•rötf
(
¥ocFûe
, "/¥oc/sys/√t/ùv4/c⁄f/%s/Ω_fûãr", 
EthîTunT≠IfName
);

320 
¥ocSpoof
 = 
	`f›í
(
¥ocFûe
, "r");

321 i‡(
¥ocSpoof
 =
NULL
)

323 
	`Ârötf
(

324 
°dîr
,

330 
¥ocFûe
);

332 
	`¶ìp
(3);

336 
EthT≠SpoofSèã
 = 
	`fgëc
(
¥ocSpoof
);

337 
	`f˛o£
(
¥ocSpoof
);

340 
¥ocSpoof
 = 
	`f›í
(
¥ocFûe
, "w");

341 i‡(
¥ocSpoof
 =
NULL
)

343 
	`Ârötf
(
°dîr
, "CouldÇŸ o≥¿%†f‹ wrôög!\n", 
¥ocFûe
);

344 
	`Ârötf
(

345 
°dîr
,

348 
	`¶ìp
(3);

352 
	`sy¶og
(
LOG_INFO
, "Wrôög \"0\"Åÿ%s", 
¥ocFûe
);

353 
	`Âuts
("0", 
¥ocSpoof
);

355 
	`f˛o£
(
¥ocSpoof
);

358 
	}
}

369 
	$Re°‹eSpoofFûãr
()

371 
FILE
* 
¥ocSpoof
;

372 
¥ocFûe
[
FILENAME_MAX
];

375 
	`•rötf
(
¥ocFûe
, "/¥oc/sys/√t/ùv4/c⁄f/%s/Ω_fûãr", 
EthîTunT≠IfName
);

378 
¥ocSpoof
 = 
	`f›í
(
¥ocFûe
, "w");

379 i‡(
¥ocSpoof
 =
NULL
)

381 
	`Ârötf
(
°dîr
, "CouldÇŸ o≥¿%†f‹ wrôög!\nSëtög†nŸÑe°‹ed!\n", 
¥ocFûe
);

385 
	`sy¶og
(
LOG_INFO
, "Re£âög %†tÿ%c\n", 
¥ocFûe
, 
EthT≠SpoofSèã
);

387 
	`Âutc
(
EthT≠SpoofSèã
, 
¥ocSpoof
);

388 
	`f˛o£
(
¥ocSpoof
);

390 
	}
}

409 
	$FödNeighb‹s
(

410 
TBe°Neighb‹s
* 
√ighb‹s
,

411 
lök_íåy
** 
be°Neighb‹
,

412 
TBmfI¡îÁ˚
* 
ötf
,

413 
ﬁ§_ù_addr
* 
sour˚
,

414 
ﬁ§_ù_addr
* 
f‹w¨dedBy
,

415 
ﬁ§_ù_addr
* 
f‹w¨dedTo
,

416 * 
nPossibÀNeighb‹s
)

418 #i‚de‡
NODEBUG


419 
ùaddr_°r
 
buf
;

421 
i
;

424 *
be°Neighb‹
 = 
NULL
;

425 
i
 = 0; i < 
MAX_UNICAST_NEIGHBORS
; i++)

427 
√ighb‹s
->
löks
[
i
] = 
NULL
;

429 *
nPossibÀNeighb‹s
 = 0;

433 i‡(
ﬁ§_˙f
->
lq_Àvñ
 == 0)

435 
lök_íåy
* 
wÆkî
;

437 
	`OLSR_FOR_ALL_LINK_ENTRIES
(
wÆkî
) {

438 
ﬁ§_ù_addr
* 
√ighb‹MaöIp
;

441 i‡(! 
	`ùequÆ
(&
ötf
->
ötAddr
, &
wÆkî
->
loˇl_iÁ˚_addr
))

446 
	`OLSR_PRINTF
(

449 
PLUGIN_NAME_SHORT
,

450 
ötf
->
ifName
,

451 
	`ﬁ§_ù_to_°rög
(&
buf
, &
wÆkî
->
√ighb‹_iÁ˚_addr
));

453 
√ighb‹MaöIp
 = 
	`MaöAddªssOf
(&
wÆkî
->
√ighb‹_iÁ˚_addr
);

457 i‡(
sour˚
 !
NULL
 && 
	`ùequÆ
(
√ighb‹MaöIp
, 
	`MaöAddªssOf
(source)))

459 
	`OLSR_PRINTF
(

462 
PLUGIN_NAME_SHORT
,

463 
	`ﬁ§_ù_to_°rög
(&
buf
, &
wÆkî
->
√ighb‹_iÁ˚_addr
));

469 i‡(
f‹w¨dedBy
 !
NULL
 && 
	`ùequÆ
(
√ighb‹MaöIp
, 
	`MaöAddªssOf
(forwardedBy)))

471 
	`OLSR_PRINTF
(

474 
PLUGIN_NAME_SHORT
,

475 
	`ﬁ§_ù_to_°rög
(&
buf
, &
wÆkî
->
√ighb‹_iÁ˚_addr
));

481 i‡(
f‹w¨dedTo
 !
NULL
 && 
	`ùequÆ
(
√ighb‹MaöIp
, 
	`MaöAddªssOf
(forwardedTo)))

483 
	`OLSR_PRINTF
(

486 
PLUGIN_NAME_SHORT
,

487 
	`ﬁ§_ù_to_°rög
(&
buf
, &
wÆkî
->
√ighb‹_iÁ˚_addr
));

498 i‡(*
be°Neighb‹
 =
NULL
)

500 *
be°Neighb‹
 = 
wÆkî
;

506 i‡(*
nPossibÀNeighb‹s
 < 
F™OutLimô
)

508 
√ighb‹s
->
löks
[*
nPossibÀNeighb‹s
] = 
wÆkî
;

511 *
nPossibÀNeighb‹s
 += 1;

512 } 
	`OLSR_FOR_ALL_LINK_ENTRIES_END
(
wÆkî
);

518 #ifde‡
USING_THALES_LINK_COST_ROUTING


520 
lök_íåy
* 
wÆkî
;

521 
¥eviousLökCo°
 = 2 * 
INFINITE_COST
;

522 
be°LökCo°
 = 2 * 
INFINITE_COST
;

524 i‡(
f‹w¨dedBy
 !
NULL
)

527 
lök_íåy
* 
be°LökFromF‹w¨dî
 = 
	`gë_be°_lök_to_√ighb‹
(
f‹w¨dedBy
);

528 i‡(
be°LökFromF‹w¨dî
 !
NULL
)

530 
¥eviousLökCo°
 = 
be°LökFromF‹w¨dî
->
lök_co°
;

534 
wÆkî
 = 
	`gë_lök_£t
(); wÆkî !
NULL
; wÆkî = wÆkî->
√xt
)

536 
ﬁ§_ù_addr
* 
√ighb‹MaöIp
;

537 
lök_íåy
* 
be°LökToNeighb‹
;

538 
tc_íåy
* 
tcLa°H›
;

541 i‡(! 
	`ùequÆ
(&
ötf
->
ötAddr
, &
wÆkî
->
loˇl_iÁ˚_addr
))

546 
	`OLSR_PRINTF
(

549 
PLUGIN_NAME_SHORT
,

550 
ötf
->
ifName
,

551 
	`ﬁ§_ù_to_°rög
(&
buf
, &
wÆkî
->
√ighb‹_iÁ˚_addr
));

553 
√ighb‹MaöIp
 = 
	`MaöAddªssOf
(&
wÆkî
->
√ighb‹_iÁ˚_addr
);

557 i‡(
sour˚
 !
NULL
 && 
	`ùequÆ
(
√ighb‹MaöIp
, 
	`MaöAddªssOf
(source)))

559 
	`OLSR_PRINTF
(

562 
PLUGIN_NAME_SHORT
,

563 
	`ﬁ§_ù_to_°rög
(&
buf
, &
wÆkî
->
√ighb‹_iÁ˚_addr
));

569 i‡(
f‹w¨dedBy
 !
NULL
 && 
	`ùequÆ
(
√ighb‹MaöIp
, 
	`MaöAddªssOf
(forwardedBy)))

571 
	`OLSR_PRINTF
(

574 
PLUGIN_NAME_SHORT
,

575 
	`ﬁ§_ù_to_°rög
(&
buf
, &
wÆkî
->
√ighb‹_iÁ˚_addr
));

581 i‡(
f‹w¨dedTo
 !
NULL
 && 
	`ùequÆ
(
√ighb‹MaöIp
, 
	`MaöAddªssOf
(forwardedTo)))

583 
	`OLSR_PRINTF
(

586 
PLUGIN_NAME_SHORT
,

587 
	`ﬁ§_ù_to_°rög
(&
buf
, &
wÆkî
->
√ighb‹_iÁ˚_addr
));

594 i‡(
wÆkî
->
lök_co°
 >
INFINITE_COST
)

596 
	`OLSR_PRINTF
(

599 
PLUGIN_NAME_SHORT
,

600 
	`ﬁ§_ù_to_°rög
(&
buf
, &
wÆkî
->
√ighb‹_iÁ˚_addr
));

606 
	`OLSR_PRINTF
(

609 
PLUGIN_NAME_SHORT
,

610 
	`ﬁ§_ù_to_°rög
(&
buf
, &
wÆkî
->
√ighb‹_iÁ˚_addr
),

611 
wÆkî
->
lök_co°
);

616 
be°LökToNeighb‹
 = 
	`gë_be°_lök_to_√ighb‹
(&
wÆkî
->
√ighb‹_iÁ˚_addr
);

618 i‡(
wÆkî
 !
be°LökToNeighb‹
)

620 i‡(
be°LökToNeighb‹
 =
NULL
)

622 
	`OLSR_PRINTF
(

625 
PLUGIN_NAME_SHORT
,

626 
	`ﬁ§_ù_to_°rög
(&
buf
, &
wÆkî
->
√ighb‹_iÁ˚_addr
));

630 
öãrÁ˚
* 
be°I¡f
 = 
	`if_ifwôhaddr
(&
be°LökToNeighb‹
->
loˇl_iÁ˚_addr
);

632 
	`OLSR_PRINTF
(

635 
PLUGIN_NAME_SHORT
,

636 
	`ﬁ§_ù_to_°rög
(&
buf
, &
wÆkî
->
√ighb‹_iÁ˚_addr
),

637 
be°I¡f
->
öt_«me
,

638 
be°LökToNeighb‹
->
lök_co°
);

644 i‡(
f‹w¨dedBy
 !
NULL
)

646 
	`OLSR_PRINTF
(

649 
PLUGIN_NAME_SHORT
,

650 
	`ﬁ§_ù_to_°rög
(&
f‹w¨dedByBuf
, 
f‹w¨dedBy
),

651 
	`ﬁ§_ù_to_°rög
(&
nüBuf
, &
wÆkî
->
√ighb‹_iÁ˚_addr
),

652 
¥eviousLökCo°
 + 
wÆkî
->
lök_co°
);

659 i‡(
f‹w¨dedBy
 !
NULL
)

661 
tcLa°H›
 = 
	`ﬁ§_lookup_tc_íåy
(
	`MaöAddªssOf
(
f‹w¨dedBy
));

662 i‡(
tcLa°H›
 !
NULL
)

664 
tc_edge_íåy
* 
tc_edge
;

666 
tc_edge
 = 
	`ﬁ§_lookup_tc_edge
(
tcLa°H›
, 
	`MaöAddªssOf
(&
wÆkî
->
√ighb‹_iÁ˚_addr
));

669 i‡(
tc_edge
 !
NULL
 && (tc_edge->
Êags
 & 
OLSR_TC_EDGE_DOWN
) == 0)

671 i‡(
¥eviousLökCo°
 + 
wÆkî
->
lök_co°
 > 
tc_edge
->link_cost)

673 #i‚de‡
NODEBUG


674 
ùaddr_°r
 
√ighb‹_iÁ˚_buf
, 
f‹w_buf
;

675 
	`ﬁ§_ù_to_°rög
(&
√ighb‹_iÁ˚_buf
, &
wÆkî
->
√ighb‹_iÁ˚_addr
);

677 
	`OLSR_PRINTF
(

680 
PLUGIN_NAME_SHORT
,

681 
√ighb‹_iÁ˚_buf
.
buf
,

682 
	`ﬁ§_ù_to_°rög
(&
f‹w_buf
, 
f‹w¨dedBy
),

683 
√ighb‹_iÁ˚_buf
.
buf
,

684 
tc_edge
->
lök_co°
);

693 i‡(
wÆkî
->
lök_co°
 < 
be°LökCo°
)

695 *
be°Neighb‹
 = 
wÆkî
;

696 
be°LökCo°
 = 
wÆkî
->
lök_co°
;

702 i‡(*
nPossibÀNeighb‹s
 < 
F™OutLimô
)

704 
√ighb‹s
->
löks
[*
nPossibÀNeighb‹s
] = 
wÆkî
;

707 *
nPossibÀNeighb‹s
 += 1;

713 
lök_íåy
* 
wÆkî
;

714 
ﬁ§_lökco°
 
¥eviousLökEtx
 = 
LINK_COST_BROKEN
;

715 
ﬁ§_lökco°
 
be°Etx
 = 
LINK_COST_BROKEN
;

717 i‡(
f‹w¨dedBy
 !
NULL
)

720 
lök_íåy
* 
be°LökFromF‹w¨dî
 = 
	`gë_be°_lök_to_√ighb‹
(
f‹w¨dedBy
);

721 i‡(
be°LökFromF‹w¨dî
 !
NULL
)

723 
¥eviousLökEtx
 = 
be°LökFromF‹w¨dî
->
lökco°
;

727 
	`OLSR_FOR_ALL_LINK_ENTRIES
(
wÆkî
) {

728 
ﬁ§_ù_addr
* 
√ighb‹MaöIp
;

729 
lök_íåy
* 
be°LökToNeighb‹
;

730 
tc_íåy
* 
tcLa°H›
;

731 
cuºEtx
;

734 i‡(! 
	`ùequÆ
(&
ötf
->
ötAddr
, &
wÆkî
->
loˇl_iÁ˚_addr
))

739 
	`OLSR_PRINTF
(

742 
PLUGIN_NAME_SHORT
,

743 
ötf
->
ifName
,

744 
	`ﬁ§_ù_to_°rög
(&
buf
, &
wÆkî
->
√ighb‹_iÁ˚_addr
));

746 
√ighb‹MaöIp
 = 
	`MaöAddªssOf
(&
wÆkî
->
√ighb‹_iÁ˚_addr
);

750 i‡(
sour˚
 !
NULL
 && 
	`ùequÆ
(
√ighb‹MaöIp
, 
	`MaöAddªssOf
(source)))

752 
	`OLSR_PRINTF
(

755 
PLUGIN_NAME_SHORT
,

756 
	`ﬁ§_ù_to_°rög
(&
buf
, &
wÆkî
->
√ighb‹_iÁ˚_addr
));

762 i‡(
f‹w¨dedBy
 !
NULL
 && 
	`ùequÆ
(
√ighb‹MaöIp
, 
	`MaöAddªssOf
(forwardedBy)))

764 
	`OLSR_PRINTF
(

767 
PLUGIN_NAME_SHORT
,

768 
	`ﬁ§_ù_to_°rög
(&
buf
, &
wÆkî
->
√ighb‹_iÁ˚_addr
));

774 i‡(
f‹w¨dedTo
 !
NULL
 && 
	`ùequÆ
(
√ighb‹MaöIp
, 
	`MaöAddªssOf
(forwardedTo)))

776 
	`OLSR_PRINTF
(

779 
PLUGIN_NAME_SHORT
,

780 
	`ﬁ§_ù_to_°rög
(&
buf
, &
wÆkî
->
√ighb‹_iÁ˚_addr
));

788 
cuºEtx
 = 
wÆkî
->
lökco°
;

790 i‡(
cuºEtx
 >
LINK_COST_BROKEN
)

792 
	`OLSR_PRINTF
(

795 
PLUGIN_NAME_SHORT
,

796 
	`ﬁ§_ù_to_°rög
(&
buf
, &
wÆkî
->
√ighb‹_iÁ˚_addr
));

802 
	`OLSR_PRINTF
(

805 
PLUGIN_NAME_SHORT
,

806 
	`ﬁ§_ù_to_°rög
(&
buf
, &
wÆkî
->
√ighb‹_iÁ˚_addr
),

807 
cuºEtx
);

812 
be°LökToNeighb‹
 = 
	`gë_be°_lök_to_√ighb‹
(&
wÆkî
->
√ighb‹_iÁ˚_addr
);

814 i‡(
wÆkî
 !
be°LökToNeighb‹
)

816 i‡(
be°LökToNeighb‹
 =
NULL
)

818 
	`OLSR_PRINTF
(

821 
PLUGIN_NAME_SHORT
,

822 
	`ﬁ§_ù_to_°rög
(&
buf
, &
wÆkî
->
√ighb‹_iÁ˚_addr
));

826 #i‚de‡
NODEBUG


827 
öãrÁ˚
* 
be°I¡f
 = 
	`if_ifwôhaddr
(&
be°LökToNeighb‹
->
loˇl_iÁ˚_addr
);

828 
lqãxtbuf„r
 
lqbuf„r
;

830 
	`OLSR_PRINTF
(

833 
PLUGIN_NAME_SHORT
,

834 
	`ﬁ§_ù_to_°rög
(&
buf
, &
wÆkî
->
√ighb‹_iÁ˚_addr
),

835 
be°I¡f
->
öt_«me
,

836 
	`gë_lökco°_ãxt
(
be°LökToNeighb‹
->
lökco°
, 
Ál£
, &
lqbuf„r
));

842 i‡(
f‹w¨dedBy
 !
NULL
)

844 #i‚de‡
NODEBUG


845 
ùaddr_°r
 
f‹w¨dedByBuf
, 
nüBuf
;

846 
lqãxtbuf„r
 
lqbuf„r
;

848 
	`OLSR_PRINTF
(

851 
PLUGIN_NAME_SHORT
,

852 
	`ﬁ§_ù_to_°rög
(&
f‹w¨dedByBuf
, 
f‹w¨dedBy
),

853 
	`ﬁ§_ù_to_°rög
(&
nüBuf
, &
wÆkî
->
√ighb‹_iÁ˚_addr
),

854 
	`gë_lökco°_ãxt
(
¥eviousLökEtx
 + 
cuºEtx
, 
åue
, &
lqbuf„r
));

861 i‡(
f‹w¨dedBy
 !
NULL
)

863 
tcLa°H›
 = 
	`ﬁ§_lookup_tc_íåy
(
	`MaöAddªssOf
(
f‹w¨dedBy
));

864 i‡(
tcLa°H›
 !
NULL
)

866 
tc_edge_íåy
* 
tc_edge
;

868 
tc_edge
 = 
	`ﬁ§_lookup_tc_edge
(
tcLa°H›
, 
	`MaöAddªssOf
(&
wÆkî
->
√ighb‹_iÁ˚_addr
));

871 i‡(
tc_edge
) {

872 
ﬁ§_lökco°
 
tcEtx
 = 
tc_edge
->
co°
;

874 i‡(
¥eviousLökEtx
 + 
cuºEtx
 > 
tcEtx
)

876 #i‚de‡
NODEBUG


877 
ùaddr_°r
 
√ighb‹_iÁ˚_buf
, 
f‹w_buf
;

878 
lqãxtbuf„r
 
lqbuf„r
;

879 
	`ﬁ§_ù_to_°rög
(&
√ighb‹_iÁ˚_buf
, &
wÆkî
->
√ighb‹_iÁ˚_addr
);

881 
	`OLSR_PRINTF
(

884 
PLUGIN_NAME_SHORT
,

885 
√ighb‹_iÁ˚_buf
.
buf
,

886 
	`ﬁ§_ù_to_°rög
(&
f‹w_buf
, 
f‹w¨dedBy
),

887 
√ighb‹_iÁ˚_buf
.
buf
,

888 
	`gë_lökco°_ãxt
(
tcEtx
, 
Ál£
, &
lqbuf„r
));

897 i‡(
cuºEtx
 < 
be°Etx
)

899 *
be°Neighb‹
 = 
wÆkî
;

900 
be°Etx
 = 
cuºEtx
;

906 i‡(*
nPossibÀNeighb‹s
 < 
F™OutLimô
)

908 
√ighb‹s
->
löks
[*
nPossibÀNeighb‹s
] = 
wÆkî
;

911 *
nPossibÀNeighb‹s
 += 1;

912 } 
	`OLSR_FOR_ALL_LINK_ENTRIES_END
(
wÆkî
);

919 i‡(*
nPossibÀNeighb‹s
 == 0)

921 
	`OLSR_PRINTF
(

924 
PLUGIN_NAME_SHORT
,

925 
ötf
->
ifName
);

929 
	`OLSR_PRINTF
(

932 
PLUGIN_NAME_SHORT
,

933 *
nPossibÀNeighb‹s
,

934 
ötf
->
ifName
,

935 
	`ﬁ§_ù_to_°rög
(&
buf
, &(*
be°Neighb‹
)->
√ighb‹_iÁ˚_addr
));

938 
	}
}

950 
	$Cª©eC≠tuªSockë
(c⁄° * 
ifName
)

952 
ifIndex
 = 
	`if_«mëoödex
(
ifName
);

953 
∑ckë_mªq
 
mªq
;

954 
i‰eq
 
ªq
;

955 
sockaddr_Œ
 
bödTo
;

958 
skfd
 = 
	`sockë
(
PF_PACKET
, 
SOCK_DGRAM
, 
	`ht⁄s
(
ETH_P_IP
));

959 i‡(
skfd
 < 0)

961 
	`BmfPEº‹
("socket(PF_PACKET)Érror");

966 
	`mem£t
(&
mªq
, 0, (
∑ckë_mªq
));

967 
mªq
.
mr_ifödex
 = 
ifIndex
;

968 
mªq
.
mr_ty≥
 = 
PACKET_MR_PROMISC
;

969 i‡(
	`£tsock›t
(
skfd
, 
SOL_PACKET
, 
PACKET_ADD_MEMBERSHIP
, &
mªq
, (mreq)) < 0)

971 
	`BmfPEº‹
("setsockopt(PACKET_MR_PROMISC)Érror");

972 
	`˛o£
(
skfd
);

977 
	`mem£t
(&
ªq
, 0, (
i‰eq
));

978 
	`°∫˝y
(
ªq
.
i‰_«me
, 
ifName
, 
IFNAMSIZ
 - 1);

979 
ªq
.
i‰_«me
[
IFNAMSIZ
-1] = '\0';

980 i‡(
	`io˘l
(
skfd
, 
SIOCGIFHWADDR
, &
ªq
) < 0)

982 
	`BmfPEº‹
("errorÑetrieving MACáddress");

983 
	`˛o£
(
skfd
);

988 
	`mem£t
(&
bödTo
, 0, (bindTo));

989 
bödTo
.
¶l_Ámûy
 = 
AF_PACKET
;

990 
bödTo
.
¶l_¥Ÿocﬁ
 = 
	`ht⁄s
(
ETH_P_IP
);

991 
bödTo
.
¶l_ifödex
 = 
ifIndex
;

992 
	`mem˝y
(
bödTo
.
¶l_addr
, 
ªq
.
i‰_hwaddr
.
ß_d©a
, 
IFHWADDRLEN
);

993 
bödTo
.
¶l_hÆí
 = 
IFHWADDRLEN
;

995 i‡(
	`böd
(
skfd
, (
sockaddr
*)&
bödTo
, (bindTo)) < 0)

997 
	`BmfPEº‹
("bind()Érror");

998 
	`˛o£
(
skfd
);

1003 i‡(
	`f˙é
(
skfd
, 
F_SETFL
, f˙é(skfd, 
F_GETFL
, 0Ë& ~
O_NONBLOCK
) < 0)

1005 
	`BmfPEº‹
("fcntl()Érror");

1006 
	`˛o£
(
skfd
);

1010 
	`AddDes¸ùt‹ToI≈utSë
(
skfd
);

1012  
skfd
;

1013 
	}
}

1026 
	$Cª©eLi°íögSockë
(c⁄° * 
ifName
)

1028 
ifIndex
 = 
	`if_«mëoödex
(
ifName
);

1029 
∑ckë_mªq
 
mªq
;

1030 
i‰eq
 
ªq
;

1031 
sockaddr_Œ
 
bödTo
;

1034 
skfd
 = 
	`sockë
(
PF_PACKET
, 
SOCK_DGRAM
, 
	`ht⁄s
(
ETH_P_IP
));

1035 i‡(
skfd
 < 0)

1037 
	`BmfPEº‹
("socket(PF_PACKET)Érror");

1042 
	`mem£t
(&
mªq
, 0, (
∑ckë_mªq
));

1043 
mªq
.
mr_ifödex
 = 
ifIndex
;

1044 
mªq
.
mr_ty≥
 = 
PACKET_MR_PROMISC
;

1045 i‡(
	`£tsock›t
(
skfd
, 
SOL_PACKET
, 
PACKET_ADD_MEMBERSHIP
, &
mªq
, (mreq)) < 0)

1047 
	`BmfPEº‹
("setsockopt(PACKET_MR_PROMISC)Érror");

1048 
	`˛o£
(
skfd
);

1053 
	`mem£t
(&
ªq
, 0, (
i‰eq
));

1054 
	`°∫˝y
(
ªq
.
i‰_«me
, 
ifName
, 
IFNAMSIZ
 - 1);

1055 
ªq
.
i‰_«me
[
IFNAMSIZ
-1] = '\0';

1056 i‡(
	`io˘l
(
skfd
, 
SIOCGIFHWADDR
, &
ªq
) < 0)

1058 
	`BmfPEº‹
("errorÑetrieving MACáddress");

1059 
	`˛o£
(
skfd
);

1064 
	`mem£t
(&
bödTo
, 0, (bindTo));

1065 
bödTo
.
¶l_Ámûy
 = 
AF_PACKET
;

1066 
bödTo
.
¶l_¥Ÿocﬁ
 = 
	`ht⁄s
(
ETH_P_IP
);

1067 
bödTo
.
¶l_ifödex
 = 
ifIndex
;

1068 
	`mem˝y
(
bödTo
.
¶l_addr
, 
ªq
.
i‰_hwaddr
.
ß_d©a
, 
IFHWADDRLEN
);

1069 
bödTo
.
¶l_hÆí
 = 
IFHWADDRLEN
;

1071 i‡(
	`böd
(
skfd
, (
sockaddr
*)&
bödTo
, (bindTo)) < 0)

1073 
	`BmfPEº‹
("bind()Érror");

1074 
	`˛o£
(
skfd
);

1079 i‡(
	`f˙é
(
skfd
, 
F_SETFL
, f˙é(skfd, 
F_GETFL
, 0Ë& ~
O_NONBLOCK
) < 0)

1081 
	`BmfPEº‹
("fcntl()Érror");

1082 
	`˛o£
(
skfd
);

1086 
	`AddDes¸ùt‹ToI≈utSë
(
skfd
);

1088  
skfd
;

1089 
	}
}

1102 
	$Cª©eEnˇpsuœãSockë
(c⁄° * 
ifName
)

1104 
⁄
 = 1;

1105 
sockaddr_ö
 
bödTo
;

1108 
skfd
 = 
	`sockë
(
PF_INET
, 
SOCK_DGRAM
, 0);

1109 i‡(
skfd
 < 0)

1111 
	`BmfPEº‹
("socket(PF_INET)Érror");

1116 i‡(
	`£tsock›t
(
skfd
, 
SOL_SOCKET
, 
SO_BROADCAST
, &
⁄
, (on)) < 0)

1118 
	`BmfPEº‹
("setsockopt(SO_BROADCAST)Érror");

1119 
	`˛o£
(
skfd
);

1125 i‡(
	`£tsock›t
(
skfd
, 
SOL_SOCKET
, 
SO_BINDTODEVICE
, 
ifName
, 
	`°æí
(ifName) + 1) < 0)

1127 
	`BmfPEº‹
("setsockopt(SO_BINDTODEVICE)Érror");

1128 
	`˛o£
(
skfd
);

1133 
	`mem£t
(&
bödTo
, 0, (bindTo));

1134 
bödTo
.
sö_Ámûy
 = 
AF_INET
;

1135 
bödTo
.
sö_p‹t
 = 
	`ht⁄s
(
BMF_ENCAP_PORT
);

1136 
bödTo
.
sö_addr
.
s_addr
 = 
	`ht⁄l
(
INADDR_ANY
);

1138 i‡(
	`böd
(
skfd
, (
sockaddr
*)&
bödTo
, (bindTo)) < 0)

1140 
	`BmfPEº‹
("bind()Érror");

1141 
	`˛o£
(
skfd
);

1146 i‡(
	`f˙é
(
skfd
, 
F_SETFL
, f˙é(skfd, 
F_GETFL
, 0Ë& ~
O_NONBLOCK
) < 0)

1148 
	`BmfPEº‹
("fcntl()Érror");

1149 
	`˛o£
(
skfd
);

1153 
	`AddDes¸ùt‹ToI≈utSë
(
skfd
);

1155  
skfd
;

1156 
	}
}

1173 
	$Cª©eLoˇlEthîTunT≠
()

1175 c⁄° 
devi˚Name
[] = "/dev/net/tun";

1176 
i‰eq
 ifreq;

1177 
ëfd
;

1178 
io˘lSkfd
;

1179 
io˘Ães
;

1181 
ëfd
 = 
	`›í
(
devi˚Name
, 
O_RDWR
 | 
O_NONBLOCK
);

1182 i‡(
ëfd
 < 0)

1184 
	`BmfPEº‹
("îr‹ o≥nög %s", 
devi˚Name
);

1188 
	`mem£t
(&
i‰eq
, 0, (ifreq));

1189 
	`°∫˝y
(
i‰eq
.
i‰_«me
, 
EthîTunT≠IfName
, 
IFNAMSIZ
 - 1);

1190 
i‰eq
.
i‰_«me
[
IFNAMSIZ
 - 1] = '\0';

1194 
i‰eq
.
i‰_Êags
 = 
IFF_TUN
;

1195 
i‰eq
.
i‰_Êags
 |
IFF_NO_PI
;

1197 i‡(
	`io˘l
(
ëfd
, 
TUNSETIFF
, (*)&
i‰eq
) < 0)

1199 
	`BmfPEº‹
("io˘l(TUNSETIFFËîr‹ o¿%s", 
devi˚Name
);

1200 
	`˛o£
(
ëfd
);

1204 
	`mem£t
(&
i‰eq
, 0, (ifreq));

1205 
	`°∫˝y
(
i‰eq
.
i‰_«me
, 
EthîTunT≠IfName
, 
IFNAMSIZ
 - 1);

1206 
i‰eq
.
i‰_«me
[
IFNAMSIZ
 - 1] = '\0';

1207 
i‰eq
.
i‰_addr
.
ß_Ámûy
 = 
AF_INET
;

1209 
io˘lSkfd
 = 
	`sockë
(
PF_INET
, 
SOCK_DGRAM
, 0);

1210 i‡(
io˘lSkfd
 < 0)

1212 
	`BmfPEº‹
("sockë(PF_INETËîr‹ o¿%s", 
devi˚Name
);

1213 
	`˛o£
(
ëfd
);

1221 i‡(
EthîTunT≠Ip
 =
ETHERTUNTAPIPNOTSET
)

1223 
TBmfI¡îÁ˚
* 
√xtBmfIf
 = 
BmfI¡îÁ˚s
;

1224 
√xtBmfIf
 !
NULL
)

1226 
TBmfI¡îÁ˚
* 
bmfIf
 = 
√xtBmfIf
;

1227 
√xtBmfIf
 = 
bmfIf
->
√xt
;

1229 i‡(
bmfIf
->
ﬁ§I¡f
 !
NULL
)

1231 
EthîTunT≠Ip
 = 
	`¡ohl
(
bmfIf
->
ötAddr
.
v4
.
s_addr
);

1232 
EthîTunT≠IpBrﬂdˇ°
 = 
EthîTunT≠Ip
;

1237 i‡(
EthîTunT≠Ip
 =
ETHERTUNTAPIPNOTSET
)

1241 
EthîTunT≠Ip
 = 
ETHERTUNTAPDEFAULTIP
;

1244 ((
sockaddr_ö
*Ë
	`ARM_NOWARN_ALIGN
(&
i‰eq
.
i‰_addr
))->
sö_addr
.
s_addr
 = 
	`ht⁄l
(
EthîTunT≠Ip
);

1245 
io˘Ães
 = 
	`io˘l
(
io˘lSkfd
, 
SIOCSIFADDR
, &
i‰eq
);

1246 i‡(
io˘Ães
 >= 0)

1249 ((
sockaddr_ö
*Ë
	`ARM_NOWARN_ALIGN
(&
i‰eq
.
i‰_√tmask
))->
sö_addr
.
s_addr
 = 
	`ht⁄l
(
EthîTunT≠IpMask
);

1250 
io˘Ães
 = 
	`io˘l
(
io˘lSkfd
, 
SIOCSIFNETMASK
, &
i‰eq
);

1251 i‡(
io˘Ães
 >= 0)

1254 ((
sockaddr_ö
*Ë
	`ARM_NOWARN_ALIGN
(&
i‰eq
.
i‰_brﬂdaddr
))->
sö_addr
.
s_addr
 = 
	`ht⁄l
(
EthîTunT≠IpBrﬂdˇ°
);

1255 
io˘Ães
 = 
	`io˘l
(
io˘lSkfd
, 
SIOCSIFBRDADDR
, &
i‰eq
);

1256 i‡(
io˘Ães
 >= 0)

1259 
io˘Ães
 = 
	`io˘l
(
io˘lSkfd
, 
SIOCGIFFLAGS
, &
i‰eq
);

1260 i‡(
io˘Ães
 >= 0)

1262 
i‰eq
.
i‰_Êags
 |(
IFF_UP
 | 
IFF_RUNNING
 | 
IFF_BROADCAST
);

1263 
io˘Ães
 = 
	`io˘l
(
io˘lSkfd
, 
SIOCSIFFLAGS
, &
i‰eq
);

1269 i‡(
io˘Ães
 < 0)

1272 
	`BmfPEº‹
("îr‹ brögög u∞EthîTunT≠ i¡îÁ˚ \"%s\"", 
EthîTunT≠IfName
);

1274 
	`˛o£
(
ëfd
);

1275 
	`˛o£
(
io˘lSkfd
);

1280 
	`mem£t
(&
i‰eq
, 0, (ifreq));

1281 
	`°∫˝y
(
i‰eq
.
i‰_«me
, 
EthîTunT≠IfName
, 
IFNAMSIZ
 - 1);

1282 
i‰eq
.
i‰_«me
[
IFNAMSIZ
 - 1] = '\0';

1284 
io˘Ães
 = 
	`io˘l
(
io˘lSkfd
, 
SIOCGIFFLAGS
, &
i‰eq
);

1285 i‡(
io˘Ães
 >= 0)

1287 
i‰eq
.
i‰_Êags
 |
IFF_MULTICAST
;

1288 
io˘Ães
 = 
	`io˘l
(
io˘lSkfd
, 
SIOCSIFFLAGS
, &
i‰eq
);

1290 i‡(
io˘Ães
 < 0)

1293 
	`BmfPEº‹
("îr‹ sëtög mu…iˇ° fœg o¿EthîTunT≠ i¡îÁ˚ \"%s\"", 
EthîTunT≠IfName
);

1301 i‡(
	`io˘l
(
ëfd
, 
TUNSETPERSIST
, (*)&
i‰eq
) < 0)

1303 
	`BmfPEº‹
("îr‹ makög EthîTunT≠ i¡îÁ˚ \"%s\"Öîsi°ít", 
EthîTunT≠IfName
);

1308 
	`OLSR_PRINTF
(8, "%s: o≥√d 1 sockë o¿\"%s\"\n", 
PLUGIN_NAME_SHORT
, 
EthîTunT≠IfName
);

1310 
	`AddDes¸ùt‹ToI≈utSë
(
ëfd
);

1315 i‡(
TunT≠IpOvîruÀd
 != 0)

1317 
ﬁ§_ù_addr
 
ãmp_√t
;

1319 
ãmp_√t
.
v4
.
s_addr
 = 
	`ht⁄l
(
EthîTunT≠Ip
);

1320 
	`ù_¥efix_li°_add
(&
ﬁ§_˙f
->
h«_íåõs
, &
ãmp_√t
, 32);

1323 
	`˛o£
(
io˘lSkfd
);

1325  
ëfd
;

1326 
	}
}

1339 
	$Cª©eI¡îÁ˚
(

1340 c⁄° * 
ifName
,

1341 
öãrÁ˚
* 
ﬁ§I¡f
)

1343 
ˇ±urögSkfd
 = -1;

1344 
íˇpsuœtögSkfd
 = -1;

1345 
li°íögSkfd
 = -1;

1346 
io˘lSkfd
;

1347 
i‰eq
 
i‰
;

1348 
nO≥√d
 = 0;

1349 
TBmfI¡îÁ˚
* 
√wIf
 = 
	`mÆloc
((TBmfInterface));

1351 
	`as£π
(
ifName
 !
NULL
);

1353 i‡(
√wIf
 =
NULL
)

1358 i‡(
ﬁ§I¡f
 !
NULL
)

1362 
íˇpsuœtögSkfd
 = 
	`Cª©eEnˇpsuœãSockë
(
ifName
);

1363 i‡(
íˇpsuœtögSkfd
 < 0)

1365 
	`‰ì
(
√wIf
);

1368 
nO≥√d
++;

1373 i‡((
ﬁ§I¡f
 =
NULL
Ë|| (
C≠tuªPackësOnOl§I¡îÁ˚s
 != 0))

1375 
ˇ±urögSkfd
 = 
	`Cª©eC≠tuªSockë
(
ifName
);

1376 i‡(
ˇ±urögSkfd
 < 0)

1378 
	`˛o£
(
íˇpsuœtögSkfd
);

1379 
	`‰ì
(
√wIf
);

1383 
nO≥√d
++;

1388 i‡(
BmfMech™ism
 =
BM_UNICAST_PROMISCUOUS
)

1390 
li°íögSkfd
 = 
	`Cª©eLi°íögSockë
(
ifName
);

1391 i‡(
li°íögSkfd
 < 0)

1393 
	`˛o£
(
li°íögSkfd
);

1394 
	`˛o£
(
íˇpsuœtögSkfd
);

1395 
	`‰ì
(
√wIf
);

1399 
nO≥√d
++;

1404 
io˘lSkfd
 = (
ˇ±urögSkfd
 >0Ë? c≠turögSkfd : 
íˇpsuœtögSkfd
;

1407 
	`mem£t
(&
i‰
, 0, (
i‰eq
));

1408 
	`°∫˝y
(
i‰
.
i‰_«me
, 
ifName
, 
IFNAMSIZ
 - 1);

1409 
i‰
.
i‰_«me
[
IFNAMSIZ
 - 1] = '\0';

1410 i‡(
	`io˘l
(
io˘lSkfd
, 
SIOCGIFHWADDR
, &
i‰
) < 0)

1412 
	`BmfPEº‹
("io˘l(SIOCGIFHWADDRËîr‹ f‹ i¡îÁ˚ \"%s\"", 
ifName
);

1413 
	`˛o£
(
ˇ±urögSkfd
);

1414 
	`˛o£
(
íˇpsuœtögSkfd
);

1415 
	`‰ì
(
√wIf
);

1420 i‡(
ˇ±urögSkfd
 != -1) {

1421 
	`add_ﬁ§_sockë
(
ˇ±urögSkfd
, 
NULL
, 
BMF_h™dÀ_ˇ±uªFd
, 
√wIf
, 
SP_IMM_READ
);

1423 i‡(
íˇpsuœtögSkfd
 != -1) {

1424 
	`add_ﬁ§_sockë
(
íˇpsuœtögSkfd
, 
NULL
, 
BMF_h™dÀ_íˇpsuœtögFd
, 
√wIf
, 
SP_IMM_READ
);

1426 i‡(
li°íögSkfd
 != -1) {

1427 
	`add_ﬁ§_sockë
(
li°íögSkfd
, 
NULL
, 
BMF_h™dÀ_li°íögFd
, 
√wIf
, 
SP_IMM_READ
);

1430 
√wIf
->
ˇ±urögSkfd
 = capturingSkfd;

1431 
√wIf
->
íˇpsuœtögSkfd
 =ÉncapsulatingSkfd;

1432 
√wIf
->
li°íögSkfd
 =ÜisteningSkfd;

1433 
	`mem˝y
(
√wIf
->
macAddr
, 
i‰
.
i‰_hwaddr
.
ß_d©a
, 
IFHWADDRLEN
);

1434 
	`mem˝y
(
√wIf
->
ifName
, ifName, 
IFNAMSIZ
);

1435 
√wIf
->
ﬁ§I¡f
 = olsrIntf;

1436 i‡(
ﬁ§I¡f
 !
NULL
)

1441 
√wIf
->
ötAddr
.
v4
 = ((
sockaddr_ö
 *)&
ﬁ§I¡f
->
öt_addr
)->
sö_addr
;

1442 
√wIf
->
brﬂdAddr
.
v4
 = ((
sockaddr_ö
 *)&
ﬁ§I¡f
->
öt_brﬂdaddr
)->
sö_addr
;

1447 
	`mem£t
(&
i‰
, 0, (
i‰eq
));

1448 
	`°∫˝y
(
i‰
.
i‰_«me
, 
ifName
, 
IFNAMSIZ
 - 1);

1449 
i‰
.
i‰_«me
[
IFNAMSIZ
 - 1] = '\0';

1450 i‡(
	`io˘l
(
io˘lSkfd
, 
SIOCGIFADDR
, &
i‰
) < 0)

1452 
	`BmfPEº‹
("io˘l(SIOCGIFADDRËîr‹ f‹ i¡îÁ˚ \"%s\"", 
ifName
);

1454 
√wIf
->
ötAddr
.
v4
.
s_addr
 = 
	`öë_addr
("0.0.0.0");

1459 
√wIf
->
ötAddr
.
v4
 = ((
sockaddr_ö
 *Ë
	`ARM_NOWARN_ALIGN
(&
i‰
.
i‰_addr
))->
sö_addr
;

1463 
	`mem£t
(&
i‰
, 0, (
i‰eq
));

1464 
	`°∫˝y
(
i‰
.
i‰_«me
, 
ifName
, 
IFNAMSIZ
 - 1);

1465 
i‰
.
i‰_«me
[
IFNAMSIZ
 - 1] = '\0';

1466 i‡(
	`io˘l
(
io˘lSkfd
, 
SIOCGIFBRDADDR
, &
i‰
) < 0)

1468 
	`BmfPEº‹
("io˘l(SIOCGIFBRDADDRËîr‹ f‹ i¡îÁ˚ \"%s\"", 
ifName
);

1470 
√wIf
->
brﬂdAddr
.
v4
.
s_addr
 = 
	`öë_addr
("0.0.0.0");

1475 
√wIf
->
brﬂdAddr
.
v4
 = ((
sockaddr_ö
 *Ë
	`ARM_NOWARN_ALIGN
(&
i‰
.
i‰_brﬂdaddr
))->
sö_addr
;

1480 
√wIf
->
nBmfPackësRx
 = 0;

1481 
√wIf
->
nBmfPackësRxDup
 = 0;

1482 
√wIf
->
nBmfPackësTx
 = 0;

1486 i‡(
BmfI¡îÁ˚s
 =
NULL
)

1489 
√wIf
->
√xt
 = 
NULL
;

1490 
BmfI¡îÁ˚s
 = 
√wIf
;

1491 
La°BmfI¡îÁ˚
 = 
√wIf
;

1493 i‡(
ﬁ§I¡f
 !
NULL
)

1496 
√wIf
->
√xt
 = 
BmfI¡îÁ˚s
;

1497 
BmfI¡îÁ˚s
 = 
√wIf
;

1502 
√wIf
->
√xt
 = 
NULL
;

1503 
La°BmfI¡îÁ˚
->
√xt

√wIf
;

1504 
La°BmfI¡îÁ˚
 = 
√wIf
;

1507 
	`OLSR_PRINTF
(

1510 
PLUGIN_NAME_SHORT
,

1511 
nO≥√d
,

1512 
nO≥√d
 == 1 ? "" : "s",

1513 
ﬁ§I¡f
 !
NULL
 ? "OLSR" : "non-OLSR",

1514 
ifName
);

1516  
nO≥√d
;

1517 
	}
}

1528 
	$Cª©eBmfNëw‹kI¡îÁ˚s
(
öãrÁ˚
* 
skùThisI¡f
)

1530 
skfd
;

1531 
ifc⁄f
 
ifc
;

1532 
numªqs
 = 30;

1533 
i‰eq
* 
i‰
;

1534 
n
;

1535 
nO≥√dSockës
 = 0;

1538 
	`FD_ZERO
(&
I≈utSë
);

1540 
skfd
 = 
	`sockë
(
PF_INET
, 
SOCK_DGRAM
, 0);

1541 i‡(
skfd
 < 0)

1543 
	`BmfPEº‹
("no inet socketávailableÅoÑetrieve interfaceÜist");

1548 
ifc
.
ifc_buf
 = 
NULL
;

1551 
ifc
.
ifc_Àn
 = (
i‰eq
Ë* 
numªqs
;

1552 
ifc
.
ifc_buf
 = 
	`ªÆloc
(ifc.ifc_buf, ifc.
ifc_Àn
);

1554 i‡(
	`io˘l
(
skfd
, 
SIOCGIFCONF
, &
ifc
) < 0)

1556 
	`BmfPEº‹
("ioctl(SIOCGIFCONF)Érror");

1558 
	`˛o£
(
skfd
);

1559 
	`‰ì
(
ifc
.
ifc_buf
);

1562 i‡(()
ifc
.
ifc_Àn
 =(
i‰eq
Ë* 
numªqs
)

1565 
numªqs
 *= 2;

1566 
	`as£π
(
numªqs
 < 1024);

1572 
	`˛o£
(
skfd
);

1575 
i‰
 = 
ifc
.
ifc_ªq
;

1576 
n
 = 
ifc
.
ifc_Àn
 / (
i‰eq
); --¿>0; 
i‰
++)

1578 
öãrÁ˚
* 
ﬁ§I¡f
;

1579 
ﬁ§_ù_addr
 
ùAddr
;

1582 i‡(
	`°∫cmp
(
i‰
->
i‰_«me
, 
EthîTunT≠IfName
, 
IFNAMSIZ
) == 0)

1588 
ùAddr
.
v4
 = ((
sockaddr_ö
*Ë
	`ARM_NOWARN_ALIGN
(&
i‰
->
i‰_addr
))->
sö_addr
;

1589 
ﬁ§I¡f
 = 
	`if_ifwôhaddr
(&
ùAddr
);

1591 i‡(
skùThisI¡f
 !
NULL
 && 
ﬁ§I¡f
 == skipThisIntf)

1596 i‡(
ﬁ§I¡f
 =
NULL
 && ! 
	`IsN⁄Ol§BmfIf
(
i‰
->
i‰_«me
))

1603 
nO≥√dSockës
 +
	`Cª©eI¡îÁ˚
(
i‰
->
i‰_«me
, 
ﬁ§I¡f
);

1607 
	`‰ì
(
ifc
.
ifc_buf
);

1610 
EthîTunT≠Fd
 = 
	`Cª©eLoˇlEthîTunT≠
();

1611 i‡(
EthîTunT≠Fd
 >= 0)

1613 
	`add_ﬁ§_sockë
(
EthîTunT≠Fd
, 
NULL
, 
BMF_h™dÀ_tu¡≠Fd
, NULL, 
SP_IMM_READ
);

1614 
nO≥√dSockës
++;

1617 i‡(
BmfI¡îÁ˚s
 =
NULL
)

1619 
	`ﬁ§_¥ötf
(1, "%s: couldÇŸ inôülizê™yÇëw‹k i¡îÁ˚\n", 
PLUGIN_NAME
);

1623 
	`ﬁ§_¥ötf
(1, "%s: o≥√d %d sockës\n", 
PLUGIN_NAME
, 
nO≥√dSockës
);

1626 
	}
}

1644 
	$Clo£BmfNëw‹kI¡îÁ˚s
()

1646 
nClo£d
 = 0;

1647 
u_öt32_t
 
tŸÆOl§BmfPackësRx
 = 0;

1648 
u_öt32_t
 
tŸÆOl§BmfPackësRxDup
 = 0;

1649 
u_öt32_t
 
tŸÆOl§BmfPackësTx
 = 0;

1650 
u_öt32_t
 
tŸÆN⁄Ol§BmfPackësRx
 = 0;

1651 
u_öt32_t
 
tŸÆN⁄Ol§BmfPackësRxDup
 = 0;

1652 
u_öt32_t
 
tŸÆN⁄Ol§BmfPackësTx
 = 0;

1655 
TBmfI¡îÁ˚
* 
√xtBmfIf
 = 
BmfI¡îÁ˚s
;

1656 
√xtBmfIf
 !
NULL
)

1658 
TBmfI¡îÁ˚
* 
bmfIf
 = 
√xtBmfIf
;

1659 
√xtBmfIf
 = 
bmfIf
->
√xt
;

1661 i‡(
bmfIf
->
ˇ±urögSkfd
 >= 0)

1663 
	`˛o£
(
bmfIf
->
ˇ±urögSkfd
);

1664 
	`ªmove_ﬁ§_sockë
(
bmfIf
->
ˇ±urögSkfd
, 
NULL
, 
BMF_h™dÀ_ˇ±uªFd
);

1665 
nClo£d
++;

1667 i‡(
bmfIf
->
íˇpsuœtögSkfd
 >= 0)

1669 
	`˛o£
(
bmfIf
->
íˇpsuœtögSkfd
);

1670 
	`ªmove_ﬁ§_sockë
(
bmfIf
->
íˇpsuœtögSkfd
, 
NULL
, 
BMF_h™dÀ_íˇpsuœtögFd
);

1671 
nClo£d
++;

1673 i‡(
bmfIf
->
li°íögSkfd
 >= 0)

1675 
	`˛o£
(
bmfIf
->
li°íögSkfd
);

1676 
	`ªmove_ﬁ§_sockë
(
bmfIf
->
li°íögSkfd
, 
NULL
, 
BMF_h™dÀ_li°íögFd
);

1677 
nClo£d
++;

1680 
	`OLSR_PRINTF
(

1683 
PLUGIN_NAME_SHORT
,

1684 
bmfIf
->
ﬁ§I¡f
 !
NULL
 ? "OLSR" : "non-OLSR",

1685 
bmfIf
->
ifName
,

1686 
bmfIf
->
nBmfPackësRx
,

1687 
bmfIf
->
nBmfPackësRxDup
,

1688 
bmfIf
->
nBmfPackësTx
);

1690 
	`ﬁ§_¥ötf
(

1693 
PLUGIN_NAME_SHORT
,

1694 
bmfIf
->
ﬁ§I¡f
 !
NULL
 ? "OLSR" : "non-OLSR",

1695 
bmfIf
->
ifName
);

1698 i‡(
bmfIf
->
ﬁ§I¡f
 !
NULL
)

1700 
tŸÆOl§BmfPackësRx
 +
bmfIf
->
nBmfPackësRx
;

1701 
tŸÆOl§BmfPackësRxDup
 +
bmfIf
->
nBmfPackësRxDup
;

1702 
tŸÆOl§BmfPackësTx
 +
bmfIf
->
nBmfPackësTx
;

1706 
tŸÆN⁄Ol§BmfPackësRx
 +
bmfIf
->
nBmfPackësRx
;

1707 
tŸÆN⁄Ol§BmfPackësRxDup
 +
bmfIf
->
nBmfPackësRxDup
;

1708 
tŸÆN⁄Ol§BmfPackësTx
 +
bmfIf
->
nBmfPackësTx
;

1711 
	`‰ì
(
bmfIf
);

1714 i‡(
EthîTunT≠Fd
 >= 0)

1716 
	`˛o£
(
EthîTunT≠Fd
);

1717 
	`ªmove_ﬁ§_sockë
(
EthîTunT≠Fd
, 
NULL
, 
BMF_h™dÀ_tu¡≠Fd
);

1718 
nClo£d
++;

1720 
	`OLSR_PRINTF
(7, "%s: clo£d \"%s\"\n", 
PLUGIN_NAME_SHORT
, 
EthîTunT≠IfName
);

1723 
BmfI¡îÁ˚s
 = 
NULL
;

1724 
La°BmfI¡îÁ˚
 = 
NULL
;

1728 
EthîTunT≠Ip
 = 
ETHERTUNTAPIPNOTSET
;

1730 
	`ﬁ§_¥ötf
(1, "%s: clo£d %d sockës\n", 
PLUGIN_NAME_SHORT
, 
nClo£d
);

1732 
	`OLSR_PRINTF
(

1735 
PLUGIN_NAME_SHORT
,

1736 
tŸÆOl§BmfPackësRx
,

1737 
tŸÆOl§BmfPackësRxDup
,

1738 
tŸÆOl§BmfPackësTx
);

1739 
	`OLSR_PRINTF
(

1742 
PLUGIN_NAME_SHORT
,

1743 
tŸÆN⁄Ol§BmfPackësRx
,

1744 
tŸÆN⁄Ol§BmfPackësRxDup
,

1745 
tŸÆN⁄Ol§BmfPackësTx
);

1746 
	}
}

1748 
	#MAX_NON_OLSR_IFS
 32

	)

1749 
	gN⁄Ol§IfNames
[
MAX_NON_OLSR_IFS
][
IFNAMSIZ
];

1750 
	gnN⁄Ol§Ifs
 = 0;

1763 
AddN⁄Ol§BmfIf
(

1764 c⁄° * 
ifName
,

1765 * 
d©a
 
__©åibuã__
((
unu£d
)),

1766 
£t_∂ugö_∑ømëî_add⁄
 
add⁄
 
__©åibuã__
((
unu£d
)))

1768 
as£π
(
ifName
 !
NULL
);

1770 i‡(
	gnN⁄Ol§Ifs
 >
MAX_NON_OLSR_IFS
)

1772 
ﬁ§_¥ötf
(

1775 
PLUGIN_NAME
,

1776 
MAX_NON_OLSR_IFS
);

1780 
°∫˝y
(
N⁄Ol§IfNames
[
nN⁄Ol§Ifs
], 
ifName
, 
IFNAMSIZ
 - 1);

1781 
	gN⁄Ol§IfNames
[
nN⁄Ol§Ifs
][
IFNAMSIZ
 - 1] = '\0';

1782 
	gnN⁄Ol§Ifs
++;

1794 
	$IsN⁄Ol§BmfIf
(c⁄° * 
ifName
)

1796 
i
;

1798 
	`as£π
(
ifName
 !
NULL
);

1800 
i
 = 0; i < 
nN⁄Ol§Ifs
; i++)

1802 i‡(
	`°∫cmp
(
N⁄Ol§IfNames
[
i
], 
ifName
, 
IFNAMSIZ
) == 0)  1;

1805 
	}
}

1820 
	$CheckAndUpd©eLoˇlBrﬂdˇ°
(* 
ùPackë
, 
ﬁ§_ù_addr
* 
brﬂdAddr
)

1822 
ùhdr
* 
ùh
;

1823 
ﬁ§_ù_addr
 
de°Ip
;

1825 
	`as£π
(
ùPackë
 !
NULL
 && 
brﬂdAddr
 != NULL);

1827 
ùh
 = (
ùhdr
*Ë
	`ARM_NOWARN_ALIGN
(
ùPackë
);

1828 
de°Ip
.
v4
.
s_addr
 = 
ùh
->
daddr
;

1829 i‡(! 
	`IsMu…iˇ°
(&
de°Ip
))

1831 
u_öt32_t
 
‹igDaddr
, 
√wDaddr
;

1832 
u_öt32_t
 
check
;

1834 
‹igDaddr
 = 
	`¡ohl
(
ùh
->
daddr
);

1836 
ùh
->
daddr
 = 
brﬂdAddr
->
v4
.
s_addr
;

1837 
√wDaddr
 = 
	`¡ohl
(
ùh
->
daddr
);

1840 
check
 = 
	`¡ohs
(
ùh
->check);

1842 
check
 = ~ (~ check - ((
‹igDaddr
 >> 16Ë& 0xFFFFË+ ((
√wDaddr
 >> 16) & 0xFFFF));

1843 
check
 = ~ (~ check - (
‹igDaddr
 & 0xFFFFË+ (
√wDaddr
 & 0xFFFF));

1846 
check
 = check + (check >> 16);

1848 
ùh
->
check
 = 
	`ht⁄s
(check);

1850 i‡(
ùh
->
¥Ÿocﬁ
 =
SOL_UDP
)

1854 
ùHódîLí
 = 
	`GëIpHódîLígth
(
ùPackë
);

1855 
udphdr
* 
udph
 = (udphdr*Ë
	`ARM_NOWARN_ALIGN
((
ùPackë
 + 
ùHódîLí
));

1859 
check
 = 
	`¡ohs
(
udph
->check);

1861 
check
 = ~ (~ check - ((
‹igDaddr
 >> 16Ë& 0xFFFFË+ ((
√wDaddr
 >> 16) & 0xFFFF));

1862 
check
 = ~ (~ check - (
‹igDaddr
 & 0xFFFFË+ (
√wDaddr
 & 0xFFFF));

1865 
check
 = check + (check >> 16);

1867 
udph
->
check
 = 
	`ht⁄s
(check);

1870 
	}
}

1881 
	$AddMu…iˇ°Rouã
()

1883 
πíåy
 
kî√l_rouã
;

1884 
io˘lSkfd
 = 
	`sockë
(
PF_INET
, 
SOCK_DGRAM
, 0);

1885 i‡(
io˘lSkfd
 < 0)

1887 
	`BmfPEº‹
("socket(PF_INET)Érror");

1891 
	`mem£t
(&
kî√l_rouã
, 0, (
πíåy
));

1893 ((
sockaddr
 *Ë
	`ARM_NOWARN_ALIGN
(&
kî√l_rouã
.
π_d°
))->
ß_Ámûy
 = 
AF_INET
;

1894 ((
sockaddr
 *Ë
	`ARM_NOWARN_ALIGN
(&
kî√l_rouã
.
π_g©eway
))->
ß_Ámûy
 = 
AF_INET
;

1895 ((
sockaddr
 *Ë
	`ARM_NOWARN_ALIGN
(&
kî√l_rouã
.
π_gímask
))->
ß_Ámûy
 = 
AF_INET
;

1898 ((
sockaddr_ö
 *Ë
	`ARM_NOWARN_ALIGN
(&
kî√l_rouã
.
π_d°
))->
sö_addr
.
s_addr
 = 
	`ht⁄l
(0xE0000000);

1899 ((
sockaddr_ö
 *Ë
	`ARM_NOWARN_ALIGN
(&
kî√l_rouã
.
π_gímask
))->
sö_addr
.
s_addr
 = 
	`ht⁄l
(0xF0000000);

1901 
kî√l_rouã
.
π_mëric
 = 0;

1902 
kî√l_rouã
.
π_Êags
 = 
RTF_UP
;

1904 
kî√l_rouã
.
π_dev
 = 
EthîTunT≠IfName
;

1906 i‡(
	`io˘l
(
io˘lSkfd
, 
SIOCADDRT
, &
kî√l_rouã
) < 0)

1908 
	`BmfPEº‹
("îr‹ sëtög mu…iˇ°Ñouã vü EthîTunT≠ i¡îÁ˚ \"%s\"", 
EthîTunT≠IfName
);

1912 
	`˛o£
(
io˘lSkfd
);

1913 
	}
}

1924 
	$DñëeMu…iˇ°Rouã
()

1926 i‡(
EthîTunT≠Ip
 !
ETHERTUNTAPDEFAULTIP
)

1928 
πíåy
 
kî√l_rouã
;

1929 
io˘lSkfd
 = 
	`sockë
(
PF_INET
, 
SOCK_DGRAM
, 0);

1930 i‡(
io˘lSkfd
 < 0)

1932 
	`BmfPEº‹
("socket(PF_INET)Érror");

1936 
	`mem£t
(&
kî√l_rouã
, 0, (
πíåy
));

1938 ((
sockaddr
 *Ë
	`ARM_NOWARN_ALIGN
(&
kî√l_rouã
.
π_d°
))->
ß_Ámûy
 = 
AF_INET
;

1939 ((
sockaddr
 *Ë
	`ARM_NOWARN_ALIGN
(&
kî√l_rouã
.
π_g©eway
))->
ß_Ámûy
 = 
AF_INET
;

1940 ((
sockaddr
 *Ë
	`ARM_NOWARN_ALIGN
(&
kî√l_rouã
.
π_gímask
))->
ß_Ámûy
 = 
AF_INET
;

1943 ((
sockaddr_ö
 *Ë
	`ARM_NOWARN_ALIGN
(&
kî√l_rouã
.
π_d°
))->
sö_addr
.
s_addr
 = 
	`ht⁄l
(0xE0000000);

1944 ((
sockaddr_ö
 *Ë
	`ARM_NOWARN_ALIGN
(&
kî√l_rouã
.
π_gímask
))->
sö_addr
.
s_addr
 = 
	`ht⁄l
(0xF0000000);

1946 
kî√l_rouã
.
π_mëric
 = 0;

1947 
kî√l_rouã
.
π_Êags
 = 
RTF_UP
;

1949 
kî√l_rouã
.
π_dev
 = 
EthîTunT≠IfName
;

1951 i‡(
	`io˘l
(
io˘lSkfd
, 
SIOCDELRT
, &
kî√l_rouã
) < 0)

1953 
	`BmfPEº‹
("îr‹ dñëög mu…iˇ°Ñouã vü EthîTunT≠ i¡îÁ˚ \"%s\"", 
EthîTunT≠IfName
);

1957 
	`˛o£
(
io˘lSkfd
);

1959 
	}
}

	@lib/bmf/src/NetworkInterfaces.h

1 #i‚de‡
_BMF_NETWORKINTERFACES_H


2 
	#_BMF_NETWORKINTERFACES_H


	)

44 
	~<√töë/ö.h
>

47 
	~"ﬁ§_ty≥s.h
"

48 
	~"ﬁ§d_∂ugö.h
"

51 
	~"Packë.h
"

54 
	#BMF_BUFFER_SIZE
 2048

	)

56 
	sTBmfI¡îÁ˚


59 
	mˇ±urögSkfd
;

63 
	míˇpsuœtögSkfd
;

67 
	mli°íögSkfd
;

69 
	mmacAddr
[
IFHWADDRLEN
];

71 
	mifName
[
IFNAMSIZ
];

75 
öãrÁ˚
* 
	mﬁ§I¡f
;

78 
ﬁ§_ù_addr
 
	mötAddr
;

81 
ﬁ§_ù_addr
 
	mbrﬂdAddr
;

84 
u_öt32_t
 
	mnBmfPackësRx
;

85 
u_öt32_t
 
	mnBmfPackësRxDup
;

86 
u_öt32_t
 
	mnBmfPackësTx
;

89 
TBmfI¡îÁ˚
* 
	m√xt
;

92 
TBmfI¡îÁ˚
* 
BmfI¡îÁ˚s
;

94 
Highe°Skfd
;

95 
fd_£t
 
I≈utSë
;

97 
EthîTunT≠Fd
;

99 
EthîTunT≠IfName
[];

102 
	#ETHERTUNTAPDEFAULTIP
 0x0AFFFFFD

	)

104 
u_öt32_t
 
EthîTunT≠Ip
;

105 
u_öt32_t
 
EthîTunT≠IpMask
;

106 
u_öt32_t
 
EthîTunT≠IpBrﬂdˇ°
;

108 
C≠tuªPackësOnOl§I¡îÁ˚s
;

110 
	eTBmfMech™ism
 { 
	mBM_BROADCAST
 = 0, 
	mBM_UNICAST_PROMISCUOUS
 };

111 
TBmfMech™ism
 
BmfMech™ism
;

113 
SëBmfI¡îÁ˚Name
(c⁄° * 
i‚ame
, * 
d©a
, 
£t_∂ugö_∑ømëî_add⁄
 
add⁄
);

114 
SëBmfI¡îÁ˚Ip
(c⁄° * 
ù
, * 
d©a
, 
£t_∂ugö_∑ømëî_add⁄
 
add⁄
);

115 
SëC≠tuªPackësOnOl§I¡îÁ˚s
(c⁄° * 
íabÀ
, * 
d©a
, 
£t_∂ugö_∑ømëî_add⁄
 
add⁄
);

116 
SëBmfMech™ism
(c⁄° * 
mech™ism
, * 
d©a
, 
£t_∂ugö_∑ømëî_add⁄
 
add⁄
);

117 
Dó˘iv©eSpoofFûãr
();

118 
Re°‹eSpoofFûãr
();

120 
	#MAX_UNICAST_NEIGHBORS
 10

	)

121 
	sTBe°Neighb‹s


123 
lök_íåy
* 
	mlöks
[
MAX_UNICAST_NEIGHBORS
];

126 
FödNeighb‹s
(

127 
TBe°Neighb‹s
* 
√ighb‹s
,

128 
lök_íåy
** 
be°Neighb‹
,

129 
TBmfI¡îÁ˚
* 
ötf
,

130 
ﬁ§_ù_addr
* 
sour˚
,

131 
ﬁ§_ù_addr
* 
f‹w¨dedBy
,

132 
ﬁ§_ù_addr
* 
f‹w¨dedTo
,

133 * 
nPossibÀNeighb‹s
);

135 
Cª©eBmfNëw‹kI¡îÁ˚s
(
öãrÁ˚
* 
skùThisI¡f
);

136 
Clo£BmfNëw‹kI¡îÁ˚s
();

137 
AddN⁄Ol§BmfIf
(c⁄° * 
ifName
, * 
d©a
, 
£t_∂ugö_∑ømëî_add⁄
 
add⁄
);

138 
IsN⁄Ol§BmfIf
(c⁄° * 
ifName
);

139 
CheckAndUpd©eLoˇlBrﬂdˇ°
(* 
ùPackë
, 
ﬁ§_ù_addr
* 
brﬂdAddr
);

140 
AddMu…iˇ°Rouã
();

141 
DñëeMu…iˇ°Rouã
();

	@lib/bmf/src/Packet.c

40 
	~"ﬁ§.h
"

41 
	~"Packë.h
"

44 
	~<°ddef.h
>

45 
	~<as£π.h
>

46 
	~<°rög.h
>

47 
	~<sys/ty≥s.h
>

48 
	~<√töë/ö.h
>

49 
	~<√töë/ù.h
>

59 
	$IsIpFøgmít
(* 
ùPackë
)

61 
ù
* 
ùh
;

63 
	`as£π
(
ùPackë
 !
NULL
);

65 
ùh
 = (
ù
*Ë
	`ARM_NOWARN_ALIGN
(
ùPackë
);

66 i‡((
	`¡ohs
(
ùh
->
ù_off
Ë& 
IP_OFFMASK
) != 0)

71 
	}
}

82 
u_öt16_t
 
	$GëIpTŸÆLígth
(* 
ùPackë
)

84 
ùhdr
* 
ùh
;

86 
	`as£π
(
ùPackë
 !
NULL
);

88 
ùh
 = (
ùhdr
*Ë
	`ARM_NOWARN_ALIGN
(
ùPackë
);

89  
	`¡ohs
(
ùh
->
tŸ_Àn
);

90 
	}
}

100 
	$GëIpHódîLígth
(* 
ùPackë
)

102 
ùhdr
* 
ùh
;

104 
	`as£π
(
ùPackë
 !
NULL
);

106 
ùh
 = (
ùhdr
*Ë
	`ARM_NOWARN_ALIGN
(
ùPackë
);

107  
ùh
->
ihl
 << 2;

108 
	}
}

119 
u_öt8_t
 
	$GëTé
(* 
ùPackë
)

121 
ùhdr
* 
ùh
;

123 
	`as£π
(
ùPackë
 !
NULL
);

125 
ùh
 = (
ùhdr
*Ë
	`ARM_NOWARN_ALIGN
(
ùPackë
);

126  
ùh
->
âl
;

127 
	}
}

138 
	$SaveTéAndChecksum
(* 
ùPackë
, 
TSaveTé
* 
°é
)

140 
ùhdr
* 
ùh
;

142 
	`as£π
(
ùPackë
 !
NULL
 && 
°é
 != NULL);

144 
ùh
 = (
ùhdr
*Ë
	`ARM_NOWARN_ALIGN
(
ùPackë
);

145 
°é
->
âl
 = 
ùh
->ttl;

146 
°é
->
check
 = 
	`¡ohs
(
ùh
->check);

147 
	}
}

159 
	$Re°‹eTéAndChecksum
(* 
ùPackë
, 
TSaveTé
* 
°é
)

161 
ùhdr
* 
ùh
;

163 
	`as£π
(
ùPackë
 !
NULL
 && 
°é
 != NULL);

165 
ùh
 = (
ùhdr
*Ë
	`ARM_NOWARN_ALIGN
(
ùPackë
);

166 
ùh
->
âl
 = 
°é
->ttl;

167 
ùh
->
check
 = 
	`ht⁄s
(
°é
->check);

168 
	}
}

180 
	$De¸ó£TéAndUpd©eHódîChecksum
(* 
ùPackë
)

182 
ùhdr
* 
ùh
;

183 
u_öt32_t
 
sum
;

185 
	`as£π
(
ùPackë
 !
NULL
);

187 
ùh
 = (
ùhdr
*Ë
	`ARM_NOWARN_ALIGN
(
ùPackë
);

189 
ùh
->
âl
--;

190 
sum
 = 
	`¡ohs
(
ùh
->
check
) + 0x100;

191 
ùh
->
check
 = 
	`ht⁄s
(
sum
 + (sum>>16));

192 
	}
}

202 
ù
* 
	$GëIpHódî
(* 
íˇpsuœti⁄UdpD©a
)

204  (
ù
*Ë
	`ARM_NOWARN_ALIGN
((
íˇpsuœti⁄UdpD©a
 + 
ENCAP_HDR_LEN
));

205 
	}
}

215 * 
	$GëIpPackë
(* 
íˇpsuœti⁄UdpD©a
)

217  
íˇpsuœti⁄UdpD©a
 + 
ENCAP_HDR_LEN
;

218 
	}
}

228 
u_öt16_t
 
	$GëEnˇpsuœti⁄UdpD©aLígth
(* 
íˇpsuœti⁄UdpD©a
)

230  
	`GëIpTŸÆLígth
(
	`GëIpPackë
(
íˇpsuœti⁄UdpD©a
)Ë+ 
ENCAP_HDR_LEN
;

231 
	}
}

	@lib/bmf/src/Packet.h

1 #i‚de‡
_BMF_PACKET_H


2 
	#_BMF_PACKET_H


	)

44 
	~<√t/if.h
>

45 
	~<sys/ty≥s.h
>

51 
	sTEnˇpHódî


54 
u_öt8_t
 
	mty≥
;

55 
u_öt8_t
 
	mÀn
;

56 
u_öt16_t
 
	mª£rved
;

57 
u_öt32_t
 
	m¸c32
;

58 } 
__©åibuã__
((
__∑cked__
));

60 
	#ENCAP_HDR_LEN
 (()(
TEnˇpHódî
))

	)

61 
	#BMF_ENCAP_TYPE
 1

	)

62 
	#BMF_ENCAP_LEN
 6

	)

64 
	sTSaveTé


66 
u_öt8_t
 
	mâl
;

67 
u_öt16_t
 
	mcheck
;

68 } 
__©åibuã__
((
__∑cked__
));

70 
IsIpFøgmít
(* 
ùPackë
);

71 
u_öt16_t
 
GëIpTŸÆLígth
(* 
ùPackë
);

72 
GëIpHódîLígth
(* 
ùPackë
);

73 
u_öt8_t
 
GëTé
(* 
ùPackë
);

74 
SaveTéAndChecksum
(* 
ùPackë
, 
TSaveTé
* 
°é
);

75 
Re°‹eTéAndChecksum
(* 
ùPackë
, 
TSaveTé
* 
°é
);

76 
De¸ó£TéAndUpd©eHódîChecksum
(* 
ùPackë
);

77 
ù
* 
GëIpHódî
(* 
íˇpsuœti⁄UdpD©a
);

78 * 
GëIpPackë
(* 
íˇpsuœti⁄UdpD©a
);

79 
u_öt16_t
 
GëEnˇpsuœti⁄UdpD©aLígth
(* 
íˇpsuœti⁄UdpD©a
);

	@lib/bmf/src/PacketHistory.c

41 
	~"PackëHi°‹y.h
"

44 
	~<°ddef.h
>

45 
	~<as£π.h
>

46 
	~<°rög.h
>

47 
	~<sys/ty≥s.h
>

48 
	~<√töë/ù.h
>

49 
	~<°dlib.h
>

52 
	~"ﬁ§.h
"

53 
	~"scheduÀr.h
"

56 
	~"Packë.h
"

58 
TDupE¡ry
* 
	gPackëHi°‹y
[
HISTORY_HASH_SIZE
];

60 
	#CRC_UPTO_NBYTES
 256

	)

72 
u_öt16_t
 
	$CÆcCrcCcôt
(* 
buf„r
, 
ssize_t
 
Àn
)

76 
u_öt16_t
 
¸c
 = 0xFFFF;

77 
i
;

79 
	`as£π
(
buf„r
 !
NULL
);

81 
i
 = 0; i < 
Àn
; i++)

83 
¸c
 = ()(crc >> 8) | (crc << 8);

84 
¸c
 ^
buf„r
[
i
];

85 
¸c
 ^= ()(crc & 0xff) >> 4;

86 
¸c
 ^= (crc << 8) << 4;

87 
¸c
 ^= ((crc & 0xff) << 4) << 1;

89  
¸c
;

90 
	}
}

102 
	#CRC32_POLYNOMIAL
 0xedb88320UL

	)

104 
	gCrcTabÀ
[256];

106 
	$Gíî©eCrc32TabÀ
()

108 
i
, 
j
;

109 
u_öt32_t
 
¸c
;

110 
i
 = 0; i < 256; i++)

112 
¸c
 = (
u_öt32_t
Ë
i
;

113 
j
 = 0; j < 8; j++)

115 i‡(
¸c
 & 1)

117 
¸c
 = (¸¯>> 1Ë^ 
CRC32_POLYNOMIAL
;

121 
¸c
 = (crc >> 1);

124 
CrcTabÀ
[
i
] = 
¸c
;

126 
	}
}

137 
u_öt32_t
 
	$CÆcCrc32
(* 
buf„r
, 
ssize_t
 
Àn
)

139 
i
, 
j
;

140 
u_öt32_t
 
¸c
 = 0xffffffffUL;

141 
i
 = 0; i < 
Àn
; i++)

143 
j
 = ((Ë(
¸c
 & 0xFFË^ *
buf„r
++);

144 
¸c
 = (¸¯>> 8Ë^ 
CrcTabÀ
[
j
];

146  
¸c
 ^ 0xffffffffUL;

147 
	}
}

158 
u_öt32_t
 
	$PackëCrc32
(* 
ùPackë
, 
ssize_t
 
Àn
)

160 
TSaveTé
 
°é
;

161 
ù
* 
ùHódî
;

162 
u_öt32_t
 
ªsu…
;

164 
	`as£π
(
ùPackë
 !
NULL
);

175 
	`as£π
(
Àn
 > 0);

176 i‡(
Àn
 > 
CRC_UPTO_NBYTES
)

178 
Àn
 = 
CRC_UPTO_NBYTES
;

181 
	`SaveTéAndChecksum
(
ùPackë
, &
°é
);

183 
ùHódî
 = (
ù
*Ë
	`ARM_NOWARN_ALIGN
(
ùPackë
);

184 
ùHódî
->
ù_âl
 = 0xFF;

185 
ùHódî
->
ù_sum
 = 0x5A5A;

187 
ªsu…
 = 
	`CÆcCrc32
(
ùPackë
, 
Àn
);

189 
	`Re°‹eTéAndChecksum
(
ùPackë
, &
°é
);

190  
ªsu…
;

191 
	}
}

201 
u_öt32_t
 
	$Hash
(
u_öt32_t
 
‰om32
)

203  ((
‰om32
 >> 
N_HASH_BITS
) + from32) & ((1 << N_HASH_BITS) - 1);

204 
	}
}

214 
	$InôPackëHi°‹y
()

216 
i
;

218 
	`Gíî©eCrc32TabÀ
();

220 
i
 = 0; i < 
HISTORY_HASH_SIZE
; i++)

222 
PackëHi°‹y
[
i
] = 
NULL
;

224 
	}
}

235 
	$CheckAndM¨kRe˚¡Packë
(
u_öt32_t
 
¸c32
)

237 
u_öt32_t
 
idx
;

238 
TDupE¡ry
* 
wÆkî
;

239 
TDupE¡ry
* 
√wE¡ry
;

241 
idx
 = 
	`Hash
(
¸c32
);

242 
	`as£π
(
idx
 < 
HISTORY_HASH_SIZE
);

244 
wÆkî
 = 
PackëHi°‹y
[
idx
]; wÆkî !
NULL
; wÆkî = wÆkî->
√xt
)

246 i‡(
wÆkî
->
¸c32
 == crc32)

251 
wÆkî
->
timeOut
 = 
	`ﬁ§_gëTime°amp
(
HISTORY_HOLD_TIME
);

258 
√wE¡ry
 = 
	`ﬁ§_mÆloc
((
TDupE¡ry
), "BMF: TDupEntry");

259 i‡(
√wE¡ry
 !
NULL
)

261 
√wE¡ry
->
¸c32
 = crc32;

262 
√wE¡ry
->
timeOut
 = 
	`ﬁ§_gëTime°amp
(
HISTORY_HOLD_TIME
);

265 
√wE¡ry
->
√xt
 = 
PackëHi°‹y
[
idx
];

266 
PackëHi°‹y
[
idx
] = 
√wE¡ry
;

270 
	}
}

280 
Pru√PackëHi°‹y
(* 
u£Àss
 
__©åibuã__
((
unu£d
)))

282 
uöt
 
	gi
;

283 
	gi
 = 0; i < 
	gHISTORY_HASH_SIZE
; i++)

285 i‡(
	gPackëHi°‹y
[
i
] !
NULL
)

287 
TDupE¡ry
* 
√xtE¡ry
 = 
PackëHi°‹y
[
i
];

288 
TDupE¡ry
* 
	g¥evE¡ry
 = 
NULL
;

289 
	g√xtE¡ry
 !
NULL
)

291 
TDupE¡ry
* 
íåy
 = 
√xtE¡ry
;

292 
	g√xtE¡ry
 = 
íåy
->
√xt
;

294 i‡(
ﬁ§_isTimedOut
(
íåy
->
timeOut
))

297 i‡(
	g¥evE¡ry
 !
NULL
)

299 
¥evE¡ry
->
√xt
 = 
íåy
->next;

303 
	gPackëHi°‹y
[
i
] = 
íåy
->
√xt
;

307 
‰ì
(
íåy
);

311 
	g¥evE¡ry
 = 
íåy
;

	@lib/bmf/src/PacketHistory.h

1 #i‚de‡
_BMF_PACKETHISTORY_H


2 
	#_BMF_PACKETHISTORY_H


	)

45 
	~<sys/ty≥s.h
>

46 
	~<sys/times.h
>

48 
	#N_HASH_BITS
 12

	)

49 
	#HISTORY_HASH_SIZE
 (1 << 
N_HASH_BITS
)

	)

52 
	#HISTORY_HOLD_TIME
 3000

	)

54 
	sTDupE¡ry


56 
u_öt32_t
 
	m¸c32
;

57 
˛ock_t
 
	mtimeOut
;

58 
TDupE¡ry
* 
	m√xt
;

61 
InôPackëHi°‹y
();

62 
u_öt32_t
 
PackëCrc32
(* 
ùPkt
, 
ssize_t
 
Àn
);

63 
u_öt32_t
 
Hash
(u_öt32_à
‰om32
);

64 
M¨kRe˚¡Packë
(
u_öt32_t
 
¸c32
);

65 
CheckAndM¨kRe˚¡Packë
(
u_öt32_t
 
¸c32
);

66 
Pru√PackëHi°‹y
(*);

	@lib/bmf/src/olsrd_plugin.c

41 
	~<as£π.h
>

42 
	~<°ddef.h
>

45 
	~"ﬁ§d_∂ugö.h
"

46 
	~"∂ugö_utû.h
"

47 
	~"defs.h
"

48 
	~"scheduÀr.h
"

51 
	~"Bmf.h
"

52 
	~"PackëHi°‹y.h
"

53 
	~"Nëw‹kI¡îÁ˚s.h
"

54 
	~"Addªss.h
"

56 
__©åibuã__
 ((
c⁄°ru˘‹
)Ë
my_öô
();

57 
__©åibuã__
 ((
de°ru˘‹
)Ë
my_föi
();

59 
ﬁ§_∂ugö_exô
();

71 
	$ﬁ§d_∂ugö_öãrÁ˚_vîsi⁄
()

73  
PLUGIN_INTERFACE_VERSION
;

74 
	}
}

85 
	$ﬁ§d_∂ugö_öô
()

88 i‡(
ﬁ§_˙f
->
ù_vîsi⁄
 !
AF_INET
)

90 
	`Ârötf
(
°dîr
, 
PLUGIN_NAME
 ": ThisÖlugin only supports IPv4!\n");

95 
	`InôPackëHi°‹y
();

98 
	`ﬁ§_add_ifch™ge_h™dÀr
(&
I¡îÁ˚Ch™ge
);

101 
	`ﬁ§_°¨t_timî
(3 * 
MSEC_PER_SEC
, 0, 
OLSR_TIMER_PERIODIC
,

102 &
Pru√PackëHi°‹y
, 
NULL
, 0);

105  
	`InôBmf
(
NULL
);

106 
	}
}

117 
	$ﬁ§_∂ugö_exô
()

119 
	`Clo£Bmf
();

120 
	}
}

122 c⁄° 
ﬁ§d_∂ugö_∑ømëîs
 
	g∂ugö_∑ømëîs
[] = {

123 { .
«me
 = "N⁄Ol§If", .
	g£t_∂ugö_∑ømëî
 = &
AddN⁄Ol§BmfIf
, .
	gd©a
 = 
NULL
 },

124 { .
	g«me
 = "DoLoˇlBrﬂdˇ°", .
	g£t_∂ugö_∑ømëî
 = &
DoLoˇlBrﬂdˇ°
, .
	gd©a
 = 
NULL
 },

125 { .
	g«me
 = "BmfI¡îÁ˚", .
	g£t_∂ugö_∑ømëî
 = &
SëBmfI¡îÁ˚Name
, .
	gd©a
 = 
NULL
 },

126 { .
	g«me
 = "BmfI¡îÁ˚Ip", .
	g£t_∂ugö_∑ømëî
 = &
SëBmfI¡îÁ˚Ip
, .
	gd©a
 = 
NULL
 },

127 { .
	g«me
 = "C≠tuªPackësOnOl§I¡îÁ˚s", .
	g£t_∂ugö_∑ømëî
 = &
SëC≠tuªPackësOnOl§I¡îÁ˚s
, .
	gd©a
 = 
NULL
 },

128 { .
	g«me
 = "BmfMech™ism", .
	g£t_∂ugö_∑ømëî
 = &
SëBmfMech™ism
, .
	gd©a
 = 
NULL
 },

129 { .
	g«me
 = "F™OutLimô", .
	g£t_∂ugö_∑ømëî
 = &
SëF™OutLimô
, .
	gd©a
 = 
NULL
 },

130 { .
	g«me
 = "Brﬂdˇ°RëønsmôCou¡", .
	g£t_∂ugö_∑ømëî
 = &
£t_∂ugö_öt
, .
	gd©a
 = &
Brﬂdˇ°RëønsmôCou¡
},

143 
	$ﬁ§d_gë_∂ugö_∑ømëîs
(c⁄° 
ﬁ§d_∂ugö_∑ømëîs
 **
∑øms
, *
size
)

145 *
∑øms
 = 
∂ugö_∑ømëîs
;

146 *
size
 = (
∂ugö_∑ømëîs
)/(*plugin_parameters);

147 
	}
}

158 
	$my_öô
()

161 
	`¥ötf
("%s\n", 
MOD_DESC
);

164 
	}
}

175 
	$my_föi
()

177 
	`ﬁ§_∂ugö_exô
();

178 
	}
}

	@lib/dot_draw/src/olsrd_dot_draw.c

47 #ifde‡
_WRS_KERNEL


48 
	~<vxW‹ks.h
>

49 
	~<sockLib.h
>

50 
	~<w∫/c‹eù/√töë/ö.h
>

52 
	~<sys/ty≥s.h
>

53 
	~<sys/sockë.h
>

54 
	~<√töë/ö.h
>

55 
	~<¨∑/öë.h
>

56 
	~<sys/time.h
>

57 
	~<time.h
>

58 
	~<m©h.h
>

59 
	~<°dio.h
>

60 
	~<°rög.h
>

61 
	~<°dlib.h
>

62 
	~<uni°d.h
>

63 
	~<î∫o.h
>

64 
	~<°d¨g.h
>

67 
	~"ﬁ§.h
"

68 
	~"ùˇlc.h
"

69 
	~"ﬁ§_ty≥s.h
"

70 
	~"√ighb‹_èbÀ.h
"

71 
	~"two_h›_√ighb‹_èbÀ.h
"

72 
	~"tc_£t.h
"

73 
	~"h«_£t.h
"

74 
	~"mid_£t.h
"

75 
	~"lök_£t.h
"

76 
	~"√t_ﬁ§.h
"

77 
	~"lq_∂ugö.h
"

78 
	~"comm⁄/autobuf.h
"

80 
	~"ﬁ§d_dŸ_døw.h
"

81 
	~"ﬁ§d_∂ugö.h
"

83 #ifde‡
WIN32


84 
	#˛o£
(
x
Ë
	`˛o£sockë
(x)

	)

87 #ifde‡
_WRS_KERNEL


88 
	gùc_›í
;

89 
	gùc_sockë_up
;

90 
	#DOT_DRAW_PORT
 2004

	)

93 
	gùc_sockë
 = -1;

95 
autobuf
 
	goutbuf„r
;

96 
	goutbuf„r_sockë
 = -1;

98 
timî_íåy
 *
	gwrôëimî_íåy
 = 
NULL
;

101 
∂ugö_ùc_öô
();

104 
pcf_evít
(, , );

106 
ùc_a˘i⁄
(, *, );

108 
ùc_¥öt_√igh_lök
(
autobuf
 *
abuf
, c⁄° 
√ighb‹_íåy
 *
√ighb‹
);

110 
ùc_¥öt_tc_lök
(
autobuf
 *
abuf
, c⁄° 
tc_íåy
 *, c⁄° 
tc_edge_íåy
 *);

112 
ùc_¥öt_√t
(
autobuf
 *
abuf
, c⁄° 
ﬁ§_ù_addr
 *, c⁄° ﬁ§_ù_add∏*, 
uöt8_t
);

120 #ifde‡
_WRS_KERNEL


122 
	$ﬁ§d_dŸdøw_öô
()

125 
	$ﬁ§d_∂ugö_öô
()

129 
	`∂ugö_ùc_öô
();

132 
	`ªgi°î_pcf
(&
pcf_evít
);

135 
	}
}

140 #ifde‡
_WRS_KERNEL


142 
	$ﬁ§d_dŸdøw_exô
()

145 
	$ﬁ§_∂ugö_exô
()

148 i‡(
wrôëimî_íåy
) {

149 
	`˛o£
(
outbuf„r_sockë
);

150 
	`abuf_‰ì
(&
outbuf„r
);

151 
	`ﬁ§_°›_timî
(
wrôëimî_íåy
);

153 i‡(
ùc_sockë
 != -1) {

154 
	`CLOSE
(
ùc_sockë
);

156 
	}
}

159 
	$ùc_¥öt_√igh_lök
(
autobuf
 *
abuf
, c⁄° 
√ighb‹_íåy
 *
√ighb‹
)

161 c⁄° 
DASHED
[] = "dashed";

162 c⁄° 
SOLID
[] = "solid";

164 
ùaddr_°r
 
maöaddr°rbuf
, 
°rbuf
;

165 
ﬁ§_lökco°
 
ëx
 = 0.0;

166 c⁄° *
°yÀ
;

167 c⁄° *
adr
 = 
	`ﬁ§_ù_to_°rög
(&
maöaddr°rbuf
, &
ﬁ§_˙f
->
maö_addr
);

168 
lök_íåy
 *
the_lök
;

169 
lqãxtbuf„r
 
lqbuf„r
;

171 i‡(
√ighb‹
->
°©us
 == 0) {

172 
°yÀ
 = 
DASHED
;

174 
the_lök
 = 
	`gë_be°_lök_to_√ighb‹
(&
√ighb‹
->
√ighb‹_maö_addr
);

175 i‡(
the_lök
) {

176 
ëx
 = 
the_lök
->
lökco°
;

178 
°yÀ
 = 
SOLID
;

181 
	`abuf_≠≥ndf
(
abuf
, "\"%s\" -> \"%s\"[œbñ=\"%s\", styÀ=%s];\n", 
adr
, 
	`ﬁ§_ù_to_°rög
(&
°rbuf
, &
√ighb‹
->
√ighb‹_maö_addr
),

182 
	`gë_lökco°_ãxt
(
ëx
, 
Ál£
, &
lqbuf„r
), 
°yÀ
);

184 i‡(
√ighb‹
->
is_m¥
) {

185 
	`abuf_≠≥ndf
(
abuf
, "\"%s\"[sh≠e=box];\n", 
adr
);

187 
	}
}

190 
	$∂ugö_ùc_öô
()

192 
sockaddr_ö
 
sock_ö
;

193 
uöt32_t
 
yes
 = 1;

195 i‡(
ùc_sockë
 != -1) {

196 
	`˛o£
(
ùc_sockë
);

200 
ùc_sockë
 = 
	`sockë
(
AF_INET
, 
SOCK_STREAM
, 0);

201 i‡(
ùc_sockë
 == -1) {

202 
	`ﬁ§_¥ötf
(1, "(DOT DRAW)IPC sockë %s\n", 
	`°ªº‹
(
î∫o
));

206 i‡(
	`£tsock›t
(
ùc_sockë
, 
SOL_SOCKET
, 
SO_REUSEADDR
, (*)&
yes
, (yes)) < 0) {

207 
	`≥º‹
("SO_REUSEADDR failed");

208 
	`CLOSE
(
ùc_sockë
);

211 #i‡(
deföed
 
__FªeBSD__
 || 
__FªeBSD_kî√l__
Ë&& deföed 
SO_NOSIGPIPE


212 i‡(
	`£tsock›t
(
ùc_sockë
, 
SOL_SOCKET
, 
SO_NOSIGPIPE
, (*)&
yes
, (yes)) < 0) {

213 
	`≥º‹
("SO_REUSEADDR failed");

214 
	`CLOSE
(
ùc_sockë
);

222 
	`mem£t
(&
sock_ö
, 0, (sock_in));

223 
sock_ö
.
sö_Ámûy
 = 
AF_INET
;

224 
sock_ö
.
sö_addr
.
s_addr
 = 
ùc_li°í_ù
.
v4
.s_addr;

225 
sock_ö
.
sö_p‹t
 = 
	`ht⁄s
(
ùc_p‹t
);

228 i‡(
	`böd
(
ùc_sockë
, (
sockaddr
 *)&
sock_ö
, (sock_in)) == -1) {

229 
	`ﬁ§_¥ötf
(1, "(DOT DRAW)IPC böd %s\n", 
	`°ªº‹
(
î∫o
));

230 
	`CLOSE
(
ùc_sockë
);

235 i‡(
	`li°í
(
ùc_sockë
, 1) == -1) {

236 
	`ﬁ§_¥ötf
(1, "(DOT DRAW)IPCÜi°í %s\n", 
	`°ªº‹
(
î∫o
));

237 
	`CLOSE
(
ùc_sockë
);

243 
	`¥ötf
("Adding socket with olsrd\n");

245 
	`add_ﬁ§_sockë
(
ùc_sockë
, &
ùc_a˘i⁄
, 
NULL
, NULL, 
SP_PR_READ
);

248 
	}
}

251 
ùc_a˘i⁄
(
fd
 
__©åibuã__
 ((
unu£d
)), *
d©a
 __©åibuã__ ((unu£d)), 
Êags
 __attribute__ ((unused)))

253 
sockaddr_ö
 
	gpö
;

254 
sockÀn_t
 
	gaddæí
 = (
sockaddr_ö
);

255 
	gùc_c⁄√˘i⁄
;

257 
	gùc_c⁄√˘i⁄
 = 
ac˚±
(
ùc_sockë
, (
sockaddr
 *)&
pö
, &
addæí
);

258 i‡(
	gùc_c⁄√˘i⁄
 == -1) {

259 
ﬁ§_¥ötf
(1, "(DOT DRAW)IPCác˚±: %s\n", 
°ªº‹
(
î∫o
));

263 i‡(
	goutbuf„r_sockë
 != -1) {

264 
ﬁ§_¥ötf
(1, "(DOT DRAW)Only one connectionát onceállowed.\n");

265 
˛o£
(
ùc_c⁄√˘i⁄
);

268 #i‚de‡
_WRS_KERNEL


269 i‡(!
ù4equÆ
(&
pö
.
sö_addr
, &
ùc_ac˚±_ù
.
v4
Ë&& 
	gùc_ac˚±_ù
.
	gv4
.
	gs_addr
 !
INADDR_ANY
) {

270 
ﬁ§_¥ötf
(0, "Fr⁄àíd-c⁄√˘i⁄ from f‹eig¿ho° (%sËnŸáŒowed!\n", 
öë_¡ﬂ
(
pö
.
sö_addr
));

271 
CLOSE
(
ùc_c⁄√˘i⁄
);

275 
ﬁ§_¥ötf
(1, "(DOT DRAW)IPC: C⁄√˘i⁄ from %s\n", 
öë_¡ﬂ
(
pö
.
sö_addr
));

277 
abuf_öô
(&
outbuf„r
, 4096);

278 
	goutbuf„r_sockë
 = 
ùc_c⁄√˘i⁄
;

280 
pcf_evít
(1, 1, 1);

284 
dŸdøw_wrôe_d©a
(*
foo
 
__©åibuã__
 ((
unu£d
))) {

285 
fd_£t
 
	g£t
;

286 
	gªsu…
;

287 
timevÆ
 
	gtv
;

289 
FD_ZERO
(&
£t
);

291 
FD_SET
(()
outbuf„r_sockë
, &
£t
);

293 
	gtv
.
	gtv_£c
 = 0;

294 
	gtv
.
	gtv_u£c
 = 0;

296 
	gªsu…
 = 
£À˘
(
outbuf„r_sockë
 + 1, 
NULL
, &
£t
, NULL, &
tv
);

297 i‡(
	gªsu…
 <= 0) {

301 i‡(
FD_ISSET
(
outbuf„r_sockë
, &
£t
)) {

302 
	gªsu…
 = 
£nd
(
outbuf„r_sockë
, 
outbuf„r
.
buf
, outbuf„r.
Àn
, 0);

303 i‡(
	gªsu…
 > 0)

304 
abuf_puŒ
(&
outbuf„r
, 
ªsu…
);

306 i‡(
	gªsu…
 <= 0) {

308 
˛o£
(
outbuf„r_sockë
);

309 
abuf_‰ì
(&
outbuf„r
);

310 
ﬁ§_°›_timî
(
wrôëimî_íåy
);

311 
	gwrôëimî_íåy
 = 
NULL
;

312 
	goutbuf„r_sockë
 = -1;

315 i‡(
	goutbuf„r
.
	gÀn
 == 0) {

317 
˛o£
(
outbuf„r_sockë
);

318 
abuf_‰ì
(&
outbuf„r
);

319 
ﬁ§_°›_timî
(
wrôëimî_íåy
);

320 
	gwrôëimî_íåy
 = 
NULL
;

321 
	goutbuf„r_sockë
 = -1;

329 
	$pcf_evít
(
my_ch™ges_√ighb‹hood
, 
my_ch™ges_t›ﬁogy
, 
my_ch™ges_h«
)

331 
√ighb‹_íåy
 *
√ighb‹_èbÀ_tmp
;

332 
tc_íåy
 *
tc
;

333 
tc_edge_íåy
 *
tc_edge
;

334 
h«_íåy
 *
tmp_h«
;

335 
h«_√t
 *
tmp_√t
;

336 
ù_¥efix_li°
 *
h«
;

337 
ªs
 = 0;

340 i‡(
outbuf„r_sockë
 == -1) {

344 i‡(
my_ch™ges_√ighb‹hood
 || 
my_ch™ges_t›ﬁogy
 || 
my_ch™ges_h«
) {

346 
	`abuf_puts
(&
outbuf„r
, "digraphÅopology\n{\n");

349 
	`OLSR_FOR_ALL_NBR_ENTRIES
(
√ighb‹_èbÀ_tmp
) {

350 
	`ùc_¥öt_√igh_lök
(&
outbuf„r
, 
√ighb‹_èbÀ_tmp
);

352 
	`OLSR_FOR_ALL_NBR_ENTRIES_END
(
√ighb‹_èbÀ_tmp
);

355 
	`OLSR_FOR_ALL_TC_ENTRIES
(
tc
) {

356 
	`OLSR_FOR_ALL_TC_EDGE_ENTRIES
(
tc
, 
tc_edge
) {

357 i‡(
tc_edge
->
edge_öv
) {

358 
	`ùc_¥öt_tc_lök
(&
outbuf„r
, 
tc
, 
tc_edge
);

361 
	`OLSR_FOR_ALL_TC_EDGE_ENTRIES_END
(
tc
, 
tc_edge
);

363 
	`OLSR_FOR_ALL_TC_ENTRIES_END
(
tc
);

366 
	`OLSR_FOR_ALL_HNA_ENTRIES
(
tmp_h«
) {

369 
tmp_√t
 = 
tmp_h«
->
√tw‹ks
.
√xt
;Åmp_net != &tmp_hna->networks;Åmp_net =Åmp_net->next) {

370 
	`ùc_¥öt_√t
(&
outbuf„r
, &
tmp_h«
->
A_g©eway_addr
,

371 &
tmp_√t
->
h«_¥efix
.
¥efix
,Åmp_√t->h«_¥efix.
¥efix_Àn
);

374 
	`OLSR_FOR_ALL_HNA_ENTRIES_END
(
tmp_h«
);

377 
h«
 = 
ﬁ§_˙f
->
h«_íåõs
; h« !
NULL
; h« = h«->
√xt
) {

378 
	`ùc_¥öt_√t
(&
outbuf„r
, &
ﬁ§_˙f
->
maö_addr
, &
h«
->
√t
.
¥efix
, h«->√t.
¥efix_Àn
);

380 
	`abuf_puts
(&
outbuf„r
, "}\n\n");

382 
ªs
 = 1;

385 i‡(
wrôëimî_íåy
 =
NULL
) {

386 
wrôëimî_íåy
 = 
	`ﬁ§_°¨t_timî
(100, 0, 
OLSR_TIMER_PERIODIC
, &
dŸdøw_wrôe_d©a
, 
NULL
, 0);

389  
ªs
;

390 
	}
}

393 
	$ùc_¥öt_tc_lök
(
autobuf
 *
abuf
, c⁄° 
tc_íåy
 *
íåy
, c⁄° 
tc_edge_íåy
 *
d°_íåy
)

395 
ùaddr_°r
 
°rbuf1
, 
°rbuf2
;

396 
lqãxtbuf„r
 
lqbuf„r
;

398 
	`abuf_≠≥ndf
(
abuf
, "\"%s\" -> \"%s\"[œbñ=\"%s\"];\n", 
	`ﬁ§_ù_to_°rög
(&
°rbuf1
, &
íåy
->
addr
),

399 
	`ﬁ§_ù_to_°rög
(&
°rbuf2
, &
d°_íåy
->
T_de°_addr
), 
	`gë_lökco°_ãxt
(d°_íåy->
co°
, 
Ál£
, &
lqbuf„r
));

400 
	}
}

403 
	$ùc_¥öt_√t
(
autobuf
 *
abuf
, c⁄° 
ﬁ§_ù_addr
 *
gw
, c⁄° ﬁ§_ù_add∏*
√t
, 
uöt8_t
 
¥efixÀn
)

405 
ùaddr_°r
 
gwbuf
, 
√tbuf
;

407 
	`abuf_≠≥ndf
(
abuf
, "\"%s\" -> \"%s/%d\"[œbñ=\"HNA\"];\n", 
	`ﬁ§_ù_to_°rög
(&
gwbuf
, 
gw
), ol§_ù_to_°rög(&
√tbuf
, 
√t
), 
¥efixÀn
);

409 
	`abuf_≠≥ndf
(
abuf
, "\"%s/%d\"[sh≠e=düm⁄d];\n", 
	`ﬁ§_ù_to_°rög
(&
√tbuf
, 
√t
), 
¥efixÀn
);

410 
	}
}

	@lib/dot_draw/src/olsrd_dot_draw.h

47 #i‚de‡
_OLSRD_DOT_DRAW


48 
	#_OLSRD_DOT_DRAW


	)

50 
	~"ﬁ§d_∂ugö.h
"

51 
	~"∂ugö_utû.h
"

53 
ﬁ§_ù_addr
 
ùc_ac˚±_ù
;

54 
ﬁ§_ù_addr
 
ùc_li°í_ù
;

55 
ùc_p‹t
;

57 
ﬁ§d_∂ugö_öãrÁ˚_vîsi⁄
();

58 
ﬁ§d_∂ugö_öô
();

59 
ﬁ§_∂ugö_exô
();

60 
ﬁ§d_gë_∂ugö_∑ømëîs
(c⁄° 
ﬁ§d_∂ugö_∑ømëîs
 **
∑øms
, *
size
);

	@lib/dot_draw/src/olsrd_plugin.c

45 
	~<°dio.h
>

46 
	~<°rög.h
>

47 
	~<°dlib.h
>

48 
	~<¨∑/öë.h
>

49 
	~<sys/ty≥s.h
>

50 
	~<√töë/ö.h
>

52 
	~"ﬁ§.h
"

53 
	~"ﬁ§d_∂ugö.h
"

54 
	~"ﬁ§d_dŸ_døw.h
"

56 
	#PLUGIN_NAME
 "OLSRD dŸ døwÖlugö"

	)

57 
	#PLUGIN_VERSION
 "0.3"

	)

58 
	#PLUGIN_AUTHOR
 "Andªa†T⁄√£n"

	)

59 
	#MOD_DESC
 
PLUGIN_NAME
 " " 
PLUGIN_VERSION
 " by " 
PLUGIN_AUTHOR


	)

60 
	#PLUGIN_INTERFACE_VERSION
 5

	)

62 
ﬁ§_ù_addr
 
	gùc_ac˚±_ù
;

63 
ﬁ§_ù_addr
 
	gùc_li°í_ù
;

64 
	gùc_p‹t
;

66 
	$my_öô
(Ë
	`__©åibuã__
 ((
c⁄°ru˘‹
));

67 
	$my_föi
(Ë
	`__©åibuã__
 ((
de°ru˘‹
));

73 
	$my_öô
()

76 
	`¥ötf
("%s\n", 
MOD_DESC
);

79 
ùc_p‹t
 = 2004;

80 
ùc_ac˚±_ù
.
v4
.
s_addr
 = 
	`ht⁄l
(
INADDR_LOOPBACK
);

81 
ùc_li°í_ù
.
v4
.
s_addr
 = 
	`ht⁄l
(
INADDR_ANY
);

82 
	}
}

88 
	$my_föi
()

96 
	`ﬁ§_∂ugö_exô
();

97 
	}
}

100 
	$ﬁ§d_∂ugö_öãrÁ˚_vîsi⁄
()

102  
PLUGIN_INTERFACE_VERSION
;

103 
	}
}

105 c⁄° 
ﬁ§d_∂ugö_∑ømëîs
 
	g∂ugö_∑ømëîs
[] = {

106 {.
«me
 = "p‹t",.
	g£t_∂ugö_∑ømëî
 = &
£t_∂ugö_p‹t
,.
	gd©a
 = &
ùc_p‹t
},

107 {.
	g«me
 = "ac˚±",.
	g£t_∂ugö_∑ømëî
 = &
£t_∂ugö_ùaddªss
,.
	gd©a
 = &
ùc_ac˚±_ù
},

108 {.
	g«me
 = "li°í",.
	g£t_∂ugö_∑ømëî
 = &
£t_∂ugö_ùaddªss
,.
	gd©a
 = &
ùc_li°í_ù
},

112 
	$ﬁ§d_gë_∂ugö_∑ømëîs
(c⁄° 
ﬁ§d_∂ugö_∑ømëîs
 **
∑øms
, *
size
)

114 *
∑øms
 = 
∂ugö_∑ømëîs
;

115 *
size
 = (
∂ugö_∑ømëîs
) / (*plugin_parameters);

116 
	}
}

	@lib/dyn_gw/src/olsrd_dyn_gw.c

47 
	~<¨∑/öë.h
>

49 
	~"ﬁ§_ty≥s.h
"

50 
	~"ﬁ§d_dyn_gw.h
"

51 
	~"ﬁ§.h
"

52 
	~"defs.h
"

53 
	~"ùˇlc.h
"

54 
	~"scheduÀr.h
"

55 
	~"log.h
"

56 
	~"routög_èbÀ.h
"

58 
	~<°dio.h
>

59 
	~<°rög.h
>

60 
	~<°dlib.h
>

61 
	~<sys/time.h
>

62 
	~<√t/rouã.h
>

63 #ifde‡
löux


64 
	~<löux/ö_rouã.h
>

66 
	~<uni°d.h
>

67 
	~<î∫o.h
>

68 
	~<time.h
>

69 #i‚de‡
WIN32


70 
	~<±hªad.h
>

72 
	#WIN32_LEAN_AND_MEAN


	)

73 
	~<wödows.h
>

74 #unde‡
öãrÁ˚


76 
	#˛o£
(
x
Ë
	`˛o£sockë
(x)

	)

78 
HANDLE
 
	t±hªad_muãx_t
;

79 
HANDLE
 
	t±hªad_t
;

81 
±hªad_¸óã
(
HANDLE
 * 
H™d
, *
Aâr
, *(*
Func
Ë(*), *
Arg
);

82 
±hªad_kûl
(
HANDLE
 
H™d
, 
Sig
);

83 
±hªad_muãx_öô
(
HANDLE
 * 
H™d
, *
Aâr
);

84 
±hªad_muãx_lock
(
HANDLE
 * 
H™d
);

85 
±hªad_muãx_u∆ock
(
HANDLE
 * 
H™d
);

87 
	sThªadP¨a
 {

88 *(*
	mFunc
) (*);

89 *
	mArg
;

93 
	gh«_check_öãrvÆ
 = 
DEFAULT_HNA_CHECK_INTERVAL
;

95 
	gpög_check_öãrvÆ
 = 
DEFAULT_PING_CHECK_INTERVAL
;

98 
	spög_li°
 {

99 *
	mpög_addªss
;

100 
pög_li°
 *
	m√xt
;

103 
pög_li°
 *
add_to_pög_li°
(const *, ping_list *);

105 
	sh«_li°
 {

106 
ﬁ§_ù_addr
 
	mh«_addr
;

107 
uöt8_t
 
	mh«_¥efixÀn
;

108 
boﬁ
 
	mh«_added
;

109 
boﬁ
 
	mchecked
;

110 
boﬁ
 
	ma˘ive
;

111 
h«_li°
 * 
	m√xt
;

114 
h«_li°
 *
add_to_h«_li°
(h«_li° *, 
ﬁ§_ù_addr
 *
h«_addr
, 
uöt8_t
 
h«_¥efixÀn
);

116 
	sh«_group
 {

117 
h«_li°
 * 
	mh«_li°
;

118 
pög_li°
 * 
	mpög_ho°s
;

119 
boﬁ
 
	m¥obe_ok
;

120 
h«_group
 * 
	m√xt
;

123 
boﬁ
 
	gh«_pög_check
 = 
Ál£
;

124 
h«_group
 * 
	gh«_groups
 = 
NULL
;

126 
h«_group
 *
add_to_h«_group
(hna_group *);

128 
	$lo›ed_checks
(*Ë
	`__©åibuã__
 ((
n‹ëu∫
));

130 
boﬁ
 
	`check_gw
(
ﬁ§_ù_addr
 *, 
uöt8_t
, 
pög_li°
 *);

132 
	`pög_is_possibÀ
(
pög_li°
 *);

135 
	`ﬁ§_evít_doög_h«
(*);

137 
h«_li°
* 
	`föd_h«
(
uöt32_t
 
§c_addr
, uöt32_à
§c_mask
);

139 *
	`gë_ù_°r
(
uöt32_t
 
addªss
, *
s
, 
size_t
 
maxÀn
);

140 
	`upd©e_routög
();

146 
	`£t_∂ugö_pög
(c⁄° *
vÆue
, *
d©a
 
	`__©åibuã__
 ((
unu£d
)), 
£t_∂ugö_∑ømëî_add⁄
 
add⁄
 __attribute__ ((unused)))

148 
ﬁ§_ù_addr
 
foo_addr
;

150 i‡(
	`öë_±⁄
(
ﬁ§_˙f
->
ù_vîsi⁄
, 
vÆue
, &
foo_addr
) <= 0) {

151 
	`OLSR_PRINTF
(0, "IŒegÆ IPáddªs†\"%s\"", 
vÆue
);

155 i‡(
h«_groups
 =
NULL
) {

156 
h«_groups
 = 
	`add_to_h«_group
(hna_groups);

157 i‡(
h«_groups
 =
NULL
)

160 i‡(
h«_groups
->
h«_li°
 !
NULL
) {

161 
h«_groups
 = 
	`add_to_h«_group
(hna_groups);

165 
h«_groups
->
pög_ho°s
 = 
	`add_to_pög_li°
(
vÆue
, hna_groups->ping_hosts);

166 
h«_pög_check
 = 
åue
;

169 
	}
}

172 
£t_∂ugö_h«
(c⁄° *
vÆue
, *
d©a
 
__©åibuã__
 ((
unu£d
)), 
£t_∂ugö_∑ømëî_add⁄
 
add⁄
 __attribute__ ((unused)))

174 
ﬁ§_ù_addr
 
	gãmp_addr
;

175 
ﬁ§_ù_addr
 
	gãmp_mask
;

176 
	gs_addr
[128];

177 
	gs_mask
[128];

180 
	gi
 = 
ssˇnf
(
vÆue
, "%127†%127s", 
s_addr
, 
s_mask
);

181 i‡(
	gi
 != 2) {

182 
OLSR_PRINTF
(0, "C™nŸ gë IPáddªs†™dÇëmask from \"%s\"", 
vÆue
);

186 i‡(
öë_±⁄
(
ﬁ§_˙f
->
ù_vîsi⁄
, 
s_addr
, &
ãmp_addr
) <= 0) {

187 
OLSR_PRINTF
(0, "IŒegÆ IPáddªs†\"%s\"", 
s_addr
);

191 i‡(
öë_±⁄
(
ﬁ§_˙f
->
ù_vîsi⁄
, 
s_mask
, &
ãmp_mask
) <= 0) {

192 
OLSR_PRINTF
(0, "IŒegÆÇëmask \"%s\"", 
s_mask
);

196 i‡(
	gh«_groups
 =
NULL
)

198 
h«_groups
 = 
add_to_h«_group
(hna_groups);

199 i‡(
	gh«_groups
 =
NULL
) {

204 
	gh«_groups
->
	gh«_li°
 = 
add_to_h«_li°
(
h«_groups
->
h«_li°
, &
ãmp_addr
, 
ﬁ§_√tmask_to_¥efix
(&
ãmp_mask
));

205 i‡(
	gh«_groups
->
	gh«_li°
 =
NULL
) {

211 c⁄° 
ﬁ§d_∂ugö_∑ømëîs
 
	g∂ugö_∑ømëîs
[] = {

212 {.
«me
 = "öãrvÆ", .
	g£t_∂ugö_∑ømëî
 = &
£t_∂ugö_öt
, .
	gd©a
 = &
pög_check_öãrvÆ
 },

213 {.
	g«me
 = "pögöãrvÆ", .
	g£t_∂ugö_∑ømëî
 = &
£t_∂ugö_öt
, .
	gd©a
 = &
pög_check_öãrvÆ
 },

214 {.
	g«me
 = "checköãrvÆ", .
	g£t_∂ugö_∑ømëî
 = &
£t_∂ugö_öt
, .
	gd©a
 = &
h«_check_öãrvÆ
 },

215 {.
	g«me
 = "pög", .
	g£t_∂ugö_∑ømëî
 = &
£t_∂ugö_pög
, .
	gd©a
 = 
NULL
 },

216 {.
	g«me
 = "h«", .
	g£t_∂ugö_∑ømëî
 = &
£t_∂ugö_h«
, .
	gd©a
 = 
NULL
 },

220 
	$ﬁ§d_gë_∂ugö_∑ømëîs
(c⁄° 
ﬁ§d_∂ugö_∑ømëîs
 **
∑øms
, *
size
)

222 *
∑øms
 = 
∂ugö_∑ømëîs
;

223 *
size
 = (
∂ugö_∑ømëîs
) / (*plugin_parameters);

224 
	}
}

235 
	$ﬁ§d_∂ugö_öô
()

237 
±hªad_t
 
pög_thªad
;

239 i‡(
h«_groups
 =
NULL
) {

240 
h«_groups
 = 
	`add_to_h«_group
(hna_groups);

241 i‡(
h«_groups
 =
NULL
)

246 i‡(
h«_groups
->
h«_li°
 =
NULL
) {

247 
ﬁ§_ù_addr
 
ãmp_addr
;

248 
ﬁ§_ù_addr
 
ãmp_mask
;

250 
ãmp_addr
.
v4
.
s_addr
 = 
INET_ADDR
;

251 
ãmp_mask
.
v4
.
s_addr
 = 
INET_MASK
;

252 
h«_groups
->
h«_li°
 = 
	`add_to_h«_li°
(h«_groups->h«_li°, &
ãmp_addr
, 
	`ﬁ§_√tmask_to_¥efix
(&
ãmp_mask
));

253 i‡(
h«_groups
->
h«_li°
 =
NULL
) {

259 
	`upd©e_routög
();

261 i‡(
h«_pög_check
) {

262 
	`±hªad_¸óã
(&
pög_thªad
, 
NULL
, (*(*)(*))
lo›ed_checks
, NULL);

264 
h«_group
 *
gΩ
;

265 
gΩ
 = 
h«_groups
; gΩ; gΩ = gΩ->
√xt
) {

266 
gΩ
->
¥obe_ok
 = 
åue
;

272 
h«_group
 *
gΩ
;

273 
i
 = 0;

274 
gΩ
 = 
h«_groups
; gΩ; gΩ = gΩ->
√xt
, ++
i
) {

275 
h«_li°
 *
l°
;

276 
pög_li°
 *
≤g
;

278 
	`ﬁ§_¥ötf
(1, "Grou∞%d:\n", 
i
);

279 
l°
 = 
gΩ
->
h«_li°
;Ü°;Ü° =Ü°->
√xt
) {

280 
addr
[
INET_ADDRSTRLEN
];

281 
	`ﬁ§_¥ötf
(1, " HNA %s\n", 
	`gë_ù_°r
(
l°
->
h«_addr
.
v4
.
s_addr
, 
addr
, 
INET_ADDRSTRLEN
));

283 
≤g
 = 
gΩ
->
pög_ho°s
;Öng;Öng =Öng->
√xt
) {

284 
	`ﬁ§_¥ötf
(1, " PING %s\n", 
≤g
->
pög_addªss
);

290 
	`ﬁ§_°¨t_timî
(
h«_check_öãrvÆ
, 0, 
OLSR_TIMER_PERIODIC
, &
ﬁ§_evít_doög_h«
, 
NULL
, 0);

292 
	}
}

299 
ﬁ§_evít_doög_h«
(*
foo
 
__©åibuã__
 ((
unu£d
)))

301 
h«_group
* 
	ggΩ
;

302 
h«_li°
 *
	gli
;

304 
upd©e_routög
();

306 
	ggΩ
 = 
h«_groups
; gΩ; gΩ = 
gΩ
->
√xt
) {

307 
li
 = 
gΩ
->
h«_li°
; 
	gli
;Üòli->
√xt
) {

308 i‡(!
li
->
h«_added
) {

309 i‡(
gΩ
->
¥obe_ok
 && 
li
->
a˘ive
) {

310 
ﬁ§_¥ötf
(1, "Adding OLSRÜocal HNAÉntry\n");

311 
ù_¥efix_li°_add
(&
ﬁ§_˙f
->
h«_íåõs
, &
li
->
h«_addr
,Üi->
h«_¥efixÀn
);

312 
	gli
->
	gh«_added
 = 
åue
;

315 i‡(!
	ggΩ
->
	g¥obe_ok
 || !
	gli
->
	ga˘ive
) {

316 
ù_¥efix_li°_ªmove
(&
ﬁ§_˙f
->
h«_íåõs
, &
li
->
h«_addr
,Üi->
h«_¥efixÀn
)) {

317 
ﬁ§_¥ötf
(1, "Removing OLSRÜocal HNAÉntry\n");

319 
	gli
->
	gh«_added
 = 
Ál£
;

332 
lo›ed_checks
(*
foo
 
__©åibuã__
 ((
unu£d
)))

335 
h«_group
 *
	ggΩ
;

336 
h«_li°
 *
	gli
;

337 
time•ec
 
	gªmaödî_•ec
;

339 
time•ec
 
	g¶ì±ime_•ec
 = { 
pög_check_öãrvÆ
, 0L };

341 
	ggΩ
 = 
h«_groups
; gΩ; gΩ = 
gΩ
->
√xt
) {

342 
li
 = 
gΩ
->
h«_li°
; 
	gli
;Üòli->
√xt
) {

345 i‡(!
li
->
a˘ive
)

349 
	ggΩ
->
	g¥obe_ok
 = 
check_gw
(&
li
->
h«_addr
,Üi->
h«_¥efixÀn
, 
gΩ
->
pög_ho°s
);

350 i‡(
	ggΩ
->
	g¥obe_ok
)

355 
«no¶ìp
(&
¶ì±ime_•ec
, &
ªmaödî_•ec
) < 0)

356 
	g¶ì±ime_•ec
 = 
ªmaödî_•ec
;

370 
h«_li°
*

371 
	$föd_h«
(
uöt32_t
 
§c_addr
, uöt32_à
§c_mask
)

373 
h«_group
 * 
gΩ
;

374 
h«_li°
 *
li
;

375 
ﬁ§_ù_addr
 
mask
;

377 
gΩ
 = 
h«_groups
; gΩ; gΩ = gΩ->
√xt
) {

378 
li
 = 
gΩ
->
h«_li°
;Üi;Üòli->
√xt
) {

379 
	`ﬁ§_¥efix_to_√tmask
(&
mask
, 
li
->
h«_¥efixÀn
);

380 i‡(
li
->
h«_addr
.
v4
.
s_addr
 =
§c_addr
 && 
mask
.v4.s_add∏=
§c_mask
) {

381  
li
;

385  
NULL
;

386 
	}
}

399 
	$gë_ù_°r
(
uöt32_t
 
addªss
, *
s
, 
size_t
 
maxÀn
)

401 
sockaddr_ö
 
v4
;

403 
v4
.
sö_addr
.
s_addr
 = 
addªss
;

404 
	`öë_¡›
(
AF_INET
, &
v4
.
sö_addr
, 
s
, 
maxÀn
);

406  
s
;

407 
	}
}

421 
	$upd©e_routög
()

423 
buf
[1024], 
iÁ˚
[16];

424 
uöt32_t
 
g©e_addr
, 
de°_addr
, 
√tmask
;

425 
iÊags
;

426 
mëric
, 
ªf˙t
, 
u£
;

427 
h«_group
 *
gΩ
;

428 
h«_li°
 *
li
;

430 
FILE
 *
Â
 = 
	`f›í
(
PROCENTRY_ROUTE
, "r");

431 i‡(!
Â
) {

432 
	`≥º‹
(
PROCENTRY_ROUTE
);

433 
	`ﬁ§_¥ötf
(1, "INET (IPv4)Çot configured inÅhis system.\n");

439 
gΩ
 = 
h«_groups
; gΩ; gΩ = gΩ->
√xt
) {

440 
li
 = 
gΩ
->
h«_li°
;Üi;Üòli->
√xt
) {

441 
li
->
checked
 = 
Ál£
;

449 
	`fgës
(
buf
, (buf), 
Â
)) {

450 
h«_li°
 *
h«
;

451 
s_addr
[
INET_ADDRSTRLEN
], 
s_mask
[INET_ADDRSTRLEN];

453 
num
 = 
	`ssˇnf
(
buf
,

455 
iÁ˚
,

456 &
de°_addr
,

457 &
g©e_addr
,

458 &
iÊags
,

459 &
ªf˙t
,

460 &
u£
,

461 &
mëric
,

462 &
√tmask
);

463 i‡(
num
 < 8)

466 
	`gë_ù_°r
(
de°_addr
, 
s_addr
, 
INET_ADDRSTRLEN
);

467 
	`gë_ù_°r
(
√tmask
, 
s_mask
, 
INET_ADDRSTRLEN
);

469 
h«
 = 
	`föd_h«
(
de°_addr
, 
√tmask
);

470 i‡(
h«
 =
NULL
) {

474 i‡((
iÊags
 & 
RTF_UP
Ë&& (
mëric
 !
RT_METRIC_DEFAULT
)) {

475 
h«
->
checked
 = 
åue
;

478 
	`f˛o£
(
Â
);

483 
gΩ
 = 
h«_groups
; gΩ; gΩ = gΩ->
√xt
) {

484 
li
 = 
gΩ
->
h«_li°
;Üi;Üòli->
√xt
) {

485 
li
->
a˘ive
 =Üi->
checked
;

490 
	}
}

502 
boﬁ


503 
	$check_gw
(
ﬁ§_ù_addr
 *
addr
, 
uöt8_t
 
¥efixÀn
, 
pög_li°
 *
the_pög_li°
)

505 
boﬁ
 
ªtvÆ
 = 
Ál£
;

506 
ﬁ§_ù_addr
 
mask
;

508 
	`ﬁ§_¥efix_to_√tmask
(&
mask
, 
¥efixÀn
);

511 i‡(
the_pög_li°
 !
NULL
) {

513 i‡(
	`pög_is_possibÀ
(
the_pög_li°
)) {

514 
	`ﬁ§_¥ötf
(1, "HNA[%08x/%08x]’ög i†possibÀËdëe˘ed i¿routögÅabÀ.\n", 
addr
->
v4
.
s_addr
, 
mask
.v4.s_addr);

515 
ªtvÆ
 = 
åue
;

518 
	`ﬁ§_¥ötf
(1, "HNA[%08x/%08x] dëe˘ed i¿routögÅabÀ.\n", 
addr
->
v4
.
s_addr
, 
mask
.v4.s_addr);

519 
ªtvÆ
 = 
åue
;

522 i‡(
ªtvÆ
 =
Ál£
) {

524 
	`ﬁ§_¥ötf
(1, "HNA[%08x/%08x] i†övÆid\n", ()
addr
->
v4
.
s_addr
, ()
mask
.v4.s_addr);

526  
ªtvÆ
;

527 
	}
}

538 
	$pög_is_possibÀ
(
pög_li°
 *
the_pög_li°
)

540 
pög_li°
 *
li°
;

541 
li°
 = 
the_pög_li°
;Üi°;Üi° =Üi°->
√xt
) {

542 
pög_comm™d
[50];

543 
	`¢¥ötf
(
pög_comm™d
, ’ög_comm™d), "pög -¯1 -q %s", 
li°
->
pög_addªss
);

544 
	`ﬁ§_¥ötf
(1, "\nDÿpög o¿%†...\n", 
li°
->
pög_addªss
);

545 i‡(
	`sy°em
(
pög_comm™d
) == 0) {

546 
	`ﬁ§_¥ötf
(1, "...OK\n\n");

549 
	`ﬁ§_¥ötf
(1, "...FAILED\n\n");

552 
	}
}

564 
pög_li°
 *

565 
	$add_to_pög_li°
(c⁄° *
pög_addªss
, 
pög_li°
 *
the_pög_li°
)

567 
pög_li°
 *
√w
 = 
	`ˇŒoc
(1, (ping_list));

568 i‡(!
√w
) {

569 
	`Ârötf
(
°dîr
, "DYN GW: Out of memory!\n");

570 
	`ﬁ§_sy¶og
(
OLSR_LOG_ERR
, "DYN GW: Out of memory!\n");

571 
	`exô
(0);

573 
√w
->
pög_addªss
 = 
	`°rdup
(ping_address);

574 
√w
->
√xt
 = 
the_pög_li°
;

575  
√w
;

576 
	}
}

588 
h«_li°
 *

589 
	$add_to_h«_li°
(
h«_li°
 *
li°_roŸ
, 
ﬁ§_ù_addr
 *
h«_addr
, 
uöt8_t
 
h«_¥efixÀn
)

591 
h«_li°
 *
√w
 = 
	`ˇŒoc
(1, (hna_list));

592 i‡(
√w
 =
NULL
) {

593 
	`Ârötf
(
°dîr
, "DYN GW: Out of memory!\n");

594 
	`ﬁ§_sy¶og
(
OLSR_LOG_ERR
, "DYN GW: Out of memory!\n");

595 
	`exô
(0);

598 
√w
->
h«_addr
.
v4
 = hna_addr->v4;

599 
√w
->
h«_¥efixÀn
 = hna_prefixlen;

600 
√w
->
h«_added
 = 
Ál£
;

601 
√w
->
√xt
 = 
li°_roŸ
;

602  
√w
;

603 
	}
}

613 
h«_group
 *

614 
	$add_to_h«_group
(
h«_group
 *
li°_roŸ
)

616 
h«_group
 *
√w
 = 
	`ˇŒoc
(1, (hna_group));

617 i‡(
√w
 =
NULL
) {

618 
	`Ârötf
(
°dîr
, "DYN GW: Out of memory!\n");

619 
	`ﬁ§_sy¶og
(
OLSR_LOG_ERR
, "DYN GW: Out of memory!\n");

620 
	`exô
(0);

623 
√w
->
√xt
 = 
li°_roŸ
;

624  
√w
;

625 
	}
}

628 #ifde‡
WIN32


633 
__°dˇŒ


634 
	$ThªadWøµî
(*
P¨a
)

636 
ThªadP¨a
 *
Ca°
;

637 *(*
Func
) (*);

638 *
Arg
;

640 
Ca°
 = (
ThªadP¨a
 *)
P¨a
;

642 
Func
 = 
Ca°
->Func;

643 
Arg
 = 
Ca°
->Arg;

645 
	`HópFªe
(
	`GëPro˚ssHóp
(), 0, 
P¨a
);

647 
	`Func
(
Arg
);

650 
	}
}

653 
±hªad_¸óã
(
HANDLE
 * 
H™d
, *
Aâr
 
__©åibuã__
 ((
unu£d
)), *(*
Func
Ë(*), *
Arg
)

655 
ThªadP¨a
 *
	gP¨a
;

656 
	gThªadId
;

658 
	gP¨a
 = 
HópAŒoc
(
GëPro˚ssHóp
(), 0, (
ThªadP¨a
));

660 i‡(
	gP¨a
 =
NULL
)

663 
	gP¨a
->
	gFunc
 = 
Func
;

664 
	gP¨a
->
	gArg
 = 
Arg
;

666 *
	gH™d
 = 
Cª©eThªad
(
NULL
, 0, 
ThªadWøµî
, 
P¨a
, 0, &
ThªadId
);

668 i‡(*
	gH™d
 =
NULL
)

675 
±hªad_kûl
(
HANDLE
 
H™d
, 
Sig
 
__©åibuã__
 ((
unu£d
)))

677 i‡(!
Tîmö©eThªad
(
H™d
, 0))

684 
±hªad_muãx_öô
(
HANDLE
 * 
H™d
, *
Aâr
 
__©åibuã__
 ((
unu£d
)))

686 *
	gH™d
 = 
Cª©eMuãx
(
NULL
, 
FALSE
, NULL);

688 i‡(*
	gH™d
 =
NULL
)

695 
	$±hªad_muãx_lock
(
HANDLE
 * 
H™d
)

697 i‡(
	`WaôF‹SögÀObje˘
(*
H™d
, 
INFINITE
Ë=
WAIT_FAILED
)

701 
	}
}

704 
	$±hªad_muãx_u∆ock
(
HANDLE
 * 
H™d
)

706 i‡(!
	`Rñó£Muãx
(*
H™d
))

710 
	}
}

	@lib/dyn_gw/src/olsrd_dyn_gw.h

42 #i‚de‡
_OLSRD_PLUGIN_TEST


43 
	#_OLSRD_PLUGIN_TEST


	)

45 
	~"ﬁ§d_∂ugö.h
"

46 
	~"∂ugö_utû.h
"

50 
	#INET_ADDR
 0

	)

51 
	#INET_MASK
 0

	)

53 
	#PROCENTRY_ROUTE
 "/¥oc/√t/rouã"

	)

55 
	#DEFAULT_HNA_CHECK_INTERVAL
 1000

	)

56 
	#DEFAULT_PING_CHECK_INTERVAL
 5

	)

58 
ﬁ§d_∂ugö_öô
();

60 
ﬁ§d_∂ugö_öãrÁ˚_vîsi⁄
();

62 
ﬁ§d_gë_∂ugö_∑ømëîs
(c⁄° 
ﬁ§d_∂ugö_∑ømëîs
 **
∑øms
, *
size
);

	@lib/dyn_gw/src/olsrd_plugin.c

42 
	~"ﬁ§d_∂ugö.h
"

43 
	~"ﬁ§d_dyn_gw.h
"

44 
	~<°dio.h
>

46 
	#PLUGIN_NAME
 "OLSRD dy«mi¯g©ewayÖlugö"

	)

47 
	#PLUGIN_VERSION
 "0.4"

	)

48 
	#PLUGIN_AUTHOR
 "V¨iou†¨ti°s"

	)

49 
	#MOD_DESC
 
PLUGIN_NAME
 " " 
PLUGIN_VERSION
 " by " 
PLUGIN_AUTHOR


	)

50 
	#PLUGIN_INTERFACE_VERSION
 5

	)

56 
	$my_öô
(Ë
	`__©åibuã__
 ((
c⁄°ru˘‹
));

64 
	$ﬁ§d_∂ugö_öãrÁ˚_vîsi⁄
()

66  
PLUGIN_INTERFACE_VERSION
;

67 
	}
}

73 
	$my_öô
()

76 
	`¥ötf
("%s\n", 
MOD_DESC
);

77 
	}
}

	@lib/dyn_gw_plain/src/olsrd_dyn_gw_plain.c

41 
	~"ﬁ§d_dyn_gw_∂aö.h
"

42 
	~"ﬁ§_ty≥s.h
"

43 
	~"ùˇlc.h
"

44 
	~"scheduÀr.h
"

45 
	~"ﬁ§.h
"

47 
	~<°dio.h
>

48 
	~<°rög.h
>

49 
	~<°dlib.h
>

50 
	~<√t/rouã.h
>

51 
	~<uni°d.h
>

52 
	~<î∫o.h
>

54 
	#DEBUGLEV
 1

	)

56 
	#PLUGIN_INTERFACE_VERSION
 5

	)

58 
	ghas_öë_g©eway
;

65 
	$ﬁ§d_∂ugö_öãrÁ˚_vîsi⁄
()

67  
PLUGIN_INTERFACE_VERSION
;

68 
	}
}

70 c⁄° 
ﬁ§d_∂ugö_∑ømëîs
 
	g∂ugö_∑ømëîs
[] = {

74 
	$ﬁ§d_gë_∂ugö_∑ømëîs
(c⁄° 
ﬁ§d_∂ugö_∑ømëîs
 **
∑øms
, *
size
)

76 *
∑øms
 = 
∂ugö_∑ømëîs
;

77 *
size
 = (
∂ugö_∑ømëîs
) / (*plugin_parameters);

78 
	}
}

85 
	$ﬁ§d_∂ugö_öô
()

87 
	`¥ötf
("OLSRD dyn_gw_plainÖlugin by Sven-Ola\n");

89 
gw_√t
.
v4
.
s_addr
 = 
INET_NET
;

90 
gw_√tmask
.
v4
.
s_addr
 = 
INET_PREFIX
;

92 
has_öë_g©eway
 = 0;

95 
	`ù_¥efix_li°_ªmove
(&
ﬁ§_˙f
->
h«_íåõs
, &
gw_√t
, 
	`ﬁ§_√tmask_to_¥efix
(&
gw_√tmask
))) {

96 
	`ﬁ§_¥ötf
(
DEBUGLEV
, "HNA Internet gateway deleted\n");

100 
	`ﬁ§_°¨t_timî
(3 * 
MSEC_PER_SEC
, 0, 
OLSR_TIMER_PERIODIC
, &
ﬁ§_evít
, 
NULL
, 0);

103 
	}
}

106 
	$check_gw
(
ﬁ§_ù_addr
 *
√t
, ﬁ§_ù_add∏*
mask
)

108 
buff
[1024], 
iÁ˚
[17];

109 
uöt32_t
 
g©e_addr
, 
de°_addr
, 
√tmask
;

110 
iÊags
;

111 
num
, 
mëric
, 
ªf˙t
, 
u£
;

112 
ªtvÆ
 = 0;

114 
FILE
 *
Â
 = 
	`f›í
(
PROCENTRY_ROUTE
, "r");

116 i‡(!
Â
) {

117 
	`≥º‹
(
PROCENTRY_ROUTE
);

118 
	`ﬁ§_¥ötf
(
DEBUGLEV
, "INET (IPv4)Çot configured inÅhis system.\n");

122 
	`ªwöd
(
Â
);

128 
	`fgës
(
buff
, 1023, 
Â
)) {

129 
num
 =

130 
	`ssˇnf
(
buff
, "%16†%128X %128X %X %d %d %d %128X \n", 
iÁ˚
, &
de°_addr
, &
g©e_addr
, &
iÊags
, &
ªf˙t
, &
u£
, &
mëric
,

131 &
√tmask
);

133 i‡(
num
 < 8) {

148 (
iÊags
 & 
RTF_UP
Ë&& (
mëric
 =0Ë&& (
√tmask
 =
mask
->
v4
.
s_addr
Ë&& (
de°_addr
 =
√t
->v4.s_addr)) {

149 
	`ﬁ§_¥ötf
(
DEBUGLEV
, "INTERNET GATEWAY VIA %†dëe˘ed i¿routögÅabÀ.\n", 
iÁ˚
);

150 
ªtvÆ
 = 1;

155 
	`f˛o£
(
Â
);

157 i‡(
ªtvÆ
 == 0) {

158 
	`ﬁ§_¥ötf
(
DEBUGLEV
, "No Internet GWs detected...\n");

161  
ªtvÆ
;

162 
	}
}

169 
ﬁ§_evít
(*
foo
 
__©åibuã__
 ((
unu£d
)))

171 
	gªs
 = 
check_gw
(&
gw_√t
, &
gw_√tmask
);

172 i‡(1 =
ªs
 && 0 =
has_öë_g©eway
) {

173 
ﬁ§_¥ötf
(
DEBUGLEV
, "Adding OLSRÜocal HNAÉntry for Internet\n");

174 
ù_¥efix_li°_add
(&
ﬁ§_˙f
->
h«_íåõs
, &
gw_√t
, 
ﬁ§_√tmask_to_¥efix
(&
gw_√tmask
));

175 
	ghas_öë_g©eway
 = 1;

176 } i‡(0 =
ªs
 && 1 =
has_öë_g©eway
) {

178 
ù_¥efix_li°_ªmove
(&
ﬁ§_˙f
->
h«_íåõs
, &
gw_√t
, 
ﬁ§_√tmask_to_¥efix
(&
gw_√tmask
))) {

179 
ﬁ§_¥ötf
(
DEBUGLEV
, "Removing OLSRÜocal HNAÉntry for Internet\n");

181 
	ghas_öë_g©eway
 = 0;

	@lib/dyn_gw_plain/src/olsrd_dyn_gw_plain.h

41 #i‚de‡
_OLSRD_PLUGIN_TEST


42 
	#_OLSRD_PLUGIN_TEST


	)

44 
	~"ﬁ§d_∂ugö.h
"

45 
	~"ﬁ§.h
"

47 
	#INET_NET
 0

	)

48 
	#INET_PREFIX
 0

	)

50 
	#PROCENTRY_ROUTE
 "/¥oc/√t/rouã"

	)

52 
ﬁ§_ù_addr
 
	ggw_√t
;

53 
ﬁ§_ù_addr
 
	ggw_√tmask
;

55 
check_gw
(
ﬁ§_ù_addr
 *
√t
, ﬁ§_ù_add∏*
mask
);

58 
ﬁ§_evít
(*
foo
);

	@lib/httpinfo/src/admin_interface.c

46 
	~"ﬁ§.h
"

47 
	~"ﬁ§d_hâpöfo.h
"

48 
	~"ﬁ§_cfg.h
"

49 
	~"admö_öãrÁ˚.h
"

50 
	~"√t_ﬁ§.h
"

51 
	~"ùˇlc.h
"

53 
	~<°dio.h
>

54 
	~<°rög.h
>

55 
	~<°dlib.h
>

58 
	#•rötf
 
√t•rötf


	)

59 
	#NETDIRECT


	)

62 c⁄° 
	gadmö_basic_£âög_öt
[] =

64 c⁄° 
	gadmö_basic_£âög_Êﬂt
[] =

66 c⁄° 
	gadmö_basic_£âög_°rög
[] =

69 c⁄° 
	gadmö_‰ame_¥ﬁog
[] =

73 c⁄° 
	gadmö_‰ame_mid
[] =

84 c⁄° 
	gadmö_‰ame_ïûog
[] =

88 
buûd_admö_body
(*
buf
, 
uöt32_t
 
bufsize
 
__©åibuã__
 ((
unu£d
)))

90 
	gsize
 = 0;

91 
	gsize
 +
¢¥ötf
(&
buf
[
size
], 
bufsize
 - size, 
admö_‰ame_¥ﬁog
);

93 
	gsize
 +
¢¥ötf
(&
buf
[
size
], 
bufsize
 - size, "<tr>\n");

95 
	gsize
 +
¢¥ötf
(&
buf
[
size
], 
bufsize
 - size, 
admö_basic_£âög_öt
, "DebugÜevñ:", "debug_Àvñ", 2, 
ﬁ§_˙f
->
debug_Àvñ
);

96 
	gsize
 +
¢¥ötf
(&
buf
[
size
], 
bufsize
 - size, 
admö_basic_£âög_Êﬂt
, "PﬁÃ©e:", "pﬁÃ©e", 4, 
ﬁ§_˙f
->
pﬁÃ©e
);

97 
	gsize
 +
¢¥ötf
(&
buf
[
size
], 
bufsize
 - size, 
admö_basic_£âög_°rög
, "TOS:", "tos", 6, "TBD");

99 
	gsize
 +
¢¥ötf
(&
buf
[
size
], 
bufsize
 - size, "</tr>\n" "<tr>\n");

101 
	gsize
 +=

102 
¢¥ötf
(&
buf
[
size
], 
bufsize
 - size, 
admö_basic_£âög_öt
, "TCÑedund™cy:", "tc_ªdund™cy", 1, 
ﬁ§_˙f
->
tc_ªdund™cy
);

103 
	gsize
 +
¢¥ötf
(&
buf
[
size
], 
bufsize
 - size, 
admö_basic_£âög_öt
, "MPR covîage:", "m¥_covîage", 1, 
ﬁ§_˙f
->
m¥_covîage
);

104 
	gsize
 +
¢¥ötf
(&
buf
[
size
], 
bufsize
 - size, 
admö_basic_£âög_öt
, "Wûlög√ss:", "wûlög√ss", 1, 
ﬁ§_˙f
->
wûlög√ss
);

106 
	gsize
 +
¢¥ötf
(&
buf
[
size
], 
bufsize
 - size, "</tr>\n" "<tr>\n");

108 i‡(
	gﬁ§_˙f
->
	gu£_hy°îesis
) {

109 
	gsize
 +=

110 
¢¥ötf
(&
buf
[
size
], 
bufsize
 - size, 
admö_basic_£âög_Êﬂt
, "Hyst scaling:", "hyst_scaling", 4,

111 
ﬁ§_˙f
->
hy°îesis_∑øm
.
sˇlög
);

113 
	gsize
 +=

114 
¢¥ötf
(&
buf
[
size
], 
bufsize
 - size, 
admö_basic_£âög_Êﬂt
, "LowerÅhr:", "hyst_lower", 4,

115 
ﬁ§_˙f
->
hy°îesis_∑øm
.
thr_low
);

116 
	gsize
 +=

117 
¢¥ötf
(&
buf
[
size
], 
bufsize
 - size, 
admö_basic_£âög_Êﬂt
, "UpperÅhr:", "hyst_upper", 4,

118 
ﬁ§_˙f
->
hy°îesis_∑øm
.
thr_high
);

120 
	gsize
 +
¢¥ötf
(&
buf
[
size
], 
bufsize
 - size, "<td>Hysteresis disabled</td>\n");

123 
	gsize
 +
¢¥ötf
(&
buf
[
size
], 
bufsize
 - size, "</tr>\n" "<tr>\n");

125 i‡(
	gﬁ§_˙f
->
	glq_Àvñ
) {

126 
	gsize
 +
¢¥ötf
(&
buf
[
size
], 
bufsize
 - size, 
admö_basic_£âög_öt
, "LQÜevñ:", "lq_Àvñ", 1, 
ﬁ§_˙f
->
lq_Àvñ
);

127 
	gsize
 +
¢¥ötf
(&
buf
[
size
], 
bufsize
 - size, 
admö_basic_£âög_Êﬂt
, "LQágög:", "lq_agög", 2, 
ﬁ§_˙f
->
lq_agög
);

129 
	gsize
 +
¢¥ötf
(&
buf
[
size
], 
bufsize
 - size, "<td>LQ disabled</td>\n");

132 
	gsize
 +
¢¥ötf
(&
buf
[
size
], 
bufsize
 - size, "</tr>\n" "<tr>\n");

133 
	gsize
 +
¢¥ötf
(&
buf
[
size
], 
bufsize
 - size, "</tr>\n");

135 
	gsize
 +
¢¥ötf
(&
buf
[
size
], 
bufsize
 - size, 
admö_‰ame_mid
);

137 i‡(
	gﬁ§_˙f
->
	gh«_íåõs
) {

138 
ù_¥efix_li°
 *
	gh«
;

139 
	gh«
 = 
ﬁ§_˙f
->
h«_íåõs
; h«; h« = 
h«
->
√xt
) {

140 
ùaddr_°r
 
√tbuf
;

141 
ﬁ§_ù_to_°rög
(&
√tbuf
, &
h«
->
√t
.
¥efix
);

142 
	gsize
 +=

143 
¢¥ötf
(&
buf
[
size
], 
bufsize
 - size,

145 
√tbuf
.
buf
, 
h«
->
√t
.
¥efix_Àn
,Çetbuf.buf, hna->net.prefix_len);

148 
	gsize
 +
¢¥ötf
(&
buf
[
size
], 
bufsize
 - size, 
admö_‰ame_ïûog
);

149  
	gsize
;

152 #ifde‡
ADMIN_INTERFACE


155 
	$¥o˚ss_∑øm
(*
key
, *
vÆue
)

157 
ﬁ§_ù_addr
 
cuº_h«_√t
;

158 
boﬁ
 
cuº_h«_ok
 = 
Ál£
;

160 i‡(!
	`°rcmp
(
key
, "debug_level")) {

161 
ivÆ
 = 
	`©oi
(
vÆue
);

162 i‡((
ivÆ
 < 0) || (ival > 9))

165 
ﬁ§_˙f
->
debug_Àvñ
 = 
ivÆ
;

169 i‡(!
	`°rcmp
(
key
, "tc_redundancy")) {

170 
ivÆ
 = 
	`©oi
(
vÆue
);

171 i‡((
ivÆ
 < 0) || (ival > 3))

174 
ﬁ§_˙f
->
tc_ªdund™cy
 = 
ivÆ
;

178 i‡(!
	`°rcmp
(
key
, "mpr_coverage")) {

179 
ivÆ
 = 
	`©oi
(
vÆue
);

180 i‡(
ivÆ
 < 0)

183 
ﬁ§_˙f
->
m¥_covîage
 = 
ivÆ
;

187 i‡(!
	`°rcmp
(
key
, "willingness")) {

188 
ivÆ
 = 
	`©oi
(
vÆue
);

189 i‡((
ivÆ
 < 0) || (ival > 7))

192 
ﬁ§_˙f
->
wûlög√ss
 = 
ivÆ
;

196 i‡(!
	`°rcmp
(
key
, "lq_level")) {

197 
ivÆ
 = 
	`©oi
(
vÆue
);

198 i‡((
ivÆ
 < 0) || (ival > 2))

201 
ﬁ§_˙f
->
lq_Àvñ
 = 
ivÆ
;

205 i‡(!
	`°rcmp
(
key
, "lq_wsize")) {

206 
ivÆ
 = 
	`©oi
(
vÆue
);

207 i‡((
ivÆ
 < 0) || (ival > 10))

210 
ﬁ§_˙f
->
lq_wsize
 = 
ivÆ
;

214 i‡(!
	`°rcmp
(
key
, "hyst_scaling")) {

215 
fvÆ
 = 1.1;

216 
	`ssˇnf
(
vÆue
, "%f", &
fvÆ
);

217 i‡((
fvÆ
 < 0.0) || (fval > 1.0))

220 
ﬁ§_˙f
->
hy°îesis_∑øm
.
sˇlög
 = 
fvÆ
;

224 i‡(!
	`°rcmp
(
key
, "hyst_scaling")) {

225 
fvÆ
 = 1.1;

226 
	`ssˇnf
(
vÆue
, "%f", &
fvÆ
);

227 i‡((
fvÆ
 < 0.0) || (fval > 1.0))

230 
ﬁ§_˙f
->
hy°îesis_∑øm
.
sˇlög
 = 
fvÆ
;

234 i‡(!
	`°rcmp
(
key
, "hyst_lower")) {

235 
fvÆ
 = 1.1;

236 
	`ssˇnf
(
vÆue
, "%f", &
fvÆ
);

237 i‡((
fvÆ
 < 0.0) || (fval > 1.0))

240 
ﬁ§_˙f
->
hy°îesis_∑øm
.
thr_low
 = 
fvÆ
;

244 i‡(!
	`°rcmp
(
key
, "hyst_upper")) {

245 
fvÆ
 = 1.1;

246 
	`ssˇnf
(
vÆue
, "%f", &
fvÆ
);

247 i‡((
fvÆ
 < 0.0) || (fval > 1.0))

250 
ﬁ§_˙f
->
hy°îesis_∑øm
.
thr_high
 = 
fvÆ
;

254 i‡(!
	`°rcmp
(
key
, "pollrate")) {

255 
fvÆ
 = 1.1;

256 
	`ssˇnf
(
vÆue
, "%f", &
fvÆ
);

257 i‡((
fvÆ
 < 0.0) || (fval > 1.0))

260 
ﬁ§_˙f
->
pﬁÃ©e
 = 
fvÆ
;

264 i‡(!
	`°rcmp
(
key
, "hna_new_net")) {

265 i‡(
	`öë_±⁄
(
ﬁ§_˙f
->
ùsize
, 
vÆue
, &
cuº_h«_√t
.
v4
) == 0) {

266 
	`Ârötf
(
°dîr
, "Faûed c⁄vîtögÇew HNAÇë %s\n", 
vÆue
);

269 
cuº_h«_ok
 = 
åue
;

273 i‡(!
	`°rcmp
(
key
, "hna_new_netmask")) {

274 
ö_addr
 
ö
;

275 
uöt8_t
 
¥efixÀn
;

277 i‡(!
cuº_h«_ok
)

280 
cuº_h«_ok
 = 
Ál£
;

282 i‡(
	`öë_©⁄
(
vÆue
, &
ö
) == 0) {

283 
	`Ârötf
(
°dîr
, "Faûed c⁄vîtögÇew HNAÇëmask %s\n", 
vÆue
);

286 
¥efixÀn
 = 
	`√tmask_to_¥efix
((
uöt8_t
 *Ë& 
ö
, 
ﬁ§_˙f
->
ùsize
);

287 i‡(
¥efixÀn
 =
UCHAR_MAX
) {

288 
	`Ârötf
(
°dîr
, "Faûed c⁄vîtögÇew HNAÇëmask %s\n", 
vÆue
);

291 
	`ù_¥efix_li°_add
(&
ﬁ§_˙f
->
h«_íåõs
, &
cuº_h«_√t
, 
¥efixÀn
);

295 i‡(!
	`°∫cmp
(
key
, "dñ_h«", 7Ë&& !
	`°rcmp
(
vÆue
, "on")) {

296 
ö_addr
 
√t
, 
mask
;

297 
ù_√t
[16], 
ù_mask
[16];

298 
£≥øt‹
 = 0;

299 
uöt8_t
 
¥efixÀn
;

301 
key
[7 + 
£≥øt‹
] != '*') {

302 
£≥øt‹
++;

304 
	`mem˝y
(
ù_√t
, &
key
[7], 
£≥øt‹
);

305 
ù_√t
[
£≥øt‹
] = 0;

306 
	`mem˝y
(
ù_mask
, &
key
[7 + 
£≥øt‹
 + 1], 16);

307 
	`ﬁ§_¥ötf
(1, "Dñëög HNA %s/%s\n", 
ù_√t
, 
ù_mask
);

309 i‡(
	`öë_©⁄
(
ù_√t
, &
√t
) == 0) {

310 
	`Ârötf
(
°dîr
, "Faûed c⁄vîtög HNAÇë %†f‹ dñëi⁄\n", 
ù_√t
);

314 i‡(
	`öë_©⁄
(
ù_mask
, &
mask
) == 0) {

315 
	`Ârötf
(
°dîr
, "Faûed c⁄vîtög HNAÇëmask %†f‹ dñëi⁄\n", 
ù_mask
);

318 
¥efixÀn
 = 
	`√tmask_to_¥efix
((
uöt8_t
 *Ë& 
mask
, 
ﬁ§_˙f
->
ùsize
);

319 i‡(
¥efixÀn
 =
UCHAR_MAX
) {

320 
	`Ârötf
(
°dîr
, "Faûed c⁄vîtögÇew HNAÇëmask %s\n", 
vÆue
);

323 
	`ù_¥efix_li°_add
(&
ﬁ§_˙f
->
h«_íåõs
, &
cuº_h«_√t
, 
¥efixÀn
);

330 1, 
admö_basic_£âög_°rög
, "TOS:", "tos", 6, "TBD"}

333 
	}
}

336 
¥o˚ss_£t_vÆues
(*
d©a
, 
uöt32_t
 
d©a_size
, *
buf
, uöt32_à
bufsize
 
__©åibuã__
 ((
unu£d
)))

338 
	gsize
 = 0;

339 
	gvÆ_°¨t
, 
	gkey_°¨t
;

340 
uöt32_t
 
	gi
;

342 
	gsize
 +
•rötf
(
buf
, "<html>\n<head><title>olsr.org httpinfoÖlugin</title></head>\n<body>\n");

344 
	gkey_°¨t
 = 0;

345 
	gvÆ_°¨t
 = 0;

347 
	gi
 = 0; i < 
	gd©a_size
; i++) {

348 i‡(
	gd©a
[
i
] == '=') {

349 
d©a
[
i
] = '\0';

350 
	gvÆ_°¨t
 = 
i
 + 1;

353 i‡(
	gd©a
[
i
] == '&') {

354 
d©a
[
i
] = '\0';

355 i‡(!
¥o˚ss_∑øm
(&
d©a
[
key_°¨t
], &d©a[
vÆ_°¨t
])) {

356 
	gsize
 +=

357 
¢¥ötf
(&
buf
[
size
], 
bufsize
 - size, "<h2>FAILED PROCESSING!</h2><br>Key: %†VÆue: %s<br>\n", &
d©a
[
key_°¨t
],

358 &
d©a
[
vÆ_°¨t
]);

362 
	gkey_°¨t
 = 
i
 + 1;

366 i‡(!
¥o˚ss_∑øm
(&
d©a
[
key_°¨t
], &d©a[
vÆ_°¨t
])) {

367 
	gsize
 +=

368 
¢¥ötf
(&
buf
[
size
], 
bufsize
 - size, "<b>FAILED PROCESSING!</b><br>Key: %†VÆue: %s<br>\n", &
d©a
[
key_°¨t
],

369 &
d©a
[
vÆ_°¨t
]);

373 
	gsize
 +=

374 
¢¥ötf
(&
buf
[
size
], 
bufsize
 - size,

376 
	gsize
 +
¢¥ötf
(&
buf
[
size
], 
bufsize
 - size, "\n</body>\n</html>\n");

378  
	gsize
;

	@lib/httpinfo/src/admin_interface.h

46 #i‚de‡
ADMIN_INTERFACE_H


47 
	#ADMIN_INTERFACE_H


	)

49 
buûd_admö_body
(*, 
uöt32_t
);

51 
¥o˚ss_£t_vÆues
(*, 
uöt32_t
, *, uint32_t);

53 
¥o˚ss_∑øm
(*, *);

	@lib/httpinfo/src/gfx.h

47 #i‚de‡
_GFX_H


48 
	#_GFX_H


	)

50 
	gÁvic⁄_ico
[] = {

171 
	glogo_gif
[] = {

408 
	ggøylöe_gif
[] = {

	@lib/httpinfo/src/olsrd_httpinfo.c

46 
	~<°dio.h
>

47 
	~<°rög.h
>

48 
	~<°dlib.h
>

49 
	~<uni°d.h
>

50 
	~<î∫o.h
>

51 #ifde‡
WIN32


52 
	~<io.h
>

54 
	~<√tdb.h
>

57 
	~"ﬁ§.h
"

58 
	~"ﬁ§_cfg.h
"

59 
	~"öãrÁ˚s.h
"

60 
	~"ﬁ§_¥Ÿocﬁ.h
"

61 
	~"√t_ﬁ§.h
"

62 
	~"lök_£t.h
"

63 
	~"ùˇlc.h
"

64 
	~"lq_∂ugö.h
"

65 
	~"comm⁄/autobuf.h
"

67 
	~"ﬁ§d_hâpöfo.h
"

68 
	~"admö_öãrÁ˚.h
"

69 
	~"gfx.h
"

71 #ifde‡
OS


72 #unde‡
OS


75 #ifde‡
WIN32


76 
	#˛o£
(
x
Ë
	`˛o£sockë
(x)

	)

77 
	#OS
 "Wödows"

	)

79 #ifde‡
löux


80 
	#OS
 "GNU/Löux"

	)

82 #i‡
deföed
 
__FªeBSD__
 || deföed 
__FªeBSD_kî√l__


83 
	#OS
 "FªeBSD"

	)

86 #i‚de‡
OS


87 
	#OS
 "Undeföed"

	)

90 
	gc›yright_°rög
[] 
__©åibuã__
 ((
unu£d
)) =

93 
	#MAX_CLIENTS
 3

	)

95 
	#MAX_HTTPREQ_SIZE
 (1024 * 10)

	)

97 
	#DEFAULT_TCP_PORT
 1978

	)

99 
	#HTML_BUFSIZE
 (1024 * 4000)

	)

101 
	#FRAMEWIDTH
 (
ªsﬁve_ù_addªs£s
 ? 900 : 800)

	)

103 
	#FILENREQ_MATCH
(
ªq
, 
fûíame
) \

104 !
	`°rcmp
(
ªq
, 
fûíame
) || \

105 (
	`°æí
(
ªq
Ë&& !
	`°rcmp
(&ªq[1], 
fûíame
))

	)

107 c⁄° 
	ghâpöfo_css
[] =

132 (*
	tbuûd_body_ˇŒback
Ë(
	tautobuf
 *);

134 
	sèb_íåy
 {

135 c⁄° *
èb_œbñ
;

136 c⁄° *
fûíame
;

137 
buûd_body_ˇŒback
 
buûd_body_cb
;

138 
boﬁ
 
di•œy_èb
;

141 
	s°©ic_bö_fûe_íåy
 {

142 c⁄° *
fûíame
;

143 *
d©a
;

144 
d©a_size
;

147 
	s°©ic_txt_fûe_íåy
 {

148 c⁄° *
fûíame
;

149 c⁄° *
d©a
;

152 
	sdy«mic_fûe_íåy
 {

153 c⁄° *
fûíame
;

154 (*
¥o˚ss_d©a_cb
Ë(*, 
uöt32_t
, *, uint32_t);

157 
	`gë_hâp_sockë
();

159 
	`buûd_èbs
(
autobuf
 *, );

161 
	`∑r£_hâp_ªque°
(
fd
, *, );

163 
	`buûd_hâp_hódî
(
hâp_hódî_ty≥
, 
boﬁ
, 
uöt32_t
, *, uint32_t);

165 
	`buûd_‰ame
(
autobuf
 *, c⁄° *, c⁄° *, , 
buûd_body_ˇŒback
 
‰ame_body_cb
);

167 
	`buûd_rouãs_body
(
autobuf
 *);

169 
	`buûd_c⁄fig_body
(
autobuf
 *);

171 
	`buûd_√igh_body
(
autobuf
 *);

173 
	`buûd_t›o_body
(
autobuf
 *);

175 
	`buûd_mid_body
(
autobuf
 *);

177 
	`buûd_nodes_body
(
autobuf
 *);

179 
	`buûd_Æl_body
(
autobuf
 *);

181 
	`buûd_about_body
(
autobuf
 *);

183 
	`buûd_cfgfûe_body
(
autobuf
 *);

185 
	`check_Ælowed_ù
(c⁄° 
Ælowed_√t
 *c⁄° , c⁄° 
ﬁ§_ù_addr
 *const );

187 
	`buûd_ù_txt
(
autobuf
 *, c⁄° 
boﬁ
 
w™t_lök
, c⁄° *c⁄° 
ùaddr°r
, c⁄° 
¥efix_Àn
);

189 
	`buûd_ùaddr_lök
(
autobuf
 *, c⁄° 
boﬁ
 
w™t_lök
, c⁄° 
ﬁ§_ù_addr
 *c⁄° 
ùaddr
,

190 c⁄° 
¥efix_Àn
);

191 
	`£˘i⁄_tôÀ
(
autobuf
 *, c⁄° *
tôÀ
);

193 
	`hâpöfo_wrôe_d©a
(*
foo
);

195 
timevÆ
 
°¨t_time
;

196 
hâp_°©s
 
°©s
;

197 
hâp_sockë
;

199 *
outbuf„r
[
MAX_CLIENTS
];

200 
size_t
 
outbuf„r_size
[
MAX_CLIENTS
];

201 
size_t
 
outbuf„r_wrôãn
[
MAX_CLIENTS
];

202 
outbuf„r_sockë
[
MAX_CLIENTS
];

203 
outbuf„r_cou¡
;

205 
timî_íåy
 *
wrôëimî_íåy
;

208 
	$√t•rötf
(*
°r
, c⁄° *
f‹m©
, ...Ë
	`__©åibuã__
 ((
	`f‹m©
(
¥ötf
, 2, 3)));

209 
√t•rötf_dúe˘
 = 0;

210 
√t•rötf_îr‹
 = 0;

211 
	#•rötf
 
√t•rötf


	)

212 
	#NETDIRECT


	)

215 c⁄° 
èb_íåy
 
èb_íåõs
[] = {

216 {"C⁄figuøti⁄", "c⁄fig", 
buûd_c⁄fig_body
, 
åue
},

217 {"Rouãs", "rouãs", 
buûd_rouãs_body
, 
åue
},

218 {"Löks/T›ﬁogy", "nodes", 
buûd_nodes_body
, 
åue
},

219 {"AŒ", "Æl", 
buûd_Æl_body
, 
åue
},

220 #ifde‡
ADMIN_INTERFACE


221 {"Admö", "admö", 
buûd_admö_body
, 
åue
},

223 {"About", "about", 
buûd_about_body
, 
åue
},

224 {"FOO", "cfgfûe", 
buûd_cfgfûe_body
, 
Ál£
},

225 {
NULL
, NULL, NULL, 
Ál£
}

226 
	}
};

228 c⁄° 
°©ic_bö_fûe_íåy
 
	g°©ic_bö_fûes
[] = {

229 {"Ávic⁄.ico", 
Ávic⁄_ico
, (favicon_ico)}

231 {"logo.gif", 
logo_gif
, (logo_gif)}

233 {"gøylöe.gif", 
gøylöe_gif
, (grayline_gif)}

235 {
NULL
, NULL, 0}

238 c⁄° 
°©ic_txt_fûe_íåy
 
	g°©ic_txt_fûes
[] = {

239 {"hâpöfo.css", 
hâpöfo_css
},

240 {
NULL
, NULL}

243 #ifde‡
ADMIN_INTERFACE


244 c⁄° 
dy«mic_fûe_íåy
 
	gdy«mic_fûes
[] = {

245 {"£t_vÆues", 
¥o˚ss_£t_vÆues
},

246 {
NULL
, NULL}

251 
	$gë_hâp_sockë
(
p‹t
)

253 
sockaddr_ö
 
sock_ö
;

254 
uöt32_t
 
yes
 = 1;

257 
s
 = 
	`sockë
(
AF_INET
, 
SOCK_STREAM
, 0);

258 i‡(
s
 == -1) {

259 
	`ﬁ§_¥ötf
(1, "(HTTPINFO)sockë %s\n", 
	`°ªº‹
(
î∫o
));

263 i‡(
	`£tsock›t
(
s
, 
SOL_SOCKET
, 
SO_REUSEADDR
, (*)&
yes
, (yes)) < 0) {

264 
	`ﬁ§_¥ötf
(1, "(HTTPINFO)SO_REUSEADDR faûed %s\n", 
	`°ªº‹
(
î∫o
));

265 
	`˛o£
(
s
);

272 
	`mem£t
(&
sock_ö
, 0, (sock_in));

273 
sock_ö
.
sö_Ámûy
 = 
AF_INET
;

274 
sock_ö
.
sö_addr
.
s_addr
 = 
hâpöfo_li°í_ù
.
v4
.s_addr;

275 
sock_ö
.
sö_p‹t
 = 
	`ht⁄s
(
p‹t
);

278 i‡(
	`böd
(
s
, (
sockaddr
 *)&
sock_ö
, (sock_in)) == -1) {

279 
	`ﬁ§_¥ötf
(1, "(HTTPINFOËböd faûed %s\n", 
	`°ªº‹
(
î∫o
));

280 
	`˛o£
(
s
);

285 i‡(
	`li°í
(
s
, 1) == -1) {

286 
	`ﬁ§_¥ötf
(1, "(HTTPINFOËli°í faûed %s\n", 
	`°ªº‹
(
î∫o
));

287 
	`˛o£
(
s
);

291  
s
;

292 
	}
}

301 
	$ﬁ§d_∂ugö_öô
()

304 
	`gëtimeofday
(&
°¨t_time
, 
NULL
);

307 
hâp_sockë
 = 
	`gë_hâp_sockë
(
hâp_p‹t
 !0 ? hâp_p‹à: 
DEFAULT_TCP_PORT
);

309 i‡(
hâp_sockë
 < 0) {

310 
	`Ârötf
(
°dîr
, "(HTTPINFO) couldÇot initialize HTTP socket\n");

311 
	`exô
(0);

315 
	`add_ﬁ§_sockë
(
hâp_sockë
, &
∑r£_hâp_ªque°
, 
NULL
, NULL, 
SP_PR_READ
);

318 
	}
}

322 
∑r£_hâp_ªque°
(
fd
, *
d©a
 
__©åibuã__
 ((
unu£d
)), 
Êags
 __attribute__ ((unused)))

324 
sockaddr_ö
 
	gpö
;

325 
autobuf
 
	gbody_abuf
 = { 0, 0, 
NULL
 };

326 
sockÀn_t
 
	gaddæí
;

327 
	ghódî_buf
[
MAX_HTTPREQ_SIZE
];

328 
	gªq_ty≥
[11];

329 
	gfûíame
[251];

330 
	ghâp_vîsi⁄
[11];

331 
	g˛õ¡_sockë
;

332 
size_t
 
	ghódî_Àngth
 = 0;

333 
size_t
 
	gc
 = 0;

334 
	gr
 = 1;

335 #ifde‡
löux


336 
timevÆ
 
	gtimeout
 = { 0, 200 };

339 i‡(
	goutbuf„r_cou¡
 >
MAX_CLIENTS
) {

340 
ﬁ§_¥ötf
(1, "(HTTPINFO) maximumÇumber of connectionÑeached\n");

344 
	gaddæí
 = (
sockaddr_ö
);

345 
	g˛õ¡_sockë
 = 
ac˚±
(
fd
, (
sockaddr
 *)&
pö
, &
addæí
);

346 i‡(
	g˛õ¡_sockë
 == -1) {

347 
ﬁ§_¥ötf
(1, "(HTTPINFOËac˚±: %s\n", 
°ªº‹
(
î∫o
));

348 
	g˛o£_c⁄√˘i⁄
;

351 #ifde‡
löux


352 i‡(
£tsock›t
(
˛õ¡_sockë
, 
SOL_SOCKET
, 
SO_RCVTIMEO
, &
timeout
, (timeout)) < 0) {

353 
ﬁ§_¥ötf
(1, "(HTTPINFO)SO_RCVTIMEO faûed %s\n", 
°ªº‹
(
î∫o
));

354 
	g˛o£_c⁄√˘i⁄
;

357 i‡(
£tsock›t
(
˛õ¡_sockë
, 
SOL_SOCKET
, 
SO_SNDTIMEO
, &
timeout
, (timeout)) < 0) {

358 
ﬁ§_¥ötf
(1, "(HTTPINFO)SO_SNDTIMEO faûed %s\n", 
°ªº‹
(
î∫o
));

359 
	g˛o£_c⁄√˘i⁄
;

362 i‡(!
check_Ælowed_ù
(
Ælowed_√ts
, (
ﬁ§_ù_addr
 *)&
pö
.
sö_addr
.
s_addr
)) {

363 
ùaddr_°r
 
	g°rbuf
;

364 
ﬁ§_¥ötf
(0, "HTTPÑequest fromÇon-allowed host %s!\n",

365 
ﬁ§_ù_to_°rög
(&
°rbuf
, (
ﬁ§_ù_addr
 *)&
pö
.
sö_addr
.
s_addr
));

366 
	g˛o£_c⁄√˘i⁄
;

369 
mem£t
(
hódî_buf
, 0, (header_buf));

371 (
	gr
 = 
ªcv
(
˛õ¡_sockë
, &
hódî_buf
[
c
], 1, 0)Ë> 0 && (
	gc
 < (
	ghódî_buf
) - 1)) {

372 
	gc
++;

374 i‡((
	gc
 > 3 && !
°rcmp
(&
hódî_buf
[
c
 - 4], "\r\n\r\n")) || (c > 1 && !strcmp(&header_buf[c - 2], "\n\n")))

378 i‡(
	gr
 < 0) {

379 
ﬁ§_¥ötf
(1, "(HTTPINFO) FailedÅoÑeceive data from client!\n");

380 
	g°©s
.
	gîr_hôs
++;

381 
	g˛o£_c⁄√˘i⁄
;

385 i‡(
ssˇnf
(
hódî_buf
, "%10†%250†%10s\n", 
ªq_ty≥
, 
fûíame
, 
hâp_vîsi⁄
) != 3) {

387 i‡(
ssˇnf
(
hódî_buf
, "%10†%250s\n", 
ªq_ty≥
, 
fûíame
) != 2) {

388 
ﬁ§_¥ötf
(1, "(HTTPINFOËEº‹Ö¨sögÑeque° %s!\n", 
hódî_buf
);

389 
	g°©s
.
	gîr_hôs
++;

390 
	g˛o£_c⁄√˘i⁄
;

394 
ﬁ§_¥ötf
(1, "Reque°: %s\nfûe: %s\nVîsi⁄: %s\n\n", 
ªq_ty≥
, 
fûíame
, 
hâp_vîsi⁄
);

395 
abuf_öô
(&
body_abuf
, 102400);

397 i‡(!
°rcmp
(
ªq_ty≥
, "POST")) {

398 #ifde‡
ADMIN_INTERFACE


399 
	gi
 = 0;

400 
	gdy«mic_fûes
[
i
].
	gfûíame
) {

401 
¥ötf
("POST checkög %s\n", 
dy«mic_fûes
[
i
].
fûíame
);

402 i‡(
FILENREQ_MATCH
(
fûíame
, 
dy«mic_fûes
[
i
].filename)) {

403 
uöt32_t
 
	g∑øm_size
;

405 
	g°©s
.
	gok_hôs
++;

407 
	g∑øm_size
 = 
ªcv
(
˛õ¡_sockës
[
cuº_˛õ¡s
], 
hódî_buf
, (header_buf) - 1, 0);

409 
	ghódî_buf
[
∑øm_size
] = '\0';

410 
¥ötf
("Dy«mi¯ªad %d byãs\n", 
∑øm_size
);

413 
	gbody_Àngth
 +
dy«mic_fûes
[
i
].
¥o˚ss_d©a_cb
(
hódî_buf
, 
∑øm_size
, &
body_buf
[
body_Àngth
], (body_buf) - body_length);

414 
	ghódî_Àngth
 = 
buûd_hâp_hódî
(
HTTP_OK
, 
åue
, 
body_Àngth
, 
hódî_buf
, (header_buf));

415 
	g£nd_hâp_d©a
;

417 
	gi
++;

421 
abuf_puts
(&
body_abuf
, 
HTTP_400_MSG
);

422 
	g°©s
.
	gûl_hôs
++;

423 
	ghódî_Àngth
 = 
buûd_hâp_hódî
(
HTTP_BAD_REQ
, 
åue
, 
body_abuf
.
Àn
, 
hódî_buf
, (header_buf));

424 } i‡(!
°rcmp
(
ªq_ty≥
, "GET")) {

425 
	gi
 = 0;

427 
	gi
 = 0; 
	g°©ic_bö_fûes
[
i
].
	gfûíame
; i++) {

428 i‡(
FILENREQ_MATCH
(
fûíame
, 
°©ic_bö_fûes
[
i
].filename)) {

433 i‡(
	g°©ic_bö_fûes
[
i
].
	gfûíame
) {

434 
	g°©s
.
	gok_hôs
++;

435 
abuf_mem˝y
(&
body_abuf
, 
°©ic_bö_fûes
[
i
].
d©a
, sètic_bö_fûes[i].
d©a_size
);

436 
	ghódî_Àngth
 = 
buûd_hâp_hódî
(
HTTP_OK
, 
Ál£
, 
body_abuf
.
Àn
, 
hódî_buf
, (header_buf));

437 
	g£nd_hâp_d©a
;

440 
	gi
 = 0;

441 
	g°©ic_txt_fûes
[
i
].
	gfûíame
) {

442 i‡(
FILENREQ_MATCH
(
fûíame
, 
°©ic_txt_fûes
[
i
].filename)) {

445 
	gi
++;

448 i‡(
	g°©ic_txt_fûes
[
i
].
	gfûíame
) {

449 
	g°©s
.
	gok_hôs
++;

450 
abuf_puts
(&
body_abuf
, 
°©ic_txt_fûes
[
i
].
d©a
);

451 
	ghódî_Àngth
 = 
buûd_hâp_hódî
(
HTTP_OK
, 
Ál£
, 
body_abuf
.
Àn
, 
hódî_buf
, (header_buf));

452 
	g£nd_hâp_d©a
;

455 
	gi
 = 0;

456 i‡(
°æí
(
fûíame
) > 1) {

457 
	gèb_íåõs
[
i
].
	gfûíame
) {

458 i‡(
FILENREQ_MATCH
(
fûíame
, 
èb_íåõs
[
i
].filename)) {

461 
	gi
++;

465 i‡(
	gèb_íåõs
[
i
].
	gfûíame
) {

466 #ifde‡
NETDIRECT


467 
	ghódî_Àngth
 = 
buûd_hâp_hódî
(
HTTP_OK
, 
åue
, 
body_Àngth
, 
hódî_buf
, (header_buf));

468 
	gr
 = 
£nd
(
˛õ¡_sockës
[
cuº_˛õ¡s
], 
hódî_buf
, 
hódî_Àngth
, 0);

469 i‡(
	gr
 < 0) {

470 
ﬁ§_¥ötf
(1, "(HTTPINFO) Failed sending dataÅo client!\n");

471 
	g˛o£_c⁄√˘i⁄
;

473 
	g√t•rötf_îr‹
 = 0;

474 
	g√t•rötf_dúe˘
 = 1;

476 
abuf_≠≥ndf
(&
body_abuf
,

488 "</tbody>\n" "</èbÀ>\n", 
FRAMEWIDTH
);

490 
buûd_èbs
(&
body_abuf
, 
i
);

491 
buûd_‰ame
(&
body_abuf
, "CuºíàRouãs", "rouãs", 
FRAMEWIDTH
, 
èb_íåõs
[
i
].
buûd_body_cb
);

493 
	g°©s
.
	gok_hôs
++;

495 
abuf_≠≥ndf
(&
body_abuf
,

499 #ifde‡
NETDIRECT


500 
	g√t•rötf_dúe˘
 = 1;

501 
	g˛o£_c⁄√˘i⁄
;

503 
	ghódî_Àngth
 = 
buûd_hâp_hódî
(
HTTP_OK
, 
åue
, 
body_abuf
.
Àn
, 
hódî_buf
, (header_buf));

504 
	g£nd_hâp_d©a
;

508 
	g°©s
.
	gûl_hôs
++;

509 
abuf_puts
(&
body_abuf
, 
HTTP_404_MSG
);

510 
	ghódî_Àngth
 = 
buûd_hâp_hódî
(
HTTP_BAD_FILE
, 
åue
, 
body_abuf
.
Àn
, 
hódî_buf
, (header_buf));

513 
abuf_puts
(&
body_abuf
, 
HTTP_404_MSG
);

514 
	g°©s
.
	gûl_hôs
++;

515 
	ghódî_Àngth
 = 
buûd_hâp_hódî
(
HTTP_BAD_REQ
, 
åue
, 
body_abuf
.
Àn
, 
hódî_buf
, (header_buf));

518 
	g£nd_hâp_d©a
:

519 i‡(
hódî_Àngth
 + 
body_abuf
.
Àn
 > 0) {

520 
outbuf„r
[
outbuf„r_cou¡
] = 
ﬁ§_mÆloc
(
hódî_Àngth
 + 
body_abuf
.
Àn
, "http output buffer");

521 
	goutbuf„r_size
[
outbuf„r_cou¡
] = 
hódî_Àngth
 + 
body_abuf
.
Àn
;

522 
	goutbuf„r_wrôãn
[
outbuf„r_cou¡
] = 0;

523 
	goutbuf„r_sockë
[
outbuf„r_cou¡
] = 
˛õ¡_sockë
;

525 
mem˝y
(
outbuf„r
[
outbuf„r_cou¡
], 
hódî_buf
, 
hódî_Àngth
);

526 i‡(
	gbody_abuf
.
	gÀn
 > 0) {

527 
mem˝y
((
outbuf„r
[
outbuf„r_cou¡
]Ë+ 
hódî_Àngth
, 
body_abuf
.
buf
, body_abuf.
Àn
);

529 
	goutbuf„r_cou¡
++;

531 i‡(
	goutbuf„r_cou¡
 == 1) {

532 
wrôëimî_íåy
 = 
ﬁ§_°¨t_timî
(100, 0, 
OLSR_TIMER_PERIODIC
, &
hâpöfo_wrôe_d©a
, 
NULL
, 0);

535 
abuf_‰ì
(&
body_abuf
);

538 
	g˛o£_c⁄√˘i⁄
:

539 
abuf_‰ì
(&
body_abuf
);

540 
˛o£
(
˛õ¡_sockë
);

544 
hâpöfo_wrôe_d©a
(*
foo
 
__©åibuã__
 ((
unu£d
))) {

545 
fd_£t
 
	g£t
;

546 
	gªsu…
, 
	gi
, 
	gj
, 
	gmax
;

547 
timevÆ
 
	gtv
;

549 
FD_ZERO
(&
£t
);

550 
	gmax
 = 0;

551 
	gi
=0; i<
	goutbuf„r_cou¡
; i++) {

553 
FD_SET
(()
outbuf„r_sockë
[
i
], &
£t
);

554 i‡(
	goutbuf„r_sockë
[
i
] > 
	gmax
) {

555 
	gmax
 = 
outbuf„r_sockë
[
i
];

559 
	gtv
.
	gtv_£c
 = 0;

560 
	gtv
.
	gtv_u£c
 = 0;

562 
	gªsu…
 = 
£À˘
(
max
 + 1, 
NULL
, &
£t
, NULL, &
tv
);

563 i‡(
	gªsu…
 <= 0) {

567 
	gi
=0; i<
	goutbuf„r_cou¡
; i++) {

568 i‡(
FD_ISSET
(
outbuf„r_sockë
[
i
], &
£t
)) {

569 
	gªsu…
 = 
wrôe
(
outbuf„r_sockë
[
i
], 
outbuf„r
[i] + 
outbuf„r_wrôãn
[i], 
outbuf„r_size
[i] - outbuffer_written[i]);

570 i‡(
	gªsu…
 > 0) {

571 
	goutbuf„r_wrôãn
[
i
] +
ªsu…
;

574 i‡(
	gªsu…
 <0 || 
outbuf„r_wrôãn
[
i
] =
outbuf„r_size
[i]) {

576 
˛o£
(
outbuf„r_sockë
[
i
]);

577 
‰ì
 (
outbuf„r
[
i
]);

579 
	gj
=
i
+1; j<
	goutbuf„r_cou¡
; j++) {

580 
	goutbuf„r
[
j
-1] = 
outbuf„r
[j];

581 
	goutbuf„r_size
[
j
-1] = 
outbuf„r_size
[j];

582 
	goutbuf„r_sockë
[
j
-1] = 
outbuf„r_sockë
[j];

583 
	goutbuf„r_wrôãn
[
j
-1] = 
outbuf„r_wrôãn
[j];

585 
	goutbuf„r_cou¡
--;

589 i‡(
	goutbuf„r_cou¡
 == 0) {

590 
ﬁ§_°›_timî
(
wrôëimî_íåy
);

595 
	$buûd_hâp_hódî
(
hâp_hódî_ty≥
 
ty≥
, 
boﬁ
 
is_html
, 
uöt32_t
 
msgsize
, *
buf
, uöt32_à
bufsize
)

597 
time_t
 
cuºtime
;

598 c⁄° *
h
;

599 
size
;

601 
ty≥
) {

602 
HTTP_BAD_REQ
:

603 
h
 = 
HTTP_400
;

605 
HTTP_BAD_FILE
:

606 
h
 = 
HTTP_404
;

610 
h
 = 
HTTP_200
;

613 
size
 = 
	`¢¥ötf
(
buf
, 
bufsize
, "%s", 
h
);

616 
	`time
(&
cuºtime
);

617 
size
 +
	`°r·ime
(&
buf
[size], 
bufsize
 - size, "D©e: %a, %d %b %Y %H:%M:%S GMT\r\n", 
	`loˇ…ime
(&
cuºtime
));

620 
size
 +
	`¢¥ötf
(&
buf
[size], 
bufsize
 - size, "Sîvî: %†%†%s\r\n", 
PLUGIN_NAME
, 
PLUGIN_VERSION
, 
HTTP_VERSION
);

623 
size
 +
	`¢¥ötf
(&
buf
[size], 
bufsize
 - size, "Connection: closed\r\n");

626 
size
 +
	`¢¥ötf
(&
buf
[size], 
bufsize
 - size, "C⁄ã¡-ty≥:Åext/%s\r\n", 
is_html
 ? "html" : "plain");

629 i‡(
msgsize
 > 0) {

630 
size
 +
	`¢¥ötf
(&
buf
[size], 
bufsize
 - size, "C⁄ã¡-Àngth: %i\r\n", 
msgsize
);

636 
size
 +
	`¢¥ötf
(&
buf
[size], 
bufsize
 - size, "Cache-Control:Ço-cache\r\n");

638 i‡(!
is_html
) {

639 
size
 +
	`¢¥ötf
(&
buf
[size], 
bufsize
 - size, "Accept-Ranges: bytes\r\n");

642 
size
 +
	`¢¥ötf
(&
buf
[size], 
bufsize
 - size, "\r\n");

644 
	`ﬁ§_¥ötf
(1, "HEADER:\n%s", 
buf
);

646  
size
;

647 
	}
}

650 
	$buûd_èbs
(
autobuf
 *
abuf
, 
a˘ive
)

652 
èbs
 = 0;

654 
	`abuf_≠≥ndf
(
abuf
,

656 "<å bgcﬁ‹=\"#ffffff\"><td>\n" "<u»id=\"èb«v\">\n", 
FRAMEWIDTH
);

657 
èbs
 = 0; 
èb_íåõs
[èbs].
èb_œbñ
;Åabs++) {

658 i‡(!
èb_íåõs
[
èbs
].
di•œy_èb
) {

661 
	`abuf_≠≥ndf
(
abuf
, "<li><®hªf=\"%s\"%s>%s</a></li>\n", 
èb_íåõs
[
èbs
].
fûíame
,

662 
èbs
 =
a˘ive
 ? " cœss=\"a˘ive\"" : "", 
èb_íåõs
[èbs].
èb_œbñ
);

664 
	`abuf_≠≥ndf
(
abuf
, "</ul>\n" "</td></tr>\n" "<tr><td>\n");

665 
	}
}

671 
	$ﬁ§_∂ugö_exô
()

673 
Ælowed_√t
 *
a
, *
√xt
;

674 i‡(
hâp_sockë
 >= 0) {

675 
	`CLOSE
(
hâp_sockë
);

678 
a
 = 
Ælowed_√ts
;á !
NULL
;á = 
√xt
) {

679 
√xt
 = 
a
->next;

681 
	`‰ì
(
a
);

683 
	}
}

686 
	$£˘i⁄_tôÀ
(
autobuf
 *
abuf
, c⁄° *
tôÀ
)

688 
	`abuf_≠≥ndf
(
abuf
,

690 
tôÀ
);

691 
	}
}

694 
buûd_‰ame
(
autobuf
 *
abuf
, c⁄° *
tôÀ
 
__©åibuã__
 ((
unu£d
)), c⁄° *
the_lök


695 
__©åibuã__
 ((
unu£d
)), 
width
 __©åibuã__ ((unu£d)), 
buûd_body_ˇŒback
 
‰ame_body_cb
)

697 
abuf_puts
(
abuf
, "<div id=\"maintable\">\n");

698 
‰ame_body_cb
(
abuf
);

699 
abuf_puts
(
abuf
, "</div>\n");

703 
	$fmt_hªf
(
autobuf
 *
abuf
, c⁄° *c⁄° 
ùaddr
)

705 
	`abuf_≠≥ndf
(
abuf
, "<®hªf=\"hâp://%s:%d/Æl\">", 
ùaddr
, 
hâp_p‹t
);

706 
	}
}

709 
	$buûd_ù_txt
(
autobuf
 *
abuf
, c⁄° 
boﬁ
 
¥öt_lök
, c⁄° *c⁄° 
ùaddr°r
, c⁄° 
¥efix_Àn
)

711 i‡(
¥öt_lök
) {

712 
	`fmt_hªf
(
abuf
, 
ùaddr°r
);

715 
	`abuf_puts
(
abuf
, 
ùaddr°r
);

717 i‡(
¥efix_Àn
 !-1 &&Öªfix_À¿!
ﬁ§_˙f
->
max∂í
) {

718 
	`abuf_≠≥ndf
(
abuf
, "/%d", 
¥efix_Àn
);

721 i‡(
¥öt_lök
) {

722 
	`abuf_puts
(
abuf
, "</a>");

724 
	}
}

727 
	$buûd_ùaddr_lök
(
autobuf
 *
abuf
, c⁄° 
boﬁ
 
w™t_lök
, c⁄° 
ﬁ§_ù_addr
 *c⁄° 
ùaddr
,

728 c⁄° 
¥efix_Àn
)

730 
ùaddr_°r
 
ùaddr°r
;

731 c⁄° 
ho°ít
 *c⁄° 
hp
 =

732 #i‚de‡
WIN32


733 
ªsﬁve_ù_addªs£s
 ? 
	`gëho°byaddr
(
ùaddr
, 
ﬁ§_˙f
->
ùsize
,

734 
ﬁ§_˙f
->
ù_vîsi⁄
) :

736 
NULL
;

738 c⁄° 
¥öt_lök
 = 
w™t_lök
 && (
¥efix_Àn
 =-1 ||Öªfix_À¿=
ﬁ§_˙f
->
max∂í
Ë&& (ﬁ§_˙f->
ù_vîsi⁄
 =
AF_INET
);

739 
	`ﬁ§_ù_to_°rög
(&
ùaddr°r
, 
ùaddr
);

741 
	`abuf_puts
(
abuf
, "<td>");

742 
	`buûd_ù_txt
(
abuf
, 
¥öt_lök
, 
ùaddr°r
.
buf
, 
¥efix_Àn
);

743 
	`abuf_puts
(
abuf
, "</td>");

745 i‡(
ªsﬁve_ù_addªs£s
) {

746 i‡(
hp
) {

747 
	`abuf_puts
(
abuf
, "<td>(");

748 i‡(
¥öt_lök
) {

749 
	`fmt_hªf
(
abuf
, 
ùaddr°r
.
buf
);

751 
	`abuf_puts
(
abuf
, 
hp
->
h_«me
);

752 i‡(
¥öt_lök
) {

753 
	`abuf_puts
(
abuf
, "</a>");

755 
	`abuf_puts
(
abuf
, ")</td>");

757 
	`abuf_puts
(
abuf
, "<td/>");

760 
	}
}

762 
	#buûd_ùaddr_wôh_lök
(
buf
, 
ùaddr
, 
∂í
) \

763 
	`buûd_ùaddr_lök
((
buf
), 
åue
, (
ùaddr
), (
∂í
))

	)

764 
	#buûd_ùaddr_no_lök
(
buf
, 
ùaddr
, 
∂í
) \

765 
	`buûd_ùaddr_lök
((
buf
), 
Ál£
, (
ùaddr
), (
∂í
))

	)

768 
	$buûd_rouã
(
autobuf
 *
abuf
, c⁄° 
π_íåy
 *
π
)

770 
lqãxtbuf„r
 
lqbuf„r
;

772 
	`abuf_puts
(
abuf
, "<tr>");

773 
	`buûd_ùaddr_wôh_lök
(
abuf
, &
π
->
π_d°
.
¥efix
,Ñt->π_d°.
¥efix_Àn
);

774 
	`buûd_ùaddr_wôh_lök
(
abuf
, &
π
->
π_be°
->
πp_√xth›
.
g©eway
, -1);

776 
	`abuf_≠≥ndf
(
abuf
, "<td>%d</td>", 
π
->
π_be°
->
πp_mëric
.
h›s
);

777 
	`abuf_≠≥ndf
(
abuf
, "<td>%s</td>",

778 
	`gë_lökco°_ãxt
(
π
->
π_be°
->
πp_mëric
.
co°
, 
åue
, &
lqbuf„r
));

779 
	`abuf_≠≥ndf
(
abuf
, "<td>%s</td></tr>\n",

780 
	`if_ifwôhödex_«me
(
π
->
π_be°
->
πp_√xth›
.
iif_ödex
));

781 
	}
}

784 
	$buûd_rouãs_body
(
autobuf
 *
abuf
)

786 
π_íåy
 *
π
;

787 c⁄° *
cﬁ•™
 = 
ªsﬁve_ù_addªs£s
 ? " colspan=\"2\"" : "";

788 
	`£˘i⁄_tôÀ
(
abuf
, "OLSR Routes in Kernel");

789 
	`abuf_≠≥ndf
(
abuf
,

791 
cﬁ•™
, colspan);

794 
	`OLSR_FOR_ALL_RT_ENTRIES
(
π
) {

795 
	`buûd_rouã
(
abuf
, 
π
);

796 } 
	`OLSR_FOR_ALL_RT_ENTRIES_END
(
π
);

798 
	`abuf_puts
(
abuf
, "</table>\n");

799 
	}
}

802 
	$buûd_c⁄fig_body
(
autobuf
 *
abuf
)

804 c⁄° 
ﬁ§_if
 *
ifs
;

805 c⁄° 
∂ugö_íåy
 *
≥¡ry
;

806 c⁄° 
∂ugö_∑øm
 *
µ¨am
;

807 
ùaddr_°r
 
maöaddrbuf
;

809 
	`abuf_≠≥ndf
(
abuf
, "Vîsi⁄: %†(buûà⁄ %†⁄ %s)\n<br>", 
ﬁ§d_vîsi⁄
, 
buûd_d©e
, 
buûd_ho°
);

810 
	`abuf_≠≥ndf
(
abuf
, "OS: %s\n<br>", 
OS
);

813 c⁄° 
time_t
 
cuºtime
 = 
	`time
(
NULL
);

815 
	`abuf_°r·ime
(
abuf
, "SystemÅime: <em>%a, %d %b %Y %H:%M:%S</em><br>",

816 
	`loˇ…ime
(&
cuºtime
));

820 
timevÆ
 
now
, 
u±ime
;

821 
hours
, 
mös
, 
days
;

822 
	`gëtimeofday
(&
now
, 
NULL
);

823 
	`timîsub
(&
now
, &
°¨t_time
, &
u±ime
);

825 
days
 = 
u±ime
.
tv_£c
 / 86400;

826 
u±ime
.
tv_£c
 %= 86400;

827 
hours
 = 
u±ime
.
tv_£c
 / 3600;

828 
u±ime
.
tv_£c
 %= 3600;

829 
mös
 = 
u±ime
.
tv_£c
 / 60;

830 
u±ime
.
tv_£c
 %= 60;

832 
	`abuf_puts
(
abuf
, "Olsrd uptime: <em>");

833 i‡(
days
) {

834 
	`abuf_≠≥ndf
(
abuf
, "%d day(sË", 
days
);

836 
	`abuf_≠≥ndf
(
abuf
, "%02d hour†%02d möuã†%02d sec⁄ds</em><br/>\n", 
hours
, 
mös
, ()
u±ime
.
tv_£c
);

839 
	`abuf_≠≥ndf
(
abuf
, "HTTP sèts(ok/dyn/îr‹/ûÀgÆ): <em>%d/%d/%d/%d</em><br>\n", 
°©s
.
ok_hôs
,

840 
°©s
.
dyn_hôs
, sèts.
îr_hôs
, sèts.
ûl_hôs
);

842 
	`abuf_puts
(
abuf
,

845 
	`abuf_puts
(
abuf
, "<h2>Variables</h2>\n");

847 
	`abuf_puts
(
abuf
, "<table width=\"100%%\" border=\"0\">\n<tr>");

849 
	`abuf_≠≥ndf
(
abuf
, "<td>Maináddress: <strong>%s</strong></td>\n",

850 
	`ﬁ§_ù_to_°rög
(&
maöaddrbuf
, &
ﬁ§_˙f
->
maö_addr
));

851 
	`abuf_≠≥ndf
(
abuf
, "<td>IP vîsi⁄: %d</td>\n", 
ﬁ§_˙f
->
ù_vîsi⁄
 =
AF_INET
 ? 4 : 6);

852 
	`abuf_≠≥ndf
(
abuf
, "<td>DebugÜevñ: %d</td>\n", 
ﬁ§_˙f
->
debug_Àvñ
);

853 
	`abuf_≠≥ndf
(
abuf
, "<td>FIB Mërics: %s</td>\n", 
FIB_METRIC_TXT
[
ﬁ§_˙f
->
fib_mëric
]);

855 
	`abuf_puts
(
abuf
, "</tr>\n<tr>\n");

857 
	`abuf_≠≥ndf
(
abuf
, "<td>PﬁÃ©e: %0.2f</td>\n", 
ﬁ§_˙f
->
pﬁÃ©e
);

858 
	`abuf_≠≥ndf
(
abuf
, "<td>TCÑedund™cy: %d</td>\n", 
ﬁ§_˙f
->
tc_ªdund™cy
);

859 
	`abuf_≠≥ndf
(
abuf
, "<td>MPR covîage: %d</td>\n", 
ﬁ§_˙f
->
m¥_covîage
);

860 
	`abuf_≠≥ndf
(
abuf
, "<td>NATÅhªshﬁd: %f</td>\n", 
ﬁ§_˙f
->
lq_«t_thªsh
);

862 
	`abuf_puts
(
abuf
, "</tr>\n<tr>\n");

864 
	`abuf_≠≥ndf
(
abuf
, "<td>Fisheye: %s</td>\n", 
ﬁ§_˙f
->
lq_fish
 ? "Enabled" : "Disabled");

865 
	`abuf_≠≥ndf
(
abuf
, "<td>TOS: 0x%04x</td>\n", 
ﬁ§_˙f
->
tos
);

866 
	`abuf_≠≥ndf
(
abuf
, "<td>RtTabÀ: 0x%04x/%d</td>\n", 
ﬁ§_˙f
->
π_èbÀ
, olsr_cnf->rt_table);

867 
	`abuf_≠≥ndf
(
abuf
, "<td>RtTabÀDeÁu…: 0x%04x/%d</td>\n", 
ﬁ§_˙f
->
π_èbÀ_deÁu…
,

868 
ﬁ§_˙f
->
π_èbÀ_deÁu…
);

869 
	`abuf_≠≥ndf
(
abuf
, "<td>RtTabÀTu¬ñ: 0x%04x/%d</td>\n", 
ﬁ§_˙f
->
π_èbÀ_tu¬ñ
,

870 
ﬁ§_˙f
->
π_èbÀ_tu¬ñ
);

871 
	`abuf_≠≥ndf
(
abuf
, "<td>Wûlög√ss: %d %s</td>\n", 
ﬁ§_˙f
->
wûlög√ss
,

872 
ﬁ§_˙f
->
wûlög√ss_auto
 ? "(auto)" : "");

874 i‡(
ﬁ§_˙f
->
lq_Àvñ
 == 0) {

875 
	`abuf_≠≥ndf
(
abuf
, "</tr>\n<tr>\n" "<td>Hysteresis: %s</td>\n",

876 
ﬁ§_˙f
->
u£_hy°îesis
 ? "Enabled" : "Disabled");

877 i‡(
ﬁ§_˙f
->
u£_hy°îesis
) {

878 
	`abuf_≠≥ndf
(
abuf
, "<td>Hy° sˇlög: %0.2f</td>\n", 
ﬁ§_˙f
->
hy°îesis_∑øm
.
sˇlög
);

879 
	`abuf_≠≥ndf
(
abuf
, "<td>Hy°Üowî/uµî: %0.2f/%0.2f</td>\n", 
ﬁ§_˙f
->
hy°îesis_∑øm
.
thr_low
,

880 
ﬁ§_˙f
->
hy°îesis_∑øm
.
thr_high
);

884 
	`abuf_≠≥ndf
(
abuf
, "</tr>\n<tr>\n" "<td>LQÉxtension: %s</td>\n",

885 
ﬁ§_˙f
->
lq_Àvñ
 ? "Enabled" : "Disabled");

886 i‡(
ﬁ§_˙f
->
lq_Àvñ
) {

887 
	`abuf_≠≥ndf
(
abuf
, "<td>LQÜevñ: %d</td>\n" "<td>LQágög: %f</td>\n", 
ﬁ§_˙f
->
lq_Àvñ
,

888 
ﬁ§_˙f
->
lq_agög
);

890 
	`abuf_puts
(
abuf
, "</tr></table>\n");

892 
	`abuf_puts
(
abuf
, "<h2>Interfaces</h2>\n");

893 
	`abuf_puts
(
abuf
, "<table width=\"100%%\" border=\"0\">\n");

894 
ifs
 = 
ﬁ§_˙f
->
öãrÁ˚s
; if†!
NULL
; if†ifs->
√xt
) {

895 c⁄° 
öãrÁ˚
 *c⁄° 
rifs
 = 
ifs
->
öãrf
;

896 
	`abuf_≠≥ndf
(
abuf
, "<å><th cﬁ•™=\"3\">%s</th>\n", 
ifs
->
«me
);

897 i‡(!
rifs
) {

898 
	`abuf_puts
(
abuf
, "<tr><td colspan=\"3\">Status: DOWN</td></tr>\n");

902 i‡(
ﬁ§_˙f
->
ù_vîsi⁄
 =
AF_INET
) {

903 
ùaddr_°r
 
addrbuf
, 
maskbuf
, 
bˇ°buf
;

904 
	`abuf_≠≥ndf
(
abuf
, "<tr>\n" "<td>IP: %s</td>\n" "<td>MASK: %s</td>\n" "<td>BCAST: %s</td>\n" "</tr>\n",

905 
	`ù4_to_°rög
(&
addrbuf
, 
rifs
->
öt_addr
.
sö_addr
), ip4_to_°rög(&
maskbuf
,Ñifs->
öt_√tmask
.sin_addr),

906 
	`ù4_to_°rög
(&
bˇ°buf
, 
rifs
->
öt_brﬂdaddr
.
sö_addr
));

908 
ùaddr_°r
 
addrbuf
, 
maskbuf
;

909 
	`abuf_≠≥ndf
(
abuf
, "<tr>\n" "<td>IP: %s</td>\n" "<td>MCAST: %s</td>\n" "<td></td>\n" "</tr>\n",

910 
	`ù6_to_°rög
(&
addrbuf
, &
rifs
->
öt6_addr
.
sö6_addr
), ip6_to_°rög(&
maskbuf
, &rifs->
öt6_mu…addr
.sin6_addr));

912 
	`abuf_≠≥ndf
(
abuf
, "<tr>\n" "<td>MTU: %d</td>\n" "<td>WLAN: %s</td>\n" "<td>STATUS: UP</td>\n" "</tr>\n",

913 
rifs
->
öt_mtu
,Ñifs->
is_wúñess
 ? "Yes" : "No");

915 
	`abuf_puts
(
abuf
, "</table>\n");

917 
	`abuf_≠≥ndf
(
abuf
, "<em>Olsrd is configuredÅo %s ifÇo interfacesáreávailable</em><br>\n",

918 
ﬁ§_˙f
->
Ælow_no_öãrÁ˚s
 ? "runÉven" : "halt");

920 
	`abuf_puts
(
abuf
, "<h2>Plugins</h2>\n");

921 
	`abuf_puts
(
abuf
, "<table width=\"100%%\" border=\"0\"><tr><th>Name</th><th>Parameters</th></tr>\n");

922 
≥¡ry
 = 
ﬁ§_˙f
->
∂ugös
;Öíåy;Öíåy =Öíåy->
√xt
) {

923 
	`abuf_≠≥ndf
(
abuf
, "<å><td>%s</td>\n" "<td><£À˘>\n" "<›ti⁄>KEY, VALUE</›ti⁄>\n", 
≥¡ry
->
«me
);

925 
µ¨am
 = 
≥¡ry
->
∑øms
;Ö∑øm;Ö∑øm =Ö∑øm->
√xt
) {

926 
	`abuf_≠≥ndf
(
abuf
, "<›ti⁄>\"%s\", \"%s\"</›ti⁄>\n", 
µ¨am
->
key
,Ö∑øm->
vÆue
);

928 
	`abuf_puts
(
abuf
, "</select></td></tr>\n");

931 
	`abuf_puts
(
abuf
, "</table>\n");

933 
	`£˘i⁄_tôÀ
(
abuf
, "Announced HNAÉntries");

934 i‡(
ﬁ§_˙f
->
h«_íåõs
) {

935 
ù_¥efix_li°
 *
h«
;

936 
	`abuf_puts
(
abuf
, "<tr><th>Network</th></tr>\n");

937 
h«
 = 
ﬁ§_˙f
->
h«_íåõs
; h«; h« = h«->
√xt
) {

938 
ùaddr_°r
 
√tbuf
;

939 
	`abuf_≠≥ndf
(
abuf
, "<å><td>%s/%d</td></å>\n", 
	`ﬁ§_ù_to_°rög
(&
√tbuf
, &
h«
->
√t
.
¥efix
),

940 
h«
->
√t
.
¥efix_Àn
);

943 
	`abuf_puts
(
abuf
, "<tr><td></td></tr>\n");

945 
	`abuf_puts
(
abuf
, "</table>\n");

946 
	}
}

949 
	$buûd_√igh_body
(
autobuf
 *
abuf
)

951 
√ighb‹_íåy
 *
√igh
;

952 
lök_íåy
 *
the_lök
 = 
NULL
;

953 c⁄° *
cﬁ•™
 = 
ªsﬁve_ù_addªs£s
 ? " colspan=\"2\"" : "";

955 
	`£˘i⁄_tôÀ
(
abuf
, "Links");

957 
	`abuf_≠≥ndf
(
abuf
,

959 
cﬁ•™
, colspan);

960 i‡(
ﬁ§_˙f
->
lq_Àvñ
 > 0) {

961 
	`abuf_puts
(
abuf
, "<th>LinkCost</th>");

963 
	`abuf_puts
(
abuf
, "</tr>\n");

966 
	`OLSR_FOR_ALL_LINK_ENTRIES
(
the_lök
) {

967 
	`abuf_puts
(
abuf
, "<tr>");

968 
	`buûd_ùaddr_wôh_lök
(
abuf
, &
the_lök
->
loˇl_iÁ˚_addr
, -1);

969 
	`buûd_ùaddr_wôh_lök
(
abuf
, &
the_lök
->
√ighb‹_iÁ˚_addr
, -1);

970 
	`abuf_≠≥ndf
(
abuf
, "<td>%0.2f</td>", 
the_lök
->
L_lök_quÆôy
);

971 i‡(
ﬁ§_˙f
->
lq_Àvñ
 > 0) {

972 
lqãxtbuf„r
 
lqbuf„r1
, 
lqbuf„r2
;

973 
	`abuf_≠≥ndf
(
abuf
, "<td>(%sË%s</td>", 
	`gë_lök_íåy_ãxt
(
the_lök
, '/', &
lqbuf„r1
),

974 
	`gë_lökco°_ãxt
(
the_lök
->
lökco°
, 
Ál£
, &
lqbuf„r2
));

976 
	`abuf_puts
(
abuf
, "</tr>\n");

977 } 
	`OLSR_FOR_ALL_LINK_ENTRIES_END
(
the_lök
);

979 
	`abuf_puts
(
abuf
, "</table>\n");

981 
	`£˘i⁄_tôÀ
(
abuf
, "Neighbors");

982 
	`abuf_≠≥ndf
(
abuf
,

984 
cﬁ•™
);

986 
	`OLSR_FOR_ALL_NBR_ENTRIES
(
√igh
) {

988 
√ighb‹_2_li°_íåy
 *
li°_2
;

989 
th›_˙t
;

990 
	`abuf_puts
(
abuf
, "<tr>");

991 
	`buûd_ùaddr_wôh_lök
(
abuf
, &
√igh
->
√ighb‹_maö_addr
, -1);

992 
	`abuf_≠≥ndf
(
abuf
,

994 "<td>%d</td>", (
√igh
->
°©us
 =
SYM
Ë? "YES" : "NO",Çeigh->
is_m¥
 ? "YES" : "NO",

995 
	`ﬁ§_lookup_m¥s_£t
(&
√igh
->
√ighb‹_maö_addr
Ë? "YES" : "NO",Çeigh->
wûlög√ss
);

997 
	`abuf_puts
(
abuf
, "<td><select>\n" "<option>IP ADDRESS</option>\n");

999 
li°_2
 = 
√igh
->
√ighb‹_2_li°
.
√xt
, 
th›_˙t
 = 0;Üist_2 != &neigh->neighbor_2_list;Üist_2 =Üist_2->next,Åhop_cnt++) {

1000 
ùaddr_°r
 
°rbuf
;

1001 
	`abuf_≠≥ndf
(
abuf
, "<option>%s</option>\n",

1002 
	`ﬁ§_ù_to_°rög
(&
°rbuf
, &
li°_2
->
√ighb‹_2
->
√ighb‹_2_addr
));

1004 
	`abuf_≠≥ndf
(
abuf
, "</£À˘> (%d)</td></å>\n", 
th›_˙t
);

1005 } 
	`OLSR_FOR_ALL_NBR_ENTRIES_END
(
√igh
);

1007 
	`abuf_puts
(
abuf
, "</table>\n");

1008 
	}
}

1011 
	$buûd_t›o_body
(
autobuf
 *
abuf
)

1013 
tc_íåy
 *
tc
;

1014 c⁄° *
cﬁ•™
 = 
ªsﬁve_ù_addªs£s
 ? " colspan=\"2\"" : "";

1016 
	`£˘i⁄_tôÀ
(
abuf
, "Topology Entries");

1017 
	`abuf_≠≥ndf
(
abuf
, "<tr><th%s>Destination IP</th><th%s>Last Hop IP</th>",

1018 
cﬁ•™
, colspan);

1019 i‡(
ﬁ§_˙f
->
lq_Àvñ
 > 0) {

1020 
	`abuf_puts
(
abuf
, "<th>Linkcost</th>");

1022 
	`abuf_puts
(
abuf
, "</tr>\n");

1024 
	`OLSR_FOR_ALL_TC_ENTRIES
(
tc
) {

1025 
tc_edge_íåy
 *
tc_edge
;

1026 
	`OLSR_FOR_ALL_TC_EDGE_ENTRIES
(
tc
, 
tc_edge
) {

1027 i‡(
tc_edge
->
edge_öv
) {

1028 
	`abuf_puts
(
abuf
, "<tr>");

1029 
	`buûd_ùaddr_wôh_lök
(
abuf
, &
tc_edge
->
T_de°_addr
, -1);

1030 
	`buûd_ùaddr_wôh_lök
(
abuf
, &
tc
->
addr
, -1);

1031 i‡(
ﬁ§_˙f
->
lq_Àvñ
 > 0) {

1032 
lqãxtbuf„r
 
lqbuf„r1
, 
lqbuf„r2
;

1033 
	`abuf_≠≥ndf
(
abuf
, "<td>(%s) %s</td>\n",

1034 
	`gë_tc_edge_íåy_ãxt
(
tc_edge
, '/', &
lqbuf„r1
), 
	`gë_lökco°_ãxt
—c_edge->
co°
, 
Ál£
, &
lqbuf„r2
));

1036 
	`abuf_puts
(
abuf
, "</tr>\n");

1038 } 
	`OLSR_FOR_ALL_TC_EDGE_ENTRIES_END
(
tc
, 
tc_edge
);

1039 } 
	`OLSR_FOR_ALL_TC_ENTRIES_END
(
tc
);

1041 
	`abuf_puts
(
abuf
, "</table>\n");

1042 
	}
}

1045 
	$buûd_mid_body
(
autobuf
 *
abuf
)

1047 
idx
;

1048 c⁄° *
cﬁ•™
 = 
ªsﬁve_ù_addªs£s
 ? " colspan=\"2\"" : "";

1050 
	`£˘i⁄_tôÀ
(
abuf
, "MID Entries");

1051 
	`abuf_≠≥ndf
(
abuf
, "<å><th%s>Maö Addªss</th><th>Alü£s</th></å>\n", 
cﬁ•™
);

1054 
idx
 = 0; idx < 
HASHSIZE
; idx++) {

1055 
mid_íåy
 *
íåy
;

1056 
íåy
 = 
mid_£t
[
idx
].
√xt
;Éntry != &mid_set[idx];Éntry =Éntry->next) {

1057 
mid_˙t
;

1058 
mid_addªss
 *
Æüs
;

1059 
	`abuf_puts
(
abuf
, "<tr>");

1060 
	`buûd_ùaddr_wôh_lök
(
abuf
, &
íåy
->
maö_addr
, -1);

1061 
	`abuf_puts
(
abuf
, "<td><select>\n<option>IP ADDRESS</option>\n");

1063 
mid_˙t
 = 0, 
Æüs
 = 
íåy
->
Æü£s
;álü†!
NULL
;álü†Æüs->
√xt_Æüs
, mid_cnt++) {

1064 
ùaddr_°r
 
°rbuf
;

1065 
	`abuf_≠≥ndf
(
abuf
, "<›ti⁄>%s</›ti⁄>\n", 
	`ﬁ§_ù_to_°rög
(&
°rbuf
, &
Æüs
->alias));

1067 
	`abuf_≠≥ndf
(
abuf
, "</£À˘> (%d)</td></å>\n", 
mid_˙t
);

1071 
	`abuf_puts
(
abuf
, "</table>\n");

1072 
	}
}

1075 
	$buûd_nodes_body
(
autobuf
 *
abuf
)

1077 
	`buûd_√igh_body
(
abuf
);

1078 
	`buûd_t›o_body
(
abuf
);

1079 
	`buûd_mid_body
(
abuf
);

1080 
	}
}

1083 
	$buûd_Æl_body
(
autobuf
 *
abuf
)

1085 
	`buûd_c⁄fig_body
(
abuf
);

1086 
	`buûd_rouãs_body
(
abuf
);

1087 
	`buûd_√igh_body
(
abuf
);

1088 
	`buûd_t›o_body
(
abuf
);

1089 
	`buûd_mid_body
(
abuf
);

1090 
	}
}

1093 
	$buûd_about_body
(
autobuf
 *
abuf
)

1095 
	`abuf_≠≥ndf
(
abuf
,

1096 "<°r⁄g>" 
PLUGIN_NAME
 " vîsi⁄ " 
PLUGIN_VERSION
 "</strong><br/>\n" "by Andreas T&oslash;nnesen (C)2005.<br/>\n"

1098 #ifde‡
ADMIN_INTERFACE


1119 #ifde‡
ADMIN_INTERFACE


1129 "Officü»ﬁ§d homïage: <®hªf=\"hâp://www.ﬁ§.‹g/\">hâp://www.ﬁ§.‹g</a><br/>\n", 
buûd_d©e
,

1130 
buûd_ho°
);

1131 
	}
}

1134 
	$buûd_cfgfûe_body
(
autobuf
 *
abuf
)

1136 
	`abuf_puts
(
abuf
,

1139 
	`ﬁ§d_wrôe_˙f_autobuf
(
abuf
, 
ﬁ§_˙f
);

1141 
	`abuf_puts
(
abuf
, "</pre>\n<hr/>\n");

1144 
	`¥ötf
("RETURNING %d\n", 
size
);

1146 
	}
}

1149 
	$check_Ælowed_ù
(c⁄° 
Ælowed_√t
 *c⁄° 
my_Ælowed_√ts
, c⁄° 
ﬁ§_ù_addr
 *c⁄° 
addr
)

1151 c⁄° 
Ælowed_√t
 *
Æ 
;

1152 
Æ 
 = 
my_Ælowed_√ts
;áŒ¿!
NULL
;áŒ¿Æ ->
√xt
) {

1153 i‡(
	`ù_ö_√t
(
addr
, &
Æ 
->
¥efix
)) {

1158 
	}
}

	@lib/httpinfo/src/olsrd_httpinfo.h

46 #i‚de‡
_OLSRD_HTTP_INFO


47 
	#_OLSRD_HTTP_INFO


	)

49 
	~"ﬁ§d_∂ugö.h
"

50 
	~"∂ugö_utû.h
"

52 
	#HTTP_VERSION
 "HTTP/1.1"

	)

55 
	#HTTP_200
 
HTTP_VERSION
 " 200 OK\r\n"

	)

56 
	#HTTP_400
 
HTTP_VERSION
 " 400 Bad Reque°\r\n"

	)

57 
	#HTTP_404
 
HTTP_VERSION
 " 404 NŸ Found\r\n"

	)

59 
	#HTTP_400_MSG
 "<html><h1>400 - ERROR</h1><hr><i>" 
PLUGIN_NAME
 " vîsi⁄ " 
PLUGIN_VERSION
 "</i></html>"

	)

60 
	#HTTP_404_MSG
 "<html><h1>404 - ERROR,Çÿsuch fûe</h1><hr>Thi†£rvî d€†nŸ suµ‹àfûêªque°s!<br><br><i>" 
PLUGIN_NAME
 " vîsi⁄ " 
PLUGIN_VERSION
 "</i></html>"

	)

63 
	mHTTP_BAD_REQ
,

64 
	mHTTP_BAD_FILE
,

65 
	mHTTP_OK


66 } 
	thâp_hódî_ty≥
;

68 
	shâp_°©s
 {

69 
uöt32_t
 
	mok_hôs
;

70 
uöt32_t
 
	mdyn_hôs
;

71 
uöt32_t
 
	mîr_hôs
;

72 
uöt32_t
 
	mûl_hôs
;

75 
ﬁ§d_c⁄fig
 *
ﬁ§_cfg
;

76 
ﬁ§_ù_addr
 
hâpöfo_li°í_ù
;

79 
ﬁ§_∂ugö_exô
();

80 
ﬁ§_∂ugö_exô
();

83 
√t•rötf
(*
°r
, c⁄° *
f‹m©
, ...);

	@lib/httpinfo/src/olsrd_plugin.c

46 
	~"ﬁ§.h
"

47 
	~"ﬁ§d_∂ugö.h
"

48 
	~"ﬁ§_cfg.h
"

49 
	~<°dio.h
>

50 
	~<°rög.h
>

51 
	~<°dlib.h
>

52 
	~<√töë/ö.h
>

53 #i‚de‡
WIN32


54 
	~<¨∑/«me£r.h
>

57 
	~"ﬁ§d_hâpöfo.h
"

59 
	ghâp_p‹t
 = 0;

60 
	gªsﬁve_ù_addªs£s
 = 0;

61 
Ælowed_√t
 *
	gÆlowed_√ts
 = 
NULL
;

62 
ﬁ§_ù_addr
 
	ghâpöfo_li°í_ù
;

64 
	$my_öô
(Ë
	`__©åibuã__
 ((
c⁄°ru˘‹
));

65 
	$my_föi
(Ë
	`__©åibuã__
 ((
de°ru˘‹
));

67 
	`add_∂ugö_ac˚ss
(c⁄° *
vÆue
, *
d©a
, 
£t_∂ugö_∑ømëî_add⁄
);

75 
	$ﬁ§d_∂ugö_öãrÁ˚_vîsi⁄
()

77  
PLUGIN_INTERFACE_VERSION
;

78 
	}
}

84 
	$my_öô
()

87 
	`¥ötf
("%s\n", 
MOD_DESC
);

88 
hâpöfo_li°í_ù
.
v4
.
s_addr
 = 
	`ht⁄l
(
INADDR_ANY
);

89 
	}
}

95 
	$my_föi
()

103 
	`ﬁ§_∂ugö_exô
();

104 
	}
}

106 c⁄° 
ﬁ§d_∂ugö_∑ømëîs
 
	g∂ugö_∑ømëîs
[] = {

107 {.
«me
 = "p‹t",.
	g£t_∂ugö_∑ømëî
 = &
£t_∂ugö_p‹t
,.
	gd©a
 = &
hâp_p‹t
},

108 {.
	g«me
 = "ho°",.
	g£t_∂ugö_∑ømëî
 = &
add_∂ugö_ac˚ss
,.
	gd©a
 = &
Ælowed_√ts
},

109 {.
	g«me
 = "√t",.
	g£t_∂ugö_∑ømëî
 = &
add_∂ugö_ac˚ss
,.
	gd©a
 = &
Ælowed_√ts
},

110 {.
	g«me
 = "ªsﬁve",.
	g£t_∂ugö_∑ømëî
 = &
£t_∂ugö_boﬁón
,.
	gd©a
 = &
ªsﬁve_ù_addªs£s
},

114 
	$ﬁ§d_gë_∂ugö_∑ømëîs
(c⁄° 
ﬁ§d_∂ugö_∑ømëîs
 **
∑øms
, *
size
)

116 *
∑øms
 = 
∂ugö_∑ømëîs
;

117 *
size
 = (
∂ugö_∑ømëîs
) / (*plugin_parameters);

118 
	}
}

121 
add_∂ugö_ac˚ss
(c⁄° *
vÆue
, *
d©a
, 
£t_∂ugö_∑ømëî_add⁄
 
add⁄
 
__©åibuã__
 ((
unu£d
)))

123 
ﬁ§_ù_¥efix
 
	g¥efix
;

124 
Ælowed_√t
 **
	gmy_Ælowed_√ts
 = 
d©a
;

125 
Ælowed_√t
 *
	g™
;

127 i‡(
ﬁ§_°rög_to_¥efix
(
ﬁ§_˙f
->
ù_vîsi⁄
, &
¥efix
, 
vÆue
)) {

128 
Ârötf
(
°dîr
, "(HTTPINFOËunknow¿ac˚s†ª°ri˘i⁄Ö¨amëî: %s!\n", 
vÆue
);

129 
exô
(0);

132 
	g™
 = 
ﬁ§_mÆloc
((*
™
), 
__func__
);

133 i‡(
	g™
 =
NULL
) {

134 
Ârötf
(
°dîr
, "(HTTPINFO)ÑegisterÖaramÇet out of memory!\n");

135 
exô
(0);

138 
	g™
->
	g¥efix
 = 
¥efix
;

139 
	g™
->
	g√xt
 = *
my_Ælowed_√ts
;

140 *
	gmy_Ælowed_√ts
 = 
™
;

	@lib/httpinfo/src/olsrd_plugin.h

46 #i‚de‡
_OLSRD_PLUGIN_DEFS


47 
	#_OLSRD_PLUGIN_DEFS


	)

49 
	~<sys/ty≥s.h
>

50 
	~<√töë/ö.h
>

51 
	~<sys/sockë.h
>

52 
	~<sys/times.h
>

53 
	~<¨∑/öë.h
>

54 
	~<sys/time.h
>

55 
	~<time.h
>

56 
	~<m©h.h
>

58 
	~"ﬁ§_ty≥s.h
"

59 
	~"../../../§c/ﬁ§d_∂ugö.h
"

60 
	~"√ighb‹_èbÀ.h
"

61 
	~"two_h›_√ighb‹_èbÀ.h
"

62 
	~"tc_£t.h
"

63 
	~"h«_£t.h
"

64 
	~"mid_£t.h
"

65 
	~"m¥_£À˘‹_£t.h
"

66 
	~"routög_èbÀ.h
"

68 
	#PLUGIN_NAME
 "Hâpöfÿﬁ§dÖlugö"

	)

69 
	#PLUGIN_VERSION
 "0.1"

	)

70 
	#PLUGIN_AUTHOR
 "Andªa†T⁄√£n"

	)

71 
	#MOD_DESC
 
PLUGIN_NAME
 " " 
PLUGIN_VERSION
 " by " 
PLUGIN_AUTHOR


	)

72 
	#PLUGIN_INTERFACE_VERSION
 5

	)

74 
hâp_p‹t
;

75 
ªsﬁve_ù_addªs£s
;

79 
	sÆlowed_√t
 {

80 
ﬁ§_ù_¥efix
 
	m¥efix
;

81 
Ælowed_√t
 *
	m√xt
;

84 
Ælowed_√t
 *
Ælowed_√ts
;

91 
ﬁ§d_∂ugö_öô
();

93 
ﬁ§d_gë_∂ugö_∑ømëîs
(c⁄° 
ﬁ§d_∂ugö_∑ømëîs
 **
∑øms
, *
size
);

95 
ﬁ§d_∂ugö_öãrÁ˚_vîsi⁄
();

	@lib/mdns/src/Address.c

42 
	~"Addªss.h
"

45 
	~<°ddef.h
>

46 
	~<°rög.h
>

47 
	~<as£π.h
>

48 
	~<√töë/ù.h
>

49 
	~<√töë/udp.h
>

52 
	~"defs.h
"

53 
	~"ﬁ§_¥Ÿocﬁ.h
"

56 
	~"mdns.h
"

57 
	~"Nëw‹kI¡îÁ˚s.h
"

73 
	$IsMu…iˇ°
(
ﬁ§_ù_addr
 *
ùAddªss
)

75 
	`as£π
(
ùAddªss
 !
NULL
);

77  
	`IN_MULTICAST
(
	`¡ohl
(
ùAddªss
->
v4
.
s_addr
));

78 
	}
}

	@lib/mdns/src/Address.h

42 #i‚de‡
_MDNS_ADDRESS_H


43 
	#_MDNS_ADDRESS_H


	)

45 
	~"ﬁ§_ty≥s.h
"

46 
	~"ﬁ§d_∂ugö.h
"

47 
	~"öãrÁ˚s.h
"

49 
	gTBmfI¡îÁ˚
;

51 
IsMu…iˇ°
(
ﬁ§_ù_addr
 *
ùAddªss
);

	@lib/mdns/src/NetworkInterfaces.c

42 
	~"Nëw‹kI¡îÁ˚s.h
"

45 
	~<°ddef.h
>

46 
	~<sy¶og.h
>

47 
	~<°rög.h
>

48 
	~<î∫o.h
>

49 
	~<uni°d.h
>

50 
	~<sys/io˘l.h
>

51 
	~<f˙é.h
>

52 
	~<as£π.h
>

53 
	~<√t/if.h
>

54 
	~<√töë/ö.h
>

55 #i‡
deföed
 
löux


56 
	~<löux/if_ëhî.h
>

57 
	~<löux/if_∑ckë.h
>

58 
	~<löux/if_tun.h
>

60 
	~<√töë/ù.h
>

61 
	~<√töë/udp.h
>

62 
	~<°dlib.h
>

65 
	~"ﬁ§.h
"

66 
	~"ùˇlc.h
"

67 
	~"defs.h
"

68 
	~"lök_£t.h
"

69 
	~"tc_£t.h
"

70 
	~"√t_ﬁ§.h
"

71 
	~"lq_∂ugö.h
"

75 
	~"Packë.h
"

76 
	~"mdns.h
"

77 
	~"Addªss.h
"

79 
	gmy_MDNS_TTL
 = 0;

82 
TBmfI¡îÁ˚
 *
	gBmfI¡îÁ˚s
 = 
NULL
;

83 
TBmfI¡îÁ˚
 *
	gLa°BmfI¡îÁ˚
 = 
NULL
;

87 
	gHighe°Skfd
 = -1;

90 
fd_£t
 
	gI≈utSë
;

104 
	$Cª©eC≠tuªSockë
(c⁄° *
ifName
)

106 
ifIndex
 = 
	`if_«mëoödex
(
ifName
);

107 
∑ckë_mªq
 
mªq
;

108 
i‰eq
 
ªq
;

109 
sockaddr_Œ
 
bödTo
;

110 
skfd
 = 0;

112 i‡(
ﬁ§_˙f
->
ù_vîsi⁄
 =
AF_INET
) {

113 
skfd
 = 
	`sockë
(
PF_PACKET
, 
SOCK_DGRAM
, 
	`ht⁄s
(
ETH_P_IP
));

115 
skfd
 = 
	`sockë
(
PF_PACKET
, 
SOCK_DGRAM
, 
	`ht⁄s
(
ETH_P_IPV6
));

117 i‡(
skfd
 < 0) {

118 
	`BmfPEº‹
("socket(PF_PACKET)Érror");

123 
	`mem£t
(&
mªq
, 0, (
∑ckë_mªq
));

124 
mªq
.
mr_ifödex
 = 
ifIndex
;

125 
mªq
.
mr_ty≥
 = 
PACKET_MR_PROMISC
;

126 i‡(
	`£tsock›t
(
skfd
, 
SOL_PACKET
, 
PACKET_ADD_MEMBERSHIP
, &
mªq
, (mreq)) < 0) {

127 
	`BmfPEº‹
("setsockopt(PACKET_MR_PROMISC)Érror");

128 
	`˛o£
(
skfd
);

133 
	`mem£t
(&
ªq
, 0, (
i‰eq
));

134 
	`°∫˝y
(
ªq
.
i‰_«me
, 
ifName
, 
IFNAMSIZ
 - 1);

135 
ªq
.
i‰_«me
[
IFNAMSIZ
 - 1] = '\0';

136 i‡(
	`io˘l
(
skfd
, 
SIOCGIFHWADDR
, &
ªq
) < 0) {

137 
	`BmfPEº‹
("errorÑetrieving MACáddress");

138 
	`˛o£
(
skfd
);

143 
	`mem£t
(&
bödTo
, 0, (bindTo));

144 
bödTo
.
¶l_Ámûy
 = 
AF_PACKET
;

145 i‡(
ﬁ§_˙f
->
ù_vîsi⁄
 =
AF_INET
) {

146 
bödTo
.
¶l_¥Ÿocﬁ
 = 
	`ht⁄s
(
ETH_P_IP
);

148 
bödTo
.
¶l_¥Ÿocﬁ
 = 
	`ht⁄s
(
ETH_P_IPV6
);

150 
bödTo
.
¶l_ifödex
 = 
ifIndex
;

151 
	`mem˝y
(
bödTo
.
¶l_addr
, 
ªq
.
i‰_hwaddr
.
ß_d©a
, 
IFHWADDRLEN
);

152 
bödTo
.
¶l_hÆí
 = 
IFHWADDRLEN
;

154 i‡(
	`böd
(
skfd
, (
sockaddr
 *)&
bödTo
, (bindTo)) < 0) {

155 
	`BmfPEº‹
("bind()Érror");

156 
	`˛o£
(
skfd
);

161 i‡(
	`f˙é
(
skfd
, 
F_SETFL
, f˙é(skfd, 
F_GETFL
, 0Ë& ~
O_NONBLOCK
) < 0) {

162 
	`BmfPEº‹
("fcntl()Érror");

163 
	`˛o£
(
skfd
);

167 
	`add_ﬁ§_sockë
(
skfd
, &
DoMDNS
,
NULL
, NULL, 
SP_PR_READ
);

169  
skfd
;

170 
	}
}

187 
	$Cª©eI¡îÁ˚
(c⁄° *
ifName
, 
öãrÁ˚
 *
ﬁ§I¡f
)

189 
ˇ±urögSkfd
 = -1;

190 
íˇpsuœtögSkfd
 = -1;

191 
li°íögSkfd
 = -1;

192 
io˘lSkfd
;

193 
i‰eq
 
i‰
;

194 
nO≥√d
 = 0;

195 
TBmfI¡îÁ˚
 *
√wIf
 = 
	`ﬁ§_mÆloc
((TBmfInterface), "TBMFInterface (mdns)");

197 
	`as£π
(
ifName
 !
NULL
);

199 i‡(
√wIf
 =
NULL
) {

207 i‡((
ﬁ§I¡f
 =
NULL
)) {

208 
ˇ±urögSkfd
 = 
	`Cª©eC≠tuªSockë
(
ifName
);

209 i‡(
ˇ±urögSkfd
 < 0) {

210 
	`˛o£
(
íˇpsuœtögSkfd
);

211 
	`‰ì
(
√wIf
);

215 
nO≥√d
++;

220 
io˘lSkfd
 = (
ˇ±urögSkfd
 >0Ë? c≠turögSkfd : 
íˇpsuœtögSkfd
;

223 
	`mem£t
(&
i‰
, 0, (
i‰eq
));

224 
	`°∫˝y
(
i‰
.
i‰_«me
, 
ifName
, 
IFNAMSIZ
 - 1);

225 
i‰
.
i‰_«me
[
IFNAMSIZ
 - 1] = '\0';

226 i‡(
	`io˘l
(
io˘lSkfd
, 
SIOCGIFHWADDR
, &
i‰
) < 0) {

227 
	`BmfPEº‹
("io˘l(SIOCGIFHWADDRËîr‹ f‹ i¡îÁ˚ \"%s\"", 
ifName
);

228 
	`˛o£
(
ˇ±urögSkfd
);

229 
	`˛o£
(
íˇpsuœtögSkfd
);

230 
	`‰ì
(
√wIf
);

235 
√wIf
->
ˇ±urögSkfd
 = capturingSkfd;

236 
√wIf
->
íˇpsuœtögSkfd
 =ÉncapsulatingSkfd;

237 
√wIf
->
li°íögSkfd
 =ÜisteningSkfd;

238 
	`mem˝y
(
√wIf
->
macAddr
, 
i‰
.
i‰_hwaddr
.
ß_d©a
, 
IFHWADDRLEN
);

239 
	`mem˝y
(
√wIf
->
ifName
, ifName, 
IFNAMSIZ
);

240 
√wIf
->
ﬁ§I¡f
 = olsrIntf;

241 i‡(
ﬁ§I¡f
 !
NULL
) {

245 
√wIf
->
ötAddr
.
v4
 = 
ﬁ§I¡f
->
öt_addr
.
sö_addr
;

246 
√wIf
->
brﬂdAddr
.
v4
 = 
ﬁ§I¡f
->
öt_brﬂdaddr
.
sö_addr
;

249 
	`mem£t
(&
i‰
, 0, (
i‰eq
));

250 
	`°∫˝y
(
i‰
.
i‰_«me
, 
ifName
, 
IFNAMSIZ
 - 1);

251 
i‰
.
i‰_«me
[
IFNAMSIZ
 - 1] = '\0';

252 i‡(
	`io˘l
(
io˘lSkfd
, 
SIOCGIFADDR
, &
i‰
) < 0) {

253 
	`BmfPEº‹
("io˘l(SIOCGIFADDRËîr‹ f‹ i¡îÁ˚ \"%s\"", 
ifName
);

255 
√wIf
->
ötAddr
.
v4
.
s_addr
 = 
	`öë_addr
("0.0.0.0");

258 
√wIf
->
ötAddr
.
v4
 = ((
sockaddr_ö
 *)
	`ARM_NOWARN_ALIGN
(&
i‰
.
i‰_addr
))->
sö_addr
;

262 
	`mem£t
(&
i‰
, 0, (
i‰eq
));

263 
	`°∫˝y
(
i‰
.
i‰_«me
, 
ifName
, 
IFNAMSIZ
 - 1);

264 
i‰
.
i‰_«me
[
IFNAMSIZ
 - 1] = '\0';

265 i‡(
	`io˘l
(
io˘lSkfd
, 
SIOCGIFBRDADDR
, &
i‰
) < 0) {

266 
	`BmfPEº‹
("io˘l(SIOCGIFBRDADDRËîr‹ f‹ i¡îÁ˚ \"%s\"", 
ifName
);

268 
√wIf
->
brﬂdAddr
.
v4
.
s_addr
 = 
	`öë_addr
("0.0.0.0");

271 
√wIf
->
brﬂdAddr
.
v4
 = ((
sockaddr_ö
 *)
	`ARM_NOWARN_ALIGN
(&
i‰
.
i‰_brﬂdaddr
))->
sö_addr
;

286 i‡(
BmfI¡îÁ˚s
 =
NULL
) {

288 
√wIf
->
√xt
 = 
NULL
;

289 
BmfI¡îÁ˚s
 = 
√wIf
;

290 
La°BmfI¡îÁ˚
 = 
√wIf
;

291 } i‡(
ﬁ§I¡f
 !
NULL
) {

293 
√wIf
->
√xt
 = 
BmfI¡îÁ˚s
;

294 
BmfI¡îÁ˚s
 = 
√wIf
;

297 
√wIf
->
√xt
 = 
NULL
;

298 
La°BmfI¡îÁ˚
->
√xt
 = 
√wIf
;

299 
La°BmfI¡îÁ˚
 = 
√wIf
;

311  
nO≥√d
;

312 
	}
}

324 
	$Cª©eBmfNëw‹kI¡îÁ˚s
(
öãrÁ˚
 *
skùThisI¡f
)

326 
skfd
;

327 
ifc⁄f
 
ifc
;

328 
numªqs
 = 30;

329 
i‰eq
 *
i‰
;

330 
n
;

331 
nO≥√dSockës
 = 0;

334 
	`FD_ZERO
(&
I≈utSë
);

336 
skfd
 = 
	`sockë
(
PF_INET
, 
SOCK_DGRAM
, 0);

337 i‡(
skfd
 < 0) {

338 
	`BmfPEº‹
("no inet socketávailableÅoÑetrieve interfaceÜist");

343 
ifc
.
ifc_buf
 = 
NULL
;

345 
ifc
.
ifc_Àn
 = (
i‰eq
Ë* 
numªqs
;

346 
ifc
.
ifc_buf
 = 
	`ªÆloc
(ifc.ifc_buf, ifc.
ifc_Àn
);

348 i‡(
	`io˘l
(
skfd
, 
SIOCGIFCONF
, &
ifc
) < 0) {

349 
	`BmfPEº‹
("ioctl(SIOCGIFCONF)Érror");

351 
	`˛o£
(
skfd
);

352 
	`‰ì
(
ifc
.
ifc_buf
);

355 i‡(()
ifc
.
ifc_Àn
 =(
i‰eq
Ë* 
numªqs
) {

357 
numªqs
 *= 2;

358 
	`as£π
(
numªqs
 < 1024);

364 
	`˛o£
(
skfd
);

367 
i‰
 = 
ifc
.
ifc_ªq
;

368 
n
 = 
ifc
.
ifc_Àn
 / (
i‰eq
); --¿>0; 
i‰
++) {

369 
öãrÁ˚
 *
ﬁ§I¡f
;

370 
ﬁ§_ù_addr
 
ùAddr
;

379 
ùAddr
.
v4
 = ((
sockaddr_ö
 *)
	`ARM_NOWARN_ALIGN
(&
i‰
->
i‰_addr
))->
sö_addr
;

380 
ﬁ§I¡f
 = 
	`if_ifwôhaddr
(&
ùAddr
);

382 i‡(
skùThisI¡f
 !
NULL
 && 
ﬁ§I¡f
 == skipThisIntf) {

386 i‡(
ﬁ§I¡f
 =
NULL
 && !
	`IsN⁄Ol§BmfIf
(
i‰
->
i‰_«me
)) {

392 i‡(!
	`IsN⁄Ol§BmfIf
(
i‰
->
i‰_«me
)) {

398 
nO≥√dSockës
 +
	`Cª©eI¡îÁ˚
(
i‰
->
i‰_«me
, 
NULL
);

402 
	`‰ì
(
ifc
.
ifc_buf
);

404 i‡(
BmfI¡îÁ˚s
 =
NULL
) {

410 
	}
}

422 
	$AddI¡îÁ˚
(
öãrÁ˚
 *
√wI¡f
)

426 
	`as£π
(
√wI¡f
 !
NULL
);

428  ()
	`Cª©eI¡îÁ˚
(
√wI¡f
->
öt_«me
,ÇewIntf);

431 
	}
}

450 
	$Clo£BmfNëw‹kI¡îÁ˚s
()

452 
nClo£d
 = 0;

453 
u_öt32_t
 
tŸÆOl§BmfPackësRx
 = 0;

454 
u_öt32_t
 
tŸÆOl§BmfPackësRxDup
 = 0;

455 
u_öt32_t
 
tŸÆOl§BmfPackësTx
 = 0;

456 
u_öt32_t
 
tŸÆN⁄Ol§BmfPackësRx
 = 0;

457 
u_öt32_t
 
tŸÆN⁄Ol§BmfPackësRxDup
 = 0;

458 
u_öt32_t
 
tŸÆN⁄Ol§BmfPackësTx
 = 0;

461 
TBmfI¡îÁ˚
 *
√xtBmfIf
 = 
BmfI¡îÁ˚s
;

462 
√xtBmfIf
 !
NULL
) {

463 
TBmfI¡îÁ˚
 *
bmfIf
 = 
√xtBmfIf
;

464 
√xtBmfIf
 = 
bmfIf
->
√xt
;

466 i‡(
bmfIf
->
ˇ±urögSkfd
 >= 0) {

467 
	`˛o£
(
bmfIf
->
ˇ±urögSkfd
);

468 
nClo£d
++;

470 i‡(
bmfIf
->
íˇpsuœtögSkfd
 >= 0) {

471 
	`˛o£
(
bmfIf
->
íˇpsuœtögSkfd
);

472 
nClo£d
++;

492 i‡(
bmfIf
->
ﬁ§I¡f
 !
NULL
) {

493 
tŸÆOl§BmfPackësRx
 +
bmfIf
->
nBmfPackësRx
;

494 
tŸÆOl§BmfPackësRxDup
 +
bmfIf
->
nBmfPackësRxDup
;

495 
tŸÆOl§BmfPackësTx
 +
bmfIf
->
nBmfPackësTx
;

497 
tŸÆN⁄Ol§BmfPackësRx
 +
bmfIf
->
nBmfPackësRx
;

498 
tŸÆN⁄Ol§BmfPackësRxDup
 +
bmfIf
->
nBmfPackësRxDup
;

499 
tŸÆN⁄Ol§BmfPackësTx
 +
bmfIf
->
nBmfPackësTx
;

502 
	`‰ì
(
bmfIf
);

505 
BmfI¡îÁ˚s
 = 
NULL
;

509 
	}
}

511 
	#MAX_NON_OLSR_IFS
 32

	)

512 
	gN⁄Ol§IfNames
[
MAX_NON_OLSR_IFS
][
IFNAMSIZ
];

513 
	gnN⁄Ol§Ifs
 = 0;

526 
AddN⁄Ol§BmfIf
(c⁄° *
ifName
, *
d©a
 
__©åibuã__
 ((
unu£d
)), 
£t_∂ugö_∑ømëî_add⁄
 
add⁄
 __attribute__ ((unused)))

528 
as£π
(
ifName
 !
NULL
);

530 i‡(
	gnN⁄Ol§Ifs
 >
MAX_NON_OLSR_IFS
) {

539 
°∫˝y
(
N⁄Ol§IfNames
[
nN⁄Ol§Ifs
], 
ifName
, 
IFNAMSIZ
 - 1);

540 
	gN⁄Ol§IfNames
[
nN⁄Ol§Ifs
][
IFNAMSIZ
 - 1] = '\0';

541 
	gnN⁄Ol§Ifs
++;

547 
£t_MDNS_TTL
(c⁄° *
MDNS_TTL
, *
d©a
 
__©åibuã__
 ((
unu£d
)), 
£t_∂ugö_∑ømëî_add⁄
 
add⁄
 __attribute__ ((unused)))

549 
as£π
(
MDNS_TTL
!
NULL
);

550 
	gmy_MDNS_TTL
 = 
©oi
(
MDNS_TTL
);

562 
	$IsN⁄Ol§BmfIf
(c⁄° *
ifName
)

564 
i
;

566 
	`as£π
(
ifName
 !
NULL
);

568 
i
 = 0; i < 
nN⁄Ol§Ifs
; i++) {

569 i‡(
	`°∫cmp
(
N⁄Ol§IfNames
[
i
], 
ifName
, 
IFNAMSIZ
) == 0)

573 
	}
}

	@lib/mdns/src/NetworkInterfaces.h

42 #i‚de‡
_BMF_NETWORKINTERFACES_H


43 
	#_BMF_NETWORKINTERFACES_H


	)

46 
	~<√töë/ö.h
>

49 
	~"ﬁ§_ty≥s.h
"

50 
	~"ﬁ§d_∂ugö.h
"

53 
	~"Packë.h
"

54 
	~"mdns.h
"

57 
	#BMF_BUFFER_SIZE
 2048

	)

59 
	sTBmfI¡îÁ˚
 {

61 
	mˇ±urögSkfd
;

65 
	míˇpsuœtögSkfd
;

69 
	mli°íögSkfd
;

71 
	mmacAddr
[
IFHWADDRLEN
];

73 
	mifName
[
IFNAMSIZ
];

77 
öãrÁ˚
 *
	mﬁ§I¡f
;

80 
ﬁ§_ù_addr
 
	mötAddr
;

83 
ﬁ§_ù_addr
 
	mbrﬂdAddr
;

85 
	#FRAGMENT_HISTORY_SIZE
 10

	)

86 
	sTFøgmítHi°‹y
 {

87 
u_öt16_t
 
	mùId
;

88 
u_öt8_t
 
	mùPrŸo
;

89 
ö_addr
 
	mùSrc
;

90 
ö_addr
 
	mùD°
;

91 } 
	m‰agmítHi°‹y
[
FRAGMENT_HISTORY_SIZE
];

93 
	m√xtFøgmítHi°‹yE¡ry
;

96 
u_öt32_t
 
	mnBmfPackësRx
;

97 
u_öt32_t
 
	mnBmfPackësRxDup
;

98 
u_öt32_t
 
	mnBmfPackësTx
;

101 
TBmfI¡îÁ˚
 *
	m√xt
;

104 
TBmfI¡îÁ˚
 *
BmfI¡îÁ˚s
;

106 
my_MDNS_TTL
;

108 
Highe°Skfd
;

109 
fd_£t
 
I≈utSë
;

111 
EthîTunT≠Fd
;

113 
EthîTunT≠IfName
[];

116 
	#ETHERTUNTAPDEFAULTIP
 0x0AFFFFFD

	)

118 
u_öt32_t
 
EthîTunT≠Ip
;

119 
u_öt32_t
 
EthîTunT≠IpMask
;

120 
u_öt32_t
 
EthîTunT≠IpBrﬂdˇ°
;

123 
	eTBmfMech™ism
 { 
	mBM_BROADCAST
 = 0, 
	mBM_UNICAST_PROMISCUOUS
 };

124 
TBmfMech™ism
 
BmfMech™ism
;

126 
SëBmfI¡îÁ˚Name
(c⁄° *
i‚ame
, *
d©a
, 
£t_∂ugö_∑ømëî_add⁄
 
add⁄
);

127 
SëBmfI¡îÁ˚Ip
(c⁄° *
ù
, *
d©a
, 
£t_∂ugö_∑ømëî_add⁄
 
add⁄
);

128 
SëC≠tuªPackësOnOl§I¡îÁ˚s
(c⁄° *
íabÀ
, *
d©a
, 
£t_∂ugö_∑ømëî_add⁄
 
add⁄
);

129 
SëBmfMech™ism
(c⁄° *
mech™ism
, *
d©a
, 
£t_∂ugö_∑ømëî_add⁄
 
add⁄
);

130 
Dó˘iv©eSpoofFûãr
();

131 
Re°‹eSpoofFûãr
();

133 
	#MAX_UNICAST_NEIGHBORS
 10

	)

134 
	sTBe°Neighb‹s
 {

135 
lök_íåy
 *
	mlöks
[
MAX_UNICAST_NEIGHBORS
];

138 
FödNeighb‹s
(
TBe°Neighb‹s
 *
√ighb‹s
,

139 
lök_íåy
 **
be°Neighb‹
,

140 
TBmfI¡îÁ˚
 *
ötf
,

141 
ﬁ§_ù_addr
 *
sour˚
,

142 
ﬁ§_ù_addr
 *
f‹w¨dedBy
, ﬁ§_ù_add∏*
f‹w¨dedTo
, *
nPossibÀNeighb‹s
);

144 
Cª©eBmfNëw‹kI¡îÁ˚s
(
öãrÁ˚
 *
skùThisI¡f
);

145 
AddI¡îÁ˚
(
öãrÁ˚
 *
√wI¡f
);

146 
Clo£BmfNëw‹kI¡îÁ˚s
();

147 
AddN⁄Ol§BmfIf
(c⁄° *
ifName
, *
d©a
, 
£t_∂ugö_∑ømëî_add⁄
 
add⁄
);

148 
£t_MDNS_TTL
(c⁄° *
MDNS_TTL
, *
d©a
, 
£t_∂ugö_∑ømëî_add⁄
 
add⁄
);

149 
IsN⁄Ol§BmfIf
(c⁄° *
ifName
);

150 
CheckAndUpd©eLoˇlBrﬂdˇ°
(*
ùPackë
, 
ﬁ§_ù_addr
 *
brﬂdAddr
);

151 
AddMu…iˇ°Rouã
();

152 
DñëeMu…iˇ°Rouã
();

	@lib/mdns/src/Packet.c

41 
	~"Packë.h
"

44 
	~<°ddef.h
>

45 
	~<as£π.h
>

46 
	~<°rög.h
>

47 
	~<sys/ty≥s.h
>

48 
	~<√töë/ö.h
>

49 
	~<√töë/ù.h
>

52 
	~"defs.h
"

63 
	$IsIpFøgmít
(*
ùPackë
)

65 
ù
 *
ùh
;

67 
	`as£π
(
ùPackë
 !
NULL
);

69 
ùh
 = (
ù
 *)
	`ARM_NOWARN_ALIGN
(
ùPackë
);

70 i‡((
	`¡ohs
(
ùh
->
ù_off
Ë& 
IP_OFFMASK
) != 0) {

74 
	}
}

85 
u_öt16_t


86 
	$GëIpTŸÆLígth
(*
ùPackë
)

88 
ùhdr
 *
ùh
;

90 
	`as£π
(
ùPackë
 !
NULL
);

92 
ùh
 = (
ùhdr
 *)
	`ARM_NOWARN_ALIGN
(
ùPackë
);

93  
	`¡ohs
(
ùh
->
tŸ_Àn
);

94 
	}
}

105 
	$GëIpHódîLígth
(*
ùPackë
)

107 
ùhdr
 *
ùh
;

109 
	`as£π
(
ùPackë
 !
NULL
);

111 
ùh
 = (
ùhdr
 *)
	`ARM_NOWARN_ALIGN
(
ùPackë
);

112  
ùh
->
ihl
 << 2;

113 
	}
}

124 
u_öt8_t


125 
	$GëTé
(*
ùPackë
)

127 
ùhdr
 *
ùh
;

129 
	`as£π
(
ùPackë
 !
NULL
);

131 
ùh
 = (
ùhdr
 *)
	`ARM_NOWARN_ALIGN
(
ùPackë
);

132  
ùh
->
âl
;

133 
	}
}

145 
	$SaveTéAndChecksum
(*
ùPackë
, 
TSaveTé
 *
°é
)

147 
ùhdr
 *
ùh
;

149 
	`as£π
(
ùPackë
 !
NULL
 && 
°é
 != NULL);

151 
ùh
 = (
ùhdr
 *)
	`ARM_NOWARN_ALIGN
(
ùPackë
);

152 
°é
->
âl
 = 
ùh
->ttl;

153 
°é
->
check
 = 
	`¡ohs
(
ùh
->check);

154 
	}
}

167 
	$Re°‹eTéAndChecksum
(*
ùPackë
, 
TSaveTé
 *
°é
)

169 
ùhdr
 *
ùh
;

171 
	`as£π
(
ùPackë
 !
NULL
 && 
°é
 != NULL);

173 
ùh
 = (
ùhdr
 *)
	`ARM_NOWARN_ALIGN
(
ùPackë
);

174 
ùh
->
âl
 = 
°é
->ttl;

175 
ùh
->
check
 = 
	`ht⁄s
(
°é
->check);

176 
	}
}

189 
	$De¸ó£TéAndUpd©eHódîChecksum
(*
ùPackë
)

191 
ùhdr
 *
ùh
;

192 
u_öt32_t
 
sum
;

194 
	`as£π
(
ùPackë
 !
NULL
);

196 
ùh
 = (
ùhdr
 *)
	`ARM_NOWARN_ALIGN
(
ùPackë
);

198 
ùh
->
âl
--;

199 
sum
 = 
	`¡ohs
(
ùh
->
check
) + 0x100;

200 
ùh
->
check
 = 
	`ht⁄s
(
sum
 + (sum >> 16));

201 
	}
}

211 
ù
 *

212 
	$GëIpHódî
(*
íˇpsuœti⁄UdpD©a
)

214  (
ù
 *)
	`ARM_NOWARN_ALIGN
(
íˇpsuœti⁄UdpD©a
 + 
ENCAP_HDR_LEN
);

215 
	}
}

226 
	$GëIpPackë
(*
íˇpsuœti⁄UdpD©a
)

228  
íˇpsuœti⁄UdpD©a
 + 
ENCAP_HDR_LEN
;

229 
	}
}

	@lib/mdns/src/Packet.h

42 #i‚de‡
_MDNS_PACKET_H


43 
	#_MDNS_PACKET_H


	)

47 
	~<√t/if.h
>

48 
	~<sys/ty≥s.h
>

54 
	sTEnˇpHódî
 {

56 
u_öt8_t
 
	mty≥
;

57 
u_öt8_t
 
	mÀn
;

58 
u_öt16_t
 
	mª£rved
;

59 
u_öt32_t
 
	m¸c32
;

60 } 
__©åibuã__
 ((
__∑cked__
));

62 
	#ENCAP_HDR_LEN
 (()(
TEnˇpHódî
))

	)

63 
	#BMF_ENCAP_TYPE
 1

	)

64 
	#BMF_ENCAP_LEN
 6

	)

66 
	sTSaveTé
 {

67 
u_öt8_t
 
	mâl
;

68 
u_öt16_t
 
	mcheck
;

69 } 
__©åibuã__
 ((
__∑cked__
));

71 
IsIpFøgmít
(*
ùPackë
);

72 
u_öt16_t
 
GëIpTŸÆLígth
(*
ùPackë
);

73 
GëIpHódîLígth
(*
ùPackë
);

74 
u_öt8_t
 
GëTé
(*
ùPackë
);

75 
SaveTéAndChecksum
(*
ùPackë
, 
TSaveTé
 *
°é
);

76 
Re°‹eTéAndChecksum
(*
ùPackë
, 
TSaveTé
 *
°é
);

77 
De¸ó£TéAndUpd©eHódîChecksum
(*
ùPackë
);

78 
ù
 *
GëIpHódî
(*
íˇpsuœti⁄UdpD©a
);

79 *
GëIpPackë
(*
íˇpsuœti⁄UdpD©a
);

	@lib/mdns/src/mdns.c

42 
	~"mdns.h
"

45 
	~<°ddef.h
>

46 
	~<sys/ty≥s.h
>

47 
	~<°rög.h
>

48 
	~<°d¨g.h
>

49 
	~<î∫o.h
>

50 
	~<as£π.h
>

51 
	~<löux/if_ëhî.h
>

52 
	~<löux/if_∑ckë.h
>

54 
	~<sig«l.h
>

55 
	~<√töë/ù.h
>

56 
	~<√töë/udp.h
>

57 
	~<uni°d.h
>

59 
	~<√töë/ö.h
>

60 
	~<√töë/ù6.h
>

63 
	~"∂ugö_utû.h
"

64 
	~"defs.h
"

65 
	~"ùˇlc.h
"

66 
	~"ﬁ§.h
"

67 
	~"mid_£t.h
"

68 
	~"lök_£t.h
"

69 
	~"√t_ﬁ§.h
"

72 
	~"Nëw‹kI¡îÁ˚s.h
"

73 
	~"Addªss.h
"

74 
	~"Packë.h
"

76 
	gmy_DNS_TTL
=0;

87 
	$PackëRe˚ivedFromOLSR
(*
íˇpsuœti⁄UdpD©a
, 
Àn
)

89 
ù
 *
ùHódî
;

90 
ù6_hdr
 *
ù6Hódî
;

93 
TBmfI¡îÁ˚
 *
wÆkî
;

94 
°rù≥d_Àn
 = 0;

95 
ùHódî
 = (
ù
 *)
	`ARM_NOWARN_ALIGN
(
íˇpsuœti⁄UdpD©a
);

96 
ù6Hódî
 = (
ù6_hdr
 *)
	`ARM_NOWARN_ALIGN
(
íˇpsuœti⁄UdpD©a
);

104 
wÆkî
 = 
BmfI¡îÁ˚s
; wÆkî !
NULL
; wÆkî = wÆkî->
√xt
) {

106 i‡(
wÆkî
->
ﬁ§I¡f
 =
NULL
) {

107 
nByãsWrôãn
;

108 
sockaddr_Œ
 
de°
;

110 
	`mem£t
(&
de°
, 0, (dest));

111 
de°
.
¶l_Ámûy
 = 
AF_PACKET
;

112 i‡((
íˇpsuœti⁄UdpD©a
[0] & 0xf0) == 0x40) {

113 
de°
.
¶l_¥Ÿocﬁ
 = 
	`ht⁄s
(
ETH_P_IP
);

114 
°rù≥d_Àn
 = 
	`¡ohs
(
ùHódî
->
ù_Àn
);

116 i‡((
íˇpsuœti⁄UdpD©a
[0] & 0xf0) == 0x60) {

117 
de°
.
¶l_¥Ÿocﬁ
 = 
	`ht⁄s
(
ETH_P_IPV6
);

118 
°rù≥d_Àn
 = 40 + 
	`¡ohs
(
ù6Hódî
->
ù6_∂í
);

121 i‡(0 =
°rù≥d_Àn
) ;

124 i‡(
°rù≥d_Àn
 > 
Àn
) {

127 
de°
.
¶l_ifödex
 = 
	`if_«mëoödex
(
wÆkî
->
ifName
);

128 
de°
.
¶l_hÆí
 = 
IFHWADDRLEN
;

136 
	`mem£t
(
de°
.
¶l_addr
, 0xFF, 
IFHWADDRLEN
);

138 
	`mem£t
(
íˇpsuœti⁄UdpD©a
[7], 0x01, 1);

142 
nByãsWrôãn
 = 
	`£ndto
(
wÆkî
->
ˇ±urögSkfd
, 
íˇpsuœti⁄UdpD©a
, 
°rù≥d_Àn
, 0, (
sockaddr
 *)&
de°
, (dest));

143 i‡(
nByãsWrôãn
 !
°rù≥d_Àn
) {

144 
	`BmfPEº‹
("£ndto(Ëîr‹ f‹w¨dög u≈ackedÉnˇpsuœãdÖkà⁄ \"%s\"", 
wÆkî
->
ifName
);

155 
	}
}

158 
boﬁ


159 
ﬁ§_∑r£r
(
ﬁ§_mesßge
 *
m
, 
öãrÁ˚
 *
ö_if
 
__©åibuã__
 ((
unu£d
)), 
ﬁ§_ù_addr
 *
ùaddr
)

161 
ﬁ§_ù_addr
 
	g‹igö©‹
;

162 
	gsize
;

165 i‡(
	gﬁ§_˙f
->
	gù_vîsi⁄
 =
AF_INET
) {

166 
mem˝y
(&
‹igö©‹
, &
m
->
v4
.‹igö©‹, 
ﬁ§_˙f
->
ùsize
);

167 
	gsize
 = 
¡ohs
(
m
->
v4
.
ﬁ§_msgsize
);

169 
mem˝y
(&
‹igö©‹
, &
m
->
v6
.‹igö©‹, 
ﬁ§_˙f
->
ùsize
);

170 
	gsize
 = 
¡ohs
(
m
->
v6
.
ﬁ§_msgsize
);

175 i‡(
ùequÆ
(&
‹igö©‹
, &
ﬁ§_˙f
->
maö_addr
))

176  
	gÁl£
;

180 i‡(
check_√ighb‹_lök
(
ùaddr
Ë!
SYM_LINK
) {

183  
Ál£
;

186 i‡(
	gﬁ§_˙f
->
	gù_vîsi⁄
 =
AF_INET
) {

187 
PackëRe˚ivedFromOLSR
((*)&
m
->
v4
.
mesßge
, 
size
 - 12);

189 
PackëRe˚ivedFromOLSR
((*)&
m
->
v6
.
mesßge
, 
size
 - 12 - 96);

192  
	gåue
;

197 
	$ﬁ§_mdns_gí
(*
∑ckë
, 
Àn
)

200 
buf„r
[10240];

201 
Æig√d_size
;

202 
ﬁ§_mesßge
 *
mesßge
 = (ﬁ§_mesßgê*)
buf„r
;

203 
öãrÁ˚
 *
i‚
;

205 
Æig√d_size
=
Àn
;

207 i‡((
Æig√d_size
 % 4) != 0) {

208 
Æig√d_size
 = (aligned_size - (aligned_size % 4)) + 4;

212 i‡(
ﬁ§_˙f
->
ù_vîsi⁄
 =
AF_INET
) {

214 
mesßge
->
v4
.
ﬁ§_msgty≥
 = 
MESSAGE_TYPE
;

215 
mesßge
->
v4
.
ﬁ§_vtime
 = 
	`ª…ime_to_me
(
MDNS_VALID_TIME
 * 
MSEC_PER_SEC
);

216 
	`mem˝y
(&
mesßge
->
v4
.
‹igö©‹
, &
ﬁ§_˙f
->
maö_addr
, ol§_˙f->
ùsize
);

218 i‡(
my_MDNS_TTL
Ë
mesßge
->
v4
.
âl
 = my_MDNS_TTL;

219 
mesßge
->
v4
.
âl
 = 
MAX_TTL
;

220 
mesßge
->
v4
.
h›˙t
 = 0;

221 
mesßge
->
v4
.
£qno
 = 
	`ht⁄s
(
	`gë_msg_£qno
());

223 
mesßge
->
v4
.
ﬁ§_msgsize
 = 
	`ht⁄s
(
Æig√d_size
 + 12);

225 
	`mem£t
(&
mesßge
->
v4
.mesßge, 0, 
Æig√d_size
);

226 
	`mem˝y
(&
mesßge
->
v4
.mesßge, 
∑ckë
, 
Àn
);

227 
Æig√d_size
 =áligned_size + 12;

230 
mesßge
->
v6
.
ﬁ§_msgty≥
 = 
MESSAGE_TYPE
;

231 
mesßge
->
v6
.
ﬁ§_vtime
 = 
	`ª…ime_to_me
(
MDNS_VALID_TIME
 * 
MSEC_PER_SEC
);

232 
	`mem˝y
(&
mesßge
->
v6
.
‹igö©‹
, &
ﬁ§_˙f
->
maö_addr
, ol§_˙f->
ùsize
);

234 i‡(
my_MDNS_TTL
Ë
mesßge
->
v6
.
âl
 = my_MDNS_TTL;

235 
mesßge
->
v6
.
âl
 = 
MAX_TTL
;

236 
mesßge
->
v6
.
h›˙t
 = 0;

237 
mesßge
->
v6
.
£qno
 = 
	`ht⁄s
(
	`gë_msg_£qno
());

239 
mesßge
->
v6
.
ﬁ§_msgsize
 = 
	`ht⁄s
(
Æig√d_size
 + 12 + 96);

240 
	`mem£t
(&
mesßge
->
v6
.mesßge, 0, 
Æig√d_size
);

241 
	`mem˝y
(&
mesßge
->
v6
.mesßge, 
∑ckë
, 
Àn
);

242 
Æig√d_size
 =áligned_size + 12 + 96;

246 
i‚
 = 
i‚ë
; i‚; i‚ = i‚->
öt_√xt
) {

249 i‡(
	`√t_outbuf„r_push
(
i‚
, 
mesßge
, 
Æig√d_size
) !=áligned_size) {

251 
	`√t_ouçut
(
i‚
);

252 i‡(
	`√t_outbuf„r_push
(
i‚
, 
mesßge
, 
Æig√d_size
) !=áligned_size) {

257 
	}
}

272 
	$BmfPEº‹
(c⁄° *
f‹m©
, ...)

274 
	#MAX_STR_DESC
 255

	)

275 
°rDesc
[
MAX_STR_DESC
];

277 #i‡!
deföed
 
REMOVE_LOG_DEBUG


281 i‡(
f‹m©
 =
NULL
 || *format == '\0') {

284 
va_li°
 
¨gli°
;

286 
	`va_°¨t
(
¨gli°
, 
f‹m©
);

287 
	`v¢¥ötf
(
°rDesc
, 
MAX_STR_DESC
, 
f‹m©
, 
¨gli°
);

288 
	`va_íd
(
¨gli°
);

290 
°rDesc
[
MAX_STR_DESC
 - 1] = '\0';

294 
	}
}

304 
ﬁ§_ù_addr
 *

305 
	$MaöAddªssOf
(
ﬁ§_ù_addr
 *
ù
)

307 
ﬁ§_ù_addr
 *
ªsu…
;

310 
ªsu…
 = 
	`mid_lookup_maö_addr
(
ù
);

311 i‡(
ªsu…
 =
NULL
) {

312 
ªsu…
 = 
ù
;

314  
ªsu…
;

315 
	}
}

333 
	$BmfPackëC≠tuªd
(

336 *
íˇpsuœti⁄UdpD©a
, 
nByãs
)

338 
ﬁ§_ù_addr
 
d°
;

339 
ù
 *
ùHódî
;

340 
ù6_hdr
 *
ùHódî6
;

341 
udphdr
 *
udpHódî
;

342 
u_öt16_t
 
de°P‹t
;

344 i‡((
íˇpsuœti⁄UdpD©a
[0] & 0xf0) == 0x40) {

346 
ùHódî
 = (
ù
 *)
	`ARM_NOWARN_ALIGN
(
íˇpsuœti⁄UdpD©a
);

348 
d°
.
v4
 = 
ùHódî
->
ù_d°
;

351 i‡(
	`IsMu…iˇ°
(&
d°
)) {

356 i‡(
ùHódî
->
ù_p
 !
SOL_UDP
) {

361 
udpHódî
 = (
udphdr
 *)
	`ARM_NOWARN_ALIGN
(
íˇpsuœti⁄UdpD©a
 + 
	`GëIpHódîLígth
(encapsulationUdpData));

362 
de°P‹t
 = 
	`¡ohs
(
udpHódî
->
de°
);

363 i‡(
de°P‹t
 != 5353) {

368 i‡((
íˇpsuœti⁄UdpD©a
[0] & 0xf0) == 0x60) {

370 
ùHódî6
 = (
ù6_hdr
 *)
	`ARM_NOWARN_ALIGN
(
íˇpsuœti⁄UdpD©a
);

371 i‡(
ùHódî6
->
ù6_d°
.
s6_addr
[0] == 0xff)

377 i‡(
ùHódî6
->
ù6_nxt
 !
SOL_UDP
) {

382 
udpHódî
 = (
udphdr
 *)
	`ARM_NOWARN_ALIGN
(
íˇpsuœti⁄UdpD©a
 + 40);

383 
de°P‹t
 = 
	`¡ohs
(
udpHódî
->
de°
);

384 i‡(
de°P‹t
 != 5353) {

394 if(
íˇpsuœti⁄UdpD©a
[7] <= 0x01)

400 
	`ﬁ§_mdns_gí
(
íˇpsuœti⁄UdpD©a
, 
nByãs
);

401 
	}
}

413 
DoMDNS
(
skfd
, *
d©a
 
__©åibuã__
 ((
unu£d
)), 
Êags
 __attribute__ ((unused)))

415 
	grxBuf„r
[
BMF_BUFFER_SIZE
];

416 i‡(
	gskfd
 >= 0) {

417 
sockaddr_Œ
 
pktAddr
;

418 
sockÀn_t
 
	gaddrLí
 = (
pktAddr
);

419 
	gnByãs
;

420 *
	gùPackë
;

424 
	gùPackë
 = 
GëIpPackë
(
rxBuf„r
);

425 
	gnByãs
 = 
ªcv‰om
(
skfd
, 
ùPackë
, 
BMF_BUFFER_SIZE
,

426 0, (
sockaddr
 *)&
pktAddr
, &
addrLí
);

427 i‡(
	gnByãs
 < 0) {

439 i‡(
	gnByãs
 < ()(
	gù
)) {

450 i‡(
	gpktAddr
.
	g¶l_pkây≥
 =
PACKET_OUTGOING
 ||

451 
pktAddr
.
¶l_pkây≥
 =
PACKET_MULTICAST
 ||ÖktAddr.¶l_pkây≥ =
PACKET_BROADCAST
) {

461 
BmfPackëC≠tuªd
(
ùPackë
, 
nByãs
);

468 
	$InôMDNS
(
öãrÁ˚
 *
skùThisI¡f
)

473 
	`ﬁ§_∑r£r_add_fun˘i⁄
(&
ﬁ§_∑r£r
, 
PARSER_TYPE
);

475 
	`Cª©eBmfNëw‹kI¡îÁ˚s
(
skùThisI¡f
);

478 
	}
}

489 
	$Clo£MDNS
()

491 
	`Clo£BmfNëw‹kI¡îÁ˚s
();

492 
	}
}

	@lib/mdns/src/mdns.h

42 #i‚de‡
_MDNS_MDNS_H


43 
	#_MDNS_MDNS_H


	)

46 
	~"ﬁ§d_∂ugö.h
"

47 
	~"du∂iˇã_£t.h
"

48 
	~"∑r£r.h
"

50 
	#MESSAGE_TYPE
 132

	)

51 
	#PARSER_TYPE
 
MESSAGE_TYPE


	)

52 
	#EMISSION_INTERVAL
 10

	)

53 
	#EMISSION_JITTER
 25

	)

54 
	#MDNS_VALID_TIME
 1800

	)

57 
	#PLUGIN_NAME
 "OLSRD MDNSÖlugö"

	)

58 
	#PLUGIN_NAME_SHORT
 "OLSRD MDNS"

	)

59 
	#PLUGIN_VERSION
 "1.0.0 (" 
__DATE__
 " " 
__TIME__
 ")"

	)

60 
	#PLUGIN_COPYRIGHT
 " (CËNöux.‹g"

	)

61 
	#PLUGIN_AUTHOR
 " SavîiÿPrŸÿ(zi›rŸo@gmaû.com)"

	)

62 
	#MOD_DESC
 
PLUGIN_NAME
 " " 
PLUGIN_VERSION
 "\n" 
PLUGIN_COPYRIGHT
 "\n" 
PLUGIN_AUTHOR


	)

63 
	#PLUGIN_INTERFACE_VERSION
 5

	)

69 
	göãrÁ˚
;

74 
DoMDNS
(
sd
, *
x
, 
y
);

75 
	$BmfPEº‹
(c⁄° *
f‹m©
, ...Ë
	`__©åibuã__
 ((
	`f‹m©
(
¥ötf
, 1, 2)));

76 
ﬁ§_ù_addr
 *
	`MaöAddªssOf
(ﬁ§_ù_add∏*
ù
);

81 
	`InôMDNS
(
öãrÁ˚
 *
skùThisI¡f
);

82 
	`Clo£MDNS
();

84 
	`ﬁ§_mdns_gí
(*
∑ckë
, 
Àn
);

87 
boﬁ
 
	`ﬁ§_∑r£r
(
ﬁ§_mesßge
 *, 
öãrÁ˚
 *, 
ﬁ§_ù_addr
 *);

	@lib/mdns/src/olsrd_plugin.c

42 
	~<as£π.h
>

43 
	~<°ddef.h
>

46 
	~"ﬁ§d_∂ugö.h
"

47 
	~"∂ugö_utû.h
"

48 
	~"defs.h
"

49 
	~"scheduÀr.h
"

50 
	~"ﬁ§_cfg.h
"

51 
	~"ﬁ§_cookõ.h
"

54 
	~"mdns.h
"

55 
	~"Nëw‹kI¡îÁ˚s.h
"

56 
	~"Addªss.h
"

58 
__©åibuã__
 ((
c⁄°ru˘‹
)Ë
my_öô
();

59 
__©åibuã__
 ((
de°ru˘‹
)Ë
my_föi
();

63 
ﬁ§_∂ugö_exô
();

76 
	$ﬁ§d_∂ugö_öãrÁ˚_vîsi⁄
()

78  
PLUGIN_INTERFACE_VERSION
;

79 
	}
}

91 
	$ﬁ§d_∂ugö_öô
()

107  
	`InôMDNS
(
NULL
);

108 
	}
}

120 
	$ﬁ§_∂ugö_exô
()

122 
	`Clo£MDNS
();

123 
	}
}

125 c⁄° 
ﬁ§d_∂ugö_∑ømëîs
 
	g∂ugö_∑ømëîs
[] = {

126 {.
«me
 = "N⁄Ol§If",.
	g£t_∂ugö_∑ømëî
 = &
AddN⁄Ol§BmfIf
,.
	gd©a
 = 
NULL
},

127 {.
	g«me
 = "MDNS_TTL", .
	g£t_∂ugö_∑ømëî
 = &
£t_MDNS_TTL
, .
	gd©a
 = 
NULL
 },

148 
	$ﬁ§d_gë_∂ugö_∑ømëîs
(c⁄° 
ﬁ§d_∂ugö_∑ømëîs
 **
∑øms
, *
size
)

150 *
∑øms
 = 
∂ugö_∑ømëîs
;

151 *
size
 = 
	`ARRAYSIZE
(
∂ugö_∑ømëîs
);

152 
	}
}

164 
	$my_öô
()

167 
	`¥ötf
("%s\n", 
MOD_DESC
);

170 
	}
}

182 
	$my_föi
()

184 
	`ﬁ§_∂ugö_exô
();

185 
	}
}

	@lib/mini/src/olsrd_plugin.c

38 
	~<°dio.h
>

39 
	~<°rög.h
>

41 
	~"../../../§c/ﬁ§d_∂ugö.h
"

43 
	~"ﬁ§d_∂ugö.h
"

44 
	~"ﬁ§.h
"

46 
	#PLUGIN_INTERFACE_VERSION
 5

	)

57 
	$ﬁ§d_∂ugö_öãrÁ˚_vîsi⁄
()

59  
PLUGIN_INTERFACE_VERSION
;

60 
	}
}

63 
£t_∂ugö_ã°
(c⁄° *
vÆue
, *
d©a
 
__©åibuã__
 ((
unu£d
)), 
£t_∂ugö_∑ømëî_add⁄
 
add⁄
 __attribute__ ((unused)))

65 
¥ötf
("\n*** MINI:Ö¨amëîÅe°: %s\n", 
vÆue
);

73 c⁄° 
ﬁ§d_∂ugö_∑ømëîs
 
	g∂ugö_∑ømëîs
[] = {

74 {.
«me
 = "ã°",.
	g£t_∂ugö_∑ømëî
 = &
£t_∂ugö_ã°
,.
	gd©a
 = 
NULL
},

78 
	$ﬁ§d_gë_∂ugö_∑ømëîs
(c⁄° 
ﬁ§d_∂ugö_∑ømëîs
 **
∑øms
, *
size
)

80 *
∑øms
 = 
∂ugö_∑ømëîs
;

81 *
size
 = (
∂ugö_∑ømëîs
) / (*plugin_parameters);

82 
	}
}

89 
	$ﬁ§d_∂ugö_öô
()

91 
	`¥ötf
("*** MINI:Ölugin_init\n");

94 
	`ﬁ§_¥ötf
(2, "*** MINI:ÖrintedÅhis with olsr_printf\n");

97 
	}
}

105 
	$my_öô
(Ë
	`__©åibuã__
 ((
c⁄°ru˘‹
));

106 
	$my_föi
(Ë
	`__©åibuã__
 ((
de°ru˘‹
));

112 
	$my_öô
()

114 
	`¥ötf
("*** MINI: constructor\n");

115 
	}
}

121 
	$my_föi
()

123 
	`¥ötf
("*** MINI: destructor\n");

124 
	}
}

	@lib/mini/src/olsrd_plugin.h

37 #i‚de‡
_OLSRD_PLUGIN_MINI


38 
	#_OLSRD_PLUGIN_MINI


	)

45 
ﬁ§d_∂ugö_öô
();

47 
ﬁ§d_∂ugö_öãrÁ˚_vîsi⁄
();

	@lib/nameservice/src/compat.c

1 
	~"com∑t.h
"

3 #i‡!
deföed
(
__löux__
Ë&& !deföed(
__GLIBC__
)

4 
	~<°dlib.h
>

5 
	~<°rög.h
>

9 
	$°∫dup
(c⁄° *
±r
, 
size_t
 
size
)

11 
size_t
 
Àn
 = 
	`°æí
(
±r
);

12 *
ªt
 = 
NULL
;

14 i‡(
Àn
 > 
size
)

15 
Àn
 = 
size
;

17 
ªt
 = 
	`mÆloc
(
Àn
 + 1);

19 i‡(!
ªt
)

20  
NULL
;

22 
	`mem˝y
(
ªt
, 
±r
, 
Àn
);

23 
ªt
[
Àn
] = '\0';

25  
ªt
;

26 
	}
}

	@lib/nameservice/src/compat.h

1 #i‚de‡
_NAMESERVICE_COMPAT


2 
	#_NAMESERVICE_COMPAT


	)

4 
	~<sys/ty≥s.h
>

6 #i‡!
deföed
(
__löux__
Ë&& !deföed(
__GLIBC__
)

7 *
°∫dup
(c⁄° *
±r
, 
size_t
 
size
);

	@lib/nameservice/src/mapwrite.c

32 
	~<°dio.h
>

33 
	~<°rög.h
>

34 
	~<î∫o.h
>

35 
	~<uni°d.h
>

36 
	~<f˙é.h
>

37 
	~<sys/ty≥s.h
>

38 
	~<sys/°©.h
>

40 
	~"defs.h
"

41 
	~"scheduÀr.h
"

42 
	~"«me£rvi˚.h
"

43 
	~"mid_£t.h
"

44 
	~"tc_£t.h
"

45 
	~"ùˇlc.h
"

46 
	~"lq_∂ugö.h
"

48 
	~"m≠wrôe.h
"

50 
	gmy_œé⁄_°r
[48];

56 
	$lookup_posôi⁄_œé⁄
(
ﬁ§_ù_addr
 *
ù
)

58 
hash
;

59 
db_íåy
 *
íåy
;

60 
li°_node
 *
li°_hód
, *list_node;

62 i‡(
	`ùequÆ
(
ù
, &
ﬁ§_˙f
->
maö_addr
)) {

63  
my_œé⁄_°r
;

66 
hash
 = 0; hash < 
HASHSIZE
; hash++) {

67 
li°_hód
 = &
œé⁄_li°
[
hash
];

68 
li°_node
 = 
li°_hód
->
√xt
;Üist_node !=Üist_head;Üist_node =Üist_node->next) {

70 
íåy
 = 
	`li°2db
(
li°_node
);

72 i‡(
íåy
->
«mes
 && 
	`ùequÆ
(&íåy->
‹igö©‹
, 
ù
)) {

73  
íåy
->
«mes
->
«me
;

77  
NULL
;

78 
	}
}

84 
	$m≠wrôe_w‹k
(
FILE
 * 
fm≠
)

86 
hash
;

87 
ﬁ§_if
 *
ifs
;

88 
ﬁ§_ù_addr
 
ù
;

89 
ùaddr_°r
 
°rbuf1
, 
°rbuf2
;

90 
tc_íåy
 *
tc
;

91 
tc_edge_íåy
 *
tc_edge
;

93 i‡(!
my_«mes
 || !
fm≠
)

96 
ifs
 = 
ﬁ§_˙f
->
öãrÁ˚s
; ifs; if†ifs->
√xt
) {

97 i‡(0 !
ifs
->
öãrf
) {

98 i‡(
ﬁ§_˙f
->
ù_vîsi⁄
 =
AF_INET
) {

99 i‡(!(
	`ù4equÆ
((
ö_addr
 *)&
ﬁ§_˙f
->
maö_addr
, &
ifs
->
öãrf
->
öt_addr
.
sö_addr
))) {

101 
	`Ârötf
(
fm≠
, "Mid('%s','%s');\n", 
	`ﬁ§_ù_to_°rög
(&
°rbuf1
, &
ﬁ§_˙f
->
maö_addr
),

102 
	`ﬁ§_ù_to_°rög
(&
°rbuf2
, (
ﬁ§_ù_addr
 *)&
ifs
->
öãrf
->
öt_addr
.
sö_addr
))) {

106 } i‡(!(
	`ù6equÆ
((
ö6_addr
 *)&
ﬁ§_˙f
->
maö_addr
, &
ifs
->
öãrf
->
öt6_addr
.
sö6_addr
))) {

108 
	`Ârötf
(
fm≠
, "Mid('%s','%s');\n", 
	`ﬁ§_ù_to_°rög
(&
°rbuf1
, &
ﬁ§_˙f
->
maö_addr
),

109 
	`ﬁ§_ù_to_°rög
(&
°rbuf2
, (
ﬁ§_ù_addr
 *)&
ifs
->
öãrf
->
öt6_addr
.
sö6_addr
))) {

116 
hash
 = 0; hash < 
HASHSIZE
; hash++) {

117 
mid_íåy
 *
íåy
 = 
mid_£t
[
hash
].
√xt
;

118 
íåy
 !&
mid_£t
[
hash
]) {

119 
mid_addªss
 *
Æüs
 = 
íåy
->
Æü£s
;

120 
Æüs
) {

122 
	`Ârötf
(
fm≠
, "Mid('%s','%s');\n", 
	`ﬁ§_ù_to_°rög
(&
°rbuf1
, &
íåy
->
maö_addr
),

123 
	`ﬁ§_ù_to_°rög
(&
°rbuf2
, &
Æüs
->alias))) {

126 
Æüs
 =álüs->
√xt_Æüs
;

128 
íåy
 =É¡ry->
√xt
;

131 
	`lookup_defh«_œé⁄
(&
ù
);

132 
	`•rötf
(
my_œé⁄_°r
, "%f,%f,%d", 
my_œt
, 
my_l⁄
, 
	`gë_isdefh«_œé⁄
());

134 
	`Ârötf
(
fm≠
, "Sñf('%s',%s,'%s','%s');\n", 
	`ﬁ§_ù_to_°rög
(&
°rbuf1
, &
ﬁ§_˙f
->
maö_addr
), 
my_œé⁄_°r
,

135 
	`ﬁ§_ù_to_°rög
(&
°rbuf2
, &
ù
), 
my_«mes
->
«me
)) {

138 
hash
 = 0; hash < 
HASHSIZE
; hash++) {

139 
db_íåy
 *
íåy
;

140 
li°_node
 *
li°_hód
, *list_node;

142 
li°_hód
 = &
œé⁄_li°
[
hash
];

143 
li°_node
 = 
li°_hód
->
√xt
;Üist_node !=Üist_head;Üist_node =Üist_node->next) {

145 
íåy
 = 
	`li°2db
(
li°_node
);

147 i‡(
NULL
 !
íåy
->
«mes
) {

149 
	`Ârötf
(
fm≠
, "Node('%s',%s,'%s','%s');\n", 
	`ﬁ§_ù_to_°rög
(&
°rbuf1
, &
íåy
->
‹igö©‹
),É¡ry->
«mes
->
«me
,

150 
	`ﬁ§_ù_to_°rög
(&
°rbuf2
, &
íåy
->
«mes
->
ù
), 
	`lookup_«me_œé⁄
(&íåy->
‹igö©‹
))) {

157 
	`OLSR_FOR_ALL_TC_ENTRIES
(
tc
) {

158 
	`OLSR_FOR_ALL_TC_EDGE_ENTRIES
(
tc
, 
tc_edge
) {

159 *
Œa
 = 
	`lookup_posôi⁄_œé⁄
(&
tc
->
addr
);

160 *
Œb
 = 
	`lookup_posôi⁄_œé⁄
(&
tc_edge
->
T_de°_addr
);

161 i‡(
NULL
 !
Œa
 && NULL !
Œb
) {

162 
lqãxtbuf„r
 
lqbuf„r
, 
lqbuf„r2
;

168 
	`Ârötf
(
fm≠
, "PLök('%s','%s',%s,%s,%s,%s);\n", 
	`ﬁ§_ù_to_°rög
(&
°rbuf1
, &
tc_edge
->
T_de°_addr
),

169 
	`ﬁ§_ù_to_°rög
(&
°rbuf2
, &
tc
->
addr
), 
	`gë_tc_edge_íåy_ãxt
(
tc_edge
, ',', &
lqbuf„r2
),

170 
	`gë_lökco°_ãxt
(
tc_edge
->
co°
, 
Ál£
, &
lqbuf„r
), 
Œa
, 
Œb
)) {

174 
lqãxtbuf„r
 
lqbuf„r
, 
lqbuf„r2
;

180 
	`Ârötf
(
fm≠
, "Lök('%s','%s',%s,%s);\n", 
	`ﬁ§_ù_to_°rög
(&
°rbuf1
, &
tc_edge
->
T_de°_addr
),

181 
	`ﬁ§_ù_to_°rög
(&
°rbuf2
, &
tc
->
addr
), 
	`gë_tc_edge_íåy_ãxt
(
tc_edge
, ',', &
lqbuf„r2
),

182 
	`gë_lökco°_ãxt
(
tc_edge
->
co°
, 
Ál£
, &
lqbuf„r
))) {

187 
	`OLSR_FOR_ALL_TC_EDGE_ENTRIES_END
(
tc
, 
tc_edge
);

189 
	`OLSR_FOR_ALL_TC_ENTRIES_END
(
tc
);

190 
	}
}

192 #i‚de‡
WIN32


199 c⁄° *
	gthe_fif⁄ame
 = 0;

200 
	gfif›ﬁ…ime
 = 0;

203 
m≠wrôe_pﬁl
(*
c⁄ãxt
 
__©åibuã__
 ((
unu£d
)))

205 
	gfif›ﬁ…ime
++;

206 i‡(0 =(
fif›ﬁ…ime
 & 7Ë&& 0 !
the_fif⁄ame
) {

207 
FILE
 *
fout
;

209 
	gfd
 = 
›í
(
the_fif⁄ame
, 
O_WRONLY
 | 
O_NONBLOCK
);

210 i‡(0 <
fd
) {

214 
f˙é
(
fd
, 
F_SETFL
, 
O_WRONLY
);

215 
	gfout
 = 
fd›í
(
fd
, "w");

216 i‡(0 !
fout
) {

217 
m≠wrôe_w‹k
(
fout
);

218 
f˛o£
(
fout
);

220 
u¶ìp
(1);

222 
˛o£
(
fd
);

229 
	$m≠wrôe_öô
(c⁄° *
fif⁄ame
)

231 
the_fif⁄ame
 = 
fif⁄ame
;

232 i‡(0 !
fif⁄ame
 && 0 != *fifoname) {

233 
	`u∆ök
(
fif⁄ame
);

234 i‡(0 > 
	`mkfifo
(
fif⁄ame
, 
S_IWUSR
 | 
S_IRUSR
 | 
S_IRGRP
 | 
S_IROTH
)) {

235 
	`OLSR_PRINTF
(1, "mkfifo(%s): %s", 
fif⁄ame
, 
	`°ªº‹
(
î∫o
));

236  
Ál£
;

238 
the_fif⁄ame
 = 
fif⁄ame
;

239 
	`ﬁ§_°¨t_timî
(100, 5, 
OLSR_TIMER_PERIODIC
, &
m≠wrôe_pﬁl
, 
NULL
, 0);

242  
åue
;

243 
	}
}

246 
	$m≠wrôe_exô
()

248 i‡(0 !
the_fif⁄ame
) {

249 
	`u∆ök
(
the_fif⁄ame
);

251 
the_fif⁄ame
 = 0;

253 
	}
}

	@lib/nameservice/src/mapwrite.h

32 #i‚de‡
_MAPWRITE_H


33 
	#_MAPWRITE_H


	)

35 
m≠wrôe_öô
(c⁄° *
fif⁄ame
);

36 
m≠wrôe_w‹k
(
FILE
 * 
fm≠
);

37 
m≠wrôe_exô
();

	@lib/nameservice/src/nameservice.c

39 
	#_GNU_SOURCE
 1

	)

41 
	~<°dio.h
>

42 
	~<°rög.h
>

43 
	~<°dlib.h
>

44 
	~<uni°d.h
>

45 
	~<˘y≥.h
>

46 
	~<sys/ty≥s.h
>

47 
	~<ªgex.h
>

48 
	~<sys/°©.h
>

49 
	~<sig«l.h
>

50 
	~<f˙é.h
>

52 
	~"ﬁ§.h
"

53 
	~"ùˇlc.h
"

54 
	~"√t_ﬁ§.h
"

55 
	~"routög_èbÀ.h
"

56 
	~"m™tisß.h
"

57 
	~"scheduÀr.h
"

58 
	~"∑r£r.h
"

59 
	~"du∂iˇã_£t.h
"

60 
	~"tc_£t.h
"

61 
	~"h«_£t.h
"

62 
	~"mid_£t.h
"

63 
	~"lök_£t.h
"

65 
	~"∂ugö_utû.h
"

66 
	~"«me£rvi˚.h
"

67 
	~"m≠wrôe.h
"

68 
	~"com∑t.h
"

71 
boﬁ
 
	g«me£rvi˚_c⁄figuªd
 = 
Ál£
;

74 
	gmy_ho°s_fûe
[
MAX_FILE
 + 1];

75 
	gmy_sighup_pid_fûe
[
MAX_FILE
 + 1];

77 
	gmy_add_ho°s
[
MAX_FILE
 + 1];

78 
	gmy_suffix
[
MAX_SUFFIX
];

79 
	gmy_öãrvÆ
 = 
EMISSION_INTERVAL
;

80 
	gmy_timeout
 = 
NAME_VALID_TIME
;

81 
	gmy_ªsﬁv_fûe
[
MAX_FILE
 + 1];

82 
	gmy_£rvi˚s_fûe
[
MAX_FILE
 + 1];

83 
	gmy_macs_fûe
[
MAX_FILE
 + 1];

84 
	gmy_«me_ch™ge_s¸ùt
[
MAX_FILE
 + 1];

85 
	gmy_£rvi˚s_ch™ge_s¸ùt
[
MAX_FILE
 + 1];

86 
	gmy_macs_ch™ge_s¸ùt
[
MAX_FILE
 + 1];

87 
	gœé⁄_ö_fûe
[
MAX_FILE
 + 1];

88 
	gmy_œé⁄_fûe
[
MAX_FILE
 + 1];

89 
	gmy_œt
 = 0.0, 
	gmy_l⁄
 = 0.0;

97 
li°_node
 
	g«me_li°
[
HASHSIZE
];

98 
«me_íåy
 *
	gmy_«mes
 = 
NULL
;

99 
timî_íåy
 *
	g«me_èbÀ_wrôe
 = 
NULL
;

100 
boﬁ
 
	g«me_èbÀ_ch™ged
 = 
åue
;

102 
li°_node
 
	g£rvi˚_li°
[
HASHSIZE
];

103 
«me_íåy
 *
	gmy_£rvi˚s
 = 
NULL
;

104 
boﬁ
 
	g£rvi˚_èbÀ_ch™ged
 = 
åue
;

106 
li°_node
 
	gmac_li°
[
HASHSIZE
];

107 
«me_íåy
 *
	gmy_macs
 = 
NULL
;

108 
boﬁ
 
	gmac_èbÀ_ch™ged
 = 
åue
;

110 
li°_node
 
	gf‹w¨dî_li°
[
HASHSIZE
];

111 
«me_íåy
 *
	gmy_f‹w¨dîs
 = 
NULL
;

112 
boﬁ
 
	gf‹w¨dî_èbÀ_ch™ged
 = 
åue
;

114 
li°_node
 
	gœé⁄_li°
[
HASHSIZE
];

115 
boﬁ
 
	gœé⁄_èbÀ_ch™ged
 = 
åue
;

118 
timî_íåy
 *
	gwrôe_fûe_timî
 = 
NULL
;

121 
timî_íåy
 *
	gmsg_gí_timî
 = 
NULL
;

124 
ªgex_t
 
	gªgex_t_«me
;

125 
ªgm©ch_t
 
	gªgm©ch_t_«me
;

128 
ªgex_t
 
	gªgex_t_£rvi˚
;

129 
	gpm©ch_£rvi˚
 = 10;

130 
ªgm©ch_t
 
	gªgm©ch_t_£rvi˚
[10];

136 
	$«me_c⁄°ru˘‹
()

138 
i
;

140 #ifde‡
WIN32


141 
Àn
;

143 
	`GëWödowsDúe˘‹y
(
my_ho°s_fûe
, 
MAX_FILE
 - 12);

144 
	`GëWödowsDúe˘‹y
(
my_£rvi˚s_fûe
, 
MAX_FILE
 - 12);

145 
	`GëWödowsDúe˘‹y
(
my_macs_fûe
, 
MAX_FILE
 - 12);

146 
	`GëWödowsDúe˘‹y
(
my_ªsﬁv_fûe
, 
MAX_FILE
 - 12);

148 
Àn
 = 
	`°æí
(
my_ho°s_fûe
);

149 i‡(
my_ho°s_fûe
[
Àn
 - 1] != '\\')

150 
	`°rsˇt
(
my_ho°s_fûe
, "\\", (
my_ho°_fûe
));

151 
	`°rsˇt
(
my_ho°s_fûe
, "ho°s_ﬁ§", (
my_ho°_fûe
));

153 
Àn
 = 
	`°æí
(
my_£rvi˚s_fûe
);

154 i‡(
my_£rvi˚s_fûe
[
Àn
 - 1] != '\\')

155 
	`°rsˇt
(
my_£rvi˚s_fûe
, "\\", (my_services_file));

156 
	`°rsˇt
(
my_£rvi˚s_fûe
, "services_olsr", (my_services_file));

158 
Àn
 = 
	`°æí
(
my_macs_fûe
);

159 i‡(
my_macs_fûe
[
Àn
 - 1] != '\\')

160 
	`°rsˇt
(
my_macs_fûe
, "\\", (my_macs_file));

161 
	`°rsˇt
(
my_macs_fûe
, "macs_olsr", (my_macs_file));

163 
Àn
 = 
	`°æí
(
my_ªsﬁv_fûe
);

164 i‡(
my_ªsﬁv_fûe
[
Àn
 - 1] != '\\')

165 
	`°rsˇt
(
my_ªsﬁv_fûe
, "\\", (my_resolv_file));

166 
	`°rsˇt
(
my_ªsﬁv_fûe
, "resolvconf_olsr", (my_resolv_file));

168 
	`°rs˝y
(
my_ho°s_fûe
, "/var/run/hosts_olsr", (my_hosts_file));

169 
	`°rs˝y
(
my_£rvi˚s_fûe
, "/var/run/services_olsr", (my_services_file));

170 
	`°rs˝y
(
my_macs_fûe
, "/var/run/macs_olsr", (my_macs_file));

171 
	`°rs˝y
(
my_ªsﬁv_fûe
, "/var/run/resolvconf_olsr", (my_resolv_file));

172 *
my_sighup_pid_fûe
 = 0;

175 
my_suffix
[0] = '\0';

176 
my_add_ho°s
[0] = '\0';

177 
my_œé⁄_fûe
[0] = '\0';

178 
œé⁄_ö_fûe
[0] = '\0';

179 
my_«me_ch™ge_s¸ùt
[0] = '\0';

180 
my_£rvi˚s_ch™ge_s¸ùt
[0] = '\0';

181 
my_macs_ch™ge_s¸ùt
[0] = '\0';

184 
i
 = 0; i < 
HASHSIZE
; i++) {

185 
	`li°_hód_öô
(&
«me_li°
[
i
]);

186 
	`li°_hód_öô
(&
f‹w¨dî_li°
[
i
]);

187 
	`li°_hód_öô
(&
£rvi˚_li°
[
i
]);

188 
	`li°_hód_öô
(&
mac_li°
[
i
]);

189 
	`li°_hód_öô
(&
œé⁄_li°
[
i
]);

192 
	}
}

195 
	$£t_«me£rvi˚_£rvî
(c⁄° *
vÆue
, *
d©a
, 
£t_∂ugö_∑ømëî_add⁄
 
add⁄
)

197 
ﬁ§_ù_addr
 
ù
;

198 
«me_íåy
 **
v
 = 
d©a
;

199 i‡(0 =
	`°æí
(
vÆue
)) {

200 *
v
 = 
	`add_«me_to_li°
(*v, "", 
add⁄
.
ui
, 
NULL
);

201 
	`OLSR_PRINTF
(1, "%†gŸ %†(maöáddªss)\n", "GŸ", 
vÆue
);

203 } i‡(0 < 
	`öë_±⁄
(
ﬁ§_˙f
->
ù_vîsi⁄
, 
vÆue
, &
ù
)) {

204 *
v
 = 
	`add_«me_to_li°
(*v, "", 
add⁄
.
ui
, &
ù
);

205 
	`OLSR_PRINTF
(1, "%†gŸ %s\n", "GŸ", 
vÆue
);

208 
	`OLSR_PRINTF
(0, "IŒegÆ IPáddªs†\"%s\"", 
vÆue
);

211 
	}
}

214 
	$£t_«me£rvi˚_«me
(c⁄° *
vÆue
, *
d©a
, 
£t_∂ugö_∑ømëî_add⁄
 
add⁄
)

216 
«me_íåy
 **
v
 = 
d©a
;

217 i‡(0 < 
	`°æí
(
vÆue
)) {

218 *
v
 = 
	`add_«me_to_li°
(*v, 
vÆue
, 
add⁄
.
ui
, 
NULL
);

219 
	`OLSR_PRINTF
(1, "%†gŸ %†(maöáddªss)\n", "GŸ", 
vÆue
);

222 
	`OLSR_PRINTF
(0, "IŒegÆÇamê\"%s\"", 
vÆue
);

225 
	}
}

228 
	$£t_«me£rvi˚_ho°
(c⁄° *
vÆue
, *
d©a
, 
£t_∂ugö_∑ømëî_add⁄
 
add⁄
)

230 
ﬁ§_ù_addr
 
ù
;

231 
«me_íåy
 **
v
 = 
d©a
;

232 i‡(0 < 
	`öë_±⁄
(
ﬁ§_˙f
->
ù_vîsi⁄
, 
add⁄
.
pc
, &
ù
)) {

234 *
v
 = 
	`add_«me_to_li°
(*v, 
vÆue
, 
NAME_HOST
, &
ù
);

235 
	`OLSR_PRINTF
(1, "%s: %†gŸ %s\n", "GŸ", 
add⁄
.
pc
, 
vÆue
);

238 
	`OLSR_PRINTF
(0, "%s: IŒegÆ IPáddªs†\"%s\"", 
add⁄
.
pc
, 
vÆue
);

241 
	}
}

244 
£t_«me£rvi˚_Êﬂt
(c⁄° *
vÆue
, *
d©a
, 
£t_∂ugö_∑ømëî_add⁄
 
add⁄
 
__©åibuã__
 ((
unu£d
)))

246 i‡(
	gd©a
 !
NULL
) {

247 
ssˇnf
(
vÆue
, "%f", (*)
d©a
);

248 
OLSR_PRINTF
(1, "%†Êﬂà%f\n", "GŸ", *(*)
d©a
);

250 
OLSR_PRINTF
(0, "%†Êﬂà%s\n", "Ign‹ed", 
vÆue
);

256 c⁄° 
ﬁ§d_∂ugö_∑ømëîs
 
	g∂ugö_∑ømëîs
[] = {

257 { .
«me
 = "öãrvÆ", .
	g£t_∂ugö_∑ømëî
 = &
£t_∂ugö_öt
, .
	gd©a
 = &
my_öãrvÆ
 },

258 { .
	g«me
 = "timeout", .
	g£t_∂ugö_∑ømëî
 = &
£t_«me£rvi˚_Êﬂt
, .
	gd©a
 = &
my_timeout
 },

259 { .
	g«me
 = "sighup-pid-fûe", .
	g£t_∂ugö_∑ømëî
 = &
£t_∂ugö_°rög
, .
	gd©a
 = &
my_sighup_pid_fûe
, .
	gadd⁄
 = {(my_sighup_pid_file)} },

260 { .
	g«me
 = "ho°s-fûe", .
	g£t_∂ugö_∑ømëî
 = &
£t_∂ugö_°rög
, .
	gd©a
 = &
my_ho°s_fûe
, .
	gadd⁄
 = {(my_hosts_file)} },

261 { .
	g«me
 = "«me-ch™ge-s¸ùt", .
	g£t_∂ugö_∑ømëî
 = &
£t_∂ugö_°rög
, .
	gd©a
 = &
my_«me_ch™ge_s¸ùt
, .
	gadd⁄
 = {(my_name_change_script)} },

262 { .
	g«me
 = "£rvi˚s-ch™ge-s¸ùt", .
	g£t_∂ugö_∑ømëî
 = &
£t_∂ugö_°rög
, .
	gd©a
 = &
my_£rvi˚s_ch™ge_s¸ùt
, .
	gadd⁄
 = {(my_services_change_script)} },

263 { .
	g«me
 = "macs-ch™ge-s¸ùt", .
	g£t_∂ugö_∑ømëî
 = &
£t_∂ugö_°rög
, .
	gd©a
 = &
my_macs_ch™ge_s¸ùt
, .
	gadd⁄
 = {(my_macs_change_script)} },

264 { .
	g«me
 = "ªsﬁv-fûe", .
	g£t_∂ugö_∑ømëî
 = &
£t_∂ugö_°rög
, .
	gd©a
 = &
my_ªsﬁv_fûe
, .
	gadd⁄
 = {(my_resolv_file)} },

265 { .
	g«me
 = "suffix", .
	g£t_∂ugö_∑ømëî
 = &
£t_∂ugö_°rög
, .
	gd©a
 = &
my_suffix
, .
	gadd⁄
 = {(my_suffix)} },

266 { .
	g«me
 = "add-ho°s", .
	g£t_∂ugö_∑ømëî
 = &
£t_∂ugö_°rög
, .
	gd©a
 = &
my_add_ho°s
, .
	gadd⁄
 = {(my_add_hosts)} },

267 { .
	g«me
 = "£rvi˚s-fûe", .
	g£t_∂ugö_∑ømëî
 = &
£t_∂ugö_°rög
, .
	gd©a
 = &
my_£rvi˚s_fûe
, .
	gadd⁄
 = {(my_services_file)} },

268 { .
	g«me
 = "macs-fûe", .
	g£t_∂ugö_∑ømëî
 = &
£t_∂ugö_°rög
, .
	gd©a
 = &
my_macs_fûe
, .
	gadd⁄
 = {(my_macs_file)} },

269 { .
	g«me
 = "œt", .
	g£t_∂ugö_∑ømëî
 = &
£t_«me£rvi˚_Êﬂt
, .
	gd©a
 = &
my_œt
 },

270 { .
	g«me
 = "l⁄", .
	g£t_∂ugö_∑ømëî
 = &
£t_«me£rvi˚_Êﬂt
, .
	gd©a
 = &
my_l⁄
 },

271 { .
	g«me
 = "œé⁄-fûe", .
	g£t_∂ugö_∑ømëî
 = &
£t_∂ugö_°rög
, .
	gd©a
 = &
my_œé⁄_fûe
, .
	gadd⁄
 = {(my_latlon_file)} },

272 { .
	g«me
 = "œé⁄-öfûe", .
	g£t_∂ugö_∑ømëî
 = &
£t_∂ugö_°rög
, .
	gd©a
 = &
œé⁄_ö_fûe
, .
	gadd⁄
 = {(latlon_in_file)} },

273 { .
	g«me
 = "dns-£rvî", .
	g£t_∂ugö_∑ømëî
 = &
£t_«me£rvi˚_£rvî
, .
	gd©a
 = &
my_f‹w¨dîs
, .
	gadd⁄
 = {
NAME_FORWARDER
} },

274 { .
	g«me
 = "«me", .
	g£t_∂ugö_∑ømëî
 = &
£t_«me£rvi˚_«me
, .
	gd©a
 = &
my_«mes
, .
	gadd⁄
 = {
NAME_HOST
} },

275 { .
	g«me
 = "£rvi˚", .
	g£t_∂ugö_∑ømëî
 = &
£t_«me£rvi˚_«me
, .
	gd©a
 = &
my_£rvi˚s
, .
	gadd⁄
 = {
NAME_SERVICE
} },

276 { .
	g«me
 = "mac", .
	g£t_∂ugö_∑ømëî
 = &
£t_«me£rvi˚_«me
, .
	gd©a
 = &
my_macs
, .
	gadd⁄
 = {
NAME_MACADDR
} },

277 { .
	g«me
 = "", .
	g£t_∂ugö_∑ømëî
 = &
£t_«me£rvi˚_ho°
, .
	gd©a
 = &
my_«mes
 },

282 
	$ﬁ§d_gë_∂ugö_∑ømëîs
(c⁄° 
ﬁ§d_∂ugö_∑ømëîs
 **
∑øms
, *
size
)

284 *
∑øms
 = 
∂ugö_∑ømëîs
;

285 *
size
 = (
∂ugö_∑ømëîs
) / (*plugin_parameters);

286 
	}
}

292 
«me_íåy
 *

293 
	$add_«me_to_li°
(
«me_íåy
 *
my_li°
, c⁄° *
vÆue
, 
ty≥
, c⁄° 
ﬁ§_ù_addr
 *
ù
)

295 
«me_íåy
 *
tmp
 = 
	`ﬁ§_mÆloc
((name_entry),

297 
tmp
->
«me
 = 
	`°∫dup
(
vÆue
, 
MAX_NAME
);

298 
tmp
->
Àn
 = 
	`°æí
—mp->
«me
);

299 
tmp
->
ty≥
 =Åype;

301 i‡(
ù
 =
NULL
)

302 
	`mem£t
(&
tmp
->
ù
, 0, (tmp->ip));

304 
tmp
->
ù
 = *ip;

305 
tmp
->
√xt
 = 
my_li°
;

306  
tmp
;

307 
	}
}

323 
	$«me_öô
()

326 
	`ﬁ§_∑r£r_add_fun˘i⁄
(&
ﬁ§_∑r£r
, 
PARSER_TYPE
);

329 
msg_gí_timî
 = 
	`ﬁ§_°¨t_timî
(
my_öãrvÆ
 * 
MSEC_PER_SEC
, 
EMISSION_JITTER
, 
OLSR_TIMER_PERIODIC
, &
ﬁ§_«mesvc_gí
, 
NULL
, 0);

332 
	}
}

334 
	$«me_œzy_öô
() {

335 
«me_íåy
 *
«me
;

336 
ﬁ§_ù_addr
 
ùz
;

337 
ªt
;

340 c⁄° *
ªgex_«me
 = "^[[:alnum:]_.-]+$";

342 
size_t
 
ªgex_size
;

343 *
ªgex_£rvi˚
;

346 i‡(
	`ùequÆ
(&
ﬁ§_˙f
->
maö_addr
, &
ﬁ§_ù_zîo
)) {

349 
«me£rvi˚_c⁄figuªd
 = 
åue
;

351 
ªgex_size
 = 256 * (Ë+ 
	`°æí
(
my_suffix
);

352 
ªgex_£rvi˚
 = 
	`ﬁ§_mÆloc
(
ªgex_size
, "new *char fromÇame_init forÑegex_service");

353 
	`mem£t
(&
ùz
, 0, (ipz));

356 i‡((
ªt
 = 
	`ªgcomp
(&
ªgex_t_«me
, 
ªgex_«me
, 
REG_EXTENDED
)) != 0) {

367 
	`OLSR_PRINTF
(0, "compû©i⁄ o‡ªgex \"%s\" f‹ ho°«mêÁûed", 
ªgex_«me
);

375 
	`°rs˝y
(
ªgex_£rvi˚
, "^[[:Ænum:]]+://(([[:Ænum:]_.-]+", 
ªgex_size
);

376 
	`°rsˇt
(
ªgex_£rvi˚
, 
my_suffix
, 
ªgex_size
);

377 
	`°rsˇt
(
ªgex_£rvi˚
,

379 
ªgex_size
);

382 i‡((
ªt
 = 
	`ªgcomp
(&
ªgex_t_£rvi˚
, 
ªgex_£rvi˚
, 
REG_EXTENDED
)) != 0) {

393 
	`OLSR_PRINTF
(0, "compû©i⁄ o‡ªgex \"%s\" f‹ ho°«mêÁûed", 
ªgex_«me
);

395 
	`‰ì
(
ªgex_£rvi˚
);

396 
ªgex_£rvi˚
 = 
NULL
;

402 
«me
 = 
my_«mes
;Çamê!
NULL
;Çamê«me->
√xt
) {

403 i‡(
	`ùequÆ
(&
«me
->
ù
, &
ùz
)) {

404 
	`OLSR_PRINTF
(2, "NAME PLUGIN: in£π maöádd∏f‹Çamê%†\n", 
«me
->name);

405 
«me
->
ù
 = 
ﬁ§_˙f
->
maö_addr
;

408 
«me
 = 
my_f‹w¨dîs
;Çamê!
NULL
;Çamê«me->
√xt
) {

409 i‡(
«me
->
ù
.
v4
.
s_addr
 == 0) {

410 
	`OLSR_PRINTF
(2, "NAME PLUGIN: in£π maöádd∏f‹Çamê%†\n", 
«me
->name);

411 
«me
->
ù
 = 
ﬁ§_˙f
->
maö_addr
;

416 
my_«mes
 = 
	`ªmove_n⁄vÆid_«mes_‰om_li°
(my_«mes, 
NAME_HOST
);

417 
my_f‹w¨dîs
 = 
	`ªmove_n⁄vÆid_«mes_‰om_li°
(my_f‹w¨dîs, 
NAME_FORWARDER
);

418 
my_£rvi˚s
 = 
	`ªmove_n⁄vÆid_«mes_‰om_li°
(my_£rvi˚s, 
NAME_SERVICE
);

419 
my_macs
 = 
	`ªmove_n⁄vÆid_«mes_‰om_li°
(my_macs, 
NAME_MACADDR
);

421 
	`m≠wrôe_öô
(
my_œé⁄_fûe
);

424 
	}
}

426 
«me_íåy
 *

427 
	$ªmove_n⁄vÆid_«mes_‰om_li°
(
«me_íåy
 *
my_li°
, 
ty≥
)

429 
«me_íåy
 *
√xt
 = 
my_li°
;

430 
boﬁ
 
vÆid
 = 
Ál£
;

431 i‡(
my_li°
 =
NULL
) {

432  
NULL
;

435 
ty≥
) {

436 
NAME_HOST
:

437 
vÆid
 = 
	`is_«me_wñlf‹med
(
my_li°
->
«me
Ë&& 
	`Ælowed_ù
(&my_li°->
ù
);

439 
NAME_FORWARDER
:

440 
vÆid
 = 
	`Ælowed_ù
(&
my_li°
->
ù
);

442 
NAME_SERVICE
:

443 
vÆid
 = 
	`Ælowed_£rvi˚
(
my_li°
->
«me
);

445 
NAME_MACADDR
:

446 
vÆid
 = 
	`is_mac_wñlf‹med
(
my_li°
->
«me
);

448 
NAME_LATLON
:

449 
vÆid
 = 
	`is_œé⁄_wñlf‹med
(
my_li°
->
«me
);

453 i‡(!
vÆid
) {

454 
ùaddr_°r
 
°rbuf
;

455 
	`OLSR_PRINTF
(1, "NAME PLUGIN: invÆid o∏mÆf‹medÖ¨amëî %†(%s), fix you∏c⁄fig!\n", 
my_li°
->
«me
,

456 
	`ﬁ§_ù_to_°rög
(&
°rbuf
, &
my_li°
->
ù
));

457 
√xt
 = 
my_li°
->next;

458 
	`‰ì
(
my_li°
->
«me
);

459 
my_li°
->
«me
 = 
NULL
;

460 
	`‰ì
(
my_li°
);

461 
my_li°
 = 
NULL
;

462  
	`ªmove_n⁄vÆid_«mes_‰om_li°
(
√xt
, 
ty≥
);

464 
ùaddr_°r
 
°rbuf
;

465 
	`OLSR_PRINTF
(2, "NAME PLUGIN: vÆid©ê∑ømëî %†(%sË-> OK\n", 
my_li°
->
«me
, 
	`ﬁ§_ù_to_°rög
(&
°rbuf
, &my_li°->
ù
));

466 
my_li°
->
√xt
 = 
	`ªmove_n⁄vÆid_«mes_‰om_li°
(my_li°->√xt, 
ty≥
);

467  
my_li°
;

469 
	}
}

477 
	$«me_de°ru˘‹
()

479 
	`OLSR_PRINTF
(2, "NAME PLUGIN:Éxit. cleaning up...\n");

481 
	`‰ì_«me_íåy_li°
(&
my_«mes
);

482 
	`‰ì_«me_íåy_li°
(&
my_£rvi˚s
);

483 
	`‰ì_«me_íåy_li°
(&
my_macs
);

484 
	`‰ì_«me_íåy_li°
(&
my_f‹w¨dîs
);

486 
	`‰ì_Æl_li°_íåõs
(
«me_li°
);

487 
	`‰ì_Æl_li°_íåõs
(
£rvi˚_li°
);

488 
	`‰ì_Æl_li°_íåõs
(
mac_li°
);

489 
	`‰ì_Æl_li°_íåõs
(
f‹w¨dî_li°
);

490 
	`‰ì_Æl_li°_íåõs
(
œé⁄_li°
);

492 
	`ﬁ§_°›_timî
(
wrôe_fûe_timî
);

493 
	`ﬁ§_°›_timî
(
msg_gí_timî
);

495 
	`ªg‰ì
(&
ªgex_t_«me
);

496 
	`ªg‰ì
(&
ªgex_t_£rvi˚
);

497 
	`m≠wrôe_exô
();

498 
	}
}

502 
	$‰ì_Æl_li°_íåõs
(
li°_node
 *
this_db_li°
)

504 
db_íåy
 *
db
;

505 
li°_node
 *
li°_hód
, *li°_node, *
li°_node_√xt
;

507 
i
;

509 
i
 = 0; i < 
HASHSIZE
; i++) {

511 
li°_hód
 = &
this_db_li°
[
i
];

513 
li°_node
 = 
li°_hód
->
√xt
;Üi°_nodê!li°_hód;Üi°_nodê
li°_node_√xt
) {

516 
li°_node_√xt
 = 
li°_node
->
√xt
;

518 
db
 = 
	`li°2db
(
li°_node
);

519 
	`ﬁ§_«mesvc_dñëe_db_íåy
(
db
);

522 
	}
}

528 
ﬁ§_expúe_wrôe_fûe_timî
(*
c⁄ãxt
 
__©åibuã__
 ((
unu£d
)))

530 
	gwrôe_fûe_timî
 = 
NULL
;

532 
wrôe_ªsﬁv_fûe
();

533 
wrôe_ho°s_fûe
();

534 
wrôe_£rvi˚s_fûe
(
Ál£
);

535 
wrôe_£rvi˚s_fûe
(
åue
);

536 #ifde‡
WIN32


537 
wrôe_œé⁄_fûe
();

546 
	$ﬁ§_°¨t_wrôe_fûe_timî
()

548 i‡(
wrôe_fûe_timî
) {

552 
wrôe_fûe_timî
 = 
	`ﬁ§_°¨t_timî
(5 * 
MSEC_PER_SEC
, 5, 
OLSR_TIMER_ONESHOT
, 
ﬁ§_expúe_wrôe_fûe_timî
, 
NULL
, 0);

553 
	}
}

559 
	$ﬁ§_«mesvc_dñëe_db_íåy
(
db_íåy
 *
db
)

561 
ùaddr_°r
 
°rbuf
;

562 
	`OLSR_PRINTF
(2, "NAME PLUGIN: %†timed out... dñëög\n", 
	`ﬁ§_ù_to_°rög
(&
°rbuf
, &
db
->
‹igö©‹
));

564 
	`ﬁ§_°¨t_wrôe_fûe_timî
();

565 
	`ﬁ§_°›_timî
(
db
->
db_timî
);

568 
	`‰ì_«me_íåy_li°
(&
db
->
«mes
);

569 
	`li°_ªmove
(&
db
->
db_li°
);

570 
	`‰ì
(
db
);

571 
	}
}

577 
	$ﬁ§_«me£rvi˚_expúe_db_timî
(*
c⁄ãxt
)

579 
db_íåy
 *
db
;

581 
db
 = (
db_íåy
 *)
c⁄ãxt
;

582 
db
->
db_timî
 = 
NULL
;

584 
	`ﬁ§_«mesvc_dñëe_db_íåy
(
db
);

585 
	}
}

591 
ﬁ§_«mesvc_gí
(*
foo
 
__©åibuã__
 ((
unu£d
)))

594 
	gbuf„r
[10240];

595 
ﬁ§_mesßge
 *
	gmesßge
 = (ﬁ§_mesßgê*)
buf„r
;

596 
öãrÁ˚
 *
	gi‚
;

597 
	g«mesize
;

599 i‡(!
	g«me£rvi˚_c⁄figuªd
) {

600 
«me_œzy_öô
();

601 i‡(!
	g«me£rvi˚_c⁄figuªd
) {

606 i‡(
	gﬁ§_˙f
->
	gù_vîsi⁄
 =
AF_INET
) {

608 
mesßge
->
v4
.
ﬁ§_msgty≥
 = 
MESSAGE_TYPE
;

609 
	gmesßge
->
	gv4
.
	gﬁ§_vtime
 = 
ª…ime_to_me
(
my_timeout
 * 
MSEC_PER_SEC
);

610 
mem˝y
(&
mesßge
->
v4
.
‹igö©‹
, &
ﬁ§_˙f
->
maö_addr
, ol§_˙f->
ùsize
);

611 
	gmesßge
->
	gv4
.
	gâl
 = 
MAX_TTL
;

612 
	gmesßge
->
	gv4
.
	gh›˙t
 = 0;

613 
	gmesßge
->
	gv4
.
	g£qno
 = 
ht⁄s
(
gë_msg_£qno
());

615 
	g«mesize
 = 
íˇp_«memsg
((
«memsg
 *)
ARM_NOWARN_ALIGN
(&
mesßge
->
v4
.message));

616 
	g«mesize
 = 
«mesize
 + (
ﬁ§msg
);

618 
	gmesßge
->
	gv4
.
	gﬁ§_msgsize
 = 
ht⁄s
(
«mesize
);

621 
	gmesßge
->
	gv6
.
	gﬁ§_msgty≥
 = 
MESSAGE_TYPE
;

622 
	gmesßge
->
	gv6
.
	gﬁ§_vtime
 = 
ª…ime_to_me
(
my_timeout
 * 
MSEC_PER_SEC
);

623 
mem˝y
(&
mesßge
->
v6
.
‹igö©‹
, &
ﬁ§_˙f
->
maö_addr
, ol§_˙f->
ùsize
);

624 
	gmesßge
->
	gv6
.
	gâl
 = 
MAX_TTL
;

625 
	gmesßge
->
	gv6
.
	gh›˙t
 = 0;

626 
	gmesßge
->
	gv6
.
	g£qno
 = 
ht⁄s
(
gë_msg_£qno
());

628 
	g«mesize
 = 
íˇp_«memsg
((
«memsg
 *)
ARM_NOWARN_ALIGN
(&
mesßge
->
v6
.message));

629 
	g«mesize
 = 
«mesize
 + (
ﬁ§msg6
);

631 
	gmesßge
->
	gv6
.
	gﬁ§_msgsize
 = 
ht⁄s
(
«mesize
);

635 
	gi‚
 = 
i‚ë
; i‚; i‚ = 
i‚
->
öt_√xt
) {

636 
OLSR_PRINTF
(3, "NAME PLUGIN: Gíî©ögÖackë - [%s]\n", 
i‚
->
öt_«me
);

638 i‡(
√t_outbuf„r_push
(
i‚
, 
mesßge
, 
«mesize
) !=Çamesize) {

640 
√t_ouçut
(
i‚
);

641 i‡(
√t_outbuf„r_push
(
i‚
, 
mesßge
, 
«mesize
) !=Çamesize) {

642 
OLSR_PRINTF
(1, "NAME PLUGIN: couldÇŸ síd o¿öãrÁ˚: %s\n", 
i‚
->
öt_«me
);

651 
boﬁ


652 
ﬁ§_∑r£r
(
ﬁ§_mesßge
 *
m
, 
öãrÁ˚
 *
ö_if
 
__©åibuã__
 ((
unu£d
)), 
ﬁ§_ù_addr
 *
ùaddr
)

654 
«memsg
 *
	g«memesßge
;

655 
ﬁ§_ù_addr
 
	g‹igö©‹
;

656 
ﬁ§_ª…ime
 
	gvtime
;

657 
	gsize
;

659 i‡(!
	g«me£rvi˚_c⁄figuªd
) {

660 
«me_œzy_öô
();

661 i‡(!
	g«me£rvi˚_c⁄figuªd
) {

662  
	gÁl£
;

667 i‡(
	gﬁ§_˙f
->
	gù_vîsi⁄
 =
AF_INET
) {

668 
mem˝y
(&
‹igö©‹
, &
m
->
v4
.‹igö©‹, 
ﬁ§_˙f
->
ùsize
);

670 
mem˝y
(&
‹igö©‹
, &
m
->
v6
.‹igö©‹, 
ﬁ§_˙f
->
ùsize
);

674 i‡(
	gﬁ§_˙f
->
	gù_vîsi⁄
 =
AF_INET
) {

675 
vtime
 = 
me_to_ª…ime
(
m
->
v4
.
ﬁ§_vtime
);

676 
	gsize
 = 
¡ohs
(
m
->
v4
.
ﬁ§_msgsize
);

677 
	g«memesßge
 = (
«memsg
 *)
ARM_NOWARN_ALIGN
(&
m
->
v4
.
mesßge
);

679 
	gvtime
 = 
me_to_ª…ime
(
m
->
v6
.
ﬁ§_vtime
);

680 
	gsize
 = 
¡ohs
(
m
->
v6
.
ﬁ§_msgsize
);

681 
	g«memesßge
 = (
«memsg
 *)
ARM_NOWARN_ALIGN
(&
m
->
v6
.
mesßge
);

686 i‡(
ùequÆ
(&
‹igö©‹
, &
ﬁ§_˙f
->
maö_addr
))

687  
	gÁl£
;

691 i‡(
check_√ighb‹_lök
(
ùaddr
Ë!
SYM_LINK
) {

692 
ùaddr_°r
 
°rbuf
;

693 
OLSR_PRINTF
(3, "NAME PLUGIN: Re˚ived msg from NON SYMÇeighb‹ %s\n", 
ﬁ§_ù_to_°rög
(&
°rbuf
, 
ùaddr
));

694  
	gÁl£
;

697 
upd©e_«me_íåy
(&
‹igö©‹
, 
«memesßge
, 
size
, 
vtime
);

700  
	gåue
;

711 
	$íˇp_«memsg
(
«memsg
 *
msg
)

713 
«me_íåy
 *
my_«me
;

716 *
pos
 = (*)
msg
 + (
«memsg
);

717 
i
 = 0;

720 
my_«me
 = 
my_«mes
; my_«mê!
NULL
; my_«mêmy_«me->
√xt
) {

721 
pos
 = 
	`¸óã_∑ckë
((
«me
 *)
	`ARM_NOWARN_ALIGN
’os), 
my_«me
);

722 
i
++;

725 
my_«me
 = 
my_f‹w¨dîs
; my_«mê!
NULL
; my_«mêmy_«me->
√xt
) {

726 
pos
 = 
	`¸óã_∑ckë
((
«me
 *)
	`ARM_NOWARN_ALIGN
’os), 
my_«me
);

727 
i
++;

730 
my_«me
 = 
my_£rvi˚s
; my_«mê!
NULL
; my_«mêmy_«me->
√xt
) {

731 
pos
 = 
	`¸óã_∑ckë
((
«me
 *)
	`ARM_NOWARN_ALIGN
’os), 
my_«me
);

732 
i
++;

735 
my_«me
 = 
my_macs
; my_«mê!
NULL
; my_«mêmy_«me->
√xt
) {

736 
pos
 = 
	`¸óã_∑ckë
((
«me
 *)
	`ARM_NOWARN_ALIGN
’os), 
my_«me
);

737 
i
++;

740 i‡('\0' !
œé⁄_ö_fûe
[0]) {

741 
FILE
 *
ö
 = 
	`f›í
(
œé⁄_ö_fûe
, "r");

742 i‡(
ö
 !
NULL
) {

743 i‡(
	`fsˇnf
(
ö
, "%f,%f", &
my_œt
, &
my_l⁄
)) {}

744 
	`f˛o£
(
ö
);

746 
	`OLSR_PRINTF
(0, "NAME PLUGIN: c™àªadÜ©l⁄ i¿fûê%s\n", 
œé⁄_ö_fûe
);

749 i‡(0.0 !
my_œt
 && 0.0 !
my_l⁄
) {

750 
s
[64];

751 
«me_íåy
 
e
;

752 
	`mem£t
(&
e
, 0, (e));

753 
	`•rötf
(
s
, "%f,%f,%d", 
my_œt
, 
my_l⁄
, 
	`gë_isdefh«_œé⁄
());

754 
e
.
Àn
 = 
	`°æí
(
s
);

755 
e
.
ty≥
 = 
NAME_LATLON
;

756 
e
.
«me
 = 
s
;

757 
	`lookup_defh«_œé⁄
(&
e
.
ù
);

758 
pos
 = 
	`¸óã_∑ckë
((
«me
 *)
	`ARM_NOWARN_ALIGN
’os), &
e
);

759 
i
++;

762 
msg
->
ƒ_«mes
 = 
	`ht⁄s
(
i
);

763 
msg
->
vîsi⁄
 = 
	`ht⁄s
(
NAME_PROTOCOL_VERSION
);

765  
pos
 - (*)
msg
;

766 
	}
}

775 
	$¸óã_∑ckë
(
«me
 *
to
, 
«me_íåy
 *
‰om
)

777 *
pos
 = (*)
to
;

778 
k
;

779 
ùaddr_°r
 
°rbuf
;

780 
	`OLSR_PRINTF
(3, "NAME PLUGIN: A¬ouncögÇamê%†(%sË%d\n", 
‰om
->
«me
, 
	`ﬁ§_ù_to_°rög
(&
°rbuf
, &‰om->
ù
), from->
Àn
);

781 
to
->
ty≥
 = 
	`ht⁄s
(
‰om
->type);

782 
to
->
Àn
 = 
	`ht⁄s
(
‰om
->len);

783 
to
->
ù
 = 
‰om
->ip;

784 
pos
 +(
«me
);

785 
	`mem˝y
(
pos
, 
‰om
->
«me
, from->
Àn
);

786 
pos
 +
‰om
->
Àn
;

787 
k
 = 
‰om
->
Àn
; (k & 3) != 0; k++)

788 *
pos
++ = '\0';

789  
pos
;

790 
	}
}

796 
	$deˇp_«memsg
(
«me
 *
‰om_∑ckë
, 
«me_íåy
 **
to
, 
boﬁ
 * 
this_èbÀ_ch™ged
)

798 
ùaddr_°r
 
°rbuf
;

799 
«me_íåy
 *
tmp
;

800 
«me_íåy
 *
Æªady_ßved_«me_íåõs
;

801 *
«me
 = (*)
‰om_∑ckë
 + (name);

802 
ty≥_of_‰om_∑ckë
 = 
	`¡ohs
(
‰om_∑ckë
->
ty≥
);

803 
Àn_of_«me
 = 
	`¡ohs
(
‰om_∑ckë
->
Àn
);

804 
	`OLSR_PRINTF
(4, "NAME PLUGIN: deˇ∞ty≥=%d,Üí=%d,Çame=%s\n", 
ty≥_of_‰om_∑ckë
, 
Àn_of_«me
, 
«me
);

807 i‡((
ty≥_of_‰om_∑ckë
 =
NAME_HOST
 && !
	`is_«me_wñlf‹med
(
«me
))

808 || (
ty≥_of_‰om_∑ckë
 =
NAME_SERVICE
 && !
	`is_£rvi˚_wñlf‹med
(
«me
))

809 || (
ty≥_of_‰om_∑ckë
 =
NAME_MACADDR
 && !
	`is_mac_wñlf‹med
(
«me
))

810 || (
ty≥_of_‰om_∑ckë
 =
NAME_LATLON
 && !
	`is_œé⁄_wñlf‹med
(
«me
))) {

811 
	`OLSR_PRINTF
(4, "NAME PLUGIN: invÆidÇamê[%s]Ñe˚ived, skùpög.\n", 
«me
);

816 i‡(
Àn_of_«me
 > 
MAX_NAME
 || 
	`°æí
(
«me
Ë!Àn_of_«mê|| 
NULL
 !
	`°rchr
(name, '\\') || NULL != strchr(name, '\'')) {

817 
	`OLSR_PRINTF
(4, "NAME PLUGIN: from_packet->len %d > MAX_NAME %d or from_packet->len %d !0 strlen(name [%s] inÖacket)\n",

818 
Àn_of_«me
, 
MAX_NAME
,Üí_of_«me, 
«me
);

823 
Æªady_ßved_«me_íåõs
 = (*
to
);áÃódy_ßved_«me_íåõ†!
NULL
;

824 
Æªady_ßved_«me_íåõs
 =áÃódy_ßved_«me_íåõs->
√xt
) {

825 i‡((
ty≥_of_‰om_∑ckë
 =
NAME_HOST
 ||Åy≥_of_‰om_∑ckë =
NAME_SERVICE
)

826 && 
	`°∫cmp
(
Æªady_ßved_«me_íåõs
->
«me
,Çame, 
Àn_of_«me
) == 0) {

827 
	`OLSR_PRINTF
(4, "NAME PLUGIN:Ñe˚ivedÇamê‹ sîvi˚É¡ry %†(%sËÆªady i¿hashÅabÀ\n", 
«me
,

828 
	`ﬁ§_ù_to_°rög
(&
°rbuf
, &
Æªady_ßved_«me_íåõs
->
ù
));

830 } i‡(
ty≥_of_‰om_∑ckë
 =
NAME_FORWARDER
 && 
	`ùequÆ
(&
Æªady_ßved_«me_íåõs
->
ù
, &
‰om_∑ckë
->ip)) {

831 
	`OLSR_PRINTF
(4, "NAME PLUGIN:Ñe˚ived f‹w¨dîÉ¡ry %†(%sËÆªady i¿hashÅabÀ\n", 
«me
,

832 
	`ﬁ§_ù_to_°rög
(&
°rbuf
, &
Æªady_ßved_«me_íåõs
->
ù
));

834 } i‡(
ty≥_of_‰om_∑ckë
 =
NAME_LATLON
) {

835 i‡(0 !
	`°∫cmp
(
Æªady_ßved_«me_íåõs
->
«me
,Çame, 
Àn_of_«me
)) {

836 
	`OLSR_PRINTF
(4, "NAME PLUGIN: upd©ögÇamê%†-> %†(%s)\n", 
Æªady_ßved_«me_íåõs
->
«me
,Çame,

837 
	`ﬁ§_ù_to_°rög
(&
°rbuf
, &
Æªady_ßved_«me_íåõs
->
ù
));

838 
	`‰ì
(
Æªady_ßved_«me_íåõs
->
«me
);

839 
Æªady_ßved_«me_íåõs
->
«me
 = 
	`ﬁ§_mÆloc
(
Àn_of_«me
 + 1, "updÇame_entryÇame");

840 
	`°rs˝y
(
Æªady_ßved_«me_íåõs
->
«me
,Çame, 
Àn_of_«me
 + 1);

842 *
this_èbÀ_ch™ged
 = 
åue
;

843 
	`ﬁ§_°¨t_wrôe_fûe_timî
();

845 i‡(!
	`ùequÆ
(&
Æªady_ßved_«me_íåõs
->
ù
, &
‰om_∑ckë
->ip)) {

846 
ùaddr_°r
 
°rbuf2
, 
°rbuf3
;

847 
	`OLSR_PRINTF
(4, "NAME PLUGIN: upd©ög i∞%†-> %†(%s)\n", 
	`ﬁ§_ù_to_°rög
(&
°rbuf
, &
Æªady_ßved_«me_íåõs
->
ù
),

848 
	`ﬁ§_ù_to_°rög
(&
°rbuf2
, &
‰om_∑ckë
->
ù
), ol§_ù_to_°rög(&
°rbuf3
, &
Æªady_ßved_«me_íåõs
->ip));

849 
Æªady_ßved_«me_íåõs
->
ù
 = 
‰om_∑ckë
->ip;

851 *
this_èbÀ_ch™ged
 = 
åue
;

852 
	`ﬁ§_°¨t_wrôe_fûe_timî
();

854 i‡(!*
this_èbÀ_ch™ged
) {

855 
	`OLSR_PRINTF
(4, "NAME PLUGIN:Ñe˚ivedÜ©l⁄É¡ry %†(%sËÆªady i¿hashÅabÀ\n", 
«me
,

856 
	`ﬁ§_ù_to_°rög
(&
°rbuf
, &
Æªady_ßved_«me_íåõs
->
ù
));

863 
tmp
 = 
	`ﬁ§_mÆloc
((
«me_íåy
), "newÇame_entry");

864 
tmp
->
ty≥
 = 
	`¡ohs
(
‰om_∑ckë
->type);

865 
tmp
->
Àn
 = 
Àn_of_«me
 > 
MAX_NAME
 ? MAX_NAME : 
	`¡ohs
(
‰om_∑ckë
->len);

866 
tmp
->
«me
 = 
	`ﬁ§_mÆloc
—mp->
Àn
 + 1, "newÇame_entryÇame");

867 
tmp
->
ù
 = 
‰om_∑ckë
->ip;

868 
	`°rs˝y
(
tmp
->
«me
,Çame,Åmp->
Àn
 + 1);

870 
	`OLSR_PRINTF
(3, "\nNAME PLUGIN: cª©ê√wÇame/£rvi˚/f‹w¨dîÉ¡ry %†(%sË[Àn=%d] [ty≥=%d] i¿lökedÜi°\n", 
tmp
->
«me
,

871 
	`ﬁ§_ù_to_°rög
(&
°rbuf
, &
tmp
->
ù
),Åmp->
Àn
,Åmp->
ty≥
);

873 *
this_èbÀ_ch™ged
 = 
åue
;

874 
	`ﬁ§_°¨t_wrôe_fûe_timî
();

877 
tmp
->
√xt
 = *
to
;

878 *
to
 = 
tmp
;

879 
	}
}

886 
	$upd©e_«me_íåy
(
ﬁ§_ù_addr
 *
‹igö©‹
, 
«memsg
 *
msg
, 
msg_size
, 
ﬁ§_ª…ime
 
vtime
)

888 
ùaddr_°r
 
°rbuf
;

889 *
pos
, *
íd_pos
;

890 
«me
 *
‰om_∑ckë
;

891 
i
;

893 
	`OLSR_PRINTF
(3, "NAME PLUGIN: Re˚ived Mesßgê‰om %s\n", 
	`ﬁ§_ù_to_°rög
(&
°rbuf
, 
‹igö©‹
));

895 i‡(
	`¡ohs
(
msg
->
vîsi⁄
Ë!
NAME_PROTOCOL_VERSION
) {

896 
	`OLSR_PRINTF
(3, "NAME PLUGIN: ign‹ög wr⁄g vîsi⁄ %d\n", 
msg
->
vîsi⁄
);

901 
pos
 = (*)
msg
 + (
«memsg
);

902 
íd_pos
 = 
pos
 + 
msg_size
 - (
«me
 *);

904 
i
 = 
	`¡ohs
(
msg
->
ƒ_«mes
); i > 0 && 
pos
 < 
íd_pos
; i--) {

905 
‰om_∑ckë
 = (
«me
 *)
	`ARM_NOWARN_ALIGN
(
pos
);

907 
	`¡ohs
(
‰om_∑ckë
->
ty≥
)) {

908 
NAME_HOST
:

909 
	`ö£π_√w_«me_ö_li°
(
‹igö©‹
, 
«me_li°
, 
‰om_∑ckë
, &
«me_èbÀ_ch™ged
, 
vtime
);

911 
NAME_FORWARDER
:

912 
	`ö£π_√w_«me_ö_li°
(
‹igö©‹
, 
f‹w¨dî_li°
, 
‰om_∑ckë
, &
f‹w¨dî_èbÀ_ch™ged
, 
vtime
);

914 
NAME_SERVICE
:

915 
	`ö£π_√w_«me_ö_li°
(
‹igö©‹
, 
£rvi˚_li°
, 
‰om_∑ckë
, &
£rvi˚_èbÀ_ch™ged
, 
vtime
);

917 
NAME_MACADDR
:

918 
	`ö£π_√w_«me_ö_li°
(
‹igö©‹
, 
mac_li°
, 
‰om_∑ckë
, &
mac_èbÀ_ch™ged
, 
vtime
);

920 
NAME_LATLON
:

921 
	`ö£π_√w_«me_ö_li°
(
‹igö©‹
, 
œé⁄_li°
, 
‰om_∑ckë
, &
œé⁄_èbÀ_ch™ged
, 
vtime
);

924 
	`OLSR_PRINTF
(3, "NAME PLUGIN: Re˚ived Mesßgêo‡unknow¿ty≥ [%d] from (%s)\n", 
‰om_∑ckë
->
ty≥
,

925 
	`ﬁ§_ù_to_°rög
(&
°rbuf
, 
‹igö©‹
));

929 
pos
 +(
«me
);

930 
pos
 +1 + ((
	`¡ohs
(
‰om_∑ckë
->
Àn
) - 1) | 3);

932 i‡(
i
 != 0)

933 
	`OLSR_PRINTF
(4, "NAME PLUGIN: Lo° %dÉ¡rõ†öÑe˚ivedÖackë duêtÿÀngth inc⁄si°ícy (%s)\n", 
i
,

934 
	`ﬁ§_ù_to_°rög
(&
°rbuf
, 
‹igö©‹
));

935 
	}
}

942 
	$ö£π_√w_«me_ö_li°
(
ﬁ§_ù_addr
 *
‹igö©‹
, 
li°_node
 *
this_li°
, 
«me
 *
‰om_∑ckë
,

943 
boﬁ
 * 
this_èbÀ_ch™ged
, 
ﬁ§_ª…ime
 
vtime
)

945 
hash
;

946 
db_íåy
 *
íåy
;

947 
li°_node
 *
li°_hód
, *list_node;

949 
boﬁ
 
íåy_found
 = 
Ál£
;

951 
hash
 = 
	`ﬁ§_ù_hashög
(
‹igö©‹
);

954 
li°_hód
 = &
this_li°
[
hash
];

955 
li°_node
 = 
li°_hód
->
√xt
;Üist_node !=Üist_head;Üist_node =Üist_node->next) {

957 
íåy
 = 
	`li°2db
(
li°_node
);

959 i‡(
	`ùequÆ
(
‹igö©‹
, &
íåy
->originator)) {

960 
ùaddr_°r
 
°rbuf
;

962 
	`OLSR_PRINTF
(4, "NAME PLUGIN: foundÉ¡ry f‹ (%sËö it†hashÅabÀ\n", 
	`ﬁ§_ù_to_°rög
(&
°rbuf
, 
‹igö©‹
));

965 
	`deˇp_«memsg
(
‰om_∑ckë
, &
íåy
->
«mes
, 
this_èbÀ_ch™ged
);

967 
	`ﬁ§_£t_timî
(&
íåy
->
db_timî
, 
vtime
, 
OLSR_NAMESVC_DB_JITTER
, 
OLSR_TIMER_ONESHOT
, &
ﬁ§_«me£rvi˚_expúe_db_timî
,Éntry,

970 
íåy_found
 = 
åue
;

974 i‡(!
íåy_found
) {

975 
ùaddr_°r
 
°rbuf
;

976 
	`OLSR_PRINTF
(3, "NAME PLUGIN: cª©ê√w dbÉ¡ry f‹ i∞(%sËö hashÅabÀ\n", 
	`ﬁ§_ù_to_°rög
(&
°rbuf
, 
‹igö©‹
));

979 
íåy
 = 
	`ﬁ§_mÆloc
((
db_íåy
), "new db_entry");

980 
	`mem£t
(
íåy
, 0, (
db_íåy
));

982 
íåy
->
‹igö©‹
 = *originator;

984 
	`ﬁ§_£t_timî
(&
íåy
->
db_timî
, 
vtime
, 
OLSR_LINK_LOSS_JITTER
, 
OLSR_TIMER_ONESHOT
, &
ﬁ§_«me£rvi˚_expúe_db_timî
,Éntry, 0);

986 
íåy
->
«mes
 = 
NULL
;

989 
	`li°_add_bef‹e
(&
this_li°
[
hash
], &
íåy
->
db_li°
);

992 
	`deˇp_«memsg
(
‰om_∑ckë
, &
íåy
->
«mes
, 
this_èbÀ_ch™ged
);

994 
	}
}

996 #i‚de‡
WIN32


998 
	$£nd_sighup_to_pidfûe
(*
pid_fûe
)

1000 
fd
;

1001 
i
 = 0;

1002 
ªsu…
;

1003 
pid_t
 
ùid
;

1004 
löe
[20];

1005 *
íd±r
;

1007 
fd
 = 
	`›í
(
pid_fûe
, 
O_RDONLY
);

1008 i‡(
fd
 < 0) {

1009 
	`OLSR_PRINTF
(2, "NAME PLUGIN: c™'à›í fûê%s\n", 
pid_fûe
);

1013 
i
 < 19) {

1014 
ªsu…
 = 
	`ªad
(
fd
, 
löe
 + 
i
, 19 - i);

1015 i‡(!
ªsu…
) {

1017 } i‡(
ªsu…
 > 0) {

1018 
i
 +
ªsu…
;

1019 } i‡(
î∫o
 !
EINTR
 &&Éºnÿ!
EAGAIN
) {

1020 
	`OLSR_PRINTF
(2, "NAME PLUGIN: c™'àªad fûê%s\n", 
pid_fûe
);

1024 
löe
[
i
] = 0;

1025 
	`˛o£
(
fd
);

1026 
ùid
 = 
	`°πﬁ
(
löe
, &
íd±r
, 0);

1027 i‡(
íd±r
 =
löe
) {

1028 
	`OLSR_PRINTF
(2, "NAME PLUGIN: invÆidÖidáàfûê%s\n", 
pid_fûe
);

1032 
ªsu…
 = 
	`kûl
(
ùid
, 
SIGHUP
);

1033 i‡(
ªsu…
 == 0) {

1034 
	`OLSR_PRINTF
(2, "NAME PLUGIN: SIGHUP síàtÿpid %i\n", 
ùid
);

1036 
	`OLSR_PRINTF
(2, "NAME PLUGIN: faûedÅÿ£nd SIGHUPÅÿpid %i\n", 
ùid
);

1039 
	}
}

1046 
	$wrôe_ho°s_fûe
()

1048 
hash
;

1049 
«me_íåy
 *
«me
;

1050 
db_íåy
 *
íåy
;

1051 
li°_node
 *
li°_hód
, *list_node;

1052 
FILE
 *
ho°s
;

1053 
FILE
 *
add_ho°s
;

1054 
c
 = 0;

1055 
time_t
 
cuºtime
;

1057 #ifde‡
MID_ENTRIES


1058 
mid_addªss
 *
Æüs
;

1061 i‡(!
«me_èbÀ_ch™ged
)

1064 
	`OLSR_PRINTF
(2, "NAME PLUGIN: writing hosts file\n");

1066 
ho°s
 = 
	`f›í
(
my_ho°s_fûe
, "w");

1067 i‡(
ho°s
 =
NULL
) {

1068 
	`OLSR_PRINTF
(2, "NAME PLUGIN: cant write hosts file\n");

1072 
	`Ârötf
(
ho°s
, "###Åhis /etc/hosts file is overwrittenÑegularly by olsrd\n");

1073 
	`Ârötf
(
ho°s
, "### doÇotÉdit\n\n");

1075 
	`Ârötf
(
ho°s
, "127.0.0.1\tlocalhost\n");

1076 
	`Ârötf
(
ho°s
, "::1\t\tlocalhost\n\n");

1079 i‡(
my_add_ho°s
[0] != '\0') {

1080 
add_ho°s
 = 
	`f›í
(
my_add_ho°s
, "r");

1081 i‡(
add_ho°s
 =
NULL
) {

1082 
	`OLSR_PRINTF
(2, "NAME PLUGIN: cant openádditional hosts file\n");

1084 
	`Ârötf
(
ho°s
, "### c⁄ã¡†‰om '%s' ###\n\n", 
my_add_ho°s
);

1085 (
c
 = 
	`gëc
(
add_ho°s
)Ë!
EOF
)

1086 
	`putc
(
c
, 
ho°s
);

1088 
	`f˛o£
(
add_ho°s
);

1089 
	`Ârötf
(
ho°s
, "\n### olsrÇames ###\n\n");

1092 
«me
 = 
my_«mes
;Çamê!
NULL
;Çamê«me->
√xt
) {

1093 
ùaddr_°r
 
°rbuf
;

1094 
	`Ârötf
(
ho°s
, "%s\t%s%s\t# my£lf\n", 
	`ﬁ§_ù_to_°rög
(&
°rbuf
, &
«me
->
ù
),Çame->«me, 
my_suffix
);

1098 
hash
 = 0; hash < 
HASHSIZE
; hash++) {

1099 
li°_hód
 = &
«me_li°
[
hash
];

1100 
li°_node
 = 
li°_hód
->
√xt
;Üist_node !=Üist_head;Üist_node =Üist_node->next) {

1102 
íåy
 = 
	`li°2db
(
li°_node
);

1104 
«me
 = 
íåy
->
«mes
;Çamê!
NULL
;Çamê«me->
√xt
) {

1105 
ùaddr_°r
 
°rbuf1
, 
°rbuf2
;

1106 
	`OLSR_PRINTF
(6, "%s\t%s%s\t#%s\n", 
	`ﬁ§_ù_to_°rög
(&
°rbuf1
, &
«me
->
ù
),Çame->«me, 
my_suffix
,

1107 
	`ﬁ§_ù_to_°rög
(&
°rbuf2
, &
íåy
->
‹igö©‹
));

1109 
	`Ârötf
(
ho°s
, "%s\t%s%s\t# %s\n", 
	`ﬁ§_ù_to_°rög
(&
°rbuf1
, &
«me
->
ù
),Çame->«me, 
my_suffix
,

1110 
	`ﬁ§_ù_to_°rög
(&
°rbuf2
, &
íåy
->
‹igö©‹
));

1112 #ifde‡
MID_ENTRIES


1114 i‡((
Æüs
 = 
	`mid_lookup_Æü£s
(&
«me
->
ù
)Ë!
NULL
) {

1115 
mid_num
 = 1;

1116 
mid_¥efix
[
MID_MAXLEN
];

1118 
Æüs
 !
NULL
) {

1120 
	`•rötf
(
mid_¥efix
, 
MID_PREFIX
, 
mid_num
);

1122 
	`OLSR_PRINTF
(6, "%s\t%s%s%s\t# %†(mid #%i)\n", 
	`ﬁ§_ù_to_°rög
(&
°rbuf1
, &
Æüs
->Æüs), 
mid_¥efix
, 
«me
->name,

1123 
my_suffix
, 
	`ﬁ§_ù_to_°rög
(&
°rbuf2
, &
íåy
->
‹igö©‹
), 
mid_num
);

1125 
	`Ârötf
(
ho°s
, "%s\t%s%s%s\t# %†(mid #%i)\n", 
	`ﬁ§_ù_to_°rög
(&
°rbuf1
, &
Æüs
->Æüs), 
mid_¥efix
, 
«me
->name,

1126 
my_suffix
, 
	`ﬁ§_ù_to_°rög
(&
°rbuf2
, &
íåy
->
‹igö©‹
), 
mid_num
);

1128 
Æüs
 =álüs->
√xt_Æüs
;

1129 
mid_num
++;

1137 i‡(
	`time
(&
cuºtime
)) {

1138 
	`Ârötf
(
ho°s
, "\n### wrôã¿by ol§dáà%s", 
	`˘ime
(&
cuºtime
));

1141 
	`f˛o£
(
ho°s
);

1143 #i‚de‡
WIN32


1144 i‡(*
my_sighup_pid_fûe
)

1145 
	`£nd_sighup_to_pidfûe
(
my_sighup_pid_fûe
);

1147 
«me_èbÀ_ch™ged
 = 
Ál£
;

1150 i‡(
my_«me_ch™ge_s¸ùt
[0] != '\0') {

1151 i‡(
	`sy°em
(
my_«me_ch™ge_s¸ùt
) != -1) {

1152 
	`OLSR_PRINTF
(2, "NAME PLUGIN: Namêch™ged, %†execuãd\n", 
my_«me_ch™ge_s¸ùt
);

1154 
	`OLSR_PRINTF
(2, "NAME PLUGIN: WARNING! FaûedÅÿexecuã %†⁄ ho°†ch™ge\n", 
my_«me_ch™ge_s¸ùt
);

1157 
	}
}

1170 
	$wrôe_£rvi˚s_fûe
(
boﬁ
 
wrôemacs
)

1172 
hash
;

1173 
«me_íåy
 *
«me
;

1174 
db_íåy
 *
íåy
;

1175 
li°_node
 *
li°_hód
, *list_node;

1176 
FILE
 *
fûe
;

1177 
time_t
 
cuºtime
;

1179 i‡((
wrôemacs
 && !
mac_èbÀ_ch™ged
Ë|| (!wrôemac†&& !
£rvi˚_èbÀ_ch™ged
))

1182 
	`OLSR_PRINTF
(2, "NAME PLUGIN: wrôög %†fûe\n", 
wrôemacs
 ? "macs" : "services");

1184 
fûe
 = 
	`f›í
(
wrôemacs
 ? 
my_macs_fûe
 : 
my_£rvi˚s_fûe
, "w");

1185 i‡(
fûe
 =
NULL
) {

1186 
	`OLSR_PRINTF
(2, "NAME PLUGIN: c™àwrôê%s\n", 
wrôemacs
 ? 
my_macs_fûe
 : 
my_£rvi˚s_fûe
);

1190 
	`Ârötf
(
fûe
, "###Åhis file is overwrittenÑegularly by olsrd\n");

1191 
	`Ârötf
(
fûe
, "### doÇotÉdit\n\n");

1194 
«me
 = 
wrôemacs
 ? 
my_macs
 : 
my_£rvi˚s
;Çamê!
NULL
;Çamê«me->
√xt
) {

1195 
	`Ârötf
(
fûe
, "%s\t# my ow¿%s\n", 
«me
->«me, 
wrôemacs
 ? "mac" : "service");

1199 
hash
 = 0; hash < 
HASHSIZE
; hash++) {

1200 
li°_hód
 = 
wrôemacs
 ? &
mac_li°
[
hash
] : &
£rvi˚_li°
[hash];

1201 
li°_node
 = 
li°_hód
->
√xt
;Üist_node !=Üist_head;Üist_node =Üist_node->next) {

1203 
íåy
 = 
	`li°2db
(
li°_node
);

1205 
«me
 = 
íåy
->
«mes
;Çamê!
NULL
;Çamê«me->
√xt
) {

1206 
ùaddr_°r
 
°rbuf
;

1207 
	`OLSR_PRINTF
(6, "%s\t", 
«me
->name);

1208 
	`OLSR_PRINTF
(6, "\t#%s\n", 
	`ﬁ§_ù_to_°rög
(&
°rbuf
, &
íåy
->
‹igö©‹
));

1210 
	`Ârötf
(
fûe
, "%s\t", 
«me
->name);

1211 
	`Ârötf
(
fûe
, "\t#%s\n", 
	`ﬁ§_ù_to_°rög
(&
°rbuf
, &
íåy
->
‹igö©‹
));

1216 i‡(
	`time
(&
cuºtime
)) {

1217 
	`Ârötf
(
fûe
, "\n### wrôã¿by ol§dáà%s", 
	`˘ime
(&
cuºtime
));

1220 
	`f˛o£
(
fûe
);

1221 i‡(
wrôemacs
) {

1223 i‡(
my_macs_ch™ge_s¸ùt
[0] != '\0') {

1224 i‡(
	`sy°em
(
my_macs_ch™ge_s¸ùt
) != -1) {

1225 
	`OLSR_PRINTF
(2, "NAME PLUGIN: Sîvi˚ ch™ged, %†execuãd\n", 
my_macs_ch™ge_s¸ùt
);

1227 
	`OLSR_PRINTF
(2, "NAME PLUGIN: WARNING! FaûedÅÿexecuã %†⁄ ma¯ch™ge\n", 
my_macs_ch™ge_s¸ùt
);

1230 
mac_èbÀ_ch™ged
 = 
Ál£
;

1234 i‡(
my_£rvi˚s_ch™ge_s¸ùt
[0] != '\0') {

1235 i‡(
	`sy°em
(
my_£rvi˚s_ch™ge_s¸ùt
) != -1) {

1236 
	`OLSR_PRINTF
(2, "NAME PLUGIN: Sîvi˚ ch™ged, %†execuãd\n", 
my_£rvi˚s_ch™ge_s¸ùt
);

1238 
	`OLSR_PRINTF
(2, "NAME PLUGIN: WARNING! FaûedÅÿexecuã %†⁄ sîvi˚ ch™ge\n", 
my_£rvi˚s_ch™ge_s¸ùt
);

1241 
£rvi˚_èbÀ_ch™ged
 = 
Ál£
;

1243 
	}
}

1252 
	$£À˘_be°_«me£rvî
(
π_íåy
 **
π
)

1254 
«me£rvî_idx
;

1255 
π_íåy
 *
π1
, *
π2
;

1257 
«me£rvî_idx
 = 0;Çame£rvî_idx < 
NAMESERVER_COUNT
;Çameserver_idx++) {

1259 
π1
 = 
π
[
«me£rvî_idx
];

1260 
π2
 = 
π
[
«me£rvî_idx
 + 1];

1266 i‡(!
π2
 || 
	`ﬁ§_cmp_π
(
π1
,Ñt2)) {

1267 #i‚de‡
NODEBUG


1268 
ùaddr_°r
 
°rbuf
;

1269 
lqãxtbuf„r
 
lqbuf„r
;

1274 
	`OLSR_PRINTF
(6, "NAME PLUGIN:Çame£rvî %s, co° %s\n", 
	`ﬁ§_ù_to_°rög
(&
°rbuf
, &
π1
->
π_d°
.
¥efix
),

1275 
	`gë_lökco°_ãxt
(
π1
->
π_be°
->
πp_mëric
.
co°
, 
åue
, &
lqbuf„r
));

1277 
π
[
«me£rvî_idx
] = 
π2
;

1278 
π
[
«me£rvî_idx
 + 1] = 
π1
;

1281 
	}
}

1288 
	$wrôe_ªsﬁv_fûe
()

1290 
hash
;

1291 
«me_íåy
 *
«me
;

1292 
db_íåy
 *
íåy
;

1293 
li°_node
 *
li°_hód
, *list_node;

1294 
π_íåy
 *
rouã
;

1295 
π_íåy
 *
«me£rvî_rouãs
[
NAMESERVER_COUNT
 + 1];

1296 
FILE
 *
ªsﬁv
;

1297 
i
 = 0;

1298 
time_t
 
cuºtime
;

1300 i‡(!
f‹w¨dî_èbÀ_ch™ged
 || 
my_f‹w¨dîs
 !
NULL
 || 
my_ªsﬁv_fûe
[0] == '\0')

1304 
	`mem£t
(
«me£rvî_rouãs
, 0, (nameserver_routes));

1306 
hash
 = 0; hash < 
HASHSIZE
; hash++) {

1307 
li°_hód
 = &
f‹w¨dî_li°
[
hash
];

1308 
li°_node
 = 
li°_hód
->
√xt
;Üist_node !=Üist_head;Üist_node =Üist_node->next) {

1310 
íåy
 = 
	`li°2db
(
li°_node
);

1312 
«me
 = 
íåy
->
«mes
;Çamê!
NULL
;Çamê«me->
√xt
) {

1313 #i‚de‡
NODEBUG


1314 
ùaddr_°r
 
°rbuf
;

1315 
lqãxtbuf„r
 
lqbuf„r
;

1317 
rouã
 = 
	`ﬁ§_lookup_routög_èbÀ
(&
«me
->
ù
);

1319 
	`OLSR_PRINTF
(6, "NAME PLUGIN: checkÑouã f‹Çame£rvî %†%s", 
	`ﬁ§_ù_to_°rög
(&
°rbuf
, &
«me
->
ù
),

1320 
rouã
 ? "suceeded" : "failed");

1322 i‡(
rouã
 =
NULL
)

1326 *
«me£rvî_rouãs
 = 
rouã
;

1327 
	`OLSR_PRINTF
(6, "NAME PLUGIN: foundÇame£rvî %s, co° %s", 
	`ﬁ§_ù_to_°rög
(&
°rbuf
, &
«me
->
ù
),

1328 
	`gë_lökco°_ãxt
(
rouã
->
π_be°
->
πp_mëric
.
co°
, 
åue
, &
lqbuf„r
));

1331 
	`£À˘_be°_«me£rvî
(
«me£rvî_rouãs
);

1337 i‡(
«me£rvî_rouãs
[
NAMESERVER_COUNT
] =
NULL
)

1341 
	`OLSR_PRINTF
(2, "NAME PLUGIN:ÅryÅo writeÅoÑesolv file\n");

1342 
ªsﬁv
 = 
	`f›í
(
my_ªsﬁv_fûe
, "w");

1343 i‡(
ªsﬁv
 =
NULL
) {

1344 
	`OLSR_PRINTF
(2, "NAME PLUGIN: can't writeÑesolv file\n");

1347 
	`Ârötf
(
ªsﬁv
, "###Åhis file is overwrittenÑegularly by olsrd\n");

1348 
	`Ârötf
(
ªsﬁv
, "### doÇotÉdit\n\n");

1350 
i
 = 
NAMESERVER_COUNT
; i >= 0; i--) {

1351 
ùaddr_°r
 
°rbuf
;

1353 
rouã
 = 
«me£rvî_rouãs
[
i
];

1355 
	`OLSR_PRINTF
(2, "NAME PLUGIN:Çame£rvî_rouã†#%d %p\n", 
i
, 
rouã
);

1357 i‡(!
rouã
) {

1361 
	`OLSR_PRINTF
(2, "NAME PLUGIN:Çame£rvî %s\n", 
	`ﬁ§_ù_to_°rög
(&
°rbuf
, &
rouã
->
π_d°
.
¥efix
));

1362 
	`Ârötf
(
ªsﬁv
, "«me£rvî %s\n", 
	`ﬁ§_ù_to_°rög
(&
°rbuf
, &
rouã
->
π_d°
.
¥efix
));

1364 i‡(
	`time
(&
cuºtime
)) {

1365 
	`Ârötf
(
ªsﬁv
, "\n### wrôã¿by ol§dáà%s", 
	`˘ime
(&
cuºtime
));

1367 
	`f˛o£
(
ªsﬁv
);

1368 
f‹w¨dî_èbÀ_ch™ged
 = 
Ál£
;

1369 
	}
}

1375 
	$‰ì_«me_íåy_li°
(
«me_íåy
 **
li°
)

1377 
«me_íåy
 **
tmp
 = 
li°
;

1378 
«me_íåy
 *
to_dñëe
;

1379 *
tmp
 !
NULL
) {

1380 
to_dñëe
 = *
tmp
;

1381 *
tmp
 = (*tmp)->
√xt
;

1384 
to_dñëe
->
ty≥
) {

1385 
NAME_HOST
:

1386 
«me_èbÀ_ch™ged
 = 
åue
;

1388 
NAME_FORWARDER
:

1389 
f‹w¨dî_èbÀ_ch™ged
 = 
åue
;

1391 
NAME_SERVICE
:

1392 
£rvi˚_èbÀ_ch™ged
 = 
åue
;

1394 
NAME_MACADDR
:

1395 
mac_èbÀ_ch™ged
 = 
åue
;

1397 
NAME_LATLON
:

1398 
œé⁄_èbÀ_ch™ged
 = 
åue
;

1404 
	`‰ì
(
to_dñëe
->
«me
);

1405 
to_dñëe
->
«me
 = 
NULL
;

1406 
	`‰ì
(
to_dñëe
);

1407 
to_dñëe
 = 
NULL
;

1409 
	}
}

1417 
boﬁ


1418 
	$Ælowed_ù
(c⁄° 
ﬁ§_ù_addr
 *
addr
)

1420 
ù_¥efix_li°
 *
h«
;

1421 
öãrÁ˚
 *
iÁ˚
;

1422 
ﬁ§_ù_addr
 
tmp_ù
, 
tmp_msk
;

1423 
ùaddr_°r
 
°rbuf
;

1425 
	`OLSR_PRINTF
(6, "checkög %s\n", 
	`ﬁ§_ù_to_°rög
(&
°rbuf
, 
addr
));

1427 
iÁ˚
 = 
i‚ë
; iÁ˚; iÁ˚ = iÁ˚->
öt_√xt
) {

1428 
	`OLSR_PRINTF
(6, "öãrÁ˚ %s\n", 
	`ﬁ§_ù_to_°rög
(&
°rbuf
, &
iÁ˚
->
ù_addr
));

1429 i‡(
	`ùequÆ
(&
iÁ˚
->
ù_addr
, 
addr
)) {

1430 
	`OLSR_PRINTF
(6, "MATCHED\n");

1431  
åue
;

1435 i‡(
ﬁ§_˙f
->
ù_vîsi⁄
 =
AF_INET
) {

1436 
h«
 = 
ﬁ§_˙f
->
h«_íåõs
; h« !
NULL
; h« = h«->
√xt
) {

1437 
ﬁ§_ù_addr
 
√tmask
;

1438 
	`OLSR_PRINTF
(6, "HNA %s/%d\n", 
	`ﬁ§_ù_to_°rög
(&
°rbuf
, &
h«
->
√t
.
¥efix
), h«->√t.
¥efix_Àn
);

1439 i‡(
h«
->
√t
.
¥efix_Àn
 == 0) {

1442 
	`ﬁ§_¥efix_to_√tmask
(&
√tmask
, 
h«
->
√t
.
¥efix_Àn
);

1443 i‡((
addr
->
v4
.
s_addr
 & 
√tmask
.v4.s_addrË=
h«
->
√t
.
¥efix
.v4.s_addr) {

1444 
	`OLSR_PRINTF
(6, "MATCHED\n");

1445  
åue
;

1449 
h«
 = 
ﬁ§_˙f
->
h«_íåõs
; h« !
NULL
; h« = h«->
√xt
) {

1450 
i
;

1451 
	`OLSR_PRINTF
(6, "HNA %s/%d\n", 
	`ﬁ§_ù_to_°rög
(&
°rbuf
, &
h«
->
√t
.
¥efix
), h«->√t.
¥efix_Àn
);

1452 i‡(
h«
->
√t
.
¥efix_Àn
 == 0)

1454 
	`ﬁ§_¥efix_to_√tmask
(&
tmp_msk
, 
h«
->
√t
.
¥efix_Àn
);

1455 
i
 = 0; i < (
tmp_ù
.
v6
.
s6_addr
); i++) {

1456 
tmp_ù
.
v6
.
s6_addr
[
i
] = 
addr
->v6.s6_addr[i] & 
tmp_msk
.v6.s6_addr[i];

1458 i‡(
	`ùequÆ
(&
tmp_ù
, &
h«
->
√t
.
¥efix
)) {

1459 
	`OLSR_PRINTF
(6, "MATCHED\n");

1460  
åue
;

1464  
Ál£
;

1465 
	}
}

1471 
boﬁ


1472 
	$is_«me_wñlf‹med
(c⁄° *
«me
)

1474  
	`ªgexec
(&
ªgex_t_«me
, 
«me
, 1, &
ªgm©ch_t_«me
, 0) == 0;

1475 
	}
}

1481 
boﬁ


1482 
	$Ælowed_£rvi˚
(c⁄° *
£rvi˚_löe
)

1487 i‡(!
	`is_£rvi˚_wñlf‹med
(
£rvi˚_löe
)) {

1488  
Ál£
;

1489 } i‡(!
	`Ælowed_ho°«me_‹_ù_ö_£rvi˚
(
£rvi˚_löe
, &(
ªgm©ch_t_£rvi˚
[1]))) {

1490  
Ál£
;

1493  
åue
;

1494 
	}
}

1496 
boﬁ


1497 
	$Ælowed_ho°«me_‹_ù_ö_£rvi˚
(c⁄° *
£rvi˚_löe
, c⁄° 
ªgm©ch_t
 * 
ho°«me_‹_ù_m©ch
)

1499 *
ho°«me_‹_ù
;

1500 
ﬁ§_ù_addr
 
ﬁ§_ù
;

1501 
«me_íåy
 *
«me
;

1502 i‡(
ho°«me_‹_ù_m©ch
->
rm_so
 < 0 || ho°«me_‹_ù_m©ch->
rm_eo
 < 0) {

1503  
Ál£
;

1506 
ho°«me_‹_ù
 = 
	`°∫dup
(&
£rvi˚_löe
[
ho°«me_‹_ù_m©ch
->
rm_so
], ho°«me_‹_ù_m©ch->
rm_eo
 - hostname_or_ip_match->rm_so);

1508 
«me
 = 
my_«mes
;Çamê!
NULL
;Çamê«me->
√xt
) {

1509 i‡(
	`°∫cmp
(
«me
->«me, 
ho°«me_‹_ù
,Çame->
Àn
 - 
	`°æí
(
my_suffix
)) == 0) {

1510 
	`OLSR_PRINTF
(4, "NAME PLUGIN: ho°«mê%†ö sîvi˚ %†i†OK\n", 
ho°«me_‹_ù
, 
£rvi˚_löe
);

1511 
	`‰ì
(
ho°«me_‹_ù
);

1512 
ho°«me_‹_ù
 = 
NULL
;

1513  
åue
;

1518 i‡(
	`öë_±⁄
(
ﬁ§_˙f
->
ù_vîsi⁄
, 
ho°«me_‹_ù
, &
ﬁ§_ù
) > 0) {

1519 i‡(
	`Ælowed_ù
(&
ﬁ§_ù
)) {

1520 
ùaddr_°r
 
°rbuf
;

1521 
	`OLSR_PRINTF
(2, "NAME PLUGIN: i∞%†ö sîvi˚ %†i†OK\n", 
	`ﬁ§_ù_to_°rög
(&
°rbuf
, &
ﬁ§_ù
), 
£rvi˚_löe
);

1522 
	`‰ì
(
ho°«me_‹_ù
);

1523 
ho°«me_‹_ù
 = 
NULL
;

1524  
åue
;

1528 
	`OLSR_PRINTF
(1, "NAME PLUGIN: i∞‹ ho°«mê%†ö sîvi˚ %†i†NOTáŒowed (d€†nŸ bñ⁄gÅÿyou)\n", 
ho°«me_‹_ù
,

1529 
£rvi˚_löe
);

1530 
	`‰ì
(
ho°«me_‹_ù
);

1531 
ho°«me_‹_ù
 = 
NULL
;

1533  
Ál£
;

1534 
	}
}

1541 
boﬁ


1542 
	$is_£rvi˚_wñlf‹med
(c⁄° *
£rvi˚_löe
)

1544  
	`ªgexec
(&
ªgex_t_£rvi˚
, 
£rvi˚_löe
, 
pm©ch_£rvi˚
, 
ªgm©ch_t_£rvi˚
, 0) == 0;

1545 
	}
}

1550 
boﬁ


1551 
	$is_mac_wñlf‹med
(c⁄° *
mac_löe
)

1553 
size_t
 
i
;

1554 
boﬁ
 
ªt
;

1555 
x
[6], 
d
 = -1;

1556 
i
 = 0; i < 
	`ARRAYSIZE
(
x
); i++) x[i] = -1;

1557 
	`ssˇnf
(
mac_löe
, "%02x:%02x:%02x:%02x:%02x:%02x,%d\n", &
x
[0], &x[1], &x[2], &x[3], &x[4], &x[5], &
d
);

1558 
ªt
 = 0 <
d
 && d <= 0xffff;

1559 
i
 = 0; i < 
	`ARRAYSIZE
(
x
); i++Ë
ªt
 =Ñet && 0 <= x[i];

1560  
ªt
;

1561 
	}
}

1566 
boﬁ


1567 
	$is_œé⁄_wñlf‹med
(c⁄° *
œé⁄_löe
)

1569 
h«
 = -1;

1570 
a
 = 0.0, 
b
 = 0.0;

1571 
	`ssˇnf
(
œé⁄_löe
, "%f,%f,%d", &
a
, &
b
, &
h«
);

1572  (
a
 !0.0 && 
b
 !0.0 && -1 !
h«
);

1573 
	}
}

1578 
boﬁ


1579 
	$gë_isdefh«_œé⁄
()

1581 
ù_¥efix_li°
 *
h«
;

1582 
h«
 = 
ﬁ§_˙f
->
h«_íåõs
; h« !
NULL
; h« = h«->
√xt
) {

1583 i‡(
h«
->
√t
.
¥efix_Àn
 == 0) {

1584  
åue
;

1587  
Ál£
;

1588 
	}
}

1594 
	$lookup_defh«_œé⁄
(
ﬁ§_ù_addr
 *
ù
)

1596 
π_íåy
 *
π
;

1597 
avl_node
 *
π_åì_node
;

1598 
ﬁ§_ù_¥efix
 
¥efix
;

1600 
	`mem£t
(
ù
, 0, (ip));

1601 
	`mem£t
(&
¥efix
, 0, (prefix));

1603 i‡(
NULL
 !(
π_åì_node
 = 
	`avl_föd
(&
routögåì
, &
¥efix
))) {

1604 
π
 = 
	`π_åì2π
(
π_åì_node
);

1605 *
ù
 = 
π
->
π_be°
->
πp_√xth›
.
g©eway
;

1607 
	}
}

1613 
	$lookup_«me_œé⁄
(
ﬁ§_ù_addr
 *
ù
)

1615 
hash
;

1616 
db_íåy
 *
íåy
;

1617 
li°_node
 *
li°_hód
, *list_node;

1618 
«me_íåy
 *
«me
;

1620 
hash
 = 0; hash < 
HASHSIZE
; hash++) {

1621 
li°_hód
 = &
«me_li°
[
hash
];

1622 
li°_node
 = 
li°_hód
->
√xt
;Üist_node !=Üist_head;Üist_node =Üist_node->next) {

1624 
íåy
 = 
	`li°2db
(
li°_node
);

1626 
«me
 = 
íåy
->
«mes
;Çamê!
NULL
;Çamê«me->
√xt
) {

1627 i‡(
	`ùequÆ
(&
«me
->
ù
, ip))

1628  
«me
->name;

1633 
	}
}

1635 #ifde‡
WIN32


1641 
	$wrôe_œé⁄_fûe
()

1643 
FILE
 *
fm≠
;

1645 i‡(!
my_«mes
 || !
œé⁄_èbÀ_ch™ged
)

1648 
	`OLSR_PRINTF
(2, "NAME PLUGIN: writingÜatlon file\n");

1650 i‡(
NULL
 =(
fm≠
 = 
	`f›í
(
my_œé⁄_fûe
, "w"))) {

1651 
	`OLSR_PRINTF
(0, "NAME PLUGIN: cant writeÜatlon file\n");

1654 
	`Ârötf
(
fm≠
, "/* This file is overwrittenÑegularly by olsrd */\n");

1655 
	`m≠wrôe_w‹k
(
fm≠
);

1656 
	`f˛o£
(
fm≠
);

1657 
œé⁄_èbÀ_ch™ged
 = 
Ál£
;

1658 
	}
}

	@lib/nameservice/src/nameservice.h

37 #i‚de‡
_NAMESERVICE_PLUGIN


38 
	#_NAMESERVICE_PLUGIN


	)

40 
	~<sys/time.h
>

41 
	~<ªgex.h
>

43 
	~"ﬁ§_ty≥s.h
"

44 
	~"öãrÁ˚s.h
"

45 
	~"ﬁ§_¥Ÿocﬁ.h
"

46 
	~"comm⁄/li°.h
"

48 
	~"ﬁ§d_∂ugö.h
"

49 
	~"«me£rvi˚_msg.h
"

50 
	~"hashög.h
"

51 
	~"m≠wrôe.h
"

52 
	~"m™tisß.h
"

54 
	#PLUGIN_NAME
 "OLSRDÇame£rvi˚Ölugö"

	)

55 
	#PLUGIN_VERSION
 "0.3"

	)

56 
	#PLUGIN_AUTHOR
 "BrunÿR™dﬁf, Jí†NachtigÆl, Sví-Oœ Tuecke"

	)

62 
	#MESSAGE_TYPE
 130

	)

63 
	#PARSER_TYPE
 
MESSAGE_TYPE


	)

64 
	#EMISSION_INTERVAL
 120

	)

65 
	#EMISSION_JITTER
 25

	)

66 
	#NAME_VALID_TIME
 1800

	)

67 
	#NAMESERVER_COUNT
 3

	)

69 
	#NAME_PROTOCOL_VERSION
 1

	)

71 
	#MAX_NAME
 127

	)

72 
	#MAX_FILE
 255

	)

73 
	#MAX_SUFFIX
 63

	)

75 
	#MID_ENTRIES
 1

	)

76 
	#MID_MAXLEN
 16

	)

77 
	#MID_PREFIX
 "mid%i."

	)

86 
	s«me_íåy
 {

87 
ﬁ§_ù_addr
 
	mù
;

88 
uöt16_t
 
	mty≥
;

89 
uöt16_t
 
	mÀn
;

90 *
	m«me
;

91 
«me_íåy
 *
	m√xt
;

105 
	sdb_íåy
 {

106 
ﬁ§_ù_addr
 
	m‹igö©‹
;

107 
timî_íåy
 *
	mdb_timî
;

108 
«me_íåy
 *
	m«mes
;

109 
li°_node
 
	mdb_li°
;

113 
LISTNODE2STRUCT
(
li°2db
, 
db_íåy
, 
db_li°
);

115 
	#OLSR_NAMESVC_DB_JITTER
 5

	)

117 
«me_íåy
 *
my_«mes
;

118 
li°_node
 
œé⁄_li°
[
HASHSIZE
];

119 
my_œt
, 
my_l⁄
;

121 
ﬁ§_expúe_wrôe_fûe_timî
(*);

122 
ﬁ§_«mesvc_dñëe_db_íåy
(
db_íåy
 *);

125 
boﬁ
 
ﬁ§_∑r£r
(
ﬁ§_mesßge
 *, 
öãrÁ˚
 *, 
ﬁ§_ù_addr
 *);

128 
ﬁ§_«mesvc_gí
(*);

130 
íˇp_«memsg
(
«memsg
 *);

132 
«me_íåy
 *
add_«me_to_li°
(«me_íåy *
my_li°
, c⁄° *
vÆue
, 
ty≥
, c⁄° 
ﬁ§_ù_addr
 *
ù
);

134 
«me_íåy
 *
ªmove_n⁄vÆid_«mes_‰om_li°
(«me_íåy *
my_li°
, 
ty≥
);

136 
‰ì_Æl_li°_íåõs
(
li°_node
 *);

138 
deˇp_«memsg
(
«me
 *
‰om_∑ckë
, 
«me_íåy
 **
to
, 
boﬁ
 * 
this_èbÀ_ch™ged
);

140 
ö£π_√w_«me_ö_li°
(
ﬁ§_ù_addr
 *, 
li°_node
 *, 
«me
 *, 
boﬁ
 *, 
ﬁ§_ª…ime
);

142 
boﬁ
 
Ælowed_ho°«me_‹_ù_ö_£rvi˚
(c⁄° *
£rvi˚_löe
, c⁄° 
ªgm©ch_t
 * 
ho°«me_‹_ù
);

144 
upd©e_«me_íåy
(
ﬁ§_ù_addr
 *, 
«memsg
 *, , 
ﬁ§_ª…ime
);

146 
wrôe_ho°s_fûe
();

148 
wrôe_£rvi˚s_fûe
(
boﬁ
 
wrôemacs
);

150 
wrôe_ªsﬁv_fûe
();

152 
ªgi°î_ﬁ§_∑øm
(*
key
, *
vÆue
);

154 
‰ì_«me_íåy_li°
(
«me_íåy
 **
li°
);

156 
boﬁ
 
Ælowed_ù
(c⁄° 
ﬁ§_ù_addr
 *
addr
);

158 
boﬁ
 
Ælowed_£rvi˚
(c⁄° *
£rvi˚_löe
);

160 
boﬁ
 
is_«me_wñlf‹med
(c⁄° *
£rvi˚_löe
);

162 
boﬁ
 
is_£rvi˚_wñlf‹med
(c⁄° *
£rvi˚_löe
);

164 
boﬁ
 
is_mac_wñlf‹med
(c⁄° *
£rvi˚_löe
);

166 
boﬁ
 
is_œé⁄_wñlf‹med
(c⁄° *
œé⁄_löe
);

168 
boﬁ
 
gë_isdefh«_œé⁄
();

170 
lookup_defh«_œé⁄
(
ﬁ§_ù_addr
 *
ù
);

172 c⁄° *
lookup_«me_œé⁄
(
ﬁ§_ù_addr
 *
ù
);

174 
wrôe_œé⁄_fûe
();

176 *
¸óã_∑ckë
(
«me
 *
to
, 
«me_íåy
 *
‰om
);

178 
«me_c⁄°ru˘‹
();

180 
«me_de°ru˘‹
();

182 
«me_öô
();

	@lib/nameservice/src/nameservice_msg.h

37 #i‚de‡
_NAMESEVICE_MSG


38 
	#_NAMESEVICE_MSG


	)

42 
	mNAME_HOST
 = 0,

43 
	mNAME_FORWARDER
 = 1,

44 
	mNAME_SERVICE
 = 2,

45 
	mNAME_LATLON
 = 3,

46 
	mNAME_MACADDR
 = 4,

47 } 
	tNAME_TYPE
;

53 
	s«me
 {

54 
uöt16_t
 
	mty≥
;

55 
uöt16_t
 
	mÀn
;

58 
ﬁ§_ù_addr
 
	mù
;

64 
	s«memsg
 {

65 
uöt16_t
 
	mvîsi⁄
;

66 
uöt16_t
 
	mƒ_«mes
;

	@lib/nameservice/src/olsrd_plugin.c

37 
	~<°dio.h
>

38 
	~<°rög.h
>

40 
	~"ﬁ§d_∂ugö.h
"

41 
	~"«me£rvi˚.h
"

43 
	#PLUGIN_NAME
 "OLSRDÇame£rvi˚Ölugö"

	)

44 
	#PLUGIN_VERSION
 "0.3"

	)

45 
	#PLUGIN_AUTHOR
 "BrunÿR™dﬁf, Jí†NachtigÆl, Sví-Oœ Tuecke"

	)

46 
	#MOD_DESC
 
PLUGIN_NAME
 " " 
PLUGIN_VERSION


	)

47 
	#PLUGIN_INTERFACE_VERSION
 5

	)

49 
__©åibuã__
 ((
c⁄°ru˘‹
)Ë
my_öô
();

51 
__©åibuã__
 ((
de°ru˘‹
)Ë
my_föi
();

54 
	$ﬁ§d_∂ugö_öãrÁ˚_vîsi⁄
()

56  
PLUGIN_INTERFACE_VERSION
;

57 
	}
}

60 
	$ﬁ§d_∂ugö_öô
()

62  
	`«me_öô
();

63 
	}
}

66 
	$my_öô
()

69 
	`¥ötf
("%s\n", 
MOD_DESC
);

71 
	`«me_c⁄°ru˘‹
();

74 
	}
}

77 
	$my_föi
()

79 
	`«me_de°ru˘‹
();

80 
	}
}

	@lib/p2pd/src/NetworkInterfaces.c

42 
	~"Nëw‹kI¡îÁ˚s.h
"

45 
	~<°ddef.h
>

46 
	~<sy¶og.h
>

47 
	~<°rög.h
>

48 
	~<î∫o.h
>

49 
	~<uni°d.h
>

50 
	~<sys/io˘l.h
>

51 
	~<f˙é.h
>

52 
	~<as£π.h
>

53 
	~<√t/if.h
>

54 
	~<√töë/ö.h
>

55 
	~<löux/if_ëhî.h
>

56 
	~<löux/if_∑ckë.h
>

57 
	~<löux/if_tun.h
>

58 
	~<√töë/ù.h
>

59 
	~<√töë/udp.h
>

60 
	~<°dlib.h
>

63 
	~"ﬁ§.h
"

64 
	~"ùˇlc.h
"

65 
	~"defs.h
"

66 
	~"lök_£t.h
"

67 
	~"tc_£t.h
"

68 
	~"√t_ﬁ§.h
"

69 
	~"lq_∂ugö.h
"

73 
	~"Packë.h
"

74 
	~"p2pd.h
"

79 
N⁄Ol§I¡îÁ˚
 *
	gn⁄Ol§I¡îÁ˚s
 = 
NULL
;

80 
N⁄Ol§I¡îÁ˚
 *
	gœ°N⁄Ol§I¡îÁ˚
 = 
NULL
;

93 
	$Cª©eC≠tuªSockë
(c⁄° *
ifName
)

95 
ifIndex
 = 
	`if_«mëoödex
(
ifName
);

96 
∑ckë_mªq
 
mªq
;

97 
i‰eq
 
ªq
;

98 
sockaddr_Œ
 
bödTo
;

99 
skfd
 = 0;

101 i‡(
ﬁ§_˙f
->
ù_vîsi⁄
 =
AF_INET
) {

102 
skfd
 = 
	`sockë
(
PF_PACKET
, 
SOCK_DGRAM
, 
	`ht⁄s
(
ETH_P_IP
));

104 
skfd
 = 
	`sockë
(
PF_PACKET
, 
SOCK_DGRAM
, 
	`ht⁄s
(
ETH_P_IPV6
));

106 i‡(
skfd
 < 0) {

107 
	`P2pdPEº‹
("socket(PF_PACKET)Érror");

112 
	`mem£t
(&
mªq
, 0, (
∑ckë_mªq
));

113 
mªq
.
mr_ifödex
 = 
ifIndex
;

114 
mªq
.
mr_ty≥
 = 
PACKET_MR_PROMISC
;

115 i‡(
	`£tsock›t
(
skfd
, 
SOL_PACKET
, 
PACKET_ADD_MEMBERSHIP
, &
mªq
, (mreq)) < 0) {

116 
	`P2pdPEº‹
("setsockopt(PACKET_MR_PROMISC)Érror");

117 
	`˛o£
(
skfd
);

122 
	`mem£t
(&
ªq
, 0, (
i‰eq
));

123 
	`°∫˝y
(
ªq
.
i‰_«me
, 
ifName
, 
IFNAMSIZ
 - 1);

124 
ªq
.
i‰_«me
[
IFNAMSIZ
 - 1] = '\0';

125 i‡(
	`io˘l
(
skfd
, 
SIOCGIFHWADDR
, &
ªq
) < 0) {

126 
	`P2pdPEº‹
("errorÑetrieving MACáddress");

127 
	`˛o£
(
skfd
);

132 
	`mem£t
(&
bödTo
, 0, (bindTo));

133 
bödTo
.
¶l_Ámûy
 = 
AF_PACKET
;

134 i‡(
ﬁ§_˙f
->
ù_vîsi⁄
 =
AF_INET
) {

135 
bödTo
.
¶l_¥Ÿocﬁ
 = 
	`ht⁄s
(
ETH_P_IP
);

137 
bödTo
.
¶l_¥Ÿocﬁ
 = 
	`ht⁄s
(
ETH_P_IPV6
);

139 
bödTo
.
¶l_ifödex
 = 
ifIndex
;

140 
	`mem˝y
(
bödTo
.
¶l_addr
, 
ªq
.
i‰_hwaddr
.
ß_d©a
, 
IFHWADDRLEN
);

141 
bödTo
.
¶l_hÆí
 = 
IFHWADDRLEN
;

143 i‡(
	`böd
(
skfd
, (
sockaddr
 *)&
bödTo
, (bindTo)) < 0) {

144 
	`P2pdPEº‹
("bind()Érror");

145 
	`˛o£
(
skfd
);

150 i‡(
	`f˙é
(
skfd
, 
F_SETFL
, f˙é(skfd, 
F_GETFL
, 0Ë& ~
O_NONBLOCK
) < 0) {

151 
	`P2pdPEº‹
("fcntl()Érror");

152 
	`˛o£
(
skfd
);

156 
	`add_ﬁ§_sockë
(
skfd
, (
sockë_h™dÀr_func
)&
DoP2pd
, 
NULL
, NULL, 
SP_PR_READ
);

158  
skfd
;

159 
	}
}

176 
	$Cª©eI¡îÁ˚
(c⁄° *
ifName
, 
öãrÁ˚
 *
ﬁ§I¡f
)

178 
ˇ±urögSkfd
 = -1;

179 
íˇpsuœtögSkfd
 = -1;

180 
li°íögSkfd
 = -1;

181 
io˘lSkfd
;

182 
i‰eq
 
i‰
;

183 
nO≥√d
 = 0;

184 
N⁄Ol§I¡îÁ˚
 *
√wIf
 = 
	`mÆloc
((NonOlsrInterface));

186 
	`as£π
(
ifName
 !
NULL
);

188 i‡(
√wIf
 =
NULL
) {

196 i‡((
ﬁ§I¡f
 =
NULL
)) {

197 
ˇ±urögSkfd
 = 
	`Cª©eC≠tuªSockë
(
ifName
);

198 i‡(
ˇ±urögSkfd
 < 0) {

199 
	`˛o£
(
íˇpsuœtögSkfd
);

200 
	`‰ì
(
√wIf
);

204 
nO≥√d
++;

209 
io˘lSkfd
 = (
ˇ±urögSkfd
 >0Ë? c≠turögSkfd : 
íˇpsuœtögSkfd
;

212 
	`mem£t
(&
i‰
, 0, (
i‰eq
));

213 
	`°∫˝y
(
i‰
.
i‰_«me
, 
ifName
, 
IFNAMSIZ
 - 1);

214 
i‰
.
i‰_«me
[
IFNAMSIZ
 - 1] = '\0';

215 i‡(
	`io˘l
(
io˘lSkfd
, 
SIOCGIFHWADDR
, &
i‰
) < 0) {

216 
	`P2pdPEº‹
("io˘l(SIOCGIFHWADDRËîr‹ f‹ i¡îÁ˚ \"%s\"", 
ifName
);

217 
	`˛o£
(
ˇ±urögSkfd
);

218 
	`˛o£
(
íˇpsuœtögSkfd
);

219 
	`‰ì
(
√wIf
);

224 
√wIf
->
ˇ±urögSkfd
 = capturingSkfd;

225 
√wIf
->
íˇpsuœtögSkfd
 =ÉncapsulatingSkfd;

226 
√wIf
->
li°íögSkfd
 =ÜisteningSkfd;

227 
	`mem˝y
(
√wIf
->
macAddr
, 
i‰
.
i‰_hwaddr
.
ß_d©a
, 
IFHWADDRLEN
);

228 
	`mem˝y
(
√wIf
->
ifName
, ifName, 
IFNAMSIZ
);

229 
√wIf
->
ﬁ§I¡f
 = olsrIntf;

230 i‡(
ﬁ§I¡f
 !
NULL
) {

234 
√wIf
->
ötAddr
.
v4
 = 
ﬁ§I¡f
->
öt_addr
.
sö_addr
;

235 
√wIf
->
brﬂdAddr
.
v4
 = 
ﬁ§I¡f
->
öt_brﬂdaddr
.
sö_addr
;

238 
	`mem£t
(&
i‰
, 0, (
i‰eq
));

239 
	`°∫˝y
(
i‰
.
i‰_«me
, 
ifName
, 
IFNAMSIZ
 - 1);

240 
i‰
.
i‰_«me
[
IFNAMSIZ
 - 1] = '\0';

241 i‡(
	`io˘l
(
io˘lSkfd
, 
SIOCGIFADDR
, &
i‰
) < 0) {

242 
	`P2pdPEº‹
("io˘l(SIOCGIFADDRËîr‹ f‹ i¡îÁ˚ \"%s\"", 
ifName
);

244 
√wIf
->
ötAddr
.
v4
.
s_addr
 = 
	`öë_addr
("0.0.0.0");

247 
√wIf
->
ötAddr
.
v4
 = ((
sockaddr_ö
 *Ë
	`ARM_NOWARN_ALIGN
(&
i‰
.
i‰_addr
))->
sö_addr
;

251 
	`mem£t
(&
i‰
, 0, (
i‰eq
));

252 
	`°∫˝y
(
i‰
.
i‰_«me
, 
ifName
, 
IFNAMSIZ
 - 1);

253 
i‰
.
i‰_«me
[
IFNAMSIZ
 - 1] = '\0';

254 i‡(
	`io˘l
(
io˘lSkfd
, 
SIOCGIFBRDADDR
, &
i‰
) < 0) {

255 
	`P2pdPEº‹
("io˘l(SIOCGIFBRDADDRËîr‹ f‹ i¡îÁ˚ \"%s\"", 
ifName
);

257 
√wIf
->
brﬂdAddr
.
v4
.
s_addr
 = 
	`öë_addr
("0.0.0.0");

260 
√wIf
->
brﬂdAddr
.
v4
 = ((
sockaddr_ö
 *Ë
	`ARM_NOWARN_ALIGN
(&
i‰
.
i‰_brﬂdaddr
))->
sö_addr
;

275 i‡(
n⁄Ol§I¡îÁ˚s
 =
NULL
) {

277 
√wIf
->
√xt
 = 
NULL
;

278 
n⁄Ol§I¡îÁ˚s
 = 
√wIf
;

279 
œ°N⁄Ol§I¡îÁ˚
 = 
√wIf
;

280 } i‡(
ﬁ§I¡f
 !
NULL
) {

282 
√wIf
->
√xt
 = 
n⁄Ol§I¡îÁ˚s
;

283 
n⁄Ol§I¡îÁ˚s
 = 
√wIf
;

286 
√wIf
->
√xt
 = 
NULL
;

287 
œ°N⁄Ol§I¡îÁ˚
->
√xt
 = 
√wIf
;

288 
œ°N⁄Ol§I¡îÁ˚
 = 
√wIf
;

300  
nO≥√d
;

301 
	}
}

313 
	$Cª©eN⁄Ol§Nëw‹kI¡îÁ˚s
(
öãrÁ˚
 *
skùThisI¡f
)

315 
skfd
;

316 
ifc⁄f
 
ifc
;

317 
numªqs
 = 30;

318 
i‰eq
 *
i‰
;

319 
n
;

320 
nO≥√dSockës
 = 0;

323 
	`FD_ZERO
(&
I≈utSë
);

325 
skfd
 = 
	`sockë
(
PF_INET
, 
SOCK_DGRAM
, 0);

326 i‡(
skfd
 < 0) {

327 
	`P2pdPEº‹
("no inet socketávailableÅoÑetrieve interfaceÜist");

332 
ifc
.
ifc_buf
 = 
NULL
;

334 
ifc
.
ifc_Àn
 = (
i‰eq
Ë* 
numªqs
;

335 
ifc
.
ifc_buf
 = 
	`ªÆloc
(ifc.ifc_buf, ifc.
ifc_Àn
);

337 i‡(
	`io˘l
(
skfd
, 
SIOCGIFCONF
, &
ifc
) < 0) {

338 
	`P2pdPEº‹
("ioctl(SIOCGIFCONF)Érror");

340 
	`˛o£
(
skfd
);

341 
	`‰ì
(
ifc
.
ifc_buf
);

344 i‡(()
ifc
.
ifc_Àn
 =(
i‰eq
Ë* 
numªqs
) {

346 
numªqs
 *= 2;

347 
	`as£π
(
numªqs
 < 1024);

353 
	`˛o£
(
skfd
);

356 
i‰
 = 
ifc
.
ifc_ªq
;

357 
n
 = 
ifc
.
ifc_Àn
 / (
i‰eq
); --¿>0; 
i‰
++) {

358 
öãrÁ˚
 *
ﬁ§I¡f
;

359 
ﬁ§_ù_addr
 
ùAddr
;

368 
ùAddr
.
v4
 = ((
sockaddr_ö
 *Ë
	`ARM_NOWARN_ALIGN
(&
i‰
->
i‰_addr
))->
sö_addr
;

369 
ﬁ§I¡f
 = 
	`if_ifwôhaddr
(&
ùAddr
);

371 i‡(
skùThisI¡f
 !
NULL
 && 
ﬁ§I¡f
 == skipThisIntf) {

375 i‡(
ﬁ§I¡f
 =
NULL
 && !
	`IsN⁄Ol§If
(
i‰
->
i‰_«me
)) {

381 i‡(!
	`IsN⁄Ol§If
(
i‰
->
i‰_«me
)) {

387 
nO≥√dSockës
 +
	`Cª©eI¡îÁ˚
(
i‰
->
i‰_«me
, 
NULL
);

391 
	`‰ì
(
ifc
.
ifc_buf
);

393 i‡(
n⁄Ol§I¡îÁ˚s
 =
NULL
) {

399 
	}
}

411 
	$AddI¡îÁ˚
(
öãrÁ˚
 *
√wI¡f
)

415 
	`as£π
(
√wI¡f
 !
NULL
);

417  ()
	`Cª©eI¡îÁ˚
(
√wI¡f
->
öt_«me
,ÇewIntf);

420 
	}
}

439 
	$Clo£N⁄Ol§Nëw‹kI¡îÁ˚s
()

441 
nClo£d
 = 0;

442 
u_öt32_t
 
tŸÆOl§PackësRx
 = 0;

443 
u_öt32_t
 
tŸÆOl§PackësRxDup
 = 0;

444 
u_öt32_t
 
tŸÆOl§PackësTx
 = 0;

445 
u_öt32_t
 
tŸÆN⁄Ol§PackësRx
 = 0;

446 
u_öt32_t
 
tŸÆN⁄Ol§PackësRxDup
 = 0;

447 
u_öt32_t
 
tŸÆN⁄Ol§PackësTx
 = 0;

450 
N⁄Ol§I¡îÁ˚
 *
√xtIf
 = 
n⁄Ol§I¡îÁ˚s
;

451 
√xtIf
 !
NULL
) {

452 
N⁄Ol§I¡îÁ˚
 *
ifc
 = 
√xtIf
;

453 
√xtIf
 = 
ifc
->
√xt
;

455 i‡(
ifc
->
ˇ±urögSkfd
 >= 0) {

456 
	`˛o£
(
ifc
->
ˇ±urögSkfd
);

457 
nClo£d
++;

459 i‡(
ifc
->
íˇpsuœtögSkfd
 >= 0) {

460 
	`˛o£
(
ifc
->
íˇpsuœtögSkfd
);

461 
nClo£d
++;

481 i‡(
ifc
->
ﬁ§I¡f
 !
NULL
) {

482 
tŸÆOl§PackësRx
 +
ifc
->
nPackësRx
;

483 
tŸÆOl§PackësRxDup
 +
ifc
->
nPackësRxDup
;

484 
tŸÆOl§PackësTx
 +
ifc
->
nPackësTx
;

486 
tŸÆN⁄Ol§PackësRx
 +
ifc
->
nPackësRx
;

487 
tŸÆN⁄Ol§PackësRxDup
 +
ifc
->
nPackësRxDup
;

488 
tŸÆN⁄Ol§PackësTx
 +
ifc
->
nPackësTx
;

491 
	`‰ì
(
ifc
);

494 
n⁄Ol§I¡îÁ˚s
 = 
NULL
;

498 
	}
}

500 
	#MAX_NON_OLSR_IFS
 32

	)

501 
	gN⁄Ol§IfNames
[
MAX_NON_OLSR_IFS
][
IFNAMSIZ
];

502 
	gnN⁄Ol§Ifs
 = 0;

515 
AddN⁄Ol§If
(c⁄° *
ifName
, *
d©a
 
__©åibuã__
 ((
unu£d
)), 
£t_∂ugö_∑ømëî_add⁄
 
add⁄
 __attribute__ ((unused)))

517 
as£π
(
ifName
 !
NULL
);

519 i‡(
	gnN⁄Ol§Ifs
 >
MAX_NON_OLSR_IFS
) {

528 
ﬁ§_¥ötf
(1, "\nAddög i¡îÁ˚ '%s'Åÿli° o‡öãrÁ˚\n", 
ifName
);

530 
°∫˝y
(
N⁄Ol§IfNames
[
nN⁄Ol§Ifs
], 
ifName
, 
IFNAMSIZ
 - 1);

531 
	gN⁄Ol§IfNames
[
nN⁄Ol§Ifs
][
IFNAMSIZ
 - 1] = '\0';

532 
	gnN⁄Ol§Ifs
++;

545 
	$IsN⁄Ol§If
(c⁄° *
ifName
)

547 
i
;

549 
	`as£π
(
ifName
 !
NULL
);

551 
i
 = 0; i < 
nN⁄Ol§Ifs
; i++) {

552 i‡(
	`°∫cmp
(
N⁄Ol§IfNames
[
i
], 
ifName
, 
IFNAMSIZ
) == 0)

556 
	}
}

	@lib/p2pd/src/NetworkInterfaces.h

42 #i‚de‡
_NETWORKINTERFACES_H


43 
	#_NETWORKINTERFACES_H


	)

46 
	~<√töë/ö.h
>

49 
	~"ﬁ§_ty≥s.h
"

50 
	~"ﬁ§d_∂ugö.h
"

53 
	~"Packë.h
"

54 
	~"p2pd.h
"

57 
	#P2PD_BUFFER_SIZE
 2048

	)

59 
	sN⁄Ol§I¡îÁ˚
 {

61 
	mˇ±urögSkfd
;

65 
	míˇpsuœtögSkfd
;

69 
	mli°íögSkfd
;

71 
	mmacAddr
[
IFHWADDRLEN
];

73 
	mifName
[
IFNAMSIZ
];

77 
öãrÁ˚
 *
	mﬁ§I¡f
;

80 
ﬁ§_ù_addr
 
	mötAddr
;

83 
ﬁ§_ù_addr
 
	mbrﬂdAddr
;

85 
	#FRAGMENT_HISTORY_SIZE
 10

	)

86 
	sTFøgmítHi°‹y
 {

87 
u_öt16_t
 
	mùId
;

88 
u_öt8_t
 
	mùPrŸo
;

89 
ö_addr
 
	mùSrc
;

90 
ö_addr
 
	mùD°
;

91 } 
	m‰agmítHi°‹y
[
FRAGMENT_HISTORY_SIZE
];

93 
	m√xtFøgmítHi°‹yE¡ry
;

96 
u_öt32_t
 
	mnPackësRx
;

97 
u_öt32_t
 
	mnPackësRxDup
;

98 
u_öt32_t
 
	mnPackësTx
;

101 
N⁄Ol§I¡îÁ˚
 *
	m√xt
;

104 
N⁄Ol§I¡îÁ˚
 *
n⁄Ol§I¡îÁ˚s
;

106 
Highe°Skfd
;

107 
fd_£t
 
I≈utSë
;

109 
EthîTunT≠Fd
;

111 
EthîTunT≠IfName
[];

114 
	#ETHERTUNTAPDEFAULTIP
 0x0AFFFFFD

	)

116 
u_öt32_t
 
EthîTunT≠Ip
;

117 
u_öt32_t
 
EthîTunT≠IpMask
;

118 
u_öt32_t
 
EthîTunT≠IpBrﬂdˇ°
;

121 
	eP2pdMech™ism
 { 
	mBM_BROADCAST
 = 0, 
	mBM_UNICAST_PROMISCUOUS
 };

122 
P2pdMech™ism
 P2pdMechanism;

124 
SëN⁄Ol§I¡îÁ˚Name
(c⁄° *
i‚ame
, *
d©a
, 
£t_∂ugö_∑ømëî_add⁄
 
add⁄
);

125 
SëN⁄Ol§I¡îÁ˚Ip
(c⁄° *
ù
, *
d©a
, 
£t_∂ugö_∑ømëî_add⁄
 
add⁄
);

126 
SëC≠tuªPackësOnOl§I¡îÁ˚s
(c⁄° *
íabÀ
, *
d©a
, 
£t_∂ugö_∑ømëî_add⁄
 
add⁄
);

127 
SëP2pdMech™ism
(c⁄° *
mech™ism
, *
d©a
, 
£t_∂ugö_∑ømëî_add⁄
 
add⁄
);

128 
Dó˘iv©eSpoofFûãr
();

129 
Re°‹eSpoofFûãr
();

131 
	#MAX_UNICAST_NEIGHBORS
 10

	)

132 
	sTBe°Neighb‹s
 {

133 
lök_íåy
 *
	mlöks
[
MAX_UNICAST_NEIGHBORS
];

136 
FödNeighb‹s
(
TBe°Neighb‹s
 *
√ighb‹s
,

137 
lök_íåy
 **
be°Neighb‹
,

138 
N⁄Ol§I¡îÁ˚
 *
ötf
,

139 
ﬁ§_ù_addr
 *
sour˚
,

140 
ﬁ§_ù_addr
 *
f‹w¨dedBy
, ﬁ§_ù_add∏*
f‹w¨dedTo
, *
nPossibÀNeighb‹s
);

142 
Cª©eN⁄Ol§Nëw‹kI¡îÁ˚s
(
öãrÁ˚
 *
skùThisI¡f
);

143 
AddI¡îÁ˚
(
öãrÁ˚
 *
√wI¡f
);

144 
Clo£N⁄Ol§Nëw‹kI¡îÁ˚s
();

145 
AddN⁄Ol§If
(c⁄° *
ifName
, *
d©a
, 
£t_∂ugö_∑ømëî_add⁄
 
add⁄
);

146 
IsN⁄Ol§If
(c⁄° *
ifName
);

147 
CheckAndUpd©eLoˇlBrﬂdˇ°
(*
ùPackë
, 
ﬁ§_ù_addr
 *
brﬂdAddr
);

148 
AddMu…iˇ°Rouã
();

149 
DñëeMu…iˇ°Rouã
();

150 
Cª©eC≠tuªSockë
(c⁄° *
ifName
);

	@lib/p2pd/src/Packet.c

41 
	~"ﬁ§.h
"

42 
	~"Packë.h
"

45 
	~<°ddef.h
>

46 
	~<as£π.h
>

47 
	~<°rög.h
>

48 
	~<sys/ty≥s.h
>

49 
	~<√töë/ö.h
>

50 
	~<√töë/ù.h
>

60 
	$IsIpFøgmít
(* 
ùPackë
)

62 
ù
* 
ùh
;

64 
	`as£π
(
ùPackë
 !
NULL
);

66 
ùh
 = (
ù
*Ë
	`ARM_NOWARN_ALIGN
(
ùPackë
);

67 i‡((
	`¡ohs
(
ùh
->
ù_off
Ë& 
IP_OFFMASK
) != 0)

72 
	}
}

83 
u_öt16_t
 
	$GëIpTŸÆLígth
(* 
ùPackë
)

85 
ùhdr
* 
ùh
;

87 
	`as£π
(
ùPackë
 !
NULL
);

89 
ùh
 = (
ùhdr
*Ë
	`ARM_NOWARN_ALIGN
(
ùPackë
);

90  
	`¡ohs
(
ùh
->
tŸ_Àn
);

91 
	}
}

101 
	$IsIpv4Føgmít
(
ù
* 
hdr
)

103 
	`as£π
(
hdr
 !
NULL
);

105 i‡((
	`¡ohs
(
hdr
->
ù_off
Ë& 
IP_OFFMASK
) != 0)

110 
	}
}

112 
	$IsMu…iˇ°v4
(
ù
* 
hdr
)

114 
	`as£π
(
hdr
 !
NULL
);

116 i‡(
	`IN_MULTICAST
(
	`¡ohl
(
hdr
->
ù_d°
.
s_addr
)))

120 
	}
}

131 
IsIpv6Føgmít
(
ù6_hdr
* 
hdr
 
__©åibuã__
 ((
unu£d
)))

133 
as£π
(
hdr
 !
NULL
);

142 
IsMu…iˇ°v6
(
ù6_hdr
* 
hdr
 
__©åibuã__
 ((
unu£d
)))

144 
as£π
(
hdr
 !
NULL
);

159 
	$GëIpHódîLígth
(*
ùPackë
)

161 
ùhdr
 *
ùh
;

163 
	`as£π
(
ùPackë
 !
NULL
);

165 
ùh
 = (
ùhdr
 *Ë
	`ARM_NOWARN_ALIGN
(
ùPackë
);

166  
ùh
->
ihl
 << 2;

167 
	}
}

178 
	$GëIpPackë
(*
íˇpsuœti⁄UdpD©a
)

180  
íˇpsuœti⁄UdpD©a
 + 
ENCAP_HDR_LEN
;

181 
	}
}

192 
u_öt8_t
 
	$GëTé
(* 
ùPackë
)

194 
ùhdr
* 
ùh
;

196 
	`as£π
(
ùPackë
 !
NULL
);

198 
ùh
 = (
ùhdr
*Ë
	`ARM_NOWARN_ALIGN
(
ùPackë
);

199  
ùh
->
âl
;

200 
	}
}

211 
	$SaveTéAndChecksum
(* 
ùPackë
, 
TSaveTé
* 
°é
)

213 
ùhdr
* 
ùh
;

215 
	`as£π
(
ùPackë
 !
NULL
 && 
°é
 != NULL);

217 
ùh
 = (
ùhdr
*Ë
	`ARM_NOWARN_ALIGN
(
ùPackë
);

218 
°é
->
âl
 = 
ùh
->ttl;

219 
°é
->
check
 = 
	`¡ohs
(
ùh
->check);

220 
	}
}

232 
	$Re°‹eTéAndChecksum
(* 
ùPackë
, 
TSaveTé
* 
°é
)

234 
ùhdr
* 
ùh
;

236 
	`as£π
(
ùPackë
 !
NULL
 && 
°é
 != NULL);

238 
ùh
 = (
ùhdr
*Ë
	`ARM_NOWARN_ALIGN
(
ùPackë
);

239 
ùh
->
âl
 = 
°é
->ttl;

240 
ùh
->
check
 = 
	`ht⁄s
(
°é
->check);

241 
	}
}

253 
	$De¸ó£TéAndUpd©eHódîChecksum
(* 
ùPackë
)

255 
ùhdr
* 
ùh
;

256 
u_öt32_t
 
sum
;

258 
	`as£π
(
ùPackë
 !
NULL
);

260 
ùh
 = (
ùhdr
*Ë
	`ARM_NOWARN_ALIGN
(
ùPackë
);

262 
ùh
->
âl
--;

263 
sum
 = 
	`¡ohs
(
ùh
->
check
) + 0x100;

264 
ùh
->
check
 = 
	`ht⁄s
(
sum
 + (sum>>16));

265 
	}
}

	@lib/p2pd/src/Packet.h

42 #i‚de‡
_P2PD_PACKET_H


43 
	#_P2PD_PACKET_H


	)

46 
	~<√töë/ù.h
>

47 
	~<√töë/ù6.h
>

48 
	~<√t/if.h
>

49 
	~<sys/ty≥s.h
>

51 
	sTSaveTé


53 
u_öt8_t
 
	mâl
;

54 
u_öt16_t
 
	mcheck
;

55 } 
__©åibuã__
((
__∑cked__
));

61 
	sTEnˇpHódî
 {

63 
u_öt8_t
 
	mty≥
;

64 
u_öt8_t
 
	mÀn
;

65 
u_öt16_t
 
	mª£rved
;

66 
u_öt32_t
 
	m¸c32
;

67 } 
__©åibuã__
 ((
__∑cked__
));

69 
	#ENCAP_HDR_LEN
 (()(
TEnˇpHódî
))

	)

71 
IsIpFøgmít
(* 
ùPackë
);

72 
u_öt16_t
 
GëIpTŸÆLígth
(* 
ùPackë
);

73 
IsIpv4Føgmít
(
ù
*);

74 
IsMu…iˇ°v4
(
ù
*);

75 
IsIpv6Føgmít
(
ù6_hdr
*);

76 
IsMu…iˇ°v6
(
ù6_hdr
*);

77 
u_öt8_t
 
GëTé
(* 
ùPackë
);

78 
SaveTéAndChecksum
(* 
ùPackë
, 
TSaveTé
* 
°é
);

79 
Re°‹eTéAndChecksum
(* 
ùPackë
, 
TSaveTé
* 
°é
);

80 
De¸ó£TéAndUpd©eHódîChecksum
(* 
ùPackë
);

81 
GëIpHódîLígth
(*
ùPackë
);

82 *
GëIpPackë
(*
íˇpsuœti⁄UdpD©a
);

	@lib/p2pd/src/PacketHistory.c

41 
	~"PackëHi°‹y.h
"

44 
	~<°ddef.h
>

45 
	~<as£π.h
>

46 
	~<°rög.h
>

47 
	~<sys/ty≥s.h
>

48 
	~<√töë/ù.h
>

49 
	~<°dlib.h
>

52 
	~"ﬁ§.h
"

53 
	~"scheduÀr.h
"

56 
	~"Packë.h
"

58 
TDupE¡ry
* 
	gPackëHi°‹y
[
HISTORY_HASH_SIZE
];

60 
	#CRC_UPTO_NBYTES
 256

	)

72 
u_öt16_t
 
	$CÆcCrcCcôt
(* 
buf„r
, 
ssize_t
 
Àn
)

76 
u_öt16_t
 
¸c
 = 0xFFFF;

77 
i
;

79 
	`as£π
(
buf„r
 !
NULL
);

81 
i
 = 0; i < 
Àn
; i++)

83 
¸c
 = ()(crc >> 8) | (crc << 8);

84 
¸c
 ^
buf„r
[
i
];

85 
¸c
 ^= ()(crc & 0xff) >> 4;

86 
¸c
 ^= (crc << 8) << 4;

87 
¸c
 ^= ((crc & 0xff) << 4) << 1;

89  
¸c
;

90 
	}
}

102 
	#CRC32_POLYNOMIAL
 0xedb88320UL

	)

104 
	gCrcTabÀ
[256];

106 
	$Gíî©eCrc32TabÀ
()

108 
i
, 
j
;

109 
u_öt32_t
 
¸c
;

110 
i
 = 0; i < 256; i++)

112 
¸c
 = (
u_öt32_t
Ë
i
;

113 
j
 = 0; j < 8; j++)

115 i‡(
¸c
 & 1)

117 
¸c
 = (¸¯>> 1Ë^ 
CRC32_POLYNOMIAL
;

121 
¸c
 = (crc >> 1);

124 
CrcTabÀ
[
i
] = 
¸c
;

126 
	}
}

137 
u_öt32_t
 
	$CÆcCrc32
(* 
buf„r
, 
ssize_t
 
Àn
)

139 
i
, 
j
;

140 
u_öt32_t
 
¸c
 = 0xffffffffUL;

141 
i
 = 0; i < 
Àn
; i++)

143 
j
 = ((Ë(
¸c
 & 0xFFË^ *
buf„r
++);

144 
¸c
 = (¸¯>> 8Ë^ 
CrcTabÀ
[
j
];

146  
¸c
 ^ 0xffffffffUL;

147 
	}
}

158 
u_öt32_t
 
	$PackëCrc32
(* 
ùPackë
, 
ssize_t
 
Àn
)

160 
TSaveTé
 
°é
;

161 
ù
* 
ùHódî
;

162 
u_öt32_t
 
ªsu…
;

164 
	`as£π
(
ùPackë
 !
NULL
);

175 
	`as£π
(
Àn
 > 0);

176 i‡(
Àn
 > 
CRC_UPTO_NBYTES
)

178 
Àn
 = 
CRC_UPTO_NBYTES
;

181 
	`SaveTéAndChecksum
(
ùPackë
, &
°é
);

183 
ùHódî
 = (
ù
*Ë
	`ARM_NOWARN_ALIGN
(
ùPackë
);

184 
ùHódî
->
ù_âl
 = 0xFF;

185 
ùHódî
->
ù_sum
 = 0x5A5A;

187 
ªsu…
 = 
	`CÆcCrc32
(
ùPackë
, 
Àn
);

189 
	`Re°‹eTéAndChecksum
(
ùPackë
, &
°é
);

190  
ªsu…
;

191 
	}
}

201 
u_öt32_t
 
	$Hash
(
u_öt32_t
 
‰om32
)

203  ((
‰om32
 >> 
N_HASH_BITS
) + from32) & ((1 << N_HASH_BITS) - 1);

204 
	}
}

214 
	$InôPackëHi°‹y
()

216 
i
;

218 
	`Gíî©eCrc32TabÀ
();

220 
i
 = 0; i < 
HISTORY_HASH_SIZE
; i++)

222 
PackëHi°‹y
[
i
] = 
NULL
;

224 
	}
}

235 
	$CheckAndM¨kRe˚¡Packë
(
u_öt32_t
 
¸c32
)

237 
u_öt32_t
 
idx
;

238 
TDupE¡ry
* 
wÆkî
;

239 
TDupE¡ry
* 
√wE¡ry
;

241 
idx
 = 
	`Hash
(
¸c32
);

242 
	`as£π
(
idx
 < 
HISTORY_HASH_SIZE
);

244 
wÆkî
 = 
PackëHi°‹y
[
idx
]; wÆkî !
NULL
; wÆkî = wÆkî->
√xt
)

246 i‡(
wÆkî
->
¸c32
 == crc32)

251 
wÆkî
->
timeOut
 = 
	`ﬁ§_gëTime°amp
(
HISTORY_HOLD_TIME
);

258 
√wE¡ry
 = 
	`ﬁ§_mÆloc
((
TDupE¡ry
), "OLSRD P2PD: TDupEntry");

259 i‡(
√wE¡ry
 !
NULL
)

261 
√wE¡ry
->
¸c32
 = crc32;

262 
√wE¡ry
->
timeOut
 = 
	`ﬁ§_gëTime°amp
(
HISTORY_HOLD_TIME
);

265 
√wE¡ry
->
√xt
 = 
PackëHi°‹y
[
idx
];

266 
PackëHi°‹y
[
idx
] = 
√wE¡ry
;

270 
	}
}

280 
Pru√PackëHi°‹y
(* 
u£Àss
 
__©åibuã__
 ((
unu£d
)))

282 
uöt
 
	gi
;

283 
	gi
 = 0; i < 
	gHISTORY_HASH_SIZE
; i++)

285 i‡(
	gPackëHi°‹y
[
i
] !
NULL
)

287 
TDupE¡ry
* 
√xtE¡ry
 = 
PackëHi°‹y
[
i
];

288 
TDupE¡ry
* 
	g¥evE¡ry
 = 
NULL
;

289 
	g√xtE¡ry
 !
NULL
)

291 
TDupE¡ry
* 
íåy
 = 
√xtE¡ry
;

292 
	g√xtE¡ry
 = 
íåy
->
√xt
;

294 i‡(
ﬁ§_isTimedOut
(
íåy
->
timeOut
))

297 i‡(
	g¥evE¡ry
 !
NULL
)

299 
¥evE¡ry
->
√xt
 = 
íåy
->next;

303 
	gPackëHi°‹y
[
i
] = 
íåy
->
√xt
;

307 
‰ì
(
íåy
);

311 
	g¥evE¡ry
 = 
íåy
;

	@lib/p2pd/src/PacketHistory.h

1 #i‚de‡
_BMF_PACKETHISTORY_H


2 
	#_BMF_PACKETHISTORY_H


	)

45 
	~<sys/ty≥s.h
>

46 
	~<sys/times.h
>

48 
	#N_HASH_BITS
 15

	)

49 
	#HISTORY_HASH_SIZE
 (1 << 
N_HASH_BITS
)

	)

52 
	#HISTORY_HOLD_TIME
 3000

	)

54 
	sTDupE¡ry


56 
u_öt32_t
 
	m¸c32
;

57 
˛ock_t
 
	mtimeOut
;

58 
TDupE¡ry
* 
	m√xt
;

61 
InôPackëHi°‹y
();

62 
u_öt32_t
 
PackëCrc32
(* 
ùPkt
, 
ssize_t
 
Àn
);

63 
u_öt32_t
 
Hash
(u_öt32_à
‰om32
);

64 
M¨kRe˚¡Packë
(
u_öt32_t
 
¸c32
);

65 
CheckAndM¨kRe˚¡Packë
(
u_öt32_t
 
¸c32
);

66 
Pru√PackëHi°‹y
(*);

	@lib/p2pd/src/dllist.c

1 
	~<°dlib.h
>

3 
	~"ﬁ§_ty≥s.h
"

4 
	~"dŒi°.h
"

16 
node
 * 
	$≠≥nd_node
(
node
 ** 
hód
, nodê** 
èû
, * 
d©a
)

18 
node
 * 
√w
 = 
	`ˇŒoc
(1, (node));

20 i‡(*
hód
 =
NULL
) {

21 *
hód
 = 
√w
;

23 
√w
->
¥ev
 = *
èû
;

24 (*
èû
)->
√xt
 = 
√w
;

27 
√w
->
d©a
 = data;

28 *
èû
 = 
√w
;

30  
√w
;

31 
	}
}

45 
	$ªmove_node
(
node
 ** 
hód
, nodê**
èû
, nodê*Çode, 
boﬁ
 
‰ì_d©a
)

47 
node
 * 
cuº
 = 
NULL
;

49 
cuº
 = *
hód
; cuº; cuº = cuº->
√xt
) {

50 i‡(
cuº
 =
node
) {

53 i‡(
‰ì_d©a
)

54 
	`‰ì
(
cuº
->
d©a
);

56 i‡(
cuº
 =*
hód
) {

58 *
hód
 = 
cuº
->
√xt
;

59 } i‡(
cuº
 =*
èû
) {

61 *
èû
 = 
cuº
->
¥ev
;

64 
cuº
->
¥ev
->
√xt
 = curr->next;

65 
cuº
->
√xt
->
¥ev
 = curr->prev;

68 i‡(*
hód
 !
NULL
)

69 (*
hód
)->
¥ev
 = 
NULL
;

71 i‡(*
èû
 !
NULL
)

72 (*
èû
)->
√xt
 = 
NULL
;

74 i‡(
cuº
 !
NULL
) {

75 
cuº
->
√xt
 = cuº->
¥ev
 = 
NULL
;

76 
	`‰ì
(
cuº
);

81 
	}
}

92 
	$˛ór_li°
(
node
 **
hód
, nodê**
èû
, 
boﬁ
 
‰ì_d©a
)

94 *
hód
)

95 
	`ªmove_node
(
hód
, 
èû
, *hód, 
‰ì_d©a
);

96 
	}
}

	@lib/p2pd/src/dllist.h

8 #i‚de‡
_DLLIST_H


9 
	#_DLLIST_H


	)

11 
	snode
 {

12 * 
	md©a
;

13 
node
 * 
	m√xt
;

14 
node
 * 
	m¥ev
;

17 
node
 * 
≠≥nd_node
(nodê** 
hód
, nodê** 
èû
, * 
d©a
);

18 
ªmove_node
(
node
 ** 
hód
, nodê**
èû
, nodê*Çode, 
boﬁ
 
‰ì_d©a
);

19 
˛ór_li°
(
node
 **
hód
, nodê**
èû
, 
boﬁ
 
‰ì_d©a
);

	@lib/p2pd/src/olsrd_plugin.c

42 
	~<as£π.h
>

43 
	~<°ddef.h
>

46 
	~"ﬁ§d_∂ugö.h
"

47 
	~"∂ugö_utû.h
"

48 
	~"defs.h
"

49 
	~"scheduÀr.h
"

50 
	~"ﬁ§_cfg.h
"

51 
	~"ﬁ§_cookõ.h
"

54 
	~"p2pd.h
"

55 
	~"Nëw‹kI¡îÁ˚s.h
"

57 
__©åibuã__
 ((
c⁄°ru˘‹
)Ë
my_öô
();

58 
__©åibuã__
 ((
de°ru˘‹
)Ë
my_föi
();

62 
ﬁ§_∂ugö_exô
();

75 
	$ﬁ§d_∂ugö_öãrÁ˚_vîsi⁄
()

77  
PLUGIN_INTERFACE_VERSION
;

78 
	}
}

90 
	$ﬁ§d_∂ugö_öô
()

92  
	`InôP2pd
(
NULL
);

93 
	}
}

105 
	$ﬁ§_∂ugö_exô
()

107 
	`Clo£P2pd
();

108 
	}
}

110 c⁄° 
ﬁ§d_∂ugö_∑ømëîs
 
	g∂ugö_∑ømëîs
[] = {

111 {.
«me
 = "N⁄Ol§If",.
	g£t_∂ugö_∑ømëî
 = &
AddN⁄Ol§If
,.
	gd©a
 = 
NULL
},

112 {.
	g«me
 = "P2pdTé", .
	g£t_∂ugö_∑ømëî
 = &
SëP2pdTé
, .
	gd©a
 = 
NULL
 },

113 {.
	g«me
 = "UdpDe°P‹t",.
	g£t_∂ugö_∑ømëî
 = &
AddUdpDe°P‹t
,.
	gd©a
 = 
NULL
},

114 {.
	g«me
 = "U£HashFûãr",.
	g£t_∂ugö_∑ømëî
 = &
SëP2pdU£HashFûãr
,.
	gd©a
 = 
NULL
},

128 
	$ﬁ§d_gë_∂ugö_∑ømëîs
(c⁄° 
ﬁ§d_∂ugö_∑ømëîs
 **
∑øms
, *
size
)

130 *
∑øms
 = 
∂ugö_∑ømëîs
;

131 *
size
 = 
	`ARRAYSIZE
(
∂ugö_∑ømëîs
);

132 
	}
}

144 
	$my_öô
()

147 
	`¥ötf
("%s\n", 
MOD_DESC
);

150 
	}
}

162 
	$my_föi
()

164 
	`ﬁ§_∂ugö_exô
();

165 
	}
}

	@lib/p2pd/src/p2pd.c

42 
	~"p2pd.h
"

45 
	~<°ddef.h
>

46 
	~<sys/ty≥s.h
>

47 
	~<°rög.h
>

48 
	~<°d¨g.h
>

49 
	~<î∫o.h
>

50 
	~<as£π.h
>

51 
	~<uni°d.h
>

52 
	~<f˙é.h
>

53 
	~<löux/if_ëhî.h
>

54 
	~<löux/if_∑ckë.h
>

56 
	~<sig«l.h
>

57 
	~<√töë/ù.h
>

58 
	~<√töë/udp.h
>

59 
	~<uni°d.h
>

61 
	~<√töë/ö.h
>

62 
	~<√töë/ù6.h
>

64 
	~<time.h
>

67 
	~"∂ugö_utû.h
"

68 
	~"defs.h
"

69 
	~"ùˇlc.h
"

70 
	~"ﬁ§.h
"

71 
	~"mid_£t.h
"

72 
	~"lök_£t.h
"

73 
	~"√t_ﬁ§.h
"

74 
	~"∑r£r.h
"

77 
	~"Nëw‹kI¡îÁ˚s.h
"

81 
	~"Packë.h
"

84 
	~"PackëHi°‹y.h
"

85 
	~"dŒi°.h
"

87 
	gP2pdTé
 = 0;

88 
	gP2pdU£Hash
 = 0;

89 
	gP2pdDu∂iˇãTimeout
 = 
P2PD_VALID_TIME
;

92 
UdpDe°P‹t
 * 
	gUdpDe°P‹tLi°
 = 
NULL
;

96 
node
 * 
	gdupFûãrHód
 = 
NULL
;

97 
node
 * 
	gdupFûãrTaû
 = 
NULL
;

99 
boﬁ
 
is_brﬂdˇ°
(c⁄° 
sockaddr_ö
 
addr
);

100 
boﬁ
 
is_mu…iˇ°
(c⁄° 
sockaddr_ö
 
addr
);

101 * 
gë_ùv4_°r
(
uöt32_t
 
addªss
, *
s
, 
size_t
 
maxÀn
);

102 * 
gë_ùv6_°r
(* 
addªss
, *
s
, 
size_t
 
maxÀn
);

103 #ifde‡
INCLUDE_DEBUG_OUTPUT


104 
dump_∑ckë
(* 
∑ckë
, 
Àngth
);

106 
boﬁ
 
check_™d_m¨k_ª˚¡_∑ckë
(*
d©a
, 
Àn
);

117 
	$PackëRe˚ivedFromOLSR
(*
íˇpsuœti⁄UdpD©a
, 
Àn
)

119 
ù
 *
ùHódî
;

120 
ù6_hdr
 *
ù6Hódî
;

121 
udphdr
 *
udpHódî
;

122 
N⁄Ol§I¡îÁ˚
 *
wÆkî
;

123 
°rù≥d_Àn
 = 0;

124 
ﬁ§_ù_addr
 
de°Addr
;

125 
de°P‹t
;

126 
boﬁ
 
isInLi°
 = 
Ál£
;

128 
ùHódî
 = (
ù
 *Ë
	`ARM_NOWARN_ALIGN
(
íˇpsuœti⁄UdpD©a
);

129 
ù6Hódî
 = (
ù6_hdr
 *Ë
	`ARM_NOWARN_ALIGN
(
íˇpsuœti⁄UdpD©a
);

132 i‡(
	`check_™d_m¨k_ª˚¡_∑ckë
(
íˇpsuœti⁄UdpD©a
, 
Àn
))

136 
wÆkî
 = 
n⁄Ol§I¡îÁ˚s
; wÆkî !
NULL
; wÆkî = wÆkî->
√xt
) {

138 i‡(
wÆkî
->
ﬁ§I¡f
 =
NULL
) {

139 
nByãsWrôãn
;

140 
sockaddr_Œ
 
de°
;

142 
	`mem£t
(&
de°
, 0, (dest));

143 
de°
.
¶l_Ámûy
 = 
AF_PACKET
;

144 i‡((
íˇpsuœti⁄UdpD©a
[0] & 0xf0) == 0x40) {

145 
de°
.
¶l_¥Ÿocﬁ
 = 
	`ht⁄s
(
ETH_P_IP
);

146 
°rù≥d_Àn
 = 
	`¡ohs
(
ùHódî
->
ù_Àn
);

149 i‡((
íˇpsuœti⁄UdpD©a
[0] & 0xf0) == 0x60) {

150 
de°
.
¶l_¥Ÿocﬁ
 = 
	`ht⁄s
(
ETH_P_IPV6
);

151 
°rù≥d_Àn
 = 40 + 
	`¡ohs
(
ù6Hódî
->
ù6_∂í
);

157 i‡(0 =
°rù≥d_Àn
)

162 i‡(
°rù≥d_Àn
 > 
Àn
) {

165 
de°
.
¶l_ifödex
 = 
	`if_«mëoödex
(
wÆkî
->
ifName
);

166 
de°
.
¶l_hÆí
 = 
IFHWADDRLEN
;

168 i‡(
ﬁ§_˙f
->
ù_vîsi⁄
 =
AF_INET
) {

177 i‡(
	`IsMu…iˇ°v4
(
ùHódî
)) {

178 
ö_addr_t
 
addr
 = 
	`¡ohl
(
ùHódî
->
ù_d°
.
s_addr
);

180 
de°
.
¶l_addr
[0] = 0x01;

181 
de°
.
¶l_addr
[1] = 0x00;

182 
de°
.
¶l_addr
[2] = 0x5E;

183 
de°
.
¶l_addr
[3] = (
addr
 >> 16) & 0x7F;

184 
de°
.
¶l_addr
[4] = (
addr
 >> 8) & 0xFF;

185 
de°
.
¶l_addr
[5] = 
addr
 & 0xFF;

188 
	`mem£t
(
de°
.
¶l_addr
, 0xFF, 
IFHWADDRLEN
);

191 i‡(
	`IsMu…iˇ°v6
(
ù6Hódî
)) {

192 
de°
.
¶l_addr
[0] = 0x33;

193 
de°
.
¶l_addr
[1] = 0x33;

194 
de°
.
¶l_addr
[2] = 
ù6Hódî
->
ù6_d°
.
s6_addr
[12];

195 
de°
.
¶l_addr
[3] = 
ù6Hódî
->
ù6_d°
.
s6_addr
[13];

196 
de°
.
¶l_addr
[4] = 
ù6Hódî
->
ù6_d°
.
s6_addr
[14];

197 
de°
.
¶l_addr
[5] = 
ù6Hódî
->
ù6_d°
.
s6_addr
[15];

201 i‡(
ﬁ§_˙f
->
ù_vîsi⁄
 =
AF_INET
) {

203 i‡(
ùHódî
->
ù_p
 =
SOL_UDP
 && !
	`IsIpv4Føgmít
(ipHeader)) {

204 
udpHódî
 = (
udphdr
*Ë
	`ARM_NOWARN_ALIGN
((
íˇpsuœti⁄UdpD©a
 +

205 
	`GëIpHódîLígth
(
íˇpsuœti⁄UdpD©a
)));

206 
de°Addr
.
v4
.
s_addr
 = 
ùHódî
->
ù_d°
.s_addr;

207 
de°P‹t
 = 
	`ht⁄s
(
udpHódî
->
de°
);

208 
isInLi°
 = 
	`InUdpDe°P‹tLi°
(
AF_INET
, &
de°Addr
, 
de°P‹t
);

209 #ifde‡
INCLUDE_DEBUG_OUTPUT


210 i‡(!
isInLi°
) {

211 
tmp
[32];

212 
	`OLSR_PRINTF
(1,

214 
PLUGIN_NAME_SHORT
,

215 
	`gë_ùv4_°r
(
de°Addr
.
v4
.
s_addr
,

216 
tmp
,

217 (
tmp
)),

218 
de°P‹t
);

223 i‡(
ù6Hódî
->
ù6_nxt
 =
SOL_UDP
 && !
	`IsIpv6Føgmít
(ip6Header)) {

224 
udpHódî
 = (
udphdr
*Ë
	`ARM_NOWARN_ALIGN
((
íˇpsuœti⁄UdpD©a
 + 40));

225 
	`mem˝y
(&
de°Addr
.
v6
, &
ù6Hódî
->
ù6_d°
, (
ö6_addr
));

226 
de°P‹t
 = 
	`ht⁄s
(
udpHódî
->
de°
);

227 
isInLi°
 = 
	`InUdpDe°P‹tLi°
(
AF_INET6
, &
de°Addr
, 
de°P‹t
);

228 #ifde‡
INCLUDE_DEBUG_OUTPUT


229 i‡(!
isInLi°
) {

230 
tmp
[64];

231 
	`OLSR_PRINTF
(1,

233 
PLUGIN_NAME_SHORT
,

234 
	`gë_ùv6_°r
(
de°Addr
.
v6
.
s6_addr
,

235 
tmp
,

236 (
tmp
)),

237 
de°P‹t
);

243 i‡(!
isInLi°
) {

251 
nByãsWrôãn
 = 
	`£ndto
(
wÆkî
->
ˇ±urögSkfd
,

252 
íˇpsuœti⁄UdpD©a
,

253 
°rù≥d_Àn
,

255 (
sockaddr
 *)&
de°
,

256 (
de°
));

257 i‡(
nByãsWrôãn
 !
°rù≥d_Àn
) {

258 
	`P2pdPEº‹
("sendto()Érror forwarding unpackedÉncapsulatedÖkt on \"%s\"",

259 
wÆkî
->
ifName
);

270 
	}
}

275 
	gHighe°Skfd
 = -1;

278 
fd_£t
 
	gI≈utSë
;

290 
boﬁ


291 
	$p2pd_mesßge_£í
(
node
 **
hód
, nodê**
èû
, 
ﬁ§_mesßge
 *
m
)

293 
node
 * 
cuº
;

294 
time_t
 
now
;

296 
now
 = 
	`time
(
NULL
);

299 
cuº
 = *
hód
;

300 
cuº
) {

301 
DupFûãrE¡ry
 *
fûãr
;

302 
node
 * 
√xt
 = 
cuº
->next;

305 
fûãr
 = (
DupFûãrE¡ry
*)
cuº
->
d©a
;

307 i‡((
fûãr
->
¸óti⁄time
 + 
P2pdDu∂iˇãTimeout
Ë< 
now
)

308 
	`ªmove_node
(
hód
, 
èû
, 
cuº
, 
åue
);

311 
cuº
 = 
√xt
;

315 
cuº
 = *
hód
; cuº; cuº = cuº->
√xt
) {

316 
DupFûãrE¡ry
 *
fûãr
 = (DupFûãrE¡ry*)
cuº
->
d©a
;

318 i‡(
ﬁ§_˙f
->
ù_vîsi⁄
 =
AF_INET
) {

319 i‡(
fûãr
->
addªss
.
v4
.
s_addr
 =
m
->v4.
‹igö©‹
 &&

320 
fûãr
->
msgty≥
 =
m
->
v4
.
ﬁ§_msgty≥
 &&

321 
fûãr
->
£qno
 =
m
->
v4
.seqno) {

322  
åue
;

325 i‡(
	`memcmp
(
fûãr
->
addªss
.
v6
.
s6_addr
,

326 
m
->
v6
.
‹igö©‹
.
s6_addr
,

327 (
m
->
v6
.
‹igö©‹
.
s6_addr
)) == 0 &&

328 
fûãr
->
msgty≥
 =
m
->
v6
.
ﬁ§_msgty≥
 &&

329 
fûãr
->
£qno
 =
m
->
v6
.seqno) {

330  
åue
;

335  
Ál£
;

336 
	}
}

349 
	$p2pd_°‹e_mesßge
(
node
 **
hód
, nodê**
èû
, 
ﬁ§_mesßge
 *
m
)

351 
time_t
 
now
;

354 
DupFûãrE¡ry
 *
√w_dup
 = 
	`ˇŒoc
(1, (DupFilterEntry));

355 i‡(
√w_dup
 =
NULL
) {

356 
	`OLSR_PRINTF
(1, "%s: Ouào‡mem‹y\n", 
PLUGIN_NAME_SHORT
);

360 
now
 = 
	`time
(
NULL
);

362 
√w_dup
->
¸óti⁄time
 = 
now
;

363 i‡(
ﬁ§_˙f
->
ù_vîsi⁄
 =
AF_INET
) {

364 
√w_dup
->
addªss
.
v4
.
s_addr
 = 
m
->v4.
‹igö©‹
;

365 
√w_dup
->
msgty≥
 = 
m
->
v4
.
ﬁ§_msgty≥
;

366 
√w_dup
->
£qno
 = 
m
->
v4
.seqno;

368 
	`mem˝y
(
√w_dup
->
addªss
.
v6
.
s6_addr
,

369 
m
->
v6
.
‹igö©‹
.
s6_addr
,

370 (
m
->
v6
.
‹igö©‹
.
s6_addr
));

371 
√w_dup
->
msgty≥
 = 
m
->
v6
.
ﬁ§_msgty≥
;

372 
√w_dup
->
£qno
 = 
m
->
v6
.seqno;

376 
	`≠≥nd_node
(
hód
, 
èû
, 
√w_dup
);

377 
	}
}

387 
boﬁ


388 
	$p2pd_is_du∂iˇã_mesßge
(
ﬁ§_mesßge
 *
msg
)

390 if(
	`p2pd_mesßge_£í
(&
dupFûãrHód
, &
dupFûãrTaû
, 
msg
)) {

391  
åue
;

394 
	`p2pd_°‹e_mesßge
(&
dupFûãrHód
, &
dupFûãrTaû
, 
msg
);

396  
Ál£
;

397 
	}
}

410 
boﬁ


411 
ﬁ§_∑r£r
(
ﬁ§_mesßge
 *
m
,

412 
öãrÁ˚
 *
ö_if
 
__©åibuã__
 ((
unu£d
)),

413 
ﬁ§_ù_addr
 *
ùaddr
 
__©åibuã__
 ((
unu£d
)))

415 
ﬁ§_ù_addr
 
	g‹igö©‹
;

416 
	gsize
;

421 i‡(
	gﬁ§_˙f
->
	gù_vîsi⁄
 =
AF_INET
) {

422 
mem˝y
(&
‹igö©‹
, &
m
->
v4
.‹igö©‹, 
ﬁ§_˙f
->
ùsize
);

423 
	gsize
 = 
¡ohs
(
m
->
v4
.
ﬁ§_msgsize
);

425 
mem˝y
(&
‹igö©‹
, &
m
->
v6
.‹igö©‹, 
ﬁ§_˙f
->
ùsize
);

426 
	gsize
 = 
¡ohs
(
m
->
v6
.
ﬁ§_msgsize
);

431 i‡(
ùequÆ
(&
‹igö©‹
, &
ﬁ§_˙f
->
maö_addr
))

432  
	gÁl£
;

435 i‡(
p2pd_is_du∂iˇã_mesßge
(
m
))

436  
	gåue
;

438 i‡(
	gﬁ§_˙f
->
	gù_vîsi⁄
 =
AF_INET
) {

439 
PackëRe˚ivedFromOLSR
((*)&
m
->
v4
.
mesßge
, 
size
 - 12);

441 
PackëRe˚ivedFromOLSR
((*)&
m
->
v6
.
mesßge
, 
size
 - 12 - 96);

444  
	gåue
;

457 
	$ﬁ§_p2pd_gí
(*
∑ckë
, 
Àn
)

460 
buf„r
[10240];

461 
Æig√d_size
;

462 
ﬁ§_mesßge
 *
mesßge
 = (ﬁ§_mesßgê*)
buf„r
;

463 
öãrÁ˚
 *
i‚
;

465 
Æig√d_size
=
Àn
;

467 i‡((
Æig√d_size
 % 4) != 0) {

468 
Æig√d_size
 = (aligned_size - (aligned_size % 4)) + 4;

472 i‡(
ﬁ§_˙f
->
ù_vîsi⁄
 =
AF_INET
) {

474 
mesßge
->
v4
.
ﬁ§_msgty≥
 = 
P2PD_MESSAGE_TYPE
;

475 
mesßge
->
v4
.
ﬁ§_vtime
 = 
	`ª…ime_to_me
(
P2PD_VALID_TIME
 * 
MSEC_PER_SEC
);

476 
	`mem˝y
(&
mesßge
->
v4
.
‹igö©‹
, &
ﬁ§_˙f
->
maö_addr
, ol§_˙f->
ùsize
);

477 
mesßge
->
v4
.
âl
 = 
P2pdTé
 ? P2pdTé : 
MAX_TTL
;

478 
mesßge
->
v4
.
h›˙t
 = 0;

479 
mesßge
->
v4
.
£qno
 = 
	`ht⁄s
(
	`gë_msg_£qno
());

480 
mesßge
->
v4
.
ﬁ§_msgsize
 = 
	`ht⁄s
(
Æig√d_size
 + 12);

481 
	`mem£t
(&
mesßge
->
v4
.mesßge, 0, 
Æig√d_size
);

482 
	`mem˝y
(&
mesßge
->
v4
.mesßge, 
∑ckë
, 
Àn
);

483 
Æig√d_size
 =áligned_size + 12;

486 
mesßge
->
v6
.
ﬁ§_msgty≥
 = 
P2PD_MESSAGE_TYPE
;

487 
mesßge
->
v6
.
ﬁ§_vtime
 = 
	`ª…ime_to_me
(
P2PD_VALID_TIME
 * 
MSEC_PER_SEC
);

488 
	`mem˝y
(&
mesßge
->
v6
.
‹igö©‹
, &
ﬁ§_˙f
->
maö_addr
, ol§_˙f->
ùsize
);

489 
mesßge
->
v6
.
âl
 = 
P2pdTé
 ? P2pdTé : 
MAX_TTL
;

490 
mesßge
->
v6
.
h›˙t
 = 0;

491 
mesßge
->
v6
.
£qno
 = 
	`ht⁄s
(
	`gë_msg_£qno
());

492 
mesßge
->
v6
.
ﬁ§_msgsize
 = 
	`ht⁄s
(
Æig√d_size
 + 12 + 96);

493 
	`mem£t
(&
mesßge
->
v6
.mesßge, 0, 
Æig√d_size
);

494 
	`mem˝y
(&
mesßge
->
v6
.mesßge, 
∑ckë
, 
Àn
);

495 
Æig√d_size
 =áligned_size + 12 + 96;

499 
i‚
 = 
i‚ë
; i‚; i‚ = i‚->
öt_√xt
) {

502 i‡(
	`√t_outbuf„r_push
(
i‚
, 
mesßge
, 
Æig√d_size
) !=áligned_size) {

504 
	`√t_ouçut
(
i‚
);

505 i‡(
	`√t_outbuf„r_push
(
i‚
, 
mesßge
, 
Æig√d_size
) !=áligned_size) {

510 
	}
}

524 
	$P2pdPEº‹
(c⁄° *
f‹m©
, ...)

526 
	#MAX_STR_DESC
 255

	)

527 
°rDesc
[
MAX_STR_DESC
];

529 #i‡!
deföed
 
REMOVE_LOG_DEBUG


530 *
°rögEº
 = 
	`°ªº‹
(
î∫o
);

534 i‡(
f‹m©
 =
NULL
 || *format == '\0') {

537 
va_li°
 
¨gli°
;

539 
	`va_°¨t
(
¨gli°
, 
f‹m©
);

540 
	`v¢¥ötf
(
°rDesc
, 
MAX_STR_DESC
, 
f‹m©
, 
¨gli°
);

541 
	`va_íd
(
¨gli°
);

543 
°rDesc
[
MAX_STR_DESC
 - 1] = '\0';

545 #i‡!
deföed
 
REMOVE_LOG_DEBUG


546 
	`OLSR_DEBUG
(
LOG_PLUGINS
, "%s: %s\n", 
°rDesc
, 
°rögEº
);

549 
	}
}

559 
ﬁ§_ù_addr
 *

560 
	$MaöAddªssOf
(
ﬁ§_ù_addr
 *
ù
)

562 
ﬁ§_ù_addr
 *
ªsu…
;

565 
ªsu…
 = 
	`mid_lookup_maö_addr
(
ù
);

566 i‡(
ªsu…
 =
NULL
) {

567 
ªsu…
 = 
ù
;

569  
ªsu…
;

570 
	}
}

584 
boﬁ


585 
	$InUdpDe°P‹tLi°
(
ù_vîsi⁄
, 
ﬁ§_ù_addr
 *
addr
, 
uöt16_t
 
p‹t
)

587 
UdpDe°P‹t
 *
wÆkî
;

589 
wÆkî
 = 
UdpDe°P‹tLi°
; wÆkî; wÆkî = wÆkî->
√xt
) {

590 i‡(
wÆkî
->
ù_vîsi⁄
 == ip_version) {

591 i‡(
ù_vîsi⁄
 =
AF_INET
) {

592 i‡(
addr
->
v4
.
s_addr
 =
wÆkî
->
addªss
.v4.s_addr &&

593 
wÆkî
->
p‹t
 ==Öort)

594  
åue
;

596 i‡((
	`memcmp
(
addr
->
v6
.
s6_addr
,

597 
wÆkî
->
addªss
.
v6
.
s6_addr
,

598 (
addr
->
v6
.
s6_addr
)) == 0) &&

599 (
wÆkî
->
p‹t
 ==Öort))

600  
åue
;

604  
Ál£
;

605 
	}
}

620 
	$P2pdPackëC≠tuªd
(*
íˇpsuœti⁄UdpD©a
, 
nByãs
)

622 
ﬁ§_ù_addr
 
d°
;

623 
ù
 *
ùHódî
;

624 
ù6_hdr
 *
ùHódî6
;

625 
udphdr
 *
udpHódî
;

626 
u_öt16_t
 
de°P‹t
;

628 i‡((
íˇpsuœti⁄UdpD©a
[0] & 0xf0) == 0x40) {

630 
ùHódî
 = (
ù
 *Ë
	`ARM_NOWARN_ALIGN
(
íˇpsuœti⁄UdpD©a
);

632 
d°
.
v4
 = 
ùHódî
->
ù_d°
;

634 i‡(
ùHódî
->
ù_p
 !
SOL_UDP
) {

636 #ifde‡
INCLUDE_DEBUG_OUTPUT


637 
	`OLSR_PRINTF
(1,"%s: NON UDP PACKET\n", 
PLUGIN_NAME_SHORT
);

644 i‡(
	`IsIpv4Føgmít
(
ùHódî
)) {

645 #ifde‡
INCLUDE_DEBUG_OUTPUT


646 
	`OLSR_PRINTF
(1, "%s: I†IPv4 føgmít\n", 
PLUGIN_NAME_SHORT
);

651 i‡(
	`check_™d_m¨k_ª˚¡_∑ckë
(
íˇpsuœti⁄UdpD©a
, 
nByãs
))

654 
udpHódî
 = (
udphdr
 *Ë
	`ARM_NOWARN_ALIGN
((
íˇpsuœti⁄UdpD©a
 +

655 
	`GëIpHódîLígth
(
íˇpsuœti⁄UdpD©a
)));

656 
de°P‹t
 = 
	`¡ohs
(
udpHódî
->
de°
);

658 i‡(!
	`InUdpDe°P‹tLi°
(
AF_INET
, &
d°
, 
de°P‹t
)) {

659 #ifde‡
INCLUDE_DEBUG_OUTPUT


660 
tmp
[32];

661 
	`OLSR_PRINTF
(1, "%s: NŸ i¿de°/p‹àli°: %s:%d\n", 
PLUGIN_NAME_SHORT
,

662 
	`gë_ùv4_°r
(
d°
.
v4
.
s_addr
, 
tmp
, —mp)), 
de°P‹t
);

667 i‡((
íˇpsuœti⁄UdpD©a
[0] & 0xf0) == 0x60) {

669 
ùHódî6
 = (
ù6_hdr
 *Ë
	`ARM_NOWARN_ALIGN
(
íˇpsuœti⁄UdpD©a
);

671 
	`mem˝y
(&
d°
.
v6
, &
ùHódî6
->
ù6_d°
, (
ö6_addr
));

673 i‡(
ùHódî6
->
ù6_d°
.
s6_addr
[0] == 0xff)

679 i‡(
ùHódî6
->
ù6_nxt
 !
SOL_UDP
) {

686 i‡(
	`IsIpv6Føgmít
(
ùHódî6
)) {

687 #ifde‡
INCLUDE_DEBUG_OUTPUT


688 
	`OLSR_PRINTF
(1, "%s: I†IPv6 føgmít\n", 
PLUGIN_NAME_SHORT
);

693 i‡(
	`check_™d_m¨k_ª˚¡_∑ckë
(
íˇpsuœti⁄UdpD©a
, 
nByãs
))

696 
udpHódî
 = (
udphdr
 *Ë
	`ARM_NOWARN_ALIGN
((
íˇpsuœti⁄UdpD©a
 + 40));

697 
de°P‹t
 = 
	`¡ohs
(
udpHódî
->
de°
);

699 i‡(!
	`InUdpDe°P‹tLi°
(
AF_INET6
, &
d°
, 
de°P‹t
)) {

700 #ifde‡
INCLUDE_DEBUG_OUTPUT


701 
tmp
[64];

702 
	`OLSR_PRINTF
(1, "%s: NŸ i¿de°/p‹àli°: %s:%d\n", 
PLUGIN_NAME_SHORT
,

703 
	`gë_ùv6_°r
(
d°
.
v6
.
s6_addr
, 
tmp
, —mp)), 
de°P‹t
);

713 
	`ﬁ§_p2pd_gí
(
íˇpsuœti⁄UdpD©a
, 
nByãs
);

714 
	}
}

727 
DoP2pd
(
skfd
,

728 *
d©a
 
__©åibuã__
 ((
unu£d
)),

729 
Êags
 
__©åibuã__
 ((
unu£d
)))

731 
	grxBuf„r
[
P2PD_BUFFER_SIZE
];

732 i‡(
	gskfd
 >= 0) {

733 
sockaddr_Œ
 
pktAddr
;

734 
sockÀn_t
 
	gaddrLí
 = (
pktAddr
);

735 
	gnByãs
;

736 *
	gùPackë
;

740 
	gùPackë
 = 
GëIpPackë
(
rxBuf„r
);

741 
	gnByãs
 = 
ªcv‰om
(
skfd
, 
ùPackë
, 
P2PD_BUFFER_SIZE
,

742 0, (
sockaddr
 *)&
pktAddr
, &
addrLí
);

743 #ifde‡
INCLUDE_DEBUG_OUTPUT


744 
OLSR_PRINTF
(1, "%s: Re˚ived %d byãs\n", 
PLUGIN_NAME_SHORT
, 
nByãs
);

747 i‡(
	gnByãs
 < 0) {

759 i‡(
	gnByãs
 < ()(
	gù
)) {

770 i‡(
	gpktAddr
.
	g¶l_pkây≥
 =
PACKET_OUTGOING
 ||

771 
pktAddr
.
¶l_pkây≥
 =
PACKET_MULTICAST
 ||

772 
pktAddr
.
¶l_pkây≥
 =
PACKET_BROADCAST
) {

773 #ifde‡
INCLUDE_DEBUG_OUTPUT


774 
OLSR_PRINTF
(1, "%s: Multicast or broadcastÖacket was captured.\n",

775 
PLUGIN_NAME_SHORT
);

776 
dump_∑ckë
(
ùPackë
, 
nByãs
);

779 
P2pdPackëC≠tuªd
(
ùPackë
, 
nByãs
);

794 
	$InôP2pd
(
öãrÁ˚
 *
skùThisI¡f
)

796 i‡(
P2pdU£Hash
) {

798 
	`InôPackëHi°‹y
();

803 
	`ﬁ§_∑r£r_add_fun˘i⁄
(&
ﬁ§_∑r£r
, 
PARSER_TYPE
);

806 
	`Cª©eN⁄Ol§Nëw‹kI¡îÁ˚s
(
skùThisI¡f
);

809 
	}
}

820 
	$Clo£P2pd
()

822 
	`Clo£N⁄Ol§Nëw‹kI¡îÁ˚s
();

823 
	}
}

834 
SëP2pdTé
(c⁄° *
vÆue
,

835 *
d©a
 
__©åibuã__
 ((
unu£d
)),

836 
£t_∂ugö_∑ømëî_add⁄
 
add⁄
 
__©åibuã__
 ((
unu£d
)))

838 
as£π
(
vÆue
 !
NULL
);

839 
	gP2pdTé
 = 
©oi
(
vÆue
);

855 
SëP2pdU£HashFûãr
(c⁄° *
vÆue
,

856 *
d©a
 
__©åibuã__
 ((
unu£d
)),

857 
£t_∂ugö_∑ømëî_add⁄
 
add⁄
 
__©åibuã__
 ((
unu£d
)))

859 
as£π
(
vÆue
 !
NULL
);

860 
	gP2pdU£Hash
 = 
©oi
(
vÆue
);

875 
AddUdpDe°P‹t
(c⁄° *
vÆue
,

876 *
d©a
 
__©åibuã__
 ((
unu£d
)),

877 
£t_∂ugö_∑ømëî_add⁄
 
add⁄
 
__©åibuã__
 ((
unu£d
)))

879 
	gde°Addr
[
INET6_ADDRSTRLEN
];

880 
uöt16_t
 
	gde°P‹t
;

881 
	gnum
;

882 
UdpDe°P‹t
 * 
	g√w
;

883 
sockaddr_ö
 
	gaddr4
;

884 
sockaddr_ö6
 
	gaddr6
;

885 
	gù_vîsi⁄
 = 
AF_INET
;

886 
	gªs
;

888 
as£π
(
vÆue
 !
NULL
);

891 
mem£t
(
de°Addr
, 0, (destAddr));

892 
	gnum
 = 
ssˇnf
(
vÆue
, "%45†%hd", 
de°Addr
, &
de°P‹t
);

893 i‡(
	gnum
 != 2) {

894 
OLSR_PRINTF
(1, "%s: Invalidárgument for \"UdpDestPort\"",

895 
PLUGIN_NAME_SHORT
);

901 i‡(
°rchr
(
de°Addr
, ()':')) {

902 
	gù_vîsi⁄
 = 
AF_INET6
;

908 
	gù_vîsi⁄
) {

909 
	gAF_INET
:

910 
ªs
 = 
öë_±⁄
(
AF_INET
, 
de°Addr
, &
addr4
.
sö_addr
);

911 i‡(!
is_brﬂdˇ°
(
addr4
Ë&& !
is_mu…iˇ°
(addr4)) {

912 
OLSR_PRINTF
(1,"WARNING: IPv4áddress must be multicast or broadcast... ");

915 
	gAF_INET6
:

916 
ªs
 = 
öë_±⁄
(
AF_INET6
, 
de°Addr
, &
addr6
.
sö6_addr
);

917 i‡(
	gaddr6
.
	gsö6_addr
.
	gs6_addr
[0] != 0xFF) {

918 
OLSR_PRINTF
(1,"WARNING: IPv6áddress must be multicast... ");

924 i‡(
	gªs
 == 0) {

925 
OLSR_PRINTF
(1, "Invalidáddress specified for \"UdpDestPort\"");

930 
	g√w
 = 
ˇŒoc
(1, (
UdpDe°P‹t
));

931 i‡(
	g√w
 =
NULL
) {

932 
OLSR_PRINTF
(1, "%s: Ouào‡mem‹y", 
PLUGIN_NAME_SHORT
);

936 
	g√w
->
	gù_vîsi⁄
 = 
ù_vîsi⁄
;

937 
	gù_vîsi⁄
) {

938 
	gAF_INET
:

939 
√w
->
addªss
.
v4
.
s_addr
 = 
addr4
.
sö_addr
.s_addr;

941 
	gAF_INET6
:

942 
mem˝y
(&
√w
->
addªss
.
v6
.
s6_addr
,

943 &
addr6
.
sö6_addr
.
s6_addr
,

944 (
addr6
.
sö6_addr
.
s6_addr
));

947 
	g√w
->
	gp‹t
 = 
de°P‹t
;

948 
	g√w
->
	g√xt
 = 
UdpDe°P‹tLi°
;

949 
	gUdpDe°P‹tLi°
 = 
√w
;

966 
	$gë_ùv4_°r
(
uöt32_t
 
addªss
, *
s
, 
size_t
 
maxÀn
)

968 
sockaddr_ö
 
v4
;

970 
v4
.
sö_addr
.
s_addr
 = 
addªss
;

971 
	`öë_¡›
(
AF_INET
, &
v4
.
sö_addr
, 
s
, 
maxÀn
);

973  
s
;

974 
	}
}

987 
	$gë_ùv6_°r
(* 
addªss
, *
s
, 
size_t
 
maxÀn
)

989 
sockaddr_ö6
 
v6
;

991 
	`mem˝y
(
v6
.
sö6_addr
.
s6_addr
, 
addªss
, (v6.sin6_addr.s6_addr));

992 
	`öë_¡›
(
AF_INET6
, &
v6
.
sö6_addr
, 
s
, 
maxÀn
);

994  
s
;

995 
	}
}

1005 
boﬁ


1006 
	$is_brﬂdˇ°
(c⁄° 
sockaddr_ö
 
addr
)

1008 i‡(
addr
.
sö_addr
.
s_addr
 == 0xFFFFFFFF)

1009  
åue
;

1011  
Ál£
;

1012 
	}
}

1022 
boﬁ


1023 
	$is_mu…iˇ°
(c⁄° 
sockaddr_ö
 
addr
)

1025 i‡((
	`ht⁄l
(
addr
.
sö_addr
.
s_addr
) & 0xE0000000) == 0xE0000000)

1026  
åue
;

1028  
Ál£
;

1029 
	}
}

1031 #ifde‡
INCLUDE_DEBUG_OUTPUT


1042 
	$dump_∑ckë
(* 
∑ckë
, 
Àngth
)

1044 
idx
;

1046 
	`OLSR_PRINTF
(1, "%s: ", 
PLUGIN_NAME_SHORT
);

1047 
idx
 = 0; idx < 
Àngth
; idx++) {

1048 i‡(
idx
 > 0 && ((idx % 16) == 0))

1049 
	`OLSR_PRINTF
(1, "\n%s: ", 
PLUGIN_NAME_SHORT
);

1050 
	`OLSR_PRINTF
(1, "%2.2X ", 
∑ckë
[
idx
]);

1052 
	`OLSR_PRINTF
(1, "\n");

1053 
	}
}

1064 
boﬁ


1065 
check_™d_m¨k_ª˚¡_∑ckë
(*
d©a
,

1066 
Àn
 
__©åibuã__
 ((
unu£d
)))

1068 * 
	gùPackë
;

1069 
uöt16_t
 
	gùPackëLí
;

1070 
uöt32_t
 
	g¸c32
;

1073 i‡(!
	gP2pdU£Hash
)

1074  
	gÁl£
;

1077 
Pru√PackëHi°‹y
(
NULL
);

1080 
	gùPackë
 = 
GëIpPackë
(
d©a
);

1081 
	gùPackëLí
 = 
GëIpTŸÆLígth
(
ùPackë
);

1084 
	g¸c32
 = 
PackëCrc32
(
ùPackë
, 
ùPackëLí
);

1087 i‡(
CheckAndM¨kRe˚¡Packë
(
¸c32
))

1089 
OLSR_PRINTF
(

1092 
PLUGIN_NAME_SHORT
);

1093  
	gåue
;

1096  
	gÁl£
;

	@lib/p2pd/src/p2pd.h

42 #i‚de‡
_P2PD_H


43 
	#_P2PD_H


	)

45 
	#REMOVE_LOG_DEBUG


	)

48 #unde‡
INCLUDE_DEBUG_OUTPUT


50 
	~"ﬁ§d_∂ugö.h
"

51 
	~"du∂iˇã_£t.h
"

53 
	~"dŒi°.h
"

55 
	#P2PD_MESSAGE_TYPE
 132

	)

56 
	#PARSER_TYPE
 
P2PD_MESSAGE_TYPE


	)

57 
	#P2PD_VALID_TIME
 180

	)

60 
	#PLUGIN_NAME
 "OLSRD P2PDÖlugö"

	)

61 
	#PLUGIN_NAME_SHORT
 "OLSRD P2PD"

	)

62 
	#PLUGIN_VERSION
 "0.1.0 (" 
__DATE__
 " " 
__TIME__
 ")"

	)

63 
	#MOD_DESC
 
PLUGIN_NAME
 " " 
PLUGIN_VERSION


	)

64 
	#PLUGIN_INTERFACE_VERSION
 5

	)

65 
	#IPHDR_FRAGMENT_MASK
 0xC000

	)

68 
	göãrÁ˚
;

70 
	sDupFûãrE¡ry
 {

71 
	mù_vîsi⁄
;

72 
ﬁ§_ù_addr
 
	maddªss
;

73 
uöt16_t
 
	m£qno
;

74 
uöt8_t
 
	mmsgty≥
;

75 
time_t
 
	m¸óti⁄time
;

78 
	sUdpDe°P‹t
 {

79 
	mù_vîsi⁄
;

80 
ﬁ§_ù_addr
 
	maddªss
;

81 
uöt16_t
 
	mp‹t
;

82 
UdpDe°P‹t
 * 
	m√xt
;

85 
P2pdTé
;

86 
P2pdDu∂iˇãTimeout
;

87 
Highe°Skfd
;

88 
fd_£t
 
I≈utSë
;

89 
UdpDe°P‹t
 * 
UdpDe°P‹tLi°
;

90 
Du∂iˇãFûãrE¡ry
 * 
FûãrLi°
;

92 
DoP2pd
(
sd
, *
x
, 
y
);

93 
	$P2pdPEº‹
(c⁄° *
f‹m©
, ...Ë
	`__©åibuã__
 ((
	`f‹m©
(
¥ötf
, 1, 2)));

94 
ﬁ§_ù_addr
 *
	`MaöAddªssOf
(ﬁ§_ù_add∏*
ù
);

95 
	`InôP2pd
(
öãrÁ˚
 *
skùThisI¡f
);

96 
	`Clo£P2pd
();

97 
	`SëP2pdTé
(c⁄° *
vÆue
, *
d©a
 
	`__©åibuã__
 ((
unu£d
)), 
£t_∂ugö_∑ømëî_add⁄
 
add⁄
 __attribute__ ((unused)));

98 
	`AddUdpDe°P‹t
(c⁄° *
vÆue
, *
d©a
 
	`__©åibuã__
 ((
unu£d
)), 
£t_∂ugö_∑ømëî_add⁄
 
add⁄
 __attribute__ ((unused)));

99 
boﬁ
 
	`InUdpDe°P‹tLi°
(
ù_vîsi⁄
, 
ﬁ§_ù_addr
 *
addr
, 
uöt16_t
 
p‹t
);

100 
	`SëP2pdTé
(c⁄° *
vÆue
, *
d©a
 
	`__©åibuã__
 ((
unu£d
)), 
£t_∂ugö_∑ømëî_add⁄
 
add⁄
 __attribute__ ((unused)));

101 
	`SëP2pdU£HashFûãr
(c⁄° *
vÆue
, *
d©a
 
	`__©åibuã__
 ((
unu£d
)), 
£t_∂ugö_∑ømëî_add⁄
 
add⁄
 __attribute__ ((unused)));

102 
boﬁ
 
	`p2pd_mesßge_£í
(
node
 **
hód
, nodê**
èû
, 
ﬁ§_mesßge
 *
m
);

103 
	`p2pd_°‹e_mesßge
(
node
 **
hód
, nodê**
èû
, 
ﬁ§_mesßge
 *
m
);

104 
boﬁ
 
	`p2pd_is_du∂iˇã_mesßge
(
ﬁ§_mesßge
 *
msg
);

106 
	`ﬁ§_p2pd_gí
(*
∑ckë
, 
Àn
);

109 
boﬁ
 
	`ﬁ§_∑r£r
(
ﬁ§_mesßge
 *, 
öãrÁ˚
 *, 
ﬁ§_ù_addr
 *);

	@lib/pgraph/src/olsrd_pgraph.c

47 
	~"ﬁ§d_pgøph.h
"

48 
	~"ùˇlc.h
"

49 
	~"ﬁ§d_∂ugö.h
"

50 
	~"∂ugö_utû.h
"

51 
	~"√t_ﬁ§.h
"

53 
	~<°dio.h
>

54 
	~<°rög.h
>

55 
	~<°dlib.h
>

56 
	~<uni°d.h
>

57 
	~<î∫o.h
>

58 #ifde‡
WIN32


59 
	#˛o£
(
x
Ë
	`˛o£sockë
(x)

	)

62 
	#PLUGIN_NAME
 "OLSRDÖgøphÖlugö"

	)

63 
	#PLUGIN_VERSION
 "0.1"

	)

64 
	#PLUGIN_AUTHOR
 "Rich¨d G›aul"

	)

65 
	#MOD_DESC
 
PLUGIN_NAME
 " " 
PLUGIN_VERSION
 " by " 
PLUGIN_AUTHOR


	)

66 
	#PLUGIN_INTERFACE_VERSION
 5

	)

68 
ﬁ§_ù_addr
 
	gùc_ac˚±_ù
;

69 
	gùc_p‹t
;

71 
	gùc_sockë
;

72 
	gùc_c⁄√˘i⁄
;

74 
	$my_öô
(Ë
	`__©åibuã__
 ((
c⁄°ru˘‹
));

76 
	$my_föi
(Ë
	`__©åibuã__
 ((
de°ru˘‹
));

84 
	$ﬁ§d_∂ugö_öãrÁ˚_vîsi⁄
()

86  
PLUGIN_INTERFACE_VERSION
;

87 
	}
}

93 
	$my_öô
()

96 
	`¥ötf
("%s\n", 
MOD_DESC
);

99 
ùc_p‹t
 = 2004;

100 i‡(
ﬁ§_˙f
->
ù_vîsi⁄
 =
AF_INET
) {

101 
ùc_ac˚±_ù
.
v4
.
s_addr
 = 
	`ht⁄l
(
INADDR_LOOPBACK
);

103 
ùc_ac˚±_ù
.
v6
 = 
ö6addr_lo›back
;

105 
ùc_sockë
 = -1;

106 
ùc_c⁄√˘i⁄
 = -1;

107 
	}
}

113 
	$my_föi
()

115 i‡(
ùc_sockë
 >= 0) {

116 
	`˛o£
(
ùc_sockë
);

117 
ùc_sockë
 = -1;

119 i‡(
ùc_c⁄√˘i⁄
 >= 0) {

120 
	`˛o£
(
ùc_c⁄√˘i⁄
);

121 
ùc_c⁄√˘i⁄
 = -1;

124 
	}
}

126 c⁄° 
ﬁ§d_∂ugö_∑ømëîs
 
	g∂ugö_∑ømëîs
[] = {

127 {.
«me
 = "p‹t",.
	g£t_∂ugö_∑ømëî
 = &
£t_∂ugö_p‹t
,.
	gd©a
 = &
ùc_p‹t
},

128 {.
	g«me
 = "ac˚±",.
	g£t_∂ugö_∑ømëî
 = &
£t_∂ugö_ùaddªss
,.
	gd©a
 = &
ùc_ac˚±_ù
},

132 
	$ﬁ§d_gë_∂ugö_∑ømëîs
(c⁄° 
ﬁ§d_∂ugö_∑ømëîs
 **
∑øms
, *
size
)

134 *
∑øms
 = 
∂ugö_∑ømëîs
;

135 *
size
 = (
∂ugö_∑ømëîs
) / (*plugin_parameters);

136 
	}
}

139 
pcf_evít
(, , );

141 
ùc_a˘i⁄
(, *, );

143 
ùc_¥öt_√igh_lök
(
√ighb‹_íåy
 *
√ighb‹
);

145 
ùc_¥öt_tc_lök
(
tc_íåy
 *
íåy
, 
tc_edge_íåy
 *
d°_íåy
);

147 
ùc_£nd
(const *, );

149 
ùc_¥öt_√igh_lök
(
√ighb‹_íåy
 *);

151 
∂ugö_ùc_öô
();

154 
	$ùc_¥öt_√igh_lök
(
√ighb‹_íåy
 *
√ighb‹
)

156 
buf
[256];

157 
Àn
;

158 
ùaddr_°r
 
maö_adr
, 
adr
;

163 
Àn
 =

164 
	`•rötf
(
buf
, "addÜök %†%s\n", 
	`ﬁ§_ù_to_°rög
(&
maö_adr
, &
ﬁ§_˙f
->
maö_addr
),

165 
	`ﬁ§_ù_to_°rög
(&
adr
, &
√ighb‹
->
√ighb‹_maö_addr
));

166 
	`ùc_£nd
(
buf
, 
Àn
);

192 
	}
}

201 
	$ﬁ§d_∂ugö_öô
()

205 
ùc_sockë
 = -1;

208 
	`ªgi°î_pcf
(&
pcf_evít
);

211 
	}
}

214 
	$∂ugö_ùc_öô
()

216 
sockaddr_ö
 
sö
;

217 
uöt32_t
 
yes
 = 1;

220 i‡((
ùc_sockë
 = 
	`sockë
(
AF_INET
, 
SOCK_STREAM
, 0)) == -1) {

221 
	`ﬁ§_¥ötf
(1, "(DOT DRAW)IPC sockë %s\n", 
	`°ªº‹
(
î∫o
));

224 i‡(
	`£tsock›t
(
ùc_sockë
, 
SOL_SOCKET
, 
SO_REUSEADDR
, (*)&
yes
, (yes)) < 0) {

225 
	`≥º‹
("SO_REUSEADDR failed");

228 #i‡
deföed
 
__FªeBSD__


229 i‡(
	`£tsock›t
(
ùc_sockë
, 
SOL_SOCKET
, 
SO_NOSIGPIPE
, (*)&
yes
, (yes)) < 0) {

230 
	`≥º‹
("SO_NOSIGPIPE failed");

238 
	`mem£t
(&
sö
, 0, (sin));

239 
sö
.
sö_Ámûy
 = 
AF_INET
;

240 
sö
.
sö_addr
.
s_addr
 = 
INADDR_ANY
;

241 
sö
.
sö_p‹t
 = 
	`ht⁄s
(
ùc_p‹t
);

244 i‡(
	`böd
(
ùc_sockë
, (
sockaddr
 *)&
sö
, (sin)) == -1) {

245 
	`ﬁ§_¥ötf
(1, "(DOT DRAW)IPC böd %s\n", 
	`°ªº‹
(
î∫o
));

250 i‡(
	`li°í
(
ùc_sockë
, 1) == -1) {

251 
	`ﬁ§_¥ötf
(1, "(DOT DRAW)IPCÜi°í %s\n", 
	`°ªº‹
(
î∫o
));

256 
	`add_ﬁ§_sockë
(
ùc_sockë
, &
ùc_a˘i⁄
, 
NULL
, NULL, 
SP_PR_READ
);

260 
	}
}

263 
ùc_a˘i⁄
(
fd
 
__©åibuã__
 ((
unu£d
)), *
d©a
 __©åibuã__ ((unu£d)), 
Êags
 __attribute__ ((unused)))

265 
sockaddr_ö
 
	gpö
;

266 
sockÀn_t
 
	gaddæí
;

267 *
	gaddr
;

268 
	gbuf
[256];

269 
	gÀn
;

271 
	gaddæí
 = (
sockaddr_ö
);

273 i‡((
	gùc_c⁄√˘i⁄
 = 
ac˚±
(
ùc_sockë
, (
sockaddr
 *)&
pö
, &
addæí
)) == -1) {

274 
ﬁ§_¥ötf
(1, "(DOT DRAW)IPCác˚±: %s\n", 
°ªº‹
(
î∫o
));

275 
exô
(1);

277 
ùaddr_°r
 
	gmaö_addr
;

278 
	gaddr
 = 
öë_¡ﬂ
(
pö
.
sö_addr
);

290 
ﬁ§_¥ötf
(1, "(DOT DRAW)IPC: C⁄√˘i⁄ from %s\n", 
addr
);

291 
	gÀn
 = 
•rötf
(
buf
, "addÇodê%s\n", 
ﬁ§_ù_to_°rög
(&
maö_addr
, &
ﬁ§_˙f
->main_addr));

292 
ùc_£nd
(
buf
, 
Àn
);

293 
pcf_evít
(1, 1, 1);

303 
pcf_evít
(
my_ch™ges_√ighb‹hood
, 
my_ch™ges_t›ﬁogy
, 
my_ch™ges_h«
 
__©åibuã__
 ((
unu£d
)))

305 
	gªs
;

306 
√ighb‹_íåy
 *
	g√ighb‹_èbÀ_tmp
;

307 
tc_íåy
 *
	gtc
;

308 
tc_edge_íåy
 *
	gtc_edge
;

310 
	gªs
 = 0;

312 i‡(
	gmy_ch™ges_√ighb‹hood
 || 
	gmy_ch™ges_t›ﬁogy
) {

318 
OLSR_FOR_ALL_NBR_ENTRIES
(
√ighb‹_èbÀ_tmp
) {

319 
ùc_¥öt_√igh_lök
(
√ighb‹_èbÀ_tmp
);

321 
OLSR_FOR_ALL_NBR_ENTRIES_END
(
√ighb‹_èbÀ_tmp
);

324 
OLSR_FOR_ALL_TC_ENTRIES
(
tc
) {

325 
OLSR_FOR_ALL_TC_EDGE_ENTRIES
(
tc
, 
tc_edge
) {

326 
ùc_¥öt_tc_lök
(
tc
, 
tc_edge
);

328 
OLSR_FOR_ALL_TC_EDGE_ENTRIES_END
(
tc
, 
tc_edge
);

330 
OLSR_FOR_ALL_TC_ENTRIES_END
(
tc
);

332 
ùc_£nd
("Énd ", 
°æí
("Énd "));

358 
	gªs
 = 1;

361 i‡(
	gùc_sockë
 == -1) {

362 
∂ugö_ùc_öô
();

365  
	gªs
;

369 
	$ùc_¥öt_tc_lök
(
tc_íåy
 *
íåy
, 
tc_edge_íåy
 *
d°_íåy
)

371 
buf
[256];

372 
Àn
;

373 
ùaddr_°r
 
maö_adr
, 
adr
;

376 
Àn
 =

377 
	`•rötf
(
buf
, "addÜök %†%s\n", 
	`ﬁ§_ù_to_°rög
(&
maö_adr
, &
íåy
->
addr
), ol§_ù_to_°rög(&
adr
, &
d°_íåy
->
T_de°_addr
));

378 
	`ùc_£nd
(
buf
, 
Àn
);

379 
	}
}

382 
	$ùc_£nd
(c⁄° *
d©a
, 
size
)

384 i‡(
ùc_c⁄√˘i⁄
 == -1)

387 #i‡
deföed
 
__FªeBSD__
 || deföed 
__FªeBSD_kî√l__
 || deföed 
__MacOSX__
 || 
__O≥nBSD__


388 
	#FLAG
 0

	)

390 
	#FLAG
 
MSG_NOSIGNAL


	)

392 i‡(
	`£nd
(
ùc_c⁄√˘i⁄
, 
d©a
, 
size
, 
FLAG
) < 0) {

393 
	`ﬁ§_¥ötf
(1, "(DOT DRAW)IPC connectionÜost!\n");

394 
	`˛o£
(
ùc_c⁄√˘i⁄
);

395 
ùc_c⁄√˘i⁄
 = -1;

400 
	}
}

	@lib/pgraph/src/olsrd_pgraph.h

47 #i‚de‡
_OLSRD_PGRAPH_PLUGIN


48 
	#_OLSRD_PGRAPH_PLUGIN


	)

50 
	~<sys/ty≥s.h
>

51 
	~<sys/sockë.h
>

52 
	~<√töë/ö.h
>

53 
	~<¨∑/öë.h
>

54 
	~<sys/time.h
>

55 
	~<time.h
>

56 
	~<°dio.h
>

57 
	~<°rög.h
>

58 
	~<°dlib.h
>

59 
	~<uni°d.h
>

60 
	~<î∫o.h
>

62 
	~"ﬁ§d_∂ugö.h
"

63 
	~"ﬁ§_ty≥s.h
"

65 
	~"ﬁ§.h
"

66 
	~"√ighb‹_èbÀ.h
"

67 
	~"two_h›_√ighb‹_èbÀ.h
"

68 
	~"tc_£t.h
"

69 
	~"h«_£t.h
"

70 
	~"mid_£t.h
"

71 
	~"lök_£t.h
"

73 
ﬁ§d_gë_∂ugö_∑ømëîs
(c⁄° 
ﬁ§d_∂ugö_∑ømëîs
 **
∑øms
, *
size
);

75 
ﬁ§d_∂ugö_öãrÁ˚_vîsi⁄
();

	@lib/pud/src/compiler.h

1 #i‚de‡
_PUD_COMPILER_H_


2 
	#_PUD_COMPILER_H_


	)

5 #i‚de‡
likñy


6 #i‡
deföed
(
__GNUC__
)

7 
	#likñy
(
x
Ë
	`__buûtö_ex≥˘
((x),1)

	)

9 
	#likñy
(
x
Ë(x)

	)

14 #i‚de‡
u∆ikñy


15 #i‡
deföed
(
__GNUC__
)

16 
	#u∆ikñy
(
x
Ë
	`__buûtö_ex≥˘
((x),0)

	)

18 
	#u∆ikñy
(
x
Ë(x)

	)

	@lib/pud/src/configuration.c

1 
	~"c⁄figuøti⁄.h
"

4 
	~"pud.h
"

5 
	~"√tw‹kI¡îÁ˚s.h
"

6 
	~"√tToﬁs.h
"

7 
	~"posFûe.h
"

10 
	~<ﬁ§_¥Ÿocﬁ.h
>

13 
	~<uni°d.h
>

14 
	~<î∫o.h
>

15 
	~<¨∑/öë.h
>

16 
	~<nmó/utû.h
>

17 
	~<Ol§dPudWúeF‹m©/nodeIdC⁄vîsi⁄.h
>

18 
	~<limôs.h
>

34 
	$gëOl§SockaddrP‹tAddªss
(
ùVîsi⁄
,

35 
ﬁ§_sockaddr
 * 
addr
, 
ö_p‹t_t
 ** 
p‹t
) {

36 i‡(
ùVîsi⁄
 =
AF_INET
) {

37 *
p‹t
 = &
addr
->
ö4
.
sö_p‹t
;

39 *
p‹t
 = &
addr
->
ö6
.
sö6_p‹t
;

41 
	}
}

54 
	$gëOl§SockAddrAndP‹tAddªs£s
(
ùVîsi⁄
,

55 
ﬁ§_sockaddr
 * 
addr
, ** 
ùAddªss
, 
ö_p‹t_t
 ** 
p‹t
) {

56 i‡(
ùVîsi⁄
 =
AF_INET
) {

57 *
ùAddªss
 = (*Ë&
addr
->
ö4
.
sö_addr
;

58 *
p‹t
 = (*Ë&
addr
->
ö4
.
sö_p‹t
;

60 *
ùAddªss
 = (*Ë&
addr
->
ö6
.
sö6_addr
;

61 *
p‹t
 = (*Ë&
addr
->
ö6
.
sö6_p‹t
;

63 
	}
}

79 
boﬁ
 
	$ªadULL
(c⁄° * 
vÆueName
, c⁄° * 
vÆue
,

80 * 
vÆueNumbî
) {

81 * 
ídPå
 = 
NULL
;

82 
vÆueNew
;

84 
î∫o
 = 0;

85 
vÆueNew
 = 
	`°πouŒ
(
vÆue
, &
ídPå
, 10);

87 i‡(!((
ídPå
 !
vÆue
) && (*value != '\0') && (*endPtr == '\0'))) {

89 
	`pudEº‹
(
åue
, "Configured %s (%s) couldÇot be convertedÅoáÇumber",

90 
vÆueName
, 
vÆue
);

91  
Ál£
;

94 *
vÆueNumbî
 = 
vÆueNew
;

96  
åue
;

97 
	}
}

113 
boﬁ
 
	$ªadDoubÀ
(c⁄° * 
vÆueName
, c⁄° * 
vÆue
, * 
vÆueNumbî
) {

114 * 
ídPå
 = 
NULL
;

115 
vÆueNew
;

117 
î∫o
 = 0;

118 
vÆueNew
 = 
	`°πod
(
vÆue
, &
ídPå
);

120 i‡(!((
ídPå
 !
vÆue
) && (*value != '\0') && (*endPtr == '\0'))) {

122 
	`pudEº‹
(
åue
, "Configured %s (%s) couldÇot be convertedÅoáÇumber",

123 
vÆueName
, 
vÆue
);

124  
Ál£
;

127 *
vÆueNumbî
 = 
vÆueNew
;

129  
åue
;

130 
	}
}

137 
NodeIdTy≥
 
	gnodeIdTy≥
 = 
PUD_NODE_ID_TYPE_DEFAULT
;

143 
NodeIdTy≥
 
	$gëNodeIdTy≥Numbî
() {

144  
nodeIdTy≥
;

145 
	}
}

161 
£tNodeIdTy≥
(c⁄° *
vÆue
, *
d©a
 
__©åibuã__
 ((
unu£d
)),

162 
£t_∂ugö_∑ømëî_add⁄
 
add⁄
 
__©åibuã__
 ((
unu£d
))) {

163 c⁄° * 
	gvÆueName
 = 
PUD_NODE_ID_TYPE_NAME
;

164 
	gnodeIdTy≥New
;

166 
as£π
 (
vÆue
 !
NULL
);

168 i‡(!
ªadULL
(
vÆueName
, 
vÆue
, &
nodeIdTy≥New
)) {

169  
	gåue
;

172 i‡(!
isVÆidNodeIdTy≥
(
nodeIdTy≥New
)) {

173 
pudEº‹
(
Ál£
, "C⁄figuªd %†(%ŒuËi†ª£rved", 
vÆueName
,

174 
nodeIdTy≥New
);

175  
	gåue
;

178 
	gnodeIdTy≥
 = 
nodeIdTy≥New
;

180  
	gÁl£
;

188 
	gnodeId
[
PUD_TX_NODEID_BUFFERSIZE
 + 1];

191 
size_t
 
	gnodeIdLígth
 = 0;

194 
boﬁ
 
	gnodeIdSë
 = 
Ál£
;

197 
nodeIdBö¨yTy≥
 
	gnodeIdBö¨y
;

203 * 
	$gëNodeId
() {

204  
	`gëNodeIdWôhLígth
(
NULL
);

205 
	}
}

217 * 
	$gëNodeIdWôhLígth
(
size_t
 *
Àngth
) {

218 i‡(!
nodeIdSë
) {

219 
	`£tNodeId
("", 
NULL
, (
£t_∂ugö_∑ømëî_add⁄
Ë{.
pc
 = NULL});

222 i‡(
Àngth
 !
NULL
) {

223 *
Àngth
 = 
nodeIdLígth
;

226  &
nodeId
[0];

227 
	}
}

235 
nodeIdBö¨yTy≥
 * 
	$gëNodeIdBö¨y
() {

236 i‡(!
nodeIdBö¨y
.
£t
) {

237 
	`£tNodeId
("", 
NULL
, (
£t_∂ugö_∑ømëî_add⁄
Ë{.
pc
 = NULL});

240  &
nodeIdBö¨y
;

241 
	}
}

257 
£tNodeId
(c⁄° *
vÆue
, *
d©a
 
__©åibuã__
 ((
unu£d
)), 
£t_∂ugö_∑ømëî_add⁄
 
add⁄
 __attribute__ ((unused))) {

258 c⁄° * 
	gvÆueName
 = 
PUD_NODE_ID_NAME
;

259 
size_t
 
	gvÆueLígth
;

261 
as£π
 (
vÆue
 !
NULL
);

263 
	gvÆueLígth
 = 
°æí
(
vÆue
);

264 i‡(
	gvÆueLígth
 > 
	gPUD_TX_NODEID_BUFFERSIZE
) {

265 
pudEº‹
(
Ál£
, "Configured %s isÅooÜong, maximumÜength is"

266 " %u, cuºíàÀngth i†%lu", 
vÆueName
, 
PUD_TX_NODEID_BUFFERSIZE
,

267 (Ë
vÆueLígth
);

268  
	gåue
;

271 
°r˝y
((*Ë&
nodeId
[0], 
vÆue
);

272 
	gnodeIdLígth
 = 
vÆueLígth
;

273 
	gnodeIdSë
 = 
åue
;

275  
	gÁl£
;

290 
boﬁ
 
	$ötSëupNodeIdBö¨yMAC
() {

291 * 
mac
 = 
	`gëMaöIpMacAddªss
();

292 i‡(!
mac
) {

293  
Ál£
;

296  
	`£tupNodeIdBö¨yMAC
(&
nodeIdBö¨y
, 
mac
);

297 
	}
}

314 
boﬁ
 
	$ötSëupNodeIdBö¨yL⁄gL⁄g
(
mö
,

315 
max
, 
byãs
) {

316 
l⁄gVÆue
 = 0;

317 i‡(!
	`ªadULL
(
PUD_NODE_ID_NAME
, (*Ë
	`gëNodeId
(), &
l⁄gVÆue
)) {

318  
Ál£
;

321 i‡((
l⁄gVÆue
 < 
mö
Ë|| (l⁄gVÆuê> 
max
)) {

322 
	`pudEº‹
(
Ál£
, "%s value %llu is out ofÑange [%llu,%llu]",

323 
PUD_NODE_ID_NAME
, 
l⁄gVÆue
, 
mö
, 
max
);

324  
Ál£
;

327  
	`£tupNodeIdBö¨yL⁄gL⁄g
(&
nodeIdBö¨y
, 
l⁄gVÆue
, 
byãs
);

328 
	}
}

338 
boﬁ
 
	$ötSëupNodeIdBö¨ySåög
() {

339 
boﬁ
 
övÆidCh¨s
;

340 
ªp‹t
[256];

341 
size_t
 
nodeidÀngth
;

342 * 
nodeid
 = (*)
	`gëNodeIdWôhLígth
(&
nodeidÀngth
);

344 
övÆidCh¨s
 = 
	`nmó_°rög_has_övÆid_ch¨s
(
nodeid
,

345 
PUD_NODE_ID_NAME
, &
ªp‹t
[0], (report));

346 i‡(
övÆidCh¨s
) {

347 
	`pudEº‹
(
Ál£
, &
ªp‹t
[0]);

348  
Ál£
;

351 i‡(
nodeidÀngth
 > 
PUD_TX_NODEID_BUFFERSIZE
) {

352 
	`pudEº‹
(
Ál£
, "%†vÆuê\"%s\" i†toÿl⁄g", 
PUD_NODE_ID_NAME
, &
nodeid
[0]);

353  
Ál£
;

356  
	`£tupNodeIdBö¨ySåög
(&
nodeIdBö¨y
, 
nodeid
, 
nodeidÀngth
);

357 
	}
}

367 
boﬁ
 
	$ötSëupNodeIdBö¨yIp
() {

368 * 
§c
;

369 
size_t
 
Àngth
;

370 i‡(
ﬁ§_˙f
->
ù_vîsi⁄
 =
AF_INET
) {

371 
§c
 = &
ﬁ§_˙f
->
maö_addr
.
v4
;

372 
Àngth
 = (
ö_addr
);

374 
§c
 = &
ﬁ§_˙f
->
maö_addr
.
v6
;

375 
Àngth
 = (
ö6_addr
);

378  
	`£tupNodeIdBö¨yIp
(&
nodeIdBö¨y
, 
§c
, 
Àngth
);

379 
	}
}

389 
boﬁ
 
	$£tupNodeIdBö¨yAndVÆid©e
(
NodeIdTy≥
 
nodeIdTy≥Numbî
) {

390 
nodeIdTy≥Numbî
) {

391 
PUD_NODEIDTYPE_MAC
:

392  
	`ötSëupNodeIdBö¨yMAC
();

394 
PUD_NODEIDTYPE_MSISDN
:

395  
	`ötSëupNodeIdBö¨yL⁄gL⁄g
(
PUD_NODEIDTYPE_MSISDN_MIN
,

396 
PUD_NODEIDTYPE_MSISDN_MAX
, 
PUD_NODEIDTYPE_MSISDN_BYTES
);

398 
PUD_NODEIDTYPE_TETRA
:

399  
	`ötSëupNodeIdBö¨yL⁄gL⁄g
(
PUD_NODEIDTYPE_TETRA_MIN
,

400 
PUD_NODEIDTYPE_TETRA_MAX
, 
PUD_NODEIDTYPE_TETRA_BYTES
);

402 
PUD_NODEIDTYPE_DNS
:

403  
	`ötSëupNodeIdBö¨ySåög
();

405 
PUD_NODEIDTYPE_MMSI
:

406  
	`ötSëupNodeIdBö¨yL⁄gL⁄g
(
PUD_NODEIDTYPE_MMSI_MIN
,

407 
PUD_NODEIDTYPE_MMSI_MAX
, 
PUD_NODEIDTYPE_MMSI_BYTES
);

409 
PUD_NODEIDTYPE_URN
:

410  
	`ötSëupNodeIdBö¨yL⁄gL⁄g
(
PUD_NODEIDTYPE_URN_MIN
,

411 
PUD_NODEIDTYPE_URN_MAX
, 
PUD_NODEIDTYPE_URN_BYTES
);

413 
PUD_NODEIDTYPE_192
:

414  
	`ötSëupNodeIdBö¨yL⁄gL⁄g
(
PUD_NODEIDTYPE_192_MIN
,

415 
PUD_NODEIDTYPE_192_MAX
, 
PUD_NODEIDTYPE_192_BYTES
);

417 
PUD_NODEIDTYPE_193
:

418  
	`ötSëupNodeIdBö¨yL⁄gL⁄g
(
PUD_NODEIDTYPE_193_MIN
,

419 
PUD_NODEIDTYPE_193_MAX
, 
PUD_NODEIDTYPE_193_BYTES
);

421 
PUD_NODEIDTYPE_194
:

422  
	`ötSëupNodeIdBö¨yL⁄gL⁄g
(
PUD_NODEIDTYPE_194_MIN
,

423 
PUD_NODEIDTYPE_194_MAX
, 
PUD_NODEIDTYPE_194_BYTES
);

425 
PUD_NODEIDTYPE_IPV4
:

426 
PUD_NODEIDTYPE_IPV6
:

428  
	`ötSëupNodeIdBö¨yIp
();

431  
Ál£
;

432 
	}
}

439 
	#PUD_RX_NON_OLSR_IF_MAX
 32

	)

442 
	grxN⁄Ol§I¡îÁ˚Names
[
PUD_RX_NON_OLSR_IF_MAX
][
IFNAMSIZ
 + 1];

445 
	grxN⁄Ol§I¡îÁ˚Cou¡
 = 0;

459 
boﬁ
 
	$isRxN⁄Ol§I¡îÁ˚
(c⁄° *
ifName
) {

460 
i
;

462 
	`as£π
 (
ifName
 !
NULL
);

464 
i
 = 0; i < 
rxN⁄Ol§I¡îÁ˚Cou¡
; i++) {

465 i‡(
	`°∫cmp
((*Ë&
rxN⁄Ol§I¡îÁ˚Names
[
i
][0], 
ifName
, 
IFNAMSIZ


467  
åue
;

471  
Ál£
;

472 
	}
}

488 
addRxN⁄Ol§I¡îÁ˚
(c⁄° *
vÆue
, *
d©a
 
__©åibuã__
 ((
unu£d
)),

489 
£t_∂ugö_∑ømëî_add⁄
 
add⁄
 
__©åibuã__
 ((
unu£d
))) {

490 
	gvÆueLígth
;

492 
as£π
 (
vÆue
 !
NULL
);

494 
	gvÆueLígth
 = 
°æí
(
vÆue
);

495 i‡(
	gvÆueLígth
 > 
	gIFNAMSIZ
) {

496 
pudEº‹
(
Ál£
, "Configured %s (%s) isÅooÜong,"

498 
PUD_RX_NON_OLSR_IF_NAME
, 
vÆue
, 
IFNAMSIZ
, 
vÆueLígth
);

499  
	gåue
;

502 i‡(!
isRxN⁄Ol§I¡îÁ˚
(
vÆue
)) {

503 i‡(
	grxN⁄Ol§I¡îÁ˚Cou¡
 >
PUD_RX_NON_OLSR_IF_MAX
) {

504 
pudEº‹
(
Ál£
, "Can't configure moreÅhan %uÑeceive interfaces",

505 
PUD_RX_NON_OLSR_IF_MAX
);

506  
	gåue
;

509 
°r˝y
((*Ë&
rxN⁄Ol§I¡îÁ˚Names
[
rxN⁄Ol§I¡îÁ˚Cou¡
][0],

510 
vÆue
);

511 
	grxN⁄Ol§I¡îÁ˚Cou¡
++;

514  
	gÁl£
;

522 
	#PUD_RX_ALLOWED_SOURCE_IP_MAX
 32

	)

525 
sockaddr
 
	grxAŒowedSour˚IpAddªs£s
[
PUD_RX_ALLOWED_SOURCE_IP_MAX
];

528 
	grxAŒowedSour˚IpAddªs£sCou¡
 = 0;

542 
boﬁ
 
	$isRxAŒowedSour˚IpAddªss
(
sockaddr
 * 
£ndî
) {

543 * 
addr
;

544 
addrSize
;

545 
i
;

547 i‡(
rxAŒowedSour˚IpAddªs£sCou¡
 == 0) {

548  
åue
;

551 i‡(
£ndî
 =
NULL
) {

552  
Ál£
;

555 i‡(
£ndî
->
ß_Ámûy
 =
AF_INET
) {

556 
addr
 = (*Ë(&((
sockaddr_ö
 *Ë
£ndî
)->
sö_addr
);

557 
addrSize
 = (
ö_addr
);

559 
addr
 = (*Ë(&((
sockaddr_ö6
 *Ë
£ndî
)->
sö6_addr
);

560 
addrSize
 = (
ö6_addr
);

563 
i
 = 0; i < 
rxAŒowedSour˚IpAddªs£sCou¡
; i++) {

564 i‡((
rxAŒowedSour˚IpAddªs£s
[
i
].
ß_Ámûy
 =
£ndî
->sa_family)

565 && (
	`memcmp
(&
rxAŒowedSour˚IpAddªs£s
[
i
].
ß_d©a
, 
addr
,

566 
addrSize
) == 0)) {

567  
åue
;

571  
Ál£
;

572 
	}
}

588 
addRxAŒowedSour˚IpAddªss
(c⁄° *
vÆue
, *
d©a
 
__©åibuã__
 ((
unu£d
)),

589 
£t_∂ugö_∑ømëî_add⁄
 
add⁄
 
__©åibuã__
 ((
unu£d
))) {

590 c⁄° * 
	gvÆueName
 = 
PUD_RX_ALLOWED_SOURCE_IP_NAME
;

591 c⁄° * 
	gvÆueI¡î«l
 = 
vÆue
;

592 
	gc⁄vîsi⁄
;

593 
sockaddr
 
	gaddr
;

595 
as£π
 (
vÆue
 !
NULL
);

597 
mem£t
(&
addr
, 0, (addr));

599 
	gaddr
.
	gß_Ámûy
 = 
ﬁ§_˙f
->
ù_vîsi⁄
;

600 
	gc⁄vîsi⁄
 = 
öë_±⁄
(
ﬁ§_˙f
->
ù_vîsi⁄
, 
vÆueI¡î«l
, &
addr
.
ß_d©a
);

601 i‡(
	gc⁄vîsi⁄
 != 1) {

602 
pudEº‹
((
c⁄vîsi⁄
 =-1Ë? 
åue
 : 
Ál£
,

603 "C⁄figuªd %†(%sËi†nŸá¿IPáddªss", 
vÆueName
,

604 
vÆueI¡î«l
);

605  
	gåue
;

608 i‡((
	grxAŒowedSour˚IpAddªs£sCou¡
 =0Ë|| !
isRxAŒowedSour˚IpAddªss
(&
addr
)) {

609 i‡(
rxAŒowedSour˚IpAddªs£sCou¡
 >
PUD_RX_ALLOWED_SOURCE_IP_MAX
) {

610 
pudEº‹
(
Ál£
, "Can't configure moreÅhan %uállowed source IP"

611 "áddªs£s", 
PUD_RX_ALLOWED_SOURCE_IP_MAX
);

612  
	gåue
;

615 
	grxAŒowedSour˚IpAddªs£s
[
rxAŒowedSour˚IpAddªs£sCou¡
] = 
addr
;

616 
	grxAŒowedSour˚IpAddªs£sCou¡
++;

619  
	gÁl£
;

627 
ﬁ§_sockaddr
 
	grxMcAddr
;

630 
boﬁ
 
	grxMcAddrSë
 = 
Ál£
;

637 
ﬁ§_sockaddr
 * 
	$gëRxMcAddr
() {

638 i‡(!
rxMcAddrSë
) {

639 
	`£tRxMcAddr
(
NULL
, NULL, ((
£t_∂ugö_∑ømëî_add⁄
Ë{.
pc
 = NULL}));

641  &
rxMcAddr
;

642 
	}
}

660 
£tRxMcAddr
(c⁄° *
vÆue
, *
d©a
 
__©åibuã__
 ((
unu£d
)), 
£t_∂ugö_∑ømëî_add⁄
 
add⁄
 __attribute__ ((unused))) {

661 c⁄° * 
	gvÆueName
 = 
PUD_RX_MC_ADDR_NAME
;

662 * 
	gùAddªss
;

663 
ö_p‹t_t
 * 
	gp‹t
;

664 c⁄° * 
	gvÆueI¡î«l
 = 
vÆue
;

665 
	gc⁄vîsi⁄
;

667 
gëOl§SockAddrAndP‹tAddªs£s
(
ﬁ§_˙f
->
ù_vîsi⁄
, &
rxMcAddr
, &
ùAddªss
,

668 &
p‹t
);

669 i‡(
	gﬁ§_˙f
->
	gù_vîsi⁄
 =
AF_INET
) {

670 
rxMcAddr
.
ö4
.
sö_Ámûy
 = 
ﬁ§_˙f
->
ù_vîsi⁄
;

671 i‡(
	gvÆueI¡î«l
 =
NULL
) {

672 
vÆueI¡î«l
 = 
PUD_RX_MC_ADDR_4_DEFAULT
;

675 
	grxMcAddr
.
	gö6
.
	gsö6_Ámûy
 = 
ﬁ§_˙f
->
ù_vîsi⁄
;

676 i‡(
	gvÆueI¡î«l
 =
NULL
) {

677 
vÆueI¡î«l
 = 
PUD_RX_MC_ADDR_6_DEFAULT
;

681 i‡(!
	grxMcAddrSë
) {

682 *
	gp‹t
 = 
ht⁄s
(
PUD_RX_MC_PORT_DEFAULT
);

685 
	gc⁄vîsi⁄
 = 
öë_±⁄
(
ﬁ§_˙f
->
ù_vîsi⁄
, 
vÆueI¡î«l
, 
ùAddªss
);

686 i‡(
	gc⁄vîsi⁄
 != 1) {

687 
pudEº‹
((
c⁄vîsi⁄
 =-1Ë? 
åue
 : 
Ál£
,

688 "C⁄figuªd %†(%sËi†nŸá¿IPáddªss", 
vÆueName
,

689 
vÆueI¡î«l
);

690  
	gåue
;

693 i‡(!
isMu…iˇ°
(
ﬁ§_˙f
->
ù_vîsi⁄
, &
rxMcAddr
)) {

694 
pudEº‹
(
Ál£
, "Configured %s (%s) isÇotá multicastáddress",

695 
vÆueName
, 
vÆueI¡î«l
);

696  
	gåue
;

699 
	grxMcAddrSë
 = 
åue
;

700  
	gÁl£
;

711 
	$gëRxMcP‹t
() {

712 
ö_p‹t_t
 * 
p‹t
;

713 
	`gëOl§SockaddrP‹tAddªss
(
ﬁ§_˙f
->
ù_vîsi⁄
, 
	`gëRxMcAddr
(), &
p‹t
);

714  *
p‹t
;

715 
	}
}

731 
£tRxMcP‹t
(c⁄° *
vÆue
, *
d©a
 
__©åibuã__
 ((
unu£d
)), 
£t_∂ugö_∑ømëî_add⁄
 
add⁄
 __attribute__ ((unused))) {

732 c⁄° * 
	gvÆueName
 = 
PUD_RX_MC_PORT_NAME
;

733 
	grxMcP‹tNew
;

734 
ö_p‹t_t
 * 
	gp‹t
;

735 
ﬁ§_sockaddr
 * 
	gaddr
 = 
gëRxMcAddr
();

737 
as£π
 (
vÆue
 !
NULL
);

739 i‡(!
ªadULL
(
vÆueName
, 
vÆue
, &
rxMcP‹tNew
)) {

740  
	gåue
;

743 i‡((
	grxMcP‹tNew
 < 1) || (rxMcPortNew > 65535)) {

744 
pudEº‹
(
Ál£
, "Configured %s (%llu) is outside of"

745 " vÆidÑ™gê1-65535", 
vÆueName
, 
rxMcP‹tNew
);

746  
	gåue
;

749 
gëOl§SockaddrP‹tAddªss
(
ﬁ§_˙f
->
ù_vîsi⁄
, 
addr
, &
p‹t
);

750 *
	gp‹t
 = 
ht⁄s
((
uöt16_t
Ë
rxMcP‹tNew
);

752  
	gÁl£
;

760 
	gposôi⁄Fûe
[
PATH_MAX
 + 1];

763 
boﬁ
 
	gposôi⁄FûeSë
 = 
Ál£
;

769 * 
	$gëPosôi⁄Fûe
() {

770 i‡(!
posôi⁄FûeSë
) {

771  
NULL
;

774  &
posôi⁄Fûe
[0];

775 
	}
}

791 
£tPosôi⁄Fûe
(c⁄° *
vÆue
, *
d©a
 
__©åibuã__
 ((
unu£d
)),

792 
£t_∂ugö_∑ømëî_add⁄
 
add⁄
 
__©åibuã__
 ((
unu£d
))) {

793 c⁄° * 
	gvÆueName
 = 
PUD_POSFILE_NAME
;

794 
size_t
 
	gvÆueLígth
;

796 
as£π
(
vÆue
 !
NULL
);

798 i‡(!
°¨tPosôi⁄Fûe
()) {

799 
°›Posôi⁄Fûe
();

800  
	gåue
;

803 
	gvÆueLígth
 = 
°æí
(
vÆue
);

804 i‡(
	gvÆueLígth
 > 
	gPATH_MAX
) {

805 
pudEº‹
(
Ál£
, "Configured %s isÅooÜong, maximumÜength is"

806 " %u, cuºíàÀngth i†%lu", 
vÆueName
, 
PATH_MAX
, (Ë
vÆueLígth
);

807  
	gåue
;

810 
°r˝y
((*Ë&
posôi⁄Fûe
[0], 
vÆue
);

811 
	gposôi⁄FûeSë
 = 
åue
;

813  
	gÁl£
;

821 
	#PUD_TX_NON_OLSR_IF_MAX
 32

	)

824 
	gtxN⁄Ol§I¡îÁ˚Names
[
PUD_TX_NON_OLSR_IF_MAX
][
IFNAMSIZ
 + 1];

827 
	gtxN⁄Ol§I¡îÁ˚Cou¡
 = 0;

841 
boﬁ
 
	$isTxN⁄Ol§I¡îÁ˚
(c⁄° *
ifName
) {

842 
i
;

844 
	`as£π
 (
ifName
 !
NULL
);

846 
i
 = 0; i < 
txN⁄Ol§I¡îÁ˚Cou¡
; i++) {

847 i‡(
	`°∫cmp
((*Ë&
txN⁄Ol§I¡îÁ˚Names
[
i
][0], 
ifName
, 
IFNAMSIZ


849  
åue
;

853  
Ál£
;

854 
	}
}

870 
addTxN⁄Ol§I¡îÁ˚
(c⁄° *
vÆue
, *
d©a
 
__©åibuã__
 ((
unu£d
)),

871 
£t_∂ugö_∑ømëî_add⁄
 
add⁄
 
__©åibuã__
 ((
unu£d
))) {

872 
	gvÆueLígth
;

874 
as£π
 (
vÆue
 !
NULL
);

876 
	gvÆueLígth
 = 
°æí
(
vÆue
);

877 i‡(
	gvÆueLígth
 > 
	gIFNAMSIZ
) {

878 
pudEº‹
(
Ál£
, "Configured %s (%s) isÅooÜong,"

880 
PUD_TX_NON_OLSR_IF_NAME
, 
vÆue
, 
IFNAMSIZ
, 
vÆueLígth
);

881  
	gåue
;

884 i‡(!
isTxN⁄Ol§I¡îÁ˚
(
vÆue
)) {

885 i‡(
	gtxN⁄Ol§I¡îÁ˚Cou¡
 >
PUD_TX_NON_OLSR_IF_MAX
) {

886 
pudEº‹
(
Ál£
, "CanÇot configure moreÅhan %uÅransmit"

887 " i¡îÁ˚s", 
PUD_TX_NON_OLSR_IF_MAX
);

888  
	gåue
;

891 
°r˝y
((*Ë&
txN⁄Ol§I¡îÁ˚Names
[
txN⁄Ol§I¡îÁ˚Cou¡
][0],

892 
vÆue
);

893 
	gtxN⁄Ol§I¡îÁ˚Cou¡
++;

896  
	gÁl£
;

904 
ﬁ§_sockaddr
 
	gtxMcAddr
;

907 
boﬁ
 
	gtxMcAddrSë
 = 
Ál£
;

914 
ﬁ§_sockaddr
 * 
	$gëTxMcAddr
() {

915 i‡(!
txMcAddrSë
) {

916 
	`£tTxMcAddr
(
NULL
, NULL, ((
£t_∂ugö_∑ømëî_add⁄
Ë{.
pc
 = NULL}));

918  &
txMcAddr
;

919 
	}
}

937 
£tTxMcAddr
(c⁄° *
vÆue
, *
d©a
 
__©åibuã__
 ((
unu£d
)), 
£t_∂ugö_∑ømëî_add⁄
 
add⁄
 __attribute__ ((unused))) {

938 c⁄° * 
	gvÆueName
 = 
PUD_TX_MC_ADDR_NAME
;

939 * 
	gùAddªss
;

940 
ö_p‹t_t
 * 
	gp‹t
;

941 c⁄° * 
	gvÆueI¡î«l
 = 
vÆue
;

942 
	gc⁄vîsi⁄
;

944 
gëOl§SockAddrAndP‹tAddªs£s
(
ﬁ§_˙f
->
ù_vîsi⁄
, &
txMcAddr
, &
ùAddªss
,

945 &
p‹t
);

946 i‡(
	gﬁ§_˙f
->
	gù_vîsi⁄
 =
AF_INET
) {

947 
txMcAddr
.
ö4
.
sö_Ámûy
 = 
ﬁ§_˙f
->
ù_vîsi⁄
;

948 i‡(
	gvÆueI¡î«l
 =
NULL
) {

949 
vÆueI¡î«l
 = 
PUD_TX_MC_ADDR_4_DEFAULT
;

952 
	gtxMcAddr
.
	gö6
.
	gsö6_Ámûy
 = 
ﬁ§_˙f
->
ù_vîsi⁄
;

953 i‡(
	gvÆueI¡î«l
 =
NULL
) {

954 
vÆueI¡î«l
 = 
PUD_TX_MC_ADDR_6_DEFAULT
;

958 i‡(!
	gtxMcAddrSë
) {

959 *
	gp‹t
 = 
ht⁄s
(
PUD_TX_MC_PORT_DEFAULT
);

962 
	gc⁄vîsi⁄
 = 
öë_±⁄
(
ﬁ§_˙f
->
ù_vîsi⁄
, 
vÆueI¡î«l
, 
ùAddªss
);

963 i‡(
	gc⁄vîsi⁄
 != 1) {

964 
pudEº‹
((
c⁄vîsi⁄
 =-1Ë? 
åue
 : 
Ál£
,

965 "C⁄figuªd %†(%sËi†nŸá¿IPáddªss", 
vÆueName
,

966 
vÆueI¡î«l
);

967  
	gåue
;

970 i‡(!
isMu…iˇ°
(
ﬁ§_˙f
->
ù_vîsi⁄
, &
txMcAddr
)) {

971 
pudEº‹
(
Ál£
, "Configured %s (%s) isÇotá multicastáddress",

972 
vÆueName
, 
vÆueI¡î«l
);

973  
	gåue
;

976 
	gtxMcAddrSë
 = 
åue
;

977  
	gÁl£
;

988 
	$gëTxMcP‹t
() {

989 
ö_p‹t_t
 * 
p‹t
;

990 
	`gëOl§SockaddrP‹tAddªss
(
ﬁ§_˙f
->
ù_vîsi⁄
, 
	`gëTxMcAddr
(), &
p‹t
);

991  *
p‹t
;

992 
	}
}

1008 
£tTxMcP‹t
(c⁄° *
vÆue
, *
d©a
 
__©åibuã__
 ((
unu£d
)), 
£t_∂ugö_∑ømëî_add⁄
 
add⁄
 __attribute__ ((unused))) {

1009 c⁄° * 
	gvÆueName
 = 
PUD_TX_MC_PORT_NAME
;

1010 
	gtxMcP‹tNew
;

1011 
ö_p‹t_t
 * 
	gp‹t
;

1012 
ﬁ§_sockaddr
 * 
	gaddr
 = 
gëTxMcAddr
();

1014 
as£π
 (
vÆue
 !
NULL
);

1016 i‡(!
ªadULL
(
vÆueName
, 
vÆue
, &
txMcP‹tNew
)) {

1017  
	gåue
;

1020 i‡((
	gtxMcP‹tNew
 < 1) || (txMcPortNew > 65535)) {

1021 
pudEº‹
(
Ál£
, "Configured %s (%llu) is outside of"

1022 " vÆidÑ™gê1-65535", 
vÆueName
, 
txMcP‹tNew
);

1023  
	gåue
;

1026 
gëOl§SockaddrP‹tAddªss
(
ﬁ§_˙f
->
ù_vîsi⁄
, 
addr
, &
p‹t
);

1027 *
	gp‹t
 = 
ht⁄s
((
uöt16_t
Ë
txMcP‹tNew
);

1029  
	gÁl£
;

1037 
ﬁ§_sockaddr
 
	gu∂ökAddr
;

1040 
boﬁ
 
	gu∂ökAddrSë
 = 
Ál£
;

1043 
boﬁ
 
	gu∂ökP‹tSë
 = 
Ál£
;

1050 
boﬁ
 
	$isU∂ökAddrSë
() {

1051  
u∂ökAddrSë
;

1052 
	}
}

1059 
ﬁ§_sockaddr
 * 
	$gëU∂ökAddr
() {

1060 i‡(!
u∂ökAddrSë
) {

1061 
	`£tU∂ökAddr
(
NULL
, NULL, ((
£t_∂ugö_∑ømëî_add⁄
Ë{.
pc
 = NULL}));

1063  &
u∂ökAddr
;

1064 
	}
}

1082 
£tU∂ökAddr
(c⁄° *
vÆue
, *
d©a
 
__©åibuã__
 ((
unu£d
)), 
£t_∂ugö_∑ømëî_add⁄
 
add⁄
 __attribute__ ((unused))) {

1083 c⁄° * 
	gvÆueName
 = 
PUD_UPLINK_ADDR_NAME
;

1084 * 
	gùAddªss
;

1085 
ö_p‹t_t
 * 
	gp‹t
;

1086 c⁄° * 
	gvÆueI¡î«l
 = 
vÆue
;

1087 
	gc⁄vîsi⁄
;

1088 
boﬁ
 
	gdeÁu…VÆue
 = 
Ál£
;

1090 
gëOl§SockAddrAndP‹tAddªs£s
(
ﬁ§_˙f
->
ù_vîsi⁄
, &
u∂ökAddr
,

1091 &
ùAddªss
, &
p‹t
);

1092 i‡(
	gﬁ§_˙f
->
	gù_vîsi⁄
 =
AF_INET
) {

1093 
u∂ökAddr
.
ö4
.
sö_Ámûy
 = 
ﬁ§_˙f
->
ù_vîsi⁄
;

1094 i‡(
	gvÆueI¡î«l
 =
NULL
) {

1095 
vÆueI¡î«l
 = 
PUD_UPLINK_ADDR_4_DEFAULT
;

1096 
	gdeÁu…VÆue
 = 
åue
;

1099 
	gu∂ökAddr
.
	gö6
.
	gsö6_Ámûy
 = 
ﬁ§_˙f
->
ù_vîsi⁄
;

1100 i‡(
	gvÆueI¡î«l
 =
NULL
) {

1101 
vÆueI¡î«l
 = 
PUD_UPLINK_ADDR_6_DEFAULT
;

1102 
	gdeÁu…VÆue
 = 
åue
;

1106 i‡(!
	gu∂ökP‹tSë
) {

1107 *
	gp‹t
 = 
ht⁄s
(
PUD_UPLINK_PORT_DEFAULT
);

1108 
	gu∂ökP‹tSë
 = 
åue
;

1111 
	gc⁄vîsi⁄
 = 
öë_±⁄
(
ﬁ§_˙f
->
ù_vîsi⁄
, 
vÆueI¡î«l
, 
ùAddªss
);

1112 i‡(
	gc⁄vîsi⁄
 != 1) {

1113 
pudEº‹
((
c⁄vîsi⁄
 =-1Ë? 
åue
 : 
Ál£
,

1114 "C⁄figuªd %†(%sËi†nŸá¿IPáddªss", 
vÆueName
,

1115 
vÆueI¡î«l
);

1116  
	gåue
;

1119 i‡(!
	gdeÁu…VÆue
) {

1120 
	gu∂ökAddrSë
 = 
åue
;

1123  
	gÁl£
;

1134 
	$gëU∂ökP‹t
() {

1135 
ö_p‹t_t
 * 
p‹t
;

1136 
	`gëOl§SockaddrP‹tAddªss
(
ﬁ§_˙f
->
ù_vîsi⁄
, 
	`gëU∂ökAddr
(), &
p‹t
);

1137  *
p‹t
;

1138 
	}
}

1154 
£tU∂ökP‹t
(c⁄° *
vÆue
, *
d©a
 
__©åibuã__
 ((
unu£d
)), 
£t_∂ugö_∑ømëî_add⁄
 
add⁄
 __attribute__ ((unused))) {

1155 c⁄° * 
	gvÆueName
 = 
PUD_UPLINK_PORT_NAME
;

1156 
	gu∂ökP‹tNew
;

1157 
ö_p‹t_t
 * 
	gp‹t
;

1158 
ﬁ§_sockaddr
 * 
	gaddr
 = 
gëU∂ökAddr
();

1160 
as£π
 (
vÆue
 !
NULL
);

1162 i‡(!
ªadULL
(
vÆueName
, 
vÆue
, &
u∂ökP‹tNew
)) {

1163  
	gåue
;

1166 i‡((
	gu∂ökP‹tNew
 < 1) || (uplinkPortNew > 65535)) {

1167 
pudEº‹
(
Ál£
, "Configured %s (%llu) is outside of"

1168 " vÆidÑ™gê1-65535", 
vÆueName
, 
u∂ökP‹tNew
);

1169  
	gåue
;

1172 
gëOl§SockaddrP‹tAddªss
(
ﬁ§_˙f
->
ù_vîsi⁄
, 
addr
, &
p‹t
);

1173 *
	gp‹t
 = 
ht⁄s
((
uöt16_t
Ë
u∂ökP‹tNew
);

1174 
	gu∂ökP‹tSë
 = 
åue
;

1176  
	gÁl£
;

1185 
	gdow∆ökP‹t
 = 0;

1188 
boﬁ
 
	gdow∆ökP‹tSë
 = 
Ál£
;

1194 
	$gëDow∆ökP‹t
() {

1195 i‡(!
dow∆ökP‹tSë
) {

1196 
dow∆ökP‹t
 = 
	`ht⁄s
(
PUD_DOWNLINK_PORT_DEFAULT
);

1197 
dow∆ökP‹tSë
 = 
åue
;

1200  
dow∆ökP‹t
;

1201 
	}
}

1217 
£tDow∆ökP‹t
(c⁄° *
vÆue
, *
d©a
 
__©åibuã__
 ((
unu£d
)),

1218 
£t_∂ugö_∑ømëî_add⁄
 
add⁄
 
__©åibuã__
 ((
unu£d
))) {

1219 c⁄° * 
	gvÆueName
 = 
PUD_DOWNLINK_PORT_NAME
;

1220 
	gdow∆ökP‹tNew
;

1222 
as£π
(
vÆue
 !
NULL
);

1224 i‡(!
ªadULL
(
vÆueName
, 
vÆue
, &
dow∆ökP‹tNew
)) {

1225  
	gåue
;

1228 i‡((
	gdow∆ökP‹tNew
 < 1) || (downlinkPortNew > 65535)) {

1229 
pudEº‹
(
Ál£
, "Configured %s (%llu) is outside of"

1230 " vÆidÑ™gê1-65535", 
vÆueName
, 
dow∆ökP‹tNew
);

1231  
	gåue
;

1234 
	gdow∆ökP‹t
 = 
ht⁄s
(
dow∆ökP‹tNew
);

1235 
	gdow∆ökP‹tSë
 = 
åue
;

1237  
	gÁl£
;

1245 
	gtxTé
 = 
PUD_TX_TTL_DEFAULT
;

1251 
	$gëTxTé
() {

1252  
txTé
;

1253 
	}
}

1269 
£tTxTé
(c⁄° *
vÆue
, *
d©a
 
__©åibuã__
 ((
unu£d
)), 
£t_∂ugö_∑ømëî_add⁄
 
add⁄
 __attribute__ ((unused))) {

1270 c⁄° * 
	gvÆueName
 = 
PUD_TX_TTL_NAME
;

1271 
	gtxTéNew
;

1273 
as£π
 (
vÆue
 !
NULL
);

1275 i‡(!
ªadULL
(
vÆueName
, 
vÆue
, &
txTéNew
)) {

1276  
	gåue
;

1279 i‡((
	gtxTéNew
 < 1Ë|| (txTéNew > 
	gMAX_TTL
)) {

1280 
pudEº‹
(
Ál£
, "Configured %s (%llu) is outside of"

1281 " vÆidÑ™gê1-%u", 
vÆueName
, 
txTéNew
, 
MAX_TTL
);

1282  
	gåue
;

1285 
	gtxTé
 = 
txTéNew
;

1287  
	gÁl£
;

1295 
	#PUD_TXNMEAMESSAGEPREFIXLENGTH
 4

	)

1298 
	gtxNmóMesßgePªfix
[
PUD_TXNMEAMESSAGEPREFIXLENGTH
 + 1];

1301 
boﬁ
 
	gtxNmóMesßgePªfixSë
 = 
Ál£
;

1307 * 
	$gëTxNmóMesßgePªfix
() {

1308 i‡(!
txNmóMesßgePªfixSë
) {

1309 
	`£tTxNmóMesßgePªfix
(
PUD_TX_NMEAMESSAGEPREFIX_DEFAULT
, 
NULL
,

1310 (
£t_∂ugö_∑ømëî_add⁄
Ë{.
pc
 = 
NULL
});

1312  &
txNmóMesßgePªfix
[0];

1313 
	}
}

1329 
£tTxNmóMesßgePªfix
(c⁄° *
vÆue
, *
d©a
 
__©åibuã__
 ((
unu£d
)),

1330 
£t_∂ugö_∑ømëî_add⁄
 
add⁄
 
__©åibuã__
 ((
unu£d
))) {

1331 c⁄° * 
	gvÆueName
 = 
PUD_TX_NMEAMESSAGEPREFIX_NAME
;

1332 
size_t
 
	gvÆueLígth
;

1333 
boﬁ
 
	gövÆidCh¨s
;

1334 
	gªp‹t
[256];

1336 
as£π
 (
vÆue
 !
NULL
);

1338 
	gvÆueLígth
 = 
°æí
(
vÆue
);

1339 i‡(
	gvÆueLígth
 !
PUD_TXNMEAMESSAGEPREFIXLENGTH
) {

1340 
pudEº‹
(
Ál£
, "Configured %s (%s) must be %uÉxactly characters",

1341 
vÆueName
, 
vÆue
, 
PUD_TXNMEAMESSAGEPREFIXLENGTH
);

1342  
	gåue
;

1345 
	gövÆidCh¨s
 = 
nmó_°rög_has_övÆid_ch¨s
(
vÆue
, 
vÆueName
, &
ªp‹t
[0],

1346 (
ªp‹t
));

1347 i‡(
	gövÆidCh¨s
) {

1348 
pudEº‹
(
Ál£
, &
ªp‹t
[0]);

1349  
	gåue
;

1352 i‡((
°rchr
(
vÆue
, ' 'Ë!
NULL
) || (strchr(value, '\t') != NULL)) {

1353 
pudEº‹
(
Ál£
, "Configured %s (%s) canÇot contain whitespace",

1354 
vÆueName
, 
vÆue
);

1355  
	gåue
;

1358 
°r˝y
((*Ë&
txNmóMesßgePªfix
[0], 
vÆue
);

1359 
	gtxNmóMesßgePªfixSë
 = 
åue
;

1360  
	gÁl£
;

1368 
	gﬁ§Té
 = 
PUD_OLSR_TTL_DEFAULT
;

1374 
	$gëOl§Té
() {

1375  
ﬁ§Té
;

1376 
	}
}

1392 
£tOl§Té
(c⁄° *
vÆue
, *
d©a
 
__©åibuã__
 ((
unu£d
)), 
£t_∂ugö_∑ømëî_add⁄
 
add⁄
 __attribute__ ((unused))) {

1393 c⁄° * 
	gvÆueName
 = 
PUD_OLSR_TTL_NAME
;

1394 
	gﬁ§TéNew
;

1396 
as£π
 (
vÆue
 !
NULL
);

1398 i‡(!
ªadULL
(
vÆueName
, 
vÆue
, &
ﬁ§TéNew
)) {

1399  
	gåue
;

1402 i‡((
	gﬁ§TéNew
 < 1Ë|| (ﬁ§TéNew > 
	gMAX_TTL
)) {

1403 
pudEº‹
(
Ál£
, "Configured %s (%llu) is outside of validÑange 1-%u",

1404 
vÆueName
, 
ﬁ§TéNew
, 
MAX_TTL
);

1405  
	gåue
;

1408 
	gﬁ§Té
 = 
ﬁ§TéNew
;

1410  
	gÁl£
;

1418 
	gupd©eI¡îvÆSèti⁄¨y
 = 
PUD_UPDATE_INTERVAL_STATIONARY_DEFAULT
;

1424 
	$gëUpd©eI¡îvÆSèti⁄¨y
() {

1425  
upd©eI¡îvÆSèti⁄¨y
;

1426 
	}
}

1442 
£tUpd©eI¡îvÆSèti⁄¨y
(c⁄° *
vÆue
, *
d©a
 
__©åibuã__
 ((
unu£d
)),

1443 
£t_∂ugö_∑ømëî_add⁄
 
add⁄
 
__©åibuã__
 ((
unu£d
))) {

1444 c⁄° * 
	gvÆueName
 = 
PUD_UPDATE_INTERVAL_STATIONARY_NAME
;

1445 
	gupd©eI¡îvÆSèti⁄¨yNew
;

1447 
as£π
 (
vÆue
 !
NULL
);

1449 i‡(!
ªadULL
(
vÆueName
, 
vÆue
, &
upd©eI¡îvÆSèti⁄¨yNew
)) {

1450  
	gåue
;

1453 i‡(
	gupd©eI¡îvÆSèti⁄¨yNew
 < 1) {

1454 
pudEº‹
(
Ál£
, "C⁄figuªd %†mu° bê©Üó° 1", 
vÆueName
);

1455  
	gåue
;

1458 
	gupd©eI¡îvÆSèti⁄¨y
 = 
upd©eI¡îvÆSèti⁄¨yNew
;

1460  
	gÁl£
;

1468 
	gupd©eI¡îvÆMovög
 = 
PUD_UPDATE_INTERVAL_MOVING_DEFAULT
;

1474 
	$gëUpd©eI¡îvÆMovög
() {

1475  
upd©eI¡îvÆMovög
;

1476 
	}
}

1492 
£tUpd©eI¡îvÆMovög
(c⁄° *
vÆue
, *
d©a
 
__©åibuã__
 ((
unu£d
)),

1493 
£t_∂ugö_∑ømëî_add⁄
 
add⁄
 
__©åibuã__
 ((
unu£d
))) {

1494 c⁄° * 
	gvÆueName
 = 
PUD_UPDATE_INTERVAL_MOVING_NAME
;

1495 
	gupd©eI¡îvÆMovögNew
;

1497 
as£π
 (
vÆue
 !
NULL
);

1499 i‡(!
ªadULL
(
vÆueName
, 
vÆue
, &
upd©eI¡îvÆMovögNew
)) {

1500  
	gåue
;

1503 i‡(
	gupd©eI¡îvÆMovögNew
 < 1) {

1504 
pudEº‹
(
Ál£
, "C⁄figuªd %†mu° bê©Üó° 1", 
vÆueName
);

1505  
	gåue
;

1508 
	gupd©eI¡îvÆMovög
 = 
upd©eI¡îvÆMovögNew
;

1510  
	gÁl£
;

1518 
	gu∂ökUpd©eI¡îvÆSèti⁄¨y
 = 
PUD_UPLINK_UPDATE_INTERVAL_STATIONARY_DEFAULT
;

1524 
	$gëU∂ökUpd©eI¡îvÆSèti⁄¨y
() {

1525  
u∂ökUpd©eI¡îvÆSèti⁄¨y
;

1526 
	}
}

1542 
£tU∂ökUpd©eI¡îvÆSèti⁄¨y
(c⁄° *
vÆue
, *
d©a
 
__©åibuã__
 ((
unu£d
)),

1543 
£t_∂ugö_∑ømëî_add⁄
 
add⁄
 
__©åibuã__
 ((
unu£d
))) {

1544 c⁄° * 
	gvÆueName
 = 
PUD_UPLINK_UPDATE_INTERVAL_STATIONARY_NAME
;

1545 
	gu∂ökUpd©eI¡îvÆSèti⁄¨yNew
;

1547 
as£π
 (
vÆue
 !
NULL
);

1549 i‡(!
ªadULL
(
vÆueName
, 
vÆue
, &
u∂ökUpd©eI¡îvÆSèti⁄¨yNew
)) {

1550  
	gåue
;

1553 i‡(
	gu∂ökUpd©eI¡îvÆSèti⁄¨yNew
 < 1) {

1554 
pudEº‹
(
Ál£
, "C⁄figuªd %†mu° bê©Üó° 1", 
vÆueName
);

1555  
	gåue
;

1558 
	gu∂ökUpd©eI¡îvÆSèti⁄¨y
 = 
u∂ökUpd©eI¡îvÆSèti⁄¨yNew
;

1560  
	gÁl£
;

1568 
	gu∂ökUpd©eI¡îvÆMovög
 = 
PUD_UPLINK_UPDATE_INTERVAL_MOVING_DEFAULT
;

1574 
	$gëU∂ökUpd©eI¡îvÆMovög
() {

1575  
u∂ökUpd©eI¡îvÆMovög
;

1576 
	}
}

1592 
£tU∂ökUpd©eI¡îvÆMovög
(c⁄° *
vÆue
, *
d©a
 
__©åibuã__
 ((
unu£d
)),

1593 
£t_∂ugö_∑ømëî_add⁄
 
add⁄
 
__©åibuã__
 ((
unu£d
))) {

1594 c⁄° * 
	gvÆueName
 = 
PUD_UPLINK_UPDATE_INTERVAL_MOVING_NAME
;

1595 
	gu∂ökUpd©eI¡îvÆMovögNew
;

1597 
as£π
 (
vÆue
 !
NULL
);

1599 i‡(!
ªadULL
(
vÆueName
, 
vÆue
, &
u∂ökUpd©eI¡îvÆMovögNew
)) {

1600  
	gåue
;

1603 i‡(
	gu∂ökUpd©eI¡îvÆMovögNew
 < 1) {

1604 
pudEº‹
(
Ál£
, "C⁄figuªd %†mu° bê©Üó° 1", 
vÆueName
);

1605  
	gåue
;

1608 
	gu∂ökUpd©eI¡îvÆMovög
 = 
u∂ökUpd©eI¡îvÆMovögNew
;

1610  
	gÁl£
;

1618 
	gg©ewayDëîmö©i⁄I¡îvÆ
 = 
PUD_GATEWAY_DETERMINATION_INTERVAL_DEFAULT
;

1624 
	$gëG©ewayDëîmö©i⁄I¡îvÆ
() {

1625  
g©ewayDëîmö©i⁄I¡îvÆ
;

1626 
	}
}

1642 
£tG©ewayDëîmö©i⁄I¡îvÆ
(c⁄° *
vÆue
, *
d©a
 
__©åibuã__
 ((
unu£d
)),

1643 
£t_∂ugö_∑ømëî_add⁄
 
add⁄
 
__©åibuã__
 ((
unu£d
))) {

1644 c⁄° * 
	gvÆueName
 = 
PUD_GATEWAY_DETERMINATION_INTERVAL_NAME
;

1645 
	gg©ewayDëîmö©i⁄I¡îvÆNew
;

1647 
as£π
 (
vÆue
 !
NULL
);

1649 i‡(!
ªadULL
(
vÆueName
, 
vÆue
, &
g©ewayDëîmö©i⁄I¡îvÆNew
)) {

1650  
	gåue
;

1653 i‡(
	gg©ewayDëîmö©i⁄I¡îvÆNew
 < 1) {

1654 
pudEº‹
(
Ál£
, "C⁄figuªd %†mu° bê©Üó° 1", 
vÆueName
);

1655  
	gåue
;

1658 
	gg©ewayDëîmö©i⁄I¡îvÆ
 = 
g©ewayDëîmö©i⁄I¡îvÆNew
;

1660  
	gÁl£
;

1668 
	gmovögS≥edThªshﬁd
 = 
PUD_MOVING_SPEED_THRESHOLD_DEFAULT
;

1674 
	$gëMovögS≥edThªshﬁd
() {

1675  
movögS≥edThªshﬁd
;

1676 
	}
}

1692 
£tMovögS≥edThªshﬁd
(c⁄° *
vÆue
, *
d©a
 
__©åibuã__
 ((
unu£d
)),

1693 
£t_∂ugö_∑ømëî_add⁄
 
add⁄
 
__©åibuã__
 ((
unu£d
))) {

1694 c⁄° * 
	gvÆueName
 = 
PUD_MOVING_SPEED_THRESHOLD_NAME
;

1695 
	gmovögS≥edThªshﬁdNew
;

1697 
as£π
 (
vÆue
 !
NULL
);

1699 i‡(!
ªadULL
(
vÆueName
, 
vÆue
, &
movögS≥edThªshﬁdNew
)) {

1700  
	gåue
;

1703 
	gmovögS≥edThªshﬁd
 = 
movögS≥edThªshﬁdNew
;

1705  
	gÁl£
;

1713 
	gmovögDi°™˚Thªshﬁd
 = 
PUD_MOVING_DISTANCE_THRESHOLD_DEFAULT
;

1719 
	$gëMovögDi°™˚Thªshﬁd
() {

1720  
movögDi°™˚Thªshﬁd
;

1721 
	}
}

1737 
£tMovögDi°™˚Thªshﬁd
(c⁄° *
vÆue
, *
d©a
 
__©åibuã__
 ((
unu£d
)),

1738 
£t_∂ugö_∑ømëî_add⁄
 
add⁄
 
__©åibuã__
 ((
unu£d
))) {

1739 c⁄° * 
	gvÆueName
 = 
PUD_MOVING_DISTANCE_THRESHOLD_NAME
;

1740 
	gmovögDi°™˚ThªshﬁdNew
;

1742 
as£π
 (
vÆue
 !
NULL
);

1744 i‡(!
ªadULL
(
vÆueName
, 
vÆue
, &
movögDi°™˚ThªshﬁdNew
)) {

1745  
	gåue
;

1748 
	gmovögDi°™˚Thªshﬁd
 = 
movögDi°™˚ThªshﬁdNew
;

1750  
	gÁl£
;

1758 
	gd›Mu…ùlõr
 = 
PUD_DOP_MULTIPLIER_DEFAULT
;

1764 
	$gëD›Mu…ùlõr
() {

1765  
d›Mu…ùlõr
;

1766 
	}
}

1782 
£tD›Mu…ùlõr
(c⁄° *
vÆue
, *
d©a
 
__©åibuã__
 ((
unu£d
)),

1783 
£t_∂ugö_∑ømëî_add⁄
 
add⁄
 
__©åibuã__
 ((
unu£d
))) {

1784 c⁄° * 
	gvÆueName
 = 
PUD_DOP_MULTIPLIER_NAME
;

1785 
	gd›Mu…ùlõrNew
;

1787 
as£π
 (
vÆue
 !
NULL
);

1789 i‡(!
ªadDoubÀ
(
vÆueName
, 
vÆue
, &
d›Mu…ùlõrNew
)) {

1790  
	gåue
;

1793 
	gd›Mu…ùlõr
 = 
d›Mu…ùlõrNew
;

1795  
	gÁl£
;

1803 
	gdeÁu…Hd›
 = 
PUD_DEFAULT_HDOP_DEFAULT
;

1809 
	$gëDeÁu…Hd›
() {

1810  
deÁu…Hd›
;

1811 
	}
}

1827 
£tDeÁu…Hd›
(c⁄° *
vÆue
, *
d©a
 
__©åibuã__
 ((
unu£d
)),

1828 
£t_∂ugö_∑ømëî_add⁄
 
add⁄
 
__©åibuã__
 ((
unu£d
))) {

1829 c⁄° * 
	gvÆueName
 = 
PUD_MOVING_DISTANCE_THRESHOLD_NAME
;

1830 
	gdeÁu…Hd›New
;

1832 
as£π
 (
vÆue
 !
NULL
);

1834 i‡(!
ªadULL
(
vÆueName
, 
vÆue
, &
deÁu…Hd›New
)) {

1835  
	gåue
;

1838 
	gdeÁu…Hd›
 = 
deÁu…Hd›New
;

1840  
	gÁl£
;

1848 
	gdeÁu…Vd›
 = 
PUD_DEFAULT_VDOP_DEFAULT
;

1854 
	$gëDeÁu…Vd›
() {

1855  
deÁu…Vd›
;

1856 
	}
}

1872 
£tDeÁu…Vd›
(c⁄° *
vÆue
, *
d©a
 
__©åibuã__
 ((
unu£d
)),

1873 
£t_∂ugö_∑ømëî_add⁄
 
add⁄
 
__©åibuã__
 ((
unu£d
))) {

1874 c⁄° * 
	gvÆueName
 = 
PUD_MOVING_DISTANCE_THRESHOLD_NAME
;

1875 
	gdeÁu…Vd›New
;

1877 
as£π
 (
vÆue
 !
NULL
);

1879 i‡(!
ªadULL
(
vÆueName
, 
vÆue
, &
deÁu…Vd›New
)) {

1880  
	gåue
;

1883 
	gdeÁu…Vd›
 = 
deÁu…Vd›New
;

1885  
	gÁl£
;

1893 
	gavîageDïth
 = 
PUD_AVERAGE_DEPTH_DEFAULT
;

1899 
	$gëAvîageDïth
() {

1900  
avîageDïth
;

1901 
	}
}

1917 
£tAvîageDïth
(c⁄° *
vÆue
, *
d©a
 
__©åibuã__
 ((
unu£d
)),

1918 
£t_∂ugö_∑ømëî_add⁄
 
add⁄
 
__©åibuã__
 ((
unu£d
))) {

1919 c⁄° * 
	gvÆueName
 = 
PUD_AVERAGE_DEPTH_NAME
;

1920 
	gavîageDïthNew
;

1922 
as£π
 (
vÆue
 !
NULL
);

1924 i‡(!
ªadULL
(
vÆueName
, 
vÆue
, &
avîageDïthNew
)) {

1925  
	gåue
;

1928 i‡(
	gavîageDïthNew
 < 1) {

1929 
pudEº‹
(
Ál£
, "C⁄figuªd %†mu° bê©Üó° 1", 
vÆueName
);

1930  
	gåue
;

1933 
	gavîageDïth
 = 
avîageDïthNew
;

1935  
	gÁl£
;

1943 
	ghy°îesisCou¡ToSèti⁄¨y
 = 
PUD_HYSTERESIS_COUNT_2STAT_DEFAULT
;

1949 
	$gëHy°îesisCou¡ToSèti⁄¨y
() {

1950  
hy°îesisCou¡ToSèti⁄¨y
;

1951 
	}
}

1967 
£tHy°îesisCou¡ToSèti⁄¨y
(c⁄° *
vÆue
, *
d©a
 
__©åibuã__
 ((
unu£d
)),

1968 
£t_∂ugö_∑ømëî_add⁄
 
add⁄
 
__©åibuã__
 ((
unu£d
))) {

1969 c⁄° * 
	gvÆueName
 = 
PUD_HYSTERESIS_COUNT_2STAT_NAME
;

1970 
	ghy°îesisCou¡New
;

1972 
as£π
 (
vÆue
 !
NULL
);

1974 i‡(!
ªadULL
(
vÆueName
, 
vÆue
, &
hy°îesisCou¡New
)) {

1975  
	gåue
;

1978 
	ghy°îesisCou¡ToSèti⁄¨y
 = 
hy°îesisCou¡New
;

1980  
	gÁl£
;

1988 
	ghy°îesisCou¡ToMovög
 = 
PUD_HYSTERESIS_COUNT_2MOV_DEFAULT
;

1994 
	$gëHy°îesisCou¡ToMovög
() {

1995  
hy°îesisCou¡ToMovög
;

1996 
	}
}

2012 
£tHy°îesisCou¡ToMovög
(c⁄° *
vÆue
, *
d©a
 
__©åibuã__
 ((
unu£d
)),

2013 
£t_∂ugö_∑ømëî_add⁄
 
add⁄
 
__©åibuã__
 ((
unu£d
))) {

2014 c⁄° * 
	gvÆueName
 = 
PUD_HYSTERESIS_COUNT_2MOV_NAME
;

2015 
	ghy°îesisCou¡New
;

2017 
as£π
 (
vÆue
 !
NULL
);

2019 i‡(!
ªadULL
(
vÆueName
, 
vÆue
, &
hy°îesisCou¡New
)) {

2020  
	gåue
;

2023 
	ghy°îesisCou¡ToMovög
 = 
hy°îesisCou¡New
;

2025  
	gÁl£
;

2033 
	gg©ewayHy°îesisCou¡ToSèti⁄¨y
 = 
PUD_GAT_HYSTERESIS_COUNT_2STAT_DEFAULT
;

2039 
	$gëG©ewayHy°îesisCou¡ToSèti⁄¨y
() {

2040  
g©ewayHy°îesisCou¡ToSèti⁄¨y
;

2041 
	}
}

2057 
£tG©ewayHy°îesisCou¡ToSèti⁄¨y
(c⁄° *
vÆue
, *
d©a
 
__©åibuã__
 ((
unu£d
)),

2058 
£t_∂ugö_∑ømëî_add⁄
 
add⁄
 
__©åibuã__
 ((
unu£d
))) {

2059 c⁄° * 
	gvÆueName
 = 
PUD_GAT_HYSTERESIS_COUNT_2STAT_NAME
;

2060 
	ghy°îesisCou¡New
;

2062 
as£π
 (
vÆue
 !
NULL
);

2064 i‡(!
ªadULL
(
vÆueName
, 
vÆue
, &
hy°îesisCou¡New
)) {

2065  
	gåue
;

2068 
	gg©ewayHy°îesisCou¡ToSèti⁄¨y
 = 
hy°îesisCou¡New
;

2070  
	gÁl£
;

2078 
	gg©ewayHy°îesisCou¡ToMovög
 = 
PUD_GAT_HYSTERESIS_COUNT_2MOV_DEFAULT
;

2084 
	$gëG©ewayHy°îesisCou¡ToMovög
() {

2085  
g©ewayHy°îesisCou¡ToMovög
;

2086 
	}
}

2102 
£tG©ewayHy°îesisCou¡ToMovög
(c⁄° *
vÆue
, *
d©a
 
__©åibuã__
 ((
unu£d
)),

2103 
£t_∂ugö_∑ømëî_add⁄
 
add⁄
 
__©åibuã__
 ((
unu£d
))) {

2104 c⁄° * 
	gvÆueName
 = 
PUD_GAT_HYSTERESIS_COUNT_2MOV_NAME
;

2105 
	ghy°îesisCou¡New
;

2107 
as£π
 (
vÆue
 !
NULL
);

2109 i‡(!
ªadULL
(
vÆueName
, 
vÆue
, &
hy°îesisCou¡New
)) {

2110  
	gåue
;

2113 
	gg©ewayHy°îesisCou¡ToMovög
 = 
hy°îesisCou¡New
;

2115  
	gÁl£
;

2123 
boﬁ
 
	gu£DeDup
 = 
PUD_USE_DEDUP_DEFAULT
;

2129 
boﬁ
 
	$gëU£DeDup
() {

2130  
u£DeDup
;

2131 
	}
}

2147 
£tU£DeDup
(c⁄° *
vÆue
, *
d©a
 
__©åibuã__
 ((
unu£d
)),

2148 
£t_∂ugö_∑ømëî_add⁄
 
add⁄
 
__©åibuã__
 ((
unu£d
))) {

2149 c⁄° * 
	gvÆueName
 = 
PUD_USE_DEDUP_NAME
;

2150 
	gu£DeDupNew
;

2152 
as£π
 (
vÆue
 !
NULL
);

2154 i‡(!
ªadULL
(
vÆueName
, 
vÆue
, &
u£DeDupNew
)) {

2155  
	gåue
;

2158 i‡((
	gu£DeDupNew
 !0Ë&& (
u£DeDupNew
 != 1)) {

2159 
pudEº‹
(
Ál£
, "Configured %s must be 0 (false) or 1 (true)",

2160 
vÆueName
);

2161  
	gåue
;

2164 
	gu£DeDup
 = (
u£DeDupNew
 == 1);

2166  
	gÁl£
;

2174 
	gdeDupDïth
 = 
PUD_DEDUP_DEPTH_DEFAULT
;

2180 
	$gëDeDupDïth
() {

2181  
deDupDïth
;

2182 
	}
}

2198 
£tDeDupDïth
(c⁄° *
vÆue
, *
d©a
 
__©åibuã__
 ((
unu£d
)),

2199 
£t_∂ugö_∑ømëî_add⁄
 
add⁄
 
__©åibuã__
 ((
unu£d
))) {

2200 c⁄° * 
	gvÆueName
 = 
PUD_DEDUP_DEPTH_NAME
;

2201 
	gdeDupDïthNew
;

2203 
as£π
 (
vÆue
 !
NULL
);

2205 i‡(!
ªadULL
(
vÆueName
, 
vÆue
, &
deDupDïthNew
)) {

2206  
	gåue
;

2209 
	gdeDupDïth
 = 
deDupDïthNew
;

2211  
	gÁl£
;

2219 
boﬁ
 
	gu£Lo›back
 = 
PUD_USE_LOOPBACK_DEFAULT
;

2225 
boﬁ
 
	$gëU£Lo›back
() {

2226  
u£Lo›back
;

2227 
	}
}

2243 
£tU£Lo›back
(c⁄° *
vÆue
, *
d©a
 
__©åibuã__
 ((
unu£d
)),

2244 
£t_∂ugö_∑ømëî_add⁄
 
add⁄
 
__©åibuã__
 ((
unu£d
))) {

2245 c⁄° * 
	gvÆueName
 = 
PUD_USE_LOOPBACK_NAME
;

2246 
	gu£Lo›backNew
;

2248 
as£π
 (
vÆue
 !
NULL
);

2250 i‡(!
ªadULL
(
vÆueName
, 
vÆue
, &
u£Lo›backNew
)) {

2251  
	gåue
;

2254 i‡((
	gu£Lo›backNew
 !0Ë&& (
u£Lo›backNew
 != 1)) {

2255 
pudEº‹
(
Ál£
, "Configured %s must be 0 (false) or 1 (true)",

2256 
vÆueName
);

2257  
	gåue
;

2260 
	gu£Lo›back
 = (
u£Lo›backNew
 == 1);

2262  
	gÁl£
;

2276 
	$checkC⁄fig
() {

2277 
ªtvÆ
 = 
åue
;

2279 i‡(!
ﬁ§_˙f
->
sm¨t_gw_a˘ive
) {

2280 
	`pudEº‹
(
Ál£
, "Smart Gateway must beáctive");

2281 
ªtvÆ
 = 
Ál£
;

2284 i‡(
rxN⁄Ol§I¡îÁ˚Cou¡
 == 0) {

2285 
	`pudEº‹
(
Ál£
, "NoÑeceiveÇon-OLSR interfaces configured");

2286 
ªtvÆ
 = 
Ál£
;

2289 i‡(
txN⁄Ol§I¡îÁ˚Cou¡
 == 0) {

2290 
	`pudEº‹
(
Ál£
, "NoÅransmitÇon-OLSR interfaces configured");

2291 
ªtvÆ
 = 
Ál£
;

2294 i‡(!
nodeIdSë
) {

2295 i‡(
nodeIdTy≥
 =
PUD_NODEIDTYPE_DNS
) {

2296 
«me
[
PUD_TX_NODEID_BUFFERSIZE
 + 1];

2298 
î∫o
 = 0;

2299 i‡(
	`gëho°«me
(&
«me
[0], (name)) < 0) {

2300 
	`pudEº‹
(
åue
, "CouldÇot getÅhe hostÇame");

2301 
ªtvÆ
 = 
Ál£
;

2303 
	`£tNodeId
(&
«me
[0], 
NULL
,

2304 (
£t_∂ugö_∑ømëî_add⁄
Ë{.
pc
 = 
NULL
});

2306 } i‡((
nodeIdTy≥
 !
PUD_NODEIDTYPE_MAC
) && (nodeIdType

2307 !
PUD_NODEIDTYPE_IPV4
Ë&& (
nodeIdTy≥
 !
PUD_NODEIDTYPE_IPV6
)) {

2308 
	`pudEº‹
(
Ál£
, "NoÇode ID set while one isÑequired for"

2309 "Çodêty≥ %u", 
nodeIdTy≥
);

2310 
ªtvÆ
 = 
Ál£
;

2314 i‡(!
	`£tupNodeIdBö¨yAndVÆid©e
(
nodeIdTy≥
)) {

2315 
ªtvÆ
 = 
Ál£
;

2318 i‡(
upd©eI¡îvÆMovög
 > 
upd©eI¡îvÆSèti⁄¨y
) {

2319 
	`pudEº‹
(
Ál£
,"The update interval for moving situations mustÇot be"

2321 
ªtvÆ
 = 
Ál£
;

2324 i‡(
u∂ökUpd©eI¡îvÆMovög
 > 
u∂ökUpd©eI¡îvÆSèti⁄¨y
) {

2325 
	`pudEº‹
(
Ál£
,"The uplink update interval for moving situations mustÇot be"

2327 
ªtvÆ
 = 
Ál£
;

2330 i‡(
	`gëU∂ökP‹t
(Ë=
	`gëDow∆ökP‹t
()) {

2331 
	`pudEº‹
(
Ál£
, "The uplinkÖortándÅhe downlinkÖort mustÇot beÅhe same");

2332 
ªtvÆ
 = 
Ál£
;

2335  
ªtvÆ
;

2336 
	}
}

2346 
	$checkRunSëup
() {

2347 
ªtvÆ
 = 
åue
;

2348 
i
;

2352 
i
 = 0; i < 
rxN⁄Ol§I¡îÁ˚Cou¡
; i++) {

2353 * 
n⁄Ol§I¡îÁ˚Name
 = &
rxN⁄Ol§I¡îÁ˚Names
[
i
][0];

2355 
TRxTxNëw‹kI¡îÁ˚
 * 
öãrÁ˚Obje˘
 = 
	`gëRxNëw‹kI¡îÁ˚s
();

2356 
boﬁ
 
found
 = 
Ál£
;

2357 
öãrÁ˚Obje˘
 !
NULL
) {

2358 i‡(
	`°∫cmp
((*Ë
n⁄Ol§I¡îÁ˚Name
,

2359 (*Ë&
öãrÁ˚Obje˘
->
«me
[0], 
IFNAMSIZ
 + 1) == 0) {

2360 
found
 = 
åue
;

2363 
öãrÁ˚Obje˘
 = i¡îÁ˚Obje˘->
√xt
;

2365 i‡(!
found
) {

2366 
	`pudEº‹
(
Ál£
, "ConfiguredÑeceiveÇon-OLSR interface %s isÇot"

2367 "á know¿öãrÁ˚Çame", 
n⁄Ol§I¡îÁ˚Name
);

2368 
ªtvÆ
 = 
Ál£
;

2374 
i
 = 0; i < 
txN⁄Ol§I¡îÁ˚Cou¡
; i++) {

2375 * 
n⁄Ol§I¡îÁ˚Name
 = &
txN⁄Ol§I¡îÁ˚Names
[
i
][0];

2377 
TRxTxNëw‹kI¡îÁ˚
 * 
öãrÁ˚Obje˘
 = 
	`gëTxNëw‹kI¡îÁ˚s
();

2378 
boﬁ
 
found
 = 
Ál£
;

2379 
öãrÁ˚Obje˘
 !
NULL
) {

2380 i‡(
	`°∫cmp
((*Ë
n⁄Ol§I¡îÁ˚Name
,

2381 (*Ë&
öãrÁ˚Obje˘
->
«me
[0], 
IFNAMSIZ
 + 1) == 0) {

2382 
found
 = 
åue
;

2385 
öãrÁ˚Obje˘
 = i¡îÁ˚Obje˘->
√xt
;

2387 i‡(!
found
) {

2388 
	`pudEº‹
(
Ál£
, "ConfiguredÅransmitÇon-OLSR interface %s isÇot"

2389 "á know¿öãrÁ˚Çame", 
n⁄Ol§I¡îÁ˚Name
);

2390 
ªtvÆ
 = 
Ál£
;

2394  
ªtvÆ
;

2395 
	}
}

	@lib/pud/src/configuration.h

1 #i‚de‡
_PUD_CONFIGURATION_H_


2 
	#_PUD_CONFIGURATION_H_


	)

7 
	~"ﬁ§d_∂ugö.h
"

8 
	~"ﬁ§_ty≥s.h
"

11 
	~<°dboﬁ.h
>

12 
	~<°ddef.h
>

13 
	~<Ol§dPudWúeF‹m©/wúeF‹m©.h
>

19 
boﬁ
 
ªadDoubÀ
(c⁄° * 
vÆueName
, c⁄° * 
vÆue
, * 
vÆueNumbî
);

26 
	#PUD_NODE_ID_TYPE_NAME
 "nodeIdTy≥"

	)

29 
	#PUD_NODE_ID_TYPE_DEFAULT
 
PUD_NODEIDTYPE_IPV4


	)

31 
NodeIdTy≥
 
gëNodeIdTy≥Numbî
();

32 
£tNodeIdTy≥
(c⁄° *
vÆue
, *
d©a
,

33 
£t_∂ugö_∑ømëî_add⁄
 
add⁄
);

36 
	#PUD_NODE_ID_NAME
 "nodeId"

	)

38 * 
gëNodeId
();

39 * 
gëNodeIdWôhLígth
(
size_t
 *
Àngth
);

40 
nodeIdBö¨yTy≥
 * 
gëNodeIdBö¨y
();

41 
£tNodeId
(c⁄° *
vÆue
, *
d©a
, 
£t_∂ugö_∑ømëî_add⁄
 
add⁄
);

48 
	#PUD_RX_NON_OLSR_IF_NAME
 "rxN⁄Ol§If"

	)

50 
boﬁ
 
isRxN⁄Ol§I¡îÁ˚
(c⁄° *
ifName
);

51 
addRxN⁄Ol§I¡îÁ˚
(c⁄° *
vÆue
, *
d©a
,

52 
£t_∂ugö_∑ømëî_add⁄
 
add⁄
);

55 
	#PUD_RX_ALLOWED_SOURCE_IP_NAME
 "rxAŒowedSour˚IpAddªss"

	)

57 
boﬁ
 
isRxAŒowedSour˚IpAddªss
(
sockaddr
 * 
£ndî
);

58 
addRxAŒowedSour˚IpAddªss
(c⁄° *
vÆue
, *
d©a
,

59 
£t_∂ugö_∑ømëî_add⁄
 
add⁄
);

62 
	#PUD_RX_MC_ADDR_NAME
 "rxMcAddr"

	)

65 
	#PUD_RX_MC_ADDR_4_DEFAULT
 "224.0.0.224"

	)

68 
	#PUD_RX_MC_ADDR_6_DEFAULT
 "FF02:0:0:0:0:0:0:1"

	)

70 
ﬁ§_sockaddr
 * 
gëRxMcAddr
();

72 
£tRxMcAddr
(c⁄° *
vÆue
, *
d©a
, 
£t_∂ugö_∑ømëî_add⁄
 
add⁄
);

75 
	#PUD_RX_MC_PORT_NAME
 "rxMcP‹t"

	)

78 
	#PUD_RX_MC_PORT_DEFAULT
 2240

	)

80 
gëRxMcP‹t
();

82 
£tRxMcP‹t
(c⁄° *
vÆue
, *
d©a
, 
£t_∂ugö_∑ømëî_add⁄
 
add⁄
);

85 
	#PUD_POSFILE_NAME
 "posôi⁄Fûe"

	)

87 * 
gëPosôi⁄Fûe
();

88 
£tPosôi⁄Fûe
(c⁄° *
vÆue
, *
d©a
, 
£t_∂ugö_∑ømëî_add⁄
 
add⁄
);

95 
	#PUD_TX_NON_OLSR_IF_NAME
 "txN⁄Ol§If"

	)

97 
boﬁ
 
isTxN⁄Ol§I¡îÁ˚
(c⁄° *
ifName
);

98 
addTxN⁄Ol§I¡îÁ˚
(c⁄° *
vÆue
, *
d©a
,

99 
£t_∂ugö_∑ømëî_add⁄
 
add⁄
);

102 
	#PUD_TX_MC_ADDR_NAME
 "txMcAddr"

	)

105 
	#PUD_TX_MC_ADDR_4_DEFAULT
 "224.0.0.224"

	)

108 
	#PUD_TX_MC_ADDR_6_DEFAULT
 "FF02:0:0:0:0:0:0:1"

	)

110 
ﬁ§_sockaddr
 * 
gëTxMcAddr
();

112 
£tTxMcAddr
(c⁄° *
vÆue
, *
d©a
, 
£t_∂ugö_∑ømëî_add⁄
 
add⁄
);

115 
	#PUD_TX_MC_PORT_NAME
 "txMcP‹t"

	)

118 
	#PUD_TX_MC_PORT_DEFAULT
 2240

	)

120 
gëTxMcP‹t
();

122 
£tTxMcP‹t
(c⁄° *
vÆue
, *
d©a
, 
£t_∂ugö_∑ømëî_add⁄
 
add⁄
);

125 
	#PUD_TX_TTL_NAME
 "txTé"

	)

128 
	#PUD_TX_TTL_DEFAULT
 1

	)

130 
gëTxTé
();

131 
£tTxTé
(c⁄° *
vÆue
, *
d©a
, 
£t_∂ugö_∑ømëî_add⁄
 
add⁄
);

134 
	#PUD_TX_NMEAMESSAGEPREFIX_NAME
 "txNmóMesßgePªfix"

	)

137 
	#PUD_TX_NMEAMESSAGEPREFIX_DEFAULT
 "NBSX"

	)

139 * 
gëTxNmóMesßgePªfix
();

140 
£tTxNmóMesßgePªfix
(c⁄° *
vÆue
, *
d©a
,

141 
£t_∂ugö_∑ømëî_add⁄
 
add⁄
);

148 
	#PUD_UPLINK_ADDR_NAME
 "u∂ökAddr"

	)

151 
	#PUD_UPLINK_ADDR_4_DEFAULT
 "0.0.0.0"

	)

154 
	#PUD_UPLINK_ADDR_6_DEFAULT
 "0:0:0:0:0:0:0:0"

	)

156 
boﬁ
 
isU∂ökAddrSë
();

157 
ﬁ§_sockaddr
 * 
gëU∂ökAddr
();

159 
£tU∂ökAddr
(c⁄° *
vÆue
, *
d©a
, 
£t_∂ugö_∑ømëî_add⁄
 
add⁄
);

162 
	#PUD_UPLINK_PORT_NAME
 "u∂ökP‹t"

	)

165 
	#PUD_UPLINK_PORT_DEFAULT
 2241

	)

167 
gëU∂ökP‹t
();

169 
£tU∂ökP‹t
(c⁄° *
vÆue
, *
d©a
, 
£t_∂ugö_∑ømëî_add⁄
 
add⁄
);

176 
	#PUD_DOWNLINK_PORT_NAME
 "dow∆ökP‹t"

	)

179 
	#PUD_DOWNLINK_PORT_DEFAULT
 2242

	)

181 
gëDow∆ökP‹t
();

183 
£tDow∆ökP‹t
(c⁄° *
vÆue
, *
d©a
, 
£t_∂ugö_∑ømëî_add⁄
 
add⁄
);

190 
	#PUD_OLSR_TTL_NAME
 "ﬁ§Té"

	)

193 
	#PUD_OLSR_TTL_DEFAULT
 64

	)

195 
gëOl§Té
();

196 
£tOl§Té
(c⁄° *
vÆue
, *
d©a
, 
£t_∂ugö_∑ømëî_add⁄
 
add⁄
);

203 
	#PUD_UPDATE_INTERVAL_STATIONARY_NAME
 "upd©eI¡îvÆSèti⁄¨y"

	)

206 
	#PUD_UPDATE_INTERVAL_STATIONARY_DEFAULT
 60

	)

208 
gëUpd©eI¡îvÆSèti⁄¨y
();

209 
£tUpd©eI¡îvÆSèti⁄¨y
(c⁄° *
vÆue
, *
d©a
,

210 
£t_∂ugö_∑ømëî_add⁄
 
add⁄
);

213 
	#PUD_UPDATE_INTERVAL_MOVING_NAME
 "upd©eI¡îvÆMovög"

	)

216 
	#PUD_UPDATE_INTERVAL_MOVING_DEFAULT
 5

	)

218 
gëUpd©eI¡îvÆMovög
();

219 
£tUpd©eI¡îvÆMovög
(c⁄° *
vÆue
, *
d©a
,

220 
£t_∂ugö_∑ømëî_add⁄
 
add⁄
);

223 
	#PUD_UPLINK_UPDATE_INTERVAL_STATIONARY_NAME
 "u∂ökUpd©eI¡îvÆSèti⁄¨y"

	)

226 
	#PUD_UPLINK_UPDATE_INTERVAL_STATIONARY_DEFAULT
 180

	)

228 
gëU∂ökUpd©eI¡îvÆSèti⁄¨y
();

229 
£tU∂ökUpd©eI¡îvÆSèti⁄¨y
(c⁄° *
vÆue
, *
d©a
,

230 
£t_∂ugö_∑ømëî_add⁄
 
add⁄
);

233 
	#PUD_UPLINK_UPDATE_INTERVAL_MOVING_NAME
 "u∂ökUpd©eI¡îvÆMovög"

	)

236 
	#PUD_UPLINK_UPDATE_INTERVAL_MOVING_DEFAULT
 15

	)

238 
gëU∂ökUpd©eI¡îvÆMovög
();

239 
£tU∂ökUpd©eI¡îvÆMovög
(c⁄° *
vÆue
, *
d©a
,

240 
£t_∂ugö_∑ømëî_add⁄
 
add⁄
);

243 
	#PUD_GATEWAY_DETERMINATION_INTERVAL_NAME
 "g©ewayDëîmö©i⁄I¡îvÆ"

	)

246 
	#PUD_GATEWAY_DETERMINATION_INTERVAL_DEFAULT
 1

	)

248 
gëG©ewayDëîmö©i⁄I¡îvÆ
();

249 
£tG©ewayDëîmö©i⁄I¡îvÆ
(c⁄° *
vÆue
, *
d©a
,

250 
£t_∂ugö_∑ømëî_add⁄
 
add⁄
);

253 
	#PUD_MOVING_SPEED_THRESHOLD_NAME
 "movögS≥edThªshﬁd"

	)

256 
	#PUD_MOVING_SPEED_THRESHOLD_DEFAULT
 9

	)

258 
gëMovögS≥edThªshﬁd
();

259 
£tMovögS≥edThªshﬁd
(c⁄° *
vÆue
, *
d©a
,

260 
£t_∂ugö_∑ømëî_add⁄
 
add⁄
);

263 
	#PUD_MOVING_DISTANCE_THRESHOLD_NAME
 "movögDi°™˚Thªshﬁd"

	)

266 
	#PUD_MOVING_DISTANCE_THRESHOLD_DEFAULT
 50

	)

268 
gëMovögDi°™˚Thªshﬁd
();

269 
£tMovögDi°™˚Thªshﬁd
(c⁄° *
vÆue
, *
d©a
,

270 
£t_∂ugö_∑ømëî_add⁄
 
add⁄
);

273 
	#PUD_DOP_MULTIPLIER_NAME
 "d›Mu…ùlõr"

	)

276 
	#PUD_DOP_MULTIPLIER_DEFAULT
 2.5

	)

278 
gëD›Mu…ùlõr
();

279 
£tD›Mu…ùlõr
(c⁄° *
vÆue
, *
d©a
,

280 
£t_∂ugö_∑ømëî_add⁄
 
add⁄
);

283 
	#PUD_DEFAULT_HDOP_NAME
 "deÁu…Hd›"

	)

286 
	#PUD_DEFAULT_HDOP_DEFAULT
 50

	)

288 
gëDeÁu…Hd›
();

289 
£tDeÁu…Hd›
(c⁄° *
vÆue
, *
d©a
,

290 
£t_∂ugö_∑ømëî_add⁄
 
add⁄
);

293 
	#PUD_DEFAULT_VDOP_NAME
 "deÁu…Vd›"

	)

296 
	#PUD_DEFAULT_VDOP_DEFAULT
 50

	)

298 
gëDeÁu…Vd›
();

299 
£tDeÁu…Vd›
(c⁄° *
vÆue
, *
d©a
,

300 
£t_∂ugö_∑ømëî_add⁄
 
add⁄
);

303 
	#PUD_AVERAGE_DEPTH_NAME
 "avîageDïth"

	)

306 
	#PUD_AVERAGE_DEPTH_DEFAULT
 5

	)

308 
gëAvîageDïth
();

309 
£tAvîageDïth
(c⁄° *
vÆue
, *
d©a
,

310 
£t_∂ugö_∑ømëî_add⁄
 
add⁄
);

313 
	#PUD_HYSTERESIS_COUNT_2STAT_NAME
 "hy°îesisCou¡ToSèti⁄¨y"

	)

316 
	#PUD_HYSTERESIS_COUNT_2STAT_DEFAULT
 17

	)

318 
gëHy°îesisCou¡ToSèti⁄¨y
();

319 
£tHy°îesisCou¡ToSèti⁄¨y
(c⁄° *
vÆue
, *
d©a
,

320 
£t_∂ugö_∑ømëî_add⁄
 
add⁄
);

323 
	#PUD_HYSTERESIS_COUNT_2MOV_NAME
 "hy°îesisCou¡ToMovög"

	)

326 
	#PUD_HYSTERESIS_COUNT_2MOV_DEFAULT
 5

	)

328 
gëHy°îesisCou¡ToMovög
();

329 
£tHy°îesisCou¡ToMovög
(c⁄° *
vÆue
, *
d©a
,

330 
£t_∂ugö_∑ømëî_add⁄
 
add⁄
);

333 
	#PUD_GAT_HYSTERESIS_COUNT_2STAT_NAME
 "g©ewayHy°îesisCou¡ToSèti⁄¨y"

	)

336 
	#PUD_GAT_HYSTERESIS_COUNT_2STAT_DEFAULT
 17

	)

338 
gëG©ewayHy°îesisCou¡ToSèti⁄¨y
();

339 
£tG©ewayHy°îesisCou¡ToSèti⁄¨y
(c⁄° *
vÆue
, *
d©a
,

340 
£t_∂ugö_∑ømëî_add⁄
 
add⁄
);

343 
	#PUD_GAT_HYSTERESIS_COUNT_2MOV_NAME
 "G©ewayHy°îesisCou¡ToMovög"

	)

346 
	#PUD_GAT_HYSTERESIS_COUNT_2MOV_DEFAULT
 5

	)

348 
gëG©ewayHy°îesisCou¡ToMovög
();

349 
£tG©ewayHy°îesisCou¡ToMovög
(c⁄° *
vÆue
, *
d©a
,

350 
£t_∂ugö_∑ømëî_add⁄
 
add⁄
);

357 
	#PUD_USE_DEDUP_NAME
 "u£DeDup"

	)

360 
	#PUD_USE_DEDUP_DEFAULT
 
åue


	)

362 
boﬁ
 
gëU£DeDup
();

364 
£tU£DeDup
(c⁄° *
vÆue
, *
d©a
, 
£t_∂ugö_∑ømëî_add⁄
 
add⁄
);

367 
	#PUD_DEDUP_DEPTH_NAME
 "deDupDïth"

	)

370 
	#PUD_DEDUP_DEPTH_DEFAULT
 256

	)

372 
gëDeDupDïth
();

374 
£tDeDupDïth
(c⁄° *
vÆue
, *
d©a
, 
£t_∂ugö_∑ømëî_add⁄
 
add⁄
);

377 
	#PUD_USE_LOOPBACK_NAME
 "u£Lo›back"

	)

380 
	#PUD_USE_LOOPBACK_DEFAULT
 
Ál£


	)

382 
boﬁ
 
gëU£Lo›back
();

384 
£tU£Lo›back
(c⁄° *
vÆue
, *
d©a
, 
£t_∂ugö_∑ømëî_add⁄
 
add⁄
);

390 
checkC⁄fig
();

392 
checkRunSëup
();

	@lib/pud/src/dedup.c

1 
	~"dedup.h
"

6 
	~"ﬁ§.h
"

9 
	~<as£π.h
>

13 
	#LISTSIZE
(
x
Ë((x)->
íåõsMaxCou¡
Ë

	)

14 
	#NEWESTINDEX
(
x
Ë((x)->
√we°E¡ryIndex
Ë

	)

15 
	#WRAPINDEX
(
x
, 
i
Ë((iË% 
	`LISTSIZE
(x)Ë

	)

16 
	#INCOMINGINDEX
(
x
Ë
	`WRAPINDEX
(x, (
	`NEWESTINDEX
(xË+ 
	`LISTSIZE
(xË- 1)Ë

	)

32 
boﬁ
 
	$öôDeDupLi°
(
DeDupLi°
 * 
deDupLi°
, 
maxE¡rõs
) {

33 * 
p
;

35 i‡(
deDupLi°
 =
NULL
) {

36  
Ál£
;

38 i‡(
maxE¡rõs
 < 1) {

39  
Ál£
;

42 
p
 = 
	`ﬁ§_mÆloc
(
maxE¡rõs
 * (
DeDupE¡ry
),

44 i‡(
p
 =
NULL
) {

45  
Ál£
;

48 
deDupLi°
->
íåõsMaxCou¡
 = 
maxE¡rõs
;

49 
deDupLi°
->
íåõs
 = 
p
;

51 
deDupLi°
->
íåõsCou¡
 = 0;

52 
deDupLi°
->
√we°E¡ryIndex
 = 0;

54  
åue
;

55 
	}
}

63 
	$de°royDeDupLi°
(
DeDupLi°
 * 
deDupLi°
) {

64 
	`as£π
 (
deDupLi°
 !
NULL
);

66 i‡(
deDupLi°
->
íåõs
 !
NULL
) {

67 
	`‰ì
(
deDupLi°
->
íåõs
);

68 
deDupLi°
->
íåõs
 = 
NULL
;

71 
deDupLi°
->
íåõsMaxCou¡
 = 0;

73 
deDupLi°
->
íåõsCou¡
 = 0;

74 
deDupLi°
->
√we°E¡ryIndex
 = 0;

75 
	}
}

85 
	$addToDeDup
(
DeDupLi°
 * 
deDupLi°
, 
ﬁ§_mesßge
 *
ﬁ§Mesßge
) {

86 
öcomögIndex
;

87 
DeDupE¡ry
 * 
√wE¡ry
;

89 
	`as£π
 (
deDupLi°
 !
NULL
);

91 
öcomögIndex
 = 
	`INCOMINGINDEX
(
deDupLi°
);

92 
√wE¡ry
 = &
deDupLi°
->
íåõs
[
öcomögIndex
];

94 
	`mem£t
(
√wE¡ry
, 0, (
DeDupE¡ry
));

95 i‡(
ﬁ§_˙f
->
ù_vîsi⁄
 =
AF_INET
) {

96 
√wE¡ry
->
£qno
 = 
ﬁ§Mesßge
->
v4
.seqno;

97 
√wE¡ry
->
‹igö©‹
.
v4
.
s_addr
 = 
ﬁ§Mesßge
->v4.originator;

99 
√wE¡ry
->
£qno
 = 
ﬁ§Mesßge
->
v6
.seqno;

100 
√wE¡ry
->
‹igö©‹
.
v6
 = 
ﬁ§Mesßge
->v6.originator;

103 
deDupLi°
->
√we°E¡ryIndex
 = 
öcomögIndex
;

104 i‡(
deDupLi°
->
íåõsCou¡
 < deDupLi°->
íåõsMaxCou¡
) {

105 
deDupLi°
 ->
íåõsCou¡
++;

107 
	}
}

122 
boﬁ
 
	$isInDeDupLi°
(
DeDupLi°
 * 
deDupLi°
, 
ﬁ§_mesßge
 *
ﬁ§Mesßge
) {

123 
boﬁ
 
ªtvÆ
 = 
Ál£
;

124 
ôî©edIndex
;

125 
cou¡
;

127 
ôî©edIndex
 = 
	`NEWESTINDEX
(
deDupLi°
);

128 
cou¡
 = 
deDupLi°
->
íåõsCou¡
;

133 
cou¡
 > 0) {

134 
DeDupE¡ry
 * 
ôî©edE¡ry
 = &
deDupLi°
->
íåõs
[
ôî©edIndex
];

135 i‡(
ﬁ§_˙f
->
ù_vîsi⁄
 =
AF_INET
) {

136 i‡((
ôî©edE¡ry
->
£qno
 =
ﬁ§Mesßge
->
v4
.£qnoË&& (
	`memcmp
(

137 &
ôî©edE¡ry
->
‹igö©‹
.
v4
, &
ﬁ§Mesßge
->v4.originator,

138 (
ôî©edE¡ry
->
‹igö©‹
.
v4
))) == 0) {

139 
ªtvÆ
 = 
åue
;

143 i‡((
ôî©edE¡ry
->
£qno
 =
ﬁ§Mesßge
->
v6
.£qnoË&& (
	`memcmp
(

144 &
ôî©edE¡ry
->
‹igö©‹
.
v6
, &
ﬁ§Mesßge
->v6.originator,

145 (
ôî©edE¡ry
->
‹igö©‹
.
v6
)) == 0)) {

146 
ªtvÆ
 = 
åue
;

151 
ôî©edIndex
 = 
	`WRAPINDEX
(
deDupLi°
, iteratedIndex + 1);

152 
cou¡
--;

155  
ªtvÆ
;

156 
	}
}

	@lib/pud/src/dedup.h

1 #i‚de‡
_PUD_DEDUP_H_


2 
	#_PUD_DEDUP_H_


	)

7 
	~"ﬁ§_ty≥s.h
"

8 
	~"ﬁ§_¥Ÿocﬁ.h
"

11 
	~<°döt.h
>

12 
	~<°dboﬁ.h
>

15 
	s_DeDupE¡ry
 {

16 
uöt16_t
 
	m£qno
;

17 
ﬁ§_ù_addr
 
	m‹igö©‹
;

18 } 
	tDeDupE¡ry
;

26 
	s_DeDupLi°
 {

27 
	míåõsMaxCou¡
;

28 
DeDupE¡ry
 * 
	míåõs
;

30 
	míåõsCou¡
;

31 
	m√we°E¡ryIndex
;

32 } 
	tDeDupLi°
;

34 
boﬁ
 
öôDeDupLi°
(
DeDupLi°
 * 
deDupLi°
, 
maxE¡rõs
);

35 
de°royDeDupLi°
(
DeDupLi°
 * 
deDupLi°
);

37 
addToDeDup
(
DeDupLi°
 * 
deDupLi°
, 
ﬁ§_mesßge
 *
ﬁ§Mesßge
);

39 
boﬁ
 
isInDeDupLi°
(
DeDupLi°
 * 
deDupLi°
, 
ﬁ§_mesßge
 *
ﬁ§Mesßge
);

	@lib/pud/src/gpsConversion.c

1 
	~"gpsC⁄vîsi⁄.h
"

4 
	~"pud.h
"

5 
	~"c⁄figuøti⁄.h
"

6 
	~"compûî.h
"

9 
	~"ﬁ§.h
"

12 
	~<nmó/tok.h
>

13 
	~<nmó/gm©h.h
>

14 
	~<¨∑/öë.h
>

15 
	~<Ol§dPudWúeF‹m©/nodeIdC⁄vîsi⁄.h
>

35 
	$gpsFromOl§
(
ﬁ§_mesßge
 *
ﬁ§Mesßge
,

36 * 
txGpsBuf„r
, 
txGpsBuf„rSize
) {

37 
vÆidôyTime
;

39 
tm
 
timeSåu˘
;

40 
œtôudeSåög
[
PUD_TX_LATITUDE_DIGITS
 + 1];

41 c⁄° * 
œtôudeHemi•hîe
;

42 
l⁄gôudeSåög
[
PUD_TX_LONGITUDE_DIGITS
 + 1];

43 c⁄° * 
l⁄gôudeHemi•hîe
;

44 
ÆtôudeSåög
[
PUD_TX_ALTITUDE_DIGITS
 + 1];

45 
•ìdSåög
[
PUD_TX_SPEED_DIGITS
 + 1];

46 
åackSåög
[
PUD_TX_TRACK_DIGITS
 + 1];

47 
hd›Såög
[
PUD_TX_HDOP_DIGITS
 + 1];

48 
uöt8_t
 
smask
;

49 
uöt8_t
 
Êags
;

50 
g©eway
[2] = { '0', '\0' };

52 
nodeIdTy≥Såög
[
PUD_TX_NODEIDTYPE_DIGITS
 + 1];

53 
nodeIdSåög
[
PUD_TX_NODEID_BUFFERSIZE
 + 1];

54 c⁄° * 
nodeId
;

55 c⁄° * 
ùAddr
;

56 
‹igö©‹Buf„r
[64];

57 c⁄° * 
‹igö©‹
;

59 
å™smôSåögLígth
;

61 
PudOl§Posôi⁄Upd©e
 * 
ﬁ§GpsMesßge
 =

62 
	`gëOl§MesßgePaylﬂd
(
ﬁ§_˙f
->
ù_vîsi⁄
, 
ﬁ§Mesßge
);

64 i‡(
	`u∆ikñy
(
	`gëPosôi⁄Upd©eVîsi⁄
(
ﬁ§GpsMesßge
Ë!
PUD_WIRE_FORMAT_VERSION
)) {

66 
	`pudEº‹
(
Ál£
, "CanÇot handle version %u OLSR PUD messages"

68 
	`gëPosôi⁄Upd©eVîsi⁄
(
ﬁ§GpsMesßge
), 
PUD_WIRE_FORMAT_VERSION
);

72 
ùAddr
 = (
ﬁ§_˙f
->
ù_vîsi⁄
 =
AF_INET
) ?

73 (*Ë&
ﬁ§Mesßge
->
v4
.
‹igö©‹
 :

74 (*Ë&
ﬁ§Mesßge
->
v6
.
‹igö©‹
;

75 
‹igö©‹
 = 
	`öë_¡›
(
ﬁ§_˙f
->
ù_vîsi⁄
, 
ùAddr
, &
‹igö©‹Buf„r
[0],

76 (
‹igö©‹Buf„r
));

78 
vÆidôyTime
 = 
	`gëVÆidôyTime
(&
ﬁ§GpsMesßge
->validityTime);

80 
smask
 = 
	`gëPosôi⁄Upd©eSmask
(
ﬁ§GpsMesßge
);

82 
Êags
 = 
	`gëPosôi⁄Upd©eSmask
(
ﬁ§GpsMesßge
);

84 i‡(
Êags
 & 
PUD_FLAGS_GATEWAY
) {

85 
g©eway
[0] = '1';

89 
	`gëPosôi⁄Upd©eTime
(
ﬁ§GpsMesßge
, 
	`time
(
NULL
), &
timeSåu˘
);

91 i‡(
	`likñy
(
	`nmó_INFO_has_fõld
(
smask
, 
LAT
))) {

92 
ch¨s
;

93 
œtôude
 = 
	`gëPosôi⁄Upd©eL©ôude
(
ﬁ§GpsMesßge
);

95 i‡(
œtôude
 >= 0) {

96 
œtôudeHemi•hîe
 = "N";

98 
œtôudeHemi•hîe
 = "S";

99 
œtôude
 = -latitude;

101 
œtôude
 = 
	`nmó_degªe2ndeg
(latitude);

103 
ch¨s
 = 
	`¢¥ötf
(&
œtôudeSåög
[0], 
PUD_TX_LATITUDE_DIGITS
,

104 "%." 
PUD_TX_LATITUDE_DECIMALS
 "f", 
œtôude
);

105 i‡(
	`likñy
(
ch¨s
 < 
PUD_TX_LATITUDE_DIGITS
)) {

106 
œtôudeSåög
[
ch¨s
] = '\0';

108 
œtôudeSåög
[
PUD_TX_LATITUDE_DIGITS
] = '\0';

111 
œtôudeHemi•hîe
 = "";

112 
œtôudeSåög
[0] = '\0';

115 i‡(
	`likñy
(
	`nmó_INFO_has_fõld
(
smask
, 
LON
))) {

116 
ch¨s
;

117 
l⁄gôude
 = 
	`gëPosôi⁄Upd©eL⁄gôude
(
ﬁ§GpsMesßge
);

119 i‡(
l⁄gôude
 >= 0) {

120 
l⁄gôudeHemi•hîe
 = "E";

122 
l⁄gôudeHemi•hîe
 = "W";

123 
l⁄gôude
 = -longitude;

125 
l⁄gôude
 = 
	`nmó_degªe2ndeg
(longitude);

127 
ch¨s
 = 
	`¢¥ötf
(&
l⁄gôudeSåög
[0], 
PUD_TX_LONGITUDE_DIGITS
,

128 "%." 
PUD_TX_LONGITUDE_DECIMALS
 "f", 
l⁄gôude
);

129 i‡(
	`likñy
(
ch¨s
 < 
PUD_TX_LONGITUDE_DIGITS
)) {

130 
l⁄gôudeSåög
[
ch¨s
] = '\0';

132 
l⁄gôudeSåög
[
PUD_TX_LONGITUDE_DIGITS
] = '\0';

135 
l⁄gôudeHemi•hîe
 = "";

136 
l⁄gôudeSåög
[0] = '\0';

139 i‡(
	`likñy
(
	`nmó_INFO_has_fõld
(
smask
, 
ELV
))) {

140 
ch¨s
 = 
	`¢¥ötf
(&
ÆtôudeSåög
[0], 
PUD_TX_ALTITUDE_DIGITS
, "%ld",

141 
	`gëPosôi⁄Upd©eA…ôude
(
ﬁ§GpsMesßge
));

142 i‡(
	`likñy
(
ch¨s
 < 
PUD_TX_ALTITUDE_DIGITS
)) {

143 
ÆtôudeSåög
[
ch¨s
] = '\0';

145 
ÆtôudeSåög
[
PUD_TX_ALTITUDE_DIGITS
] = '\0';

148 
ÆtôudeSåög
[0] = '\0';

151 i‡(
	`likñy
(
	`nmó_INFO_has_fõld
(
smask
, 
SPEED
))) {

152 
ch¨s
 = 
	`¢¥ötf
(&
•ìdSåög
[0], 
PUD_TX_SPEED_DIGITS
, "%lu",

153 
	`gëPosôi⁄Upd©eS≥ed
(
ﬁ§GpsMesßge
));

154 i‡(
	`likñy
(
ch¨s
 < 
PUD_TX_SPEED_DIGITS
)) {

155 
•ìdSåög
[
ch¨s
] = '\0';

157 
•ìdSåög
[
PUD_TX_SPEED_DIGITS
] = '\0';

160 
•ìdSåög
[0] = '\0';

163 i‡(
	`likñy
(
	`nmó_INFO_has_fõld
(
smask
, 
DIRECTION
))) {

164 
ch¨s
 = 
	`¢¥ötf
(&
åackSåög
[0], 
PUD_TX_TRACK_DIGITS
, "%lu",

165 
	`gëPosôi⁄Upd©eTøck
(
ﬁ§GpsMesßge
));

166 i‡(
	`likñy
(
ch¨s
 < 
PUD_TX_TRACK_DIGITS
)) {

167 
åackSåög
[
ch¨s
] = '\0';

169 
åackSåög
[
PUD_TX_TRACK_DIGITS
] = '\0';

172 
åackSåög
[0] = '\0';

175 i‡(
	`likñy
(
	`nmó_INFO_has_fõld
(
smask
, 
HDOP
))) {

176 
ch¨s
 = 
	`¢¥ötf
(&
hd›Såög
[0], 
PUD_TX_HDOP_DIGITS
,

177 "%." 
PUD_TX_HDOP_DECIMALS
 "f", 
	`nmó_mëîs2d›
(
	`gëPosôi⁄Upd©eHd›
(

178 
ﬁ§GpsMesßge
)));

179 i‡(
	`likñy
(
ch¨s
 < 
PUD_TX_HDOP_DIGITS
)) {

180 
hd›Såög
[
ch¨s
] = '\0';

182 
hd›Såög
[
PUD_TX_HDOP_DIGITS
] = '\0';

185 
hd›Såög
[0] = '\0';

188 
	`gëNodeTy≥SåögFromOl§
(
ﬁ§_˙f
->
ù_vîsi⁄
, 
ﬁ§GpsMesßge
,

189 &
nodeIdTy≥Såög
[0], (nodeIdTypeString));

190 
	`gëNodeIdSåögFromOl§
(
ﬁ§_˙f
->
ù_vîsi⁄
, 
ﬁ§Mesßge
, &
nodeId
,

191 &
nodeIdSåög
[0], (nodeIdString));

193 
å™smôSåögLígth
 = 
	`nmó_¥ötf
((*Ë
txGpsBuf„r
, 
txGpsBuf„rSize


208 , 
	`gëTxNmóMesßgePªfix
(), 
PUD_TX_SENTENCE_VERSION
, &
g©eway
[0],

209 
‹igö©‹
 , &
nodeIdTy≥Såög
[0],

210 
nodeId
, 
timeSåu˘
.
tm_mday
,ÅimeSåu˘.
tm_m⁄
 + 1, (timeSåu˘.
tm_yór


211 % 100), 
timeSåu˘
.
tm_hour
,ÅimeSåu˘.
tm_mö
,

212 
timeSåu˘
.
tm_£c
, 
vÆidôyTime
, &
œtôudeSåög
[0],

213 
œtôudeHemi•hîe
, &
l⁄gôudeSåög
[0], 
l⁄gôudeHemi•hîe
,

214 &
ÆtôudeSåög
[0], &
•ìdSåög
[0], &
åackSåög
[0],

215 &
hd›Såög
[0]);

217 i‡(
	`u∆ikñy
(
å™smôSåögLígth
 > (
txGpsBuf„rSize
 - 1))) {

218 
	`pudEº‹
(
Ál£
, "StringÅoÅransmit onÇon-OLSR isÅooÜarge,Çeed"

219 "áàÀa° %u byãs, skù≥d", 
å™smôSåögLígth
);

223 i‡(
	`u∆ikñy
(
å™smôSåögLígth
 =(
txGpsBuf„rSize
 - 1))) {

224 
txGpsBuf„r
[
txGpsBuf„rSize
 - 1] = '\0';

226 
txGpsBuf„r
[
å™smôSåögLígth
] = '\0';

229  
å™smôSåögLígth
;

230 
	}
}

252 
	$gpsToOl§
(
nmóINFO
 *
nmóInfo
, 
ﬁ§_mesßge
 *
ﬁ§Mesßge
,

253 
ﬁ§MesßgeSize
, 
vÆidôyTime
) {

254 
Æig√d_size
;

255 
Æig√d_size_ªmaödî
;

256 
size_t
 
nodeLígth
;

257 
nodeIdBö¨yTy≥
 * 
nodeIdBö¨y
 = 
NULL
;

259 
PudOl§Posôi⁄Upd©e
 * 
ﬁ§GpsMesßge
 =

260 
	`gëOl§MesßgePaylﬂd
(
ﬁ§_˙f
->
ù_vîsi⁄
, 
ﬁ§Mesßge
);

265 
	`mem£t
(
ﬁ§GpsMesßge
, 0,  (
PudOl§Posôi⁄Upd©e
));

267 
	`£tPosôi⁄Upd©eVîsi⁄
(
ﬁ§GpsMesßge
, 
PUD_WIRE_FORMAT_VERSION
);

268 
	`£tVÆidôyTime
(&
ﬁ§GpsMesßge
->
vÆidôyTime
, validityTime);

269 
	`£tPosôi⁄Upd©eSmask
(
ﬁ§GpsMesßge
, 
nmóInfo
->
smask
);

270 
	`£tPosôi⁄Upd©eFœgs
(
ﬁ§GpsMesßge
,

271 
	`gëPosôi⁄Upd©eFœgs
(
ﬁ§GpsMesßge
Ë& ~
PUD_FLAGS_GATEWAY
);

274 
	`£tPosôi⁄Upd©eTime
(
ﬁ§GpsMesßge
, 
nmóInfo
->
utc
.
hour
,ÇmóInfo->utc.
mö
,

275 
nmóInfo
->
utc
.
£c
);

277 i‡(
	`likñy
(
	`nmó_INFO_has_fõld
(
nmóInfo
->
smask
, 
LAT
))) {

278 
	`£tPosôi⁄Upd©eL©ôude
(
ﬁ§GpsMesßge
, 
nmóInfo
->
œt
);

280 
	`£tPosôi⁄Upd©eL©ôude
(
ﬁ§GpsMesßge
, 0.0);

283 i‡(
	`likñy
(
	`nmó_INFO_has_fõld
(
nmóInfo
->
smask
, 
LON
))) {

284 
	`£tPosôi⁄Upd©eL⁄gôude
(
ﬁ§GpsMesßge
, 
nmóInfo
->
l⁄
);

286 
	`£tPosôi⁄Upd©eL⁄gôude
(
ﬁ§GpsMesßge
, 0.0);

289 i‡(
	`likñy
(
	`nmó_INFO_has_fõld
(
nmóInfo
->
smask
, 
ELV
))) {

290 
	`£tPosôi⁄Upd©eA…ôude
(
ﬁ§GpsMesßge
, 
nmóInfo
->
ñv
);

292 
	`£tPosôi⁄Upd©eA…ôude
(
ﬁ§GpsMesßge
, 0.0);

295 i‡(
	`likñy
(
	`nmó_INFO_has_fõld
(
nmóInfo
->
smask
, 
SPEED
))) {

296 
	`£tPosôi⁄Upd©eS≥ed
(
ﬁ§GpsMesßge
, 
nmóInfo
->
•ìd
);

298 
	`£tPosôi⁄Upd©eS≥ed
(
ﬁ§GpsMesßge
, 0.0);

301 i‡(
	`likñy
(
	`nmó_INFO_has_fõld
(
nmóInfo
->
smask
, 
DIRECTION
))) {

302 
	`£tPosôi⁄Upd©eTøck
(
ﬁ§GpsMesßge
, 
nmóInfo
->
dúe˘i⁄
);

304 
	`£tPosôi⁄Upd©eTøck
(
ﬁ§GpsMesßge
, 0);

307 i‡(
	`likñy
(
	`nmó_INFO_has_fõld
(
nmóInfo
->
smask
, 
HDOP
))) {

308 
	`£tPosôi⁄Upd©eHd›
(
ﬁ§GpsMesßge
, 
nmóInfo
->
HDOP
);

310 
	`£tPosôi⁄Upd©eHd›
(
ﬁ§GpsMesßge
, 
PUD_HDOP_MAX
);

313 
nodeIdBö¨y
 = 
	`gëNodeIdBö¨y
();

314 
nodeLígth
 = 
	`£tPosôi⁄Upd©eNodeInfo
(
ﬁ§_˙f
->
ù_vîsi⁄
, 
ﬁ§GpsMesßge
,

315 
ﬁ§MesßgeSize
, 
	`gëNodeIdTy≥Numbî
(),

316 (*Ë&
nodeIdBö¨y
->
buf„r
,ÇodeIdBö¨y->
Àngth
);

323 
Æig√d_size
 = 
PUD_OLSRWIREFORMATSIZE
 + 
nodeLígth
;

324 
Æig√d_size_ªmaödî
 = (
Æig√d_size
 % 4);

325 i‡(
Æig√d_size_ªmaödî
 != 0) {

326 
Æig√d_size
 +(4 - 
Æig√d_size_ªmaödî
);

334 i‡(
ﬁ§_˙f
->
ù_vîsi⁄
 =
AF_INET
) {

337 
ﬁ§Mesßge
->
v4
.
ﬁ§_msgty≥
 = 
PUD_OLSR_MSG_TYPE
;

338 
ﬁ§Mesßge
->
v4
.
ﬁ§_vtime
 = 
	`ª…ime_to_me
(
vÆidôyTime
 * 1000);

340 
ﬁ§Mesßge
->
v4
.
‹igö©‹
 = 
ﬁ§_˙f
->
maö_addr
.v4.
s_addr
;

341 
ﬁ§Mesßge
->
v4
.
âl
 = 
	`gëOl§Té
();

342 
ﬁ§Mesßge
->
v4
.
h›˙t
 = 0;

343 
ﬁ§Mesßge
->
v4
.
£qno
 = 
	`ht⁄s
(
	`gë_msg_£qno
());

346 
Æig√d_size
 +((
ﬁ§Mesßge
->
v4
)

347 - (
ﬁ§Mesßge
->
v4
.
mesßge
));

348 
ﬁ§Mesßge
->
v4
.
ﬁ§_msgsize
 = 
	`ht⁄s
(
Æig√d_size
);

352 
ﬁ§Mesßge
->
v6
.
ﬁ§_msgty≥
 = 
PUD_OLSR_MSG_TYPE
;

353 
ﬁ§Mesßge
->
v6
.
ﬁ§_vtime
 = 
	`ª…ime_to_me
(
vÆidôyTime
 * 1000);

355 
ﬁ§Mesßge
->
v6
.
‹igö©‹
 = 
ﬁ§_˙f
->
maö_addr
.v6;

356 
ﬁ§Mesßge
->
v6
.
âl
 = 
	`gëOl§Té
();

357 
ﬁ§Mesßge
->
v6
.
h›˙t
 = 0;

358 
ﬁ§Mesßge
->
v6
.
£qno
 = 
	`ht⁄s
(
	`gë_msg_£qno
());

361 
Æig√d_size
 +((
ﬁ§Mesßge
->
v6
)

362 - (
ﬁ§Mesßge
->
v6
.
mesßge
));

363 
ﬁ§Mesßge
->
v6
.
ﬁ§_msgsize
 = 
	`ht⁄s
(
Æig√d_size
);

367 i‡(
Æig√d_size_ªmaödî
 != 0) {

368 
	`mem£t
(&(((*Ë&
ﬁ§GpsMesßge
->
nodeInfo
.
nodeIdTy≥
)[
nodeLígth
]),

369 0, (4 - 
Æig√d_size_ªmaödî
));

372  
Æig√d_size
;

373 
	}
}

	@lib/pud/src/gpsConversion.h

1 #i‚de‡
_PUD_GPSCONVERSION_H_


2 
	#_PUD_GPSCONVERSION_H_


	)

7 
	~"ﬁ§_¥Ÿocﬁ.h
"

10 
	~<nmó/öfo.h
>

17 
	#PUD_TX_SENTENCE_VERSION
 1

	)

20 
	#PUD_OLSR_MSG_TYPE
 171

	)

26 
gpsToOl§
(
nmóINFO
 *
nmóInfo
, 
ﬁ§_mesßge
 *
ﬁ§Mesßge
,

27 
ﬁ§MesßgeSize
, 
vÆidôyTime
);

29 
gpsFromOl§
(
ﬁ§_mesßge
 *
ﬁ§Mesßge
,

30 * 
txGpsBuf„r
, 
txGpsBuf„rSize
);

	@lib/pud/src/netTools.c

1 
	~"√tToﬁs.h
"

4 
	~"pud.h
"

9 
	~<as£π.h
>

10 
	~<sys/io˘l.h
>

11 
	~<uni°d.h
>

25 
boﬁ
 
	$isMu…iˇ°
(
addªssFamûy
, 
ﬁ§_sockaddr
 *
addr
) {

26 
	`as£π
(
addr
 !
NULL
);

27 
	`as£π
((
addªssFamûy
 =
AF_INET
Ë|| (addªssFamûy =
AF_INET6
));

29 i‡(
addªssFamûy
 =
AF_INET
) {

30  
	`IN_MULTICAST
(
	`¡ohl
(
addr
->
ö4
.
sö_addr
.
s_addr
));

33  
	`IN6_IS_ADDR_MULTICAST
(&
addr
->
ö6
.
sö6_addr
);

34 
	}
}

50 * 
	$gëH¨dw¨eAddªss
(c⁄° * 
ifName
, 
Ámûy
,

51 
i‰eq
 *
i‰
) {

52 
fd
;

53 
˝ySize
;

55 
	`as£π
(
ifName
 !
NULL
);

56 
	`as£π
(
	`°æí
(
ifName
Ë<
IFNAMSIZ
);

57 
	`as£π
((
Ámûy
 =
AF_INET
Ë|| (Ámûy =
AF_INET6
));

58 
	`as£π
(
i‰
 !
NULL
);

60 
fd
 = 
	`sockë
(
Ámûy
, 
SOCK_DGRAM
, 0);

62 
i‰
->
i‰_addr
.
ß_Ámûy
 = 
Ámûy
;

63 
	`mem£t
(
i‰
->
i‰_«me
, 0, (ifr->ifr_name));

64 
˝ySize
 = (
	`°æí
(
ifName
Ë< (
i‰
->
i‰_«me
)) ? strlen(ifName)

65 : (
i‰
->
i‰_«me
);

66 
	`°∫˝y
(
i‰
->
i‰_«me
, 
ifName
, 
˝ySize
);

68 
î∫o
 = 0;

69 i‡(
	`io˘l
(
fd
, 
SIOCGIFHWADDR
, 
i‰
) < 0) {

70 
	`pudEº‹
(
åue
, "%s@%u: io˘l(SIOCGIFHWADDRËîr‹", 
__FILE__
, 
__LINE__
);

71 
	`˛o£
(
fd
);

72  
NULL
;

75 
	`˛o£
(
fd
);

77  (*Ë&
i‰
->
i‰_hwaddr
.
ß_d©a
[0];

78 
	}
}

	@lib/pud/src/netTools.h

1 #i‚de‡
_PUD_NETTOOLS_H_


2 
	#_PUD_NETTOOLS_H_


	)

7 
	~"ﬁ§_ty≥s.h
"

10 
	~<°dboﬁ.h
>

11 
	~<√t/if.h
>

13 
boﬁ
 
isMu…iˇ°
(
addªssFamûy
, 
ﬁ§_sockaddr
 *
addr
);

15 * 
gëH¨dw¨eAddªss
(c⁄° * 
ifName
, 
Ámûy
,

16 
i‰eq
 *
i‰
);

	@lib/pud/src/networkInterfaces.c

1 
	~"√tw‹kI¡îÁ˚s.h
"

4 
	~"pud.h
"

5 
	~"c⁄figuøti⁄.h
"

6 
	~"√tToﬁs.h
"

9 
	~"ﬁ§.h
"

12 
	~<uni°d.h
>

13 
	~<f˙é.h
>

14 
	~<iÁddrs.h
>

21 
	gmac
[
PUD_NODEIDTYPE_MAC_BYTES
] = { 0 };

24 
boﬁ
 
	gmacSë
 = 
Ál£
;

30 * 
	$gëMaöIpMacAddªss
() {

31 i‡(!
macSë
) {

32 
i‰eq
 
i‰
;

33 * 
macInI‰
;

35 
öãrÁ˚
 *
maöI¡îÁ˚
 = 
	`if_ifwôhaddr
(&
ﬁ§_˙f
->
maö_addr
);

36 i‡(!
maöI¡îÁ˚
) {

37 
	`pudEº‹
(
åue
, "CouldÇot getÅhe main interface");

38  
NULL
;

40 
macInI‰
 = 
	`gëH¨dw¨eAddªss
(
maöI¡îÁ˚
->
öt_«me
,
ﬁ§_˙f
->
ù_vîsi⁄
,&
i‰
);

41 i‡(!
macInI‰
) {

42 
	`pudEº‹
(
åue
, "CouldÇot getÅhe MACáddress ofÅhe main interface");

43  
NULL
;

45 
	`mem˝y
(&
mac
[0], &
macInI‰
[0], 
PUD_NODEIDTYPE_MAC_BYTES
);

46 
macSë
 = 
åue
;

49  &
mac
[0];

50 
	}
}

57 
TRxTxNëw‹kI¡îÁ˚
 *
	grxNëw‹kI¡îÁ˚sLi°Hód
 = 
NULL
;

60 
TRxTxNëw‹kI¡îÁ˚
 *
	gœ°RxNëw‹kI¡îÁ˚
 = 
NULL
;

66 
TRxTxNëw‹kI¡îÁ˚
 *
	$gëRxNëw‹kI¡îÁ˚s
() {

67  
rxNëw‹kI¡îÁ˚sLi°Hód
;

68 
	}
}

83 
	$¸óãRxSockë
(
TRxTxNëw‹kI¡îÁ˚
 * 
√tw‹kI¡îÁ˚
,

84 
sockë_h™dÀr_func
 
rxSockëH™dÀrFun˘i⁄
) {

85 
ùFamûySëtög
;

86 
ùPrŸoSëtög
;

87 
ùMcLo›Sëtög
;

88 
ùAddMembîshùSëtög
;

89 
sockëReu£FœgVÆue
 = 1;

90 
mcLo›VÆue
 = 1;

91 
ﬁ§_sockaddr
 
addªss
;

92 
rxSockë
 = -1;

94 
	`as£π
(
√tw‹kI¡îÁ˚
 !
NULL
);

95 
	`as£π
(
rxSockëH™dÀrFun˘i⁄
 !
NULL
);

96 
	`as£π
(
	`°∫cmp
((*Ë&
√tw‹kI¡îÁ˚
->
«me
[0], "",

97 (
√tw‹kI¡îÁ˚
->
«me
)) != 0);

99 
	`mem£t
(&
addªss
, 0, (address));

100 i‡(
ﬁ§_˙f
->
ù_vîsi⁄
 =
AF_INET
) {

101 
	`as£π
(
√tw‹kI¡îÁ˚
->
ùAddªss
.
ö4
.
sö_addr
.
s_addr
 !
INADDR_ANY
);

103 
ùFamûySëtög
 = 
AF_INET
;

104 
ùPrŸoSëtög
 = 
IPPROTO_IP
;

105 
ùMcLo›Sëtög
 = 
IP_MULTICAST_LOOP
;

106 
ùAddMembîshùSëtög
 = 
IP_ADD_MEMBERSHIP
;

108 
addªss
.
ö4
.
sö_Ámûy
 = 
ùFamûySëtög
;

109 
addªss
.
ö4
.
sö_addr
.
s_addr
 = 
INADDR_ANY
;

110 
addªss
.
ö4
.
sö_p‹t
 = 
	`gëRxMcP‹t
();

112 
	`as£π
(
√tw‹kI¡îÁ˚
->
ùAddªss
.
ö6
.
sö6_addr
.
s6_addr
 !
ö6addr_™y
.s6_addr);

114 
ùFamûySëtög
 = 
AF_INET6
;

115 
ùPrŸoSëtög
 = 
IPPROTO_IPV6
;

116 
ùMcLo›Sëtög
 = 
IPV6_MULTICAST_LOOP
;

117 
ùAddMembîshùSëtög
 = 
IPV6_ADD_MEMBERSHIP
;

119 
addªss
.
ö6
.
sö6_Ámûy
 = 
ùFamûySëtög
;

120 
addªss
.
ö6
.
sö6_addr
 = 
ö6addr_™y
;

121 
addªss
.
ö6
.
sö6_p‹t
 = 
	`gëRxMcP‹t
();

125 
î∫o
 = 0;

126 
rxSockë
 = 
	`sockë
(
ùFamûySëtög
, 
SOCK_DGRAM
, 0);

127 i‡(
rxSockë
 < 0) {

128 
	`pudEº‹
(
åue
, "CouldÇot createáÑeceive socket for interface %s",

129 
√tw‹kI¡îÁ˚
->
«me
);

130 
baû
;

135 
î∫o
 = 0;

136 i‡(
	`£tsock›t
(
rxSockë
, 
SOL_SOCKET
, 
SO_REUSEADDR
, &
sockëReu£FœgVÆue
,

137 (
sockëReu£FœgVÆue
)) < 0) {

138 
	`pudEº‹
(
åue
, "CouldÇot setÅheÑeuse flag onÅheÑeceive socket for"

139 " i¡îÁ˚ %s", 
√tw‹kI¡îÁ˚
->
«me
);

140 
baû
;

145 
î∫o
 = 0;

146 i‡(
	`böd
(
rxSockë
, (
sockaddr
 *Ë&
addªss
, (address)) < 0) {

147 
	`pudEº‹
(
åue
, "CouldÇot bindÅheÑeceive socket for interface"

148 " %†tÿp‹à%u", 
√tw‹kI¡îÁ˚
->
«me
, 
	`¡ohs
(
	`gëRxMcP‹t
()));

149 
baû
;

153 
î∫o
 = 0;

154 i‡(
	`£tsock›t
(
rxSockë
, 
ùPrŸoSëtög
, 
ùMcLo›Sëtög
, &
mcLo›VÆue
,

155 (
mcLo›VÆue
)) < 0) {

156 
	`pudEº‹
(
åue
, "CouldÇot %s multicastÜoopback onÅhe"

157 "Ñe˚ivêsockë f‹ i¡îÁ˚ %s", 
mcLo›VÆue
 ? "enable"

158 : "dißbÀ", 
√tw‹kI¡îÁ˚
->
«me
);

159 
baû
;

165 i‡(
ùFamûySëtög
 =
AF_INET
) {

166 
ù_mªq
 
mc_£âögs
;

167 (Ë
	`mem£t
(&
mc_£âögs
, 0, (mc_settings));

168 
mc_£âögs
.
imr_mu…üddr
 = 
	`gëRxMcAddr
()->
ö4
.
sö_addr
;

169 
mc_£âögs
.
imr_öãrÁ˚
 = 
√tw‹kI¡îÁ˚
->
ùAddªss
.
ö4
.
sö_addr
;

170 
î∫o
 = 0;

171 i‡(
	`£tsock›t
(
rxSockë
, 
ùPrŸoSëtög
, 
ùAddMembîshùSëtög
,

172 &
mc_£âögs
, (mc_settings)) < 0) {

173 
	`pudEº‹
(
åue
, "CouldÇot subscribe interface %sÅoÅhe configured"

174 " mu…iˇ° group", 
√tw‹kI¡îÁ˚
->
«me
);

175 
baû
;

178 
ùv6_mªq
 
mc6_£âögs
;

179 (Ë
	`mem£t
(&
mc6_£âögs
, 0, (mc6_settings));

180 
mc6_£âögs
.
ùv6mr_mu…üddr
 = 
	`gëRxMcAddr
()->
ö6
.
sö6_addr
;

181 
mc6_£âögs
.
ùv6mr_öãrÁ˚
 = 0;

182 
î∫o
 = 0;

183 i‡(
	`£tsock›t
(
rxSockë
, 
ùPrŸoSëtög
, 
ùAddMembîshùSëtög
,

184 &
mc6_£âögs
, (mc6_settings)) < 0) {

185 
	`pudEº‹
(
åue
, "CouldÇot subscribe interface %sÅoÅhe configured"

186 " mu…iˇ° group", 
√tw‹kI¡îÁ˚
->
«me
);

187 
baû
;

191 
	`add_ﬁ§_sockë
(
rxSockë
, 
rxSockëH™dÀrFun˘i⁄
, 
NULL
, 
√tw‹kI¡îÁ˚
,

192 
SP_PR_READ
);

194  
rxSockë
;

196 
baû
: i‡(
rxSockë
 >= 0) {

197 
	`˛o£
(
rxSockë
);

201 
	}
}

218 
boﬁ
 
	$¸óãRxI¡îÁ˚
(c⁄° * 
ifName
, 
ﬁ§_sockaddr
 
ùAddr
,

219 
sockë_h™dÀr_func
 
rxSockëH™dÀrFun˘i⁄
) {

220 
sockëFd
 = -1;

221 
TRxTxNëw‹kI¡îÁ˚
 * 
√tw‹kI¡îÁ˚
 = 
NULL
;

223 i‡(
ifName
 =
NULL
) {

224 
baû
;

227 
√tw‹kI¡îÁ˚
 = 
	`ﬁ§_mÆloc
((
TRxTxNëw‹kI¡îÁ˚
),

229 i‡(
√tw‹kI¡îÁ˚
 =
NULL
) {

230 
baû
;

233 
	`mem˝y
(
√tw‹kI¡îÁ˚
->
«me
, 
ifName
, (networkInterface->name));

234 
√tw‹kI¡îÁ˚
->
«me
[
IFNAMSIZ
] = '\0';

235 
√tw‹kI¡îÁ˚
->
ùAddªss
 = 
ùAddr
;

236 
√tw‹kI¡îÁ˚
->
h™dÀr
 = 
NULL
;

237 
√tw‹kI¡îÁ˚
->
√xt
 = 
NULL
;

240 
sockëFd
 = 
	`¸óãRxSockë
(
√tw‹kI¡îÁ˚
, 
rxSockëH™dÀrFun˘i⁄
);

241 i‡(
sockëFd
 < 0) {

242 
baû
;

244 
√tw‹kI¡îÁ˚
->
sockëFd
 = socketFd;

245 
√tw‹kI¡îÁ˚
->
h™dÀr
 = 
rxSockëH™dÀrFun˘i⁄
;

248 i‡(
rxNëw‹kI¡îÁ˚sLi°Hód
 =
NULL
) {

249 
rxNëw‹kI¡îÁ˚sLi°Hód
 = 
√tw‹kI¡îÁ˚
;

250 
œ°RxNëw‹kI¡îÁ˚
 = 
√tw‹kI¡îÁ˚
;

252 
œ°RxNëw‹kI¡îÁ˚
->
√xt
 = 
√tw‹kI¡îÁ˚
;

253 
œ°RxNëw‹kI¡îÁ˚
 = 
√tw‹kI¡îÁ˚
;

256  
åue
;

258 
baû
: i‡(
√tw‹kI¡îÁ˚
 !
NULL
) {

259 
	`‰ì
(
√tw‹kI¡îÁ˚
);

261  
Ál£
;

263 
	}
}

270 
TRxTxNëw‹kI¡îÁ˚
 *
	gtxNëw‹kI¡îÁ˚sLi°Hód
 = 
NULL
;

273 
TRxTxNëw‹kI¡îÁ˚
 *
	gœ°TxNëw‹kI¡îÁ˚
 = 
NULL
;

279 
TRxTxNëw‹kI¡îÁ˚
 *
	$gëTxNëw‹kI¡îÁ˚s
() {

280  
txNëw‹kI¡îÁ˚sLi°Hód
;

281 
	}
}

294 
	$¸óãTxSockë
(
TRxTxNëw‹kI¡îÁ˚
 * 
√tw‹kI¡îÁ˚
) {

295 
ùFamûySëtög
;

296 
ùPrŸoSëtög
;

297 
ùMcLo›Sëtög
;

298 
ùMcIfSëtög
;

299 
mcLo›VÆue
 = 0;

300 
txTé
 = 
	`gëTxTé
();

301 
ﬁ§_sockaddr
 
addªss
;

302 
txSockë
 = -1;

304 
	`as£π
(
√tw‹kI¡îÁ˚
 !
NULL
);

305 
	`as£π
(
	`°∫cmp
((*Ë&
√tw‹kI¡îÁ˚
->
«me
[0], "",

306 (
√tw‹kI¡îÁ˚
->
«me
)) != 0);

308 
	`mem£t
(&
addªss
, 0, (address));

309 i‡(
ﬁ§_˙f
->
ù_vîsi⁄
 =
AF_INET
) {

310 
	`as£π
(
√tw‹kI¡îÁ˚
->
ùAddªss
.
ö4
.
sö_addr
.
s_addr
 !
INADDR_ANY
);

312 
ùFamûySëtög
 = 
AF_INET
;

313 
ùPrŸoSëtög
 = 
IPPROTO_IP
;

314 
ùMcLo›Sëtög
 = 
IP_MULTICAST_LOOP
;

315 
ùMcIfSëtög
 = 
IP_MULTICAST_IF
;

317 
addªss
.
ö4
.
sö_Ámûy
 = 
ùFamûySëtög
;

318 
addªss
.
ö4
.
sö_addr
 = 
√tw‹kI¡îÁ˚
->
ùAddªss
.in4.sin_addr;

319 
addªss
.
ö4
.
sö_p‹t
 = 
	`gëTxMcP‹t
();

321 
	`as£π
(
√tw‹kI¡îÁ˚
->
ùAddªss
.
ö6
.
sö6_addr
.
s6_addr
 !
ö6addr_™y
.s6_addr);

323 
ùFamûySëtög
 = 
AF_INET6
;

324 
ùPrŸoSëtög
 = 
IPPROTO_IPV6
;

325 
ùMcLo›Sëtög
 = 
IPV6_MULTICAST_LOOP
;

326 
ùMcIfSëtög
 = 
IPV6_MULTICAST_IF
;

328 
addªss
.
ö6
.
sö6_Ámûy
 = 
ùFamûySëtög
;

329 
addªss
.
ö6
.
sö6_addr
 = 
√tw‹kI¡îÁ˚
->
ùAddªss
.in6.sin6_addr;

330 
addªss
.
ö6
.
sö6_p‹t
 = 
	`gëTxMcP‹t
();

334 
î∫o
 = 0;

335 
txSockë
 = 
	`sockë
(
ùFamûySëtög
, 
SOCK_DGRAM
, 0);

336 i‡(
txSockë
 < 0) {

337 
	`pudEº‹
(
åue
, "CouldÇot createáÅransmit socket for interface %s",

338 
√tw‹kI¡îÁ˚
->
«me
);

339 
baû
;

343 
î∫o
 = 0;

344 i‡(
	`£tsock›t
(
txSockë
, 
ùPrŸoSëtög
, 
ùMcIfSëtög
, &
addªss
,

345 (
addªss
)) < 0) {

346 
	`pudEº‹
(
åue
, "CouldÇot setÅhe multicast interface onÅhe"

347 "Åønsmô sockëÅÿöãrÁ˚ %s", 
√tw‹kI¡îÁ˚
->
«me
);

348 
baû
;

352 
î∫o
 = 0;

353 i‡(
	`£tsock›t
(
txSockë
, 
ùPrŸoSëtög
, 
ùMcLo›Sëtög
, &
mcLo›VÆue
,

354 (
mcLo›VÆue
)) < 0) {

355 
	`pudEº‹
(
åue
, "CouldÇot %s multicastÜoopback onÅhe"

356 "Åønsmô sockë f‹ i¡îÁ˚ %s", 
mcLo›VÆue
 ? "enable"

357 : "dißbÀ", 
√tw‹kI¡îÁ˚
->
«me
);

358 
baû
;

362 
î∫o
 = 0;

363 i‡(
	`£tsock›t
(
txSockë
, 
ùPrŸoSëtög
, 
IP_MULTICAST_TTL
, &
txTé
,

364 (
txTé
)) < 0) {

365 
	`pudEº‹
(
åue
, "CouldÇot set TTL onÅheÅransmit socket"

366 " f‹ i¡îÁ˚ %s", 
√tw‹kI¡îÁ˚
->
«me
);

367 
baû
;

371 
î∫o
 = 0;

372 i‡(
	`f˙é
(
txSockë
, 
F_SETFL
, 
O_NDELAY
) < 0) {

373 
	`pudEº‹
(
åue
, "CouldÇot setÅheÇo delay option onÅhe"

374 "Åønsmô sockë f‹ i¡îÁ˚ %s", 
√tw‹kI¡îÁ˚
->
«me
);

375 
baû
;

378  
txSockë
;

380 
baû
: i‡(
txSockë
 >= 0) {

381 
	`˛o£
(
txSockë
);

384 
	}
}

399 
boﬁ
 
	$¸óãTxI¡îÁ˚
(c⁄° * 
ifName
, 
ﬁ§_sockaddr
 
ùAddr
) {

400 
sockëFd
 = -1;

401 
TRxTxNëw‹kI¡îÁ˚
 * 
√tw‹kI¡îÁ˚
 = 
NULL
;

403 i‡(
ifName
 =
NULL
) {

404 
baû
;

407 
√tw‹kI¡îÁ˚
 = 
	`ﬁ§_mÆloc
((
TRxTxNëw‹kI¡îÁ˚
),

409 i‡(
√tw‹kI¡îÁ˚
 =
NULL
) {

410 
baû
;

413 
	`mem˝y
(
√tw‹kI¡îÁ˚
->
«me
, 
ifName
, (networkInterface->name));

414 
√tw‹kI¡îÁ˚
->
«me
[
IFNAMSIZ
] = '\0';

415 
√tw‹kI¡îÁ˚
->
ùAddªss
 = 
ùAddr
;

416 
√tw‹kI¡îÁ˚
->
h™dÀr
 = 
NULL
;

417 
√tw‹kI¡îÁ˚
->
√xt
 = 
NULL
;

420 
sockëFd
 = 
	`¸óãTxSockë
(
√tw‹kI¡îÁ˚
);

421 i‡(
sockëFd
 < 0) {

422 
baû
;

424 
√tw‹kI¡îÁ˚
->
sockëFd
 = socketFd;

427 i‡(
txNëw‹kI¡îÁ˚sLi°Hód
 =
NULL
) {

428 
txNëw‹kI¡îÁ˚sLi°Hód
 = 
√tw‹kI¡îÁ˚
;

429 
œ°TxNëw‹kI¡îÁ˚
 = 
√tw‹kI¡îÁ˚
;

431 
œ°TxNëw‹kI¡îÁ˚
->
√xt
 = 
√tw‹kI¡îÁ˚
;

432 
œ°TxNëw‹kI¡îÁ˚
 = 
√tw‹kI¡îÁ˚
;

435  
åue
;

437 
baû
: i‡(
√tw‹kI¡îÁ˚
 !
NULL
) {

438 
	`‰ì
(
√tw‹kI¡îÁ˚
);

440  
Ál£
;

441 
	}
}

448 
	gdow∆ökSockëFd
 = -1;

451 
sockë_h™dÀr_func
 
	gdow∆ökH™dÀr
 = 
NULL
;

458 
	$gëDow∆ökSockëFd
() {

459  
dow∆ökSockëFd
;

460 
	}
}

469 
	$¸óãDow∆ökSockë
(
sockë_h™dÀr_func
 
rxSockëH™dÀrFun˘i⁄
) {

470 
dow∆ökSockë
 = -1;

471 
sockëReu£FœgVÆue
 = 1;

472 
ﬁ§_sockaddr
 
addªss
;

474 
	`mem£t
(&
addªss
, 0, (address));

475 i‡(
ﬁ§_˙f
->
ù_vîsi⁄
 =
AF_INET
) {

476 
addªss
.
ö4
.
sö_Ámûy
 = 
AF_INET
;

477 
addªss
.
ö4
.
sö_addr
.
s_addr
 = 
INADDR_ANY
;

478 
addªss
.
ö4
.
sö_p‹t
 = 
	`gëDow∆ökP‹t
();

480 
addªss
.
ö6
.
sö6_Ámûy
 = 
AF_INET6
;

481 
addªss
.
ö6
.
sö6_addr
 = 
ö6addr_™y
;

482 
addªss
.
ö6
.
sö6_p‹t
 = 
	`gëDow∆ökP‹t
();

486 
î∫o
 = 0;

487 
dow∆ökSockë
 = 
	`sockë
(
ﬁ§_˙f
->
ù_vîsi⁄
, 
SOCK_DGRAM
, 0);

488 i‡(
dow∆ökSockë
 < 0) {

489 
	`pudEº‹
(
åue
, "CouldÇot createÅhe downlink socket");

490 
baû
;

495 
î∫o
 = 0;

496 i‡(
	`£tsock›t
(
dow∆ökSockë
, 
SOL_SOCKET
, 
SO_REUSEADDR
, &
sockëReu£FœgVÆue
,

497 (
sockëReu£FœgVÆue
)) < 0) {

498 
	`pudEº‹
(
åue
, "CouldÇot set REUSE option onÅhe downlink socket");

499 
baû
;

504 
î∫o
 = 0;

505 i‡(
	`böd
(
dow∆ökSockë
, (
sockaddr
 *Ë&
addªss
, (address))) {

506 
	`pudEº‹
(
åue
, "CouldÇot bind downlink socketÅoÖort %d",

507 
	`gëDow∆ökP‹t
());

508 
baû
;

511 
	`add_ﬁ§_sockë
(
dow∆ökSockë
, 
rxSockëH™dÀrFun˘i⁄
, 
NULL
, NULL,

512 
SP_PR_READ
);

514 
dow∆ökH™dÀr
 = 
rxSockëH™dÀrFun˘i⁄
;

516  
dow∆ökSockë
;

518 
baû
: i‡(
dow∆ökSockë
 >= 0) {

519 
	`˛o£
(
dow∆ökSockë
);

522 
	}
}

529 
TOLSRNëw‹kI¡îÁ˚
 *
	gﬁ§Nëw‹kI¡îÁ˚sLi°Hód
 = 
NULL
;

532 
TOLSRNëw‹kI¡îÁ˚
 *
	gœ°Ol§Nëw‹kI¡îÁ˚
 = 
NULL
;

545 
TOLSRNëw‹kI¡îÁ˚
 * 
	$gëOl§Nëw‹kI¡îÁ˚
(
öãrÁ˚
 *
ﬁ§I¡f
) {

546 
TOLSRNëw‹kI¡îÁ˚
 * 
ªtvÆ
 = 
ﬁ§Nëw‹kI¡îÁ˚sLi°Hód
;

548 (
ªtvÆ
->
ﬁ§I¡f
 !ﬁ§I¡fË&& (ªtvÆ !
NULL
)) {

549 
ªtvÆ
 =ÑëvÆ->
√xt
;

552  
ªtvÆ
;

553 
	}
}

566 
	$¸óãOl§I¡îÁ˚
(
öãrÁ˚
 *
ﬁ§I¡f
) {

567 
TOLSRNëw‹kI¡îÁ˚
 * 
√tw‹kI¡îÁ˚
 = 
NULL
;

569 
√tw‹kI¡îÁ˚
 = 
	`ﬁ§_mÆloc
((
TOLSRNëw‹kI¡îÁ˚
),

571 i‡(
√tw‹kI¡îÁ˚
 =
NULL
) {

572 
baû
;

575 
√tw‹kI¡îÁ˚
->
ﬁ§I¡f
 = olsrIntf;

576 
√tw‹kI¡îÁ˚
->
√xt
 = 
NULL
;

579 i‡(
ﬁ§Nëw‹kI¡îÁ˚sLi°Hód
 =
NULL
) {

580 
ﬁ§Nëw‹kI¡îÁ˚sLi°Hód
 = 
√tw‹kI¡îÁ˚
;

581 
œ°Ol§Nëw‹kI¡îÁ˚
 = 
√tw‹kI¡îÁ˚
;

583 
œ°Ol§Nëw‹kI¡îÁ˚
->
√xt
 = 
√tw‹kI¡îÁ˚
;

584 
œ°Ol§Nëw‹kI¡îÁ˚
 = 
√tw‹kI¡îÁ˚
;

587  
åue
;

589 
baû
: i‡(
√tw‹kI¡îÁ˚
 !
NULL
) {

590 
	`‰ì
(
√tw‹kI¡îÁ˚
);

592  
Ál£
;

593 
	}
}

612 
boﬁ
 
	$¸óãNëw‹kI¡îÁ˚s
(
sockë_h™dÀr_func
 
rxSockëH™dÀrFun˘i⁄
,

613 
sockë_h™dÀr_func
 
rxSockëH™dÀrFun˘i⁄Dow∆ök
) {

614 
ªtvÆ
 = 
Ál£
;

615 
iÁddrs
 *
ifAddrs
 = 
NULL
;

616 
iÁddrs
 *
ifAddr
 = 
NULL
;

618 
î∫o
 = 0;

619 i‡(
	`gëiÁddrs
(&
ifAddrs
) != 0) {

620 
	`pudEº‹
(
åue
, "CouldÇot getÜist of interfacesándÅheiráddresses");

621  
ªtvÆ
;

625 
ifAddr
 = 
ifAddrs
; ifAdd∏!
NULL
; ifAdd∏ifAddr->
iÁ_√xt
) {

626 
sockaddr
 * 
addr
 = 
ifAddr
->
iÁ_addr
;

627 i‡(
addr
 !
NULL
) {

628 
addrFamûy
 = 
addr
->
ß_Ámûy
;

629 i‡(
addrFamûy
 =
ﬁ§_˙f
->
ù_vîsi⁄
) {

630 * 
ifName
 = 
ifAddr
->
iÁ_«me
;

631 
ﬁ§_sockaddr
 
ùAddr
;

636 
öãrÁ˚
 *
ﬁ§I¡f
 = 
	`if_ifwôh«me
(
ifName
);

637 
boﬁ
 
isOl§If
 = (
ﬁ§I¡f
 !
NULL
);

641 
boﬁ
 
isRxN⁄Ol§If
 = 
	`isRxN⁄Ol§I¡îÁ˚
(
ifName
);

642 
boﬁ
 
isTxN⁄Ol§If
 = 
	`isTxN⁄Ol§I¡îÁ˚
(
ifName
);

643 
boﬁ
 
isN⁄Ol§If
 = 
isRxN⁄Ol§If
 || 
isTxN⁄Ol§If
;

645 i‡(!
isOl§If
 && !
isN⁄Ol§If
) {

651 i‡(
isOl§If
 && !
	`¸óãOl§I¡îÁ˚
(
ﬁ§I¡f
)) {

653 
íd
;

656 i‡(!
isN⁄Ol§If
) {

661 i‡(
addrFamûy
 =
AF_INET
) {

662 
	`mem˝y
(&
ùAddr
.
ö4
, 
addr
, (
sockaddr_ö
));

664 
	`mem˝y
(&
ùAddr
.
ö6
, 
addr
, (
sockaddr_ö6
));

667 i‡(
isRxN⁄Ol§If
 && !
	`¸óãRxI¡îÁ˚
(
ifName
, 
ùAddr
,

668 
rxSockëH™dÀrFun˘i⁄
)) {

670 
íd
;

673 i‡(
isTxN⁄Ol§If
 && !
	`¸óãTxI¡îÁ˚
(
ifName
, 
ùAddr
)) {

675 
íd
;

681 i‡(
	`isU∂ökAddrSë
()) {

682 
dow∆ökSockëFd
 = 
	`¸óãDow∆ökSockë
(
rxSockëH™dÀrFun˘i⁄Dow∆ök
);

683 i‡(
dow∆ökSockëFd
 == -1) {

684 
íd
;

687 
dow∆ökSockëFd
 = -1;

690 
ªtvÆ
 = 
åue
;

692 
íd
: 
	`‰ìiÁddrs
(
ifAddrs
);

693  
ªtvÆ
;

694 
	}
}

702 
	$˛ónupOl§I¡îÁ˚s
(
TOLSRNëw‹kI¡îÁ˚
 * 
√tw‹kI¡îÁ˚
) {

703 
TOLSRNëw‹kI¡îÁ˚
 * 
√xtNëw‹kI¡îÁ˚
 = 
√tw‹kI¡îÁ˚
;

704 
√xtNëw‹kI¡îÁ˚
 !
NULL
) {

705 
TOLSRNëw‹kI¡îÁ˚
 * 
ôî©edNëw‹kI¡îÁ˚
 = 
√xtNëw‹kI¡îÁ˚
;

706 
√xtNëw‹kI¡îÁ˚
 = 
ôî©edNëw‹kI¡îÁ˚
->
√xt
;

707 
ôî©edNëw‹kI¡îÁ˚
->
√xt
 = 
NULL
;

708 
	`‰ì
(
ôî©edNëw‹kI¡îÁ˚
);

710 
	}
}

718 
	$˛o£I¡îÁ˚s
(
TRxTxNëw‹kI¡îÁ˚
 * 
√tw‹kI¡îÁ˚
) {

719 
TRxTxNëw‹kI¡îÁ˚
 * 
√xtNëw‹kI¡îÁ˚
 = 
√tw‹kI¡îÁ˚
;

720 
√xtNëw‹kI¡îÁ˚
 !
NULL
) {

721 
TRxTxNëw‹kI¡îÁ˚
 * 
ôî©edNëw‹kI¡îÁ˚
 = 
√xtNëw‹kI¡îÁ˚
;

722 i‡(
ôî©edNëw‹kI¡îÁ˚
->
sockëFd
 >= 0) {

723 i‡(
ôî©edNëw‹kI¡îÁ˚
->
h™dÀr
) {

724 
	`ªmove_ﬁ§_sockë
(
ôî©edNëw‹kI¡îÁ˚
->
sockëFd
,

725 
ôî©edNëw‹kI¡îÁ˚
->
h™dÀr
, 
NULL
);

727 
	`˛o£
(
ôî©edNëw‹kI¡îÁ˚
->
sockëFd
);

728 
ôî©edNëw‹kI¡îÁ˚
->
sockëFd
 = -1;

730 
√xtNëw‹kI¡îÁ˚
 = 
ôî©edNëw‹kI¡îÁ˚
->
√xt
;

731 
ôî©edNëw‹kI¡îÁ˚
->
√xt
 = 
NULL
;

732 
	`‰ì
(
ôî©edNëw‹kI¡îÁ˚
);

734 
	}
}

739 
	$˛o£Nëw‹kI¡îÁ˚s
() {

740 i‡(
rxNëw‹kI¡îÁ˚sLi°Hód
 !
NULL
) {

741 
	`˛o£I¡îÁ˚s
(
rxNëw‹kI¡îÁ˚sLi°Hód
);

742 
rxNëw‹kI¡îÁ˚sLi°Hód
 = 
NULL
;

745 i‡(
txNëw‹kI¡îÁ˚sLi°Hód
 !
NULL
) {

746 
	`˛o£I¡îÁ˚s
(
txNëw‹kI¡îÁ˚sLi°Hód
);

747 
txNëw‹kI¡îÁ˚sLi°Hód
 = 
NULL
;

750 i‡(
ﬁ§Nëw‹kI¡îÁ˚sLi°Hód
 !
NULL
) {

751 
	`˛ónupOl§I¡îÁ˚s
(
ﬁ§Nëw‹kI¡îÁ˚sLi°Hód
);

752 
ﬁ§Nëw‹kI¡îÁ˚sLi°Hód
 = 
NULL
;

755 i‡(
dow∆ökSockëFd
 != -1 ) {

756 i‡(
dow∆ökH™dÀr
) {

757 
	`ªmove_ﬁ§_sockë
 (
dow∆ökSockëFd
, 
dow∆ökH™dÀr
, 
NULL
);

758 
dow∆ökH™dÀr
 = 
NULL
;

760 
	`˛o£
(
dow∆ökSockëFd
);

761 
dow∆ökSockëFd
 = -1;

763 
	}
}

	@lib/pud/src/networkInterfaces.h

1 #i‚de‡
_PUD_NETWORKINTERFACES_H


2 
	#_PUD_NETWORKINTERFACES_H


	)

7 
	~"ﬁ§_ty≥s.h
"

8 
	~"öãrÁ˚s.h
"

9 
	~"scheduÀr.h
"

12 
	~<°dboﬁ.h
>

13 
	~<√t/if.h
>

16 
	s_TRxTxNëw‹kI¡îÁ˚
 {

18 
	msockëFd
;

21 
	m«me
[
IFNAMSIZ
 + 1];

24 
ﬁ§_sockaddr
 
	mùAddªss
;

27 
sockë_h™dÀr_func
 
	mh™dÀr
;

30 
_TRxTxNëw‹kI¡îÁ˚
 * 
	m√xt
;

31 } 
	tTRxTxNëw‹kI¡îÁ˚
;

34 
	s_TOLSRNëw‹kI¡îÁ˚
 {

36 
öãrÁ˚
 * 
	mﬁ§I¡f
;

39 
_TOLSRNëw‹kI¡îÁ˚
 * 
	m√xt
;

40 } 
	tTOLSRNëw‹kI¡îÁ˚
;

42 
boﬁ
 
¸óãNëw‹kI¡îÁ˚s
(
sockë_h™dÀr_func
 
rxSockëH™dÀrFun˘i⁄
,

43 
sockë_h™dÀr_func
 
rxSockëH™dÀrFun˘i⁄Dow∆ök
);

44 
˛o£Nëw‹kI¡îÁ˚s
();

46 * 
gëMaöIpMacAddªss
();

47 
TRxTxNëw‹kI¡îÁ˚
 * 
gëRxNëw‹kI¡îÁ˚s
();

48 
TRxTxNëw‹kI¡îÁ˚
 * 
gëTxNëw‹kI¡îÁ˚s
();

49 
gëDow∆ökSockëFd
();

50 
TOLSRNëw‹kI¡îÁ˚
 * 
gëOl§Nëw‹kI¡îÁ˚
(
öãrÁ˚
 * 
ﬁ§I¡f
);

	@lib/pud/src/posAvg.c

1 
	~"posAvg.h
"

6 
	~"ﬁ§.h
"

9 
	~<as£π.h
>

10 
	~<nmó/£¡í˚.h
>

14 
	#LISTSIZE
(
x
Ë(((x)->
íåõsMaxCou¡
Ë+ 1Ë

	)

15 
	#NEWESTINDEX
(
x
Ë((x)->
√we°E¡ryIndex
Ë

	)

16 
	#WRAPINDEX
(
x
, 
i
Ë((iË% 
	`LISTSIZE
(x)Ë

	)

17 
	#INCOMINGINDEX
(
x
Ë
	`WRAPINDEX
(x, (
	`NEWESTINDEX
(xË+ 1)Ë

	)

18 
	#OLDESTINDEX
(
x
Ë(((x)->
íåõsCou¡
 > 1Ë? 
	`WRAPINDEX
(x, (
	`INCOMINGINDEX
(xË+ 
	`LISTSIZE
(xË- (x)->íåõsCou¡)Ë: 
	`NEWESTINDEX
(x)Ë

	)

26 
	$ÊushPosôi⁄AvîageLi°
(
Posôi⁄AvîageLi°
 * 
posôi⁄AvîageLi°
) {

27 
	`as£π
 (
posôi⁄AvîageLi°
 !
NULL
);

29 
posôi⁄AvîageLi°
->
íåõsCou¡
 = 0;

30 
	`mem£t
(&
posôi⁄AvîageLi°
->
cou¡îs
, 0,

31 (
posôi⁄AvîageLi°
->
cou¡îs
));

33 
	`nmó_zîo_INFO
(&
posôi⁄AvîageLi°
->
posôi⁄AvîageCumuœtive
.
nmóInfo
);

34 
	`nmó_zîo_INFO
(&
posôi⁄AvîageLi°
->
posôi⁄Avîage
.
nmóInfo
);

35 
	}
}

51 
boﬁ
 
	$öôPosôi⁄AvîageLi°
(
Posôi⁄AvîageLi°
 * 
posôi⁄AvîageLi°
,

52 
maxE¡rõs
) {

53 * 
p
;

55 i‡(
posôi⁄AvîageLi°
 =
NULL
) {

56  
Ál£
;

58 i‡(
maxE¡rõs
 < 2) {

59  
Ál£
;

62 
p
 = 
	`ﬁ§_mÆloc
((
maxE¡rõs
 + 1Ë* (
Posôi⁄Upd©eE¡ry
),

64 i‡(
p
 =
NULL
) {

65  
Ál£
;

68 
posôi⁄AvîageLi°
->
íåõsMaxCou¡
 = 
maxE¡rõs
;

69 
posôi⁄AvîageLi°
->
íåõs
 = 
p
;

70 
posôi⁄AvîageLi°
->
√we°E¡ryIndex
 = 0;

72 
	`ÊushPosôi⁄AvîageLi°
(
posôi⁄AvîageLi°
);

74  
åue
;

75 
	}
}

83 
	$de°royPosôi⁄AvîageLi°
(
Posôi⁄AvîageLi°
 * 
posôi⁄AvîageLi°
) {

84 
	`as£π
 (
posôi⁄AvîageLi°
 !
NULL
);

86 
	`ÊushPosôi⁄AvîageLi°
(
posôi⁄AvîageLi°
);

88 i‡(
posôi⁄AvîageLi°
->
íåõs
 !
NULL
) {

89 
	`‰ì
(
posôi⁄AvîageLi°
->
íåõs
);

90 
posôi⁄AvîageLi°
->
íåõs
 = 
NULL
;

93 
posôi⁄AvîageLi°
->
íåõsMaxCou¡
 = 0;

94 
posôi⁄AvîageLi°
->
√we°E¡ryIndex
 = 0;

95 
	}
}

108 
Posôi⁄Upd©eE¡ry
 * 
	$gëPosôi⁄AvîageE¡ry
(

109 
Posôi⁄AvîageLi°
 * 
posôi⁄AvgLi°
,

110 
AvîageE¡ryPosôi⁄Ty≥
 
posôi⁄Ty≥
) {

111 
Posôi⁄Upd©eE¡ry
 * 
r
 = 
NULL
;

113 
posôi⁄Ty≥
) {

114 
OLDEST
:

115 
	`as£π
(
posôi⁄AvgLi°
->
íåõsCou¡
 >posôi⁄AvgLi°->
íåõsMaxCou¡
);

116 
r
 = &
posôi⁄AvgLi°
->
íåõs
[
	`OLDESTINDEX
(positionAvgList)];

119 
INCOMING
:

120 
r
 = &
posôi⁄AvgLi°
->
íåõs
[
	`INCOMINGINDEX
(positionAvgList)];

123 
NEWEST
:

124 
r
 = &
posôi⁄AvgLi°
->
íåõs
[
	`NEWESTINDEX
(positionAvgList)];

127 
AVERAGECUMULATIVE
:

128 
r
 = &
posôi⁄AvgLi°
->
posôi⁄AvîageCumuœtive
;

131 
AVERAGE
:

132 
r
 = &
posôi⁄AvgLi°
->
posôi⁄Avîage
;

136 
r
 = 
NULL
;

140  
r
;

141 
	}
}

157 
	$upd©eCou¡îs
(
Posôi⁄AvîageLi°
 * 
posôi⁄AvîageLi°
,

158 
Posôi⁄Upd©eE¡ry
 * 
íåy
, 
boﬁ
 
add
) {

159 
Posôi⁄Upd©eCou¡îs
 * 
cou¡îs
 = &
posôi⁄AvîageLi°
->counters;

160 #i‚de‡
NDEBUG


161 
maxCou¡
 = 
posôi⁄AvîageLi°
->
íåõsMaxCou¡
;

163 
amou¡
 = (
add
 ? 1 : -1);

166 i‡((
íåy
->
nmóInfo
.
smask
 & 
GPGGA
) != 0) {

167 
	`as£π
(
add
 ? (
cou¡îs
->
gpgga
 < 
maxCou¡
):(counters->gpgga > 0));

168 
cou¡îs
->
gpgga
 +
amou¡
;

170 i‡((
íåy
->
nmóInfo
.
smask
 & 
GPGSA
) != 0) {

171 
	`as£π
(
add
 ? (
cou¡îs
->
gpgß
 < 
maxCou¡
):(counters->gpgsa > 0));

172 
cou¡îs
->
gpgß
 +
amou¡
;

174 i‡((
íåy
->
nmóInfo
.
smask
 & 
GPGSV
) != 0) {

175 
	`as£π
(
add
 ? (
cou¡îs
->
gpgsv
 < 
maxCou¡
):(counters->gpgsv > 0));

176 
cou¡îs
->
gpgsv
 +
amou¡
;

178 i‡((
íåy
->
nmóInfo
.
smask
 & 
GPRMC
) != 0) {

179 
	`as£π
(
add
 ? (
cou¡îs
->
g¥mc
 < 
maxCou¡
):(counters->gprmc > 0));

180 
cou¡îs
->
g¥mc
 +
amou¡
;

182 i‡((
íåy
->
nmóInfo
.
smask
 & 
GPVTG
) != 0) {

183 
	`as£π
(
add
 ? (
cou¡îs
->
gpvtg
 < 
maxCou¡
):(counters->gpvtg > 0));

184 
cou¡îs
->
gpvtg
 +
amou¡
;

188 i‡(
	`nmó_INFO_has_fõld
(
íåy
->
nmóInfo
.
smask
, 
SIG
)) {

189 i‡(
íåy
->
nmóInfo
.
sig
 =
NMEA_SIG_HIGH
) {

190 
	`as£π
(
add
 ? (
cou¡îs
->
sigHigh
 < 
maxCou¡
):(counters->sigHigh > 0));

191 
cou¡îs
->
sigHigh
 +
amou¡
;

192 } i‡(
íåy
->
nmóInfo
.
sig
 =
NMEA_SIG_MID
) {

193 
	`as£π
(
add
 ? (
cou¡îs
->
sigMid
 < 
maxCou¡
):(counters->sigMid > 0));

194 
cou¡îs
->
sigMid
 +
amou¡
;

195 } i‡(
íåy
->
nmóInfo
.
sig
 =
NMEA_SIG_LOW
) {

196 
	`as£π
(
add
 ? (
cou¡îs
->
sigLow
 < 
maxCou¡
):(counters->sigLow > 0));

197 
cou¡îs
->
sigLow
 +
amou¡
;

199 
	`as£π
(
add
 ? (
cou¡îs
->
sigBad
 < 
maxCou¡
):(counters->sigBad > 0));

200 
cou¡îs
->
sigBad
 +
amou¡
;

205 i‡(
	`nmó_INFO_has_fõld
(
íåy
->
nmóInfo
.
smask
, 
FIX
)) {

206 i‡(
íåy
->
nmóInfo
.
fix
 =
NMEA_FIX_3D
) {

207 
	`as£π
(
add
 ? (
cou¡îs
->
fix3d
 < 
maxCou¡
):(counters->fix3d > 0));

208 
cou¡îs
->
fix3d
 +
amou¡
;

209 } i‡(
íåy
->
nmóInfo
.
fix
 =
NMEA_FIX_2D
) {

210 
	`as£π
(
add
 ? (
cou¡îs
->
fix2d
 < 
maxCou¡
):(counters->fix2d > 0));

211 
cou¡îs
->
fix2d
 +
amou¡
;

213 
	`as£π
(
add
 ? (
cou¡îs
->
fixBad
 < 
maxCou¡
):(counters->fixBad > 0));

214 
cou¡îs
->
fixBad
 +
amou¡
;

217 
	}
}

229 
	$dëîmöeCumuœtiveSmaskSigFix
(

230 
Posôi⁄AvîageLi°
 * 
posôi⁄AvîageLi°
) {

231 
Posôi⁄Upd©eE¡ry
 * 
cumuœtive
 =

232 &
posôi⁄AvîageLi°
->
posôi⁄AvîageCumuœtive
;

233 
Posôi⁄Upd©eCou¡îs
 * 
cou¡îs
 = &
posôi⁄AvîageLi°
->counters;

234 
cou¡
 = 
posôi⁄AvîageLi°
->
íåõsCou¡
;

237 
cumuœtive
->
nmóInfo
.
smask
 = 0;

239 i‡(
cou¡îs
->
gpgga
 >
cou¡
) {

240 
cumuœtive
->
nmóInfo
.
smask
 |
GPGGA
;

243 i‡(
cou¡îs
->
gpgß
 >
cou¡
) {

244 
cumuœtive
->
nmóInfo
.
smask
 |
GPGSA
;

247 i‡(
cou¡îs
->
gpgsv
 >
cou¡
) {

248 
cumuœtive
->
nmóInfo
.
smask
 |
GPGSV
;

251 i‡(
cou¡îs
->
g¥mc
 >
cou¡
) {

252 
cumuœtive
->
nmóInfo
.
smask
 |
GPRMC
;

255 i‡(
cou¡îs
->
gpvtg
 >
cou¡
) {

256 
cumuœtive
->
nmóInfo
.
smask
 |
GPVTG
;

260 
cumuœtive
->
nmóInfo
.
sig
 = 
NMEA_SIG_BAD
;

261 i‡(
	`nmó_INFO_has_fõld
(
cumuœtive
->
nmóInfo
.
smask
, 
SIG
)) {

262 i‡(
cou¡îs
->
sigBad
 == 0) {

263 i‡(
cou¡îs
->
sigHigh
 >
cou¡
) {

264 
cumuœtive
->
nmóInfo
.
sig
 = 
NMEA_SIG_HIGH
;

265 } i‡(
cou¡îs
->
sigMid
 > 0) {

266 
cumuœtive
->
nmóInfo
.
sig
 = 
NMEA_SIG_MID
;

267 } i‡(
cou¡îs
->
sigLow
 > 0) {

268 
cumuœtive
->
nmóInfo
.
sig
 = 
NMEA_SIG_LOW
;

274 
cumuœtive
->
nmóInfo
.
fix
 = 
NMEA_FIX_BAD
;

275 i‡(
	`nmó_INFO_has_fõld
(
cumuœtive
->
nmóInfo
.
smask
, 
FIX
)) {

276 i‡(
cou¡îs
->
fixBad
 == 0) {

277 i‡(
cou¡îs
->
fix3d
 >
cou¡
) {

278 
cumuœtive
->
nmóInfo
.
fix
 = 
NMEA_FIX_3D
;

279 } i‡(
cou¡îs
->
fix2d
 > 0) {

280 
cumuœtive
->
nmóInfo
.
fix
 = 
NMEA_FIX_2D
;

284 
	}
}

298 
	$addOrRemoveE¡ryToFromCumuœtiveAvîage
(

299 
Posôi⁄AvîageLi°
 * 
posôi⁄AvîageLi°
, 
Posôi⁄Upd©eE¡ry
 * 
íåy
,

300 
boﬁ
 
add
) {

301 
Posôi⁄Upd©eE¡ry
 * 
cumuœtive
 =

302 &
posôi⁄AvîageLi°
->
posôi⁄AvîageCumuœtive
;

304 i‡(!
add
) {

305 
	`as£π
(
posôi⁄AvîageLi°
->
íåõsCou¡
 >posôi⁄AvîageLi°->
íåõsMaxCou¡
);

306 
	`as£π
(
íåy
 =
	`gëPosôi⁄AvîageE¡ry
(
posôi⁄AvîageLi°
, 
OLDEST
));

317 
	`as£π
(
posôi⁄AvîageLi°
->
íåõsCou¡
 <Öosôi⁄AvîageLi°->
íåõsMaxCou¡
);

318 
	`as£π
(
íåy
 =
	`gëPosôi⁄AvîageE¡ry
(
posôi⁄AvîageLi°
, 
INCOMING
));

323 
cumuœtive
->
nmóInfo
.
utc
 = 
íåy
->nmeaInfo.utc;

329 
cumuœtive
->
nmóInfo
.
ßtöfo
 = 
íåy
->nmeaInfo.satinfo;

333 
cumuœtive
->
nmóInfo
.
PDOP
 +
add
 ? 
íåy
->nmeaInfo.PDOP

334 : -
íåy
->
nmóInfo
.
PDOP
;

335 
cumuœtive
->
nmóInfo
.
HDOP
 +
add
 ? 
íåy
->nmeaInfo.HDOP

336 : -
íåy
->
nmóInfo
.
HDOP
;

337 
cumuœtive
->
nmóInfo
.
VDOP
 +
add
 ? 
íåy
->nmeaInfo.VDOP

338 : -
íåy
->
nmóInfo
.
VDOP
;

341 
cumuœtive
->
nmóInfo
.
œt
 +
add
 ? 
íåy
->nmeaInfo.lat

342 : -
íåy
->
nmóInfo
.
œt
;

343 
cumuœtive
->
nmóInfo
.
l⁄
 +
add
 ? 
íåy
->nmeaInfo.lon

344 : -
íåy
->
nmóInfo
.
l⁄
;

347 
cumuœtive
->
nmóInfo
.
ñv
 +
add
 ? 
íåy
->nmeaInfo.elv

348 : -
íåy
->
nmóInfo
.
ñv
;

349 
cumuœtive
->
nmóInfo
.
•ìd
 +
add
 ? 
íåy
->nmeaInfo.speed

350 : -
íåy
->
nmóInfo
.
•ìd
;

351 
cumuœtive
->
nmóInfo
.
dúe˘i⁄
 +
add
 ? 
íåy
->nmeaInfo.direction

352 : -
íåy
->
nmóInfo
.
dúe˘i⁄
;

353 
cumuœtive
->
nmóInfo
.
de˛ö©i⁄
 +
add
 ? 
íåy
->nmeaInfo.declination

354 : -
íåy
->
nmóInfo
.
de˛ö©i⁄
;

356 
posôi⁄AvîageLi°
->
íåõsCou¡
 +(
add
 ? 1 : -1);

358 
	`upd©eCou¡îs
(
posôi⁄AvîageLi°
, 
íåy
, 
add
);

359 
	`dëîmöeCumuœtiveSmaskSigFix
(
posôi⁄AvîageLi°
);

360 
	}
}

369 
	$upd©ePosôi⁄AvîageFromCumuœtive
(

370 
Posôi⁄AvîageLi°
 * 
posôi⁄AvîageLi°
) {

371 
dividî
 = 
posôi⁄AvîageLi°
->
íåõsCou¡
;

373 
posôi⁄AvîageLi°
->
posôi⁄Avîage
 =Öosôi⁄AvîageLi°->
posôi⁄AvîageCumuœtive
;

382 i‡(
dividî
 > 1.0) {

383 
posôi⁄AvîageLi°
->
posôi⁄Avîage
.
nmóInfo
.
PDOP
 /
dividî
;

384 
posôi⁄AvîageLi°
->
posôi⁄Avîage
.
nmóInfo
.
HDOP
 /
dividî
;

385 
posôi⁄AvîageLi°
->
posôi⁄Avîage
.
nmóInfo
.
VDOP
 /
dividî
;

387 
posôi⁄AvîageLi°
->
posôi⁄Avîage
.
nmóInfo
.
œt
 /
dividî
;

388 
posôi⁄AvîageLi°
->
posôi⁄Avîage
.
nmóInfo
.
l⁄
 /
dividî
;

390 
posôi⁄AvîageLi°
->
posôi⁄Avîage
.
nmóInfo
.
ñv
 /
dividî
;

391 
posôi⁄AvîageLi°
->
posôi⁄Avîage
.
nmóInfo
.
•ìd
 /
dividî
;

392 
posôi⁄AvîageLi°
->
posôi⁄Avîage
.
nmóInfo
.
dúe˘i⁄
 /
dividî
;

393 
posôi⁄AvîageLi°
->
posôi⁄Avîage
.
nmóInfo
.
de˛ö©i⁄
 /
dividî
;

397 
	}
}

408 
	$addNewPosôi⁄ToAvîage
(
Posôi⁄AvîageLi°
 * 
posôi⁄AvîageLi°
,

409 
Posôi⁄Upd©eE¡ry
 * 
√wE¡ry
) {

410 
	`as£π
 (
posôi⁄AvîageLi°
 !
NULL
);

411 
	`as£π
 (
√wE¡ry
 =
	`gëPosôi⁄AvîageE¡ry
(
posôi⁄AvîageLi°
, 
INCOMING
));

413 i‡(
posôi⁄AvîageLi°
->
íåõsCou¡


414 >
posôi⁄AvîageLi°
->
íåõsMaxCou¡
) {

416 
	`addOrRemoveE¡ryToFromCumuœtiveAvîage
(
posôi⁄AvîageLi°
,

417 
	`gëPosôi⁄AvîageE¡ry
(
posôi⁄AvîageLi°
, 
OLDEST
), 
Ál£
);

421 
	`addOrRemoveE¡ryToFromCumuœtiveAvîage
(
posôi⁄AvîageLi°
, 
√wE¡ry
, 
åue
);

424 
posôi⁄AvîageLi°
->
√we°E¡ryIndex


425 
	`WRAPINDEX
(
posôi⁄AvîageLi°
, 
	`NEWESTINDEX
(positionAverageList) + 1);

428 
	`upd©ePosôi⁄AvîageFromCumuœtive
(
posôi⁄AvîageLi°
);

429 
	}
}

	@lib/pud/src/posAvg.h

1 #i‚de‡
_PUD_POSAVG_H_


2 
	#_PUD_POSAVG_H_


	)

9 
	~<nmó/öfo.h
>

10 
	~<°dboﬁ.h
>

13 
	s_Posôi⁄Upd©eE¡ry
 {

14 
nmóINFO
 
	mnmóInfo
;

15 } 
	tPosôi⁄Upd©eE¡ry
;

23 
	s_Posôi⁄Upd©eCou¡îs
 {

25 
	mgpgga
;

26 
	mgpgß
;

27 
	mgpgsv
;

28 
	mg¥mc
;

29 
	mgpvtg
;

32 
	msigBad
;

33 
	msigLow
;

34 
	msigMid
;

35 
	msigHigh
;

38 
	mfixBad
;

39 
	mfix2d
;

40 
	mfix3d
;

41 } 
	tPosôi⁄Upd©eCou¡îs
;

60 
	s_Posôi⁄AvîageLi°
 {

61 
	míåõsMaxCou¡
;

62 
Posôi⁄Upd©eE¡ry
 * 
	míåõs
;

64 
	míåõsCou¡
;

65 
	m√we°E¡ryIndex
;

66 
Posôi⁄Upd©eCou¡îs
 
	mcou¡îs
;

68 
Posôi⁄Upd©eE¡ry
 
	mposôi⁄AvîageCumuœtive
;

69 
Posôi⁄Upd©eE¡ry
 
	mposôi⁄Avîage
;

70 } 
	tPosôi⁄AvîageLi°
;

75 
	e_AvîageE¡ryPosôi⁄Ty≥
 {

76 
	mOLDEST
, 
	mNEWEST
, 
	mINCOMING
, 
	mAVERAGECUMULATIVE
, 
	mAVERAGE


77 } 
	tAvîageE¡ryPosôi⁄Ty≥
;

79 
boﬁ
 
öôPosôi⁄AvîageLi°
(
Posôi⁄AvîageLi°
 * 
posôi⁄AvîageLi°
,

80 
maxE¡rõs
);

81 
ÊushPosôi⁄AvîageLi°
(
Posôi⁄AvîageLi°
 * 
posôi⁄AvîageLi°
);

82 
de°royPosôi⁄AvîageLi°
(
Posôi⁄AvîageLi°
 * 
posôi⁄AvîageLi°
);

84 
Posôi⁄Upd©eE¡ry
 * 
gëPosôi⁄AvîageE¡ry
(

85 
Posôi⁄AvîageLi°
 * 
posôi⁄AvîageLi°
,

86 
AvîageE¡ryPosôi⁄Ty≥
 
posôi⁄Ty≥
);

88 
addNewPosôi⁄ToAvîage
(
Posôi⁄AvîageLi°
 * 
posôi⁄AvîageLi°
,

89 
Posôi⁄Upd©eE¡ry
 * 
√wE¡ry
);

	@lib/pud/src/posFile.c

1 
	~"posFûe.h
"

4 
	~"pud.h
"

5 
	~"c⁄figuøti⁄.h
"

10 
	~<°dio.h
>

11 
	~<°rög.h
>

12 
	~<ªgex.h
>

14 
	#LINE_LENGTH
 256

	)

16 c⁄° * 
	gªgexCommítSåög
 = "^([[:space:]]*|[[:space:]#]+.*)$";

17 c⁄° * 
	gªgexNameVÆueSåög
 =

19 c⁄° 
size_t
 
	gªgexNameVÆuem©chCou¡
 = 3;

21 
ªgex_t
 
	gªgexCommít
;

22 
ªgex_t
 
	gªgexNameVÆue
;

23 
boﬁ
 
	g°¨ãd
 = 
Ál£
;

25 
boﬁ
 
	$°¨tPosôi⁄Fûe
() {

26 i‡(
°¨ãd
) {

27  
åue
;

30 i‡(
	`ªgcomp
(&
ªgexCommít
, 
ªgexCommítSåög
, 
REG_EXTENDED
)) {

31 
	`pudEº‹
(
Ál£
, "CouldÇŸ compûêªgex \"%s\"", 
ªgexCommítSåög
);

32  
Ál£
;

35 i‡(
	`ªgcomp
(&
ªgexNameVÆue
, 
ªgexNameVÆueSåög
, 
REG_EXTENDED
)) {

36 
	`pudEº‹
(
Ál£
, "CouldÇŸ compûêªgex \"%s\"", 
ªgexNameVÆueSåög
);

37  
Ál£
;

40 
°¨ãd
 = 
åue
;

41  
åue
;

42 
	}
}

44 
	$°›Posôi⁄Fûe
() {

45 i‡(
°¨ãd
) {

46 
	`ªg‰ì
(&
ªgexNameVÆue
);

47 
	`ªg‰ì
(&
ªgexCommít
);

48 
°¨ãd
 = 
Ál£
;

50 
	}
}

52 
boﬁ
 
	$ªgexM©ch
(
ªgex_t
 * 
ªgex
, * 
löe
, 
size_t
 
nm©ch
, 
ªgm©ch_t
 
pm©ch
[]) {

53 
ªsu…
 = 
	`ªgexec
(
ªgex
, 
löe
, 
nm©ch
, 
pm©ch
, 0);

54 i‡(!
ªsu…
) {

55  
åue
;

58 i‡(
ªsu…
 =
REG_NOMATCH
) {

59  
Ál£
;

63 
msgbuf
[256];

64 
	`ªgîr‹
(
ªsu…
, 
ªgex
, 
msgbuf
, (msgbuf));

65 
	`pudEº‹
(
Ál£
, "Regex m©ch faûed: %s", 
msgbuf
);

68  
Ál£
;

69 
	}
}

71 
	glöe
[
LINE_LENGTH
];

72 
	g«me
[
LINE_LENGTH
];

73 
	gvÆue
[
LINE_LENGTH
];

75 
boﬁ
 
	$ªadPosôi⁄Fûe
(* 
fûeName
, 
nmóINFO
 * 
nmóInfo
) {

76 
boﬁ
 
ªtvÆ
 = 
Ál£
;

77 
nmóINFO
 
ªsu…
;

78 
FILE
 * 
fd
 = 
NULL
;

79 
löeNumbî
 = 0;

81 
	`nmó_zîo_INFO
(&
ªsu…
);

82 
ªsu…
.
sig
 = 
POSFILE_DEFAULT_SIG
;

83 
ªsu…
.
fix
 = 
POSFILE_DEFAULT_FIX
;

84 
ªsu…
.
HDOP
 = 
POSFILE_DEFAULT_HDOP
;

85 
ªsu…
.
VDOP
 = 
	`POSFILE_CALCULATED_VDOP
‘esu….
HDOP
);

86 
ªsu…
.
PDOP
 = 
	`POSFILE_CALCULATED_PDOP
‘esu….
HDOP
);

87 
ªsu…
.
œt
 = 
POSFILE_DEFAULT_LAT
;

88 
ªsu…
.
l⁄
 = 
POSFILE_DEFAULT_LON
;

89 
ªsu…
.
ñv
 = 
POSFILE_DEFAULT_ELV
;

90 
ªsu…
.
•ìd
 = 
POSFILE_DEFAULT_SPEED
;

91 
ªsu…
.
dúe˘i⁄
 = 
POSFILE_DEFAULT_DIRECTION
;

93 
fd
 = 
	`f›í
(
fûeName
, "r");

94 i‡(!
fd
) {

95 
out
;

98 
	`fgës
(
löe
, 
LINE_LENGTH
, 
fd
)) {

99 
ªgm©ch_t
 
pm©ch
[
ªgexNameVÆuem©chCou¡
];

100 
m©chLí
;

102 
löeNumbî
++;

104 i‡(
	`ªgexM©ch
(&
ªgexCommít
, 
löe
, 0, 
NULL
)) {

108 i‡(!
	`ªgexM©ch
(&
ªgexNameVÆue
, 
löe
, 
ªgexNameVÆuem©chCou¡
, 
pm©ch
)) {

109 
	`pudEº‹
(
Ál£
, "Posôi⁄ fûê\"%s\",Üöê%d u£†övÆid sy¡ax: %s", 
fûeName
, 
löeNumbî
, 
löe
);

110 
out
;

114 
m©chLí
 = 
pm©ch
[1].
rm_eo
 -Öm©ch[1].
rm_so
;

115 
	`mem˝y
(
«me
, &
löe
[
pm©ch
[1].
rm_so
], 
m©chLí
);

116 
«me
[
m©chLí
] = '\0';

117 
m©chLí
 = 
pm©ch
[2].
rm_eo
 -Öm©ch[2].
rm_so
;

118 
	`mem˝y
(
vÆue
, &
löe
[
pm©ch
[2].
rm_so
], 
m©chLí
);

119 
vÆue
[
m©chLí
] = '\0';

121 i‡(!
	`°∫ˇ£cmp
(
POSFILE_NAME_SIG
, 
«me
, (name))) {

122 i‡(!
	`°∫ˇ£cmp
(
POSFILE_VALUE_SIG_BAD
, 
vÆue
, (value))) {

123 
ªsu…
.
sig
 = 
NMEA_SIG_BAD
;

124 } i‡(!
	`°∫ˇ£cmp
(
POSFILE_VALUE_SIG_LOW
, 
vÆue
, (value))) {

125 
ªsu…
.
sig
 = 
NMEA_SIG_LOW
;

126 } i‡(!
	`°∫ˇ£cmp
(
POSFILE_VALUE_SIG_MID
, 
vÆue
, (value))) {

127 
ªsu…
.
sig
 = 
NMEA_SIG_MID
;

128 } i‡(!
	`°∫ˇ£cmp
(
POSFILE_VALUE_SIG_HIGH
, 
vÆue
, (value))) {

129 
ªsu…
.
sig
 = 
NMEA_SIG_HIGH
;

131 
	`pudEº‹
(
Ál£
, "Position file \"%s\",Üine %d usesán invalid value for \"%s\","

132 " vÆid vÆue†¨ê[%s|%s\%s|%s]", 
fûeName
, 
löeNumbî
, 
POSFILE_NAME_SIG
,

133 
POSFILE_VALUE_SIG_BAD
, 
POSFILE_VALUE_SIG_LOW
, 
POSFILE_VALUE_SIG_MID
, 
POSFILE_VALUE_SIG_HIGH
);

134 
out
;

136 } i‡(!
	`°∫ˇ£cmp
(
POSFILE_NAME_FIX
, 
«me
, (name))) {

137 i‡(!
	`°∫ˇ£cmp
(
POSFILE_VALUE_FIX_BAD
, 
vÆue
, (value))) {

138 
ªsu…
.
fix
 = 
NMEA_FIX_BAD
;

139 } i‡(!
	`°∫ˇ£cmp
(
POSFILE_VALUE_FIX_2D
, 
vÆue
, (value))) {

140 
ªsu…
.
fix
 = 
NMEA_FIX_2D
;

141 } i‡(!
	`°∫ˇ£cmp
(
POSFILE_VALUE_FIX_3D
, 
vÆue
, (value))) {

142 
ªsu…
.
fix
 = 
NMEA_FIX_3D
;

144 
	`pudEº‹
(
Ál£
, "Position file \"%s\",Üine %d usesán invalid value for \"%s\","

145 " vÆid vÆue†¨ê[%s\%s|%s]", 
fûeName
, 
löeNumbî
, 
POSFILE_NAME_FIX
, 
POSFILE_VALUE_FIX_BAD
,

146 
POSFILE_VALUE_FIX_2D
, 
POSFILE_VALUE_FIX_3D
);

147 
out
;

149 } i‡(!
	`°∫ˇ£cmp
(
POSFILE_NAME_HDOP
, 
«me
, (name))) {

150 
vÆ
;

151 i‡(!
	`ªadDoubÀ
(
POSFILE_NAME_HDOP
, 
vÆue
, &
vÆ
)) {

152 
out
;

155 
ªsu…
.
HDOP
 = 
vÆ
;

156 
ªsu…
.
VDOP
 = 
	`POSFILE_CALCULATED_VDOP
‘esu….
HDOP
);

157 
ªsu…
.
PDOP
 = 
	`POSFILE_CALCULATED_PDOP
‘esu….
HDOP
);

158 } i‡(!
	`°∫ˇ£cmp
(
POSFILE_NAME_LAT
, 
«me
, (name))) {

159 
vÆ
;

160 i‡(!
	`ªadDoubÀ
(
POSFILE_NAME_LAT
, 
vÆue
, &
vÆ
)) {

161 
out
;

164 
ªsu…
.
œt
 = 
vÆ
;

165 } i‡(!
	`°∫ˇ£cmp
(
POSFILE_NAME_LON
, 
«me
, (name))) {

166 
vÆ
;

167 i‡(!
	`ªadDoubÀ
(
POSFILE_NAME_LON
, 
vÆue
, &
vÆ
)) {

168 
out
;

171 
ªsu…
.
l⁄
 = 
vÆ
;

172 } i‡(!
	`°∫ˇ£cmp
(
POSFILE_NAME_ELV
, 
«me
, (name))) {

173 
vÆ
;

174 i‡(!
	`ªadDoubÀ
(
POSFILE_NAME_ELV
, 
vÆue
, &
vÆ
)) {

175 
out
;

178 
ªsu…
.
ñv
 = 
vÆ
;

179 } i‡(!
	`°∫ˇ£cmp
(
POSFILE_NAME_SPEED
, 
«me
, (name))) {

180 
vÆ
;

181 i‡(!
	`ªadDoubÀ
(
POSFILE_NAME_SPEED
, 
vÆue
, &
vÆ
)) {

182 
out
;

185 
ªsu…
.
•ìd
 = 
vÆ
;

186 } i‡(!
	`°∫ˇ£cmp
(
POSFILE_NAME_DIRECTION
, 
«me
, (name))) {

187 
vÆ
;

188 i‡(!
	`ªadDoubÀ
(
POSFILE_NAME_DIRECTION
, 
vÆue
, &
vÆ
)) {

189 
out
;

192 
ªsu…
.
dúe˘i⁄
 = 
vÆ
;

194 
	`pudEº‹
(
Ál£
, "Position file \"%s\",Üine %d usesán invalid option \"%s\","

195 " vÆid o±i⁄†¨ê[%s|%s|%s|%s|%s|%s|%s|%s]", 
fûeName
, 
löeNumbî
, 
«me
, 
POSFILE_NAME_SIG
,

196 
POSFILE_NAME_FIX
, 
POSFILE_NAME_HDOP
, 
POSFILE_NAME_LAT
, 
POSFILE_NAME_LON
, 
POSFILE_NAME_ELV
,

197 
POSFILE_NAME_SPEED
, 
POSFILE_NAME_DIRECTION
);

198 
out
;

202 
	`f˛o£
(
fd
);

204 
ªsu…
.
smask
 = 
POSFILE_SANITISE_SMASK
;

205 
	`nmó_INFO_ßnôi£
(&
ªsu…
);

206 
	`nmó_INFO_unô_c⁄vîsi⁄
(&
ªsu…
);

207 i‡(
ªsu…
.
fix
 =
NMEA_FIX_BAD
) {

208 
ªsu…
.
smask
 = 0;

210 
ªsu…
.
smask
 = 
POSFILE_DEFAULT_SMASK
;

213 
	`mem˝y
(
nmóInfo
, &
ªsu…
, (result));

214 
ªtvÆ
 = 
åue
;

216 
out
:  
ªtvÆ
;

217 
	}
}

	@lib/pud/src/posFile.h

1 #i‚de‡
_PUD_POSFILE_H_


2 
	#_PUD_POSFILE_H_


	)

9 
	~<°dboﬁ.h
>

10 
	~<nmó/öfo.h
>

11 
	~<nmó/£¡í˚.h
>

29 
	#POSFILE_DEFAULT_SMASK
 (
GPGGA
 | 
GPRMC
)

	)

30 
	#POSFILE_SANITISE_SMASK
 (
GPGGA
 | 
GPRMC
 | 
GPGSA
)

	)

33 
	#POSFILE_DEFAULT_SIG
 (
NMEA_SIG_HIGH
)

	)

34 
	#POSFILE_DEFAULT_FIX
 (
NMEA_FIX_BAD
)

	)

35 
	#POSFILE_DEFAULT_HDOP
 (0.0)

	)

36 
	#POSFILE_DEFAULT_LAT
 (0.0)

	)

37 
	#POSFILE_DEFAULT_LON
 (0.0)

	)

38 
	#POSFILE_DEFAULT_ELV
 (0.0)

	)

39 
	#POSFILE_DEFAULT_SPEED
 (0.0)

	)

40 
	#POSFILE_DEFAULT_DIRECTION
 (0.0)

	)

42 
	#POSFILE_CALCULATED_VDOP
(
hd›
Ë(hd›)

	)

43 
	#POSFILE_CALCULATED_PDOP
(
hd›
Ë(hd› * 1.414213562)

	)

45 
	#POSFILE_NAME_SIG
 "sig"

	)

46 
	#POSFILE_NAME_FIX
 "fix"

	)

47 
	#POSFILE_NAME_HDOP
 "hd›"

	)

48 
	#POSFILE_NAME_LAT
 "œt"

	)

49 
	#POSFILE_NAME_LON
 "l⁄"

	)

50 
	#POSFILE_NAME_ELV
 "ñv"

	)

51 
	#POSFILE_NAME_SPEED
 "•ìd"

	)

52 
	#POSFILE_NAME_DIRECTION
 "dúe˘i⁄"

	)

54 
	#POSFILE_VALUE_SIG_BAD
 "bad"

	)

55 
	#POSFILE_VALUE_SIG_LOW
 "low"

	)

56 
	#POSFILE_VALUE_SIG_MID
 "mid"

	)

57 
	#POSFILE_VALUE_SIG_HIGH
 "high"

	)

59 
	#POSFILE_VALUE_FIX_BAD
 "bad"

	)

60 
	#POSFILE_VALUE_FIX_2D
 "2d"

	)

61 
	#POSFILE_VALUE_FIX_3D
 "3d"

	)

63 
boﬁ
 
°¨tPosôi⁄Fûe
();

64 
°›Posôi⁄Fûe
();

65 
boﬁ
 
ªadPosôi⁄Fûe
(* 
fûeName
, 
nmóINFO
 * 
nmóInfo
);

	@lib/pud/src/pud.c

1 
	~"pud.h
"

4 
	~"dedup.h
"

5 
	~"√tw‹kI¡îÁ˚s.h
"

6 
	~"c⁄figuøti⁄.h
"

7 
	~"gpsC⁄vîsi⁄.h
"

8 
	~"ª˚ivî.h
"

9 
	~"°©e.h
"

10 
	~"compûî.h
"

13 
	~"ﬁ§.h
"

14 
	~"ùˇlc.h
"

15 
	~"√t_ﬁ§.h
"

16 
	~"∑r£r.h
"

21 
	#BUFFER_SIZE_RX_NMEA
 2048

	)

24 
	#BUFFER_SIZE_RX_DOWNLINK
 2048

	)

28 
	#BUFFER_SIZE_TX_OLSR
 512

	)

31 
DeDupLi°
 
	gdeDupLi°
;

44 
	$pudEº‹
(
boﬁ
 
u£Eºno
, c⁄° *
f‹m©
, ...) {

45 
°rDesc
[256];

46 *
°rögEº
 = 
NULL
;

48 i‡(
u£Eºno
) {

49 
°rögEº
 = 
	`°ªº‹
(
î∫o
);

52 i‡((
f‹m©
 =
NULL
) || (*format == '\0')) {

53 i‡(
u£Eºno
) {

54 
	`ﬁ§_¥ötf
(0, "%s: %s\n", 
PUD_PLUGIN_ABBR
, 
°rögEº
);

56 
	`ﬁ§_¥ötf
(0, "%s: Unknow¿îr‹\n", 
PUD_PLUGIN_ABBR
);

59 
va_li°
 
¨gli°
;

61 
	`va_°¨t
(
¨gli°
, 
f‹m©
);

62 
	`v¢¥ötf
(
°rDesc
, (°rDesc), 
f‹m©
, 
¨gli°
);

63 
	`va_íd
(
¨gli°
);

65 
°rDesc
[(strDesc) - 1] = '\0';

67 i‡(
u£Eºno
) {

68 
	`ﬁ§_¥ötf
(0, "%s: %s: %s\n", 
PUD_PLUGIN_ABBR
, 
°rDesc
, 
°rögEº
);

70 
	`ﬁ§_¥ötf
(0, "%s: %s\n", 
PUD_PLUGIN_ABBR
, 
°rDesc
);

73 
	}
}

83 
	$£ndToAŒTxI¡îÁ˚s
(*
buf„r
,

84 
buf„rLígth
) {

85 
ﬁ§_sockaddr
 * 
txAddªss
;

86 
TRxTxNëw‹kI¡îÁ˚
 *
txNëw‹kI¡îÁ˚s
 = 
	`gëTxNëw‹kI¡îÁ˚s
();

87 
txNëw‹kI¡îÁ˚s
 !
NULL
) {

88 
TRxTxNëw‹kI¡îÁ˚
 *
√tw‹kI¡îÁ˚
 = 
txNëw‹kI¡îÁ˚s
;

89 
î∫o
 = 0;

90 
txAddªss
 = 
	`gëTxMcAddr
();

91 i‡(
	`£ndto
(
√tw‹kI¡îÁ˚
->
sockëFd
, 
buf„r
, 
buf„rLígth
, 0,

92 (
sockaddr
 *Ë&
txAddªss
->
ö
, (txAddress->in)) < 0) {

93 
	`pudEº‹
(
åue
, "TransmitÉrror on interface %s",

94 (*Ë&
√tw‹kI¡îÁ˚
->
«me
);

96 
txNëw‹kI¡îÁ˚s
 = 
√tw‹kI¡îÁ˚
->
√xt
;

98 
	}
}

116 
boﬁ
 
∑ckëRe˚ivedFromOl§
(
ﬁ§_mesßge
 *
ﬁ§Mesßge
,

117 
öãrÁ˚
 *
ö_if
 
__©åibuã__
 ((
unu£d
)), 
ﬁ§_ù_addr
 *
ùaddr
 __attribute__ ((unused))) {

118 c⁄° 
ﬁ§_ù_addr
 * 
	g‹igö©‹
 = 
gëOl§MesßgeOrigö©‹
(

119 
ﬁ§_˙f
->
ù_vîsi⁄
, 
ﬁ§Mesßge
);

120 
	gå™smôSåögLígth
;

121 
	gbuf„r
[
BUFFER_SIZE_TX_OLSR
];

125 i‡(!
gëU£Lo›back
(Ë&& 
ùequÆ
(
‹igö©‹
, &
ﬁ§_˙f
->
maö_addr
)) {

126  
	gÁl£
;

131 i‡(
likñy
(
gëU£DeDup
())) {

132 i‡(
isInDeDupLi°
(&
deDupLi°
, 
ﬁ§Mesßge
)) {

133  
	gÁl£
;

136 
addToDeDup
(&
deDupLi°
, 
ﬁ§Mesßge
);

139 
	gå™smôSåögLígth
 = 
gpsFromOl§
(
ﬁ§Mesßge
, &
buf„r
[0], (buffer));

140 i‡(
u∆ikñy
(
å™smôSåögLígth
 == 0)) {

141  
Ál£
;

144 
£ndToAŒTxI¡îÁ˚s
(&
buf„r
[0], 
å™smôSåögLígth
);

146  
	gåue
;

160 
∑ckëRe˚ivedFromDow∆ök
(
skfd
, *
d©a
 
__©åibuã__
 ((
unu£d
)), 
Êags
 __attribute__ ((unused))) {

161 i‡(
	gskfd
 >= 0) {

162 
rxBuf„r
[
BUFFER_SIZE_RX_DOWNLINK
];

163 
ssize_t
 
	grxCou¡
 = 0;

164 
ssize_t
 
	grxIndex
 = 0;

165 
sockaddr
 
	g£ndî
;

166 
sockÀn_t
 
	g£ndîSize
 = (
£ndî
);

169 
mem£t
(&
£ndî
, 0, 
£ndîSize
);

170 
	gî∫o
 = 0;

171 
	grxCou¡
 = 
ªcv‰om
(
skfd
, &
rxBuf„r
[0], ((rxBuffer) - 1), 0,

172 &
£ndî
, &
£ndîSize
);

173 i‡(
	grxCou¡
 < 0) {

174 
pudEº‹
(
åue
, "Re˚ivêîr‹ i¿%s, ign‹ög mesßge.", 
__func__
);

178 
	grxIndex
 < 
	grxCou¡
) {

179 
U∂ökMesßge
 * 
	gmsg
 = (U∂ökMesßgê*Ë&
rxBuf„r
[
rxIndex
];

180 
uöt8_t
 
	gty≥
;

181 
uöt16_t
 
	gu∂ökMesßgeLígth
;

182 
uöt16_t
 
	gﬁ§MesßgeLígth
;

183 
boﬁ
 
	gùv6
;

184 
ﬁ§_mesßge
 * 
	gﬁ§Mesßge
;

186 
	gty≥
 = 
gëU∂ökMesßgeTy≥
(&
msg
->
hódî
);

187 
	gﬁ§MesßgeLígth
 = 
gëU∂ökMesßgeLígth
(&
msg
->
hódî
);

188 
	gu∂ökMesßgeLígth
 = 
ﬁ§MesßgeLígth
 + (
U∂ökHódî
);

190 i‡(
u∆ikñy
((
rxIndex
 + 
u∂ökMesßgeLígth
Ë> 
rxCou¡
)) {

191 
pudEº‹
(
Ál£
, "Received wrongÜength (%d) in %s,"

192 " ign‹ögÅhêª° o‡thêmesßges.", 
ﬁ§MesßgeLígth
,

193 
__func__
);

197 
	grxIndex
 +
u∂ökMesßgeLígth
;

199 i‡(
	gty≥
 !
POSITION
) {

200 
pudEº‹
(
Ál£
, "Received wrongÅype (%d) in %s,"

201 " ign‹ög mesßge.", 
ty≥
, 
__func__
);

205 
	gùv6
 = 
gëU∂ökMesßgeIPv6
(&
msg
->
hódî
);

206 i‡(
u∆ikñy
(
ùv6
 && (
ﬁ§_˙f
->
ù_vîsi⁄
 !
AF_INET6
))) {

207 
pudEº‹
(
Ál£
, "Received wrong IPv6 status (%s) in %s,"

208 " ign‹ög mesßge.", (
ùv6
 ? "true" : "false"),

209 
__func__
);

213 
	gﬁ§Mesßge
 = &
msg
->msg.
ﬁ§Mesßge
;

220 
	gr
;

221 
öãrÁ˚
 *
	gi‚
;

222 
	gi‚
 = 
i‚ë
; i‚; i‚ = 
i‚
->
öt_√xt
) {

223 
r
 = 
√t_outbuf„r_push
(
i‚
, 
ﬁ§Mesßge
, 
ﬁ§MesßgeLígth
);

224 i‡(
	gr
 !(Ë
ﬁ§MesßgeLígth
) {

225 
pudEº‹
(

226 
Ál£
,

229 
i‚
->
öt_«me
,

230 ((
r
 == -1) ? "no buffer was found" :

231 (
r
 == 0) ? "there wasÇotÉnoughÑoom inÅhe buffer" :

232 "unknow¿ªas⁄"), 
ﬁ§MesßgeLígth
, 
r
);

238 (Ë
∑ckëRe˚ivedFromOl§
(
ﬁ§Mesßge
, 
NULL
, NULL);

255 
∑ckëRe˚ivedF‹Ol§
(
skfd
, *
d©a
 
__©åibuã__
 ((
unu£d
)), 
Êags
 __attribute__ ((unused))) {

256 i‡(
	gskfd
 >= 0) {

257 
rxBuf„r
[
BUFFER_SIZE_RX_NMEA
];

258 
ssize_t
 
	grxCou¡
;

259 
sockaddr
 
	g£ndî
;

260 
sockÀn_t
 
	g£ndîSize
 = (
£ndî
);

262 
as£π
(
d©a
 !
NULL
);

265 
mem£t
(&
£ndî
, 0, 
£ndîSize
);

266 
	gî∫o
 = 0;

267 
	grxCou¡
 = 
ªcv‰om
(
skfd
, &
rxBuf„r
[0], ((rxBuffer) - 1), 0,

268 &
£ndî
, &
£ndîSize
);

269 i‡(
	grxCou¡
 < 0) {

270 
pudEº‹
(
åue
, "Re˚ivêîr‹ i¿%s, ign‹ög mesßge.", 
__func__
);

275 
	grxBuf„r
[
rxCou¡
] = '\0';

278 i‡(!
isRxAŒowedSour˚IpAddªss
(&
£ndî
)) {

285 (Ë
ª˚ivîUpd©eGpsInf‹m©i⁄
(&
rxBuf„r
[0], 
rxCou¡
);

298 
boﬁ
 
	$öôPud
() {

299 i‡(!
	`checkC⁄fig
()) {

300 
	`pudEº‹
(
Ál£
, "Invalid configuration");

301 
îr‹
;

304 
	`öôSèã
();

306 i‡(!
	`öôDeDupLi°
(&
deDupLi°
, 
	`gëDeDupDïth
())) {

307 
	`pudEº‹
(
Ál£
, "CouldÇot initialise de-duplicationÜist");

308 
îr‹
;

311 i‡(!
	`°¨tRe˚ivî
()) {

312 
	`pudEº‹
(
Ál£
, "CouldÇot startÑeceiver");

313 
îr‹
;

320 i‡(!
	`¸óãNëw‹kI¡îÁ˚s
(&
∑ckëRe˚ivedF‹Ol§
,

321 &
∑ckëRe˚ivedFromDow∆ök
)) {

322 
	`pudEº‹
(
Ál£
, "CouldÇot createÑequireÇetwork interfaces");

323 
îr‹
;

326 i‡(!
	`checkRunSëup
()) {

327 
	`pudEº‹
(
Ál£
, "Invalid configuration");

328 
îr‹
;

335 
	`ﬁ§_∑r£r_add_fun˘i⁄
(&
∑ckëRe˚ivedFromOl§
, 
PUD_OLSR_MSG_TYPE
);

337  
åue
;

339 
îr‹
: 
	`˛o£Pud
();

340  
Ál£
;

341 
	}
}

347 
	$˛o£Pud
() {

348 
	`˛o£Nëw‹kI¡îÁ˚s
();

349 
	`°›Re˚ivî
();

350 
	`de°royDeDupLi°
(&
deDupLi°
);

351 
	}
}

	@lib/pud/src/pud.h

1 #i‚de‡
_PUD_PUD_H


2 
	#_PUD_PUD_H


	)

7 
	~"ﬁ§_¥Ÿocﬁ.h
"

8 
	~"öãrÁ˚s.h
"

9 
	~"ﬁ§_ty≥s.h
"

12 
	~<°dboﬁ.h
>

19 
	#PUD_PLUGIN_NAME_LONG
 "OLSRD Posôi⁄ Upd©êDi°ributi⁄ (PUDË∂ugö"

	)

22 
	#PUD_PLUGIN_ABBR
 "PUD"

	)

28 
boﬁ
 
öôPud
();

30 
˛o£Pud
();

32 
	$pudEº‹
(
boﬁ
 
u£Eºno
, c⁄° *
f‹m©
, ...Ë
	`__©åibuã__
 ((
	`f‹m©
(
¥ötf
, 2, 3)));

34 
boﬁ
 
	`∑ckëRe˚ivedFromOl§
(
ﬁ§_mesßge
 *
ﬁ§Mesßge
,

35 
öãrÁ˚
 *
ö_if
 
	`__©åibuã__
 ((
unu£d
)),

36 
ﬁ§_ù_addr
 *
ùaddr
 
	`__©åibuã__
 ((
unu£d
)));

	@lib/pud/src/pudOlsrdPlugin.c

1 
	~"pudOl§dPlugö.h
"

4 
	~"pud.h
"

7 
	~"ﬁ§.h
"

22 
	$ﬁ§d_∂ugö_öô
() {

23 
boﬁ
 
ªtvÆ
 = 
	`öôPud
();

24 i‡(
ªtvÆ
) {

25 
	`ﬁ§_¥ötf
(0, "%s\n", 
PUD_PLUGIN_NAME_LONG


26 #ifde‡
GIT_SHA


27 " (" 
GIT_SHA
 ")"

31  (
ªtvÆ
 ? 1 : 0);

32 
	}
}

40 
	$ﬁ§d_∂ugö_öãrÁ˚_vîsi⁄
() {

41  
PUD_PLUGIN_INTERFACE_VERSION
;

42 
	}
}

54 
	$ﬁ§d_gë_∂ugö_∑ømëîs
(c⁄° 
ﬁ§d_∂ugö_∑ømëîs
 **
∑øms
,

55 *
size
) {

56 *
∑øms
 = &
∂ugö_∑ømëîs
[0];

57 *
size
 = 
	`ARRAYSIZE
(
∂ugö_∑ømëîs
);

58 
	}
}

67 
__©åibuã__
 ((
c⁄°ru˘‹
)Ë
pud_öô
();

72 
__©åibuã__
 ((
de°ru˘‹
)Ë
pud_föi
();

78 
	$pud_öô
() {

79 
	}
}

84 
	$pud_föi
() {

85 
	`˛o£Pud
();

86 
	}
}

	@lib/pud/src/pudOlsrdPlugin.h

1 #i‚de‡
_PUD_OLSRD_PLUGIN_H_


2 
	#_PUD_OLSRD_PLUGIN_H_


	)

5 
	~"c⁄figuøti⁄.h
"

8 
	~"ﬁ§d_∂ugö.h
"

11 
	~<°ddef.h
>

14 
	#PUD_PLUGIN_INTERFACE_VERSION
 5

	)

21 c⁄° 
ﬁ§d_∂ugö_∑ømëîs
 
	g∂ugö_∑ømëîs
[] = {

23 { .
«me
 = 
PUD_NODE_ID_TYPE_NAME
, .
	g£t_∂ugö_∑ømëî
 = &
£tNodeIdTy≥
, .
	gd©a
 = 
NULL
},

24 { .
	g«me
 = 
PUD_NODE_ID_NAME
, .
	g£t_∂ugö_∑ømëî
 = &
£tNodeId
, .
	gd©a
 = 
NULL
},

27 { .
	g«me
 = 
PUD_OLSR_TTL_NAME
, .
	g£t_∂ugö_∑ømëî
 = &
£tOl§Té
, .
	gd©a
 = 
NULL
},

28 { .
	g«me
 = 
PUD_UPDATE_INTERVAL_STATIONARY_NAME
, .
	g£t_∂ugö_∑ømëî
 = &
£tUpd©eI¡îvÆSèti⁄¨y
, .
	gd©a
 = 
NULL
},

29 { .
	g«me
 = 
PUD_UPDATE_INTERVAL_MOVING_NAME
, .
	g£t_∂ugö_∑ømëî
 = &
£tUpd©eI¡îvÆMovög
, .
	gd©a
 = 
NULL
},

32 { .
	g«me
 = 
PUD_RX_NON_OLSR_IF_NAME
, .
	g£t_∂ugö_∑ømëî
 = &
addRxN⁄Ol§I¡îÁ˚
, .
	gd©a
 = 
NULL
},

33 { .
	g«me
 = 
PUD_RX_ALLOWED_SOURCE_IP_NAME
, .
	g£t_∂ugö_∑ømëî
 = &
addRxAŒowedSour˚IpAddªss
, .
	gd©a
 = 
NULL
},

34 { .
	g«me
 = 
PUD_RX_MC_ADDR_NAME
, .
	g£t_∂ugö_∑ømëî
 = &
£tRxMcAddr
, .
	gd©a
 = 
NULL
},

35 { .
	g«me
 = 
PUD_RX_MC_PORT_NAME
, .
	g£t_∂ugö_∑ømëî
 = &
£tRxMcP‹t
, .
	gd©a
 = 
NULL
},

36 { .
	g«me
 = 
PUD_POSFILE_NAME
, .
	g£t_∂ugö_∑ømëî
 = &
£tPosôi⁄Fûe
, .
	gd©a
 = 
NULL
},

39 { .
	g«me
 = 
PUD_TX_NON_OLSR_IF_NAME
, .
	g£t_∂ugö_∑ømëî
 = &
addTxN⁄Ol§I¡îÁ˚
, .
	gd©a
 = 
NULL
},

40 { .
	g«me
 = 
PUD_TX_MC_ADDR_NAME
, .
	g£t_∂ugö_∑ømëî
 = &
£tTxMcAddr
, .
	gd©a
 = 
NULL
},

41 { .
	g«me
 = 
PUD_TX_MC_PORT_NAME
, .
	g£t_∂ugö_∑ømëî
 = &
£tTxMcP‹t
, .
	gd©a
 = 
NULL
},

42 { .
	g«me
 = 
PUD_TX_TTL_NAME
, .
	g£t_∂ugö_∑ømëî
 = &
£tTxTé
, .
	gd©a
 = 
NULL
},

43 { .
	g«me
 = 
PUD_TX_NMEAMESSAGEPREFIX_NAME
, .
	g£t_∂ugö_∑ømëî
 = &
£tTxNmóMesßgePªfix
, .
	gd©a
 = 
NULL
},

46 { .
	g«me
 = 
PUD_UPLINK_ADDR_NAME
, .
	g£t_∂ugö_∑ømëî
 = &
£tU∂ökAddr
, .
	gd©a
 = 
NULL
},

47 { .
	g«me
 = 
PUD_UPLINK_PORT_NAME
, .
	g£t_∂ugö_∑ømëî
 = &
£tU∂ökP‹t
, .
	gd©a
 = 
NULL
},

48 { .
	g«me
 = 
PUD_DOWNLINK_PORT_NAME
, .
	g£t_∂ugö_∑ømëî
 = &
£tDow∆ökP‹t
, .
	gd©a
 = 
NULL
},

49 { .
	g«me
 = 
PUD_UPLINK_UPDATE_INTERVAL_STATIONARY_NAME
, .
	g£t_∂ugö_∑ømëî
 = &
£tU∂ökUpd©eI¡îvÆSèti⁄¨y
, .
	gd©a
 = 
NULL
},

50 { .
	g«me
 = 
PUD_UPLINK_UPDATE_INTERVAL_MOVING_NAME
, .
	g£t_∂ugö_∑ømëî
 = &
£tU∂ökUpd©eI¡îvÆMovög
, .
	gd©a
 = 
NULL
},

53 { .
	g«me
 = 
PUD_AVERAGE_DEPTH_NAME
, .
	g£t_∂ugö_∑ømëî
 = &
£tAvîageDïth
, .
	gd©a
 = 
NULL
},

54 { .
	g«me
 = 
PUD_GATEWAY_DETERMINATION_INTERVAL_NAME
, .
	g£t_∂ugö_∑ømëî
 = &
£tG©ewayDëîmö©i⁄I¡îvÆ
, .
	gd©a
 = 
NULL
},

55 { .
	g«me
 = 
PUD_MOVING_SPEED_THRESHOLD_NAME
, .
	g£t_∂ugö_∑ømëî
 = &
£tMovögS≥edThªshﬁd
, .
	gd©a
 = 
NULL
},

56 { .
	g«me
 = 
PUD_MOVING_DISTANCE_THRESHOLD_NAME
, .
	g£t_∂ugö_∑ømëî
 = &
£tMovögDi°™˚Thªshﬁd
, .
	gd©a
 = 
NULL
},

57 { .
	g«me
 = 
PUD_DOP_MULTIPLIER_NAME
, .
	g£t_∂ugö_∑ømëî
 = &
£tD›Mu…ùlõr
, .
	gd©a
 = 
NULL
},

58 { .
	g«me
 = 
PUD_HYSTERESIS_COUNT_2STAT_NAME
, .
	g£t_∂ugö_∑ømëî
 = &
£tHy°îesisCou¡ToSèti⁄¨y
, .
	gd©a
 = 
NULL
},

59 { .
	g«me
 = 
PUD_HYSTERESIS_COUNT_2MOV_NAME
, .
	g£t_∂ugö_∑ømëî
 = &
£tHy°îesisCou¡ToMovög
, .
	gd©a
 = 
NULL
},

60 { .
	g«me
 = 
PUD_GAT_HYSTERESIS_COUNT_2STAT_NAME
, .
	g£t_∂ugö_∑ømëî
 = &
£tG©ewayHy°îesisCou¡ToSèti⁄¨y
, .
	gd©a
 = 
NULL
},

61 { .
	g«me
 = 
PUD_GAT_HYSTERESIS_COUNT_2MOV_NAME
, .
	g£t_∂ugö_∑ømëî
 = &
£tG©ewayHy°îesisCou¡ToMovög
, .
	gd©a
 = 
NULL
},

64 { .
	g«me
 = 
PUD_DEFAULT_HDOP_NAME
, .
	g£t_∂ugö_∑ømëî
 = &
£tDeÁu…Hd›
, .
	gd©a
 = 
NULL
},

65 { .
	g«me
 = 
PUD_DEFAULT_VDOP_NAME
, .
	g£t_∂ugö_∑ømëî
 = &
£tDeÁu…Vd›
, .
	gd©a
 = 
NULL
},

68 { .
	g«me
 = 
PUD_USE_DEDUP_NAME
, .
	g£t_∂ugö_∑ømëî
 = &
£tU£DeDup
, .
	gd©a
 = 
NULL
},

69 { .
	g«me
 = 
PUD_DEDUP_DEPTH_NAME
, .
	g£t_∂ugö_∑ømëî
 = &
£tDeDupDïth
, .
	gd©a
 = 
NULL
},

72 { .
	g«me
 = 
PUD_USE_LOOPBACK_NAME
, .
	g£t_∂ugö_∑ømëî
 = &
£tU£Lo›back
, .
	gd©a
 = 
NULL
}

	@lib/pud/src/receiver.c

1 
	~"ª˚ivî.h
"

4 
	~"pud.h
"

5 
	~"°©e.h
"

6 
	~"posAvg.h
"

7 
	~"c⁄figuøti⁄.h
"

8 
	~"gpsC⁄vîsi⁄.h
"

9 
	~"√tw‹kI¡îÁ˚s.h
"

10 
	~"timîs.h
"

11 
	~"u∂ökG©eway.h
"

12 
	~"posFûe.h
"

15 
	~"ﬁ§_ty≥s.h
"

16 
	~"√t_ﬁ§.h
"

19 
	~<nmó/∑r£r.h
>

20 
	~<nmó/gm©h.h
>

21 
	~<nmó/£¡í˚.h
>

22 
	~<Ol§dPudWúeF‹m©/wúeF‹m©.h
>

29 
nmóPARSER
 
	gnmóP¨£r
;

36 
	s_MovemítTy≥
 {

37 
Tri°©eBoﬁón
 
	mmovög
;

39 
Tri°©eBoﬁón
 
	movîThªshﬁds
;

40 
Tri°©eBoﬁón
 
	m•ìdOvîThªshﬁd
;

41 
Tri°©eBoﬁón
 
	mhDi°™˚OvîThªshﬁd
;

42 
Tri°©eBoﬁón
 
	mvDi°™˚OvîThªshﬁd
;

44 
Tri°©eBoﬁón
 
	moutside
;

45 
Tri°©eBoﬁón
 
	moutsideHd›
;

46 
Tri°©eBoﬁón
 
	moutsideVd›
;

48 
Tri°©eBoﬁón
 
	möside
;

49 
Tri°©eBoﬁón
 
	mösideHd›
;

50 
Tri°©eBoﬁón
 
	mösideVd›
;

51 } 
	tMovemítTy≥
;

58 
Posôi⁄AvîageLi°
 
	gposôi⁄AvîageLi°
;

64 
	e_TimedTxI¡îÁ˚
 {

65 
	mTX_INTERFACE_OLSR
 = 1,

66 
	mTX_INTERFACE_UPLINK
 = 2

67 } 
	tTimedTxI¡îÁ˚
;

70 
	s_TønsmôGpsInf‹m©i⁄
 {

71 
boﬁ
 
	mposôi⁄Upd©ed
;

72 
Posôi⁄Upd©eE¡ry
 
	mtxPosôi⁄
;

73 
ﬁ§_ù_addr
 
	mtxG©eway
;

74 } 
	tTønsmôGpsInf‹m©i⁄
;

77 
TønsmôGpsInf‹m©i⁄
 
	gå™smôGpsInf‹m©i⁄
;

80 
	#TX_BUFFER_SIZE_FOR_OLSR
 1024

	)

90 
	$˛órMovemítTy≥
(
MovemítTy≥
 * 
ªsu…
) {

92 
ªsu…
->
movög
 = 
TRISTATE_BOOLEAN_UNKNOWN
;

93 
ªsu…
->
ovîThªshﬁds
 = 
TRISTATE_BOOLEAN_UNKNOWN
;

94 
ªsu…
->
•ìdOvîThªshﬁd
 = 
TRISTATE_BOOLEAN_UNKNOWN
;

95 
ªsu…
->
hDi°™˚OvîThªshﬁd
 = 
TRISTATE_BOOLEAN_UNKNOWN
;

96 
ªsu…
->
vDi°™˚OvîThªshﬁd
 = 
TRISTATE_BOOLEAN_UNKNOWN
;

97 
ªsu…
->
outside
 = 
TRISTATE_BOOLEAN_UNKNOWN
;

98 
ªsu…
->
outsideHd›
 = 
TRISTATE_BOOLEAN_UNKNOWN
;

99 
ªsu…
->
outsideVd›
 = 
TRISTATE_BOOLEAN_UNKNOWN
;

100 
ªsu…
->
öside
 = 
TRISTATE_BOOLEAN_UNKNOWN
;

101 
ªsu…
->
ösideHd›
 = 
TRISTATE_BOOLEAN_UNKNOWN
;

102 
ªsu…
->
ösideVd›
 = 
TRISTATE_BOOLEAN_UNKNOWN
;

103 
	}
}

115 
boﬁ
 
	$posôi⁄VÆid
(
Posôi⁄Upd©eE¡ry
 * 
posôi⁄
) {

116  (
	`nmó_INFO_has_fõld
(
posôi⁄
->
nmóInfo
.
smask
, 
FIX
)

117 && (
posôi⁄
->
nmóInfo
.
fix
 !
NMEA_FIX_BAD
));

118 
	}
}

127 
	$txToAŒOl§I¡îÁ˚s
(
TimedTxI¡îÁ˚
 
öãrÁ˚s
) {

129 
txBuf„r
[
TX_BUFFER_SIZE_FOR_OLSR
];

130 
txBuf„rByãsU£d
 = 0;

131 
	#txBuf„rByãsFªe
 ((
txBuf„r
Ë- 
txBuf„rByãsU£d
)

	)

142 
U∂ökMesßge
 * 
pu_u∂ök
 = (U∂ökMesßgê*Ë&
txBuf„r
[0];

143 
ﬁ§_mesßge
 * 
pu
 = &
pu_u∂ök
->
msg
.
ﬁ§Mesßge
;

144 
pu_size
 = 0;

145 
ﬁ§_ù_addr
 
g©eway
;

146 
MovemítSèã
 
exã∫ÆSèã
;

147 
nmóINFO
 
nmóInfo
;

149 
exã∫ÆSèã
 = 
	`gëExã∫ÆSèã
();

152 i‡(
	`posôi⁄VÆid
(&
å™smôGpsInf‹m©i⁄
.
txPosôi⁄
Ë&& !å™smôGpsInf‹m©i⁄.
posôi⁄Upd©ed
) {

153 
	`nmó_time_now
(&
å™smôGpsInf‹m©i⁄
.
txPosôi⁄
.
nmóInfo
.
utc
);

156 
nmóInfo
 = 
å™smôGpsInf‹m©i⁄
.
txPosôi⁄
.nmeaInfo;

157 
å™smôGpsInf‹m©i⁄
.
posôi⁄Upd©ed
 = 
Ál£
;

158 
g©eway
 = 
å™smôGpsInf‹m©i⁄
.
txG©eway
;

161 
txBuf„rByãsU£d
 +(
U∂ökHódî
);

162 
pu_size
 = 
	`gpsToOl§
(&
nmóInfo
, 
pu
, 
txBuf„rByãsFªe
,

163 ((
exã∫ÆSèã
 =
MOVEMENT_STATE_STATIONARY
Ë? 
	`gëUpd©eI¡îvÆSèti⁄¨y
(Ë: 
	`gëUpd©eI¡îvÆMovög
()));

164 
txBuf„rByãsU£d
 +
pu_size
;

169 i‡(((
öãrÁ˚s
 & 
TX_INTERFACE_OLSR
Ë!0Ë&& (
pu_size
 > 0)) {

170 
r
;

171 
öãrÁ˚
 *
i‚
;

172 
i‚
 = 
i‚ë
; i‚; i‚ = i‚->
öt_√xt
) {

173 
r
 = 
	`√t_outbuf„r_push
(
i‚
, 
pu
, 
pu_size
);

174 i‡(
r
 !(Ë
pu_size
) {

175 
	`pudEº‹
(

176 
Ál£
,

178 
i‚
->
öt_«me
,

179 ((
r
 == -1) ? "no buffer was found" :

180 (
r
 =0Ë? "thîêwa†nŸÉnoughÑoom i¿thêbuf„r" : "unknow¿ªas⁄"), 
pu_size
,Ñ);

185 i‡(
	`gëU£Lo›back
()) {

186 (Ë
	`∑ckëRe˚ivedFromOl§
(
pu
, 
NULL
, NULL);

191 i‡(((
öãrÁ˚s
 & 
TX_INTERFACE_UPLINK
Ë!0Ë&& 
	`isU∂ökAddrSë
()) {

192 
fd
 = 
	`gëDow∆ökSockëFd
();

193 i‡(
fd
 != -1) {

194 
ﬁ§_sockaddr
 * 
u∂ök_addr
 = 
	`gëU∂ökAddr
();

196 
U∂ökMesßge
 * 
˛_u∂ök
 = (U∂ökMesßgê*Ë&
txBuf„r
[
txBuf„rByãsU£d
];

197 
U∂ökClu°îLódî
 * 
˛
 = &
˛_u∂ök
->
msg
.
˛u°îLódî
;

198 
ﬁ§_ù_addr
 * 
˛_‹igö©‹
 = 
	`gëClu°îLódîOrigö©‹
(
ﬁ§_˙f
->
ù_vîsi⁄
, 
˛
);

199 
ﬁ§_ù_addr
 * 
˛_˛u°îLódî
 = 
	`gëClu°îLódîClu°îLódî
(
ﬁ§_˙f
->
ù_vîsi⁄
, 
˛
);

200 
˛_size
 =

201 (
U∂ökClu°îLódî
Ë- (
˛
->
Àadî
)

202 + ((
ﬁ§_˙f
->
ù_vîsi⁄
 =
AF_INET
Ë? (
˛
->
Àadî
.
v4
) :

203 (
˛
->
Àadî
.
v6
));

205 
u∂ökUpd©eI¡îvÆ
 =

206 (
exã∫ÆSèã
 =
MOVEMENT_STATE_STATIONARY
Ë? 
	`gëU∂ökUpd©eI¡îvÆSèti⁄¨y
(Ë: 
	`gëU∂ökUpd©eI¡îvÆMovög
();

214 i‡(
pu_size
 > 0) {

215 
PudOl§Posôi⁄Upd©e
 * 
pu_gpsMesßge
 = 
	`gëOl§MesßgePaylﬂd
(
ﬁ§_˙f
->
ù_vîsi⁄
, 
pu
);

217 
	`£tU∂ökMesßgeTy≥
(&
pu_u∂ök
->
hódî
, 
POSITION
);

218 
	`£tU∂ökMesßgeLígth
(&
pu_u∂ök
->
hódî
, 
pu_size
);

219 
	`£tU∂ökMesßgeIPv6
(&
pu_u∂ök
->
hódî
, (
ﬁ§_˙f
->
ù_vîsi⁄
 !
AF_INET
));

220 
	`£tU∂ökMesßgePaddög
(&
pu_u∂ök
->
hódî
, 0);

223 
	`£tVÆidôyTime
(&
pu_gpsMesßge
->
vÆidôyTime
, 
u∂ökUpd©eI¡îvÆ
);

231 
	`£tU∂ökMesßgeTy≥
(&
˛_u∂ök
->
hódî
, 
CLUSTERLEADER
);

232 
	`£tU∂ökMesßgeLígth
(&
˛_u∂ök
->
hódî
, 
˛_size
);

233 
	`£tU∂ökMesßgeIPv6
(&
˛_u∂ök
->
hódî
, (
ﬁ§_˙f
->
ù_vîsi⁄
 !
AF_INET
));

234 
	`£tU∂ökMesßgePaddög
(&
˛_u∂ök
->
hódî
, 0);

237 
	`£tClu°îLódîVîsi⁄
(
˛
, 
PUD_WIRE_FORMAT_VERSION
);

238 
	`£tVÆidôyTime
(&
˛
->
vÆidôyTime
, 
u∂ökUpd©eI¡îvÆ
);

241 
	`mem˝y
(
˛_‹igö©‹
, &
ﬁ§_˙f
->
maö_addr
, ol§_˙f->
ùsize
);

242 
	`mem˝y
(
˛_˛u°îLódî
, &
g©eway
, 
ﬁ§_˙f
->
ùsize
);

244 
txBuf„rByãsU£d
 +(
U∂ökHódî
);

245 
txBuf„rByãsU£d
 +
˛_size
;

247 
î∫o
 = 0;

248 i‡(
	`£ndto
(
fd
, &
txBuf„r
, 
txBuf„rByãsU£d
, 0, (
sockaddr
 *Ë&
u∂ök_addr
->
ö
,

249 (
u∂ök_addr
->
ö
)) < 0) {

250 
	`pudEº‹
(
åue
, "CouldÇŸ sídÅÿu∂ök (size=%u)", 
txBuf„rByãsU£d
);

254 
	}
}

266 
pud_ﬁ§_tx_timî_ˇŒback
(*
c⁄ãxt
 
__©åibuã__
 ((
unu£d
))) {

267 
txToAŒOl§I¡îÁ˚s
(
TX_INTERFACE_OLSR
);

276 
pud_u∂ök_timî_ˇŒback
(*
c⁄ãxt
 
__©åibuã__
 ((
unu£d
))) {

277 
txToAŒOl§I¡îÁ˚s
(
TX_INTERFACE_UPLINK
);

283 
	$ª°¨tOl§Timî
(
MovemítSèã
 
exã∫ÆSèã
) {

284 i‡(!
	`ª°¨tOl§TxTimî
(

285 (
exã∫ÆSèã
 =
MOVEMENT_STATE_STATIONARY
Ë? 
	`gëUpd©eI¡îvÆSèti⁄¨y
() :

286 
	`gëUpd©eI¡îvÆMovög
(), &
pud_ﬁ§_tx_timî_ˇŒback
)) {

287 
	`pudEº‹
(0, "CouldÇotÑestart OLSRÅxÅimer,ÇoÖeriodic"

290 
	}
}

295 
	$ª°¨tU∂ökTimî
(
MovemítSèã
 
exã∫ÆSèã
) {

296 i‡(!
	`ª°¨tU∂ökTxTimî
(

297 (
exã∫ÆSèã
 =
MOVEMENT_STATE_STATIONARY
Ë? 
	`gëU∂ökUpd©eI¡îvÆSèti⁄¨y
() :

298 
	`gëU∂ökUpd©eI¡îvÆMovög
(),

299 &
pud_u∂ök_timî_ˇŒback
)) {

300 
	`pudEº‹
(0, "CouldÇotÑestart uplinkÅimer,ÇoÖeriodic"

303 
	}
}

305 
	$doImmedüãTønsmô
(
MovemítSèã
 
exã∫ÆSèã
) {

306 
TimedTxI¡îÁ˚
 
öãrÁ˚s
 = 
TX_INTERFACE_OLSR
;

307 
	`ª°¨tOl§Timî
(
exã∫ÆSèã
);

309 i‡(
	`isU∂ökAddrSë
()) {

310 
öãrÁ˚s
 |
TX_INTERFACE_UPLINK
;

311 
	`ª°¨tU∂ökTimî
(
exã∫ÆSèã
);

315 
	`txToAŒOl§I¡îÁ˚s
(
öãrÁ˚s
);

316 
	}
}

324 
pud_g©eway_timî_ˇŒback
(*
c⁄ãxt
 
__©åibuã__
 ((
unu£d
))) {

325 
ﬁ§_ù_addr
 
	gbe°G©eway
;

326 
boﬁ
 
	gexã∫ÆSèãCh™ge
;

327 
MovemítSèã
 
	gexã∫ÆSèã
;

328 
Tri°©eBoﬁón
 
	gmovögNow
 = 
TRISTATE_BOOLEAN_UNSET
;

330 
gëBe°U∂ökG©eway
(&
be°G©eway
);

336 i‡(!
ùequÆ
(&
be°G©eway
, &
å™smôGpsInf‹m©i⁄
.
txG©eway
)) {

337 
	gmovögNow
 = 
TRISTATE_BOOLEAN_SET
;

344 
dëîmöeSèãWôhHy°îesis
(
SUBSTATE_GATEWAY
, 
movögNow
, &
exã∫ÆSèã
, &
exã∫ÆSèãCh™ge
, 
NULL
);

350 i‡(
	gmovögNow
 =
TRISTATE_BOOLEAN_SET
) {

351 
å™smôGpsInf‹m©i⁄
.
txG©eway
 = 
be°G©eway
;

354 i‡(
	gexã∫ÆSèãCh™ge
) {

355 
doImmedüãTønsmô
(
exã∫ÆSèã
);

372 
	$dëemöeMovögFromPosôi⁄
(
Posôi⁄Upd©eE¡ry
 * 
avg
, Posôi⁄Upd©eE¡ry * 
œ°Tx
, 
MovemítTy≥
 * 
ªsu…
) {

374 
boﬁ
 
avgHasS≥ed
;

375 
boﬁ
 
avgHasPos
;

376 
boﬁ
 
avgHasHd›
;

377 
boﬁ
 
avgHasElv
;

378 
boﬁ
 
avgHasVd›
;

380  
boﬁ
 
œ°TxHasPos
;

381 
boﬁ
 
œ°TxHasHd›
;

382 
boﬁ
 
œ°TxHasElv
;

383 
boﬁ
 
œ°TxHasVd›
;

386 
d›Mu…ùlõr
;

387 
avgHd›
;

388 
œ°TxHd›
;

389 
avgVd›
;

390 
œ°TxVd›
;

393 
hDi°™˚
;

394 
vDi°™˚
;

395 
hd›Di°™˚F‹Outside
;

396 
hd›Di°™˚F‹Inside
;

397 
vd›Di°™˚F‹Outside
;

398 
vd›Di°™˚F‹Inside
;

399 
boﬁ
 
hDi°™˚VÆid
;

400 
boﬁ
 
hd›Di°™˚VÆid
;

401 
boﬁ
 
vDi°™˚VÆid
;

402 
boﬁ
 
vd›Di°™˚VÆid
;

414 i‡(!
	`posôi⁄VÆid
(
avg
)) {

415 
ªsu…
->
movög
 = 
TRISTATE_BOOLEAN_UNKNOWN
;

421 i‡(!
	`posôi⁄VÆid
(
œ°Tx
)) {

422 
ªsu…
->
movög
 = 
TRISTATE_BOOLEAN_UNKNOWN
;

429 
avgHasS≥ed
 = 
	`nmó_INFO_has_fõld
(
avg
->
nmóInfo
.
smask
, 
SPEED
);

430 
avgHasPos
 = 
	`nmó_INFO_has_fõld
(
avg
->
nmóInfo
.
smask
, 
LAT
)

431 && 
	`nmó_INFO_has_fõld
(
avg
->
nmóInfo
.
smask
, 
LON
);

432 
avgHasHd›
 = 
	`nmó_INFO_has_fõld
(
avg
->
nmóInfo
.
smask
, 
HDOP
);

433 
avgHasElv
 = 
	`nmó_INFO_has_fõld
(
avg
->
nmóInfo
.
smask
, 
ELV
);

434 
avgHasVd›
 = 
	`nmó_INFO_has_fõld
(
avg
->
nmóInfo
.
smask
, 
VDOP
);

437 
œ°TxHasPos
 = 
	`nmó_INFO_has_fõld
(
œ°Tx
->
nmóInfo
.
smask
, 
LAT
)

438 && 
	`nmó_INFO_has_fõld
(
œ°Tx
->
nmóInfo
.
smask
, 
LON
);

439 
œ°TxHasHd›
 = 
	`nmó_INFO_has_fõld
(
œ°Tx
->
nmóInfo
.
smask
, 
HDOP
);

440 
œ°TxHasElv
 = 
	`nmó_INFO_has_fõld
(
œ°Tx
->
nmóInfo
.
smask
, 
ELV
);

441 
œ°TxHasVd›
 = 
	`nmó_INFO_has_fõld
(
œ°Tx
->
nmóInfo
.
smask
, 
VDOP
);

444 
d›Mu…ùlõr
 = 
	`gëD›Mu…ùlõr
();

445 
avgHd›
 = 
avgHasHd›
 ? 
avg
->
nmóInfo
.
HDOP
 : 
	`gëDeÁu…Hd›
();

446 
œ°TxHd›
 = 
œ°TxHasHd›
 ? 
œ°Tx
->
nmóInfo
.
HDOP
 : 
	`gëDeÁu…Hd›
();

447 
avgVd›
 = 
avgHasVd›
 ? 
avg
->
nmóInfo
.
VDOP
 : 
	`gëDeÁu…Vd›
();

448 
œ°TxVd›
 = 
œ°TxHasVd›
 ? 
œ°Tx
->
nmóInfo
.
VDOP
 : 
	`gëDeÁu…Vd›
();

455 i‡(
avgHasPos
 && 
œ°TxHasPos
) {

456 
nmóPOS
 
avgPos
;

457 
nmóPOS
 
œ°TxPos
;

459 
avgPos
.
œt
 = 
	`nmó_degªe2ødün
(
avg
->
nmóInfo
.lat);

460 
avgPos
.
l⁄
 = 
	`nmó_degªe2ødün
(
avg
->
nmóInfo
.lon);

462 
œ°TxPos
.
œt
 = 
	`nmó_degªe2ødün
(
œ°Tx
->
nmóInfo
.lat);

463 
œ°TxPos
.
l⁄
 = 
	`nmó_degªe2ødün
(
œ°Tx
->
nmóInfo
.lon);

465 
hDi°™˚
 = 
	`Ábs
(
	`nmó_di°™˚_ñlùsoid
(&
avgPos
, &
œ°TxPos
, 
NULL
, NULL));

466 
hDi°™˚VÆid
 = 
åue
;

468 
hDi°™˚VÆid
 = 
Ál£
;

472 i‡(
avgHasHd›
 || 
œ°TxHasHd›
) {

473 
hd›Di°™˚F‹Outside
 = 
d›Mu…ùlõr
 * (
œ°TxHd›
 + 
avgHd›
);

474 
hd›Di°™˚F‹Inside
 = 
d›Mu…ùlõr
 * (
œ°TxHd›
 - 
avgHd›
);

475 
hd›Di°™˚VÆid
 = 
åue
;

477 
hd›Di°™˚VÆid
 = 
Ál£
;

481 i‡(
avgHasElv
 && 
œ°TxHasElv
) {

482 
vDi°™˚
 = 
	`Ábs
(
œ°Tx
->
nmóInfo
.
ñv
 - 
avg
->nmeaInfo.elv);

483 
vDi°™˚VÆid
 = 
åue
;

485 
vDi°™˚VÆid
 = 
Ál£
;

489 i‡(
avgHasVd›
 || 
œ°TxHasVd›
) {

490 
vd›Di°™˚F‹Outside
 = 
d›Mu…ùlõr
 * (
œ°TxVd›
 + 
avgVd›
);

491 
vd›Di°™˚F‹Inside
 = 
d›Mu…ùlõr
 * (
œ°TxVd›
 - 
avgVd›
);

492 
vd›Di°™˚VÆid
 = 
åue
;

494 
vd›Di°™˚VÆid
 = 
Ál£
;

503 i‡(
avgHasS≥ed
) {

504 i‡(
avg
->
nmóInfo
.
•ìd
 >
	`gëMovögS≥edThªshﬁd
()) {

505 
ªsu…
->
•ìdOvîThªshﬁd
 = 
TRISTATE_BOOLEAN_SET
;

507 
ªsu…
->
•ìdOvîThªshﬁd
 = 
TRISTATE_BOOLEAN_UNSET
;

520 i‡(
avgHasPos
 && !
œ°TxHasPos
) {

521 
ªsu…
->
hDi°™˚OvîThªshﬁd
 = 
TRISTATE_BOOLEAN_SET
;

522 } i‡(
hDi°™˚VÆid
) {

523 i‡(
hDi°™˚
 >
	`gëMovögDi°™˚Thªshﬁd
()) {

524 
ªsu…
->
hDi°™˚OvîThªshﬁd
 = 
TRISTATE_BOOLEAN_SET
;

526 
ªsu…
->
hDi°™˚OvîThªshﬁd
 = 
TRISTATE_BOOLEAN_UNSET
;

538 i‡(
hd›Di°™˚VÆid
) {

540 i‡(
hDi°™˚
 > 
hd›Di°™˚F‹Outside
) {

541 
ªsu…
->
outsideHd›
 = 
TRISTATE_BOOLEAN_SET
;

543 
ªsu…
->
outsideHd›
 = 
TRISTATE_BOOLEAN_UNSET
;

547 i‡(
hDi°™˚
 <
hd›Di°™˚F‹Inside
) {

548 
ªsu…
->
ösideHd›
 = 
TRISTATE_BOOLEAN_SET
;

550 
ªsu…
->
ösideHd›
 = 
TRISTATE_BOOLEAN_UNSET
;

564 i‡(
avgHasElv
 && !
œ°TxHasElv
) {

565 
ªsu…
->
vDi°™˚OvîThªshﬁd
 = 
TRISTATE_BOOLEAN_SET
;

566 } i‡(
vDi°™˚VÆid
) {

567 i‡(
vDi°™˚
 >
	`gëMovögDi°™˚Thªshﬁd
()) {

568 
ªsu…
->
vDi°™˚OvîThªshﬁd
 = 
TRISTATE_BOOLEAN_SET
;

570 
ªsu…
->
vDi°™˚OvîThªshﬁd
 = 
TRISTATE_BOOLEAN_UNSET
;

582 i‡(
vd›Di°™˚VÆid
) {

584 i‡(
vDi°™˚
 > 
vd›Di°™˚F‹Outside
) {

585 
ªsu…
->
outsideVd›
 = 
TRISTATE_BOOLEAN_SET
;

587 
ªsu…
->
outsideVd›
 = 
TRISTATE_BOOLEAN_UNSET
;

591 i‡(
vDi°™˚
 <
vd›Di°™˚F‹Inside
) {

592 
ªsu…
->
ösideVd›
 = 
TRISTATE_BOOLEAN_SET
;

594 
ªsu…
->
ösideVd›
 = 
TRISTATE_BOOLEAN_UNSET
;

604 i‡((
ªsu…
->
ösideHd›
 =
TRISTATE_BOOLEAN_SET
Ë&& (ªsu…->
ösideVd›
 == TRISTATE_BOOLEAN_SET)) {

605 
ªsu…
->
öside
 = 
TRISTATE_BOOLEAN_SET
;

606 } i‡((
ªsu…
->
ösideHd›
 =
TRISTATE_BOOLEAN_UNSET
Ë|| (ªsu…->
ösideVd›
 == TRISTATE_BOOLEAN_UNSET)) {

607 
ªsu…
->
öside
 = 
TRISTATE_BOOLEAN_UNSET
;

611 i‡((
ªsu…
->
outsideHd›
 =
TRISTATE_BOOLEAN_SET
Ë|| (ªsu…->
outsideVd›
 == TRISTATE_BOOLEAN_SET)) {

612 
ªsu…
->
outside
 = 
TRISTATE_BOOLEAN_SET
;

613 } i‡((
ªsu…
->
outsideHd›
 =
TRISTATE_BOOLEAN_UNSET
)

614 || (
ªsu…
->
outsideVd›
 =
TRISTATE_BOOLEAN_UNSET
)) {

615 
ªsu…
->
outside
 = 
TRISTATE_BOOLEAN_UNSET
;

619 i‡((
ªsu…
->
•ìdOvîThªshﬁd
 =
TRISTATE_BOOLEAN_SET
)

620 || (
ªsu…
->
hDi°™˚OvîThªshﬁd
 =
TRISTATE_BOOLEAN_SET
)

621 || (
ªsu…
->
vDi°™˚OvîThªshﬁd
 =
TRISTATE_BOOLEAN_SET
)) {

622 
ªsu…
->
ovîThªshﬁds
 = 
TRISTATE_BOOLEAN_SET
;

623 } i‡((
ªsu…
->
•ìdOvîThªshﬁd
 =
TRISTATE_BOOLEAN_UNSET
)

624 || (
ªsu…
->
hDi°™˚OvîThªshﬁd
 =
TRISTATE_BOOLEAN_UNSET
)

625 || (
ªsu…
->
vDi°™˚OvîThªshﬁd
 =
TRISTATE_BOOLEAN_UNSET
)) {

626 
ªsu…
->
ovîThªshﬁds
 = 
TRISTATE_BOOLEAN_UNSET
;

630 i‡((
ªsu…
->
ovîThªshﬁds
 =
TRISTATE_BOOLEAN_SET
Ë|| (ªsu…->
outside
 == TRISTATE_BOOLEAN_SET)) {

631 
ªsu…
->
movög
 = 
TRISTATE_BOOLEAN_SET
;

632 } i‡((
ªsu…
->
ovîThªshﬁds
 =
TRISTATE_BOOLEAN_UNSET
)

633 && (
ªsu…
->
outside
 =
TRISTATE_BOOLEAN_UNSET
)) {

634 
ªsu…
->
movög
 = 
TRISTATE_BOOLEAN_UNSET
;

638 
	}
}

654 
boﬁ
 
	$ª˚ivîUpd©eGpsInf‹m©i⁄
(* 
rxBuf„r
, 
size_t
 
rxCou¡
) {

655 c⁄° * 
rxBuf„rPªfix
 = "$GP";

656 c⁄° 
size_t
 
rxBuf„rPªfixLígth
 = 3;

658 
boﬁ
 
ªtvÆ
 = 
Ál£
;

659 
Posôi⁄Upd©eE¡ry
 * 
öcomögE¡ry
;

660 
Posôi⁄Upd©eE¡ry
 * 
posAvgE¡ry
;

661 
MovemítTy≥
 
movemítResu…
;

662 
boﬁ
 
subSèãExã∫ÆSèãCh™ge
;

663 
boﬁ
 
exã∫ÆSèãCh™ge
;

664 
boﬁ
 
upd©eTønsmôGpsInf‹m©i⁄
 = 
Ál£
;

665 
Posôi⁄Upd©eE¡ry
 
txPosôi⁄
;

666 
MovemítSèã
 
exã∫ÆSèã
;

669 i‡((
rxCou¡
 < 
rxBuf„rPªfixLígth
Ë|| (
	`°∫cmp
((*Ë
rxBuf„r
,

670 
rxBuf„rPªfix
, 
rxBuf„rPªfixLígth
) != 0)) {

671  
åue
;

675 
öcomögE¡ry
 = 
	`gëPosôi⁄AvîageE¡ry
(&
posôi⁄AvîageLi°
, 
INCOMING
);

676 
	`nmó_zîo_INFO
(&
öcomögE¡ry
->
nmóInfo
);

677 
	`nmó_∑r£
(&
nmóP¨£r
, (*Ë
rxBuf„r
, 
rxCou¡
,

678 &
öcomögE¡ry
->
nmóInfo
);

681 i‡(
öcomögE¡ry
->
nmóInfo
.
smask
 =
GPNON
) {

682 
ªtvÆ
 = 
åue
;

683 
íd
;

686 
	`nmó_INFO_ßnôi£
(&
öcomögE¡ry
->
nmóInfo
);

689 
	`nmó_INFO_unô_c⁄vîsi⁄
(&
öcomögE¡ry
->
nmóInfo
);

695 i‡(
	`gëI¡î«lSèã
(
SUBSTATE_POSITION
Ë=
MOVEMENT_STATE_MOVING
) {

697 
	`ÊushPosôi⁄AvîageLi°
(&
posôi⁄AvîageLi°
);

699 
	`addNewPosôi⁄ToAvîage
(&
posôi⁄AvîageLi°
, 
öcomögE¡ry
);

700 
posAvgE¡ry
 = 
	`gëPosôi⁄AvîageE¡ry
(&
posôi⁄AvîageLi°
, 
AVERAGE
);

706 
	`˛órMovemítTy≥
(&
movemítResu…
);

708 
txPosôi⁄
 = 
å™smôGpsInf‹m©i⁄
.txPosition;

710 
	`dëemöeMovögFromPosôi⁄
(
posAvgE¡ry
, &
txPosôi⁄
, &
movemítResu…
);

716 
	`dëîmöeSèãWôhHy°îesis
(
SUBSTATE_POSITION
, 
movemítResu…
.
movög
, &
exã∫ÆSèã
, &
exã∫ÆSèãCh™ge
,

717 &
subSèãExã∫ÆSèãCh™ge
);

723 
upd©eTønsmôGpsInf‹m©i⁄
 = 
subSèãExã∫ÆSèãCh™ge


724 || (
	`posôi⁄VÆid
(
posAvgE¡ry
Ë&& !posôi⁄VÆid(&
txPosôi⁄
))

725 || (
movemítResu…
.
öside
 =
TRISTATE_BOOLEAN_SET
);

727 i‡((
exã∫ÆSèã
 =
MOVEMENT_STATE_MOVING
Ë|| 
upd©eTønsmôGpsInf‹m©i⁄
) {

728 
å™smôGpsInf‹m©i⁄
.
txPosôi⁄
.
nmóInfo
 = 
posAvgE¡ry
->nmeaInfo;

729 
å™smôGpsInf‹m©i⁄
.
posôi⁄Upd©ed
 = 
åue
;

732 i‡(
exã∫ÆSèãCh™ge
) {

733 
	`doImmedüãTønsmô
(
exã∫ÆSèã
);

736 
ªtvÆ
 = 
åue
;

738 
íd
:

739  
ªtvÆ
;

740 
	}
}

749 
boﬁ
 
	$°¨tRe˚ivî
() {

750 
MovemítSèã
 
exã∫ÆSèã
;

751 * 
posôi⁄Fûe
 = 
	`gëPosôi⁄Fûe
();

753 i‡(!
	`nmó_∑r£r_öô
(&
nmóP¨£r
)) {

754 
	`pudEº‹
(
Ál£
, "CouldÇot initialise NMEAÖarser");

755  
Ál£
;

758 i‡(
posôi⁄Fûe
) {

759 
	`ªadPosôi⁄Fûe
(
posôi⁄Fûe
, &
å™smôGpsInf‹m©i⁄
.
txPosôi⁄
.
nmóInfo
);

761 
	`nmó_zîo_INFO
(&
å™smôGpsInf‹m©i⁄
.
txPosôi⁄
.
nmóInfo
);

763 
å™smôGpsInf‹m©i⁄
.
txG©eway
 = 
ﬁ§_˙f
->
maö_addr
;

764 
å™smôGpsInf‹m©i⁄
.
posôi⁄Upd©ed
 = 
Ál£
;

766 
	`öôPosôi⁄AvîageLi°
(&
posôi⁄AvîageLi°
, 
	`gëAvîageDïth
());

768 i‡(!
	`öôOl§TxTimî
()) {

769 
	`°›Re˚ivî
();

770  
Ál£
;

773 i‡(!
	`öôU∂ökTxTimî
()) {

774 
	`°›Re˚ivî
();

775  
Ál£
;

778 i‡(!
	`öôG©ewayTimî
()) {

779 
	`°›Re˚ivî
();

780  
Ál£
;

783 
exã∫ÆSèã
 = 
	`gëExã∫ÆSèã
();

784 
	`ª°¨tOl§Timî
(
exã∫ÆSèã
);

785 
	`ª°¨tU∂ökTimî
(
exã∫ÆSèã
);

786 i‡(!
	`ª°¨tG©ewayTimî
(
	`gëG©ewayDëîmö©i⁄I¡îvÆ
(), &
pud_g©eway_timî_ˇŒback
)) {

787 
	`pudEº‹
(0, "CouldÇot start gatewayÅimer");

788 
	`°›Re˚ivî
();

789  
Ál£
;

792  
åue
;

793 
	}
}

798 
	$°›Re˚ivî
() {

799 
	`de°royG©ewayTimî
();

800 
	`de°royU∂ökTxTimî
();

801 
	`de°royOl§TxTimî
();

803 
	`de°royPosôi⁄AvîageLi°
(&
posôi⁄AvîageLi°
);

805 
	`nmó_zîo_INFO
(&
å™smôGpsInf‹m©i⁄
.
txPosôi⁄
.
nmóInfo
);

806 
å™smôGpsInf‹m©i⁄
.
txG©eway
 = 
ﬁ§_˙f
->
maö_addr
;

807 
å™smôGpsInf‹m©i⁄
.
posôi⁄Upd©ed
 = 
Ál£
;

809 
	`nmó_∑r£r_de°roy
(&
nmóP¨£r
);

810 
	}
}

	@lib/pud/src/receiver.h

1 #i‚de‡
_PUD_RECEIVER_H_


2 
	#_PUD_RECEIVER_H_


	)

9 
	~<°ddef.h
>

10 
	~<°dboﬁ.h
>

12 
boﬁ
 
°¨tRe˚ivî
();

13 
°›Re˚ivî
();

15 
boﬁ
 
ª˚ivîUpd©eGpsInf‹m©i⁄
(* 
rxBuf„r
, 
size_t
 
rxCou¡
);

	@lib/pud/src/state.c

1 
	~"°©e.h
"

4 
	~"c⁄figuøti⁄.h
"

15 
	s_SubSèãTy≥
 {

16 
MovemítSèã
 
	möã∫ÆSèã
;

17 
	mhy°îesisCou¡î
;

18 
	mhy°îesisCou¡îToSèti⁄¨y
;

19 
	mhy°îesisCou¡îToMovög
;

20 
MovemítSèã
 
	mexã∫ÆSèã
;

21 } 
	tSubSèãTy≥
;

24 
	s_SèãTy≥
 {

25 
SubSèãTy≥
 
	msub°©e
[
SUBSTATE_COUNT
];

26 
MovemítSèã
 
	mexã∫ÆSèã
;

27 } 
	tSèãTy≥
;

34 
SèãTy≥
 
	g°©e
;

40 
	$öôSèã
() {

41 
°©e
.
sub°©e
[
SUBSTATE_POSITION
].
öã∫ÆSèã
 = 
MOVEMENT_STATE_STATIONARY
;

42 
°©e
.
sub°©e
[
SUBSTATE_POSITION
].
hy°îesisCou¡î
 = 0;

43 
°©e
.
sub°©e
[
SUBSTATE_POSITION
].
hy°îesisCou¡îToSèti⁄¨y
 = 
	`gëHy°îesisCou¡ToSèti⁄¨y
();

44 
°©e
.
sub°©e
[
SUBSTATE_POSITION
].
hy°îesisCou¡îToMovög
 = 
	`gëHy°îesisCou¡ToMovög
();

45 
°©e
.
sub°©e
[
SUBSTATE_POSITION
].
exã∫ÆSèã
 = 
MOVEMENT_STATE_STATIONARY
;

46 
°©e
.
sub°©e
[
SUBSTATE_GATEWAY
].
öã∫ÆSèã
 = 
MOVEMENT_STATE_MOVING
;

47 
°©e
.
sub°©e
[
SUBSTATE_GATEWAY
].
hy°îesisCou¡î
 = 0;

48 
°©e
.
sub°©e
[
SUBSTATE_GATEWAY
].
hy°îesisCou¡îToSèti⁄¨y
 = 
	`gëG©ewayHy°îesisCou¡ToSèti⁄¨y
();

49 
°©e
.
sub°©e
[
SUBSTATE_GATEWAY
].
hy°îesisCou¡îToMovög
 = 
	`gëG©ewayHy°îesisCou¡ToMovög
();

50 
°©e
.
sub°©e
[
SUBSTATE_GATEWAY
].
exã∫ÆSèã
 = 
MOVEMENT_STATE_MOVING
;

51 
°©e
.
exã∫ÆSèã
 = 
MOVEMENT_STATE_MOVING
;

52 
	}
}

54 
MovemítSèã
 
	$gëExã∫ÆSèã
() {

55  
°©e
.
exã∫ÆSèã
;

56 
	}
}

71 
	$dëîmöeSèãWôhHy°îesis
(
SubSèãIndex
 
subSèãIndex
, 
Tri°©eBoﬁón
 
movögNow
, 
MovemítSèã
 * 
exã∫ÆSèã
,

72 
boﬁ
 * 
exã∫ÆSèãCh™ge
, boﬁ * 
subSèãExã∫ÆSèãCh™ge
) {

73 
MovemítSèã
 
√wSèã
;

74 
boﬁ
 
öã∫ÆSèãCh™ge
;

75 
boﬁ
 
subSèãExã∫ÆSèãCh™ged
;

76 
SubSèãTy≥
 * 
subSèã
 = &
°©e
.
sub°©e
[
subSèãIndex
];

82 i‡(
movögNow
 =
TRISTATE_BOOLEAN_SET
) {

83 
√wSèã
 = 
MOVEMENT_STATE_MOVING
;

84 } i‡(
movögNow
 =
TRISTATE_BOOLEAN_UNSET
) {

85 
√wSèã
 = 
MOVEMENT_STATE_STATIONARY
;

88 
√wSèã
 = 
subSèã
->
öã∫ÆSèã
;

90 
öã∫ÆSèãCh™ge
 = (
subSèã
->
öã∫ÆSèã
 !
√wSèã
);

91 
subSèã
->
öã∫ÆSèã
 = 
√wSèã
;

97 i‡(
öã∫ÆSèãCh™ge
) {

100 
subSèã
->
hy°îesisCou¡î
 = 0;

106 
√wSèã
 = 
subSèã
->
exã∫ÆSèã
;

107 i‡(
subSèã
->
öã∫ÆSèã
 !subSèã->
exã∫ÆSèã
) {

108 
subSèã
->
öã∫ÆSèã
) {

109 
MOVEMENT_STATE_STATIONARY
:

113 
subSèã
->
hy°îesisCou¡î
++;

115 i‡(
subSèã
->
hy°îesisCou¡î
 >subSèã->
hy°îesisCou¡îToSèti⁄¨y
) {

117 
√wSèã
 = 
MOVEMENT_STATE_STATIONARY
;

121 
MOVEMENT_STATE_MOVING
:

125 
subSèã
->
hy°îesisCou¡î
++;

127 i‡(
subSèã
->
hy°îesisCou¡î
 >subSèã->
hy°îesisCou¡îToMovög
) {

129 
√wSèã
 = 
MOVEMENT_STATE_MOVING
;

139 
subSèãExã∫ÆSèãCh™ged
 = (
subSèã
->
exã∫ÆSèã
 !
√wSèã
);

140 i‡(
subSèãExã∫ÆSèãCh™ge
) {

141 *
subSèãExã∫ÆSèãCh™ge
 = 
subSèãExã∫ÆSèãCh™ged
;

143 
subSèã
->
exã∫ÆSèã
 = 
√wSèã
;

149 i‡(
exã∫ÆSèãCh™ge
) {

150 *
exã∫ÆSèãCh™ge
 = 
Ál£
;

152 i‡(
subSèãExã∫ÆSèãCh™ged
) {

153 
boﬁ
 
å™sôi⁄
;

155 i‡(
√wSèã
 =
MOVEMENT_STATE_STATIONARY
) {

157 
i
 = 0;

159 
å™sôi⁄
 = 
åue
;

160 
i
 = 0; i < 
SUBSTATE_COUNT
; i++) {

161 
å™sôi⁄
 =Åønsôi⁄ && (
°©e
.
sub°©e
[
i
].
exã∫ÆSèã
 =
√wSèã
);

165 
å™sôi⁄
 = 
åue
;

168 i‡(
å™sôi⁄
) {

169 i‡(
exã∫ÆSèãCh™ge
) {

170 *
exã∫ÆSèãCh™ge
 = (
°©e
.
exã∫ÆSèã
 !
√wSèã
);

172 
°©e
.
exã∫ÆSèã
 = 
√wSèã
;

176 i‡(
exã∫ÆSèã
) {

177 *
exã∫ÆSèã
 = 
°©e
.externalState;

179 
	}
}

181 
MovemítSèã
 
	$gëI¡î«lSèã
(
SubSèãIndex
 
subSèãIndex
) {

182  
°©e
.
sub°©e
[
subSèãIndex
].
öã∫ÆSèã
;

183 
	}
}

	@lib/pud/src/state.h

1 #i‚de‡
_PUD_STATE_H_


2 
	#_PUD_STATE_H_


	)

9 
	~<°dboﬁ.h
>

16 
	e_Tri°©eBoﬁón
 {

17 
	mTRISTATE_BOOLEAN_UNKNOWN
 = 0,

18 
	mTRISTATE_BOOLEAN_UNSET
 = 1,

19 
	mTRISTATE_BOOLEAN_SET
 = 2

20 } 
	tTri°©eBoﬁón
;

22 
	#Tri°©eBoﬁónToSåög
(
s
Ë((†=
TRISTATE_BOOLEAN_SET
) ? "set" : \

23 (
s
 =
TRISTATE_BOOLEAN_UNSET
) ? "unset" : \

24 "unknown")

	)

27 
	e_MovemítSèã
 {

28 
	mMOVEMENT_STATE_STATIONARY
 = 0,

29 
	mMOVEMENT_STATE_MOVING
 = 1

30 } 
	tMovemítSèã
;

32 
	#MovemítSèãToSåög
(
s
Ë((†=
MOVEMENT_STATE_MOVING
) ? "moving" : \

33 "°©i⁄¨y")

	)

36 
	e_SubSèãIndex
 {

37 
	mSUBSTATE_POSITION
 = 0,

38 
	mSUBSTATE_GATEWAY
 = 1,

39 
	mSUBSTATE_COUNT
 = 2

40 } 
	tSubSèãIndex
;

46 
öôSèã
();

47 
MovemítSèã
 
gëExã∫ÆSèã
();

48 
MovemítSèã
 
gëI¡î«lSèã
(
SubSèãIndex
 
subSèãIndex
);

49 
dëîmöeSèãWôhHy°îesis
(
SubSèãIndex
 
subSèãIndex
, 
Tri°©eBoﬁón
 
movögNow
, 
MovemítSèã
 * 
exã∫ÆSèã
,

50 
boﬁ
 * 
exã∫ÆSèãCh™ge
, boﬁ * 
subSèãExã∫ÆSèãCh™ge
);

	@lib/pud/src/timers.c

1 
	~"timîs.h
"

4 
	~"pud.h
"

7 
	~"ﬁ§_cookõ.h
"

16 
ﬁ§_cookõ_öfo
 *
	gpud_ﬁ§_tx_timî_cookõ
 = 
NULL
;

19 
timî_íåy
 * 
	gpud_ﬁ§_tx_timî
 = 
NULL
;

33 
	$°¨tOl§TxTimî
(
öãrvÆ
, 
timî_cb_func
 
cb_func
) {

34 i‡(
pud_ﬁ§_tx_timî
 =
NULL
) {

35 
pud_ﬁ§_tx_timî
 = 
	`ﬁ§_°¨t_timî
(
öãrvÆ
 * 
MSEC_PER_SEC
, 0,

36 
OLSR_TIMER_PERIODIC
, 
cb_func
, 
NULL
,

37 
pud_ﬁ§_tx_timî_cookõ
);

38 i‡(
pud_ﬁ§_tx_timî
 =
NULL
) {

39  
Ál£
;

43  
åue
;

44 
	}
}

49 
	$°›Ol§TxTimî
() {

50 i‡(
pud_ﬁ§_tx_timî
 !
NULL
) {

51 
	`ﬁ§_°›_timî
(
pud_ﬁ§_tx_timî
);

52 
pud_ﬁ§_tx_timî
 = 
NULL
;

54 
	}
}

68 
	$ª°¨tOl§TxTimî
(
öãrvÆ
, 
timî_cb_func
 
cb_func
) {

69 
	`°›Ol§TxTimî
();

70  
	`°¨tOl§TxTimî
(
öãrvÆ
, 
cb_func
);

71 
	}
}

80 
	$öôOl§TxTimî
() {

81 i‡(
pud_ﬁ§_tx_timî_cookõ
 =
NULL
) {

82 
pud_ﬁ§_tx_timî_cookõ
 = 
	`ﬁ§_Æloc_cookõ
(

83 
PUD_PLUGIN_ABBR
 ": OLSRÅxÅimî", 
OLSR_COOKIE_TYPE_TIMER
);

84 i‡(
pud_ﬁ§_tx_timî_cookõ
 =
NULL
) {

85  
Ál£
;

88  
åue
;

89 
	}
}

94 
	$de°royOl§TxTimî
() {

95 
	`°›Ol§TxTimî
();

96 i‡(
pud_ﬁ§_tx_timî_cookõ
 !
NULL
) {

97 
	`ﬁ§_‰ì_cookõ
(
pud_ﬁ§_tx_timî_cookõ
);

98 
pud_ﬁ§_tx_timî_cookõ
 = 
NULL
;

100 
	}
}

107 
ﬁ§_cookõ_öfo
 *
	gpud_u∂ök_tx_timî_cookõ
 = 
NULL
;

110 
timî_íåy
 * 
	gpud_u∂ök_tx_timî
 = 
NULL
;

124 
	$°¨tU∂ökTxTimî
(
öãrvÆ
, 
timî_cb_func
 
cb_func
) {

125 i‡(
pud_u∂ök_tx_timî
 =
NULL
) {

126 
pud_u∂ök_tx_timî
 = 
	`ﬁ§_°¨t_timî
(
öãrvÆ
 * 
MSEC_PER_SEC
, 0,

127 
OLSR_TIMER_PERIODIC
, 
cb_func
, 
NULL
,

128 
pud_u∂ök_tx_timî_cookõ
);

129 i‡(
pud_u∂ök_tx_timî
 =
NULL
) {

130  
Ál£
;

134  
åue
;

135 
	}
}

140 
	$°›U∂ökTxTimî
() {

141 i‡(
pud_u∂ök_tx_timî
 !
NULL
) {

142 
	`ﬁ§_°›_timî
(
pud_u∂ök_tx_timî
);

143 
pud_u∂ök_tx_timî
 = 
NULL
;

145 
	}
}

159 
	$ª°¨tU∂ökTxTimî
(
öãrvÆ
, 
timî_cb_func
 
cb_func
) {

160 
	`°›U∂ökTxTimî
();

161  
	`°¨tU∂ökTxTimî
(
öãrvÆ
, 
cb_func
);

162 
	}
}

171 
	$öôU∂ökTxTimî
() {

172 i‡(
pud_u∂ök_tx_timî_cookõ
 =
NULL
) {

173 
pud_u∂ök_tx_timî_cookõ
 = 
	`ﬁ§_Æloc_cookõ
(

174 
PUD_PLUGIN_ABBR
 ": u∂ökÅxÅimî", 
OLSR_COOKIE_TYPE_TIMER
);

175 i‡(
pud_u∂ök_tx_timî_cookõ
 =
NULL
) {

176  
Ál£
;

179  
åue
;

180 
	}
}

185 
	$de°royU∂ökTxTimî
() {

186 
	`°›U∂ökTxTimî
();

187 i‡(
pud_u∂ök_tx_timî_cookõ
 !
NULL
) {

188 
	`ﬁ§_‰ì_cookõ
(
pud_u∂ök_tx_timî_cookõ
);

189 
pud_u∂ök_tx_timî_cookõ
 = 
NULL
;

191 
	}
}

198 
ﬁ§_cookõ_öfo
 *
	gpud_g©eway_timî_cookõ
 = 
NULL
;

201 
timî_íåy
 * 
	gpud_g©eway_timî
 = 
NULL
;

215 
	$°¨tG©ewayTimî
(
öãrvÆ
, 
timî_cb_func
 
cb_func
) {

216 i‡(
pud_g©eway_timî
 =
NULL
) {

217 
pud_g©eway_timî
 = 
	`ﬁ§_°¨t_timî
(
öãrvÆ
 * 
MSEC_PER_SEC
, 0,

218 
OLSR_TIMER_PERIODIC
, 
cb_func
, 
NULL
,

219 
pud_g©eway_timî_cookõ
);

220 i‡(
pud_g©eway_timî
 =
NULL
) {

221  
Ál£
;

225  
åue
;

226 
	}
}

231 
	$°›G©ewayTimî
() {

232 i‡(
pud_g©eway_timî
 !
NULL
) {

233 
	`ﬁ§_°›_timî
(
pud_g©eway_timî
);

234 
pud_g©eway_timî
 = 
NULL
;

236 
	}
}

250 
	$ª°¨tG©ewayTimî
(
öãrvÆ
, 
timî_cb_func
 
cb_func
) {

251 
	`°›G©ewayTimî
();

252  
	`°¨tG©ewayTimî
(
öãrvÆ
, 
cb_func
);

253 
	}
}

262 
	$öôG©ewayTimî
() {

263 i‡(
pud_g©eway_timî_cookõ
 =
NULL
) {

264 
pud_g©eway_timî_cookõ
 = 
	`ﬁ§_Æloc_cookõ
(

265 
PUD_PLUGIN_ABBR
 ": g©ewayÅimî", 
OLSR_COOKIE_TYPE_TIMER
);

266 i‡(
pud_g©eway_timî_cookõ
 =
NULL
) {

267  
Ál£
;

270  
åue
;

271 
	}
}

276 
	$de°royG©ewayTimî
() {

277 
	`°›G©ewayTimî
();

278 i‡(
pud_g©eway_timî_cookõ
 !
NULL
) {

279 
	`ﬁ§_‰ì_cookõ
(
pud_g©eway_timî_cookõ
);

280 
pud_g©eway_timî_cookõ
 = 
NULL
;

282 
	}
}

	@lib/pud/src/timers.h

1 #i‚de‡
_PUD_TIMERS_H_


2 
	#_PUD_TIMERS_H_


	)

7 
	~"scheduÀr.h
"

11 
öôOl§TxTimî
();

12 
de°royOl§TxTimî
();

13 
ª°¨tOl§TxTimî
(
öãrvÆ
, 
timî_cb_func
 
cb_func
);

15 
öôU∂ökTxTimî
();

16 
de°royU∂ökTxTimî
();

17 
ª°¨tU∂ökTxTimî
(
öãrvÆ
, 
timî_cb_func
 
cb_func
);

19 
öôG©ewayTimî
();

20 
de°royG©ewayTimî
();

21 
ª°¨tG©ewayTimî
(
öãrvÆ
, 
timî_cb_func
 
cb_func
);

	@lib/pud/src/uplinkGateway.c

1 
	~"u∂ökG©eway.h
"

6 
	~"g©eway.h
"

7 
	~"tc_£t.h
"

8 
	~"lq_∂ugö.h
"

17 
ölöe
 
	$gw_•ìd
(
g©eway_íåy
 *
gw
) {

18  (
gw
->
u∂ök
 + gw->
dow∆ök
);

19 
	}
}

38 
	$gëBe°U∂ökG©eway
(
ﬁ§_ù_addr
 * 
be°G©eway
) {

39 
g©eway_íåy
 *
gw_be°
 = 
NULL
;

40 
gw_be°_vÆue
 = 0;

41 
g©eway_íåy
 *
gw
;

43 
	`OLSR_FOR_ALL_GATEWAY_ENTRIES
(
gw
) {

44 
boﬁ
 
evÆ4
 = 
Ál£
;

45 
boﬁ
 
evÆ6
 = 
Ál£
;

47 
tc_íåy
 * 
tc
 = 
	`ﬁ§_lookup_tc_íåy
(&
gw
->
‹igö©‹
);

48 i‡(
tc
 =
NULL
) {

53 i‡(
tc
->
∑th_co°
 =
ROUTE_COST_BROKEN
) {

57 i‡(
gw
 =
	`ﬁ§_gë_ùv4_öë_g©eway
(
NULL
)) {

58 
evÆ4
 = 
åue
;

59 } i‡(
gw
->
ùv4


60 && (
ﬁ§_˙f
->
ù_vîsi⁄
 =
AF_INET
 || ol§_˙f->
u£_niô
)

61 && (
ﬁ§_˙f
->
sm¨t_gw_Ælow_«t
 || !
gw
->
ùv4«t
)) {

62 
evÆ4
 = 
åue
;

65 i‡(
gw
 =
	`ﬁ§_gë_ùv6_öë_g©eway
(
NULL
)) {

66 
evÆ6
 = 
åue
;

67 } i‡(
gw
->
ùv6
 && 
ﬁ§_˙f
->
ù_vîsi⁄
 =
AF_INET6
) {

68 
evÆ6
 = 
åue
;

71 i‡(
evÆ4
 || 
evÆ6
) {

72 
gw_vÆue
 = 
	`gw_•ìd
(
gw
);

73 i‡(
gw_vÆue
 > 
gw_be°_vÆue
) {

74 
gw_be°
 = 
gw
;

75 
gw_be°_vÆue
 = 
gw_vÆue
;

76 } i‡(
gw_vÆue
 =
gw_be°_vÆue
) {

77 
boﬁ
 
gwHa¶owîIpAddªss
 = 
Ál£
;

78 i‡(
evÆ4
) {

79 
gwHa¶owîIpAddªss
 = (
	`ù4cmp
(&
gw
->
‹igö©‹
.
v4
,

80 &
gw_be°
->
‹igö©‹
.
v4
) < 0);

82 
gwHa¶owîIpAddªss
 = (
	`ù6cmp
(&
gw
->
‹igö©‹
.
v6
,

83 &
gw_be°
->
‹igö©‹
.
v6
) < 0);

85 i‡(
gwHa¶owîIpAddªss
) {

86 
gw_be°
 = 
gw
;

87 
gw_be°_vÆue
 = 
gw_vÆue
;

91 } 
	`OLSR_FOR_ALL_GATEWAY_ENTRIES_END
(
gw
)

93 i‡(!
gw_be°
) {

95 *
be°G©eway
 = 
ﬁ§_˙f
->
maö_addr
;

99 *
be°G©eway
 = 
gw_be°
->
‹igö©‹
;

100 
	}
}

	@lib/pud/src/uplinkGateway.h

1 #i‚de‡
_PUD_UPLINKGATEWAY_H_


2 
	#_PUD_UPLINKGATEWAY_H_


	)

7 
	~"ﬁ§_ty≥s.h
"

11 
gëBe°U∂ökG©eway
(
ﬁ§_ù_addr
 * 
be°G©eway
);

	@lib/pud/wireformat-java/resources/WireFormatConstants.java.h

1 
	~"libøry.h
"

2 
	~"wúeF‹m©.h
"

3 #i‚de‡
GIT_SHA


4 
	#GIT_SHA
 ""

	)

7 
∑ckage
 
	g‹g
.
	gﬁ§
.
	g∂ugö
.
	gpud
;

9 
public
 cœs†
	cWúeF‹m©C⁄°™ts
 {

10 
public
 
föÆ
 
Såög
 
	mLibøryName
 = 
PUD_WIRE_FORMAT_LIBRARYNAME
;

12 
public
 
föÆ
 
Såög
 
	mPLUGINVERSION
 = 
PLUGIN_VER
;

13 
public
 
föÆ
 
Såög
 
	mGITSHA
 = 
GIT_SHA
;

15 
public
 
föÆ
 
	mVERSION
 = 
PUD_WIRE_FORMAT_VERSION
;

17 
public
 
föÆ
 
	mFLAGS_ID
 = 
PUD_FLAGS_ID
;

18 
public
 
föÆ
 
	mFLAGS_GATEWAY
 = 
PUD_FLAGS_GATEWAY
;

20 
public
 
föÆ
 
	mTIME_BITS
 = 
PUD_TIME_BITS
;

22 
public
 
föÆ
 
	mLATITUDE_BITS
 = 
PUD_LATITUDE_BITS
;

23 
public
 
föÆ
 
	mTX_LATITUDE_DIGITS
 = 
PUD_TX_LATITUDE_DIGITS
;

24 
public
 
föÆ
 
Såög
 
	mTX_LATITUDE_DECIMALS
 = 
PUD_TX_LATITUDE_DECIMALS
;

26 
public
 
föÆ
 
	mLONGITUDE_BITS
 = 
PUD_LONGITUDE_BITS
;

27 
public
 
föÆ
 
	mTX_LONGITUDE_DIGITS
 = 
PUD_TX_LONGITUDE_DIGITS
;

28 
public
 
föÆ
 
Såög
 
	mTX_LONGITUDE_DECIMALS
 = 
PUD_TX_LONGITUDE_DECIMALS
;

29 
public
 
föÆ
 
	mALTITUDE_BITS
 = 
PUD_ALTITUDE_BITS
;

31 
public
 
föÆ
 
	mALTITUDE_MIN
 = 
PUD_ALTITUDE_MIN
;

32 
public
 
föÆ
 
	mALTITUDE_MAX
 = 
PUD_ALTITUDE_MAX
;

33 
public
 
föÆ
 
	mTX_ALTITUDE_DIGITS
 = 
PUD_TX_ALTITUDE_DIGITS
;

35 
public
 
föÆ
 
	mSPEED_BITS
 = 
PUD_SPEED_BITS
;

36 
public
 
föÆ
 
	mSPEED_MAX
 = 
PUD_SPEED_MAX
;

37 
public
 
föÆ
 
	mTX_SPEED_DIGITS
 = 
PUD_TX_SPEED_DIGITS
;

39 
public
 
föÆ
 
	mTRACK_BITS
 = 
PUD_TRACK_BITS
;

40 
public
 
föÆ
 
	mTX_TRACK_DIGITS
 = 
PUD_TX_TRACK_DIGITS
;

42 
public
 
föÆ
 
	mHDOP_BITS
 = 
PUD_HDOP_BITS
;

43 
public
 
föÆ
 
	mHDOP_RESOLUTION
 = 
PUD_HDOP_RESOLUTION
;

44 
public
 
föÆ
 
	mHDOP_MAX
 = 
PUD_HDOP_MAX
;

45 
public
 
föÆ
 
	mTX_HDOP_DIGITS
 = 
PUD_TX_HDOP_DIGITS
;

46 
public
 
föÆ
 
Såög
 
	mTX_HDOP_DECIMALS
 = 
PUD_TX_HDOP_DECIMALS
;

48 
public
 
föÆ
 
	mNODEIDTYPE_MAC_BYTES
 = 
PUD_NODEIDTYPE_MAC_BYTES
;

49 
public
 
föÆ
 
	mNODEIDTYPE_MSISDN_BYTES
 = 
PUD_NODEIDTYPE_MSISDN_BYTES
;

50 
public
 
föÆ
 
	mNODEIDTYPE_TETRA_BYTES
 = 
PUD_NODEIDTYPE_TETRA_BYTES
;

51 
public
 
föÆ
 
	mNODEIDTYPE_MMSI_BYTES
 = 
PUD_NODEIDTYPE_MMSI_BYTES
;

52 
public
 
föÆ
 
	mNODEIDTYPE_URN_BYTES
 = 
PUD_NODEIDTYPE_URN_BYTES
;

53 
public
 
föÆ
 
	mNODEIDTYPE_192_BYTES
 = 
PUD_NODEIDTYPE_192_BYTES
;

54 
public
 
föÆ
 
	mNODEIDTYPE_193_BYTES
 = 
PUD_NODEIDTYPE_193_BYTES
;

55 
public
 
föÆ
 
	mNODEIDTYPE_194_BYTES
 = 
PUD_NODEIDTYPE_194_BYTES
;

56 
public
 
föÆ
 
	mNODEIDTYPE_IPV4_BYTES
 = 
PUD_NODEIDTYPE_IPV4_BYTES
;

57 
public
 
föÆ
 
	mNODEIDTYPE_IPV6_BYTES
 = 
PUD_NODEIDTYPE_IPV6_BYTES
;

58 
public
 
föÆ
 
	mTX_NODEIDTYPE_DIGITS
 = 
PUD_TX_NODEIDTYPE_DIGITS
;

	@lib/pud/wireformat-java/src/main/c/org_olsr_plugin_pud_ClusterLeader.c

1 
	~"‹g_ﬁ§_∂ugö_pud_Clu°îLódî.h
"

3 
	~"utû.h
"

10 
JNIEXPORT
 
jöt
 
JNICALL
 
	gJava_‹g_ﬁ§_∂ugö_pud_Clu°îLódî_gëClu°îLódîVîsi⁄


11 (
JNIEnv
 * 
	gív
, 
jobje˘
 
	gthis
) {

12 
jobje˘
 
	gd©aObje˘
;

13 
jboﬁón
 
	gisC›y
;

14 
U∂ökMesßge
 * 
	gu∂ökMesßge
 = 
gëU∂ökMesßge
(
ív
, 
this
, &
d©aObje˘
,

15 &
isC›y
);

17 
uöt8_t
 
	gvîsi⁄
 = 
gëClu°îLódîVîsi⁄
(

18 
gëClu°îLódîMesßge
(
u∂ökMesßge
));

20 
ªÀa£U∂ökMesßge
(
ív
, 
u∂ökMesßge
, 
d©aObje˘
, 
isC›y
, 
JNI_ABORT
);

22  (
	gjöt
Ë
	gvîsi⁄
;

30 
JNIEXPORT
 
jl⁄g
 
JNICALL
 
	gJava_‹g_ﬁ§_∂ugö_pud_Clu°îLódî_gëClu°îLódîVÆidôyTime


31 (
JNIEnv
 * 
	gív
, 
jobje˘
 
	gthis
) {

32 
jobje˘
 
	gd©aObje˘
;

33 
jboﬁón
 
	gisC›y
;

34 
U∂ökMesßge
 * 
	gu∂ökMesßge
 = 
gëU∂ökMesßge
(
ív
, 
this
, &
d©aObje˘
,

35 &
isC›y
);

37 
	gvÆidôyTime
 = 
gëVÆidôyTime
(

38 &
gëClu°îLódîMesßge
(
u∂ökMesßge
)->
vÆidôyTime
);

40 
ªÀa£U∂ökMesßge
(
ív
, 
u∂ökMesßge
, 
d©aObje˘
, 
isC›y
, 
JNI_ABORT
);

42  (
	gjl⁄g
Ë
	gvÆidôyTime
;

50 
JNIEXPORT
 
jobje˘
 
JNICALL
 
	gJava_‹g_ﬁ§_∂ugö_pud_Clu°îLódî_gëClu°îLódîOrigö©‹


51 (
JNIEnv
 * 
	gív
, 
jobje˘
 
	gthis
) {

52 
jobje˘
 
	gd©aObje˘
;

53 
jboﬁón
 
	gisC›y
;

54 
U∂ökMesßge
 * 
	gu∂ökMesßge
 = 
gëU∂ökMesßge
(
ív
, 
this
, &
d©aObje˘
,

55 &
isC›y
);

57 
jobje˘
 
	gobje˘
;

58 
boﬁ
 
	gùv4
 = !
gëU∂ökMesßgeIPv6
(&
u∂ökMesßge
->
hódî
);

60 
ﬁ§_ù_addr
 * 
	gaddr
;

61 i‡(
	gùv4
) {

62 
	gaddr
 = (
ﬁ§_ù_addr
 *Ë&
u∂ökMesßge
->
msg
.
˛u°îLódî
.
Àadî
.
v4
.
‹igö©‹
;

64 
	gaddr
 = (
ﬁ§_ù_addr
 *Ë&
u∂ökMesßge
->
msg
.
˛u°îLódî
.
Àadî
.
v6
.
‹igö©‹
;

66 
c⁄°ru˘IPAddªss
(
ív
, 
ùv4
, 
addr
, &
obje˘
);

68 
ªÀa£U∂ökMesßge
(
ív
, 
u∂ökMesßge
, 
d©aObje˘
, 
isC›y
, 
JNI_ABORT
);

70  
	gobje˘
;

78 
JNIEXPORT
 
jobje˘
 
JNICALL
 
	gJava_‹g_ﬁ§_∂ugö_pud_Clu°îLódî_gëClu°îLódîClu°îLódî


79 (
JNIEnv
 * 
	gív
, 
jobje˘
 
	gthis
) {

80 
jobje˘
 
	gd©aObje˘
;

81 
jboﬁón
 
	gisC›y
;

82 
U∂ökMesßge
 * 
	gu∂ökMesßge
 = 
gëU∂ökMesßge
(
ív
, 
this
, &
d©aObje˘
,

83 &
isC›y
);

85 
jobje˘
 
	gobje˘
;

86 
boﬁ
 
	gùv4
 = !
gëU∂ökMesßgeIPv6
(&
u∂ökMesßge
->
hódî
);

88 
ﬁ§_ù_addr
 * 
	gaddr
;

89 i‡(
	gùv4
) {

90 
	gaddr
 = (
ﬁ§_ù_addr
 *Ë&
u∂ökMesßge
->
msg
.
˛u°îLódî
.
Àadî
.
v4
.clusterLeader;

92 
	gaddr
 = (
ﬁ§_ù_addr
 *Ë&
u∂ökMesßge
->
msg
.
˛u°îLódî
.
Àadî
.
v6
.clusterLeader;

94 
c⁄°ru˘IPAddªss
(
ív
, 
ùv4
, 
addr
, &
obje˘
);

96 
ªÀa£U∂ökMesßge
(
ív
, 
u∂ökMesßge
, 
d©aObje˘
, 
isC›y
, 
JNI_ABORT
);

98  
	gobje˘
;

	@lib/pud/wireformat-java/src/main/c/org_olsr_plugin_pud_PositionUpdate.c

1 
	~"‹g_ﬁ§_∂ugö_pud_Posôi⁄Upd©e.h
"

3 
	~"utû.h
"

4 
	~<Ol§dPudWúeF‹m©/nodeIdC⁄vîsi⁄.h
>

15 
JNIEXPORT
 
jobje˘
 
JNICALL
 
	gJava_‹g_ﬁ§_∂ugö_pud_Posôi⁄Upd©e_gëOl§MesßgeOrigö©‹


16 (
JNIEnv
 * 
	gív
, 
jobje˘
 
	gthis
) {

17 
jobje˘
 
	gd©aObje˘
;

18 
jboﬁón
 
	gisC›y
;

19 
U∂ökMesßge
 * 
	gu∂ökMesßge
 = 
gëU∂ökMesßge
(
ív
, 
this
, &
d©aObje˘
,

20 &
isC›y
);

22 
jobje˘
 
	gobje˘
;

23 
boﬁ
 
	gùv4
 = !
gëU∂ökMesßgeIPv6
(&
u∂ökMesßge
->
hódî
);

25 
ﬁ§_ù_addr
 * 
	gaddr
;

26 i‡(
	gùv4
) {

27 
	gaddr
 = (
ﬁ§_ù_addr
 *Ë&
u∂ökMesßge
->
msg
.
ﬁ§Mesßge
.
v4
.
‹igö©‹
;

29 
	gaddr
 = (
ﬁ§_ù_addr
 *Ë&
u∂ökMesßge
->
msg
.
ﬁ§Mesßge
.
v6
.
‹igö©‹
;

31 
c⁄°ru˘IPAddªss
(
ív
, 
ùv4
, 
addr
, &
obje˘
);

33 
ªÀa£U∂ökMesßge
(
ív
, 
u∂ökMesßge
, 
d©aObje˘
, 
isC›y
, 
JNI_ABORT
);

35  
	gobje˘
;

47 
JNIEXPORT
 
jöt
 
JNICALL
 
	gJava_‹g_ﬁ§_∂ugö_pud_Posôi⁄Upd©e_gëPosôi⁄Upd©eVîsi⁄


48 (
JNIEnv
 * 
	gív
, 
jobje˘
 
	gthis
) {

49 
jobje˘
 
	gd©aObje˘
;

50 
jboﬁón
 
	gisC›y
;

51 
U∂ökMesßge
 * 
	gu∂ökMesßge
 = 
gëU∂ökMesßge
(
ív
, 
this
, &
d©aObje˘
,

52 &
isC›y
);

54 
uöt8_t
 
	gvîsi⁄
 = 
gëPosôi⁄Upd©eVîsi⁄
(

55 
gëPosôi⁄Upd©eMesßge
(
u∂ökMesßge
));

57 
ªÀa£U∂ökMesßge
(
ív
, 
u∂ökMesßge
, 
d©aObje˘
, 
isC›y
, 
JNI_ABORT
);

59  (
	gjöt
Ë
	gvîsi⁄
;

67 
JNIEXPORT
 
jl⁄g
 
JNICALL
 
	gJava_‹g_ﬁ§_∂ugö_pud_Posôi⁄Upd©e_gëPosôi⁄Upd©eVÆidôyTime


68 (
JNIEnv
 * 
	gív
, 
jobje˘
 
	gthis
) {

69 
jobje˘
 
	gd©aObje˘
;

70 
jboﬁón
 
	gisC›y
;

71 
U∂ökMesßge
 * 
	gu∂ökMesßge
 = 
gëU∂ökMesßge
(
ív
, 
this
, &
d©aObje˘
,

72 &
isC›y
);

74 
	gvÆidôyTime
 = 
gëVÆidôyTime
(

75 &
gëPosôi⁄Upd©eMesßge
(
u∂ökMesßge
)->
vÆidôyTime
);

77 
ªÀa£U∂ökMesßge
(
ív
, 
u∂ökMesßge
, 
d©aObje˘
, 
isC›y
, 
JNI_ABORT
);

79  (
	gjl⁄g
Ë
	gvÆidôyTime
;

87 
JNIEXPORT
 
jöt
 
JNICALL
 
	gJava_‹g_ﬁ§_∂ugö_pud_Posôi⁄Upd©e_gëPosôi⁄Upd©eSMask


88 (
JNIEnv
 * 
	gív
, 
jobje˘
 
	gthis
) {

89 
jobje˘
 
	gd©aObje˘
;

90 
jboﬁón
 
	gisC›y
;

91 
U∂ökMesßge
 * 
	gu∂ökMesßge
 = 
gëU∂ökMesßge
(
ív
, 
this
, &
d©aObje˘
,

92 &
isC›y
);

94 
uöt8_t
 
	gsmask
 = 
gëPosôi⁄Upd©eSmask
(

95 
gëPosôi⁄Upd©eMesßge
(
u∂ökMesßge
));

97 
ªÀa£U∂ökMesßge
(
ív
, 
u∂ökMesßge
, 
d©aObje˘
, 
isC›y
, 
JNI_ABORT
);

99  (
	gjöt
Ë
	gsmask
;

107 
JNIEXPORT
 
jöt
 
JNICALL
 
	gJava_‹g_ﬁ§_∂ugö_pud_Posôi⁄Upd©e_gëPosôi⁄Upd©eFœgs


108 (
JNIEnv
 * 
	gív
, 
jobje˘
 
	gthis
) {

109 
jobje˘
 
	gd©aObje˘
;

110 
jboﬁón
 
	gisC›y
;

111 
U∂ökMesßge
 * 
	gu∂ökMesßge
 = 
gëU∂ökMesßge
(
ív
, 
this
, &
d©aObje˘
,

112 &
isC›y
);

114 
uöt8_t
 
	gÊags
 = 
gëPosôi⁄Upd©eFœgs
(

115 
gëPosôi⁄Upd©eMesßge
(
u∂ökMesßge
));

117 
ªÀa£U∂ökMesßge
(
ív
, 
u∂ökMesßge
, 
d©aObje˘
, 
isC›y
, 
JNI_ABORT
);

119  (
	gjöt
Ë
	gÊags
;

131 
JNIEXPORT
 
jl⁄g
 
JNICALL
 
	gJava_‹g_ﬁ§_∂ugö_pud_Posôi⁄Upd©e_gëPosôi⁄Upd©eTime


132 (
JNIEnv
 * 
	gív
, 
jobje˘
 
	gthis
, 
jl⁄g
 
	gba£D©e
, jl⁄g 
	gtimez⁄eOff£t
) {

133 
jobje˘
 
	gd©aObje˘
;

134 
jboﬁón
 
	gisC›y
;

135 
U∂ökMesßge
 * 
	gu∂ökMesßge
 = 
gëU∂ökMesßge
(
ív
, 
this
, &
d©aObje˘
,

136 &
isC›y
);

138 
jl⁄g
 
	gba£D©eSec⁄ds
 = 
ba£D©e
 / 1000LL;

139 
jl⁄g
 
	gba£D©eMûliSec⁄ds
 = 
ba£D©e
 % 1000LL;

141 
tm
 
	gtimeSåu˘
;

142 
time_t
 
	gupd©eTimeSec⁄ds
;

144 
gëPosôi⁄Upd©eTime
(
gëPosôi⁄Upd©eMesßge
(
u∂ökMesßge
),

145 
ba£D©eSec⁄ds
, &
timeSåu˘
);

147 
ªÀa£U∂ökMesßge
(
ív
, 
u∂ökMesßge
, 
d©aObje˘
, 
isC›y
, 
JNI_ABORT
);

149 
	gupd©eTimeSec⁄ds
 = 
mktime
(&
timeSåu˘
);

150  (
	gupd©eTimeSec⁄ds
 * 1000LLË+ 
	gba£D©eMûliSec⁄ds
 - 
	gtimez⁄eOff£t
;

159 
JNIEXPORT
 
jdoubÀ
 
JNICALL
 
	gJava_‹g_ﬁ§_∂ugö_pud_Posôi⁄Upd©e_gëPosôi⁄Upd©eL©ôude


160 (
JNIEnv
 * 
	gív
, 
jobje˘
 
	gthis
) {

161 
jobje˘
 
	gd©aObje˘
;

162 
jboﬁón
 
	gisC›y
;

163 
U∂ökMesßge
 * 
	gu∂ökMesßge
 = 
gëU∂ökMesßge
(
ív
, 
this
, &
d©aObje˘
,

164 &
isC›y
);

166 
	gœt
 = 
gëPosôi⁄Upd©eL©ôude
(

167 
gëPosôi⁄Upd©eMesßge
(
u∂ökMesßge
));

169 
ªÀa£U∂ökMesßge
(
ív
, 
u∂ökMesßge
, 
d©aObje˘
, 
isC›y
, 
JNI_ABORT
);

171  (
	gjdoubÀ
Ë
	gœt
;

179 
JNIEXPORT
 
jdoubÀ
 
JNICALL
 
	gJava_‹g_ﬁ§_∂ugö_pud_Posôi⁄Upd©e_gëPosôi⁄Upd©eL⁄gôude


180 (
JNIEnv
 * 
	gív
, 
jobje˘
 
	gthis
) {

181 
jobje˘
 
	gd©aObje˘
;

182 
jboﬁón
 
	gisC›y
;

183 
U∂ökMesßge
 * 
	gu∂ökMesßge
 = 
gëU∂ökMesßge
(
ív
, 
this
, &
d©aObje˘
,

184 &
isC›y
);

186 
	gl⁄
 = 
gëPosôi⁄Upd©eL⁄gôude
(

187 
gëPosôi⁄Upd©eMesßge
(
u∂ökMesßge
));

189 
ªÀa£U∂ökMesßge
(
ív
, 
u∂ökMesßge
, 
d©aObje˘
, 
isC›y
, 
JNI_ABORT
);

191  (
	gjdoubÀ
Ë
	gl⁄
;

199 
JNIEXPORT
 
jl⁄g
 
JNICALL
 
	gJava_‹g_ﬁ§_∂ugö_pud_Posôi⁄Upd©e_gëPosôi⁄Upd©eA…ôude


200 (
JNIEnv
 * 
	gív
, 
jobje˘
 
	gthis
) {

201 
jobje˘
 
	gd©aObje˘
;

202 
jboﬁón
 
	gisC›y
;

203 
U∂ökMesßge
 * 
	gu∂ökMesßge
 = 
gëU∂ökMesßge
(
ív
, 
this
, &
d©aObje˘
,

204 &
isC›y
);

206 
	gÆt
 = 
gëPosôi⁄Upd©eA…ôude
(

207 
gëPosôi⁄Upd©eMesßge
(
u∂ökMesßge
));

209 
ªÀa£U∂ökMesßge
(
ív
, 
u∂ökMesßge
, 
d©aObje˘
, 
isC›y
, 
JNI_ABORT
);

211  (
	gjl⁄g
Ë
	gÆt
;

219 
JNIEXPORT
 
jl⁄g
 
JNICALL
 
	gJava_‹g_ﬁ§_∂ugö_pud_Posôi⁄Upd©e_gëPosôi⁄Upd©eS≥ed


220 (
JNIEnv
 * 
	gív
, 
jobje˘
 
	gthis
) {

221 
jobje˘
 
	gd©aObje˘
;

222 
jboﬁón
 
	gisC›y
;

223 
U∂ökMesßge
 * 
	gu∂ökMesßge
 = 
gëU∂ökMesßge
(
ív
, 
this
, &
d©aObje˘
,

224 &
isC›y
);

226 
	g•ìd
 = 
gëPosôi⁄Upd©eS≥ed
(

227 
gëPosôi⁄Upd©eMesßge
(
u∂ökMesßge
));

229 
ªÀa£U∂ökMesßge
(
ív
, 
u∂ökMesßge
, 
d©aObje˘
, 
isC›y
, 
JNI_ABORT
);

231  (
	gjl⁄g
Ë
	g•ìd
;

239 
JNIEXPORT
 
jl⁄g
 
JNICALL
 
	gJava_‹g_ﬁ§_∂ugö_pud_Posôi⁄Upd©e_gëPosôi⁄Upd©eTøck


240 (
JNIEnv
 * 
	gív
, 
jobje˘
 
	gthis
) {

241 
jobje˘
 
	gd©aObje˘
;

242 
jboﬁón
 
	gisC›y
;

243 
U∂ökMesßge
 * 
	gu∂ökMesßge
 = 
gëU∂ökMesßge
(
ív
, 
this
, &
d©aObje˘
,

244 &
isC›y
);

246 
	gåack
 = 
gëPosôi⁄Upd©eTøck
(

247 
gëPosôi⁄Upd©eMesßge
(
u∂ökMesßge
));

249 
ªÀa£U∂ökMesßge
(
ív
, 
u∂ökMesßge
, 
d©aObje˘
, 
isC›y
, 
JNI_ABORT
);

251  (
	gjl⁄g
Ë
	gåack
;

259 
JNIEXPORT
 
jdoubÀ
 
JNICALL
 
	gJava_‹g_ﬁ§_∂ugö_pud_Posôi⁄Upd©e_gëPosôi⁄Upd©eHd›


260 (
JNIEnv
 * 
	gív
, 
jobje˘
 
	gthis
) {

261 
jobje˘
 
	gd©aObje˘
;

262 
jboﬁón
 
	gisC›y
;

263 
U∂ökMesßge
 * 
	gu∂ökMesßge
 = 
gëU∂ökMesßge
(
ív
, 
this
, &
d©aObje˘
,

264 &
isC›y
);

266 
	ghd›
 = 
gëPosôi⁄Upd©eHd›
(
gëPosôi⁄Upd©eMesßge
(
u∂ökMesßge
));

268 
ªÀa£U∂ökMesßge
(
ív
, 
u∂ökMesßge
, 
d©aObje˘
, 
isC›y
, 
JNI_ABORT
);

270  (
	gjdoubÀ
Ë
	ghd›
;

282 
JNIEXPORT
 
jöt
 
JNICALL
 
	gJava_‹g_ﬁ§_∂ugö_pud_Posôi⁄Upd©e_gëPosôi⁄Upd©eNodeIdTy≥


283 (
JNIEnv
 * 
	gív
, 
jobje˘
 
	gthis
) {

284 
jobje˘
 
	gd©aObje˘
;

285 
jboﬁón
 
	gisC›y
;

286 
U∂ökMesßge
 * 
	gu∂ökMesßge
 = 
gëU∂ökMesßge
(
ív
, 
this
, &
d©aObje˘
,

287 &
isC›y
);

289 
NodeIdTy≥
 
	gnodeIdTy≥
 = 
gëPosôi⁄Upd©eNodeIdTy≥
(

290 !
gëU∂ökMesßgeIPv6
(&
u∂ökMesßge
->
hódî
Ë? 
AF_INET
 : 
AF_INET6
,

291 
gëPosôi⁄Upd©eMesßge
(
u∂ökMesßge
));

293 
ªÀa£U∂ökMesßge
(
ív
, 
u∂ökMesßge
, 
d©aObje˘
, 
isC›y
, 
JNI_ABORT
);

295  (
	gjöt
Ë
	gnodeIdTy≥
;

303 
JNIEXPORT
 
j°rög
 
JNICALL
 
	gJava_‹g_ﬁ§_∂ugö_pud_Posôi⁄Upd©e_gëPosôi⁄Upd©eNodeId


304 (
JNIEnv
 * 
	gív
, 
jobje˘
 
	gthis
) {

305 
jobje˘
 
	gd©aObje˘
;

306 
jboﬁón
 
	gisC›y
;

307 
U∂ökMesßge
 * 
	gu∂ökMesßge
 = 
gëU∂ökMesßge
(
ív
, 
this
, &
d©aObje˘
,

308 &
isC›y
);

310 c⁄° * 
	gnodeIdSå
;

311 
	gnodeIdSåBuf„r
[
PUD_TX_NODEID_BUFFERSIZE
 + 1];

313 
gëNodeIdSåögFromOl§
 (

314 !
gëU∂ökMesßgeIPv6
(&
u∂ökMesßge
->
hódî
Ë? 
AF_INET
 : 
AF_INET6
,

315 &
u∂ökMesßge
->
msg
.
ﬁ§Mesßge
, &
nodeIdSå
,

316 &
nodeIdSåBuf„r
[0], (nodeIdStrBuffer));

318 
ªÀa£U∂ökMesßge
(
ív
, 
u∂ökMesßge
, 
d©aObje˘
, 
isC›y
, 
JNI_ABORT
);

320  (*
	gív
)->
NewSåögUTF
(
ív
, 
nodeIdSå
);

	@lib/pud/wireformat-java/src/main/c/org_olsr_plugin_pud_UplinkMessage.c

1 
	~"‹g_ﬁ§_∂ugö_pud_U∂ökMesßge.h
"

3 
	~<Ol§dPudWúeF‹m©/wúeF‹m©.h
>

14 
JNIEXPORT
 
jöt
 
JNICALL
 
	gJava_‹g_ﬁ§_∂ugö_pud_U∂ökMesßge_gëU∂ökMesßgeTy≥Posôi⁄


15 (
JNIEnv
 * 
ív
 
__©åibuã__
 ((
unu£d
)), 
j˛ass
 
this
 __attribute__ ((unused))) {

16  (
	gjöt
Ë
	gPOSITION
;

24 
JNIEXPORT
 
jöt
 
JNICALL
 
	gJava_‹g_ﬁ§_∂ugö_pud_U∂ökMesßge_gëU∂ökMesßgeTy≥Clu°îLódî


25 (
JNIEnv
 * 
ív
 
__©åibuã__
 ((
unu£d
)), 
j˛ass
 
this
 __attribute__ ((unused))) {

26  (
	gjöt
Ë
	gCLUSTERLEADER
;

34 
JNIEXPORT
 
jöt
 
JNICALL
 
	gJava_‹g_ﬁ§_∂ugö_pud_U∂ökMesßge_gëU∂ökMesßgeHódîLígth


35 (
JNIEnv
 * 
ív
 
__©åibuã__
 ((
unu£d
)), 
j˛ass
 
this
 __attribute__ ((unused))) {

36  (
	gjöt
)(
	gU∂ökHódî
);

	@lib/pud/wireformat-java/src/main/c/util.h

1 #i‚de‡
_In˛uded_‹g_ﬁ§_∂ugö_pud_U∂ökMesßge


2 
	#_In˛uded_‹g_ﬁ§_∂ugö_pud_U∂ökMesßge


	)

3 #ifde‡
__˝lu•lus


7 
	~<ﬁ§_ty≥s.h
>

8 
	~<jni.h
>

9 
	~<Ol§dPudWúeF‹m©/wúeF‹m©.h
>

16 
ölöe
 
U∂ökMesßge
 * 
gëU∂ökMesßge
(
JNIEnv
 * 
ív
, 
jobje˘
 
this
,

17 
jobje˘
 * 
d©aObje˘
, 
jboﬁón
 * 
isC›y
) {

18 
U∂ökMesßge
 * 
u∂ökMesßge
;

20 
j˛ass
 
˛azz
 = (*
ív
)->
GëObje˘Cœss
”nv, 
this
);

21 
jfõldID
 
fid
 = (*
ív
)->
GëFõldID
”nv, 
˛azz
, "data", "[B");

22 *
d©aObje˘
 = (*
ív
)->
GëObje˘Fõld
”nv, 
this
, 
fid
);

23 
u∂ökMesßge
 = (
U∂ökMesßge
 *Ë((*
ív
)->
GëByãAºayEÀmíts
(env,

24 *
d©aObje˘
, 
isC›y
));

26  
u∂ökMesßge
;

35 
ölöe
 
ªÀa£U∂ökMesßge
(
JNIEnv
 * 
ív
,

36 
U∂ökMesßge
 * 
u∂ökMesßge
, 
jobje˘
 
d©aObje˘
, 
jboﬁón
 
isC›y
,

37 
jöt
 
mode
) {

38 i‡(
isC›y
 =
JNI_TRUE
) {

39 (*
ív
)->
Rñó£ByãAºayEÀmíts
”nv, 
d©aObje˘
,

40 (
jbyã
 *Ë
u∂ökMesßge
, 
mode
);

44 
ölöe
 
PudOl§Posôi⁄Upd©e
 * 
gëPosôi⁄Upd©eMesßge
(

45 
U∂ökMesßge
 * 
u∂ökMesßge
) {

46  
gëOl§MesßgePaylﬂd
(

47 !
gëU∂ökMesßgeIPv6
(&
u∂ökMesßge
->
hódî
Ë? 
AF_INET
 : 
AF_INET6
,

48 &
u∂ökMesßge
->
msg
.
ﬁ§Mesßge
);

51 
ölöe
 
U∂ökClu°îLódî
 * 
gëClu°îLódîMesßge
(

52 
U∂ökMesßge
 * 
u∂ökMesßge
) {

53  &
u∂ökMesßge
->
msg
.
˛u°îLódî
;

56 
ölöe
 
c⁄°ru˘IPAddªss
(
JNIEnv
 * 
ív
, 
boﬁ
 
ùv4
,

57 
ﬁ§_ù_addr
 * 
addr
, 
jobje˘
 * 
obje˘
) {

58 i‡(
ùv4
) {

60 
j˛ass
 
˛azz
 = (*
ív
)->
FödCœss
(env, "java/net/Inet4Address");

61 
jmëhodID
 
mid
 = (*
ív
)->
GëMëhodID
”nv, 
˛azz
, "<init>",

63 *
obje˘
 = (*
ív
)->
NewObje˘
”nv, 
˛azz
, 
mid
, 
NULL
, 
¡ohl
(
addr
->
v4
.
s_addr
));

65 
jboﬁón
 
isC›y
;

66 
jfõldID
 
fid
;

67 
jobje˘
 
ùaddªssObje˘
;

68 
jbyã
 * 
ùaddªssByãAºay
;

71 
j˛ass
 
˛azz
 = (*
ív
)->
FödCœss
(env, "java/net/Inet6Address");

72 
jmëhodID
 
mid
 = (*
ív
)->
GëMëhodID
”nv, 
˛azz
, "<init>", "()V");

73 *
obje˘
 = (*
ív
)->
NewObje˘
”nv, 
˛azz
, 
mid
);

76 
fid
 = (*
ív
)->
GëFõldID
”nv, 
˛azz
, "ipaddress", "[B");

77 
ùaddªssObje˘
 = (*
ív
)->
GëObje˘Fõld
”nv, *
obje˘
, 
fid
);

78 
ùaddªssByãAºay
 = ((*
ív
)->
GëByãAºayEÀmíts
”nv, 
ùaddªssObje˘
,

79 &
isC›y
));

82 
mem˝y
(
ùaddªssByãAºay
, &
addr
->
v6
, (
ö6_addr
));

85 i‡(
isC›y
 =
JNI_TRUE
) {

86 (*
ív
)->
Rñó£ByãAºayEÀmíts
”nv, 
ùaddªssObje˘
,

87 
ùaddªssByãAºay
, 0);

92 #ifde‡
__˝lu•lus


	@lib/pud/wireformat/include/OlsrdPudWireFormat/compiler.h

1 #i‚de‡
_PUD_COMPILER_H_


2 
	#_PUD_COMPILER_H_


	)

5 #i‚de‡
likñy


6 #i‡
deföed
(
__GNUC__
)

7 
	#likñy
(
x
Ë
	`__buûtö_ex≥˘
((x),1)

	)

9 
	#likñy
(
x
Ë(x)

	)

14 #i‚de‡
u∆ikñy


15 #i‡
deföed
(
__GNUC__
)

16 
	#u∆ikñy
(
x
Ë
	`__buûtö_ex≥˘
((x),0)

	)

18 
	#u∆ikñy
(
x
Ë(x)

	)

	@lib/pud/wireformat/include/OlsrdPudWireFormat/nodeIdConversion.h

1 #i‚de‡
_PUD_NODEIDCONVERSION_H_


2 
	#_PUD_NODEIDCONVERSION_H_


	)

4 
	~<Ol§dPudWúeF‹m©/wúeF‹m©.h
>

6 
gëNodeTy≥SåögFromOl§
(
ùVîsi⁄
,

7 
PudOl§Posôi⁄Upd©e
 * 
ﬁ§GpsMesßge
, * 
nodeIdTy≥Buf„r
,

8 
nodeIdTy≥Buf„rSize
);

10 
gëNodeIdSåögFromOl§
(
ùVîsi⁄
, 
ﬁ§_mesßge
 *
ﬁ§Mesßge
,

11 c⁄° **
nodeIdSå
, *
nodeIdSåBuf„r
,

12 
nodeIdSåBuf„rSize
);

14 
boﬁ
 
£tupNodeIdBö¨yMAC
(
nodeIdBö¨yTy≥
 * 
nodeIdBö¨y
, * 
mac
);

16 
boﬁ
 
£tupNodeIdBö¨yL⁄gL⁄g
(
nodeIdBö¨yTy≥
 * 
nodeIdBö¨y
,

17 
l⁄gVÆue
, 
size_t
 
byãs
);

19 
boﬁ
 
£tupNodeIdBö¨ySåög
(
nodeIdBö¨yTy≥
 * 
nodeIdBö¨y
, * 
nodeId
,

20 
size_t
 
nodeIdLígth
);

22 
boﬁ
 
£tupNodeIdBö¨yIp
(
nodeIdBö¨yTy≥
 * 
nodeIdBö¨y
, * 
ù
,

23 
size_t
 
ùLígth
);

	@lib/pud/wireformat/include/OlsrdPudWireFormat/wireFormat.h

1 #i‚de‡
_PUD_WIREFORMAT_H_


2 
	#_PUD_WIREFORMAT_H_


	)

4 
	~"ﬁ§_ty≥s.h
"

5 
	~"ﬁ§_¥Ÿocﬁ.h
"

7 
	~<°ddef.h
>

8 
	~<°dboﬁ.h
>

9 
	~<°döt.h
>

10 
	~<√töë/ö.h
>

11 
	~<sys/sockë.h
>

12 
	~<m©h.h
>

13 
	~<°rög.h
>

14 
	~<as£π.h
>

15 
	~<Ol§dPudWúeF‹m©/compûî.h
>

22 
	#PUD_WIRE_FORMAT_VERSION
 2

	)

29 
	#PUD_FLAGS_ID
 0x80

	)

32 
	#PUD_FLAGS_GATEWAY
 0x40

	)

39 
	#PUD_TIME_BITS
 17

	)

46 
	#PUD_LATITUDE_BITS
 28

	)

50 
	#PUD_TX_LATITUDE_DIGITS
 (1 + 2 + 2 + 1 + 2 + 3)

	)

53 
	#PUD_TX_LATITUDE_DECIMALS
 "5"

	)

60 
	#PUD_LONGITUDE_BITS
 27

	)

64 
	#PUD_TX_LONGITUDE_DIGITS
 (1 + 3 + 2 + 1 + 2 + 3)

	)

67 
	#PUD_TX_LONGITUDE_DECIMALS
 "5"

	)

74 
	#PUD_ALTITUDE_BITS
 16

	)

77 
	#PUD_ALTITUDE_MIN
 (-400)

	)

80 
	#PUD_ALTITUDE_MAX
 (((1 << 
PUD_ALTITUDE_BITS
Ë- 1Ë+ 
PUD_ALTITUDE_MIN
)

	)

83 
	#PUD_TX_ALTITUDE_DIGITS
 6

	)

90 
	#PUD_SPEED_BITS
 12

	)

93 
	#PUD_SPEED_MAX
 ((1 << 
PUD_SPEED_BITS
Ë- 1)

	)

96 
	#PUD_TX_SPEED_DIGITS
 4

	)

103 
	#PUD_TRACK_BITS
 9

	)

106 
	#PUD_TX_TRACK_DIGITS
 3

	)

113 
	#PUD_HDOP_BITS
 11

	)

116 
	#PUD_HDOP_RESOLUTION
 (0.1)

	)

119 
	#PUD_HDOP_MAX
 (((1 << 
PUD_HDOP_BITS
Ë- 1Ë* 
PUD_HDOP_RESOLUTION
)

	)

122 
	#PUD_TX_HDOP_DIGITS
 5

	)

125 
	#PUD_TX_HDOP_DECIMALS
 "3"

	)

132 
	e_NodeIdTy≥
 {

134 
	mPUD_NODEIDTYPE_GLOBAL_FIRST
 = 0,

137 
	mPUD_NODEIDTYPE_MAC
 = 0,

140 
	mPUD_NODEIDTYPE_MSISDN
 = 1,

143 
	mPUD_NODEIDTYPE_TETRA
 = 2,

146 
	mPUD_NODEIDTYPE_DNS
 = 3,

149 
	mPUD_NODEIDTYPE_IPV4
 = 4,

152 
	mPUD_NODEIDTYPE_GAP1
 = 5,

155 
	mPUD_NODEIDTYPE_IPV6
 = 6,

158 
	mPUD_NODEIDTYPE_MMSI
 = 7,

161 
	mPUD_NODEIDTYPE_URN
 = 8,

164 
	mPUD_NODEIDTYPE_GLOBAL_LAST
 = 
PUD_NODEIDTYPE_URN
,

167 
	mPUD_NODEIDTYPE_LOCAL_FIRST
 = 192,

170 
	mPUD_NODEIDTYPE_192
 = 192,

173 
	mPUD_NODEIDTYPE_193
 = 193,

176 
	mPUD_NODEIDTYPE_194
 = 194,

179 
	mPUD_NODEIDTYPE_LOCAL_LAST
 = 
PUD_NODEIDTYPE_194


180 } 
	tNodeIdTy≥
;

183 
	#PUD_NODEIDTYPE_MAC_BYTES
 6

	)

186 
	#PUD_NODEIDTYPE_MSISDN_BYTES
 7

	)

187 
	#PUD_NODEIDTYPE_MSISDN_MIN
 0LL

	)

188 
	#PUD_NODEIDTYPE_MSISDN_MAX
 999999999999999LL

	)

191 
	#PUD_NODEIDTYPE_TETRA_BYTES
 8

	)

192 
	#PUD_NODEIDTYPE_TETRA_MIN
 0LL

	)

193 
	#PUD_NODEIDTYPE_TETRA_MAX
 99999999999999999LL

	)

196 
	#PUD_NODEIDTYPE_MMSI_BYTES
 4

	)

197 
	#PUD_NODEIDTYPE_MMSI_MIN
 0LL

	)

198 
	#PUD_NODEIDTYPE_MMSI_MAX
 999999999LL

	)

201 
	#PUD_NODEIDTYPE_URN_BYTES
 3

	)

202 
	#PUD_NODEIDTYPE_URN_MIN
 0LL

	)

203 
	#PUD_NODEIDTYPE_URN_MAX
 16777215LL

	)

206 
	#PUD_NODEIDTYPE_192_BYTES
 3

	)

207 
	#PUD_NODEIDTYPE_192_MIN
 0LL

	)

208 
	#PUD_NODEIDTYPE_192_MAX
 9999999LL

	)

211 
	#PUD_NODEIDTYPE_193_BYTES
 3

	)

212 
	#PUD_NODEIDTYPE_193_MIN
 0LL

	)

213 
	#PUD_NODEIDTYPE_193_MAX
 999999LL

	)

216 
	#PUD_NODEIDTYPE_194_BYTES
 2

	)

217 
	#PUD_NODEIDTYPE_194_MIN
 1LL

	)

218 
	#PUD_NODEIDTYPE_194_MAX
 8191LL

	)

221 
	#PUD_NODEIDTYPE_IPV4_BYTES
 4

	)

224 
	#PUD_NODEIDTYPE_IPV6_BYTES
 16

	)

227 
	#PUD_TX_NODEIDTYPE_DIGITS
 3

	)

234 
	#PUD_TX_NODEID_BUFFERSIZE
 1023

	)

240 
	s_nodeIdBö¨yTy≥
 {

241 
boﬁ
 
	m£t
;

242 
size_t
 
	mÀngth
;

243 
	u_buf„r
 {

244 
	mmac
[
PUD_NODEIDTYPE_MAC_BYTES
];

245 
ﬁ§_ù_addr
 
	mù
;

246 
	ml⁄gVÆue
;

247 
	m°rögVÆue
[
PUD_TX_NODEID_BUFFERSIZE
 + 1];

248 } 
	mbuf„r
;

249 } 
	tnodeIdBö¨yTy≥
;

256 
	s_GpsInfo
 {

257 
uöt32_t
 
	mtime
 :
PUD_TIME_BITS
;

258 
uöt32_t
 
	mœt
 :
PUD_LATITUDE_BITS
;

259 
uöt32_t
 
	ml⁄
 :
PUD_LONGITUDE_BITS
;

260 
uöt32_t
 
	mÆt
 :
PUD_ALTITUDE_BITS
;

261 
uöt32_t
 
	m•ìd
 :
PUD_SPEED_BITS
;

262 
uöt32_t
 
	måack
 :
PUD_TRACK_BITS
;

263 
uöt32_t
 
	mhd›
 :
PUD_HDOP_BITS
;

264 }
	t__©åibuã__
((
	t__∑cked__
)Ë
	tGpsInfo
;

267 
	s_NodeInfo
 {

268 
uöt8_t
 
	mnodeIdTy≥
;

269 
	mnodeId
;

270 }
	t__©åibuã__
((
	t__∑cked__
)Ë
	tNodeInfo
;

273 
	s_PudOl§Posôi⁄Upd©e
 {

274 
uöt8_t
 
	mvîsi⁄
;

275 
uöt8_t
 
	mvÆidôyTime
;

276 
uöt8_t
 
	msmask
;

277 
uöt8_t
 
	mÊags
;

278 
GpsInfo
 
	mgpsInfo
;

279 
NodeInfo
 
	mnodeInfo
;

280 }
	t__©åibuã__
((
	t__∑cked__
)Ë
	tPudOl§Posôi⁄Upd©e
;

283 
	#PUD_OLSRWIREFORMATSIZE
 ((
PudOl§Posôi⁄Upd©e
Ë- (
NodeInfo
))

	)

290 
	e_U∂ökMesßgeTy≥
 {

291 
	mPOSITION
 = 0,

292 
	mCLUSTERLEADER
 = 1

293 } 
	tU∂ökMesßgeTy≥
;

296 
	s_U∂ökClu°îLódî
 {

297 
uöt8_t
 
	mvîsi⁄
;

298 
uöt8_t
 
	mvÆidôyTime
;

299 
	u_Àadî
 {

300 
	s_v4
 {

301 
ö_addr
 
	m‹igö©‹
;

302 
ö_addr
 
	m˛u°îLódî
;

303 } 
	mv4
;

304 
	s_v6
 {

305 
ö6_addr
 
	m‹igö©‹
;

306 
ö6_addr
 
	m˛u°îLódî
;

307 } 
	mv6
;

308 } 
	mÀadî
;

309 }
	t__©åibuã__
((
	t__∑cked__
)Ë
	tU∂ökClu°îLódî
;

312 
	s_U∂ökHódî
 {

313 
uöt8_t
 
	mty≥
;

314 
uöt16_t
 
	mÀngth
;

315 
uöt8_t
 
	mùv6
 :1;

316 
uöt8_t
 
	m∑d
 :7;

317 }
	t__©åibuã__
((
	t__∑cked__
)Ë
	tU∂ökHódî
;

320 
	s_U∂ökMesßge
 {

321 
U∂ökHódî
 
	mhódî
;

322 
	u_msg
 {

324 
ﬁ§_mesßge
 
	mﬁ§Mesßge
;

327 
U∂ökClu°îLódî
 
	m˛u°îLódî
;

328 } 
	mmsg
;

329 }
	t__©åibuã__
((
	t__∑cked__
)Ë
	tU∂ökMesßge
;

339 
ölöe
 
boﬁ
 
	$isVÆidNodeIdTy≥
(
nodeIdTy≥
) {

343 –(
nodeIdTy≥
 <
PUD_NODEIDTYPE_GLOBAL_LAST
)) ||

344 –(
nodeIdTy≥
 >
PUD_NODEIDTYPE_LOCAL_FIRST
 ) && (nodeIdTy≥ <
PUD_NODEIDTYPE_LOCAL_LAST
 ))

348 (
nodeIdTy≥
 !
PUD_NODEIDTYPE_GAP1
)

351 
	}
}

358 
	#PUD_VALIDITY_TIME_FROM_OLSR
(
m¢
, 
l¢
Ë(((÷¢Ë+ 16Ë* (1 << (m¢))Ë- 16)

	)

369 
ölöe
 
	$gëVÆidôyTime
(
uöt8_t
 * 
vÆidôyTimeFõld
) {

370  
	`PUD_VALIDITY_TIME_FROM_OLSR
(*
vÆidôyTimeFõld
 >> 4, *validityTimeField % 16);

371 
	}
}

373 
£tVÆidôyTime
(
uöt8_t
 * 
vÆidôyTimeFõld
,

374 
vÆidôyTime
);

388 
ölöe
 
uöt8_t
 
	$gëU∂ökMesßgeTy≥
(
U∂ökHódî
 * 
u∂ökHódî
) {

389  
u∂ökHódî
->
ty≥
;

390 
	}
}

400 
ölöe
 
	$£tU∂ökMesßgeTy≥
(
U∂ökHódî
 * 
u∂ökHódî
,

401 
uöt8_t
 
ty≥
) {

402 
u∂ökHódî
->
ty≥
 =Åype;

403 
	}
}

413 
ölöe
 
uöt16_t
 
	$gëU∂ökMesßgeLígth
(
U∂ökHódî
 * 
u∂ökHódî
) {

414  
	`¡ohs
(
u∂ökHódî
->
Àngth
);

415 
	}
}

425 
ölöe
 
	$£tU∂ökMesßgeLígth
(
U∂ökHódî
 * 
u∂ökHódî
,

426 
uöt16_t
 
Àngth
) {

427 
u∂ökHódî
->
Àngth
 = 
	`¡ohs
(length);

428 
	}
}

439 
ölöe
 
boﬁ
 
	$gëU∂ökMesßgeIPv6
(
U∂ökHódî
 * 
u∂ökHódî
) {

440  (
u∂ökHódî
->
ùv6
 == 1);

441 
	}
}

452 
ölöe
 
	$£tU∂ökMesßgeIPv6
(
U∂ökHódî
 * 
u∂ökHódî
,

453 
boﬁ
 
ùv6
) {

454 
u∂ökHódî
->
ùv6
 = ipv6 ? 1 : 0;

455 
	}
}

465 
ölöe
 
	$£tU∂ökMesßgePaddög
(
U∂ökHódî
 * 
u∂ökHódî
,

466 
uöt8_t
 
∑d
) {

467 
u∂ökHódî
->
∑d
 =Öad;

468 
	}
}

485 
ölöe
 
	$gëOl§MesßgeSize
(
ùVîsi⁄
,

486 
ﬁ§_mesßge
 * 
ﬁ§Mesßge
) {

487 i‡(
ùVîsi⁄
 =
AF_INET
) {

488  
	`¡ohs
(
ﬁ§Mesßge
->
v4
.
ﬁ§_msgsize
);

491  
	`¡ohs
(
ﬁ§Mesßge
->
v6
.
ﬁ§_msgsize
);

492 
	}
}

504 
ölöe
 
ﬁ§_ù_addr
 * 
	$gëOl§MesßgeOrigö©‹
(
ùVîsi⁄
,

505 
ﬁ§_mesßge
 * 
ﬁ§Mesßge
) {

506 i‡(
ùVîsi⁄
 =
AF_INET
) {

507  (
ﬁ§_ù_addr
 *Ë&
ﬁ§Mesßge
->
v4
.
‹igö©‹
;

510  (
ﬁ§_ù_addr
 *Ë&
ﬁ§Mesßge
->
v6
.
‹igö©‹
;

511 
	}
}

523 
ölöe
 
PudOl§Posôi⁄Upd©e
 * 
	$gëOl§MesßgePaylﬂd
(
ùVîsi⁄
,

524 
ﬁ§_mesßge
 * 
ﬁ§Mesßge
) {

525 i‡(
ùVîsi⁄
 =
AF_INET
) {

526  (
PudOl§Posôi⁄Upd©e
 *Ë&
ﬁ§Mesßge
->
v4
.
mesßge
;

529  (
PudOl§Posôi⁄Upd©e
 *Ë&
ﬁ§Mesßge
->
v6
.
mesßge
;

530 
	}
}

544 
ölöe
 
uöt8_t
 
	$gëPosôi⁄Upd©eVîsi⁄
(

545 
PudOl§Posôi⁄Upd©e
 * 
ﬁ§GpsMesßge
) {

546  
ﬁ§GpsMesßge
->
vîsi⁄
;

547 
	}
}

557 
ölöe
 
	$£tPosôi⁄Upd©eVîsi⁄
(

558 
PudOl§Posôi⁄Upd©e
 * 
ﬁ§GpsMesßge
, 
uöt8_t
 
vîsi⁄
) {

559 
ﬁ§GpsMesßge
->
vîsi⁄
 = version;

560 
	}
}

570 
ölöe
 
uöt8_t
 
	$gëPosôi⁄Upd©eSmask
(

571 
PudOl§Posôi⁄Upd©e
 * 
ﬁ§GpsMesßge
) {

572  
ﬁ§GpsMesßge
->
smask
;

573 
	}
}

583 
ölöe
 
	$£tPosôi⁄Upd©eSmask
(

584 
PudOl§Posôi⁄Upd©e
 * 
ﬁ§GpsMesßge
, 
uöt8_t
 
smask
) {

585 
ﬁ§GpsMesßge
->
smask
 = smask;

586 
	}
}

596 
ölöe
 
uöt8_t
 
	$gëPosôi⁄Upd©eFœgs
(

597 
PudOl§Posôi⁄Upd©e
 * 
ﬁ§GpsMesßge
) {

598  
ﬁ§GpsMesßge
->
Êags
;

599 
	}
}

609 
ölöe
 
	$£tPosôi⁄Upd©eFœgs
(

610 
PudOl§Posôi⁄Upd©e
 * 
ﬁ§GpsMesßge
, 
uöt8_t
 
Êags
) {

611 
ﬁ§GpsMesßge
->
Êags
 = flags;

612 
	}
}

618 
gëPosôi⁄Upd©eTime
(
PudOl§Posôi⁄Upd©e
 * 
ﬁ§GpsMesßge
,

619 
time_t
 
ba£D©e
, 
tm
 *
nowSåu˘
);

634 
ölöe
 
	$£tPosôi⁄Upd©eTime
(
PudOl§Posôi⁄Upd©e
 * 
ﬁ§GpsMesßge
,

635 
hour
, 
mö
, 
£c
) {

636 
ﬁ§GpsMesßge
->
gpsInfo
.
time
 = ((
hour
 * 60 * 60Ë+ (
mö
 * 60Ë+ 
£c
);

637 
	}
}

648 
ölöe
 
	$gëPosôi⁄Upd©eL©ôude
(

649 
PudOl§Posôi⁄Upd©e
 * 
ﬁ§GpsMesßge
) {

650 
uöt32_t
 
ﬁ§L©
 = 
ﬁ§GpsMesßge
->
gpsInfo
.
œt
;

651 
œt
 = (Ë
ﬁ§L©
;

656 
œt
 += 0.5;

658 
œt
 /(Ë(1 << 
PUD_LATITUDE_BITS
);

661 
œt
 -= 0.5;

664 
œt
 *= 180.0;

667  
œt
;

668 
	}
}

678 
ölöe
 
	$£tPosôi⁄Upd©eL©ôude
(

679 
PudOl§Posôi⁄Upd©e
 * 
ﬁ§GpsMesßge
, 
œtôude
) {

680 
œt
 = 
œtôude
;

683 
	`as£π
(
œt
 >= -90.0);

684 
	`as£π
(
œt
 <= 90.0);

686 
œt
 /= 180.0;

689 
œt
 += 0.5;

692 
œt
 *(Ë(1 << 
PUD_LATITUDE_BITS
);

696 i‡(
	`u∆ikñy
(
œt
 > ()((1 << 
PUD_LATITUDE_BITS
) - 1))) {

697 
œt
 = (Ë((1 << 
PUD_LATITUDE_BITS
) - 1);

701 
ﬁ§GpsMesßge
->
gpsInfo
.
œt
 = 
	`Ãöt
(lat);

702 
	}
}

713 
ölöe
 
	$gëPosôi⁄Upd©eL⁄gôude
(

714 
PudOl§Posôi⁄Upd©e
 * 
ﬁ§GpsMesßge
) {

715 
uöt32_t
 
ﬁ§L⁄
 = 
ﬁ§GpsMesßge
->
gpsInfo
.
l⁄
;

716 
l⁄
 = (Ë
ﬁ§L⁄
;

721 
l⁄
 += 0.5;

723 
l⁄
 /(1 << 
PUD_LONGITUDE_BITS
);

726 
l⁄
 -= 0.5;

729 
l⁄
 *= 360.0;

732  
l⁄
;

733 
	}
}

743 
ölöe
 
	$£tPosôi⁄Upd©eL⁄gôude
(

744 
PudOl§Posôi⁄Upd©e
 * 
ﬁ§GpsMesßge
, 
l⁄gôude
) {

745 
l⁄
 = 
l⁄gôude
;

748 
	`as£π
(
l⁄
 >= -180.0);

749 
	`as£π
(
l⁄
 <= 180.0);

751 
l⁄
 /= 360.0;

754 
l⁄
 += 0.5;

757 
l⁄
 *(Ë(1 << 
PUD_LONGITUDE_BITS
);

761 i‡(
	`u∆ikñy
(
l⁄
 > ()((1 << 
PUD_LATITUDE_BITS
) - 1))) {

762 
l⁄
 = (Ë((1 << 
PUD_LATITUDE_BITS
) - 1);

767 
ﬁ§GpsMesßge
->
gpsInfo
.
l⁄
 = 
	`Ãöt
(lon);

768 
	}
}

779 
ölöe
 
	$gëPosôi⁄Upd©eA…ôude
(

780 
PudOl§Posôi⁄Upd©e
 * 
ﬁ§GpsMesßge
) {

781  ((Ë
ﬁ§GpsMesßge
->
gpsInfo
.
Æt
 + 
PUD_ALTITUDE_MIN
);

782 
	}
}

792 
ölöe
 
	$£tPosôi⁄Upd©eA…ôude
(

793 
PudOl§Posôi⁄Upd©e
 * 
ﬁ§GpsMesßge
, 
Ætôude
) {

794 
Æt
 = 
Ætôude
;

796 i‡(
	`u∆ikñy
(
Æt
 > 
PUD_ALTITUDE_MAX
)) {

797 
Æt
 = 
PUD_ALTITUDE_MAX
;

798 } i‡(
	`u∆ikñy
(
Æt
 < 
PUD_ALTITUDE_MIN
)) {

799 
Æt
 = 
PUD_ALTITUDE_MIN
;

802 
Æt
 -
PUD_ALTITUDE_MIN
;

804 
ﬁ§GpsMesßge
->
gpsInfo
.
Æt
 = 
	`Ãöt
(alt);

805 
	}
}

816 
ölöe
 
	$gëPosôi⁄Upd©eS≥ed
(

817 
PudOl§Posôi⁄Upd©e
 * 
ﬁ§GpsMesßge
) {

818  
ﬁ§GpsMesßge
->
gpsInfo
.
•ìd
;

819 
	}
}

829 
ölöe
 
	$£tPosôi⁄Upd©eS≥ed
(

830 
PudOl§Posôi⁄Upd©e
 * 
ﬁ§GpsMesßge
, 
•ìd
) {

831 
•d
 = 
•ìd
;

833 i‡(
	`u∆ikñy
(
•ìd
 < 0)) {

834 
•d
 = 0;

835 } i‡(
	`u∆ikñy
(
•ìd
 > 
PUD_SPEED_MAX
)) {

836 
•d
 = 
PUD_SPEED_MAX
;

839 
ﬁ§GpsMesßge
->
gpsInfo
.
•ìd
 = 
	`Ãöt
(
•d
);

840 
	}
}

851 
ölöe
 
	$gëPosôi⁄Upd©eTøck
(

852 
PudOl§Posôi⁄Upd©e
 * 
ﬁ§GpsMesßge
) {

853  
ﬁ§GpsMesßge
->
gpsInfo
.
åack
;

854 
	}
}

864 
ölöe
 
	$£tPosôi⁄Upd©eTøck
(

865 
PudOl§Posôi⁄Upd©e
 * 
ﬁ§GpsMesßge
, 
åack
) {

866 
ﬁ§GpsMesßge
->
gpsInfo
.
åack
 = 
	`Ãöt
(track);

867 
	}
}

878 
ölöe
 
	$gëPosôi⁄Upd©eHd›
(

879 
PudOl§Posôi⁄Upd©e
 * 
ﬁ§GpsMesßge
) {

880  (
ﬁ§GpsMesßge
->
gpsInfo
.
hd›
 * 
PUD_HDOP_RESOLUTION
);

881 
	}
}

891 
ölöe
 
	$£tPosôi⁄Upd©eHd›
(
PudOl§Posôi⁄Upd©e
 * 
ﬁ§GpsMesßge
,

892 
hd›
) {

893 
hd›I¡î«l
 = 
hd›
;

895 i‡(
	`u∆ikñy
(
hd›I¡î«l
 > 
PUD_HDOP_MAX
)) {

896 
hd›I¡î«l
 = 
PUD_HDOP_MAX
;

899 
ﬁ§GpsMesßge
->
gpsInfo
.
hd›
 = 
	`Ãöt
(
hd›I¡î«l
 / 
PUD_HDOP_RESOLUTION
);

900 
	}
}

917 
ölöe
 
NodeIdTy≥
 
	$gëPosôi⁄Upd©eNodeIdTy≥
(
ùVîsi⁄
,

918 
PudOl§Posôi⁄Upd©e
 * 
ﬁ§GpsMesßge
) {

919 i‡(
	`gëPosôi⁄Upd©eFœgs
(
ﬁ§GpsMesßge
Ë& 
PUD_FLAGS_ID
) {

920  
ﬁ§GpsMesßge
->
nodeInfo
.
nodeIdTy≥
;

923  ((
ùVîsi⁄
 =
AF_INET
Ë? 
PUD_NODEIDTYPE_IPV4
 : 
PUD_NODEIDTYPE_IPV6
);

924 
	}
}

934 
ölöe
 
	$£tPosôi⁄Upd©eNodeIdTy≥
(

935 
PudOl§Posôi⁄Upd©e
 * 
ﬁ§GpsMesßge
, 
NodeIdTy≥
 
nodeIdTy≥
) {

936 
ﬁ§GpsMesßge
->
nodeInfo
.
nodeIdTy≥
 =ÇodeIdType;

937 
	}
}

939 
gëPosôi⁄Upd©eNodeId
(
ùVîsi⁄
, 
ﬁ§_mesßge
 * 
ﬁ§Mesßge
,

940 ** 
nodeId
, * 
nodeIdSize
);

954 
ölöe
 
	$£tPosôi⁄Upd©eNodeId
(

955 
PudOl§Posôi⁄Upd©e
 * 
ﬁ§GpsMesßge
, * 
nodeId
,

956 
nodeIdSize
, 
boﬁ
 
∑dWôhNuŒByã
) {

957 
	`mem˝y
(&
ﬁ§GpsMesßge
->
nodeInfo
.
nodeId
,ÇodeId, 
nodeIdSize
);

958 i‡(
	`u∆ikñy
(
∑dWôhNuŒByã
)) {

959 (&
ﬁ§GpsMesßge
->
nodeInfo
.
nodeId
)[
nodeIdSize
] = '\0';

961 
	}
}

963 
size_t
 
£tPosôi⁄Upd©eNodeInfo
(
ùVîsi⁄
,

964 
PudOl§Posôi⁄Upd©e
 * 
ﬁ§GpsMesßge
, 
ﬁ§MesßgeSize
,

965 
NodeIdTy≥
 
nodeIdTy≥
, * 
nodeId
, 
size_t
 
nodeIdLígth
);

979 
ölöe
 
uöt8_t
 
	$gëClu°îLódîVîsi⁄
(

980 
U∂ökClu°îLódî
 * 
˛u°îLódîMesßge
) {

981  
˛u°îLódîMesßge
->
vîsi⁄
;

982 
	}
}

992 
ölöe
 
	$£tClu°îLódîVîsi⁄
(

993 
U∂ökClu°îLódî
 * 
˛u°îLódîMesßge
, 
uöt8_t
 
vîsi⁄
) {

994 
˛u°îLódîMesßge
->
vîsi⁄
 = version;

995 
	}
}

1007 
ölöe
 
ﬁ§_ù_addr
 * 
	$gëClu°îLódîOrigö©‹
(
ùVîsi⁄
,

1008 
U∂ökClu°îLódî
 * 
˛u°îLódîMesßge
) {

1009 i‡(
ùVîsi⁄
 =
AF_INET
) {

1010  (
ﬁ§_ù_addr
 *Ë&
˛u°îLódîMesßge
->
Àadî
.
v4
.
‹igö©‹
;

1013  (
ﬁ§_ù_addr
 *Ë&
˛u°îLódîMesßge
->
Àadî
.
v6
.
‹igö©‹
;

1014 
	}
}

1026 
ölöe
 
ﬁ§_ù_addr
 * 
	$gëClu°îLódîClu°îLódî
(
ùVîsi⁄
,

1027 
U∂ökClu°îLódî
 * 
˛u°îLódîMesßge
) {

1028 i‡(
ùVîsi⁄
 =
AF_INET
) {

1029  (
ﬁ§_ù_addr
 *Ë&
˛u°îLódîMesßge
->
Àadî
.
v4
.
˛u°îLódî
;

1032  (
ﬁ§_ù_addr
 *Ë&
˛u°îLódîMesßge
->
Àadî
.
v6
.
˛u°îLódî
;

1033 
	}
}

	@lib/pud/wireformat/src/nodeIdConversion.c

1 
	~<Ol§dPudWúeF‹m©/nodeIdC⁄vîsi⁄.h
>

3 
	~<°dio.h
>

4 
	~<uni°d.h
>

5 
	~<¨∑/öë.h
>

26 
	$gëNodeTy≥SåögFromOl§
(
ùVîsi⁄
,

27 
PudOl§Posôi⁄Upd©e
 * 
ﬁ§GpsMesßge
, * 
nodeIdTy≥Buf„r
,

28 
nodeIdTy≥Buf„rSize
) {

29 
ch¨s
;

31 i‡(
	`u∆ikñy
(!
nodeIdTy≥Buf„r
 || (
nodeIdTy≥Buf„rSize
 == 0))) {

35 
	`as£π
(
nodeIdTy≥Buf„rSize
 >(
PUD_TX_NODEIDTYPE_DIGITS
 + 1));

38 
ch¨s
 = 
	`¢¥ötf
(&
nodeIdTy≥Buf„r
[0], 
nodeIdTy≥Buf„rSize
, "%u",

39 
	`gëPosôi⁄Upd©eNodeIdTy≥
(
ùVîsi⁄
, 
ﬁ§GpsMesßge
));

40 i‡(
	`likñy
(
ch¨s
 < 
nodeIdTy≥Buf„rSize
)) {

41 
nodeIdTy≥Buf„r
[
ch¨s
] = '\0';

43 
nodeIdTy≥Buf„r
[
nodeIdTy≥Buf„rSize
] = '\0';

47 
	}
}

65 *
	$gëNodeIdNumbîFromOl§
(* 
buf„r
,

66 
buf„rSize
, *
nodeIdBuf„r
, 
sockÀn_t
 
nodeIdBuf„rSize
) {

67 
vÆ
 = 0;

68 
i
 = 0;

69 
ch¨s
;

71 
i
 < 
buf„rSize
) {

72 
vÆ
 <<= 8;

73 
vÆ
 +
buf„r
[
i
];

74 
i
++;

77 
ch¨s
 = 
	`¢¥ötf
(
nodeIdBuf„r
, 
nodeIdBuf„rSize
, "%Œu", 
vÆ
);

78 i‡(
	`likñy
(
ch¨s
 < (Ë
nodeIdBuf„rSize
)) {

79 
nodeIdBuf„r
[
ch¨s
] = '\0';

81 
nodeIdBuf„r
[
nodeIdBuf„rSize
] = '\0';

83  &
nodeIdBuf„r
[0];

84 
	}
}

108 
	$gëNodeIdSåögFromOl§
(
ùVîsi⁄
, 
ﬁ§_mesßge
 *
ﬁ§Mesßge
,

109 c⁄° **
nodeIdSå
, *
nodeIdSåBuf„r
,

110 
nodeIdSåBuf„rSize
) {

111 
PudOl§Posôi⁄Upd©e
 * 
ﬁ§GpsMesßge
;

112 * 
nodeId
;

113 
nodeIdSize
;

115 i‡(
	`u∆ikñy
(!
nodeIdSåBuf„r
 || (
nodeIdSåBuf„rSize
 =0Ë|| !
nodeIdSå
)) {

119 
	`as£π
(
nodeIdSåBuf„rSize
 >(
PUD_TX_NODEID_BUFFERSIZE
 + 1));

121 
ﬁ§GpsMesßge
 = 
	`gëOl§MesßgePaylﬂd
(
ùVîsi⁄
, 
ﬁ§Mesßge
);

123 
	`gëPosôi⁄Upd©eNodeId
(
ùVîsi⁄
, 
ﬁ§Mesßge
, &
nodeId
, &
nodeIdSize
);

125 
	`gëPosôi⁄Upd©eNodeIdTy≥
(
ùVîsi⁄
, 
ﬁ§GpsMesßge
)) {

126 
PUD_NODEIDTYPE_MAC
:

128 
ch¨s
;

130 
	`as£π
(
nodeIdSize
 == 6);

132 
ch¨s
 = 
	`¢¥ötf
(
nodeIdSåBuf„r
, 
nodeIdSåBuf„rSize
,

133 "%02x:%02x:%02x:%02x:%02x:%02x", 
nodeId
[0],ÇodeId[1],

134 
nodeId
[2],ÇodeId[3],ÇodeId[4],ÇodeId[5]);

135 i‡(
	`likñy
(
ch¨s
 < (Ë
nodeIdSåBuf„rSize
)) {

136 
nodeIdSåBuf„r
[
ch¨s
] = '\0';

138 
nodeIdSåBuf„r
[
nodeIdSåBuf„rSize
 - 1] = '\0';

140 *
nodeIdSå
 = &
nodeIdSåBuf„r
[0];

144 
PUD_NODEIDTYPE_DNS
:

145 *
nodeIdSå
 = (*Ë
nodeId
;

148 
PUD_NODEIDTYPE_MSISDN
:

149 
PUD_NODEIDTYPE_TETRA
:

150 
PUD_NODEIDTYPE_MMSI
:

151 
PUD_NODEIDTYPE_URN
:

152 
PUD_NODEIDTYPE_192
:

153 
PUD_NODEIDTYPE_193
:

154 
PUD_NODEIDTYPE_194
:

155 *
nodeIdSå
 = 
	`gëNodeIdNumbîFromOl§
(
nodeId
, 
nodeIdSize
,

156 
nodeIdSåBuf„r
, 
nodeIdSåBuf„rSize
);

159 
PUD_NODEIDTYPE_IPV4
:

160 
PUD_NODEIDTYPE_IPV6
:

163 * 
addr
 = 
	`gëOl§MesßgeOrigö©‹
(
ùVîsi⁄
, 
ﬁ§Mesßge
);

164 *
nodeIdSå
 = 
	`öë_¡›
(
ùVîsi⁄
, 
addr
, 
nodeIdSåBuf„r
,

165 
nodeIdSåBuf„rSize
);

171 
	}
}

184 
boﬁ
 
	$£tupNodeIdBö¨yMAC
(
nodeIdBö¨yTy≥
 * 
nodeIdBö¨y
, * 
mac
) {

185 
	`mem˝y
(&
nodeIdBö¨y
->
buf„r
.
mac
, mac, 
PUD_NODEIDTYPE_MAC_BYTES
);

186 
nodeIdBö¨y
->
Àngth
 = 
PUD_NODEIDTYPE_MAC_BYTES
;

187 
nodeIdBö¨y
->
£t
 = 
åue
;

188  
åue
;

189 
	}
}

205 
boﬁ
 
	$£tupNodeIdBö¨yL⁄gL⁄g
(
nodeIdBö¨yTy≥
 * 
nodeIdBö¨y
,

206 
vÆue
, 
size_t
 
byãs
) {

207 
l⁄gVÆue
 = 
vÆue
;

208 
i
 = 
byãs
 - 1;

210 
i
 >= 0) {

211 ((*Ë&
nodeIdBö¨y
->
buf„r
.
l⁄gVÆue
)[
i
] =ÜongValue & 0xff;

212 
l⁄gVÆue
 >>= 8;

213 
i
--;

216 
	`as£π
(
l⁄gVÆue
 == 0);

218 
nodeIdBö¨y
->
Àngth
 = 
byãs
;

219 
nodeIdBö¨y
->
£t
 = 
åue
;

220  
åue
;

221 
	}
}

236 
boﬁ
 
	$£tupNodeIdBö¨ySåög
(
nodeIdBö¨yTy≥
 * 
nodeIdBö¨y
, * 
nodeId
,

237 
size_t
 
nodeIdLígth
) {

239 
	`mem˝y
(&
nodeIdBö¨y
->
buf„r
.
°rögVÆue
[0], &
nodeId
[0], 
nodeIdLígth
 + 1);

240 
nodeIdBö¨y
->
Àngth
 = 
nodeIdLígth
 + 1;

241 
nodeIdBö¨y
->
£t
 = 
åue
;

242  
åue
;

243 
	}
}

258 
boﬁ
 
	$£tupNodeIdBö¨yIp
(
nodeIdBö¨yTy≥
 * 
nodeIdBö¨y
, * 
ù
,

259 
size_t
 
ùLígth
) {

260 
	`mem˝y
(&
nodeIdBö¨y
->
buf„r
.
ù
, ip, 
ùLígth
);

261 
nodeIdBö¨y
->
Àngth
 = 
ùLígth
;

262 
nodeIdBö¨y
->
£t
 = 
åue
;

263  
åue
;

264 
	}
}

	@lib/pud/wireformat/src/wireFormat.c

1 
	~<Ol§dPudWúeF‹m©/wúeF‹m©.h
>

3 
	~<time.h
>

19 
	$£tVÆidôyTime
(
uöt8_t
 * 
vÆidôyTimeFõld
,

20 
vÆidôyTime
) {

21 
m¢
 = 1;

22 
l¢
 = 0;

23 
uµîBound
;

25 
uµîBound
 = 
	`PUD_VALIDITY_TIME_FROM_OLSR
(
m¢
, 0);

26 (
m¢
 < 16Ë&& (
vÆidôyTime
 >
uµîBound
)) {

27 
m¢
++;

28 
uµîBound
 = 
	`PUD_VALIDITY_TIME_FROM_OLSR
(
m¢
, 0);

30 
m¢
--;

32 i‡(
	`u∆ikñy
(
vÆidôyTime
 >
uµîBound
)) {

33 
l¢
 = 15;

35 
lowîBound
 = 
	`PUD_VALIDITY_TIME_FROM_OLSR
(
m¢
, 0);

36 
ªsﬁuti⁄
 = (1 << 
m¢
);

37 
l¢
 = ((
vÆidôyTime
 - 
lowîBound
 + (
ªsﬁuti⁄
 >> 1)) /Ñesolution);

40 
	`as£π
(
m¢
 <= 15);

41 
	`as£π
(
l¢
 <= 15);

43 *
vÆidôyTimeFõld
 = ((
m¢
 << 4Ë| 
l¢
);

44 
	}
}

97 
	$gëPosôi⁄Upd©eTime
(
PudOl§Posôi⁄Upd©e
 * 
ﬁ§GpsMesßge
,

98 
time_t
 
ba£D©e
, 
tm
 *
nowSåu˘
) {

99 
uöt32_t
 
ﬁ§Time
 = 
ﬁ§GpsMesßge
->
gpsInfo
.
time
;

100 
£cNow
;

102 
time_t
 
now
 = 
ba£D©e
;

103 
	`gmtime_r
(&
now
, 
nowSåu˘
);

105 
£cNow
 = ((
nowSåu˘
->
tm_hour
 * 60 * 60Ë+ (nowSåu˘->
tm_mö
 * 60)

106 + 
nowSåu˘
->
tm_£c
);

108 i‡(
£cNow
 <= (12 * 60 * 60)) {

110 i‡(
	`u∆ikñy
(
ﬁ§Time
 > (
£cNow
 + (12 * 60 * 60)))) {

113 
now
 -= (24 * 60 * 60);

114 
	`gmtime_r
(&
now
, 
nowSåu˘
);

118 i‡(
	`u∆ikñy
(
ﬁ§Time
 < (
£cNow
 - (12 * 60 * 60)))) {

121 
now
 += (24 * 60 * 60);

122 
	`gmtime_r
(&
now
, 
nowSåu˘
);

126 
nowSåu˘
->
tm_hour
 = ((
ﬁ§Time
 % (24 * 60 * 60)) / 3600);

127 
nowSåu˘
->
tm_mö
 = ((
ﬁ§Time
 % (60 * 60)) / 60);

128 
nowSåu˘
->
tm_£c
 = (
ﬁ§Time
 % 60);

129 
	}
}

170 
	$gëPosôi⁄Upd©eNodeId
(
ùVîsi⁄
, 
ﬁ§_mesßge
 * 
ﬁ§Mesßge
,

171 ** 
nodeId
, * 
nodeIdSize
) {

172 
PudOl§Posôi⁄Upd©e
 * 
ﬁ§GpsMesßge
 = 
	`gëOl§MesßgePaylﬂd
(
ùVîsi⁄
,

173 
ﬁ§Mesßge
);

175 *
nodeId
 = &
ﬁ§GpsMesßge
->
nodeInfo
.nodeId;

177 
	`gëPosôi⁄Upd©eNodeIdTy≥
(
ùVîsi⁄
, 
ﬁ§GpsMesßge
)) {

178 
PUD_NODEIDTYPE_MAC
:

179 *
nodeIdSize
 = 
PUD_NODEIDTYPE_MAC_BYTES
;

182 
PUD_NODEIDTYPE_MSISDN
:

183 *
nodeIdSize
 = 
PUD_NODEIDTYPE_MSISDN_BYTES
;

186 
PUD_NODEIDTYPE_TETRA
:

187 *
nodeIdSize
 = 
PUD_NODEIDTYPE_TETRA_BYTES
;

190 
PUD_NODEIDTYPE_DNS
:

191 *
nodeIdSize
 = 
	`°æí
((*Ë*
nodeId
);

197 
PUD_NODEIDTYPE_MMSI
:

198 *
nodeIdSize
 = 
PUD_NODEIDTYPE_MMSI_BYTES
;

201 
PUD_NODEIDTYPE_URN
:

202 *
nodeIdSize
 = 
PUD_NODEIDTYPE_URN_BYTES
;

205 
PUD_NODEIDTYPE_192
:

206 *
nodeIdSize
 = 
PUD_NODEIDTYPE_192_BYTES
;

209 
PUD_NODEIDTYPE_193
:

210 *
nodeIdSize
 = 
PUD_NODEIDTYPE_193_BYTES
;

213 
PUD_NODEIDTYPE_194
:

214 *
nodeIdSize
 = 
PUD_NODEIDTYPE_194_BYTES
;

217 
PUD_NODEIDTYPE_IPV4
:

218 
PUD_NODEIDTYPE_IPV6
:

221 *
nodeId
 = (*Ë
	`gëOl§MesßgeOrigö©‹
(
ùVîsi⁄
,

222 
ﬁ§Mesßge
);

223 *
nodeIdSize
 =

224 (
ùVîsi⁄
 =
AF_INET
) ?

225 
PUD_NODEIDTYPE_IPV4_BYTES
 : 
PUD_NODEIDTYPE_IPV6_BYTES
;

231 
	}
}

255 
size_t
 
	$£tPosôi⁄Upd©eNodeInfo
(
ùVîsi⁄
,

256 
PudOl§Posôi⁄Upd©e
 * 
ﬁ§GpsMesßge
, 
ﬁ§MesßgeSize
,

257 
NodeIdTy≥
 
nodeIdTy≥
, * 
nodeId
, 
size_t
 
nodeIdLígth
) {

258 
Àngth
 = 0;

260 
	`£tPosôi⁄Upd©eNodeIdTy≥
(
ﬁ§GpsMesßge
, 
nodeIdTy≥
);

261 
nodeIdTy≥
) {

262 
PUD_NODEIDTYPE_MAC
:

263 
PUD_NODEIDTYPE_MSISDN
:

264 
PUD_NODEIDTYPE_TETRA
:

265 
PUD_NODEIDTYPE_MMSI
:

266 
PUD_NODEIDTYPE_URN
:

267 
PUD_NODEIDTYPE_192
:

268 
PUD_NODEIDTYPE_193
:

269 
PUD_NODEIDTYPE_194
:

270 
Àngth
 = 
nodeIdLígth
;

271 
	`£tPosôi⁄Upd©eNodeId
(
ﬁ§GpsMesßge
, 
nodeId
, 
nodeIdLígth
, 
Ál£
);

274 
PUD_NODEIDTYPE_DNS
:

276 
ch¨sAvaûabÀ
 = 
ﬁ§MesßgeSize


277 - (
PUD_OLSRWIREFORMATSIZE
 + (
NodeInfo
)

278 - (
ﬁ§GpsMesßge
->
nodeInfo
.
nodeId
)) - 1;

280 
Àngth
 = 
nodeIdLígth
 + 1;

281 i‡(
	`u∆ikñy
((Ë
Àngth
 > 
ch¨sAvaûabÀ
)) {

282 
Àngth
 = 
ch¨sAvaûabÀ
;

285 
	`£tPosôi⁄Upd©eNodeId
(
ﬁ§GpsMesßge
, 
nodeId
, 
Àngth
, 
åue
);

289 
PUD_NODEIDTYPE_IPV4
:

290 
PUD_NODEIDTYPE_IPV6
:

296 
	`£tPosôi⁄Upd©eNodeIdTy≥
(
ﬁ§GpsMesßge
,

297 (
ùVîsi⁄
 =
AF_INET
Ë? 
PUD_NODEIDTYPE_IPV4
 :

298 
PUD_NODEIDTYPE_IPV6
);

304 
	`£tPosôi⁄Upd©eFœgs
(
ﬁ§GpsMesßge
,

305 
	`gëPosôi⁄Upd©eFœgs
(
ﬁ§GpsMesßge
Ë| 
PUD_FLAGS_ID
);

306  (((
NodeInfo
)

307 - ((
ﬁ§GpsMesßge
->
nodeInfo
.
nodeId
) ))

308 + 
Àngth
);

309 
	}
}

	@lib/quagga/src/client.c

20 
	#HAVE_SOCKLEN_T


	)

22 
	~<sys/un.h
>

23 
	~<uni°d.h
>

24 
	~<f˙é.h
>

25 
	~"defs.h
"

26 
	~"ﬁ§.h
"

27 
	~"log.h
"

28 
	~"routög_èbÀ.h
"

30 
	~"comm⁄.h
"

31 
	~"quagga.h
"

32 
	~"∑ckë.h
"

33 
	~"˛õ¡.h
"

35 *
my_ªÆloc
(*, 
size_t
, const *);

36 
z˛õ¡_c⁄√˘
();

39 
	$my_ªÆloc
(*
buf
, 
size_t
 
s
, c⁄° *
c
)

42 
buf
 = 
	`ªÆloc
(buf, 
s
);

43 i‡(!
buf
) {

44 
	`OLSR_PRINTF
(1, "(QUAGGAËOuào‡mem‹y: %s!\n", 
	`°ªº‹
(
î∫o
));

45 
	`ﬁ§_sy¶og
(
OLSR_LOG_ERR
, "(QUAGGA) Out of memory!\n");

46 
	`ﬁ§_exô
(
c
, 
EXIT_FAILURE
);

49  
buf
;

50 
	}
}

53 
	$z˛õ¡_c⁄√˘
()

55 
ªt
;

58 
sockaddr_ö
 
sö
;

59 
sockaddr_un
 
sun
;

60 } 
sockaddr
;

62 i‡(
	`˛o£
(
zebø
.
sock
) < 0)

63 
	`ﬁ§_exô
("(QUAGGAËCouldÇŸ clo£ sockë!", 
EXIT_FAILURE
);

64 
zebø
.
sock
 = 
	`sockë
(zebø.
p‹t
 ? 
AF_INET
 : 
AF_UNIX
, 
SOCK_STREAM
, 0);

66 i‡(
zebø
.
sock
 < 0)

67 
	`ﬁ§_exô
("(QUAGGAËCouldÇŸ cª©êsockë!", 
EXIT_FAILURE
);

69 
	`mem£t
(&
sockaddr
, 0,  sockaddr);

71 i‡(
zebø
.
p‹t
) {

72 
sockaddr
.
sö
.
sö_Ámûy
 = 
AF_INET
;

73 
sockaddr
.
sö
.
sö_p‹t
 = 
	`ht⁄s
(
zebø
.
p‹t
);

74 
sockaddr
.
sö
.
sö_addr
.
s_addr
 = 
	`ht⁄l
(
INADDR_LOOPBACK
);

75 
ªt
 = 
	`c⁄√˘
(
zebø
.
sock
, (
sockaddr
 *)&sockaddr.
sö
,  sockaddr.sin);

77 
sockaddr
.
sun
.
sun_Ámûy
 = 
AF_UNIX
;

78 
	`°rs˝y
(
sockaddr
.
sun
.
sun_∑th
, 
zebø
.
sock∑th
, (sockaddr.sun.sun_path));

79 
ªt
 = 
	`c⁄√˘
(
zebø
.
sock
, (
sockaddr
 *)&sockaddr.
sun
,  sockaddr.sun);

82 i‡(
ªt
 < 0)

83 
zebø
.
°©us
 &~
STATUS_CONNECTED
;

85 
zebø
.
°©us
 |
STATUS_CONNECTED
;

87 
	}
}

90 
	$z˛õ¡_ªc⁄√˘
()

92 
π_íåy
 *
tmp
;

94 
	`z˛õ¡_c⁄√˘
();

95 i‡(!(
zebø
.
°©us
 & 
STATUS_CONNECTED
))

98 i‡(
zebø
.
›ti⁄s
 & 
OPTION_EXPORT
) {

99 
	`OLSR_FOR_ALL_RT_ENTRIES
(
tmp
) {

100 
	`zebø_addrouã
(
tmp
);

102 
	`OLSR_FOR_ALL_RT_ENTRIES_END
(
tmp
);

104 
	`zebø_ªdi°ribuã
(
ZEBRA_REDISTRIBUTE_ADD
);

106 
	}
}

109 
	$z˛õ¡_wrôe
(*
›ti⁄s
)

111 *
≤t
;

112 
uöt16_t
 
Àn
;

113 
ªt
;

115 i‡(!(
zebø
.
°©us
 & 
STATUS_CONNECTED
))

118 
≤t
 = 
›ti⁄s
;

119 
	`mem˝y
(&
Àn
, 
≤t
, Üen);

121 
Àn
 = 
	`¡ohs
(len);

124 
ªt
 = 
	`wrôe
(
zebø
.
sock
, 
≤t
, 
Àn
);

125 i‡(
ªt
 < 0) {

126 i‡((
î∫o
 =
EINTR
Ë|| (î∫ÿ=
EAGAIN
)) {

127 
î∫o
 = 0;

128 
ªt
 = 0;

131 
	`OLSR_PRINTF
(1, "(QUAGGA) Disconnected from zebra.\n");

132 
zebø
.
°©us
 &~
STATUS_CONNECTED
;

134 
	`‰ì
(
›ti⁄s
);

138 
≤t
 =Ö¡ + 
ªt
;

140 (
Àn
 -
ªt
));

141 
	`‰ì
(
›ti⁄s
);

144 
	}
}

147 
	$z˛õ¡_ªad
(
ssize_t
 * 
size
)

149 *
buf
;

150 
ssize_t
 
byãs
, 
bufsize
;

151 
uöt16_t
 
Àngth
, 
off£t
;

152 
sock°©us
;

155 
buf
 = 
NULL
;

156 
off£t
 = 0;

157 *
size
 = 0;

158 
bufsize
 = 0;

161 
sock°©us
 = 
	`f˙é
(
zebø
.
sock
, 
F_GETFL
);

162 
	`f˙é
(
zebø
.
sock
, 
F_SETFL
, 
sock°©us
|
O_NONBLOCK
);

168 i‡(*
size
 =
bufsize
) {

169 
bufsize
 +
BUFSIZE
;

170 
buf
 = 
	`my_ªÆloc
(buf, 
bufsize
, "QUAGGA: GrowÑead buffer");

174 
byãs
 = 
	`ªad
(
zebø
.
sock
, 
buf
 + *
size
, 
bufsize
 - *size);

176 i‡(!
byãs
) {

177 
	`‰ì
(
buf
);

178  
NULL
;

181 i‡(
byãs
 < 0) {

183 i‡(
î∫o
 !
EAGAIN
) {

184 
	`OLSR_PRINTF
(1, "(QUAGGA) Disconnected from zebra\n");

185 
zebø
.
°©us
 &~
STATUS_CONNECTED
;

188 
	`‰ì
(
buf
);

189  
NULL
;

192 *
size
 +
byãs
;

196 
	`mem˝y
(&
Àngth
, 
buf
 + 
off£t
, Üength);

197 
Àngth
 = 
	`¡ohs
(length);

198 
off£t
 +
Àngth
;

200 *
size
 >(
ssize_t
Ë(
off£t
 +  
Àngth
));

202 i‡(*
size
 !
off£t
)

203 
	`f˙é
(
zebø
.
sock
, 
F_SETFL
, 
sock°©us
);

206 *
size
 !
off£t
);

209 
	`f˙é
(
zebø
.
sock
, 
F_SETFL
, 
sock°©us
);

211  
buf
;

212 
	}
}

	@lib/quagga/src/client.h

20 
	#STATUS_CONNECTED
 1

	)

23 
	#BUFSIZE
 1024

	)

25 
z˛õ¡_ªc⁄√˘
();

26 
z˛õ¡_wrôe
(*);

27 *
z˛õ¡_ªad
(
ssize_t
 *);

	@lib/quagga/src/common.h

20 
	#OPTION_EXPORT
 1

	)

23 
	#ZEBRA_ROUTE_OLSR
 11

	)

24 
	#ZEBRA_ROUTE_MAX
 13

	)

26 
	szebø
 {

27 
	m°©us
;

28 
	m›ti⁄s
;

29 
	msock
;

30 
	mªdi°ribuã
[
ZEBRA_ROUTE_MAX
];

31 
	mdi°™˚
;

32 
	mÊags
;

33 *
	msock∑th
;

34 
	mp‹t
;

35 
	mvîsi⁄
;

38 
zebø
 zebra;

	@lib/quagga/src/olsrd_plugin.c

20 
	~"ﬁ§d_∂ugö.h
"

21 
	~"scheduÀr.h
"

22 
	~"defs.h
"

24 
	~"quagga.h
"

25 
	~"∂ugö.h
"

26 
	~"∑r£.h
"

28 
	#PLUGIN_NAME
 "OLSRD quagg®∂ugö"

	)

29 
	#PLUGIN_VERSION
 "0.2.2"

	)

30 
	#PLUGIN_AUTHOR
 "Immÿ'FaUl' Wehªnbîg"

	)

31 
	#MOD_DESC
 
PLUGIN_NAME
 " " 
PLUGIN_VERSION
 " by " 
PLUGIN_AUTHOR


	)

32 
	#PLUGIN_INTERFACE_VERSION
 5

	)

34 
__©åibuã__
 ((
c⁄°ru˘‹
)Ë
my_öô
();

35 
__©åibuã__
 ((
de°ru˘‹
)Ë
my_föi
();

38 
	$ﬁ§d_∂ugö_öãrÁ˚_vîsi⁄
()

41  
PLUGIN_INTERFACE_VERSION
;

42 
	}
}

44 c⁄° 
ﬁ§d_∂ugö_∑ømëîs
 
	g∂ugö_∑ømëîs
[] = {

45 {.
«me
 = "Redi°ribuã",.
	g£t_∂ugö_∑ømëî
 = &
z∂ugö_ªdi°ribuã
,},

46 {.
	g«me
 = "Exp‹tRouãs",.
	g£t_∂ugö_∑ømëî
 = &
z∂ugö_exp‹åouãs
,},

47 {.
	g«me
 = "Di°™˚",.
	g£t_∂ugö_∑ømëî
 = &
z∂ugö_di°™˚
,},

48 {.
	g«me
 = "LoˇlPªf",.
	g£t_∂ugö_∑ømëî
 = &
z∂ugö_loˇÕªf
,},

49 {.
	g«me
 = "SockP©h",.
	g£t_∂ugö_∑ømëî
 = &
z∂ugö_sock∑th
,.
	gadd⁄
 = {
PATH_MAX
},},

50 {.
	g«me
 = "P‹t",.
	g£t_∂ugö_∑ømëî
 = &
z∂ugö_p‹t
,},

51 {.
	g«me
 = "Vîsi⁄",.
	g£t_∂ugö_∑ømëî
 = &
z∂ugö_vîsi⁄
,},

55 
	$ﬁ§d_gë_∂ugö_∑ømëîs
(c⁄° 
ﬁ§d_∂ugö_∑ømëîs
 **
∑øms
, *
size
)

58 *
∑øms
 = 
∂ugö_∑ømëîs
;

59 *
size
 = 
	`ARRAYSIZE
(
∂ugö_∑ømëîs
);

61 
	}
}

64 
	$ﬁ§d_∂ugö_öô
()

67 
	`ﬁ§_°¨t_timî
(1 * 
MSEC_PER_SEC
, 0, 
OLSR_TIMER_PERIODIC
, &
z∑r£
, 
NULL
, 0);

70 
	}
}

73 
	$my_öô
()

76 
	`zebø_öô
();

78 
	}
}

81 
	$my_föi
()

84 
	`zebø_föi
();

86 
	}
}

	@lib/quagga/src/packet.c

20 
	~"defs.h
"

21 
	~"ﬁ§.h
"

23 
	~"comm⁄.h
"

24 
	~"∑ckë.h
"

27 *
	$z∑ckë_rouã
(
uöt16_t
 
cmd
, 
zrouã
 *
r
)

29 
cou¡
;

30 
uöt8_t
 
Àn
;

31 
uöt16_t
 
size
;

32 
uöt32_t
 
öd
, 
mëric
;

33 *
cmd›t
, *
t
;

35 
cmd›t
 = 
	`ﬁ§_mÆloc
(
ZEBRA_MAX_PACKET_SIZ
, "QUAGGA: NewÑouteÖacket");

37 
t
 = &
cmd›t
[2];

38 i‡(
zebø
.
vîsi⁄
) {

39 *
t
++ = 
ZEBRA_HEADER_MARKER
;

40 *
t
++ = 
zebø
.
vîsi⁄
;

41 
cmd
 = 
	`ht⁄s
(cmd);

42 
	`mem˝y
(
t
, &
cmd
,  cmd);

43 
t
 + 
cmd
;

45 *
t
++ = (Ë
cmd
;

46 *
t
++ = 
r
->
ty≥
;

47 *
t
++ = 
r
->
Êags
;

48 *
t
++ = 
r
->
mesßge
;

49 *
t
++ = 
r
->
¥efixÀn
;

50 
Àn
 = (
r
->
¥efixÀn
 + 7) / 8;

51 i‡(
ﬁ§_˙f
->
ù_vîsi⁄
 =
AF_INET
)

52 
	`mem˝y
(
t
, &
r
->
¥efix
.
v4
.
s_addr
, 
Àn
);

54 
	`mem˝y
(
t
, 
r
->
¥efix
.
v6
.
s6_addr
, 
Àn
);

55 
t
 =Å + 
Àn
;

57 i‡(
r
->
mesßge
 & 
ZAPI_MESSAGE_NEXTHOP
) {

58 *
t
++ = 
r
->
√xth›_num
 +Ñ->
ifödex_num
;

60 
cou¡
 = 0; cou¡ < 
r
->
√xth›_num
; count++) {

61 i‡(
ﬁ§_˙f
->
ù_vîsi⁄
 =
AF_INET
) {

62 *
t
++ = 
ZEBRA_NEXTHOP_IPV4
;

63 
	`mem˝y
(
t
, &
r
->
√xth›
[
cou¡
].
v4
.
s_addr
, Ñ->nexthop[count].v4.s_addr);

64 
t
 + 
r
->
√xth›
[
cou¡
].
v4
.
s_addr
;

66 *
t
++ = 
ZEBRA_NEXTHOP_IPV6
;

67 
	`mem˝y
(
t
, 
r
->
√xth›
[
cou¡
].
v6
.
s6_addr
, Ñ->nexthop[count].v6.s6_addr);

68 
t
 + 
r
->
√xth›
[
cou¡
].
v6
.
s6_addr
;

71 
cou¡
 = 0; cou¡ < 
r
->
ifödex_num
; count++) {

72 *
t
++ = 
ZEBRA_NEXTHOP_IFINDEX
;

73 
öd
 = 
	`ht⁄l
(
r
->
ifödex
[
cou¡
]);

74 
	`mem˝y
(
t
, &
öd
,  ind);

75 
t
 + 
öd
;

78 i‡((
r
->
mesßge
 & 
ZAPI_MESSAGE_DISTANCE
) > 0)

79 *
t
++ = 
r
->
di°™˚
;

80 i‡((
r
->
mesßge
 & 
ZAPI_MESSAGE_METRIC
) > 0) {

81 
mëric
 = 
	`ht⁄l
(
r
->metric);

82 
	`mem˝y
(
t
, &
mëric
,  metric);

83 
t
 + 
mëric
;

85 
size
 = 
	`ht⁄s
(
t
 - 
cmd›t
);

86 
	`mem˝y
(
cmd›t
, &
size
,  size);

88  
cmd›t
;

89 
	}
}

92 *
	$z∑ckë_ªdi°ribuã
 (
uöt16_t
 
cmd
, 
ty≥
)

94 *
d©a
, *
≤t
;

95 
uöt16_t
 
size
;

97 
d©a
 = 
	`ﬁ§_mÆloc
(
ZEBRA_MAX_PACKET_SIZ
 , "QUAGGA: NewÑedistributeÖacket");

99 
≤t
 = &
d©a
[2];

100 i‡(
zebø
.
vîsi⁄
) {

101 *
≤t
++ = 
ZEBRA_HEADER_MARKER
;

102 *
≤t
++ = 
zebø
.
vîsi⁄
;

103 
cmd
 = 
	`ht⁄s
(cmd);

104 
	`mem˝y
(
≤t
, &
cmd
,  cmd);

105 
≤t
 + 
cmd
;

107 *
≤t
++ = (Ë
cmd
;

108 *
≤t
++ = 
ty≥
;

109 
size
 = 
	`ht⁄s
(
≤t
 - 
d©a
);

110 
	`mem˝y
(
d©a
, &
size
,  size);

112  
d©a
;

113 
	}
}

	@lib/quagga/src/packet.h

21 
	#ZEBRA_MAX_PACKET_SIZ
 4096

	)

24 #i‚de‡
ZEBRA_HEADER_MARKER


25 
	#ZEBRA_HEADER_MARKER
 255

	)

29 
	#ZEBRA_IPV4_ROUTE_ADD
 7

	)

30 
	#ZEBRA_IPV4_ROUTE_DELETE
 8

	)

31 
	#ZEBRA_IPV6_ROUTE_ADD
 9

	)

32 
	#ZEBRA_IPV6_ROUTE_DELETE
 10

	)

33 
	#ZEBRA_REDISTRIBUTE_ADD
 11

	)

34 
	#ZEBRA_REDISTRIBUTE_DELETE
 12

	)

37 
	#ZEBRA_NEXTHOP_IFINDEX
 1

	)

38 
	#ZEBRA_NEXTHOP_IPV4
 3

	)

39 
	#ZEBRA_NEXTHOP_IPV6
 6

	)

42 
	#ZAPI_MESSAGE_NEXTHOP
 0x01

	)

43 
	#ZAPI_MESSAGE_IFINDEX
 0x02

	)

44 
	#ZAPI_MESSAGE_DISTANCE
 0x04

	)

45 
	#ZAPI_MESSAGE_METRIC
 0x08

	)

48 
	#ZEBRA_FLAG_SELECTED
 0x10

	)

50 
	szrouã
 {

51 
	mty≥
;

52 
	mÊags
;

53 
	mmesßge
;

54 
	m¥efixÀn
;

55 
ﬁ§_ù_addr
 
	m¥efix
;

56 
	m√xth›_num
;

57 
ﬁ§_ù_addr
 *
	m√xth›
;

58 
	mifödex_num
;

59 
uöt32_t
 *
	mifödex
;

60 
uöt32_t
 
	mmëric
;

61 
uöt8_t
 
	mdi°™˚
;

64 *
z∑ckë_rouã
(
uöt16_t
, 
zrouã
 *);

65 *
z∑ckë_ªdi°ribuã
(
uöt16_t
, );

	@lib/quagga/src/parse.c

20 
	~"defs.h
"

21 
	~"ﬁ§.h
"

23 
	~"comm⁄.h
"

24 
	~"∑ckë.h
"

25 
	~"˛õ¡.h
"

26 
	~"∑r£.h
"

28 
‰ì_zrouã
(
zrouã
 *);

29 
zrouã
 *
z∑r£_rouã
(*);

32 
	$‰ì_zrouã
(
zrouã
 *
r
)

35 if(
r
->
ifödex_num
)

36 
	`‰ì
(
r
->
ifödex
);

37 if(
r
->
√xth›_num
)

38 
	`‰ì
(
r
->
√xth›
);

40 
	}
}

42 
zrouã


43 *
	$z∑r£_rouã
(*
›t
)

45 
zrouã
 *
r
;

46 
c
;

47 
size_t
 
size
;

48 
uöt16_t
 
Àngth
;

49 *
≤t
;

51 
	`mem˝y
(&
Àngth
, 
›t
, Üength);

52 
Àngth
 = 
	`¡ohs
 (length);

54 
r
 = 
	`ﬁ§_mÆloc
( *r, "QUAGGA: New zebraÑoute");

55 
≤t
 = (
zebø
.
vîsi⁄
 ? &
›t
[6] : &opt[3]);

56 
r
->
ty≥
 = *
≤t
++;

57 
r
->
Êags
 = *
≤t
++;

58 
r
->
mesßge
 = *
≤t
++;

59 
r
->
¥efixÀn
 = *
≤t
++;

60 
size
 = (
r
->
¥efixÀn
 + 7) / 8;

61 
	`mem£t
(&
r
->
¥efix
, 0, Ñ->prefix);

62 i‡(
ﬁ§_˙f
->
ù_vîsi⁄
 =
AF_INET
)

63 
	`mem˝y
(&
r
->
¥efix
.
v4
.
s_addr
, 
≤t
, 
size
);

65 
	`mem˝y
(
r
->
¥efix
.
v6
.
s6_addr
, 
≤t
, 
size
);

66 
≤t
 +
size
;

68 
zebø
.
vîsi⁄
) {

71 i‡(
r
->
mesßge
 & 
ZAPI_MESSAGE_NEXTHOP
) {

72 
r
->
√xth›_num
 = *
≤t
++;

73 
r
->
√xth›
 = 
	`ﬁ§_mÆloc
(( *r->√xth›Ë*Ñ->
√xth›_num
, "QUAGGA: New zebraÑouteÇexthop");

74 
c
 = 0; c < 
r
->
√xth›_num
; c++) {

75 i‡(
ﬁ§_˙f
->
ù_vîsi⁄
 =
AF_INET
) {

76 
	`mem˝y
(&
r
->
√xth›
[
c
].
v4
.
s_addr
, 
≤t
, Ñ->nexthop[c].v4.s_addr);

77 
≤t
 + 
r
->
√xth›
[
c
].
v4
.
s_addr
;

79 
	`mem˝y
(
r
->
√xth›
[
c
].
v6
.
s6_addr
, 
≤t
, Ñ->nexthop[c].v6.s6_addr);

80 
≤t
 + 
r
->
√xth›
[
c
].
v6
.
s6_addr
;

85 i‡(
r
->
mesßge
 & 
ZAPI_MESSAGE_IFINDEX
) {

86 
r
->
ifödex_num
 = *
≤t
++;

87 
r
->
ifödex
 = 
	`ﬁ§_mÆloc
((
uöt32_t
Ë*Ñ->
ifödex_num
, "QUAGGA: New zebraÑoute ifindex");

88 
c
 = 0; c < 
r
->
ifödex_num
; c++) {

89 
	`mem˝y
(&
r
->
ifödex
[
c
], 
≤t
, Ñ->ifindex[c]);

90 
r
->
ifödex
[
c
] = 
	`¡ohl
 (r->ifindex[c]);

91 
≤t
 + 
r
->
ifödex
[
c
];

96 
	`OLSR_PRINTF
(1, "(QUAGGA) Unsupported zebraÖacket version!\n");

100 i‡(
r
->
mesßge
 & 
ZAPI_MESSAGE_DISTANCE
) {

101 
r
->
di°™˚
 = *
≤t
++;

106 i‡((
r
->
mesßge
 & 
ZAPI_MESSAGE_METRIC
Ë|| !
zebø
.
vîsi⁄
) {

107 
	`mem˝y
(&
r
->
mëric
, 
≤t
, Ñ->metric);

108 
r
->
mëric
 = 
	`¡ohl
(r->metric);

109 
≤t
 + 
r
->
mëric
;

112 i‡(
≤t
 - 
›t
 !
Àngth
) {

113 
	`ﬁ§_exô
("(QUAGGAËLígth d€†nŸ m©ch!", 
EXIT_FAILURE
);

116  
r
;

117 
	}
}

120 
z∑r£
(*
foo
 
__©åibuã__
 ((
unu£d
)))

122 *
	gd©a
, *
	gf
;

123 
uöt16_t
 
	gcomm™d
;

124 
uöt16_t
 
	gÀngth
;

125 
ssize_t
 
	gÀn
;

126 
zrouã
 *
	grouã
;

128 i‡(!(
	gzebø
.
	g°©us
 & 
	gSTATUS_CONNECTED
)) {

129 
z˛õ¡_ªc⁄√˘
();

132 
	gd©a
 = 
z˛õ¡_ªad
(&
Àn
);

133 i‡(
	gd©a
) {

134 
	gf
 = 
d©a
;

136 
mem˝y
(&
Àngth
, 
f
, Üength);

137 
	gÀngth
 = 
¡ohs
 (
Àngth
);

138 i‡(!
	gÀngth
)

139 
ﬁ§_exô
("(QUAGGAËZîÿmesßgêÀngth!", 
EXIT_FAILURE
);

140 i‡(
	gzebø
.
	gvîsi⁄
) {

141 i‡((
	gf
[2] !
ZEBRA_HEADER_MARKER
Ë|| (
f
[3] !
zebø
.
vîsi⁄
))

142 
ﬁ§_exô
("(QUAGGAËInvÆid zebø hódîÑe˚ived!", 
EXIT_FAILURE
);

143 
mem˝y
(&
comm™d
, &
f
[4],  command);

144 
	gcomm™d
 = 
¡ohs
 (
comm™d
);

146 
	gcomm™d
 = 
f
[2];

147 i‡(
	gﬁ§_˙f
->
	gù_vîsi⁄
 =
AF_INET
) {

148 
comm™d
) {

149 
ZEBRA_IPV4_ROUTE_ADD
:

150 
rouã
 = 
z∑r£_rouã
(
f
);

151 
ù_¥efix_li°_add
(&
ﬁ§_˙f
->
h«_íåõs
, &
rouã
->
¥efix
,Ñouã->
¥efixÀn
);

152 
‰ì_zrouã
(
rouã
);

153 
‰ì
(
rouã
);

155 
	gZEBRA_IPV4_ROUTE_DELETE
:

156 
rouã
 = 
z∑r£_rouã
(
f
);

157 
ù_¥efix_li°_ªmove
(&
ﬁ§_˙f
->
h«_íåõs
, &
rouã
->
¥efix
,Ñouã->
¥efixÀn
);

158 
‰ì_zrouã
(
rouã
);

159 
‰ì
(
rouã
);

165 
	gcomm™d
) {

166 
	gZEBRA_IPV6_ROUTE_ADD
:

167 
rouã
 = 
z∑r£_rouã
(
f
);

168 
ù_¥efix_li°_add
(&
ﬁ§_˙f
->
h«_íåõs
, &
rouã
->
¥efix
,Ñouã->
¥efixÀn
);

169 
‰ì_zrouã
(
rouã
);

170 
‰ì
(
rouã
);

172 
	gZEBRA_IPV6_ROUTE_DELETE
:

173 
rouã
 = 
z∑r£_rouã
(
f
);

174 
ù_¥efix_li°_ªmove
(&
ﬁ§_˙f
->
h«_íåõs
, &
rouã
->
¥efix
,Ñouã->
¥efixÀn
);

175 
‰ì_zrouã
(
rouã
);

176 
‰ì
(
rouã
);

183 
	gf
 +
Àngth
;

185 (
	gf
 - 
	gd©a
Ë< 
	gÀn
);

186 
‰ì
(
d©a
);

	@lib/quagga/src/parse.h

20 
z∑r£
(*);

	@lib/quagga/src/plugin.c

20 
	~"defs.h
"

21 
	~"ﬁ§.h
"

22 
	~"log.h
"

23 
	~"ﬁ§d_∂ugö.h
"

24 
	~"∂ugö_utû.h
"

25 
	~"√t_ﬁ§.h
"

27 
	~"comm⁄.h
"

28 
	~"quagga.h
"

29 
	~"∑ckë.h
"

30 
	~"∂ugö.h
"

32 *
my_ªÆloc
(*, 
size_t
, const *);

35 *
	$my_ªÆloc
(*
buf
, 
size_t
 
s
, c⁄° *
c
)

38 
buf
 = 
	`ªÆloc
(buf, 
s
);

39 i‡(!
buf
) {

40 
	`OLSR_PRINTF
(1, "(QUAGGAËOuào‡mem‹y: %s!\n", 
	`°ªº‹
(
î∫o
));

41 
	`ﬁ§_sy¶og
(
OLSR_LOG_ERR
, "(QUAGGA) Out of memory!\n");

42 
	`ﬁ§_exô
(
c
, 
EXIT_FAILURE
);

45  
buf
;

46 
	}
}

49 
z∂ugö_ªdi°ribuã
(c⁄° *
vÆue
, *
d©a
 
__©åibuã__
 ((
unu£d
)), 
£t_∂ugö_∑ømëî_add⁄
 
add⁄
 __attribute__ ((unused)))

51 c⁄° *
	gzrouã_ty≥s
[] = { "system", "kernel", "connect",

55 
	gi
;

57 
	gi
 = 0; i < 
ARRAYSIZE
(
zrouã_ty≥s
Ë&& i < 
	gZEBRA_ROUTE_MAX
; i++) {

58 i‡(!
°rcmp
(
vÆue
, 
zrouã_ty≥s
[
i
]))

59 
	gzebø
.
	gªdi°ribuã
[
i
] = 1;

66 
z∂ugö_exp‹åouãs
(c⁄° *
vÆue
, *
d©a
 
__©åibuã__
 ((
unu£d
)), 
£t_∂ugö_∑ømëî_add⁄
 
add⁄
 __attribute__ ((unused)))

69 i‡(!
°rcmp
(
vÆue
, "only")) {

70 
	gﬁ§_addrouã_fun˘i⁄
 = 
zebø_addrouã
;

71 
	gﬁ§_dñrouã_fun˘i⁄
 = 
zebø_dñrouã
;

72 
	gﬁ§_addrouã6_fun˘i⁄
 = 
zebø_addrouã
;

73 
	gﬁ§_dñrouã6_fun˘i⁄
 = 
zebø_dñrouã
;

74 
	gzebø
.
	g›ti⁄s
 |
OPTION_EXPORT
;

75 } i‡(!
°rcmp
(
vÆue
, "additional")) {

76 
	gﬁ§_addrouã_fun˘i⁄
 = 
zebø_addrouã
;

77 
	gﬁ§_dñrouã_fun˘i⁄
 = 
zebø_dñrouã
;

78 
	gﬁ§_addrouã6_fun˘i⁄
 = 
zebø_addrouã
;

79 
	gﬁ§_dñrouã6_fun˘i⁄
 = 
zebø_dñrouã
;

80 
	gzebø
.
	g›ti⁄s
 |
OPTION_EXPORT
;

87 
z∂ugö_di°™˚
(c⁄° *
vÆue
, *
d©a
 
__©åibuã__
 ((
unu£d
)), 
£t_∂ugö_∑ømëî_add⁄
 
add⁄
 __attribute__ ((unused)))

89 
	gdi°™˚
;

91 i‡(
£t_∂ugö_öt
(
vÆue
, &
di°™˚
, 
add⁄
))

93 i‡(
	gdi°™˚
 < 0 || distance > 255)

95 
	gzebø
.
	gdi°™˚
 = 
di°™˚
;

101 
z∂ugö_loˇÕªf
(c⁄° *
vÆue
, *
d©a
 
__©åibuã__
 ((
unu£d
)), 
£t_∂ugö_∑ømëî_add⁄
 
add⁄
 __attribute__ ((unused)))

103 
	gb
;

105 i‡(
£t_∂ugö_boﬁón
(
vÆue
, &
b
, 
add⁄
))

107 i‡(
	gb
)

108 
	gzebø
.
	gÊags
 &
ZEBRA_FLAG_SELECTED
;

114 
z∂ugö_sock∑th
(c⁄° *
vÆue
, *
d©a
 
__©åibuã__
 ((
unu£d
)), 
£t_∂ugö_∑ømëî_add⁄
 
add⁄
)

116 
size_t
 
	gÀn
;

117 
	gsock∑th
[
PATH_MAX
];

119 i‡(
£t_∂ugö_°rög
(
vÆue
, &
sock∑th
, 
add⁄
))

121 
	gÀn
 = 
°æí
(
sock∑th
) + 1;

122 
	gzebø
.
	gsock∑th
 = 
my_ªÆloc
(
zebø
.
sock∑th
, 
Àn
, "QUAGGA: Grow socketÖath");

123 
mem˝y
(
zebø
.
sock∑th
, sock∑th, 
Àn
);

129 
z∂ugö_p‹t
(c⁄° *
vÆue
, *
d©a
 
__©åibuã__
 ((
unu£d
)), 
£t_∂ugö_∑ømëî_add⁄
 
add⁄
 __attribute__ ((unused)))

131 
	gp‹t
;

133 i‡(
£t_∂ugö_p‹t
(
vÆue
, &
p‹t
, 
add⁄
))

135 
	gzebø
.
	gp‹t
 = 
p‹t
;

141 
z∂ugö_vîsi⁄
(c⁄° *
vÆue
, *
d©a
 
__©åibuã__
 ((
unu£d
)), 
£t_∂ugö_∑ømëî_add⁄
 
add⁄
 __attribute__ ((unused)))

143 
	gvîsi⁄
;

145 i‡(
£t_∂ugö_öt
(
vÆue
, &
vîsi⁄
, 
add⁄
))

147 i‡(
	gvîsi⁄
 < 0 || version > 1)

149 
	gzebø
.
	gvîsi⁄
 = 
vîsi⁄
;

	@lib/quagga/src/plugin.h

20 
z∂ugö_ªdi°ribuã
(c⁄° *, *, 
£t_∂ugö_∑ømëî_add⁄
);

21 
z∂ugö_exp‹åouãs
(c⁄° *, *, 
£t_∂ugö_∑ømëî_add⁄
);

22 
z∂ugö_di°™˚
(c⁄° *, *, 
£t_∂ugö_∑ømëî_add⁄
);

23 
z∂ugö_loˇÕªf
(c⁄° *, *, 
£t_∂ugö_∑ømëî_add⁄
);

24 
z∂ugö_sock∑th
(c⁄° *, *, 
£t_∂ugö_∑ømëî_add⁄
);

25 
z∂ugö_p‹t
(c⁄° *, *, 
£t_∂ugö_∑ømëî_add⁄
);

26 
z∂ugö_vîsi⁄
(c⁄° *, *, 
£t_∂ugö_∑ømëî_add⁄
);

	@lib/quagga/src/quagga.c

20 
	~"defs.h
"

21 
	~"ﬁ§.h
"

22 
	~"log.h
"

24 
	~"comm⁄.h
"

25 
	~"quagga.h
"

26 
	~"∑ckë.h
"

27 
	~"˛õ¡.h
"

29 
zebø
 
	gzebø
;

32 
	$zebø_öô
()

35 
	`mem£t
(&
zebø
, 0,  zebra);

36 
zebø
.
sock∑th
 = 
	`ﬁ§_mÆloc
( 
ZEBRA_SOCKPATH
 + 1, "QUAGGA: New socketÖath");

37 
	`°rs˝y
(
zebø
.
sock∑th
, 
ZEBRA_SOCKPATH
,  ZEBRA_SOCKPATH);

39 
	}
}

42 
	$zebø_föi
()

44 
π_íåy
 *
tmp
;

46 i‡(
zebø
.
›ti⁄s
 & 
OPTION_EXPORT
) {

47 
	`OLSR_FOR_ALL_RT_ENTRIES
(
tmp
) {

48 
	`zebø_dñrouã
(
tmp
);

50 
	`OLSR_FOR_ALL_RT_ENTRIES_END
(
tmp
);

52 
	`zebø_ªdi°ribuã
(
ZEBRA_REDISTRIBUTE_DELETE
);

54 
	}
}

57 
	$zebø_addrouã
(c⁄° 
π_íåy
 *
r
)

59 
zrouã
 
rouã
;

60 
ªtvÆ
;

62 
rouã
.
di°™˚
 = 0;

63 
rouã
.
ty≥
 = 
ZEBRA_ROUTE_OLSR
;

64 
rouã
.
Êags
 = 
zebø
.flags;

65 
rouã
.
mesßge
 = 
ZAPI_MESSAGE_NEXTHOP
 | 
ZAPI_MESSAGE_METRIC
;

66 
rouã
.
¥efixÀn
 = 
r
->
π_d°
.
¥efix_Àn
;

67 i‡(
ﬁ§_˙f
->
ù_vîsi⁄
 =
AF_INET
)

68 
rouã
.
¥efix
.
v4
.
s_addr
 = 
r
->
π_d°
.prefix.v4.s_addr;

70 
	`mem˝y
(
rouã
.
¥efix
.
v6
.
s6_addr
, 
r
->
π_d°
.prefix.v6.s6_addr, Ñoute.prefix.v6.s6_addr);

71 
rouã
.
ifödex_num
 = 0;

72 
rouã
.
ifödex
 = 
NULL
;

73 
rouã
.
√xth›_num
 = 0;

74 
rouã
.
√xth›
 = 
NULL
;

76 i‡((
ﬁ§_˙f
->
ù_vîsi⁄
 =
AF_INET
 && 
r
->
π_be°
->
πp_√xth›
.
g©eway
.
v4
.
s_addr
 =r->
π_d°
.
¥efix
.v4.s_addr &&

77 
rouã
.
¥efixÀn
 == 32) ||

78 (
ﬁ§_˙f
->
ù_vîsi⁄
 =
AF_INET6
 &&

79 !
	`memcmp
(
r
->
π_be°
->
πp_√xth›
.
g©eway
.
v6
.
s6_addr
,Ñ->
π_d°
.
¥efix
.v6.s6_addr, Ñ->rt_best->rtp_nexthop.gateway.v6.s6_addr) &&

80 
rouã
.
¥efixÀn
 == 128)) {

81 
rouã
.
ifödex_num
++;

82 
rouã
.
ifödex
 = 
	`ﬁ§_mÆloc
( *route.ifindex, "QUAGGA: New zebraÑoute ifindex");

83 *
rouã
.
ifödex
 = 
r
->
π_be°
->
πp_√xth›
.
iif_ödex
;

85 
rouã
.
√xth›_num
++;

86 
rouã
.
√xth›
 = 
	`ﬁ§_mÆloc
( *route.nexthop, "QUAGGA: New zebraÑouteÇexthop");

87 i‡(
ﬁ§_˙f
->
ù_vîsi⁄
 =
AF_INET
)

88 
rouã
.
√xth›
->
v4
.
s_addr
 = 
r
->
π_be°
->
πp_√xth›
.
g©eway
.v4.s_addr;

90 
	`mem˝y
(
rouã
.
√xth›
->
v6
.
s6_addr
, 
r
->
π_be°
->
πp_√xth›
.
g©eway
.v6.s6_addr, Ñoute.nexthop->v6.s6_addr);

93 
rouã
.
mëric
 = 
r
->
π_be°
->
πp_mëric
.
h›s
;

95 i‡(
zebø
.
di°™˚
) {

96 
rouã
.
mesßge
 |
ZAPI_MESSAGE_DISTANCE
;

97 
rouã
.
di°™˚
 = 
zebø
.distance;

100 
ªtvÆ
 = 
	`z˛õ¡_wrôe
(
	`z∑ckë_rouã
(
ﬁ§_˙f
->
ù_vîsi⁄
 =
AF_INET
 ? 
ZEBRA_IPV4_ROUTE_ADD
 : 
ZEBRA_IPV6_ROUTE_ADD
, &
rouã
));

102  
ªtvÆ
;

103 
	}
}

106 
	$zebø_dñrouã
(c⁄° 
π_íåy
 *
r
)

108 
zrouã
 
rouã
;

109 
ªtvÆ
;

111 
rouã
.
di°™˚
 = 0;

112 
rouã
.
ty≥
 = 
ZEBRA_ROUTE_OLSR
;

113 
rouã
.
Êags
 = 
zebø
.flags;

114 
rouã
.
mesßge
 = 
ZAPI_MESSAGE_NEXTHOP
 | 
ZAPI_MESSAGE_METRIC
;

115 
rouã
.
¥efixÀn
 = 
r
->
π_d°
.
¥efix_Àn
;

116 i‡(
ﬁ§_˙f
->
ù_vîsi⁄
 =
AF_INET
)

117 
rouã
.
¥efix
.
v4
.
s_addr
 = 
r
->
π_d°
.prefix.v4.s_addr;

119 
	`mem˝y
(
rouã
.
¥efix
.
v6
.
s6_addr
, 
r
->
π_d°
.prefix.v6.s6_addr, Ñoute.prefix.v6.s6_addr);

120 
rouã
.
ifödex_num
 = 0;

121 
rouã
.
ifödex
 = 
NULL
;

122 
rouã
.
√xth›_num
 = 0;

123 
rouã
.
√xth›
 = 
NULL
;

125 i‡((
ﬁ§_˙f
->
ù_vîsi⁄
 =
AF_INET
 && 
r
->
π_√xth›
.
g©eway
.
v4
.
s_addr
 =r->
π_d°
.
¥efix
.v4.s_addr &&

126 
rouã
.
¥efixÀn
 == 32) ||

127 (
ﬁ§_˙f
->
ù_vîsi⁄
 =
AF_INET6
 &&

128 !
	`memcmp
(
r
->
π_√xth›
.
g©eway
.
v6
.
s6_addr
,Ñ->
π_d°
.
¥efix
.v6.s6_addr, Ñ->rt_nexthop.gateway.v6.s6_addr) &&

129 
rouã
.
¥efixÀn
 == 128)) {

130 
rouã
.
ifödex_num
++;

131 
rouã
.
ifödex
 = 
	`ﬁ§_mÆloc
( *route.ifindex, "QUAGGA: New zebraÑoute ifindex");

132 *
rouã
.
ifödex
 = 
r
->
π_√xth›
.
iif_ödex
;

134 
rouã
.
√xth›_num
++;

135 
rouã
.
√xth›
 = 
	`ﬁ§_mÆloc
( *route.nexthop, "QUAGGA: New zebraÑouteÇexthop");

136 i‡(
ﬁ§_˙f
->
ù_vîsi⁄
 =
AF_INET
)

137 
rouã
.
√xth›
->
v4
.
s_addr
 = 
r
->
π_√xth›
.
g©eway
.v4.s_addr;

139 
	`mem˝y
(
rouã
.
√xth›
->
v6
.
s6_addr
, 
r
->
π_√xth›
.
g©eway
.v6.s6_addr, Ñoute.nexthop->v6.s6_addr);

142 
rouã
.
mëric
 = 0;

144 i‡(
zebø
.
di°™˚
) {

145 
rouã
.
mesßge
 |
ZAPI_MESSAGE_DISTANCE
;

146 
rouã
.
di°™˚
 = 
zebø
.distance;

149 
ªtvÆ
 = 
	`z˛õ¡_wrôe
(
	`z∑ckë_rouã
(
ﬁ§_˙f
->
ù_vîsi⁄
 =
AF_INET
 ? 
ZEBRA_IPV4_ROUTE_DELETE
 : 
ZEBRA_IPV6_ROUTE_DELETE
, &
rouã
));

151  
ªtvÆ
;

152 
	}
}

155 
	$zebø_ªdi°ribuã
(
uöt16_t
 
cmd
)

157 
ty≥
;

159 
ty≥
 = 0;Åy≥ < 
ZEBRA_ROUTE_MAX
;Åype++)

160 i‡(
zebø
.
ªdi°ribuã
[
ty≥
]) {

161 i‡(
	`z˛õ¡_wrôe
(
	`z∑ckë_ªdi°ribuã
(
cmd
, 
ty≥
)) < 0)

162 
	`ﬁ§_exô
("(QUAGGAËCouldÇŸ wrôêªdi°ribuãÖackë!", 
EXIT_FAILURE
);

165 
	}
}

	@lib/quagga/src/quagga.h

20 
	~"routög_èbÀ.h
"

23 #i‚de‡
ZEBRA_SOCKPATH


24 
	#ZEBRA_SOCKPATH
 "/v¨/run/quagga/z£rv.≠i"

	)

29 
zebø_öô
();

30 
zebø_föi
();

31 
zebø_addrouã
(c⁄° 
π_íåy
 *);

32 
zebø_dñrouã
(c⁄° 
π_íåy
 *);

33 
zebø_ªdi°ribuã
(
uöt16_t
 
cmd
);

	@lib/secure/src/md5.c

27 
	~"md5.h
"

29 
	~<°rög.h
>

33 
	#S11
 7

	)

34 
	#S12
 12

	)

35 
	#S13
 17

	)

36 
	#S14
 22

	)

37 
	#S21
 5

	)

38 
	#S22
 9

	)

39 
	#S23
 14

	)

40 
	#S24
 20

	)

41 
	#S31
 4

	)

42 
	#S32
 11

	)

43 
	#S33
 16

	)

44 
	#S34
 23

	)

45 
	#S41
 6

	)

46 
	#S42
 10

	)

47 
	#S43
 15

	)

48 
	#S44
 21

	)

50 c⁄° 
	gPADDING
[64] = {

58 
	#F
(
x
, 
y
, 
z
Ë(((xË& (y)Ë| ((~xË& (z)))

	)

59 
	#G
(
x
, 
y
, 
z
Ë(((xË& (z)Ë| ((yË& (~z)))

	)

60 
	#H
(
x
, 
y
, 
z
Ë((xË^ (yË^ (z))

	)

61 
	#I
(
x
, 
y
, 
z
Ë((yË^ ((xË| (~z)))

	)

65 
	#ROTATE_LEFT
(
x
, 
n
Ë(((xË<< (n)Ë| ((xË>> (32-“))))

	)

70 
	#FF
(
a
, 
b
, 
c
, 
d
, 
x
, 
s
, 
ac
) { \

71 (
a
Ë+
	`F
 ((
b
), (
c
), (
d
)Ë+ (
x
Ë+ (
UINT4
)(
ac
); \

72 (
a
Ë
	`ROTATE_LEFT
 (◊), (
s
)); \

73 (
a
Ë+(
b
); \

74 }

	)

75 
	#GG
(
a
, 
b
, 
c
, 
d
, 
x
, 
s
, 
ac
) { \

76 (
a
Ë+
	`G
 ((
b
), (
c
), (
d
)Ë+ (
x
Ë+ (
UINT4
)(
ac
); \

77 (
a
Ë
	`ROTATE_LEFT
 (◊), (
s
)); \

78 (
a
Ë+(
b
); \

79 }

	)

80 
	#HH
(
a
, 
b
, 
c
, 
d
, 
x
, 
s
, 
ac
) { \

81 (
a
Ë+
	`H
 ((
b
), (
c
), (
d
)Ë+ (
x
Ë+ (
UINT4
)(
ac
); \

82 (
a
Ë
	`ROTATE_LEFT
 (◊), (
s
)); \

83 (
a
Ë+(
b
); \

84 }

	)

85 
	#II
(
a
, 
b
, 
c
, 
d
, 
x
, 
s
, 
ac
) { \

86 (
a
Ë+
	`I
 ((
b
), (
c
), (
d
)Ë+ (
x
Ë+ (
UINT4
)(
ac
); \

87 (
a
Ë
	`ROTATE_LEFT
 (◊), (
s
)); \

88 (
a
Ë+(
b
); \

89 }

	)

96 
	$MD5_mem˝y
(
POINTER
 
ouçut
, POINTER 
öput
, 
Àn
)

98 
i
;

100 
i
 = 0; i < 
Àn
; i++)

101 
ouçut
[
i
] = 
öput
[i];

102 
	}
}

107 
	$MD5_mem£t
(
POINTER
 
ouçut
, 
vÆue
, 
Àn
)

109 
i
;

111 
i
 = 0; i < 
Àn
; i++)

112 ((*)
ouçut
)[
i
] = ()
vÆue
;

113 
	}
}

115 
	#MD5_mem˝y
(
d°
, 
§c
, 
Àn
Ë
	`mem˝y
((d°), (§c), (Àn))

	)

116 
	#MD5_mem£t
(
d°
, 
vÆ
, 
Àn
Ë
	`mem£t
((d°), (vÆ), (Àn))

	)

123 
	$Encode
(*
ouçut
, 
UINT4
 * 
öput
, 
Àn
)

125 
i
, 
j
;

127 
i
 = 0, 
j
 = 0; j < 
Àn
; i++, j += 4) {

128 
ouçut
[
j
] = ()(
öput
[
i
] & 0xff);

129 
ouçut
[
j
 + 1] = ()((
öput
[
i
] >> 8) & 0xff);

130 
ouçut
[
j
 + 2] = ()((
öput
[
i
] >> 16) & 0xff);

131 
ouçut
[
j
 + 3] = ()((
öput
[
i
] >> 24) & 0xff);

133 
	}
}

139 
	$Decode
(
UINT4
 * 
ouçut
, c⁄° *
öput
, 
Àn
)

141 
i
, 
j
;

143 
i
 = 0, 
j
 = 0; j < 
Àn
; i++, j += 4)

144 
ouçut
[
i
] =

145 ((
UINT4
Ë
öput
[
j
]) | (((UINT4) input[j + 1]) << 8) | (((UINT4) input[j + 2]) << 16) | (((UINT4) input[j + 3]) << 24);

146 
	}
}

151 
	$MD5Tønsf‹m
(
UINT4
 
°©e
[4], c⁄° 
block
[64])

153 
UINT4
 
a
 = 
°©e
[0], 
b
 = sèã[1], 
c
 = sèã[2], 
d
 = sèã[3], 
x
[16];

155 
	`Decode
(
x
, 
block
, 64);

158 
	`FF
(
a
, 
b
, 
c
, 
d
, 
x
[0], 
S11
, 0xd76aa478);

159 
	`FF
(
d
, 
a
, 
b
, 
c
, 
x
[1], 
S12
, 0xe8c7b756);

160 
	`FF
(
c
, 
d
, 
a
, 
b
, 
x
[2], 
S13
, 0x242070db);

161 
	`FF
(
b
, 
c
, 
d
, 
a
, 
x
[3], 
S14
, 0xc1bdceee);

162 
	`FF
(
a
, 
b
, 
c
, 
d
, 
x
[4], 
S11
, 0xf57c0faf);

163 
	`FF
(
d
, 
a
, 
b
, 
c
, 
x
[5], 
S12
, 0x4787c62a);

164 
	`FF
(
c
, 
d
, 
a
, 
b
, 
x
[6], 
S13
, 0xa8304613);

165 
	`FF
(
b
, 
c
, 
d
, 
a
, 
x
[7], 
S14
, 0xfd469501);

166 
	`FF
(
a
, 
b
, 
c
, 
d
, 
x
[8], 
S11
, 0x698098d8);

167 
	`FF
(
d
, 
a
, 
b
, 
c
, 
x
[9], 
S12
, 0x8b44f7af);

168 
	`FF
(
c
, 
d
, 
a
, 
b
, 
x
[10], 
S13
, 0xffff5bb1);

169 
	`FF
(
b
, 
c
, 
d
, 
a
, 
x
[11], 
S14
, 0x895cd7be);

170 
	`FF
(
a
, 
b
, 
c
, 
d
, 
x
[12], 
S11
, 0x6b901122);

171 
	`FF
(
d
, 
a
, 
b
, 
c
, 
x
[13], 
S12
, 0xfd987193);

172 
	`FF
(
c
, 
d
, 
a
, 
b
, 
x
[14], 
S13
, 0xa679438e);

173 
	`FF
(
b
, 
c
, 
d
, 
a
, 
x
[15], 
S14
, 0x49b40821);

176 
	`GG
(
a
, 
b
, 
c
, 
d
, 
x
[1], 
S21
, 0xf61e2562);

177 
	`GG
(
d
, 
a
, 
b
, 
c
, 
x
[6], 
S22
, 0xc040b340);

178 
	`GG
(
c
, 
d
, 
a
, 
b
, 
x
[11], 
S23
, 0x265e5a51);

179 
	`GG
(
b
, 
c
, 
d
, 
a
, 
x
[0], 
S24
, 0xe9b6c7aa);

180 
	`GG
(
a
, 
b
, 
c
, 
d
, 
x
[5], 
S21
, 0xd62f105d);

181 
	`GG
(
d
, 
a
, 
b
, 
c
, 
x
[10], 
S22
, 0x2441453);

182 
	`GG
(
c
, 
d
, 
a
, 
b
, 
x
[15], 
S23
, 0xd8a1e681);

183 
	`GG
(
b
, 
c
, 
d
, 
a
, 
x
[4], 
S24
, 0xe7d3fbc8);

184 
	`GG
(
a
, 
b
, 
c
, 
d
, 
x
[9], 
S21
, 0x21e1cde6);

185 
	`GG
(
d
, 
a
, 
b
, 
c
, 
x
[14], 
S22
, 0xc33707d6);

186 
	`GG
(
c
, 
d
, 
a
, 
b
, 
x
[3], 
S23
, 0xf4d50d87);

187 
	`GG
(
b
, 
c
, 
d
, 
a
, 
x
[8], 
S24
, 0x455a14ed);

188 
	`GG
(
a
, 
b
, 
c
, 
d
, 
x
[13], 
S21
, 0xa9e3e905);

189 
	`GG
(
d
, 
a
, 
b
, 
c
, 
x
[2], 
S22
, 0xfcefa3f8);

190 
	`GG
(
c
, 
d
, 
a
, 
b
, 
x
[7], 
S23
, 0x676f02d9);

191 
	`GG
(
b
, 
c
, 
d
, 
a
, 
x
[12], 
S24
, 0x8d2a4c8a);

194 
	`HH
(
a
, 
b
, 
c
, 
d
, 
x
[5], 
S31
, 0xfffa3942);

195 
	`HH
(
d
, 
a
, 
b
, 
c
, 
x
[8], 
S32
, 0x8771f681);

196 
	`HH
(
c
, 
d
, 
a
, 
b
, 
x
[11], 
S33
, 0x6d9d6122);

197 
	`HH
(
b
, 
c
, 
d
, 
a
, 
x
[14], 
S34
, 0xfde5380c);

198 
	`HH
(
a
, 
b
, 
c
, 
d
, 
x
[1], 
S31
, 0xa4beea44);

199 
	`HH
(
d
, 
a
, 
b
, 
c
, 
x
[4], 
S32
, 0x4bdecfa9);

200 
	`HH
(
c
, 
d
, 
a
, 
b
, 
x
[7], 
S33
, 0xf6bb4b60);

201 
	`HH
(
b
, 
c
, 
d
, 
a
, 
x
[10], 
S34
, 0xbebfbc70);

202 
	`HH
(
a
, 
b
, 
c
, 
d
, 
x
[13], 
S31
, 0x289b7ec6);

203 
	`HH
(
d
, 
a
, 
b
, 
c
, 
x
[0], 
S32
, 0xeaa127fa);

204 
	`HH
(
c
, 
d
, 
a
, 
b
, 
x
[3], 
S33
, 0xd4ef3085);

205 
	`HH
(
b
, 
c
, 
d
, 
a
, 
x
[6], 
S34
, 0x4881d05);

206 
	`HH
(
a
, 
b
, 
c
, 
d
, 
x
[9], 
S31
, 0xd9d4d039);

207 
	`HH
(
d
, 
a
, 
b
, 
c
, 
x
[12], 
S32
, 0xe6db99e5);

208 
	`HH
(
c
, 
d
, 
a
, 
b
, 
x
[15], 
S33
, 0x1fa27cf8);

209 
	`HH
(
b
, 
c
, 
d
, 
a
, 
x
[2], 
S34
, 0xc4ac5665);

212 
	`II
(
a
, 
b
, 
c
, 
d
, 
x
[0], 
S41
, 0xf4292244);

213 
	`II
(
d
, 
a
, 
b
, 
c
, 
x
[7], 
S42
, 0x432aff97);

214 
	`II
(
c
, 
d
, 
a
, 
b
, 
x
[14], 
S43
, 0xab9423a7);

215 
	`II
(
b
, 
c
, 
d
, 
a
, 
x
[5], 
S44
, 0xfc93a039);

216 
	`II
(
a
, 
b
, 
c
, 
d
, 
x
[12], 
S41
, 0x655b59c3);

217 
	`II
(
d
, 
a
, 
b
, 
c
, 
x
[3], 
S42
, 0x8f0ccc92);

218 
	`II
(
c
, 
d
, 
a
, 
b
, 
x
[10], 
S43
, 0xffeff47d);

219 
	`II
(
b
, 
c
, 
d
, 
a
, 
x
[1], 
S44
, 0x85845dd1);

220 
	`II
(
a
, 
b
, 
c
, 
d
, 
x
[8], 
S41
, 0x6fa87e4f);

221 
	`II
(
d
, 
a
, 
b
, 
c
, 
x
[15], 
S42
, 0xfe2ce6e0);

222 
	`II
(
c
, 
d
, 
a
, 
b
, 
x
[6], 
S43
, 0xa3014314);

223 
	`II
(
b
, 
c
, 
d
, 
a
, 
x
[13], 
S44
, 0x4e0811a1);

224 
	`II
(
a
, 
b
, 
c
, 
d
, 
x
[4], 
S41
, 0xf7537e82);

225 
	`II
(
d
, 
a
, 
b
, 
c
, 
x
[11], 
S42
, 0xbd3af235);

226 
	`II
(
c
, 
d
, 
a
, 
b
, 
x
[2], 
S43
, 0x2ad7d2bb);

227 
	`II
(
b
, 
c
, 
d
, 
a
, 
x
[9], 
S44
, 0xeb86d391);

229 
°©e
[0] +
a
;

230 
°©e
[1] +
b
;

231 
°©e
[2] +
c
;

232 
°©e
[3] +
d
;

236 
	`MD5_mem£t
((
POINTER
Ë
x
, 0, (x));

237 
	}
}

242 
	$MD5Inô
(
MD5_CTX
 * 
c⁄ãxt
)

244 
c⁄ãxt
->
cou¡
[0] = context->count[1] = 0;

248 
c⁄ãxt
->
°©e
[0] = 0x67452301;

249 
c⁄ãxt
->
°©e
[1] = 0xefcdab89;

250 
c⁄ãxt
->
°©e
[2] = 0x98badcfe;

251 
c⁄ãxt
->
°©e
[3] = 0x10325476;

252 
	}
}

259 
	$MD5Upd©e
(
MD5_CTX
 * 
c⁄ãxt
, c⁄° *
öput
, c⁄° 
öputLí
)

261 
i
, 
idx
, 
∑πLí
;

264 
idx
 = ()((
c⁄ãxt
->
cou¡
[0] >> 3) & 0x3F);

267 i‡((
c⁄ãxt
->
cou¡
[0] +((
UINT4
Ë
öputLí
 << 3)) < ((UINT4) inputLen << 3))

268 
c⁄ãxt
->
cou¡
[1]++;

269 
c⁄ãxt
->
cou¡
[1] +((
UINT4
Ë
öputLí
 >> 29);

271 
∑πLí
 = 64 - 
idx
;

275 i‡(
öputLí
 >
∑πLí
) {

276 
	`MD5_mem˝y
((
POINTER
Ë& 
c⁄ãxt
->
buf„r
[
idx
], 
öput
, 
∑πLí
);

277 
	`MD5Tønsf‹m
(
c⁄ãxt
->
°©e
, c⁄ãxt->
buf„r
);

279 
i
 = 
∑πLí
; i + 63 < 
öputLí
; i += 64)

280 
	`MD5Tønsf‹m
(
c⁄ãxt
->
°©e
, &
öput
[
i
]);

282 
idx
 = 0;

284 
i
 = 0;

287 
	`MD5_mem˝y
((
POINTER
Ë& 
c⁄ãxt
->
buf„r
[
idx
], &
öput
[
i
], 
öputLí
 - i);

288 
	}
}

294 
	$MD5FöÆ
(
dige°
[16], 
MD5_CTX
 * 
c⁄ãxt
)

296 
bôs
[8];

297 
idx
, 
∑dLí
;

300 
	`Encode
(
bôs
, 
c⁄ãxt
->
cou¡
, 8);

304 
idx
 = ()((
c⁄ãxt
->
cou¡
[0] >> 3) & 0x3f);

305 
∑dLí
 = (
idx
 < 56) ? (56 - idx) : (120 - idx);

306 
	`MD5Upd©e
(
c⁄ãxt
, 
PADDING
, 
∑dLí
);

309 
	`MD5Upd©e
(
c⁄ãxt
, 
bôs
, 8);

312 
	`Encode
(
dige°
, 
c⁄ãxt
->
°©e
, 16);

316 
	`MD5_mem£t
((
POINTER
Ë
c⁄ãxt
, 0, (*context));

317 
	}
}

	@lib/secure/src/md5.h

27 #i‚de‡
_MD5_H_


28 
	#_MD5_H_


	)

30 
	~<öây≥s.h
>

33 
uöt8_t
 *
	tPOINTER
;

36 
uöt16_t
 
	tUINT2
;

39 
uöt32_t
 
	tUINT4
;

43 
UINT4
 
	m°©e
[4];

44 
UINT4
 
	mcou¡
[2];

45 
	mbuf„r
[64];

46 } 
	tMD5_CTX
;

48 
MD5Inô
(
MD5_CTX
 *);

49 
MD5Upd©e
(
MD5_CTX
 *, const *, const );

50 
MD5FöÆ
([16], 
MD5_CTX
 *);

	@lib/secure/src/olsrd_plugin.c

38 
	~"ﬁ§d_∂ugö.h
"

39 
	~"ﬁ§d_£cuª.h
"

40 
	~<°dio.h
>

41 
	~<°rög.h
>

43 
	#PLUGIN_NAME
 "OLSRD sig«tuªÖlugö"

	)

44 
	#PLUGIN_VERSION
 "0.5"

	)

45 
	#PLUGIN_AUTHOR
 "Andªa†T⁄√£n"

	)

46 
	#MOD_DESC
 
PLUGIN_NAME
 " " 
PLUGIN_VERSION
 " by " 
PLUGIN_AUTHOR


	)

47 
	#PLUGIN_INTERFACE_VERSION
 5

	)

49 
	$my_öô
(Ë
	`__©åibuã__
 ((
c⁄°ru˘‹
));

50 
	$my_föi
(Ë
	`__©åibuã__
 ((
de°ru˘‹
));

58 
	$ﬁ§d_∂ugö_öãrÁ˚_vîsi⁄
()

60  
PLUGIN_INTERFACE_VERSION
;

61 
	}
}

67 
	$my_öô
()

71 
	`¥ötf
("%s\n", 
MOD_DESC
);

72 
	`¥ötf
("[ENC]AcceptedÖarameterÖairs: (\"Keyfile\" <FILENAME>)\n");

73 
	}
}

79 
	$my_föi
()

88 
	`£cuª_∂ugö_exô
();

89 
	}
}

92 
°‹e_°rög
(c⁄° *
vÆue
, *
d©a
, 
£t_∂ugö_∑ømëî_add⁄
 
add⁄
 
__©åibuã__
 ((
unu£d
)))

94 *
	g°r
 = 
d©a
;

95 
¢¥ötf
(
°r
, 
FILENAME_MAX
 + 1, "%s", 
vÆue
);

99 c⁄° 
ﬁ§d_∂ugö_∑ømëîs
 
	g∂ugö_∑ømëîs
[] = {

100 {.
«me
 = "keyfûe",.
	g£t_∂ugö_∑ømëî
 = &
°‹e_°rög
,.
	gd©a
 = 
keyfûe
},

104 
	$ﬁ§d_gë_∂ugö_∑ømëîs
(c⁄° 
ﬁ§d_∂ugö_∑ømëîs
 **
∑øms
, *
size
)

106 *
∑øms
 = 
∂ugö_∑ømëîs
;

107 *
size
 = (
∂ugö_∑ømëîs
) / (*plugin_parameters);

108 
	}
}

111 
	$ﬁ§d_∂ugö_öô
()

119 i‡(!
	`£cuª_∂ugö_öô
()) {

120 
	`Ârötf
(
°dîr
, "CouldÇot initializeÖlugin!\n");

124 i‡(!
	`∂ugö_ùc_öô
()) {

125 
	`Ârötf
(
°dîr
, "CouldÇot initializeÖlugin IPC!\n");

130 
	}
}

	@lib/secure/src/olsrd_secure.c

48 
	~"ﬁ§d_£cuª.h
"

50 
	~<°dio.h
>

51 
	~<°rög.h
>

52 
	~<°dlib.h
>

53 
	~<uni°d.h
>

54 
	~<î∫o.h
>

55 
	~<sig«l.h
>

57 
	~"defs.h
"

58 
	~"ùˇlc.h
"

59 
	~"ﬁ§.h
"

60 
	~"∑r£r.h
"

61 
	~"scheduÀr.h
"

62 
	~"√t_ﬁ§.h
"

64 #ifde‡
USE_OPENSSL


67 
	~<›ís¶/sha.h
>

69 
	#CHECKSUM
 
SHA1


	)

70 
	#SCHEME
 
SHA1_INCLUDING_KEY


	)

75 
	~"md5.h
"

78 
	$MD5_checksum
(c⁄° 
uöt8_t
 * 
d©a
, c⁄° 
uöt16_t
 
d©a_Àn
, uöt8_à* 
hashbuf
)

80 
MD5_CTX
 
c⁄ãxt
;

82 
	`MD5Inô
(&
c⁄ãxt
);

83 
	`MD5Upd©e
(&
c⁄ãxt
, 
d©a
, 
d©a_Àn
);

84 
	`MD5FöÆ
(
hashbuf
, &
c⁄ãxt
);

85 
	}
}

87 
	#CHECKSUM
 
MD5_checksum


	)

88 
	#SCHEME
 
MD5_INCLUDING_KEY


	)

92 #ifde‡
OS


93 #unde‡
OS


96 #ifde‡
WIN32


97 
	#˛o£
(
x
Ë
	`˛o£sockë
(x)

	)

98 #unde‡
EWOULDBLOCK


99 
	#EWOULDBLOCK
 
WSAEWOULDBLOCK


	)

100 
	#OS
 "Wödows"

	)

102 #ifde‡
löux


103 
	#OS
 "GNU/Löux"

	)

105 #i‡
deföed
 
__FªeBSD__
 || deföed 
__FªeBSD_kî√l__


106 
	#OS
 "FªeBSD"

	)

109 #i‚de‡
OS


110 
	#OS
 "Undeföed"

	)

113 
timevÆ
 
	gnow
;

116 
	s°amp
 {

117 
ﬁ§_ù_addr
 
	maddr
;

119 
	mdiff
;

120 
uöt32_t
 
	mchÆÀnge
;

121 
uöt8_t
 
	mvÆid©ed
;

122 
uöt32_t
 
	mvÆtime
;

123 
uöt32_t
 
	mc⁄·ime
;

124 
°amp
 *
	m¥ev
;

125 
°amp
 *
	m√xt
;

129 
	#TIMESTAMP_HOLD_TIME
 30

	)

132 
	#EXCHANGE_HOLD_TIME
 5

	)

134 
°amp
 
	gtime°amps
[
HASHSIZE
];

136 
	gkeyfûe
[
FILENAME_MAX
 + 1];

137 
	g´s_key
[16];

141 
ﬁ§_evít
();

143 
£nd_chÆÀnge
(
öãrÁ˚
 *
ﬁ§_if
, c⁄° 
ﬁ§_ù_addr
 *);

144 
£nd_¸es
(
öãrÁ˚
 *
ﬁ§_if
, 
ﬁ§_ù_addr
 *, ﬁ§_ù_add∏*, 
uöt32_t
, 
°amp
 *);

145 
£nd_ºes
(
öãrÁ˚
 *
ﬁ§_if
, 
ﬁ§_ù_addr
 *, ﬁ§_ù_add∏*, 
uöt32_t
);

146 
∑r£_chÆÀnge
(
öãrÁ˚
 *
ﬁ§_if
, *);

147 
∑r£_¸es
(
öãrÁ˚
 *
ﬁ§_if
, *);

148 
∑r£_ºes
(*);

149 
check_auth
(
öãrÁ˚
 *
ﬁ§_if
, *, *);

151 
ùc_£nd
(*, );

153 
add_sig«tuª
(
uöt8_t
 *, *);

154 
vÆid©e_∑ckë
(
öãrÁ˚
 *
ﬁ§_if
, const *, *);

155 *
£cuª_¥ïro˚ss‹
(*
∑ckë
, 
öãrÁ˚
 *
ﬁ§_if
, 
ﬁ§_ù_addr
 *
‰om_addr
, *
Àngth
);

156 
timeout_time°amps
(*);

157 
check_time°amp
(
öãrÁ˚
 *
ﬁ§_if
, c⁄° 
ﬁ§_ù_addr
 *, 
time_t
);

158 
°amp
 *
lookup_time°amp_íåy
(c⁄° 
ﬁ§_ù_addr
 *);

159 
ªad_key_‰om_fûe
(const *);

169 
	$£cuª_∂ugö_öô
()

171 
i
;

174 
i
 = 0; i < 
HASHSIZE
; i++) {

175 
time°amps
[
i
].
√xt
 = &timestamps[i];

176 
time°amps
[
i
].
¥ev
 = &timestamps[i];

178 
	`ﬁ§_¥ötf
(1, "Timestamp database initialized\n");

180 i‡(!
	`°æí
(
keyfûe
))

181 
	`°rs˝y
(
keyfûe
, 
KEYFILE
, (keyfile));

183 
i
 = 
	`ªad_key_‰om_fûe
(
keyfûe
);

185 i‡(
i
 < 0) {

186 
	`ﬁ§_¥ötf
(1, "[ENC]CouldÇŸÑód key from fûê%s!\nExôtög!\n\n", 
keyfûe
);

187 
	`exô
(1);

189 i‡(
i
 == 0) {

190 
	`ﬁ§_¥ötf
(1, "[ENC]Thîêwa†®¥obÀmÑódög key from fûê%s. I†thêkeyÜ⁄gÉnough?\nExôtög!\n\n", 
keyfûe
);

191 
	`exô
(1);

195 
	`add_±f
(&
add_sig«tuª
);

197 
	`ﬁ§_¥ïro˚ss‹_add_fun˘i⁄
(&
£cuª_¥ïro˚ss‹
);

200 
	`ﬁ§_°¨t_timî
(2 * 
MSEC_PER_SEC
, 0, 
OLSR_TIMER_PERIODIC
, &
timeout_time°amps
, 
NULL
, 0);

203 
	}
}

206 
	$∂ugö_ùc_öô
()

209 
	}
}

215 
	$£cuª_∂ugö_exô
()

217 
	`ﬁ§_¥ïro˚ss‹_ªmove_fun˘i⁄
(&
£cuª_¥ïro˚ss‹
);

218 
	}
}

226 
	$ﬁ§_evít
()

229 
	}
}

234 
ùc_£nd
(*
d©a
 
__©åibuã__
 ((
unu£d
)), 
size
 __attribute__ ((unused)))

241 
	$£cuª_¥ïro˚ss‹
(*
∑ckë
, 
öãrÁ˚
 *
ﬁ§_if
, 
ﬁ§_ù_addr
 *
‰om_addr
, *
Àngth
)

243 
ﬁ§
 *ﬁ§ = (ﬁ§ *)
∑ckë
;

244 
ùaddr_°r
 
buf
;

249 
	`check_auth
(
ﬁ§_if
, 
∑ckë
, 
Àngth
);

255 i‡(!
	`vÆid©e_∑ckë
(
ﬁ§_if
, 
∑ckë
, 
Àngth
)) {

256 
	`ﬁ§_¥ötf
(1, "[ENC]Reje˘ögÖackë from %s\n", 
	`ﬁ§_ù_to_°rög
(&
buf
, 
‰om_addr
));

257  
NULL
;

260 
	`ﬁ§_¥ötf
(1, "[ENC]Packë from %†OK sizê%d\n", 
	`ﬁ§_ù_to_°rög
(&
buf
, 
‰om_addr
), *
Àngth
);

263 
ﬁ§
->
ﬁ§_∑ckÀn
 = 
	`ht⁄s
(*
Àngth
);

264  
∑ckë
;

265 
	}
}

275 
check_auth
(
öãrÁ˚
 *
ﬁ§_if
, *
pck
, *
size
 
__©åibuã__
 ((
unu£d
)))

278 
ﬁ§_¥ötf
(3, "[ENC]CheckingÖacket for challengeÑesponse message...\n");

280 
	gpck
[4]) {

281 (
	gTYPE_CHALLENGE
):

282 
∑r£_chÆÀnge
(
ﬁ§_if
, &
pck
[4]);

285 (
	gTYPE_CRESPONSE
):

286 
∑r£_¸es
(
ﬁ§_if
, &
pck
[4]);

289 (
	gTYPE_RRESPONSE
):

290 
∑r£_ºes
(&
pck
[4]);

309 
	$add_sig«tuª
(
uöt8_t
 * 
pck
, *
size
)

311 
s_ﬁ§msg
 *
msg
;

312 #ifde‡
DEBUG


313 
i
;

314 
j
;

315 c⁄° 
uöt8_t
 *
sigmsg
;

318 
	`ﬁ§_¥ötf
(2, "[ENC]Addög sig«tuª f‹Öackë sizê%d\n", *
size
);

319 
	`fÊush
(
°dout
);

321 
msg
 = (
s_ﬁ§msg
 *)
	`ARM_NOWARN_ALIGN
(&
pck
[*
size
]);

323 ((
ﬁ§
 *)
pck
)->
ﬁ§_∑ckÀn
 = 
	`ht⁄s
(*
size
 + (
s_ﬁ§msg
));

326 
msg
->
ﬁ§_msgty≥
 = 
MESSAGE_TYPE
;

327 
msg
->
ﬁ§_vtime
 = 0;

328 
msg
->
ﬁ§_msgsize
 = 
	`ht⁄s
((
s_ﬁ§msg
));

329 
	`mem˝y
(&
msg
->
‹igö©‹
, &
ﬁ§_˙f
->
maö_addr
, ol§_˙f->
ùsize
);

330 
msg
->
âl
 = 1;

331 
msg
->
h›˙t
 = 0;

332 
msg
->
£qno
 = 
	`ht⁄s
(
	`gë_msg_£qno
());

335 
msg
->
sig
.
ty≥
 = 
ONE_CHECKSUM
;

336 
msg
->
sig
.
Æg‹ôhm
 = 
SCHEME
;

337 
	`mem£t
(&
msg
->
sig
.
ª£rved
, 0, 2);

340 
msg
->
sig
.
time°amp
 = 
	`ht⁄l
(
now
.
tv_£c
);

341 #i‚de‡
WIN32


342 
	`ﬁ§_¥ötf
(3, "[ENC]time°amp: %Œd\n", ()
now
.
tv_£c
);

345 *
size
 +(
s_ﬁ§msg
);

348 
uöt8_t
 
checksum_ˇche
[512 + 
KEYLENGTH
];

351 
	`mem˝y
(
checksum_ˇche
, 
pck
, *
size
 - 
SIGNATURE_SIZE
);

353 
	`mem˝y
(&
checksum_ˇche
[*
size
 - 
SIGNATURE_SIZE
], 
´s_key
, 
KEYLENGTH
);

356 
	`CHECKSUM
(
checksum_ˇche
, (*
size
 - 
SIGNATURE_SIZE
Ë+ 
KEYLENGTH
, &
pck
[*size - SIGNATURE_SIZE]);

359 #ifde‡
DEBUG


360 
	`ﬁ§_¥ötf
(1, "Signature message:\n");

362 
j
 = 0;

363 
sigmsg
 = (
uöt8_t
 *Ë
msg
;

365 
i
 = 0; i < (
s_ﬁ§msg
); i++) {

366 
	`ﬁ§_¥ötf
(1, " %3i", 
sigmsg
[
i
]);

367 
j
++;

368 i‡(
j
 == 4) {

369 
	`ﬁ§_¥ötf
(1, "\n");

370 
j
 = 0;

375 
	`ﬁ§_¥ötf
(3, "[ENC] Message signed\n");

378 
	}
}

381 
	$vÆid©e_∑ckë
(
öãrÁ˚
 *
ﬁ§_if
, c⁄° *
pck
, *
size
)

383 
∑ckësize
;

384 
uöt8_t
 
sha1_hash
[
SIGNATURE_SIZE
];

385 c⁄° 
s_ﬁ§msg
 *
sig
;

386 
time_t
 
ªc_time
;

388 #ifde‡
DEBUG


389 
i
;

390 
j
;

391 c⁄° 
uöt8_t
 *
sigmsg
;

395 
∑ckësize
 = *
size
 - (
s_ﬁ§msg
);

397 i‡(
∑ckësize
 < 4)

400 
sig
 = (c⁄° 
s_ﬁ§msg
 *)
	`CONST_ARM_NOWARN_ALIGN
(&
pck
[
∑ckësize
]);

404 #ifde‡
DEBUG


405 
	`ﬁ§_¥ötf
(1, "Input message:\n");

407 
j
 = 0;

408 
sigmsg
 = (c⁄° 
uöt8_t
 *)
sig
;

410 
i
 = 0; i < (
s_ﬁ§msg
); i++) {

411 
	`ﬁ§_¥ötf
(1, " %3i", 
sigmsg
[
i
]);

412 
j
++;

413 i‡(
j
 == 4) {

414 
	`ﬁ§_¥ötf
(1, "\n");

415 
j
 = 0;

421 i‡((
sig
->
ﬁ§_msgty≥
 !
MESSAGE_TYPE
Ë|| (sig->
ﬁ§_vtime
 != 0)

422 || (
sig
->
ﬁ§_msgsize
 !
	`¡ohs
((
s_ﬁ§msg
))Ë|| (sig->
âl
 !1Ë|| (sig->
h›˙t
 != 0)) {

423 
	`ﬁ§_¥ötf
(1, "[ENC]PacketÇot sane!\n");

428 
sig
->sig.
ty≥
) {

429 (
ONE_CHECKSUM
):

430 
sig
->sig.
Æg‹ôhm
) {

431 (
SCHEME
):

432 
⁄e_checksum_SHA
;

439 
	`ﬁ§_¥ötf
(1, "[ENC]Unsuµ‹ãd s˚me: %dÉnc: %d!\n", 
sig
->sig.
ty≥
, sig->sig.
Æg‹ôhm
);

444 
⁄e_checksum_SHA
:

447 
uöt8_t
 
checksum_ˇche
[512 + 
KEYLENGTH
];

450 
	`mem˝y
(
checksum_ˇche
, 
pck
, *
size
 - 
SIGNATURE_SIZE
);

452 
	`mem˝y
(&
checksum_ˇche
[*
size
 - 
SIGNATURE_SIZE
], 
´s_key
, 
KEYLENGTH
);

455 
	`CHECKSUM
(
checksum_ˇche
, *
size
 - 
SIGNATURE_SIZE
 + 
KEYLENGTH
, 
sha1_hash
);

458 #ifde‡
DEBUG


459 
	`ﬁ§_¥ötf
(1, "Recevied hash:\n");

461 
sigmsg
 = (c⁄° 
uöt8_t
 *)
sig
->sig.
sig«tuª
;

463 
i
 = 0; i < 
SIGNATURE_SIZE
; i++) {

464 
	`ﬁ§_¥ötf
(1, " %3i", 
sigmsg
[
i
]);

466 
	`ﬁ§_¥ötf
(1, "\n");

468 
	`ﬁ§_¥ötf
(1, "Calculated hash:\n");

470 
sigmsg
 = 
sha1_hash
;

472 
i
 = 0; i < 
SIGNATURE_SIZE
; i++) {

473 
	`ﬁ§_¥ötf
(1, " %3i", 
sigmsg
[
i
]);

475 
	`ﬁ§_¥ötf
(1, "\n");

478 i‡(
	`memcmp
(
sha1_hash
, 
sig
->sig.
sig«tuª
, 
SIGNATURE_SIZE
) != 0) {

479 
	`ﬁ§_¥ötf
(1, "[ENC]Signature missmatch\n");

484 
ªc_time
 = 
	`¡ohl
(
sig
->sig.
time°amp
);

486 i‡(!
	`check_time°amp
(
ﬁ§_if
, (c⁄° 
ﬁ§_ù_addr
 *)&
sig
->
‹igö©‹
, 
ªc_time
)) {

487 
ùaddr_°r
 
buf
;

488 
	`ﬁ§_¥ötf
(1, "[ENC]Timestamp missmatch inÖacket from %s!\n",

489 
	`ﬁ§_ù_to_°rög
(&
buf
, (c⁄° 
ﬁ§_ù_addr
 *)&
sig
->
‹igö©‹
));

492 #i‚de‡
WIN32


493 
	`ﬁ§_¥ötf
(1, "[ENC]Re˚ivedÅime°am∞%Œd diff: %Œd\n", ()
ªc_time
, ()
now
.
tv_£c
 - ()rec_time);

496 *
size
 = 
∑ckësize
;

498 
	}
}

501 
	$check_time°amp
(
öãrÁ˚
 *
ﬁ§_if
, c⁄° 
ﬁ§_ù_addr
 *
‹igö©‹
, 
time_t
 
t°amp
)

503 
°amp
 *
íåy
;

504 
diff
;

506 
íåy
 = 
	`lookup_time°amp_íåy
(
‹igö©‹
);

508 i‡(!
íåy
) {

511 
	`£nd_chÆÀnge
(
ﬁ§_if
, 
‹igö©‹
);

516 i‡(!
íåy
->
vÆid©ed
) {

517 
	`ﬁ§_¥ötf
(1, "[ENC]Message fromÇon-validated host!\n");

521 
diff
 = 
íåy
->dif‡- (
now
.
tv_£c
 - 
t°amp
);

523 
	`ﬁ§_¥ötf
(3, "[ENC]Time°am∞¶ack: %d\n", 
diff
);

525 i‡((
diff
 > 
UPPER_DIFF
Ë|| (dif‡< 
LOWER_DIFF
)) {

526 
	`ﬁ§_¥ötf
(1, "[ENC]Timestamp scew detected!!\n");

531 
íåy
->
diff
 = ((
now
.
tv_£c
 - 
t°amp
) +Éntry->diff) ? ((now.tv_sec -Åstamp) +Éntry->diff) / 2 : 0;

533 
	`ﬁ§_¥ötf
(3, "[ENC]Dif‡£àtÿ: %d\n", 
íåy
->
diff
);

537 
íåy
->
vÆtime
 = 
	`GET_TIMESTAMP
(
TIMESTAMP_HOLD_TIME
 * 1000);

540 
	}
}

551 
	$£nd_chÆÀnge
(
öãrÁ˚
 *
ﬁ§_if
, c⁄° 
ﬁ§_ù_addr
 *
√w_ho°
)

553 
chÆÀngemsg
 
cmsg
;

554 
°amp
 *
íåy
;

555 
uöt32_t
 
chÆÀnge
, 
hash
;

556 
ùaddr_°r
 
buf
;

558 
	`ﬁ§_¥ötf
(1, "[ENC]Building CHALLENGE message\n");

562 
chÆÀnge
 = 
	`ønd
() << 16;

563 
chÆÀnge
 |
	`ønd
();

566 
cmsg
.
ﬁ§_msgty≥
 = 
TYPE_CHALLENGE
;

567 
cmsg
.
ﬁ§_vtime
 = 0;

568 
cmsg
.
ﬁ§_msgsize
 = 
	`ht⁄s
((
chÆÀngemsg
));

569 
	`mem˝y
(&
cmsg
.
‹igö©‹
, &
ﬁ§_˙f
->
maö_addr
, ol§_˙f->
ùsize
);

570 
cmsg
.
âl
 = 1;

571 
cmsg
.
h›˙t
 = 0;

572 
cmsg
.
£qno
 = 
	`ht⁄s
(
	`gë_msg_£qno
());

575 
	`mem˝y
(&
cmsg
.
de°ö©i⁄
, 
√w_ho°
, 
ﬁ§_˙f
->
ùsize
);

576 
cmsg
.
chÆÀnge
 = 
	`ht⁄l
(challenge);

578 
	`ﬁ§_¥ötf
(3, "[ENC]Size: %lu\n", ()(
chÆÀngemsg
));

581 
uöt8_t
 
checksum_ˇche
[512 + 
KEYLENGTH
];

584 
	`mem˝y
(
checksum_ˇche
, &
cmsg
, (
chÆÀngemsg
Ë- 
SIGNATURE_SIZE
);

586 
	`mem˝y
(&
checksum_ˇche
[(
chÆÀngemsg
Ë- 
SIGNATURE_SIZE
], 
´s_key
, 
KEYLENGTH
);

589 
	`CHECKSUM
(
checksum_ˇche
, ((
chÆÀngemsg
Ë- 
SIGNATURE_SIZE
Ë+ 
KEYLENGTH
, 
cmsg
.
sig«tuª
);

591 
	`ﬁ§_¥ötf
(3, "[ENC]SídögÅime°am∞ªque°Åÿ%†chÆÀngê0x%x\n", 
	`ﬁ§_ù_to_°rög
(&
buf
, 
√w_ho°
), 
chÆÀnge
);

594 
	`√t_outbuf„r_push
(
ﬁ§_if
, &
cmsg
, (
chÆÀngemsg
));

597 
	`√t_ouçut
(
ﬁ§_if
);

600 
íåy
 = 
	`mÆloc
((
°amp
));

602 
íåy
->
diff
 = 0;

603 
íåy
->
vÆid©ed
 = 0;

604 
íåy
->
chÆÀnge
 = challenge;

606 
	`mem˝y
(&
íåy
->
addr
, 
√w_ho°
, 
ﬁ§_˙f
->
ùsize
);

609 
íåy
->
c⁄·ime
 = 
	`GET_TIMESTAMP
(
EXCHANGE_HOLD_TIME
 * 1000);

611 
hash
 = 
	`ﬁ§_ù_hashög
(
√w_ho°
);

614 
time°amps
[
hash
].
√xt
->
¥ev
 = 
íåy
;

615 
íåy
->
√xt
 = 
time°amps
[
hash
].next;

616 
time°amps
[
hash
].
√xt
 = 
íåy
;

617 
íåy
->
¥ev
 = &
time°amps
[
hash
];

621 
	}
}

624 
	$∑r£_¸es
(
öãrÁ˚
 *
ﬁ§_if
, *
ö_msg
)

626 
c_ª•msg
 *
msg
;

627 
uöt8_t
 
sha1_hash
[
SIGNATURE_SIZE
];

628 
°amp
 *
íåy
;

629 
ùaddr_°r
 
buf
;

631 
msg
 = (
c_ª•msg
 *)
	`ARM_NOWARN_ALIGN
(
ö_msg
);

633 
	`ﬁ§_¥ötf
(1, "[ENC]Challenge-response messageÑeceived\n");

634 
	`ﬁ§_¥ötf
(3, "[ENC]To: %s\n", 
	`ﬁ§_ù_to_°rög
(&
buf
, (
ﬁ§_ù_addr
 *)&
msg
->
de°ö©i⁄
));

636 i‡(
	`if_ifwôhaddr
((
ﬁ§_ù_addr
 *)&
msg
->
de°ö©i⁄
Ë=
NULL
) {

637 
	`ﬁ§_¥ötf
(3, "[ENC]Not for us...\n");

641 
	`ﬁ§_¥ötf
(3, "[ENC]ChÆÀnge: 0x%lx\n", ()
	`¡ohl
(
msg
->
chÆÀnge
));

646 
uöt8_t
 
checksum_ˇche
[512 + 
KEYLENGTH
];

649 
	`mem˝y
(
checksum_ˇche
, 
msg
, (
c_ª•msg
Ë- 
SIGNATURE_SIZE
);

651 
	`mem˝y
(&
checksum_ˇche
[(
c_ª•msg
Ë- 
SIGNATURE_SIZE
], 
´s_key
, 
KEYLENGTH
);

654 
	`CHECKSUM
(
checksum_ˇche
, ((
c_ª•msg
Ë- 
SIGNATURE_SIZE
Ë+ 
KEYLENGTH
, 
sha1_hash
);

657 i‡(
	`memcmp
(
sha1_hash
, &
msg
->
sig«tuª
, 
SIGNATURE_SIZE
) != 0) {

658 
	`ﬁ§_¥ötf
(1, "[ENC]Signature missmatch in challenge-response!\n");

662 
	`ﬁ§_¥ötf
(3, "[ENC]Signature verified\n");

665 i‡((
íåy
 = 
	`lookup_time°amp_íåy
((c⁄° 
ﬁ§_ù_addr
 *)&
msg
->
‹igö©‹
)Ë=
NULL
) {

666 
	`ﬁ§_¥ötf
(1, "[ENC]Received challenge-response fromÇon-registeredÇode %s!\n",

667 
	`ﬁ§_ù_to_°rög
(&
buf
, (
ﬁ§_ù_addr
 *)&
msg
->
‹igö©‹
));

672 
	`ﬁ§_¥ötf
(3, "[ENC]E¡ry-chÆÀngê0x%x\n", 
íåy
->
chÆÀnge
);

675 
uöt8_t
 
checksum_ˇche
[512 + 
KEYLENGTH
];

676 
uöt32_t
 
√t‹dî_chÆÀnge
;

681 
√t‹dî_chÆÀnge
 = 
	`ht⁄l
(
íåy
->
chÆÀnge
);

682 
	`mem˝y
(
checksum_ˇche
, &
√t‹dî_chÆÀnge
, (
uöt32_t
));

684 
	`mem˝y
(&
checksum_ˇche
[(
uöt32_t
)], &
msg
->
‹igö©‹
, 
ﬁ§_˙f
->
ùsize
);

687 
	`CHECKSUM
(
checksum_ˇche
, (
uöt32_t
Ë+ 
ﬁ§_˙f
->
ùsize
, 
sha1_hash
);

690 i‡(
	`memcmp
(
msg
->
ªs_sig
, 
sha1_hash
, 
SIGNATURE_SIZE
) != 0) {

691 
	`ﬁ§_¥ötf
(1, "[ENC]Eº‹ i¿chÆÀngêsig«tuª from %s!\n", 
	`ﬁ§_ù_to_°rög
(&
buf
, (
ﬁ§_ù_addr
 *)&
msg
->
‹igö©‹
));

696 
	`ﬁ§_¥ötf
(3, "[ENC]Challenge-response signature ok\n");

700 
íåy
->
chÆÀnge
 = 0;

701 
íåy
->
vÆid©ed
 = 1;

704 
íåy
->
diff
 = 
now
.
tv_£c
 - 
	`¡ohl
(
msg
->
time°amp
);

707 
íåy
->
vÆtime
 = 
	`GET_TIMESTAMP
(
TIMESTAMP_HOLD_TIME
 * 1000);

709 
	`ﬁ§_¥ötf
(1, "[ENC]%†ªgi°îed wôh dif‡%d!\n", 
	`ﬁ§_ù_to_°rög
(&
buf
, (
ﬁ§_ù_addr
 *)&
msg
->
‹igö©‹
),

710 
íåy
->
diff
);

713 
	`£nd_ºes
(
ﬁ§_if
, (
ﬁ§_ù_addr
 *)&
msg
->
‹igö©‹
,

714 (
ﬁ§_ù_addr
 *)&
msg
->
de°ö©i⁄
, msg->
chÆÀnge
);

719 
	}
}

722 
	$∑r£_ºes
(*
ö_msg
)

724 
r_ª•msg
 *
msg
;

725 
uöt8_t
 
sha1_hash
[
SIGNATURE_SIZE
];

726 
°amp
 *
íåy
;

727 
ùaddr_°r
 
buf
;

729 
msg
 = (
r_ª•msg
 *)
	`ARM_NOWARN_ALIGN
(
ö_msg
);

731 
	`ﬁ§_¥ötf
(1, "[ENC]Response-response messageÑeceived\n");

732 
	`ﬁ§_¥ötf
(3, "[ENC]To: %s\n", 
	`ﬁ§_ù_to_°rög
(&
buf
, (
ﬁ§_ù_addr
 *)&
msg
->
de°ö©i⁄
));

734 i‡(
	`if_ifwôhaddr
((
ﬁ§_ù_addr
 *)&
msg
->
de°ö©i⁄
Ë=
NULL
) {

735 
	`ﬁ§_¥ötf
(1, "[ENC]Not for us...\n");

742 
uöt8_t
 
checksum_ˇche
[512 + 
KEYLENGTH
];

745 
	`mem˝y
(
checksum_ˇche
, 
msg
, (
r_ª•msg
Ë- 
SIGNATURE_SIZE
);

747 
	`mem˝y
(&
checksum_ˇche
[(
r_ª•msg
Ë- 
SIGNATURE_SIZE
], 
´s_key
, 
KEYLENGTH
);

750 
	`CHECKSUM
(
checksum_ˇche
, ((
r_ª•msg
Ë- 
SIGNATURE_SIZE
Ë+ 
KEYLENGTH
, 
sha1_hash
);

753 i‡(
	`memcmp
(
sha1_hash
, &
msg
->
sig«tuª
, 
SIGNATURE_SIZE
) != 0) {

754 
	`ﬁ§_¥ötf
(1, "[ENC]Signature missmatch inÑesponse-response!\n");

758 
	`ﬁ§_¥ötf
(3, "[ENC]Signature verified\n");

761 i‡((
íåy
 = 
	`lookup_time°amp_íåy
((c⁄° 
ﬁ§_ù_addr
 *)&
msg
->
‹igö©‹
)Ë=
NULL
) {

762 
	`ﬁ§_¥ötf
(1, "[ENC]ReceivedÑesponse-response fromÇon-registeredÇode %s!\n",

763 
	`ﬁ§_ù_to_°rög
(&
buf
, (
ﬁ§_ù_addr
 *)&
msg
->
‹igö©‹
));

768 
	`ﬁ§_¥ötf
(3, "[ENC]E¡ry-chÆÀngê0x%x\n", 
íåy
->
chÆÀnge
);

771 
uöt8_t
 
checksum_ˇche
[512 + 
KEYLENGTH
];

772 
uöt32_t
 
√t‹dî_chÆÀnge
;

776 
√t‹dî_chÆÀnge
 = 
	`ht⁄l
(
íåy
->
chÆÀnge
);

777 
	`mem˝y
(
checksum_ˇche
, &
√t‹dî_chÆÀnge
, (
uöt32_t
));

780 
	`mem˝y
(&
checksum_ˇche
[(
uöt32_t
)], &
msg
->
‹igö©‹
, 
ﬁ§_˙f
->
ùsize
);

783 
	`CHECKSUM
(
checksum_ˇche
, (
uöt32_t
Ë+ 
ﬁ§_˙f
->
ùsize
, 
sha1_hash
);

786 i‡(
	`memcmp
(
msg
->
ªs_sig
, 
sha1_hash
, 
SIGNATURE_SIZE
) != 0) {

787 
	`ﬁ§_¥ötf
(1, "[ENC]Eº‹ i¿ª•⁄£ sig«tuª from %s!\n", 
	`ﬁ§_ù_to_°rög
(&
buf
, (
ﬁ§_ù_addr
 *)&
msg
->
‹igö©‹
));

792 
	`ﬁ§_¥ötf
(3, "[ENC]Challenge-response signature ok\n");

796 
íåy
->
chÆÀnge
 = 0;

797 
íåy
->
vÆid©ed
 = 1;

800 
íåy
->
diff
 = 
now
.
tv_£c
 - 
	`¡ohl
(
msg
->
time°amp
);

803 
íåy
->
vÆtime
 = 
	`GET_TIMESTAMP
(
TIMESTAMP_HOLD_TIME
 * 1000);

805 
	`ﬁ§_¥ötf
(1, "[ENC]%†ªgi°îed wôh dif‡%d!\n", 
	`ﬁ§_ù_to_°rög
(&
buf
, (
ﬁ§_ù_addr
 *)&
msg
->
‹igö©‹
),

806 
íåy
->
diff
);

809 
	}
}

812 
	$∑r£_chÆÀnge
(
öãrÁ˚
 *
ﬁ§_if
, *
ö_msg
)

814 
chÆÀngemsg
 *
msg
;

815 
uöt8_t
 
sha1_hash
[
SIGNATURE_SIZE
];

816 
°amp
 *
íåy
;

817 
uöt32_t
 
hash
;

818 
ùaddr_°r
 
buf
;

820 
msg
 = (
chÆÀngemsg
 *)
	`ARM_NOWARN_ALIGN
(
ö_msg
);

822 
	`ﬁ§_¥ötf
(1, "[ENC]Challenge messageÑeceived\n");

823 
	`ﬁ§_¥ötf
(3, "[ENC]To: %s\n", 
	`ﬁ§_ù_to_°rög
(&
buf
, (
ﬁ§_ù_addr
 *)&
msg
->
de°ö©i⁄
));

825 i‡(
	`if_ifwôhaddr
((
ﬁ§_ù_addr
 *)&
msg
->
de°ö©i⁄
Ë=
NULL
) {

826 
	`ﬁ§_¥ötf
(1, "[ENC]Not for us...\n");

831 i‡((
íåy
 = 
	`lookup_time°amp_íåy
((c⁄° 
ﬁ§_ù_addr
 *)&
msg
->
‹igö©‹
)Ë=
NULL
) {

832 
íåy
 = 
	`mÆloc
((
°amp
));

833 
	`mem˝y
(&
íåy
->
addr
, &
msg
->
‹igö©‹
, 
ﬁ§_˙f
->
ùsize
);

835 
hash
 = 
	`ﬁ§_ù_hashög
((
ﬁ§_ù_addr
 *)&
msg
->
‹igö©‹
);

838 
time°amps
[
hash
].
√xt
->
¥ev
 = 
íåy
;

839 
íåy
->
√xt
 = 
time°amps
[
hash
].next;

840 
time°amps
[
hash
].
√xt
 = 
íåy
;

841 
íåy
->
¥ev
 = &
time°amps
[
hash
];

844 i‡(!
	`TIMED_OUT
(
íåy
->
c⁄·ime
)) {

846 
	`ﬁ§_¥ötf
(1, "[ENC]Challenge fromÑegisteredÇode...dropping!\n");

849 
	`ﬁ§_¥ötf
(1, "[ENC]Challenge fromÑegisteredÇode...accepted!\n");

853 
	`ﬁ§_¥ötf
(3, "[ENC]ChÆÀnge: 0x%lx\n", ()
	`¡ohl
(
msg
->
chÆÀnge
));

858 
uöt8_t
 
checksum_ˇche
[512 + 
KEYLENGTH
];

861 
	`mem˝y
(
checksum_ˇche
, 
msg
, (
chÆÀngemsg
Ë- 
SIGNATURE_SIZE
);

863 
	`mem˝y
(&
checksum_ˇche
[(
chÆÀngemsg
Ë- 
SIGNATURE_SIZE
], 
´s_key
, 
KEYLENGTH
);

866 
	`CHECKSUM
(
checksum_ˇche
, ((
chÆÀngemsg
Ë- 
SIGNATURE_SIZE
Ë+ 
KEYLENGTH
, 
sha1_hash
);

868 i‡(
	`memcmp
(
sha1_hash
, &
msg
->
sig«tuª
, 
SIGNATURE_SIZE
) != 0) {

869 
	`ﬁ§_¥ötf
(1, "[ENC]Signature missmatch in challenge!\n");

873 
	`ﬁ§_¥ötf
(3, "[ENC]Signature verified\n");

875 
íåy
->
diff
 = 0;

876 
íåy
->
vÆid©ed
 = 0;

879 
íåy
->
c⁄·ime
 = 
	`GET_TIMESTAMP
(
EXCHANGE_HOLD_TIME
 * 1000);

883 
	`£nd_¸es
(
ﬁ§_if
, (
ﬁ§_ù_addr
 *)&
msg
->
‹igö©‹
,

884 (
ﬁ§_ù_addr
 *)&
msg
->
de°ö©i⁄
, msg->
chÆÀnge
, 
íåy
);

889 
	}
}

897 
	$£nd_¸es
(
öãrÁ˚
 *
ﬁ§_if
, 
ﬁ§_ù_addr
 *
to
, ﬁ§_ù_add∏*
‰om
, 
uöt32_t
 
chÆ_ö
, 
°amp
 *
íåy
)

899 
c_ª•msg
 
¸msg
;

900 
uöt32_t
 
chÆÀnge
;

901 
ùaddr_°r
 
buf
;

903 
	`ﬁ§_¥ötf
(1, "[ENC]Building CRESPONSE message\n");

905 
chÆÀnge
 = 
	`ønd
() << 16;

906 
chÆÀnge
 |
	`ønd
();

908 
íåy
->
chÆÀnge
 = challenge;

910 
	`ﬁ§_¥ötf
(3, "[ENC]ChÆÀnge-ª•⁄£: 0x%x\n", 
chÆÀnge
);

913 
¸msg
.
ﬁ§_msgty≥
 = 
TYPE_CRESPONSE
;

914 
¸msg
.
ﬁ§_vtime
 = 0;

915 
¸msg
.
ﬁ§_msgsize
 = 
	`ht⁄s
((
c_ª•msg
));

916 
	`mem˝y
(&
¸msg
.
‹igö©‹
, &
ﬁ§_˙f
->
maö_addr
, ol§_˙f->
ùsize
);

917 
¸msg
.
âl
 = 1;

918 
¸msg
.
h›˙t
 = 0;

919 
¸msg
.
£qno
 = 
	`ht⁄s
(
	`gë_msg_£qno
());

923 
¸msg
.
time°amp
 = 
	`ht⁄l
(
now
.
tv_£c
);

924 #i‚de‡
WIN32


926 
	`ﬁ§_¥ötf
(3, "[ENC]Time°am∞%Œd\n", ()
now
.
tv_£c
);

930 
	`mem˝y
(&
¸msg
.
de°ö©i⁄
, 
to
, 
ﬁ§_˙f
->
ùsize
);

931 
¸msg
.
chÆÀnge
 = 
	`ht⁄l
(challenge);

936 
uöt8_t
 
checksum_ˇche
[512 + 
KEYLENGTH
];

939 
	`mem˝y
(
checksum_ˇche
, &
chÆ_ö
, 4);

941 
	`mem˝y
(&
checksum_ˇche
[(
uöt32_t
)], 
‰om
, 
ﬁ§_˙f
->
ùsize
);

944 
	`CHECKSUM
(
checksum_ˇche
, (
uöt32_t
Ë+ 
ﬁ§_˙f
->
ùsize
, 
¸msg
.
ªs_sig
);

950 
uöt8_t
 
checksum_ˇche
[512 + 
KEYLENGTH
];

953 
	`mem˝y
(
checksum_ˇche
, &
¸msg
, (
c_ª•msg
Ë- 
SIGNATURE_SIZE
);

955 
	`mem˝y
(&
checksum_ˇche
[(
c_ª•msg
Ë- 
SIGNATURE_SIZE
], 
´s_key
, 
KEYLENGTH
);

958 
	`CHECKSUM
(
checksum_ˇche
, ((
c_ª•msg
Ë- 
SIGNATURE_SIZE
Ë+ 
KEYLENGTH
, 
¸msg
.
sig«tuª
);

961 
	`ﬁ§_¥ötf
(3, "[ENC]Sídög chÆÀngêª•⁄£Åÿ%†chÆÀngê0x%x\n", 
	`ﬁ§_ù_to_°rög
(&
buf
, 
to
), 
chÆÀnge
);

964 
	`√t_outbuf„r_push
(
ﬁ§_if
, &
¸msg
, (
c_ª•msg
));

966 
	`√t_ouçut
(
ﬁ§_if
);

969 
	}
}

977 
	$£nd_ºes
(
öãrÁ˚
 *
ﬁ§_if
, 
ﬁ§_ù_addr
 *
to
, ﬁ§_ù_add∏*
‰om
, 
uöt32_t
 
chÆ_ö
)

979 
r_ª•msg
 
ºmsg
;

980 
ùaddr_°r
 
buf
;

982 
	`ﬁ§_¥ötf
(1, "[ENC]Building RRESPONSE message\n");

985 
ºmsg
.
ﬁ§_msgty≥
 = 
TYPE_RRESPONSE
;

986 
ºmsg
.
ﬁ§_vtime
 = 0;

987 
ºmsg
.
ﬁ§_msgsize
 = 
	`ht⁄s
((
r_ª•msg
));

988 
	`mem˝y
(&
ºmsg
.
‹igö©‹
, &
ﬁ§_˙f
->
maö_addr
, ol§_˙f->
ùsize
);

989 
ºmsg
.
âl
 = 1;

990 
ºmsg
.
h›˙t
 = 0;

991 
ºmsg
.
£qno
 = 
	`ht⁄s
(
	`gë_msg_£qno
());

995 
ºmsg
.
time°amp
 = 
	`ht⁄l
(
now
.
tv_£c
);

997 #i‚de‡
WIN32


999 
	`ﬁ§_¥ötf
(3, "[ENC]Time°am∞%Œd\n", ()
now
.
tv_£c
);

1002 
	`mem˝y
(&
ºmsg
.
de°ö©i⁄
, 
to
, 
ﬁ§_˙f
->
ùsize
);

1007 
uöt8_t
 
checksum_ˇche
[512 + 
KEYLENGTH
];

1010 
	`mem˝y
(
checksum_ˇche
, &
chÆ_ö
, 4);

1012 
	`mem˝y
(&
checksum_ˇche
[(
uöt32_t
)], 
‰om
, 
ﬁ§_˙f
->
ùsize
);

1015 
	`CHECKSUM
(
checksum_ˇche
, (
uöt32_t
Ë+ 
ﬁ§_˙f
->
ùsize
, 
ºmsg
.
ªs_sig
);

1021 
uöt8_t
 
checksum_ˇche
[512 + 
KEYLENGTH
];

1024 
	`mem˝y
(
checksum_ˇche
, &
ºmsg
, (
r_ª•msg
Ë- 
SIGNATURE_SIZE
);

1026 
	`mem˝y
(&
checksum_ˇche
[(
r_ª•msg
Ë- 
SIGNATURE_SIZE
], 
´s_key
, 
KEYLENGTH
);

1029 
	`CHECKSUM
(
checksum_ˇche
, ((
r_ª•msg
Ë- 
SIGNATURE_SIZE
Ë+ 
KEYLENGTH
, 
ºmsg
.
sig«tuª
);

1032 
	`ﬁ§_¥ötf
(3, "[ENC]SídögÑe•⁄£Ñe•⁄£Åÿ%s\n", 
	`ﬁ§_ù_to_°rög
(&
buf
, 
to
));

1035 
	`√t_outbuf„r_push
(
ﬁ§_if
, &
ºmsg
, (
r_ª•msg
));

1038 
	`√t_ouçut
(
ﬁ§_if
);

1041 
	}
}

1043 
°amp
 *

1044 
	$lookup_time°amp_íåy
(c⁄° 
ﬁ§_ù_addr
 *
adr
)

1046 
uöt32_t
 
hash
;

1047 
°amp
 *
íåy
;

1048 
ùaddr_°r
 
buf
;

1050 
hash
 = 
	`ﬁ§_ù_hashög
(
adr
);

1052 
íåy
 = 
time°amps
[
hash
].
√xt
;Éntry != &timestamps[hash];Éntry =Éntry->next) {

1053 i‡(
	`memcmp
(&
íåy
->
addr
, 
adr
, 
ﬁ§_˙f
->
ùsize
) == 0) {

1054 
	`ﬁ§_¥ötf
(3, "[ENC]M©ch f‹ %s\n", 
	`ﬁ§_ù_to_°rög
(&
buf
, 
adr
));

1055  
íåy
;

1059 
	`ﬁ§_¥ötf
(1, "[ENC]Nÿm©ch f‹ %s\n", 
	`ﬁ§_ù_to_°rög
(&
buf
, 
adr
));

1061  
NULL
;

1062 
	}
}

1070 
timeout_time°amps
(*
foo
 
__©åibuã__
 ((
unu£d
)))

1072 
°amp
 *
	gtmp_li°
;

1073 
°amp
 *
	gíåy_to_dñëe
;

1074 
	gidx
;

1077 
gëtimeofday
(&
now
, 
NULL
);

1079 
	gidx
 = 0; idx < 
	gHASHSIZE
; idx++) {

1080 
	gtmp_li°
 = 
time°amps
[
idx
].
√xt
;

1082 
	gtmp_li°
 !&
time°amps
[
idx
]) {

1084 i‡((
TIMED_OUT
(
tmp_li°
->
vÆtime
)Ë&& (TIMED_OUT—mp_li°->
c⁄·ime
))) {

1085 
ùaddr_°r
 
buf
;

1086 
	gíåy_to_dñëe
 = 
tmp_li°
;

1087 
	gtmp_li°
 = 
tmp_li°
->
√xt
;

1089 
ﬁ§_¥ötf
(1, "[ENC]time°am∞öfÿf‹ %†timed out.. dñëög it\n", 
ﬁ§_ù_to_°rög
(&
buf
, &
íåy_to_dñëe
->
addr
));

1092 
	gíåy_to_dñëe
->
	g√xt
->
	g¥ev
 = 
íåy_to_dñëe
->
¥ev
;

1093 
	gíåy_to_dñëe
->
	g¥ev
->
	g√xt
 = 
íåy_to_dñëe
->
√xt
;

1095 
‰ì
(
íåy_to_dñëe
);

1097 
	gtmp_li°
 = 
tmp_li°
->
√xt
;

1105 
	$ªad_key_‰om_fûe
(c⁄° *
fûe
)

1107 
FILE
 *
kf
;

1108 
size_t
 
keyÀn
;

1110 
keyÀn
 = 16;

1111 
kf
 = 
	`f›í
(
fûe
, "r");

1113 
	`ﬁ§_¥ötf
(1, "[ENC]Ródög key from fûê\"%s\"\n", 
fûe
);

1115 i‡(
kf
 =
NULL
) {

1116 
	`ﬁ§_¥ötf
(1, "[ENC]CouldÇŸ o≥¿keyfûê%s!\nEº‹: %s\n", 
fûe
, 
	`°ªº‹
(
î∫o
));

1120 i‡(
	`‰ód
(
´s_key
, 1, 
keyÀn
, 
kf
) != keylen) {

1121 
	`ﬁ§_¥ötf
(1, "[ENC]CouldÇŸÑód key from keyfûê%s!\nEº‹: %s\n", 
fûe
, 
	`°ªº‹
(
î∫o
));

1122 
	`f˛o£
(
kf
);

1126 
	`f˛o£
(
kf
);

1128 
	}
}

	@lib/secure/src/olsrd_secure.h

42 #i‚de‡
_OLSRD_PLUGIN_TEST


43 
	#_OLSRD_PLUGIN_TEST


	)

45 
	~"£cuª_mesßges.h
"

47 
	~"hashög.h
"

49 
	#KEYFILE
 "/ëc/ﬁ§d.d/ﬁ§d_£cuª_key"

	)

52 
	#ONE_CHECKSUM
 1

	)

55 
	#SHA1_INCLUDING_KEY
 1

	)

56 
	#MD5_INCLUDING_KEY
 2

	)

58 #ifde‡
USE_OPENSSL


59 
	#SIGNATURE_SIZE
 20

	)

61 
	#SIGNATURE_SIZE
 16

	)

64 
	#KEYLENGTH
 16

	)

66 
	#UPPER_DIFF
 3

	)

67 
	#LOWER_DIFF
 -3

	)

69 
´s_key
[16];

72 
	#SLACK
 3

	)

74 
£cuª_∂ugö_öô
();

76 
£cuª_∂ugö_exô
();

78 
∂ugö_ùc_öô
();

	@lib/secure/src/secure_messages.h

42 #i‚de‡
_OLSRD_SECURE_MSG


43 
	#_OLSRD_SECURE_MSG


	)

45 
	~<sys/ty≥s.h
>

46 
	~<sys/sockë.h
>

47 
	~<√töë/ö.h
>

48 
	~<¨∑/öë.h
>

49 
	~<sys/time.h
>

50 
	~<time.h
>

51 
	~<m©h.h
>

52 
	~<°dio.h
>

54 
	~"ﬁ§_ty≥s.h
"

55 
	~"öãrÁ˚s.h
"

58 
	#MESSAGE_TYPE
 10

	)

61 
	#PARSER_TYPE
 
MESSAGE_TYPE


	)

63 
	#TYPE_CHALLENGE
 11

	)

64 
	#TYPE_CRESPONSE
 12

	)

65 
	#TYPE_RRESPONSE
 13

	)

67 
keyfûe
[
FILENAME_MAX
 + 1];

69 #ifde‡
USE_OPENSSL


70 
	#SIGSIZE
 20

	)

72 
	#SIGSIZE
 16

	)

79 
	ssig_msg
 {

80 
uöt8_t
 
	mty≥
;

81 
uöt8_t
 
	mÆg‹ôhm
;

82 
uöt16_t
 
	mª£rved
;

84 
time_t
 
	mtime°amp
;

85 
uöt8_t
 
	msig«tuª
[
SIGSIZE
];

92 
	ss_ﬁ§msg
 {

93 
uöt8_t
 
	mﬁ§_msgty≥
;

94 
uöt8_t
 
	mﬁ§_vtime
;

95 
uöt16_t
 
	mﬁ§_msgsize
;

96 
uöt32_t
 
	m‹igö©‹
;

97 
uöt8_t
 
	mâl
;

98 
uöt8_t
 
	mh›˙t
;

99 
uöt16_t
 
	m£qno
;

102 
sig_msg
 
	msig
;

110 
	schÆÀngemsg
 {

111 
uöt8_t
 
	mﬁ§_msgty≥
;

112 
uöt8_t
 
	mﬁ§_vtime
;

113 
uöt16_t
 
	mﬁ§_msgsize
;

114 
uöt32_t
 
	m‹igö©‹
;

115 
uöt8_t
 
	mâl
;

116 
uöt8_t
 
	mh›˙t
;

117 
uöt16_t
 
	m£qno
;

119 
uöt32_t
 
	mde°ö©i⁄
;

120 
uöt32_t
 
	mchÆÀnge
;

122 
uöt8_t
 
	msig«tuª
[
SIGSIZE
];

126 
	sc_ª•msg
 {

127 
uöt8_t
 
	mﬁ§_msgty≥
;

128 
uöt8_t
 
	mﬁ§_vtime
;

129 
uöt16_t
 
	mﬁ§_msgsize
;

130 
uöt32_t
 
	m‹igö©‹
;

131 
uöt8_t
 
	mâl
;

132 
uöt8_t
 
	mh›˙t
;

133 
uöt16_t
 
	m£qno
;

135 
uöt32_t
 
	mde°ö©i⁄
;

136 
uöt32_t
 
	mchÆÀnge
;

137 
time_t
 
	mtime°amp
;

139 
uöt8_t
 
	mªs_sig
[
SIGSIZE
];

141 
uöt8_t
 
	msig«tuª
[
SIGSIZE
];

144 
	sr_ª•msg
 {

145 
uöt8_t
 
	mﬁ§_msgty≥
;

146 
uöt8_t
 
	mﬁ§_vtime
;

147 
uöt16_t
 
	mﬁ§_msgsize
;

148 
uöt32_t
 
	m‹igö©‹
;

149 
uöt8_t
 
	mâl
;

150 
uöt8_t
 
	mh›˙t
;

151 
uöt16_t
 
	m£qno
;

153 
uöt32_t
 
	mde°ö©i⁄
;

154 
time_t
 
	mtime°amp
;

156 
uöt8_t
 
	mªs_sig
[
SIGSIZE
];

158 
uöt8_t
 
	msig«tuª
[
SIGSIZE
];

165 
	ss_ﬁ§msg6
 {

166 
uöt8_t
 
	mﬁ§_msgty≥
;

167 
uöt8_t
 
	mﬁ§_vtime
;

168 
uöt16_t
 
	mﬁ§_msgsize
;

169 
ö6_addr
 
	m‹igö©‹
;

170 
uöt8_t
 
	mâl
;

171 
uöt8_t
 
	mh›˙t
;

172 
uöt16_t
 
	m£qno
;

175 
sig_msg
 
	msig
;

182 
	ss_ﬁ§
 {

183 
uöt16_t
 
	mﬁ§_∑ckÀn
;

184 
uöt16_t
 
	mﬁ§_£qno
;

185 
s_ﬁ§msg
 
	mﬁ§_msg
[1];

188 
	ss_ﬁ§6
 {

189 
uöt16_t
 
	mﬁ§_∑ckÀn
;

190 
uöt16_t
 
	mﬁ§_£qno
;

191 
s_ﬁ§msg6
 
	mﬁ§_msg
[1];

	@lib/tas/src/glua.c

43 
	~"lua/lua.h
"

44 
	~"lua/œuxlib.h
"

45 
	~"lua/luÆib.h
"

47 
	~"lök.h
"

48 
	~"∂ugö.h
"

49 
	~"lib.h
"

50 
	~"os_unix.h
"

51 
	~"hâp.h
"

52 
	~"glua.h
"

53 
	~"glua_ext.h
"

55 
	~<°dio.h
>

56 
	~<°rög.h
>

58 c⁄° 
	göfoKey
;

59 c⁄° 
	gkìpFœgKey
;

60 c⁄° 
	g¨gLi°Key
;

63 
	$l•ToLua
(c⁄° *
roŸDú
, c⁄° *
l•FûeName
, c⁄° *
w‹kDú
, c⁄° *
luaFûeName
)

65 
FILE
 *
fûe
;

66 
l•Lí
;

67 *
buff
;

68 
°¨t
, 
code
, 
i
, 
k
;

69 *
l•P©h
 = 
	`fuŒP©h
(
roŸDú
, 
l•FûeName
);

70 *
luaP©h
 = 
	`fuŒP©h
(
w‹kDú
, 
luaFûeName
);

72 i‡(
	`fûeIsNewî
(
l•P©h
, 
luaP©h
) == 0) {

73 
	`‰ìMem
(
l•P©h
);

74 
	`‰ìMem
(
luaP©h
);

78 
fûe
 = 
	`f›í
(
l•P©h
, "r");

80 i‡(
fûe
 =
NULL
) {

81 
	`îr‹
("ˇ¬Ÿ o≥¿%s\n", 
l•P©h
);

82 
	`‰ìMem
(
l•P©h
);

83 
	`‰ìMem
(
luaP©h
);

87 i‡(
	`f£ek
(
fûe
, 0, 
SEEK_END
) < 0) {

88 
	`îr‹
("ˇ¬Ÿ sìkÅÿíd o‡%s\n", 
l•P©h
);

89 
	`f˛o£
(
fûe
);

90 
	`‰ìMem
(
l•P©h
);

91 
	`‰ìMem
(
luaP©h
);

95 
l•Lí
 = 
	`·ñl
(
fûe
);

97 i‡(
l•Lí
 < 0) {

98 
	`îr‹
("ˇ¬Ÿ dëîmöêÀngth o‡%s\n", 
l•P©h
);

99 
	`f˛o£
(
fûe
);

100 
	`‰ìMem
(
l•P©h
);

101 
	`‰ìMem
(
luaP©h
);

105 i‡(
	`f£ek
(
fûe
, 0, 
SEEK_SET
) < 0) {

106 
	`îr‹
("ˇ¬Ÿ sìkÅÿbegönög o‡%s\n", 
l•P©h
);

107 
	`f˛o£
(
fûe
);

108 
	`‰ìMem
(
l•P©h
);

109 
	`‰ìMem
(
luaP©h
);

113 
buff
 = 
	`ÆlocMem
(
l•Lí
);

115 i‡(
	`‰ód
(
buff
, 
l•Lí
, 1, 
fûe
) != 1) {

116 
	`îr‹
("ˇ¬ŸÑód %s\n", 
l•P©h
);

117 
	`f˛o£
(
fûe
);

118 
	`‰ìMem
(
l•P©h
);

119 
	`‰ìMem
(
luaP©h
);

120 
	`‰ìMem
(
buff
);

124 
	`f˛o£
(
fûe
);

126 i‡(
	`¸óãAŒDús
(
luaP©h
) < 0) {

127 
	`îr‹
("ˇ¬Ÿ cª©êªquúed dúe˘‹õ†f‹ %s\n", 
luaP©h
);

128 
	`‰ìMem
(
l•P©h
);

129 
	`‰ìMem
(
luaP©h
);

130 
	`‰ìMem
(
buff
);

134 
fûe
 = 
	`f›í
(
luaP©h
, "w");

136 i‡(
fûe
 =
NULL
) {

137 
	`îr‹
("ˇ¬Ÿ o≥¿%s\n", 
luaP©h
);

138 
	`‰ìMem
(
l•P©h
);

139 
	`‰ìMem
(
luaP©h
);

140 
	`‰ìMem
(
buff
);

144 
°¨t
 = 0;

145 
code
 = 0;

147 
i
 = 0;

150 i‡(
code
 =0 && (
i
 =
l•Lí
 || 
	`°∫cmp
((*)(
buff
 + i), "<?lua", 5) == 0)) {

151 
	`Ârötf
(
fûe
, "tas.write(\"");

153 
k
 = 
°¨t
; k < 
i
; k++) {

154 i‡(
buff
[
k
] == 13)

157 i‡(
buff
[
k
] == '\\' || buff[k] == '"' || buff[k] == 10)

158 
	`Âutc
('\\', 
fûe
);

160 
	`Âutc
(
buff
[
k
], 
fûe
);

163 
	`Ârötf
(
fûe
, "\")\n");

165 i‡(
i
 =
l•Lí
)

168 i‡(
buff
[
i
 + 5] == '=') {

169 
i
 += 6;

170 
code
 = 2;

174 
i
 += 5;

175 
code
 = 1;

178 
°¨t
 = 
i
;

183 i‡(
code
 > 0 && (
i
 =
l•Lí
 || 
	`°∫cmp
((*)(
buff
 + i), "?>", 2) == 0)) {

184 i‡(
code
 > 1)

185 
	`Ârötf
(
fûe
, "tas.write(");

187 
k
 = 
°¨t
; k < 
i
; k++)

188 i‡(
buff
[
k
] != 13)

189 
	`Âutc
(
buff
[
k
], 
fûe
);

191 i‡(
code
 > 1)

192 
	`Âutc
(')', 
fûe
);

194 
	`Âutc
('\n', 
fûe
);

196 i‡(
i
 =
l•Lí
)

199 
i
 += 2;

200 
°¨t
 = 
i
;

202 
code
 = 0;

207 
i
++;

210 
	`f˛o£
(
fûe
);

211 
	`‰ìMem
(
l•P©h
);

212 
	`‰ìMem
(
luaP©h
);

213 
	`‰ìMem
(
buff
);

215 
	}
}

218 
luaWrôî
(
lua_Sèã
 * 
lua
 
__©åibuã__
 ((
unu£d
)), c⁄° *
buff
, 
Àn
, 
FILE
 * 
fûe
)

220  
fwrôe
(
buff
, 
Àn
, 1, 
fûe
) == 1;

224 
	$luaToLex
(**
îrMsg
, c⁄° *
w‹kDú
, c⁄° *
luaFûeName
, c⁄° *
ÀxFûeName
)

226 
lua_Sèã
 *
lua
;

227 
ªs
;

228 
FILE
 *
fûe
;

229 *
luaP©h
 = 
	`fuŒP©h
(
w‹kDú
, 
luaFûeName
);

230 *
ÀxP©h
 = 
	`fuŒP©h
(
w‹kDú
, 
ÀxFûeName
);

232 *
îrMsg
 = 
NULL
;

234 i‡(
	`fûeIsNewî
(
luaP©h
, 
ÀxP©h
) == 0) {

235 
	`‰ìMem
(
luaP©h
);

236 
	`‰ìMem
(
ÀxP©h
);

240 
lua
 = 
	`lua_›í
();

242 
ªs
 = 
	`luaL_lﬂdfûe
(
lua
, 
luaP©h
);

244 i‡(
ªs
 != 0) {

245 *
îrMsg
 = 
	`mySådup
(
	`lua_to°rög
(
lua
, -1));

246 
	`îr‹
("ˇ¬ŸÜﬂd %s: %s\n", 
luaP©h
, *
îrMsg
);

247 
	`lua_˛o£
(
lua
);

248 
	`‰ìMem
(
luaP©h
);

249 
	`‰ìMem
(
ÀxP©h
);

253 
fûe
 = 
	`f›í
(
ÀxP©h
, "wb");

255 i‡(
fûe
 =
NULL
) {

256 
	`îr‹
("ˇ¬Ÿ o≥¿%s\n", 
ÀxP©h
);

257 
	`lua_˛o£
(
lua
);

258 
	`‰ìMem
(
luaP©h
);

259 
	`‰ìMem
(
ÀxP©h
);

263 
	`lua_dump
(
lua
, (
lua_Chunkwrôî
Ë
luaWrôî
, 
fûe
);

265 
	`f˛o£
(
fûe
);

267 
	`lua_˛o£
(
lua
);

268 
	`‰ìMem
(
luaP©h
);

269 
	`‰ìMem
(
ÀxP©h
);

271 
	}
}

274 
	$èsWrôe
(
lua_Sèã
 * 
lua
)

276 
numArg
 = 
	`lua_gët›
(
lua
);

277 c⁄° *
°rC⁄v
;

278 
i
;

279 
c⁄nInfo
 *
öfo
;

281 
	`lua_pushlightu£rd©a
(
lua
, &
öfoKey
);

282 
	`lua_gëèbÀ
(
lua
, 
LUA_REGISTRYINDEX
);

284 
öfo
 = 
	`lua_tou£rd©a
(
lua
, -1);

286 
	`lua_gëglobÆ
(
lua
, "tostring");

288 
i
 = 1; i <
numArg
; i++) {

289 
	`lua_pushvÆue
(
lua
, -1);

290 
	`lua_pushvÆue
(
lua
, 
i
);

292 
	`lua_ˇŒ
(
lua
, 1, 1);

294 
°rC⁄v
 = 
	`lua_to°rög
(
lua
, -1);

296 i‡(
°rC⁄v
 =
NULL
)

297  
	`luaL_îr‹
(
lua
, "cannot convert valueÅo string");

299 
	`wrôeBuff
(&
öfo
->
wrôe
[2], (c⁄° *)
°rC⁄v
, 
	`°æí
(strConv));

301 
	`lua_p›
(
lua
, 1);

305 
	}
}

308 
	$èsAddHódîLöe
(
lua_Sèã
 * 
lua
)

310 
c⁄nInfo
 *
öfo
;

311 *
löe
;

313 
	`lua_pushlightu£rd©a
(
lua
, &
öfoKey
);

314 
	`lua_gëèbÀ
(
lua
, 
LUA_REGISTRYINDEX
);

316 
öfo
 = 
	`lua_tou£rd©a
(
lua
, -1);

318 
löe
 = 
	`mySådup
(
	`luaL_check°rög
(
lua
, 1));

320 
	`chomp
(
löe
, 
	`°æí
(line));

322 
	`wrôeBuff
(&
öfo
->
wrôe
[1], (c⁄° *)
löe
, 
	`°æí
(line));

323 
	`wrôeBuff
(&
öfo
->
wrôe
[1], (const *)"\r\n", 2);

325 
	`‰ìMem
(
löe
);

328 
	}
}

331 
	$èsSëC⁄ã¡Ty≥
(
lua_Sèã
 * 
lua
)

333 
c⁄nInfo
 *
öfo
;

334 c⁄° *
c⁄tTy≥
;

335 *
s
;

337 
	`lua_pushlightu£rd©a
(
lua
, &
öfoKey
);

338 
	`lua_gëèbÀ
(
lua
, 
LUA_REGISTRYINDEX
);

340 
öfo
 = 
	`lua_tou£rd©a
(
lua
, -1);

342 
c⁄tTy≥
 = 
	`luaL_check°rög
(
lua
, 1);

344 
s
 = 
	`ÆlocBuff
(
öfo
, 
	`°æí
(
c⁄tTy≥
) + 1);

345 
	`°r˝y
(
s
, 
c⁄tTy≥
);

348 
	}
}

351 
	$èsKìpSèã
(
lua_Sèã
 * 
lua
)

353 *
kìpFœg
;

355 
	`lua_pushlightu£rd©a
(
lua
, &
kìpFœgKey
);

356 
	`lua_gëèbÀ
(
lua
, 
LUA_REGISTRYINDEX
);

358 
kìpFœg
 = 
	`lua_tou£rd©a
(
lua
, -1);

360 *
kìpFœg
 = 1;

363 
	}
}

366 
	$èsGëP¨amëîs
(
lua_Sèã
 * 
lua
)

368 
i
;

369 **
¨gLi°
;

371 
	`lua_pushlightu£rd©a
(
lua
, &
¨gLi°Key
);

372 
	`lua_gëèbÀ
(
lua
, 
LUA_REGISTRYINDEX
);

374 
¨gLi°
 = 
	`lua_tou£rd©a
(
lua
, -1);

376 
	`lua_√wèbÀ
(
lua
);

378 i‡(
¨gLi°
 =
NULL
)

381 
i
 = 0; 
¨gLi°
[i] !
NULL
; i += 2) {

382 
	`lua_push°rög
(
lua
, 
¨gLi°
[
i
]);

383 
	`lua_push°rög
(
lua
, 
¨gLi°
[
i
 + 1]);

384 
	`lua_£âabÀ
(
lua
, -3);

388 
	}
}

390 c⁄° 
luaL_ªg
 
	gèsLib
[] = {

391 {"wrôe", 
èsWrôe
},

392 {"£t_c⁄ã¡_ty≥", 
èsSëC⁄ã¡Ty≥
},

393 {"add_hódî_löe", 
èsAddHódîLöe
},

394 {"kìp_°©e", 
èsKìpSèã
},

395 {"gë_∑ømëîs", 
èsGëP¨amëîs
},

396 #ifde‡
TAS_EXTRA_FUNCTIONS


397 
TAS_EXTRA_FUNCTIONS


399 {
NULL
, NULL}

403 
	$lua›í_ès
(
lua_Sèã
 * 
lua
)

405 
	`luaL_›ílib
(
lua
, "ès", 
èsLib
, 0);

407 
	}
}

410 
	$runLua
(**
îrMsg
, 
c⁄nInfo
 *
öfo
, c⁄° *
w‹kDú
, c⁄° *
ÀxFûeName
, **
¨gLi°
, **
£ssi⁄
)

412 
lua_Sèã
 *
lua
;

413 
ªs
;

414 *
ÀxP©h
 = 
	`fuŒP©h
(
w‹kDú
, 
ÀxFûeName
);

415 
kìpFœg
 = 0;

417 *
îrMsg
 = 
NULL
;

419 i‡(*
£ssi⁄
 =
NULL
) {

420 
lua
 = 
	`lua_›í
();

422 
	`lua›í_ba£
(
lua
);

423 
	`lua›í_èbÀ
(
lua
);

424 
	`lua›í_io
(
lua
);

425 
	`lua›í_°rög
(
lua
);

426 
	`lua›í_m©h
(
lua
);

427 
	`lua›í_debug
(
lua
);

428 
	`lua›í_lﬂdlib
(
lua
);

430 
	`lua›í_ès
(
lua
);

434 
lua
 = *
£ssi⁄
;

436 
	`lua_pushlightu£rd©a
(
lua
, &
öfoKey
);

437 
	`lua_pushlightu£rd©a
(
lua
, 
öfo
);

438 
	`lua_£âabÀ
(
lua
, 
LUA_REGISTRYINDEX
);

440 
	`lua_pushlightu£rd©a
(
lua
, &
¨gLi°Key
);

441 
	`lua_pushlightu£rd©a
(
lua
, 
¨gLi°
);

442 
	`lua_£âabÀ
(
lua
, 
LUA_REGISTRYINDEX
);

444 
	`lua_pushlightu£rd©a
(
lua
, &
kìpFœgKey
);

445 
	`lua_pushlightu£rd©a
(
lua
, &
kìpFœg
);

446 
	`lua_£âabÀ
(
lua
, 
LUA_REGISTRYINDEX
);

448 
ªs
 = 
	`luaL_lﬂdfûe
(
lua
, 
ÀxP©h
);

450 i‡(
ªs
 != 0) {

451 *
îrMsg
 = 
	`mySådup
(
	`lua_to°rög
(
lua
, -1));

452 
	`îr‹
("ˇ¬ŸÜﬂd %s: %s\n", 
ÀxP©h
, *
îrMsg
);

453 
	`lua_˛o£
(
lua
);

454 
	`‰ìMem
(
ÀxP©h
);

458 
ªs
 = 
	`lua_pˇŒ
(
lua
, 0, 0, 0);

460 i‡(
ªs
 != 0) {

461 *
îrMsg
 = 
	`mySådup
(
	`lua_to°rög
(
lua
, -1));

462 
	`îr‹
("ˇ¬ŸÑu¿%s: %s\n", 
ÀxP©h
, *
îrMsg
);

463 
	`lua_˛o£
(
lua
);

464 
	`‰ìMem
(
ÀxP©h
);

468 i‡(
kìpFœg
 == 0) {

469 
	`lua_˛o£
(
lua
);

470 *
£ssi⁄
 = 
NULL
;

474 *
£ssi⁄
 = 
lua
;

476 
	`‰ìMem
(
ÀxP©h
);

478 
	}
}

481 
	$‰ìLuaSessi⁄
(*
£ssi⁄
)

483 
	`lua_˛o£
(
£ssi⁄
);

484 
	}
}

	@lib/tas/src/glua.h

43 
l•ToLua
(c⁄° *
roŸDú
, c⁄° *
l•FûeName
, c⁄° *
w‹kDú
, c⁄° *
luaFûeName
);

44 
luaToLex
(**
îrMsg
, c⁄° *
w‹kDú
, c⁄° *
luaFûeName
, c⁄° *
ÀxFûeName
);

45 
runLua
(**
îrMsg
, 
c⁄nInfo
 *
öfo
, c⁄° *
w‹kDú
, c⁄° *
ÀxFûeName
, **
¨gLi°
,

46 **
£ssi⁄
);

47 
‰ìLuaSessi⁄
(*
£ssi⁄
);

	@lib/tas/src/glua_ext.c

43 
	~"lua/lua.h
"

44 
	~"lua/œuxlib.h
"

45 
	~"lua/luÆib.h
"

47 
	~"lök.h
"

48 
	~"∂ugö.h
"

49 
	~"lib.h
"

50 
	~"os_unix.h
"

51 
	~"hâp.h
"

52 
	~"glua.h
"

53 
	~"glua_ext.h
"

55 
	~<°rög.h
>

58 
	$gëTokí
(**
poöt
)

60 *
loˇlPoöt
 = *
poöt
;

61 *
°¨t
;

63 
°¨t
 = 
loˇlPoöt
;

65 *
loˇlPoöt
 != '~' && *localPoint != 0)

66 
loˇlPoöt
++;

68 i‡(*
loˇlPoöt
 == 0)

69  
NULL
;

71 *
loˇlPoöt
++ = 0;

73 *
poöt
 = 
loˇlPoöt
;

75  
°¨t
;

76 
	}
}

79 
	$èsOl§SídMesßge
(
lua_Sèã
 * 
lua
)

81 c⁄° *
£rvi˚
;

82 c⁄° *
°rög
;

84 
£rvi˚
 = 
	`luaL_check°rög
(
lua
, 1);

85 
°rög
 = 
	`luaL_check°rög
(
lua
, 2);

87 
	`£ndMesßge
(
£rvi˚
, 
°rög
);

88 
	`hâpAddTasMesßge
(
£rvi˚
, 
°rög
, "localhost");

91 
	}
}

94 
	$èsOl§GëMesßge
(
lua_Sèã
 * 
lua
)

96 c⁄° *
£rvi˚
;

97 *
°rög
;

98 *
‰om
;

100 
£rvi˚
 = 
	`luaL_check°rög
(
lua
, 1);

102 i‡(
	`hâpGëTasMesßge
(
£rvi˚
, &
°rög
, &
‰om
) < 0) {

103 
	`lua_pushnû
(
lua
);

104 
	`lua_pushnû
(
lua
);

108 
	`lua_push°rög
(
lua
, 
°rög
);

109 
	`lua_push°rög
(
lua
, 
‰om
);

111 
	`‰ìMem
(
°rög
);

112 
	`‰ìMem
(
‰om
);

116 
	}
}

119 
	$addSubTabÀ
(
lua_Sèã
 * 
lua
, **
wÆkî
)

121 *
tokí
;

122 
vÆ
;

124 
tokí
 = 
	`gëTokí
(
wÆkî
);

126 i‡(
tokí
 =
NULL
) {

127 
	`îr‹
("prematureÉnd of buffer\n");

131 i‡(
	`°rögToI¡
(&
vÆ
, 
tokí
) < 0)

132 
	`lua_push°rög
(
lua
, 
tokí
);

135 
	`lua_pushnumbî
(
lua
, 
vÆ
);

137 
	`lua_√wèbÀ
(
lua
);

139 **
wÆkî
 != 0) {

140 
tokí
 = 
	`gëTokí
(
wÆkî
);

142 i‡(
tokí
 =
NULL
) {

143 
	`îr‹
("prematureÉnd of buffer\n");

147 i‡(
	`°rcmp
(
tokí
, "]") == 0)

150 i‡(
	`°rcmp
(
tokí
, "[") == 0)

151 
	`addSubTabÀ
(
lua
, 
wÆkî
);

154 i‡(
	`°rögToI¡
(&
vÆ
, 
tokí
) < 0)

155 
	`lua_push°rög
(
lua
, 
tokí
);

158 
	`lua_pushnumbî
(
lua
, 
vÆ
);

160 
tokí
 = 
	`gëTokí
(
wÆkî
);

162 i‡(
tokí
 =
NULL
) {

163 
	`îr‹
("prematureÉnd of buffer\n");

167 
	`lua_push°rög
(
lua
, 
tokí
);

170 
	`lua_£âabÀ
(
lua
, -3);

172 
	}
}

175 
addTabÀ
(
lua_Sèã
 * 
lua
, c⁄° *
«me
, (*
öô
Ë(), (*
√xt
Ë(*
buff
, 
Àn
))

177 
i
;

178 
buff
[1024], *
wÆkî
, *
tokí
;

180 
	`lua_push°rög
(
lua
, 
«me
);

181 
	`lua_√wèbÀ
(
lua
);

183 
	`öô
();

185 
i
 = 0;

187 
	`√xt
(
buff
, (buff)) >= 0) {

188 
wÆkî
 = 
buff
;

190 
	`lua_pushnumbî
(
lua
, 
i
++);

191 
	`lua_√wèbÀ
(
lua
);

193 *
wÆkî
 != 0) {

194 
tokí
 = 
	`gëTokí
(&
wÆkî
);

196 i‡(
tokí
 =
NULL
) {

197 
	`îr‹
("prematureÉnd of buffer\n");

201 i‡(
	`°rcmp
(
tokí
, "[") == 0)

202 
	`addSubTabÀ
(
lua
, &
wÆkî
);

205 
	`lua_push°rög
(
lua
, 
tokí
);

207 
tokí
 = 
	`gëTokí
(&
wÆkî
);

209 i‡(
tokí
 =
NULL
) {

210 
	`îr‹
("prematureÉnd of buffer\n");

214 
	`lua_push°rög
(
lua
, 
tokí
);

217 
	`lua_£âabÀ
(
lua
, -3);

220 
	`lua_£âabÀ
(
lua
, -3);

223 
	`lua_£âabÀ
(
lua
, -3);

224 
	}
}

227 
	$èsOl§GëInfo
(
lua_Sèã
 * 
lua
)

229 
	`lua_√wèbÀ
(
lua
);

231 
	`addTabÀ
(
lua
, "rouãs", 
ôîRouãTabInô
, 
ôîRouãTabNext
);

232 
	`addTabÀ
(
lua
, "löks", 
ôîLökTabInô
, 
ôîLökTabNext
);

233 
	`addTabÀ
(
lua
, "√ighb‹s", 
ôîNeighTabInô
, 
ôîNeighTabNext
);

234 
	`addTabÀ
(
lua
, "t›ﬁogy", 
ôîTcTabInô
, 
ôîTcTabNext
);

237 
	}
}

	@lib/tas/src/glua_ext.h

43 
	~"lua/lua.h
"

45 
	#TAS_EXTRA_FUNCTIONS
 \

46 { "ﬁ§_£nd_mesßge", 
èsOl§SídMesßge
 }, \

47 { "ﬁ§_gë_mesßge", 
èsOl§GëMesßge
 }, \

48 { "ﬁ§_gë_öfo", 
èsOl§GëInfo
 },

	)

50 
èsOl§SídMesßge
(
lua_Sèã
 * 
lua
);

51 
èsOl§GëMesßge
(
lua_Sèã
 * 
lua
);

52 
èsOl§GëInfo
(
lua_Sèã
 * 
lua
);

	@lib/tas/src/http.c

43 
	~"lök.h
"

44 
	~"∂ugö.h
"

45 
	~"lib.h
"

46 
	~"os_unix.h
"

47 
	~"hâp.h
"

48 
	~"glua.h
"

49 
	~"glua_ext.h
"

51 
	~<°rög.h
>

52 
	~<°d¨g.h
>

56 
	#DEF_CONFIG_ROOT_DIR
 "/ëc/ès"

	)

57 
	#DEF_CONFIG_WORK_DIR
 "/v¨/run/ès"

	)

58 
	#DEF_CONFIG_PORT
 1979

	)

59 
	#DEF_CONFIG_ADDR
 "127.0.0.1"

	)

60 
	#DEF_CONFIG_INDEX_FILE
 "ödex.html"

	)

61 
	#DEF_CONFIG_USER
 
NULL


	)

62 
	#DEF_CONFIG_PASSWORD
 
NULL


	)

63 
	#DEF_CONFIG_SESS_TIME
 600

	)

64 
	#DEF_CONFIG_PUB_DIR
 "pub"

	)

65 
	#DEF_CONFIG_QUANTUM
 30

	)

66 
	#DEF_CONFIG_MESS_TIME
 60

	)

67 
	#DEF_CONFIG_MESS_LIMIT
 100

	)

69 
ùAddr
 
	gc⁄fAddr
;

70 
	gc⁄fP‹t
;

71 c⁄° *
	gc⁄fRoŸDú
;

72 c⁄° *
	gc⁄fW‹kDú
;

73 c⁄° *
	gc⁄fIndexFûe
;

74 *
	gc⁄fU£r
;

75 *
	gc⁄fPassw‹d
;

76 
	gc⁄fSessTime
;

77 c⁄° *
	gc⁄fPubDú
;

78 
	gc⁄fQu™tum
;

79 
	gc⁄fMessTime
;

80 
	gc⁄fMessLimô
;

83 
	m£ssId
;

84 
	mkey
[16];

85 } 
	gcookõSåu˘
;

87 
	#MAX_CONN
 5

	)

89 
	gnumC⁄n
;

90 
c⁄nInfo
 *
	gc⁄n
[
MAX_CONN
];

92 
	s£ssInfo
 {

93 
	mid
;

94 *
	md©a
;

95 
timeSèmp
 
	mtime
;

98 
	#MAX_SESS
 10

	)

100 
	gnumSess
;

101 
£ssInfo
 *
	g£ss
[
MAX_SESS
];

103 
	sextM≠
 {

104 c⁄° *
	mext
;

105 c⁄° *
	mty≥
;

106 
	m°©e
;

107 } 
	gextM≠
[] = {

109 ".≤g", "image/≤g", 
STATE_FILE
}, {

110 ".gif", "image/gif", 
STATE_FILE
}, {

111 ".jpg", "image/jpg", 
STATE_FILE
}, {

112 ".l•", "ãxt/html; ch¨£t=iso-8859-1", 
STATE_LSP
}, {

113 ".html", "ãxt/html; ch¨£t=iso-8859-1", 
STATE_FILE
}, {

114 ".htm", "ãxt/html; ch¨£t=iso-8859-1", 
STATE_FILE
}, {

115 
NULL
, NULL, 0}

118 
	sèsMesßge
 {

119 
èsMesßge
 *
	m√xt
;

121 
timeSèmp
 
	mtime
;

123 *
	m£rvi˚
;

124 *
	m°rög
;

125 *
	m‰om
;

128 
èsMesßge
 *
	gfú°TasMsg
, *
	gœ°TasMsg
;

129 
	gnumTasMsg
;

132 
	$rc4
(*
buff
, 
Àn
, *
key
, 
keyLí
)

134 
i
, 
m
, 
n
;

135 
°©e
[256];

136 
aux
;

138 
i
 = 0; i < 256; i++)

139 
°©e
[
i
] = ()i;

141 
m
 = 0;

142 
n
 = 0;

144 
i
 = 0; i < 256; i++) {

145 
m
 = (m + 
key
[
n
] + 
°©e
[
i
]) & 255;

147 
aux
 = 
°©e
[
i
];

148 
°©e
[
i
] = sèã[
m
];

149 
°©e
[
m
] = 
aux
;

151 
n
 = (¿+ 1Ë% 
keyLí
;

154 
m
 = 0;

155 
n
 = 0;

157 
i
 = 0; i < 
Àn
; i++) {

158 
n
 = (n + 1) & 255;

159 
m
 = (m + 
°©e
[
n
]) & 255;

161 
aux
 = 
°©e
[
n
];

162 
°©e
[
n
] = sèã[
m
];

163 
°©e
[
m
] = 
aux
;

165 
buff
[
i
] ^
°©e
[(°©e[
m
] + sèã[
n
]) & 255];

167 
	}
}

170 
	$m≠HexDigô
(
digô
)

172 i‡(
digô
 >= 'A' && digit <= 'F')

173  
digô
 + 10 - 'A';

175 i‡(
digô
 >= 'a' && digit <= 'f')

176  
digô
 + 10 - 'a';

178 i‡(
digô
 >= '0' && digit <= '9')

179  
digô
 - '0';

182 
	}
}

185 
	$addHexDigô
(*
vÆ
, 
digô
)

187 
digô
 = 
	`m≠HexDigô
(digit);

189 i‡(
digô
 < 0)

192 *
vÆ
 = (*vÆ << 4Ë| 
digô
;

195 
	}
}

198 
	$ícHexSåög
(*
hexSåög
, *
hex
, 
Àn
)

200 c⁄° 
m≠
[] = "0123456789ABCDEF";

202 
Àn
-- > 0) {

203 *
hexSåög
++ = 
m≠
[*
hex
 >> 4];

204 *
hexSåög
++ = 
m≠
[*
hex
++ & 15];

207 *
hexSåög
 = 0;

208 
	}
}

211 
	$decHexSåög
(*
hex
, *
hexSåög
, 
Àn
)

213 
vÆ
;

215 
Àn
-- > 0) {

216 
vÆ
 = 0;

218 i‡(
	`addHexDigô
(&
vÆ
, *
hexSåög
++) < 0 ||áddHexDigit(&val, *hexString++) < 0)

221 *
hex
++ = ()
vÆ
;

225 
	}
}

228 
	$decBa£64
(*
out
, *
ö
)

230 
m≠
[256] = {

248 
°©e
;

249 
vÆ
;

250 
digô
;

252 
vÆ
 = 0;

253 
°©e
 = 0;

255 *
ö
 != 0 && *in != '=') {

256 
digô
 = 
m≠
[()*
ö
++];

258 i‡(
digô
 < 0)

261 
vÆ
 = (vÆ << 6Ë| 
digô
;

263 i‡(
°©e
 == 1)

264 *
out
++ = ()(
vÆ
 >> 4);

266 i‡(
°©e
 == 2)

267 *
out
++ = ()(
vÆ
 >> 2);

269 i‡(
°©e
 == 3)

270 *
out
++ = ()
vÆ
;

272 
°©e
 = (state + 1) & 3;

276 
	}
}

279 
	$öôInOutBuff
(
öOutBuff
 *
buff
)

281 
buff
->
off
 = 0;

282 
buff
->
Àn
 = 0;

283 
buff
->
c⁄t
 = 0;

285 
buff
->
fú°
 = 
NULL
;

286 
buff
->
œ°
 = 
NULL
;

287 
	}
}

289 
c⁄nInfo
 *

290 
	$√wC⁄nInfo
(
fûeId
 *
sockId
, 
ùAddr
 *
addr
)

292 
c⁄nInfo
 *
öfo
 = 
	`ÆlocMem
((connInfo));

294 
öfo
->
sockId
 = sockId;

295 
öfo
->
addr
 =áddr;

297 
öfo
->
°©e
 = 
STATE_REQUEST
;

299 
	`öôInOutBuff
(&
öfo
->
ªad
);

300 
	`öôInOutBuff
(&
öfo
->
wrôe
[0]);

301 
	`öôInOutBuff
(&
öfo
->
wrôe
[1]);

302 
	`öôInOutBuff
(&
öfo
->
wrôe
[2]);

304 
öfo
->
which
 = 0;

306 
öfo
->
Êags
 = 
FLAG_READ
 | 
FLAG_WRITE
;

308 
öfo
->
buff
 = 
NULL
;

310 
öfo
->
buffU£d
 = 0;

311 
öfo
->
buffTŸÆ
 = 0;

313 
öfo
->
fú°Hód
 = 
NULL
;

314 
öfo
->
œ°Hód
 = 
NULL
;

316 
öfo
->
vîb
 = 
NULL
;

317 
öfo
->
ho°
 = 
NULL
;

318 
öfo
->
∑th
 = 
NULL
;

319 
öfo
->
∑ø
 = 
NULL
;

320 
öfo
->
¥Ÿo
 = 
NULL
;

322 
öfo
->
c⁄tTy≥
 = "text/html; charset=iso-8859-1";

323 
öfo
->
c⁄tLí
 = -1;

325 
öfo
->
√wSess
 = 
NULL
;

327 
öfo
->
authU£r
 = 
NULL
;

328 
öfo
->
authPass
 = 
NULL
;

330  
öfo
;

331 
	}
}

334 
	$‰ìInOutBuff
(
öOutBuff
 *
buff
)

336 
chunk
 *
wÆkî
, *
√xt
;

338 
wÆkî
 = 
buff
->
fú°
; wÆkî !
NULL
; wÆkî = 
√xt
) {

339 
√xt
 = 
wÆkî
->next;

340 
	`‰ìMem
(
wÆkî
);

342 
	}
}

345 
	$‰ìW‹kBuff
(
w‹kBuff
 *
buff
)

347 
w‹kBuff
 *
√xt
;

349 
buff
 !
NULL
) {

350 
√xt
 = 
buff
->next;

351 
	`‰ìMem
(
buff
);

352 
buff
 = 
√xt
;

354 
	}
}

357 
	$‰ìC⁄nInfo
(
c⁄nInfo
 *
öfo
)

359 
	`‰ìMem
(
öfo
->
sockId
);

360 
	`‰ìMem
(
öfo
->
addr
);

362 
	`‰ìInOutBuff
(&
öfo
->
ªad
);

363 
	`‰ìInOutBuff
(&
öfo
->
wrôe
[0]);

364 
	`‰ìInOutBuff
(&
öfo
->
wrôe
[1]);

365 
	`‰ìInOutBuff
(&
öfo
->
wrôe
[2]);

367 
	`‰ìW‹kBuff
(
öfo
->
buff
);

369 
	`‰ìMem
(
öfo
);

370 
	}
}

372 
£ssInfo
 *

373 
	$√wSessInfo
()

375 
£ssId
 = 0;

376 
£ssInfo
 *
öfo
;

378 
öfo
 = 
	`ÆlocMem
((
£ssInfo
));

380 
öfo
->
id
 = 
£ssId
++;

381 
öfo
->
d©a
 = 
NULL
;

383 
	`os_now
(&
öfo
->
time
);

385 
	`debug
(
DEBUG_SESSION
, "√w sessi⁄, id = %u\n", 
öfo
->
id
);

387  
öfo
;

388 
	}
}

391 
	$ÆlocBuff
(
c⁄nInfo
 *
öfo
, 
Àn
)

393 
w‹kBuff
 *
buff
;

394 *
ªs
;

396 
	`debug
(
DEBUG_CONNECTION
, "%d byã†o‡buf„∏•a˚Ñeque°ed\n", 
Àn
);

398 i‡(
öfo
->
buff
 !
NULL
)

399 
	`debug
(
DEBUG_CONNECTION
, "exi°ög buf„r, sizê%d byãs, u£d = %d byãs,Ñemaöög = %d byãs\n", 
öfo
->
buffTŸÆ
,

400 
öfo
->
buffU£d
, info->
buffTŸÆ
 - info->buffUsed);

403 
	`debug
(
DEBUG_CONNECTION
, "noÉxisting buffer\n");

405 i‡(
öfo
->
buff
 =
NULL
 || 
Àn
 > info->
buffTŸÆ
 - info->
buffU£d
) {

406 
öfo
->
buffTŸÆ
 = (
Àn
 > 
BUFF_SIZE
) ?Üen : BUFF_SIZE;

407 
öfo
->
buffU£d
 = 0;

409 
	`debug
(
DEBUG_CONNECTION
, "√w buf„∏o‡%d byãs\n", 
öfo
->
buffTŸÆ
);

411 
buff
 = 
	`ÆlocMem
((
w‹kBuff
Ë+ 
öfo
->
buffTŸÆ
);

413 
buff
->
d©a
 = (*)(buff + 1);

415 
buff
->
√xt
 = 
öfo
->buff;

416 
öfo
->
buff
 = buff;

419 
ªs
 = 
öfo
->
buff
->
d©a
 + info->
buffU£d
;

421 
öfo
->
buffU£d
 +
Àn
;

423 
	`debug
(
DEBUG_CONNECTION
, "u£d = %d byãs,Ñemaöög = %d byãs\n", 
öfo
->
buffU£d
, info->
buffTŸÆ
 - info->buffUsed);

425  
ªs
;

426 
	}
}

429 
	$hâpInô
()

431 
	`∑r£IpAddr
(&
c⁄fAddr
, 
DEF_CONFIG_ADDR
);

432 
c⁄fP‹t
 = 
DEF_CONFIG_PORT
;

433 
c⁄fRoŸDú
 = 
DEF_CONFIG_ROOT_DIR
;

434 
c⁄fW‹kDú
 = 
DEF_CONFIG_WORK_DIR
;

435 
c⁄fIndexFûe
 = 
DEF_CONFIG_INDEX_FILE
;

436 
c⁄fU£r
 = 
DEF_CONFIG_USER
;

437 
c⁄fPassw‹d
 = 
DEF_CONFIG_PASSWORD
;

438 
c⁄fSessTime
 = 
DEF_CONFIG_SESS_TIME
;

439 
c⁄fPubDú
 = 
DEF_CONFIG_PUB_DIR
;

440 
c⁄fQu™tum
 = 
DEF_CONFIG_QUANTUM
;

441 
c⁄fMessTime
 = 
DEF_CONFIG_MESS_TIME
;

442 
c⁄fMessLimô
 = 
DEF_CONFIG_MESS_LIMIT
;

444 
	`gëR™domByãs
(
cookõSåu˘
.
key
, 16);

445 
	}
}

448 
hâpSëAddªss
(c⁄° *
addrSå
, *
d©a
 
__©åibuã__
 ((
unu£d
)), 
£t_∂ugö_∑ømëî_add⁄
 
add⁄
 __attribute__ ((unused)))

450 i‡(
∑r£IpAddr
(&
c⁄fAddr
, 
addrSå
) < 0) {

451 
îr‹
("övÆid IPáddªss: %s\n", 
addrSå
);

459 
hâpSëP‹t
(c⁄° *
p‹tSå
, *
d©a
 
__©åibuã__
 ((
unu£d
)), 
£t_∂ugö_∑ømëî_add⁄
 
add⁄
 __attribute__ ((unused)))

461 
	gp‹t
;

463 i‡(
°rögToI¡
(&
p‹t
, 
p‹tSå
) < 0) {

464 
îr‹
("övÆidÖ‹ànumbî: %s\n", 
p‹tSå
);

468 i‡(
	gp‹t
 > 65535) {

469 
îr‹
("övÆidÖ‹ànumbî: %u\n", 
p‹t
);

473 
	gc⁄fP‹t
 = 
p‹t
;

479 
hâpSëRoŸDú
(c⁄° *
roŸDú
, *
d©a
 
__©åibuã__
 ((
unu£d
)), 
£t_∂ugö_∑ømëî_add⁄
 
add⁄
 __attribute__ ((unused)))

481 i‡(
checkAbsP©h
(
roŸDú
) < 0) {

482 
îr‹
("roŸ dúe˘‹y (%sËªquúe†™ábsﬁuãÖ©h\n", 
roŸDú
);

486 
	gc⁄fRoŸDú
 = 
mySådup
(
roŸDú
);

491 
hâpSëW‹kDú
(c⁄° *
w‹kDú
, *
d©a
 
__©åibuã__
 ((
unu£d
)), 
£t_∂ugö_∑ømëî_add⁄
 
add⁄
 __attribute__ ((unused)))

493 i‡(
checkAbsP©h
(
w‹kDú
) < 0) {

494 
îr‹
("w‹k dúe˘‹y (%sËªquúe†™ábsﬁuãÖ©h\n", 
w‹kDú
);

498 
	gc⁄fW‹kDú
 = 
mySådup
(
w‹kDú
);

503 
hâpSëIndexFûe
(c⁄° *
ödexFûe
, *
d©a
 
__©åibuã__
 ((
unu£d
)), 
£t_∂ugö_∑ømëî_add⁄
 
add⁄


504 
__©åibuã__
 ((
unu£d
)))

506 
	gc⁄fIndexFûe
 = 
mySådup
(
ödexFûe
);

511 
hâpSëU£r
(c⁄° *
u£r
, *
d©a
 
__©åibuã__
 ((
unu£d
)), 
£t_∂ugö_∑ømëî_add⁄
 
add⁄
 __attribute__ ((unused)))

513 
	gc⁄fU£r
 = 
mySådup
(
u£r
);

518 
hâpSëPassw‹d
(c⁄° *
∑ssw‹d
, *
d©a
 
__©åibuã__
 ((
unu£d
)), 
£t_∂ugö_∑ømëî_add⁄
 
add⁄


519 
__©åibuã__
 ((
unu£d
)))

521 
	gc⁄fPassw‹d
 = 
mySådup
(
∑ssw‹d
);

526 
hâpSëSessTime
(c⁄° *
timeSå
, *
d©a
 
__©åibuã__
 ((
unu£d
)), 
£t_∂ugö_∑ømëî_add⁄
 
add⁄
 __attribute__ ((unused)))

528 
	gtime
;

530 i‡(
°rögToI¡
(&
time
, 
timeSå
) < 0) {

531 
îr‹
("övÆidÅimeout: %s\n", 
timeSå
);

535 i‡(
	gtime
 > 86400) {

536 
îr‹
("övÆidÅimeout: %u\n", 
time
);

540 
	gc⁄fSessTime
 = 
time
;

546 
hâpSëPubDú
(c⁄° *
pubDú
, *
d©a
 
__©åibuã__
 ((
unu£d
)), 
£t_∂ugö_∑ømëî_add⁄
 
add⁄
 __attribute__ ((unused)))

548 
	gc⁄fPubDú
 = 
mySådup
(
pubDú
);

553 
hâpSëQu™tum
(c⁄° *
qu™tumSå
, *
d©a
 
__©åibuã__
 ((
unu£d
)), 
£t_∂ugö_∑ømëî_add⁄
 
add⁄


554 
__©åibuã__
 ((
unu£d
)))

556 
	gqu™tum
;

558 i‡(
°rögToI¡
(&
qu™tum
, 
qu™tumSå
) < 0) {

559 
îr‹
("övÆid qu™tum: %s\n", 
qu™tumSå
);

563 i‡(
	gqu™tum
 > 100) {

564 
îr‹
("övÆid qu™tum: %u\n", 
qu™tum
);

568 
	gc⁄fQu™tum
 = 
qu™tum
;

574 
hâpSëMessTime
(c⁄° *
timeSå
, *
d©a
 
__©åibuã__
 ((
unu£d
)), 
£t_∂ugö_∑ømëî_add⁄
 
add⁄
 __attribute__ ((unused)))

576 
	gtime
;

578 i‡(
°rögToI¡
(&
time
, 
timeSå
) < 0) {

579 
îr‹
("övÆidÅimeout: %s\n", 
timeSå
);

583 i‡(
	gtime
 > 365 * 86400) {

584 
îr‹
("övÆidÅimeout: %u\n", 
time
);

588 
	gc⁄fMessTime
 = 
time
;

594 
hâpSëMessLimô
(c⁄° *
limôSå
, *
d©a
 
__©åibuã__
 ((
unu£d
)), 
£t_∂ugö_∑ømëî_add⁄
 
add⁄


595 
__©åibuã__
 ((
unu£d
)))

597 
	glimô
;

599 i‡(
°rögToI¡
(&
limô
, 
limôSå
) < 0) {

600 
îr‹
("övÆidÜimô: %s\n", 
limôSå
);

604 i‡(
	glimô
 > 1000000) {

605 
îr‹
("övÆidÜimô: %u\n", 
limô
);

609 
	gc⁄fMessLimô
 = 
limô
;

615 
	$hâpSëup
()

617 
i
;

619 i‡(
	`¸óãMaöSockë
(&
c⁄fAddr
, 
c⁄fP‹t
) < 0) {

620 
	`îr‹
("cannot create main socket\n");

624 
numC⁄n
 = 0;

626 
i
 = 0; i < 
MAX_CONN
; i++)

627 
c⁄n
[
i
] = 
NULL
;

629 
numSess
 = 0;

631 
i
 = 0; i < 
MAX_SESS
; i++)

632 
£ss
[
i
] = 
NULL
;

634 
fú°TasMsg
 = 
NULL
;

635 
œ°TasMsg
 = 
NULL
;

637 
numTasMsg
 = 0;

640 
	}
}

643 
	$ªadC⁄n
(
c⁄nInfo
 *
öfo
)

645 
öOutBuff
 *
ªad
 = &
öfo
->read;

646 
ªadLí
;

647 
chunk
 *chunk;

650 i‡(
ªad
->
œ°
 =
NULL
 ||Ñód->
Àn
 =
CHUNK_SIZE
) {

651 
chunk
 = 
	`ÆlocMem
((chunk));

653 
chunk
->
√xt
 = 
NULL
;

655 i‡(
ªad
->
œ°
 !
NULL
)

656 
ªad
->
œ°
->
√xt
 = 
chunk
;

658 
ªad
->
œ°
 = 
chunk
;

660 i‡(
ªad
->
fú°
 =
NULL
)

661 
ªad
->
fú°
 = 
chunk
;

663 
ªad
->
Àn
 = 0;

666 
ªadLí
 = 
	`ªadFûeOs
(
öfo
->
sockId
, &
ªad
->
œ°
->
d©a
[ªad->
Àn
], 
CHUNK_SIZE
 -Ñead->len);

668 i‡(
ªadLí
 < 0) {

669 
	`îr‹
("cannotÑead fromÇetwork connection\n");

673 
	`debug
(
DEBUG_CONNECTION
, "ªad %d byã†‰om c⁄√˘i⁄\n", 
ªadLí
);

675 i‡(
ªadLí
 == 0)

678 
ªad
->
Àn
 +
ªadLí
;

679 
ªad
->
c⁄t
 +
ªadLí
;

681 
	}
}

684 
	$wrôeBuff
(
öOutBuff
 *
wrôe
, c⁄° *
d©a
, 
d©aLí
)

686 
wrôeLí
;

687 
chunk
 *chunk;

689 
d©aLí
 > 0) {

690 i‡(
wrôe
->
œ°
 =
NULL
 || wrôe->
Àn
 =
CHUNK_SIZE
) {

691 
chunk
 = 
	`ÆlocMem
((chunk));

693 
chunk
->
√xt
 = 
NULL
;

695 i‡(
wrôe
->
œ°
 !
NULL
)

696 
wrôe
->
œ°
->
√xt
 = 
chunk
;

698 
wrôe
->
œ°
 = 
chunk
;

700 i‡(
wrôe
->
fú°
 =
NULL
)

701 
wrôe
->
fú°
 = 
chunk
;

703 
wrôe
->
Àn
 = 0;

706 
wrôeLí
 = 
CHUNK_SIZE
 - 
wrôe
->
Àn
;

708 i‡(
d©aLí
 < 
wrôeLí
)

709 
wrôeLí
 = 
d©aLí
;

711 
	`mem˝y
(&
wrôe
->
œ°
->
d©a
[wrôe->
Àn
], d©a, 
wrôeLí
);

713 
wrôe
->
Àn
 +
wrôeLí
;

714 
wrôe
->
c⁄t
 +
wrôeLí
;

716 
d©aLí
 -
wrôeLí
;

717 
d©a
 +
wrôeLí
;

719 
	}
}

722 
	$löeLígth
(c⁄° 
öOutBuff
 *
ªad
)

724 
chunk
 *chunk;

725 
idx
, 
Àn
, 
off
;

726 
cou¡
;

728 
cou¡
 = 0;

730 
chunk
 = 
ªad
->
fú°
; chunk !
NULL
; chunk = chunk->
√xt
) {

731 
Àn
 = (
chunk
 =
ªad
->
œ°
Ë?Ñód->À¿: 
CHUNK_SIZE
;

732 
off
 = (
chunk
 =
ªad
->
fú°
) ?Ñead->off : 0;

734 
idx
 = 
off
; idx < 
Àn
; idx++) {

735 
cou¡
++;

737 i‡(
chunk
->
d©a
[
idx
] == 10)

738  
cou¡
;

743 
	}
}

746 
	$ªadBuff
(
öOutBuff
 *
ªad
, *
d©a
, 
d©aLí
)

748 
ªadLí
;

749 
chunk
 *chunk;

750 
Àn
;

752 
d©aLí
 > 0) {

753 i‡(
ªad
->
fú°
 =
NULL
)

756 
Àn
 = (
ªad
->
fú°
 =ªad->
œ°
Ë?Ñód->À¿: 
CHUNK_SIZE
;

758 
ªadLí
 = 
Àn
 - 
ªad
->
off
;

760 i‡(
d©aLí
 < 
ªadLí
)

761 
ªadLí
 = 
d©aLí
;

763 
	`mem˝y
(
d©a
, &
ªad
->
fú°
->d©a[ªad->
off
], 
ªadLí
);

765 
ªad
->
off
 +
ªadLí
;

766 
ªad
->
c⁄t
 -
ªadLí
;

768 
d©aLí
 -
ªadLí
;

769 
d©a
 +
ªadLí
;

771 i‡(
ªad
->
off
 =
Àn
) {

772 
chunk
 = 
ªad
->
fú°
;

774 
ªad
->
fú°
 = 
chunk
->
√xt
;

776 i‡(
ªad
->
fú°
 =
NULL
)

777 
ªad
->
œ°
 = 
NULL
;

779 
	`‰ìMem
(
chunk
);

781 
ªad
->
off
 = 0;

786 
	}
}

789 
	$wrôeC⁄n
(
c⁄nInfo
 *
öfo
)

791 
öOutBuff
 *
wrôe
 = &
öfo
->wrôe[öfo->
which
];

792 
wrôeLí
;

793 
chunk
 *chunk;

794 
Àn
;

797 i‡(
wrôe
->
fú°
 =
NULL
)

800 
Àn
 = (
wrôe
->
fú°
 =wrôe->
œ°
Ë? wrôe->À¿: 
CHUNK_SIZE
;

802 
wrôeLí
 = 
	`wrôeFûeOs
(
öfo
->
sockId
, &
wrôe
->
fú°
->
d©a
[wrôe->
off
], 
Àn
 - write->off);

804 i‡(
wrôeLí
 < 0) {

805 
	`îr‹
("cannot writeÅoÇetwork connection\n");

809 
	`debug
(
DEBUG_CONNECTION
, "wrŸê%d byã†tÿc⁄√˘i⁄\n", 
wrôeLí
);

811 i‡(
wrôeLí
 == 0)

814 
wrôe
->
off
 +
wrôeLí
;

815 
wrôe
->
c⁄t
 -
wrôeLí
;

817 i‡(
wrôe
->
off
 =
Àn
) {

818 
chunk
 = 
wrôe
->
fú°
;

820 
wrôe
->
fú°
 = 
chunk
->
√xt
;

822 i‡(
wrôe
->
fú°
 =
NULL
)

823 
wrôe
->
œ°
 = 
NULL
;

825 
	`‰ìMem
(
chunk
);

827 
wrôe
->
off
 = 0;

830 
	}
}

833 
	$gëTokí
(**
poöt
)

835 *
loˇlPoöt
 = *
poöt
;

836 *
°¨t
;

838 *
loˇlPoöt
 == 9 || *localPoint == 32)

839 
loˇlPoöt
++;

841 
°¨t
 = 
loˇlPoöt
;

843 *
loˇlPoöt
 != 9 && *localPoint != 32 && *localPoint != 0)

844 
loˇlPoöt
++;

846 i‡(
loˇlPoöt
 =
°¨t
)

847  
NULL
;

849 i‡(*
loˇlPoöt
 != 0)

850 *
loˇlPoöt
++ = 0;

852 *
poöt
 = 
loˇlPoöt
;

854  
°¨t
;

855 
	}
}

858 
	$wrôeBuffSåög
(
öOutBuff
 *
wrôe
, c⁄° *
°rög
)

860 
	`wrôeBuff
(
wrôe
, (c⁄° *)
°rög
, 
	`°æí
(string));

861 
	}
}

864 
	$cookõToSessi⁄
(*
£ssId
, *
cookõ
)

866 
mac1
[16];

867 
mac2
[16];

869 
	`debug
(
DEBUG_SESSION
, "cookõ = %s\n", 
cookõ
);

871 i‡(
	`decHexSåög
((*)&
cookõSåu˘
.
£ssId
, 
cookõ
, 4) < 0) {

872 
	`debug
(
DEBUG_SESSION
, "cannot decode session id\n");

876 i‡(
	`decHexSåög
(
mac1
, 
cookõ
 + 8, 16) < 0) {

877 
	`debug
(
DEBUG_SESSION
, "cannot decodeáuthenticator\n");

881 
	`mem£t
(
mac2
, 0, 16);

882 
	`rc4
(
mac2
, 16, (*)&
cookõSåu˘
, (cookieStruct));

884 i‡(
	`memcmp
(
mac1
, 
mac2
, 16) != 0) {

885 
	`debug
(
DEBUG_SESSION
, "invalidáuthenticator\n");

889 *
£ssId
 = 
cookõSåu˘
.sessId;

891 
	`debug
(
DEBUG_SESSION
, "£ssi⁄ id = %u\n", *
£ssId
);

894 
	}
}

897 
	$£ssi⁄ToCookõ
(
£ssId
)

899 
mac
[16];

900 
buff
[41];

902 
	`debug
(
DEBUG_SESSION
, "£ssi⁄ id = %u\n", 
£ssId
);

904 
cookõSåu˘
.
£ssId
 = sessId;

906 
	`mem£t
(
mac
, 0, 16);

907 
	`rc4
(
mac
, 16, (*)&
cookõSåu˘
, (cookieStruct));

909 
	`ícHexSåög
(
buff
, (*)&
cookõSåu˘
.
£ssId
, 4);

910 
	`ícHexSåög
(
buff
 + 8, 
mac
, 16);

912 
	`debug
(
DEBUG_SESSION
, "cookõ = %s\n", 
buff
);

914  
buff
;

915 
	}
}

918 
	$wrôeBuffI¡
(
öOutBuff
 *
wrôe
, 
vÆ
)

920 
buff
[10];

922 
	`wrôeBuffSåög
(
wrôe
, 
	`ötToSåög
(
buff
, 
vÆ
));

923 
	}
}

926 
	$¥ötBuff
(
öOutBuff
 *
buff
, c⁄° *
f‹m
, ...)

928 
i
 = 0;

929 
°¨t
 = 0;

930 *
°rVÆ
;

931 
ötVÆ
;

933 
va_li°
 
¨gs
;

935 
	`va_°¨t
(
¨gs
, 
f‹m
);

938 
°¨t
 = 
i
;

940 
f‹m
[
i
] != '%' && form[i] != 0)

941 
i
++;

943 i‡(
i
 > 
°¨t
)

944 
	`wrôeBuff
(
buff
, (c⁄° *)(
f‹m
 + 
°¨t
), 
i
 - start);

946 i‡(
f‹m
[
i
] == 0)

949 i‡(
f‹m
[
i
 + 1] == '%')

950 
	`wrôeBuff
(
buff
, (const *)"%", 1);

952 i‡(
f‹m
[
i
 + 1] == 's') {

953 
°rVÆ
 = 
	`va_¨g
(
¨gs
, *);

954 
	`wrôeBuffSåög
(
buff
, 
°rVÆ
);

957 i‡(
f‹m
[
i
 + 1] == 'd') {

958 
ötVÆ
 = 
	`va_¨g
(
¨gs
, );

959 
	`wrôeBuffI¡
(
buff
, 
ötVÆ
);

962 
i
 += 2;

965 
	`va_íd
(
¨gs
);

966 
	}
}

969 
	$îrNoToEºSå
(
îrNo
)

971 
îrNo
) {

996 
	}
}

999 
	$wrôeHódîs
(
c⁄nInfo
 *
öfo
, 
îrNo
)

1001 
	`¥ötBuff
(&
öfo
->
wrôe
[0], "HTTP/1.1 %d %s\r\n", 
îrNo
, 
	`îrNoToEºSå
(errNo));

1003 
	`¥ötBuff
(&
öfo
->
wrôe
[0], "Server: TAS/0.1\r\n");

1005 i‡(
öfo
->
c⁄tTy≥
 !
NULL
)

1006 
	`¥ötBuff
(&
öfo
->
wrôe
[0], "C⁄ã¡-Ty≥: %s\r\n", info->
c⁄tTy≥
);

1008 i‡(
öfo
->
c⁄tLí
 >= 0)

1009 
	`¥ötBuff
(&
öfo
->
wrôe
[0], "C⁄ã¡-Lígth: %d\r\n", info->
c⁄tLí
);

1011 i‡(
öfo
->
√wSess
 !
NULL
)

1012 
	`¥ötBuff
(&
öfo
->
wrôe
[0], "Së-Cookõ: %s\r\n", 
	`£ssi⁄ToCookõ
(öfo->
√wSess
->
id
));

1014 i‡(
îrNo
 == 401)

1015 
	`¥ötBuff
(&
öfo
->
wrôe
[0], "WWW-Authenticate: BasicÑealm=\"TAS\"\r\n");

1017 
	`¥ötBuff
(&
öfo
->
wrôe
[0], "Accept-Ranges:Çone\r\n");

1018 
	`¥ötBuff
(&
öfo
->
wrôe
[0], "Connection: close\r\n");

1020 
	`¥ötBuff
(&
öfo
->
wrôe
[0], "Expires: Thu, 01 Jan 1970 00:00:00 GMT\r\n");

1021 
	`¥ötBuff
(&
öfo
->
wrôe
[0], "Cache-Control:Ço-cache\r\n");

1022 
	`¥ötBuff
(&
öfo
->
wrôe
[0], "Pragma: No-cache\r\n");

1024 
	`¥ötBuff
(&
öfo
->
wrôe
[1], "\r\n");

1027 
	}
}

1030 
	$wrôeEº‹Msg
(
c⁄nInfo
 *
öfo
, 
îrNo
, *
îrMsg
)

1032 i‡(
öfo
->
vîb
 =
NULL
 || 
	`°rcmp
(info->verb, "HEAD") != 0) {

1033 
	`¥ötBuff
(&
öfo
->
wrôe
[2], "<html>\r\n");

1034 
	`¥ötBuff
(&
öfo
->
wrôe
[2], "<hód><tôÀ>Eº‹ %d: %s</tôÀ></hód>\r\n", 
îrNo
, 
	`îrNoToEºSå
(errNo));

1035 
	`¥ötBuff
(&
öfo
->
wrôe
[2], "<body>Eº‹ %d: %†(%s)</body>\r\n", 
îrNo
, 
	`îrNoToEºSå
(errNo),

1036 (
îrMsg
 =
NULL
) ? "Unknown Reason" :ÉrrMsg);

1037 
	`¥ötBuff
(&
öfo
->
wrôe
[2], "</html>\r\n");

1039 
öfo
->
c⁄tLí
 = info->
wrôe
[2].
c⁄t
;

1042 
	`wrôeHódîs
(
öfo
, 
îrNo
);

1044 
öfo
->
°©e
 = 
STATE_DRAIN
;

1045 
	}
}

1048 
	$wrôeEº‹
(
c⁄nInfo
 *
öfo
, 
îrNo
)

1050 
	`wrôeEº‹Msg
(
öfo
, 
îrNo
, 
NULL
);

1051 
	}
}

1054 
	$toLowî
(*
°rög
)

1056 *
°rög
 != 0) {

1057 i‡(*
°rög
 >= 'A' && *string <= 'Z')

1058 *
°rög
 += 32;

1060 
°rög
++;

1062 
	}
}

1065 
	$u√sˇ≥
(*
°rög
)

1067 
i
, 
k
, 
vÆ
;

1069 
	`debug
(
DEBUG_REQUEST
 | 
DEBUG_LUA
, "u√sˇ≥d såög = %s\n", 
°rög
);

1071 
k
 = 0;

1073 
i
 = 0; 
°rög
[i] != 0; i++) {

1074 i‡(
°rög
[
i
] == '%' && string[i + 1] != 0 && string[i + 2] != 0) {

1075 
vÆ
 = 0;

1077 i‡(
	`addHexDigô
(&
vÆ
, 
°rög
[
i
 + 1]) >= 0 &&áddHexDigit(&val, string[i + 2]) >= 0) {

1078 
°rög
[
k
++] = ()
vÆ
;

1079 
i
 += 2;

1084 
°rög
[
k
++] = såög[
i
];

1087 
°rög
[
k
] = 0;

1089 
	`debug
(
DEBUG_REQUEST
 | 
DEBUG_LUA
, "esˇ≥d såög = %s\n", 
°rög
);

1090 
	}
}

1093 
	$£rvi˚C⁄n
(
c⁄nInfo
 *
öfo
)

1095 
i
, 
k
, 
Àn
, 
Àn2
;

1096 *
löe
, *
tmp
, *
tmp2
;

1097 
hâpHódî
 *
hód
;

1098 
fûeBuff
[8192];

1099 **
¨gLi°
;

1100 *
îrMsg
;

1101 
£ssId
;

1102 
£ssInfo
 *
cuºSess
;

1103 
pub
;

1105 
öfo
->
°©e
) {

1106 
STATE_REQUEST
:

1107 
	`debug
(
DEBUG_CONNECTION
, "connection state is STATE_REQUEST\n");

1109 
Àn
 = 
	`löeLígth
(&
öfo
->
ªad
);

1111 i‡(
Àn
 <= 0)

1114 
löe
 = 
	`ÆlocBuff
(
öfo
, 
Àn
);

1116 
	`ªadBuff
(&
öfo
->
ªad
, (*)
löe
, 
Àn
);

1117 
	`chomp
(
löe
, 
Àn
);

1119 
	`debug
(
DEBUG_REQUEST
, "ªque°Üöêi†'%s'\n", 
löe
);

1121 
öfo
->
vîb
 = 
	`gëTokí
(&
löe
);

1122 
tmp
 = 
	`gëTokí
(&
löe
);

1123 
öfo
->
¥Ÿo
 = 
	`gëTokí
(&
löe
);

1125 
	`debug
(
DEBUG_REQUEST
, "vîb = %s, urò%s,ÖrŸocﬁ = %s\n", (
öfo
->
vîb
 =
NULL
) ? "none" : info->verb,

1126 (
tmp
 =
NULL
Ë? "n⁄e" :Åmp, (
öfo
->
¥Ÿo
 == NULL) ? "none" : info->proto);

1128 i‡(
öfo
->
vîb
 =
NULL
 || 
tmp
 =NULL || info->
¥Ÿo
 == NULL) {

1129 
	`îr‹
("ªque° wôhouàvîb (%s), URI (%s), o∏¥Ÿocﬁ (%s)\n", (
öfo
->
vîb
 =
NULL
) ? "none" : info->verb,

1130 (
tmp
 =
NULL
Ë? "n⁄e" :Åmp, (
öfo
->
¥Ÿo
 == NULL) ? "none" : info->proto);

1131 
	`wrôeEº‹
(
öfo
, 400);

1135 i‡(
	`°rcmp
(
öfo
->
vîb
, "GET") != 0 && strcmp(info->verb, "HEAD") != 0) {

1136 
	`îr‹
("unsuµ‹ãd vîb: %s\n", 
öfo
->
vîb
);

1137 
	`wrôeEº‹
(
öfo
, 501);

1141 i‡(
	`°rcmp
(
öfo
->
¥Ÿo
, "HTTP/1.1") != 0) {

1142 
	`îr‹
("unsuµ‹ãdÖrŸocﬁ vîsi⁄: %s\n", 
öfo
->
¥Ÿo
);

1143 
	`wrôeEº‹
(
öfo
, 505);

1147 i‡(
	`°∫cmp
(
tmp
, "http://", 7) == 0) {

1148 
tmp
 += 7;

1150 
öfo
->
ho°
 = 
tmp
;

1152 *
tmp
 != ':' && *tmp != '/' && *tmp != 0)

1153 
tmp
++;

1155 i‡(*
tmp
 == 0) {

1156 
	`îr‹
("URI hostÖart doesÇotÉnd in ':' or '/'\n");

1157 
	`wrôeEº‹
(
öfo
, 400);

1161 i‡(*
tmp
 == ':') {

1162 *
tmp
++ = 0;

1164 *
tmp
 != '/' && *tmp != 0)

1165 
tmp
++;

1167 i‡(*
tmp
 == 0) {

1168 
	`îr‹
("URIÖortÖart doesÇotÉnd in '/'\n");

1169 
	`wrôeEº‹
(
öfo
, 400);

1173 
tmp
++;

1177 *
tmp
++ = 0;

1179 
	`debug
(
DEBUG_REQUEST
, "ho° = %s\n", 
öfo
->
ho°
);

1181 
öfo
->
∑th
 = 
tmp
;

1184 i‡(
tmp
[0] == '/')

1185 
öfo
->
∑th
 = ++
tmp
;

1188 
	`îr‹
("URIÖathÖart isÇotánábsoluteÖath\n");

1189 
	`wrôeEº‹
(
öfo
, 400);

1193 *
tmp
 != '?' && *tmp != 0) {

1194 i‡(
tmp
[0] == '.' &&Åmp[1] == '.') {

1195 
	`îr‹
("URIÖathÖart contains '..'\n");

1196 
	`wrôeEº‹
(
öfo
, 400);

1200 
tmp
++;

1203 i‡(*
tmp
 == '?') {

1204 *
tmp
++ = 0;

1205 
öfo
->
∑ø
 = 
tmp
;

1208 
	`debug
(
DEBUG_REQUEST
, "∑th = %s,Ö¨amëî†%s\n", 
öfo
->
∑th
, (öfo->
∑ø
 =
NULL
) ? "none" : info->para);

1210 
öfo
->
°©e
 = 
STATE_HEADERS
;

1213 
STATE_HEADERS
:

1214 
	`debug
(
DEBUG_CONNECTION
, "connection state is STATE_HEADERS\n");

1216 
Àn
 = 
	`löeLígth
(&
öfo
->
ªad
);

1218 i‡(
Àn
 <= 0)

1221 
löe
 = 
	`ÆlocBuff
(
öfo
, 
Àn
);

1223 
	`ªadBuff
(&
öfo
->
ªad
, (*)
löe
, 
Àn
);

1224 
	`chomp
(
löe
, 
Àn
);

1226 
	`debug
(
DEBUG_REQUEST
, "hódîÜöêi†'%s'\n", 
löe
);

1228 i‡(*
löe
 == 0) {

1229 i‡(
öfo
->
ho°
 =
NULL
)

1230 
hód
 = 
öfo
->
fú°Hód
; hód !
NULL
; hód = hód->
√xt
)

1231 i‡(
	`°rcmp
(
hód
->
«me
, "host") == 0)

1232 
öfo
->
ho°
 = 
hód
->
vÆue
;

1234 
	`debug
(
DEBUG_REQUEST
, "œ° hódîÜöe, ho° = %s\n", (
öfo
->
ho°
 =
NULL
) ? "none" : info->host);

1236 
öfo
->
°©e
 = 
STATE_RESPONSE
;

1240 i‡(*
löe
 == 9 || *line == 32) {

1241 
	`debug
(
DEBUG_REQUEST
, "continued headerÜine\n");

1243 i‡(
öfo
->
œ°Hód
 =
NULL
) {

1244 
	`îr‹
("noÖrevious headerÅo continue\n");

1245 
	`wrôeEº‹
(
öfo
, 400);

1249 
Àn2
 = 
	`°æí
(
öfo
->
œ°Hód
->
vÆue
);

1251 
tmp
 = 
	`ÆlocBuff
(
öfo
, 
Àn2
 + 
Àn
);

1253 
	`mem˝y
(
tmp
, 
öfo
->
œ°Hód
->
vÆue
, 
Àn2
);

1254 
	`mem˝y
(
tmp
 + 
Àn2
, 
löe
, 
Àn
);

1256 
öfo
->
œ°Hód
->
vÆue
 = 
tmp
;

1258 
	`debug
(
DEBUG_REQUEST
, "upd©ed hódî,Çamê%s, vÆuê'%s'\n", 
öfo
->
œ°Hód
->
«me
, info->œ°Hód->
vÆue
);

1262 
tmp
 = 
	`gëTokí
(&
löe
);

1264 i‡(
tmp
 =
NULL
) {

1265 
	`îr‹
("header withoutÇame\n");

1266 
	`wrôeEº‹
(
öfo
, 400);

1270 
i
 = 0; 
tmp
[i] != ':' &&Åmp[i] != 0; i++);

1272 i‡(
tmp
[
i
] != ':' ||Åmp[i + 1] != 0) {

1273 
	`îr‹
("headerÇame doesÇotÉnd in ':'\n");

1274 
	`wrôeEº‹
(
öfo
, 400);

1278 
tmp
[
i
] = 0;

1280 
	`toLowî
(
tmp
);

1282 
hód
 = 
	`ÆlocBuff
(
öfo
, (
hâpHódî
));

1284 
hód
->
√xt
 = 
NULL
;

1285 
hód
->
«me
 = 
tmp
;

1286 
hód
->
vÆue
 = 
löe
;

1288 i‡(
öfo
->
œ°Hód
 =
NULL
)

1289 
öfo
->
fú°Hód
 = 
hód
;

1292 
öfo
->
œ°Hód
->
√xt
 = 
hód
;

1294 
öfo
->
œ°Hód
 = 
hód
;

1296 
	`debug
(
DEBUG_REQUEST
, "√w hódî,Çamê%s, vÆuê'%s'\n", 
öfo
->
œ°Hód
->
«me
, info->œ°Hód->
vÆue
);

1301 
STATE_RESPONSE
:

1302 
	`debug
(
DEBUG_CONNECTION
, "connection state is STATE_RESPONSE\n");

1304 
	`u√sˇ≥
(
öfo
->
∑th
);

1306 
Àn
 = 
	`°æí
(
c⁄fPubDú
);

1308 
pub
 = (
Àn
 > 0 && 
	`°∫cmp
(
öfo
->
∑th
, 
c⁄fPubDú
,Üen) == 0 && (info->path[len] == 0 || info->path[len] == '/'));

1310 
	`debug
(
DEBUG_REQUEST
, "%†∑th\n", (
pub
 == 0) ? "protected" : "public");

1312 i‡(
pub
 =0 && (
c⁄fU£r
 !
NULL
 || 
c⁄fPassw‹d
 != NULL)) {

1313 
	`debug
(
DEBUG_REQUEST
, "authenticationÑequired\n");

1315 
hód
 = 
öfo
->
fú°Hód
; hód !
NULL
; hód = hód->
√xt
)

1316 i‡(
	`memcmp
(
hód
->
«me
, "authorization", 14) == 0)

1319 i‡(
hód
 =
NULL
) {

1320 
	`debug
(
DEBUG_REQUEST
, "noáuthorization headerÖresent\n");

1322 
	`wrôeEº‹
(
öfo
, 401);

1326 
tmp
 = 
	`gëTokí
(&
hód
->
vÆue
);

1328 i‡(
tmp
 =
NULL
 || 
	`°rcmp
(tmp, "Basic") != 0) {

1329 
	`îr‹
("\"Basic\"áuthorization infoÉxpected\n");

1330 
	`wrôeEº‹
(
öfo
, 401);

1334 
tmp
 = 
	`gëTokí
(&
hód
->
vÆue
);

1336 i‡(
tmp
 =
NULL
) {

1337 
	`îr‹
("authorization infoÜacks base-64Éncoded data\n");

1338 
	`wrôeEº‹
(
öfo
, 401);

1342 
tmp2
 = 
	`ÆlocBuff
(
öfo
, 
	`°æí
(
tmp
) * 3 / 4 + 1);

1344 i‡(
	`decBa£64
((*)
tmp2
, 
tmp
) < 0) {

1345 
	`îr‹
("base-64 decode failed\n");

1346 
	`wrôeEº‹
(
öfo
, 401);

1350 
i
 = 0; 
tmp2
[i] != ':' &&Åmp2[i] != 0; i++);

1352 i‡(
tmp2
[
i
] == 0) {

1353 
	`îr‹
("authorization infoÜacks ':'\n");

1354 
	`wrôeEº‹
(
öfo
, 401);

1358 
tmp2
[
i
++] = 0;

1360 
	`debug
(
DEBUG_REQUEST
, "u£∏%s,Öassw‹d = %s\n", 
tmp2
,Åmp2 + 
i
);

1362 i‡((
c⁄fU£r
 !
NULL
 && 
	`°rcmp
(c⁄fU£r, 
tmp2
Ë!0Ë|| (
c⁄fPassw‹d
 !NULL && såcmp(c⁄fPassw‹d,Åmp2 + 
i
) != 0)) {

1363 
	`îr‹
("useráuthentication failed\n");

1364 
	`wrôeEº‹
(
öfo
, 401);

1369 i‡(
	`isDúe˘‹y
(
c⁄fRoŸDú
, 
öfo
->
∑th
) > 0) {

1370 
	`debug
(
DEBUG_REQUEST
, "path isá directory\n");

1372 
tmp
 = 
	`fuŒP©h
(
öfo
->
∑th
, 
c⁄fIndexFûe
);

1374 
	`debug
(
DEBUG_REQUEST
, "upd©edÖ©h = %s\n", 
tmp
);

1376 
öfo
->
∑th
 = 
	`ÆlocBuff
(öfo, 
	`°æí
(
tmp
) + 1);

1377 
	`°r˝y
(
öfo
->
∑th
, 
tmp
);

1379 
	`‰ìMem
(
tmp
);

1382 i‡(
	`›íFûe
(&
öfo
->
fûeId
, 
c⁄fRoŸDú
, info->
∑th
) < 0) {

1383 
	`îr‹
("ˇ¬Ÿ födÑesour˚ %†öÑoŸ dúe˘‹y %s\n", 
öfo
->
∑th
, 
c⁄fRoŸDú
);

1384 
	`wrôeEº‹
(
öfo
, 404);

1388 
i
 = 0; 
extM≠
[i].
ext
 !
NULL
; i++) {

1389 
Àn
 = 
	`°æí
(
extM≠
[
i
].
ext
);

1390 
Àn2
 = 
	`°æí
(
öfo
->
∑th
);

1392 i‡(
Àn2
 >
Àn
 && 
	`memcmp
(
öfo
->
∑th
 +Üí2 -Üí, 
extM≠
[
i
].
ext
,Üen) == 0)

1396 i‡(
extM≠
[
i
].
ext
 !
NULL
) {

1397 
öfo
->
°©e
 = 
extM≠
[
i
].state;

1398 
öfo
->
c⁄tTy≥
 = 
extM≠
[
i
].
ty≥
;

1400 
	`debug
(
DEBUG_REQUEST
, "exãnsi⁄Ñecognized,Çexà°©ê%d, c⁄ã¡Åy≥ = %s\n", 
öfo
->
°©e
, info->
c⁄tTy≥
);

1404 
öfo
->
°©e
 = 
STATE_FILE
;

1406 i‡(
	`°rcmp
(
öfo
->
vîb
, "HEAD") == 0) {

1407 
	`˛o£Fûe
(&
öfo
->
fûeId
);

1409 
	`wrôeHódîs
(
öfo
, 200);

1411 
öfo
->
°©e
 = 
STATE_DRAIN
;

1416 
STATE_FILE
:

1417 
	`debug
(
DEBUG_CONNECTION
, "connection state is STATE_FILE\n");

1420 
Àn
 = 
	`ªadFûeOs
(&
öfo
->
fûeId
, 
fûeBuff
, (fileBuff));

1422 
	`debug
(
DEBUG_CONNECTION
, "ªad %d byã†‰om fûe\n", 
Àn
);

1424 i‡(
Àn
 <= 0) {

1425 i‡(
Àn
 < 0) {

1426 
	`˛o£Fûe
(&
öfo
->
fûeId
);

1428 
öfo
->
c⁄tLí
 = info->
wrôe
[2].
c⁄t
;

1429 
	`wrôeHódîs
(
öfo
, 200);

1431 
öfo
->
°©e
 = 
STATE_DRAIN
;

1437 
	`wrôeBuff
(&
öfo
->
wrôe
[2], 
fûeBuff
, 
Àn
);

1442 
STATE_LSP
:

1443 
	`debug
(
DEBUG_CONNECTION
, "connection state is STATE_LSP\n");

1445 
tmp
 = 
	`ÆlocBuff
(
öfo
, 
	`°æí
(öfo->
∑th
) + 4 + 1);

1446 
	`£tExãnsi⁄
(
tmp
, 
öfo
->
∑th
, ".lua");

1448 
	`debug
(
DEBUG_LUA
, "lu®fûê«mê%s\n", 
tmp
);

1450 i‡(
	`l•ToLua
(
c⁄fRoŸDú
, 
öfo
->
∑th
, 
c⁄fW‹kDú
, 
tmp
) < 0) {

1451 
	`îr‹
("ˇ¬ŸÅønsf‹m %†ötÿ%s\n", 
öfo
->
∑th
, 
tmp
);

1452 
	`wrôeEº‹
(
öfo
, 500);

1456 
tmp2
 = 
	`ÆlocBuff
(
öfo
, 
	`°æí
(öfo->
∑th
) + 4 + 1);

1457 
	`£tExãnsi⁄
(
tmp2
, 
öfo
->
∑th
, ".lex");

1459 
	`debug
(
DEBUG_LUA
, "Àx fûê«mê%s\n", 
tmp2
);

1461 i‡(
	`luaToLex
(&
îrMsg
, 
c⁄fW‹kDú
, 
tmp
, 
tmp2
) < 0) {

1462 
	`îr‹
("ˇ¬ŸÅønsf‹m %†ötÿ%s\n", 
tmp
, 
tmp2
);

1463 
	`wrôeEº‹Msg
(
öfo
, 500, 
îrMsg
);

1465 i‡(
îrMsg
 !
NULL
)

1466 
	`‰ìMem
(
îrMsg
);

1471 
tmp
 = 
öfo
->
∑ø
;

1473 i‡(
tmp
 !
NULL
) {

1474 
Àn
 = 3 * (*);

1476 
i
 = 0; 
tmp
[i] != 0; i++) {

1477 i‡(
tmp
[
i
] == '+')

1478 
tmp
[
i
] = ' ';

1480 i‡(
tmp
[
i
] == '=' ||Åmp[i] == '&')

1481 
Àn
 += (*);

1484 
¨gLi°
 = 
	`ÆlocBuff
(
öfo
, 
Àn
);

1486 
i
 = 0;

1487 
k
 = 0;

1489 
tmp
[
i
] != 0) {

1490 
¨gLi°
[
k
++] = 
tmp
 + 
i
;

1492 
tmp
[
i
] != 0 &&Åmp[i] != '=')

1493 
i
++;

1495 i‡(
tmp
[
i
] == 0) {

1496 
	`îr‹
("end ofÖarameters whileÜooking for '='\n");

1497 
	`wrôeEº‹
(
öfo
, 400);

1501 
tmp
[
i
++] = 0;

1503 
	`debug
(
DEBUG_LUA
, "∑ømëîÇamê'%s'\n", 
¨gLi°
[
k
 - 1]);

1505 
¨gLi°
[
k
++] = 
tmp
 + 
i
;

1507 
tmp
[
i
] != 0 &&Åmp[i] != '&')

1508 
i
++;

1510 i‡(
tmp
[
i
] != 0)

1511 
tmp
[
i
++] = 0;

1513 
	`debug
(
DEBUG_LUA
, "∑ømëî vÆuê'%s'\n", 
¨gLi°
[
k
 - 1]);

1516 
i
 = 0; i < 
k
; i++)

1517 
	`u√sˇ≥
(
¨gLi°
[
i
]);

1519 
¨gLi°
[
k
++] = 
NULL
;

1520 
¨gLi°
[
k
++] = 
NULL
;

1524 
¨gLi°
 = 
NULL
;

1526 
cuºSess
 = 
NULL
;

1528 
hód
 = 
öfo
->
fú°Hód
; hód !
NULL
; hód = hód->
√xt
)

1529 i‡(
	`memcmp
(
hód
->
«me
, "cookõ", 7Ë=0 && 
	`cookõToSessi⁄
(&
£ssId
, hód->
vÆue
) >= 0)

1532 i‡(
hód
 !
NULL
) {

1533 
	`debug
(
DEBUG_SESSION
, "looking forÉxisting session\n");

1535 
i
 = 0; i < 
numSess
 && 
£ss
[i]->
id
 !
£ssId
; i++);

1537 i‡(
i
 < 
numSess
) {

1538 
	`debug
(
DEBUG_SESSION
, "existing session found\n");

1540 
cuºSess
 = 
£ss
[
i
];

1542 
	`os_now
(&
cuºSess
->
time
);

1546 i‡(
cuºSess
 =
NULL
) {

1547 
	`debug
(
DEBUG_SESSION
, "noÉxisting session\n");

1549 
öfo
->
√wSess
 = 
	`√wSessInfo
();

1550 
cuºSess
 = 
öfo
->
√wSess
;

1553 i‡(
	`runLua
(&
îrMsg
, 
öfo
, 
c⁄fW‹kDú
, 
tmp2
, 
¨gLi°
, &
cuºSess
->
d©a
) < 0) {

1554 
	`îr‹
("ˇ¬ŸÑu¿%s\n", 
tmp2
);

1556 i‡(
öfo
->
√wSess
 !
NULL
) {

1557 
	`debug
(
DEBUG_SESSION
, "cleaning upÇewly created session\n");

1559 i‡(
öfo
->
√wSess
->
d©a
 !
NULL
) {

1560 
	`debug
(
DEBUG_SESSION
, "freeingÜua context\n");

1562 
	`‰ìLuaSessi⁄
(
öfo
->
√wSess
->
d©a
);

1565 
	`‰ìMem
(
öfo
->
√wSess
);

1566 
öfo
->
√wSess
 = 
NULL
;

1569 
	`debug
(
DEBUG_SESSION
, "purging io buffer\n");

1571 
	`‰ìInOutBuff
(&
öfo
->
wrôe
[1]);

1572 
	`‰ìInOutBuff
(&
öfo
->
wrôe
[2]);

1574 
	`öôInOutBuff
(&
öfo
->
wrôe
[1]);

1575 
	`öôInOutBuff
(&
öfo
->
wrôe
[2]);

1577 
	`wrôeEº‹Msg
(
öfo
, 500, 
îrMsg
);

1579 i‡(
îrMsg
 !
NULL
)

1580 
	`‰ìMem
(
îrMsg
);

1585 
	`debug
(
DEBUG_SESSION
, "lua code successfullyÉxecuted\n");

1587 i‡(
öfo
->
√wSess
 !
NULL
) {

1588 i‡(
öfo
->
√wSess
->
d©a
 =
NULL
) {

1589 
	`debug
(
DEBUG_SESSION
, "no sessionÑequired\n");

1591 
	`‰ìMem
(
öfo
->
√wSess
);

1592 
öfo
->
√wSess
 = 
NULL
;

1596 i‡(
numSess
 =
MAX_SESS
) {

1597 
	`îr‹
("£ssi⁄ÜimôÑóched, dñëögÜó°Ñe˚¡ly u£d sessi⁄ %d\n", 
£ss
[0]->
id
);

1598 
	`‰ìLuaSessi⁄
(
£ss
[0]->
d©a
);

1599 
	`‰ìMem
(
£ss
[0]);

1601 
i
 = 0; i < 
MAX_SESS
 - 1; i++)

1602 
£ss
[
i
] = sess[i + 1];

1604 
numSess
--;

1607 
£ss
[
numSess
++] = 
öfo
->
√wSess
;

1609 
	`debug
(
DEBUG_SESSION
, "sessionádded\n");

1614 
	`debug
(
DEBUG_SESSION
, "aging sessions\n");

1616 
i
 = 0; 
£ss
[i]->
id
 !
cuºSess
->id; i++);

1618 
i
 < 
numSess
 - 1) {

1619 
£ss
[
i
] = sess[i + 1];

1620 
i
++;

1623 i‡(
cuºSess
->
d©a
 =
NULL
) {

1624 
	`debug
(
DEBUG_SESSION
, "sessionÇotÑequiredányÜonger\n");

1626 
£ss
[
i
] = 
NULL
;

1627 
	`‰ìMem
(
cuºSess
);

1629 
numSess
--;

1633 
	`debug
(
DEBUG_SESSION
, "session stored\n");

1635 
£ss
[
i
] = 
cuºSess
;

1639 
öfo
->
c⁄tLí
 = info->
wrôe
[2].
c⁄t
;

1640 
	`wrôeHódîs
(
öfo
, 200);

1642 
öfo
->
°©e
 = 
STATE_DRAIN
;

1645 
STATE_DRAIN
:

1646 
	`debug
(
DEBUG_CONNECTION
, "connection state is STATE_DRAIN\n");

1647 
	`debug
(
DEBUG_CONNECTION
, "which = %d\n", 
öfo
->
which
);

1649 i‡(
öfo
->
wrôe
[öfo->
which
].
fú°
 =
NULL
)

1650 
öfo
->
which
++;

1652 i‡(
öfo
->
which
 == 3)

1659 
	}
}

1662 
	$hâpSîvi˚
(
‰eq
)

1664 
fûeId
 *
sockId
;

1665 
ùAddr
 *
addr
;

1666 
i
, 
k
;

1667 #ifde‡
TAS_BLOCK


1668 
fûeId
 *
waôIds
[
MAX_CONN
];

1669 *
waôFœgs
[
MAX_CONN
];

1671 
mi¸o
, 
mi¸oLimô
;

1672 
èsMesßge
 *
èsMsg
;

1674 
mi¸o
 = 
	`gëMi¸o
();

1676 #ifde‡
TAS_BLOCK


1677 
i
 = 0; i < 
numC⁄n
; i++) {

1678 
waôIds
[
i
] = 
c⁄n
[i]->
sockId
;

1679 
waôFœgs
[
i
] = &
c⁄n
[i]->
Êags
;

1681 
c⁄n
[
i
]->
Êags
 = 
FLAG_READ
;

1683 i‡(
c⁄n
[
i
]->
fú°Wrôe
 !
NULL
)

1684 
c⁄n
[
i
]->
Êags
 |
FLAG_WRITE
;

1687 i‡(
	`waôF‹Sockës
(
waôIds
, 
waôFœgs
, 
numC⁄n
) < 0)

1691 
numC⁄n
 < 
MAX_CONN
) {

1692 i‡(
	`ac˚±C⁄n
(&
sockId
, &
addr
) < 0)

1695 
c⁄n
[
numC⁄n
++] = 
	`√wC⁄nInfo
(
sockId
, 
addr
);

1698 
i
 = 0;

1700 
i
 < 
numC⁄n
) {

1701 i‡(((
c⁄n
[
i
]->
Êags
 & 
FLAG_READ
Ë!0 && 
	`ªadC⁄n
(conn[i]) < 0)

1702 || ((
c⁄n
[
i
]->
Êags
 & 
FLAG_WRITE
Ë!0 && 
	`wrôeC⁄n
(c⁄n[i]Ë< 0Ë|| 
	`£rvi˚C⁄n
(conn[i]) < 0) {

1703 
	`˛o£Fûe
(
c⁄n
[
i
]->
sockId
);

1705 
	`‰ìC⁄nInfo
(
c⁄n
[
i
]);

1707 
k
 = 
i
; k < 
numC⁄n
 - 1; k++)

1708 
c⁄n
[
k
] = conn[k + 1];

1710 
c⁄n
[
k
] = 
NULL
;

1712 
numC⁄n
--;

1716 
i
++;

1719 
numSess
 > 0 && 
c⁄fSessTime
 > 0 && 
	`timedOut
(&
£ss
[0]->
time
, confSessTime) >= 0) {

1720 
	`îr‹
("£ssi⁄ %dÅimed out\n", 
£ss
[0]->
id
);

1722 
	`‰ìLuaSessi⁄
(
£ss
[0]->
d©a
);

1724 
	`‰ìMem
(
£ss
[0]);

1726 
i
 = 0; i < 
numSess
 - 1; i++)

1727 
£ss
[
i
] = sess[i + 1];

1729 
numSess
--;

1731 
	`debug
(
DEBUG_SESSION
, "%d sessi⁄†À·\n", 
numSess
);

1734 
numTasMsg
 > 0 && 
c⁄fMessTime
 > 0 && 
	`timedOut
(&
fú°TasMsg
->
time
, confMessTime) >= 0) {

1735 
èsMsg
 = 
fú°TasMsg
;

1737 
	`debug
(
DEBUG_MESSAGE
, "mesßgêtimed out, sîvi˚ ='%s', såög = '%s', from = %s\n", 
èsMsg
->
£rvi˚
,ÅasMsg->
°rög
,

1738 
èsMsg
->
‰om
);

1740 
fú°TasMsg
 = fú°TasMsg->
√xt
;

1742 i‡(
œ°TasMsg
 =
èsMsg
)

1743 
œ°TasMsg
 = 
NULL
;

1745 
	`‰ìMem
(
èsMsg
->
£rvi˚
);

1746 
	`‰ìMem
(
èsMsg
->
°rög
);

1747 
	`‰ìMem
(
èsMsg
->
‰om
);

1748 
	`‰ìMem
(
èsMsg
);

1750 
numTasMsg
--;

1752 
	`debug
(
DEBUG_MESSAGE
, "%d mesßge†À·\n", 
numTasMsg
);

1755 
mi¸o
 = 
	`gëMi¸o
() - micro;

1756 
mi¸oLimô
 = (10000 * 
c⁄fQu™tum
Ë/ 
‰eq
;

1758 
	`debug
(
DEBUG_QUANTUM
, "£rvi˚Åimê%u us,Üimô = %u us\n", 
mi¸o
, 
mi¸oLimô
);

1760 i‡(
mi¸oLimô
 > 0 && 
mi¸o
 > microLimit)

1761 
	`îr‹
("£rvi˚ÅookÜ⁄gîÅh™Éx≥˘ed (%u us,Üimô i†%u us)\n", 
mi¸o
, 
mi¸oLimô
);

1764 
	}
}

1767 
	$hâpShutdown
()

1769 
	`˛o£MaöSockë
();

1770 
	}
}

1773 
	$hâpAddTasMesßge
(c⁄° *
£rvi˚
, c⁄° *
°rög
, c⁄° *
‰om
)

1775 
èsMesßge
 *
msg
;

1777 
	`debug
(
DEBUG_MESSAGE
, "addög mesßge, sîvi˚ = %s, såög = %s, from = %s\n", 
£rvi˚
, 
°rög
, 
‰om
);

1779 
msg
 = 
	`ÆlocMem
((
èsMesßge
));

1781 
msg
->
√xt
 = 
NULL
;

1783 
	`os_now
(&
msg
->
time
);

1785 
msg
->
£rvi˚
 = 
	`mySådup
(service);

1786 
msg
->
°rög
 = 
	`mySådup
(string);

1787 
msg
->
‰om
 = 
	`mySådup
(from);

1789 i‡(
œ°TasMsg
 !
NULL
)

1790 
œ°TasMsg
->
√xt
 = 
msg
;

1793 
fú°TasMsg
 = 
msg
;

1795 
œ°TasMsg
 = 
msg
;

1797 
numTasMsg
++;

1799 
	`debug
(
DEBUG_MESSAGE
, "√wÇumbî o‡mesßges: %d\n", 
numTasMsg
);

1800 
	`debug
(
DEBUG_MESSAGE
, "limiting message queueÜength\n");

1802 
c⁄fMessLimô
 > 0 && 
numTasMsg
 > confMessLimit) {

1803 
msg
 = 
fú°TasMsg
;

1805 
	`debug
(
DEBUG_MESSAGE
, "mesßgêªmoved, sîvi˚ ='%s', såög = '%s', from = %s\n", 
msg
->
£rvi˚
, msg->
°rög
, msg->
‰om
);

1807 
fú°TasMsg
 = fú°TasMsg->
√xt
;

1809 i‡(
œ°TasMsg
 =
msg
)

1810 
œ°TasMsg
 = 
NULL
;

1812 
	`‰ìMem
(
msg
->
£rvi˚
);

1813 
	`‰ìMem
(
msg
->
°rög
);

1814 
	`‰ìMem
(
msg
->
‰om
);

1815 
	`‰ìMem
(
msg
);

1817 
numTasMsg
--;

1820 
	`debug
(
DEBUG_MESSAGE
, "%d mesßge†À·\n", 
numTasMsg
);

1821 
	}
}

1824 
	$hâpGëTasMesßge
(c⁄° *
£rvi˚
, **
°rög
, **
‰om
)

1826 
èsMesßge
 *
msg
, *
¥evMsg
;

1828 
	`debug
(
DEBUG_MESSAGE
, "gëtög mesßge, sîvi˚ = %s\n", 
£rvi˚
);

1830 
¥evMsg
 = 
NULL
;

1832 
	`debug
(
DEBUG_MESSAGE
, "walkingÅhrough message queue\n");

1834 
msg
 = 
fú°TasMsg
; msg !
NULL
; msg = msg->
√xt
) {

1835 
	`debug
(
DEBUG_MESSAGE
, " sîvi˚ = %s, såög = %s\n", 
msg
->
£rvi˚
, msg->
°rög
);

1837 i‡(
	`°rcmp
(
msg
->
£rvi˚
, service) == 0)

1840 
¥evMsg
 = 
msg
;

1843 
	`debug
(
DEBUG_MESSAGE
, "walk finished\n");

1845 i‡(
msg
 =
NULL
) {

1846 
	`debug
(
DEBUG_MESSAGE
, "no message found\n");

1851 i‡(
msg
 =
fú°TasMsg
)

1852 
fú°TasMsg
 = 
msg
->
√xt
;

1855 
¥evMsg
->
√xt
 = 
msg
->next;

1857 i‡(
msg
 =
œ°TasMsg
)

1858 
œ°TasMsg
 = 
¥evMsg
;

1860 *
°rög
 = 
msg
->string;

1861 *
‰om
 = 
msg
->from;

1863 
	`‰ìMem
(
msg
->
£rvi˚
);

1864 
	`‰ìMem
(
msg
);

1866 
numTasMsg
--;

1868 
	`debug
(
DEBUG_MESSAGE
, "%d mesßge†À·\n", 
numTasMsg
);

1869 
	`debug
(
DEBUG_MESSAGE
, "ªtu∫ög '%s'Ñe˚ived from %s\n", *
°rög
, *
‰om
);

1872 
	}
}

	@lib/tas/src/http.h

43 
	~"ﬁ§d_∂ugö.h
"

45 
	#CHUNK_SIZE
 1024

	)

47 
	schunk
 {

48 
chunk
 *
	m√xt
;

49 
	md©a
[
CHUNK_SIZE
];

52 
	söOutBuff
 {

53 
	moff
, 
	mÀn
;

54 
	mc⁄t
;

55 
chunk
 *
	mfú°
, *
	mœ°
;

58 
	#BUFF_SIZE
 1024

	)

60 
	sw‹kBuff
 {

61 
w‹kBuff
 *
	m√xt
;

62 *
	md©a
;

65 
	shâpHódî
 {

66 
hâpHódî
 *
	m√xt
;

67 *
	m«me
;

68 *
	mvÆue
;

71 
	#STATE_REQUEST
 0

	)

72 
	#STATE_HEADERS
 1

	)

73 
	#STATE_RESPONSE
 2

	)

74 
	#STATE_FILE
 3

	)

75 
	#STATE_LSP
 4

	)

76 
	#STATE_DRAIN
 5

	)

78 
	sc⁄nInfo
 {

79 
fûeId
 *
	msockId
;

80 
ùAddr
 *
	maddr
;

82 
	m°©e
;

84 
öOutBuff
 
	mªad
;

85 
öOutBuff
 
	mwrôe
[3];

87 
	mwhich
;

89 
	mÊags
;

91 
w‹kBuff
 *
	mbuff
;

93 
	mbuffU£d
;

94 
	mbuffTŸÆ
;

96 
hâpHódî
 *
	mfú°Hód
, *
	mœ°Hód
;

98 *
	mvîb
;

99 *
	mho°
;

100 *
	m∑th
;

101 *
	m∑ø
;

102 *
	m¥Ÿo
;

104 c⁄° *
	mc⁄tTy≥
;

105 
	mc⁄tLí
;

107 
£ssInfo
 *
	m√wSess
;

109 
fûeId
 
	mfûeId
;

111 *
	mauthU£r
;

112 *
	mauthPass
;

115 
hâpInô
();

117 
hâpSëAddªss
(c⁄° *
addrSå
, *
d©a
, 
£t_∂ugö_∑ømëî_add⁄
 
add⁄
);

118 
hâpSëP‹t
(c⁄° *
p‹tSå
, *
d©a
, 
£t_∂ugö_∑ømëî_add⁄
 
add⁄
);

119 
hâpSëRoŸDú
(c⁄° *
roŸDú
, *
d©a
, 
£t_∂ugö_∑ømëî_add⁄
 
add⁄
);

120 
hâpSëW‹kDú
(c⁄° *
w‹kDú
, *
d©a
, 
£t_∂ugö_∑ømëî_add⁄
 
add⁄
);

121 
hâpSëIndexFûe
(c⁄° *
ödexFûe
, *
d©a
, 
£t_∂ugö_∑ømëî_add⁄
 
add⁄
);

122 
hâpSëU£r
(c⁄° *
u£r
, *
d©a
, 
£t_∂ugö_∑ømëî_add⁄
 
add⁄
);

123 
hâpSëPassw‹d
(c⁄° *
∑ssw‹d
, *
d©a
, 
£t_∂ugö_∑ømëî_add⁄
 
add⁄
);

124 
hâpSëSessTime
(c⁄° *
timeSå
, *
d©a
, 
£t_∂ugö_∑ømëî_add⁄
 
add⁄
);

125 
hâpSëPubDú
(c⁄° *
¥ef
, *
d©a
, 
£t_∂ugö_∑ømëî_add⁄
 
add⁄
);

126 
hâpSëQu™tum
(c⁄° *
qu™tumSå
, *
d©a
, 
£t_∂ugö_∑ømëî_add⁄
 
add⁄
);

127 
hâpSëMessTime
(c⁄° *
timeSå
, *
d©a
, 
£t_∂ugö_∑ømëî_add⁄
 
add⁄
);

128 
hâpSëMessLimô
(c⁄° *
limôSå
, *
d©a
, 
£t_∂ugö_∑ømëî_add⁄
 
add⁄
);

130 
hâpSëup
();

131 
hâpSîvi˚
(
‰eq
);

132 
hâpShutdown
();

133 
hâpAddTasMesßge
(c⁄° *
£rvi˚
, c⁄° *
°rög
, c⁄° *
‰om
);

134 
hâpGëTasMesßge
(c⁄° *
£rvi˚
, **
°rög
, **
‰om
);

136 
wrôeBuff
(
öOutBuff
 *
wrôe
, c⁄° *
d©a
, 
d©aLí
);

137 *
ÆlocBuff
(
c⁄nInfo
 *
öfo
, 
Àn
);

	@lib/tas/src/lib.c

43 
	~"lök.h
"

44 
	~"∂ugö.h
"

45 
	~"lib.h
"

46 
	~"os_unix.h
"

47 
	~"hâp.h
"

48 
	~"glua.h
"

49 
	~"glua_ext.h
"

51 
	~<°dio.h
>

52 
	~<°d¨g.h
>

53 
	~<°rög.h
>

55 
	gdebugMask
 = 0;

58 
	$îr‹
(c⁄° *
f‹m
, ...)

60 
va_li°
 
¨gs
;

62 
	`va_°¨t
(
¨gs
, 
f‹m
);

63 
	`vÂrötf
(
°dîr
, 
f‹m
, 
¨gs
);

64 
	`va_íd
(
¨gs
);

65 
	}
}

68 
	$debug
(
Ácûôy
, c⁄° *
f‹m
, ...)

70 
va_li°
 
¨gs
;

72 i‡((
debugMask
 & 
Ácûôy
) == 0)

75 
	`va_°¨t
(
¨gs
, 
f‹m
);

76 
	`vÂrötf
(
°dîr
, 
f‹m
, 
¨gs
);

77 
	`va_íd
(
¨gs
);

78 
	}
}

81 
	$°rdupAdd
(c⁄° *
°rög
, 
add
)

83 *
ªs
 = 
	`ÆlocMem
(
	`°æí
(
°rög
Ë+ 1 + 
add
);

85 
	`°r˝y
(
ªs
, 
°rög
);

86  
ªs
;

87 
	}
}

90 
	$mySådup
(c⁄° *
°rög
)

92  
	`°rdupAdd
(
°rög
, 0);

93 
	}
}

96 
	$chomp
(*
löe
, 
Àn
)

98 
Àn
-- > 0) {

99 i‡(
löe
[
Àn
] != 10 &&Üine[len] != 13)

102 
löe
[
Àn
] = 0;

104 
	}
}

107 
	$ötToSåög
(*
buff
, 
vÆ
)

109 
i
;

111 
buff
[9] = 0;

113 
i
 = 8; i >= 0; i--) {

114 
buff
[
i
] = ()(
vÆ
 % 10 + '0');

116 
vÆ
 /= 10;

118 i‡(
vÆ
 == 0)

122  
buff
 + 
i
;

123 
	}
}

126 
	$°rögToI¡
(*
vÆ
, c⁄° *
buff
)

128 *
vÆ
 = 0;

130 *
buff
 != 0) {

131 i‡(*
buff
 < '0' || *buff > '9')

135 *
vÆ
 = *vÆ * 10 + *
buff
 - '0';

137 
buff
++;

141 
	}
}

	@lib/tas/src/lib.h

43 #i‚de‡
_OLSRD_TAS_LIB_H


44 
	#_OLSRD_TAS_LIB_H


	)

46 
	#DEBUG_MESSAGE
 1

	)

47 
	#DEBUG_SESSION
 2

	)

48 
	#DEBUG_CONNECTION
 4

	)

49 
	#DEBUG_REQUEST
 8

	)

50 
	#DEBUG_LUA
 16

	)

51 
	#DEBUG_QUANTUM
 32

	)

53 
	$îr‹
(c⁄° *
f‹m
, ...Ë
	`__©åibuã__
 ((
	`f‹m©
(
¥ötf
, 1, 2)));

54 
	$debug
(
Ácûôy
, c⁄° *
f‹m
, ...Ë
	`__©åibuã__
 ((
	`f‹m©
(
¥ötf
, 2, 3)));

55 *
	`°rdupAdd
(c⁄° *
°rög
, 
add
);

56 *
	`mySådup
(c⁄° *
°rög
);

57 
	`chomp
(*
löe
, 
Àn
);

58 *
	`ötToSåög
(*
buff
, 
vÆ
);

59 
	`°rögToI¡
(*
vÆ
, c⁄° *
buff
);

	@lib/tas/src/link.h

43 
	#FLAG_READ
 1

	)

44 
	#FLAG_WRITE
 2

	)

	@lib/tas/src/lua/lapi.c

7 
	~<as£π.h
>

8 
	~<°rög.h
>

10 
	#œpi_c


	)

12 
	~"lua.h
"

14 
	~"œpi.h
"

15 
	~"ldebug.h
"

16 
	~"ldo.h
"

17 
	~"lfunc.h
"

18 
	~"lgc.h
"

19 
	~"lmem.h
"

20 
	~"lobje˘.h
"

21 
	~"l°©e.h
"

22 
	~"l°rög.h
"

23 
	~"…abÀ.h
"

24 
	~"…m.h
"

25 
	~"lundump.h
"

26 
	~"lvm.h
"

28 c⁄° 
	glua_idít
[] = "$Lua: " 
LUA_VERSION
 " " 
LUA_COPYRIGHT
 " $\n" "$Auth‹s: " 
LUA_AUTHORS
 " $\n" "$URL: www.lua.org $\n";

30 #i‚de‡
≠i_check


31 
	#≠i_check
(
L
, 
o
Ë

	)

34 
	#≠i_check√Àms
(
L
, 
n
Ë
	`≠i_check
(L, (nË<(L->
t›
 - L->
ba£
))

	)

36 
	#≠i_ö¸_t›
(
L
Ë{
	`≠i_check
(L, L->
t›
 < L->
ci
->t›); L->t›++;}

	)

38 
TObje˘
 *

39 
	$√gödex
(
lua_Sèã
 * 
L
, 
idx
)

41 i‡(
idx
 > 
LUA_REGISTRYINDEX
) {

42 
	`≠i_check
(
L
, 
idx
 !0 && -idx <L->
t›
 - L->
ba£
);

43  
L
->
t›
 + 
idx
;

45 
idx
) {

46 
LUA_REGISTRYINDEX
:

47  
	`ªgi°ry
(
L
);

48 
LUA_GLOBALSINDEX
:

49  
	`gt
(
L
);

52 
TObje˘
 *
func
 = (
L
->
ba£
 - 1);

53 
idx
 = 
LUA_GLOBALSINDEX
 - idx;

54 
	`lua_as£π
(
	`iscfun˘i⁄
(
func
));

55  (
idx
 <
	`˛vÆue
(
func
)->
c
.
nupvÆues
Ë? &˛vÆue(func)->c.
upvÆue
[idx - 1] : 
NULL
;

58 
	}
}

60 
TObje˘
 *

61 
	$luaA_ödex
(
lua_Sèã
 * 
L
, 
idx
)

63 i‡(
idx
 > 0) {

64 
	`≠i_check
(
L
, 
idx
 <L->
t›
 - L->
ba£
);

65  
L
->
ba£
 + 
idx
 - 1;

67 
TObje˘
 *
o
 = 
	`√gödex
(
L
, 
idx
);

68 
	`≠i_check
(
L
, 
o
 !
NULL
);

69  
o
;

71 
	}
}

73 
TObje˘
 *

74 
	$luaA_ödexAc˚±abÀ
(
lua_Sèã
 * 
L
, 
idx
)

76 i‡(
idx
 > 0) {

77 
TObje˘
 *
o
 = 
L
->
ba£
 + (
idx
 - 1);

78 
	`≠i_check
(
L
, 
idx
 <L->
°ack_œ°
 - L->
ba£
);

79 i‡(
o
 >
L
->
t›
)

80  
NULL
;

82  
o
;

84  
	`√gödex
(
L
, 
idx
);

85 
	}
}

88 
	$luaA_pushobje˘
(
lua_Sèã
 * 
L
, c⁄° 
TObje˘
 * 
o
)

90 
	`£tobj2s
(
L
->
t›
, 
o
);

91 
	`ö¸_t›
(
L
);

92 
	}
}

94 
LUA_API
 

95 
	$lua_check°ack
(
lua_Sèã
 * 
L
, 
size
)

97 
ªs
;

98 
	`lua_lock
(
L
);

99 i‡((
L
->
t›
 - L->
ba£
 + 
size
Ë> 
LUA_MAXCSTACK
)

100 
ªs
 = 0;

102 
	`luaD_check°ack
(
L
, 
size
);

103 i‡(
L
->
ci
->
t›
 < L->t› + 
size
)

104 
L
->
ci
->
t›
 = L->t› + 
size
;

105 
ªs
 = 1;

107 
	`lua_u∆ock
(
L
);

108  
ªs
;

109 
	}
}

111 
LUA_API
 

112 
	$lua_xmove
(
lua_Sèã
 * 
‰om
,Üua_Sèã * 
to
, 
n
)

114 
i
;

115 
	`lua_lock
(
to
);

116 
	`≠i_check√Àms
(
‰om
, 
n
);

117 
‰om
->
t›
 -
n
;

118 
i
 = 0; i < 
n
; i++) {

119 
	`£tobj2s
(
to
->
t›
, 
‰om
->t› + 
i
);

120 
	`≠i_ö¸_t›
(
to
);

122 
	`lua_u∆ock
(
to
);

123 
	}
}

125 
LUA_API
 
lua_CFun˘i⁄


126 
	$lua_©∑nic
(
lua_Sèã
 * 
L
, 
lua_CFun˘i⁄
 
∑nicf
)

128 
lua_CFun˘i⁄
 
ﬁd
;

129 
	`lua_lock
(
L
);

130 
ﬁd
 = 
	`G
(
L
)->
∑nic
;

131 
	`G
(
L
)->
∑nic
 = 
∑nicf
;

132 
	`lua_u∆ock
(
L
);

133  
ﬁd
;

134 
	}
}

136 
LUA_API
 
lua_Sèã
 *

137 
	$lua_√wthªad
(
lua_Sèã
 * 
L
)

139 
lua_Sèã
 *
L1
;

140 
	`lua_lock
(
L
);

141 
	`luaC_checkGC
(
L
);

142 
L1
 = 
	`luaE_√wthªad
(
L
);

143 
	`£âhvÆue
(
L
->
t›
, 
L1
);

144 
	`≠i_ö¸_t›
(
L
);

145 
	`lua_u∆ock
(
L
);

146 
	`lua_u£r°©e›í
(
L1
);

147  
L1
;

148 
	}
}

154 
LUA_API
 

155 
	$lua_gët›
(
lua_Sèã
 * 
L
)

157  (
L
->
t›
 - L->
ba£
);

158 
	}
}

160 
LUA_API
 

161 
	$lua_£â›
(
lua_Sèã
 * 
L
, 
idx
)

163 
	`lua_lock
(
L
);

164 i‡(
idx
 >= 0) {

165 
	`≠i_check
(
L
, 
idx
 <L->
°ack_œ°
 - L->
ba£
);

166 
L
->
t›
 < L->
ba£
 + 
idx
)

167 
	`£äûvÆue
(
L
->
t›
++);

168 
L
->
t›
 = L->
ba£
 + 
idx
;

170 
	`≠i_check
(
L
, -(
idx
 + 1Ë<(L->
t›
 - L->
ba£
));

171 
L
->
t›
 +
idx
 + 1;

173 
	`lua_u∆ock
(
L
);

174 
	}
}

176 
LUA_API
 

177 
	$lua_ªmove
(
lua_Sèã
 * 
L
, 
idx
)

179 
StkId
 
p
;

180 
	`lua_lock
(
L
);

181 
p
 = 
	`luaA_ödex
(
L
, 
idx
);

182 ++
p
 < 
L
->
t›
)

183 
	`£tobjs2s
(
p
 - 1,Ö);

184 
L
->
t›
--;

185 
	`lua_u∆ock
(
L
);

186 
	}
}

188 
LUA_API
 

189 
	$lua_ö£π
(
lua_Sèã
 * 
L
, 
idx
)

191 
StkId
 
p
;

192 
StkId
 
q
;

193 
	`lua_lock
(
L
);

194 
p
 = 
	`luaA_ödex
(
L
, 
idx
);

195 
q
 = 
L
->
t›
; q > 
p
; q--)

196 
	`£tobjs2s
(
q
, q - 1);

197 
	`£tobjs2s
(
p
, 
L
->
t›
);

198 
	`lua_u∆ock
(
L
);

199 
	}
}

201 
LUA_API
 

202 
	$lua_ª∂a˚
(
lua_Sèã
 * 
L
, 
idx
)

204 
	`lua_lock
(
L
);

205 
	`≠i_check√Àms
(
L
, 1);

206 
	`£tobj
(
	`luaA_ödex
(
L
, 
idx
), L->
t›
 - 1);

207 
L
->
t›
--;

208 
	`lua_u∆ock
(
L
);

209 
	}
}

211 
LUA_API
 

212 
	$lua_pushvÆue
(
lua_Sèã
 * 
L
, 
idx
)

214 
	`lua_lock
(
L
);

215 
	`£tobj2s
(
L
->
t›
, 
	`luaA_ödex
(L, 
idx
));

216 
	`≠i_ö¸_t›
(
L
);

217 
	`lua_u∆ock
(
L
);

218 
	}
}

224 
LUA_API
 

225 
	$lua_ty≥
(
lua_Sèã
 * 
L
, 
idx
)

227 
StkId
 
o
 = 
	`luaA_ödexAc˚±abÀ
(
L
, 
idx
);

228  (
o
 =
NULL
Ë? 
LUA_TNONE
 : 
	`ây≥
(o);

229 
	}
}

231 
LUA_API
 const *

232 
	$lua_ty≥«me
(
lua_Sèã
 * 
L
, 
t
)

234 
	`UNUSED
(
L
);

235  (
t
 =
LUA_TNONE
Ë? "nÿvÆue" : 
luaT_ty≥«mes
[t];

236 
	}
}

238 
LUA_API
 

239 
	$lua_iscfun˘i⁄
(
lua_Sèã
 * 
L
, 
idx
)

241 
StkId
 
o
 = 
	`luaA_ödexAc˚±abÀ
(
L
, 
idx
);

242  (
o
 =
NULL
Ë? 0 : 
	`iscfun˘i⁄
(o);

243 
	}
}

245 
LUA_API
 

246 
	$lua_i¢umbî
(
lua_Sèã
 * 
L
, 
idx
)

248 
TObje˘
 
n
;

249 c⁄° 
TObje˘
 *
o
 = 
	`luaA_ödexAc˚±abÀ
(
L
, 
idx
);

250  (
o
 !
NULL
 && 
	`t⁄umbî
(o, &
n
));

251 
	}
}

253 
LUA_API
 

254 
	$lua_is°rög
(
lua_Sèã
 * 
L
, 
idx
)

256 
t
 = 
	`lua_ty≥
(
L
, 
idx
);

257  (
t
 =
LUA_TSTRING
 ||Å =
LUA_TNUMBER
);

258 
	}
}

260 
LUA_API
 

261 
	$lua_isu£rd©a
(
lua_Sèã
 * 
L
, 
idx
)

263 c⁄° 
TObje˘
 *
o
 = 
	`luaA_ödexAc˚±abÀ
(
L
, 
idx
);

264  (
o
 !
NULL
 && (
	`âisu£rd©a
(oË|| 
	`âi¶ightu£rd©a
(o)));

265 
	}
}

267 
LUA_API
 

268 
	$lua_øwequÆ
(
lua_Sèã
 * 
L
, 
ödex1
, 
ödex2
)

270 
StkId
 
o1
 = 
	`luaA_ödexAc˚±abÀ
(
L
, 
ödex1
);

271 
StkId
 
o2
 = 
	`luaA_ödexAc˚±abÀ
(
L
, 
ödex2
);

272  (
o1
 =
NULL
 || 
o2
 == NULL) ? 0

273 : 
	`luaO_øwequÆObj
(
o1
, 
o2
);

274 
	}
}

276 
LUA_API
 

277 
	$lua_equÆ
(
lua_Sèã
 * 
L
, 
ödex1
, 
ödex2
)

279 
StkId
 
o1
, 
o2
;

280 
i
;

281 
	`lua_lock
(
L
);

282 
o1
 = 
	`luaA_ödexAc˚±abÀ
(
L
, 
ödex1
);

283 
o2
 = 
	`luaA_ödexAc˚±abÀ
(
L
, 
ödex2
);

284 
i
 = (
o1
 =
NULL
 || 
o2
 == NULL) ? 0

285 : 
	`equÆobj
(
L
, 
o1
, 
o2
);

286 
	`lua_u∆ock
(
L
);

287  
i
;

288 
	}
}

290 
LUA_API
 

291 
	$lua_Às°h™
(
lua_Sèã
 * 
L
, 
ödex1
, 
ödex2
)

293 
StkId
 
o1
, 
o2
;

294 
i
;

295 
	`lua_lock
(
L
);

296 
o1
 = 
	`luaA_ödexAc˚±abÀ
(
L
, 
ödex1
);

297 
o2
 = 
	`luaA_ödexAc˚±abÀ
(
L
, 
ödex2
);

298 
i
 = (
o1
 =
NULL
 || 
o2
 == NULL) ? 0

299 : 
	`luaV_Às°h™
(
L
, 
o1
, 
o2
);

300 
	`lua_u∆ock
(
L
);

301  
i
;

302 
	}
}

304 
LUA_API
 
lua_Numbî


305 
	$lua_t⁄umbî
(
lua_Sèã
 * 
L
, 
idx
)

307 
TObje˘
 
n
;

308 c⁄° 
TObje˘
 *
o
 = 
	`luaA_ödexAc˚±abÀ
(
L
, 
idx
);

309 i‡(
o
 !
NULL
 && 
	`t⁄umbî
(o, &
n
))

310  
	`nvÆue
(
o
);

313 
	}
}

315 
LUA_API
 

316 
	$lua_toboﬁón
(
lua_Sèã
 * 
L
, 
idx
)

318 c⁄° 
TObje˘
 *
o
 = 
	`luaA_ödexAc˚±abÀ
(
L
, 
idx
);

319  (
o
 !
NULL
Ë&& !
	`l_isÁl£
(o);

320 
	}
}

322 
LUA_API
 const *

323 
	$lua_to°rög
(
lua_Sèã
 * 
L
, 
idx
)

325 
StkId
 
o
 = 
	`luaA_ödexAc˚±abÀ
(
L
, 
idx
);

326 i‡(
o
 =
NULL
)

327  
NULL
;

328 i‡(
	`âis°rög
(
o
))

329  
	`svÆue
(
o
);

331 c⁄° *
s
;

332 
	`lua_lock
(
L
);

333 
s
 = (
	`luaV_to°rög
(
L
, 
o
Ë? 
	`svÆue
(oË: 
NULL
);

334 
	`luaC_checkGC
(
L
);

335 
	`lua_u∆ock
(
L
);

336  
s
;

338 
	}
}

340 
LUA_API
 
size_t


341 
	$lua_°æí
(
lua_Sèã
 * 
L
, 
idx
)

343 
StkId
 
o
 = 
	`luaA_ödexAc˚±abÀ
(
L
, 
idx
);

344 i‡(
o
 =
NULL
)

346 i‡(
	`âis°rög
(
o
))

347  
	`tsvÆue
(
o
)->
tsv
.
Àn
;

349 
size_t
 
l
;

350 
	`lua_lock
(
L
);

351 
l
 = (
	`luaV_to°rög
(
L
, 
o
Ë? 
	`tsvÆue
(o)->
tsv
.
Àn
 : 0);

352 
	`lua_u∆ock
(
L
);

353  
l
;

355 
	}
}

357 
LUA_API
 
lua_CFun˘i⁄


358 
	$lua_tocfun˘i⁄
(
lua_Sèã
 * 
L
, 
idx
)

360 
StkId
 
o
 = 
	`luaA_ödexAc˚±abÀ
(
L
, 
idx
);

361  (
o
 =
NULL
 || !
	`iscfun˘i⁄
(o)Ë? NULL : 
	`˛vÆue
(o)->
c
.
f
;

362 
	}
}

364 
LUA_API
 *

365 
	$lua_tou£rd©a
(
lua_Sèã
 * 
L
, 
idx
)

367 
StkId
 
o
 = 
	`luaA_ödexAc˚±abÀ
(
L
, 
idx
);

368 i‡(
o
 =
NULL
)

369  
NULL
;

370 
	`ây≥
(
o
)) {

371 
LUA_TUSERDATA
:

372  (
	`uvÆue
(
o
) + 1);

373 
LUA_TLIGHTUSERDATA
:

374  
	`pvÆue
(
o
);

376  
NULL
;

378 
	}
}

380 
LUA_API
 
lua_Sèã
 *

381 
	$lua_tŸhªad
(
lua_Sèã
 * 
L
, 
idx
)

383 
StkId
 
o
 = 
	`luaA_ödexAc˚±abÀ
(
L
, 
idx
);

384  (
o
 =
NULL
 || !
	`âi°hªad
(o)Ë? NULL : 
	`thvÆue
(o);

385 
	}
}

387 
LUA_API
 const *

388 
	$lua_t›oöãr
(
lua_Sèã
 * 
L
, 
idx
)

390 
StkId
 
o
 = 
	`luaA_ödexAc˚±abÀ
(
L
, 
idx
);

391 i‡(
o
 =
NULL
)

392  
NULL
;

394 
	`ây≥
(
o
)) {

395 
LUA_TTABLE
:

396  
	`hvÆue
(
o
);

397 
LUA_TFUNCTION
:

398  
	`˛vÆue
(
o
);

399 
LUA_TTHREAD
:

400  
	`thvÆue
(
o
);

401 
LUA_TUSERDATA
:

402 
LUA_TLIGHTUSERDATA
:

403  
	`lua_tou£rd©a
(
L
, 
idx
);

405  
NULL
;

408 
	}
}

414 
LUA_API
 

415 
	$lua_pushnû
(
lua_Sèã
 * 
L
)

417 
	`lua_lock
(
L
);

418 
	`£äûvÆue
(
L
->
t›
);

419 
	`≠i_ö¸_t›
(
L
);

420 
	`lua_u∆ock
(
L
);

421 
	}
}

423 
LUA_API
 

424 
	$lua_pushnumbî
(
lua_Sèã
 * 
L
, 
lua_Numbî
 
n
)

426 
	`lua_lock
(
L
);

427 
	`£ävÆue
(
L
->
t›
, 
n
);

428 
	`≠i_ö¸_t›
(
L
);

429 
	`lua_u∆ock
(
L
);

430 
	}
}

432 
LUA_API
 

433 
	$lua_pushl°rög
(
lua_Sèã
 * 
L
, c⁄° *
s
, 
size_t
 
Àn
)

435 
	`lua_lock
(
L
);

436 
	`luaC_checkGC
(
L
);

437 
	`£tsvÆue2s
(
L
->
t›
, 
	`luaS_√wl°r
(L, 
s
, 
Àn
));

438 
	`≠i_ö¸_t›
(
L
);

439 
	`lua_u∆ock
(
L
);

440 
	}
}

442 
LUA_API
 

443 
	$lua_push°rög
(
lua_Sèã
 * 
L
, c⁄° *
s
)

445 i‡(
s
 =
NULL
)

446 
	`lua_pushnû
(
L
);

448 
	`lua_pushl°rög
(
L
, 
s
, 
	`°æí
(s));

449 
	}
}

451 
LUA_API
 const *

452 
	$lua_pushvf°rög
(
lua_Sèã
 * 
L
, c⁄° *
fmt
, 
va_li°
 
¨gp
)

454 c⁄° *
ªt
;

455 
	`lua_lock
(
L
);

456 
	`luaC_checkGC
(
L
);

457 
ªt
 = 
	`luaO_pushvf°rög
(
L
, 
fmt
, 
¨gp
);

458 
	`lua_u∆ock
(
L
);

459  
ªt
;

460 
	}
}

462 
LUA_API
 const *

463 
	$lua_pushf°rög
(
lua_Sèã
 * 
L
, c⁄° *
fmt
, ...)

465 c⁄° *
ªt
;

466 
va_li°
 
¨gp
;

467 
	`lua_lock
(
L
);

468 
	`luaC_checkGC
(
L
);

469 
	`va_°¨t
(
¨gp
, 
fmt
);

470 
ªt
 = 
	`luaO_pushvf°rög
(
L
, 
fmt
, 
¨gp
);

471 
	`va_íd
(
¨gp
);

472 
	`lua_u∆ock
(
L
);

473  
ªt
;

474 
	}
}

476 
LUA_API
 

477 
	$lua_pushc˛osuª
(
lua_Sèã
 * 
L
, 
lua_CFun˘i⁄
 
‚
, 
n
)

479 
Closuª
 *
˛
;

480 
	`lua_lock
(
L
);

481 
	`luaC_checkGC
(
L
);

482 
	`≠i_check√Àms
(
L
, 
n
);

483 
˛
 = 
	`luaF_√wC˛osuª
(
L
, 
n
);

484 
˛
->
c
.
f
 = 
‚
;

485 
L
->
t›
 -
n
;

486 
n
--)

487 
	`£tobj2n
(&
˛
->
c
.
upvÆue
[
n
], 
L
->
t›
 +Ç);

488 
	`£t˛vÆue
(
L
->
t›
, 
˛
);

489 
	`≠i_ö¸_t›
(
L
);

490 
	`lua_u∆ock
(
L
);

491 
	}
}

493 
LUA_API
 

494 
	$lua_pushboﬁón
(
lua_Sèã
 * 
L
, 
b
)

496 
	`lua_lock
(
L
);

497 
	`£tbvÆue
(
L
->
t›
, (
b
 != 0));

498 
	`≠i_ö¸_t›
(
L
);

499 
	`lua_u∆ock
(
L
);

500 
	}
}

502 
LUA_API
 

503 
	$lua_pushlightu£rd©a
(
lua_Sèã
 * 
L
, c⁄° *
p
)

505 
	`lua_lock
(
L
);

506 
	`£çvÆue
(
L
->
t›
, (*)
p
);

507 
	`≠i_ö¸_t›
(
L
);

508 
	`lua_u∆ock
(
L
);

509 
	}
}

515 
LUA_API
 

516 
	$lua_gëèbÀ
(
lua_Sèã
 * 
L
, 
idx
)

518 
StkId
 
t
;

519 
	`lua_lock
(
L
);

520 
t
 = 
	`luaA_ödex
(
L
, 
idx
);

521 
	`£tobj2s
(
L
->
t›
 - 1, 
	`luaV_gëèbÀ
(L, 
t
, L->top - 1, 0));

522 
	`lua_u∆ock
(
L
);

523 
	}
}

525 
LUA_API
 

526 
	$lua_øwgë
(
lua_Sèã
 * 
L
, 
idx
)

528 
StkId
 
t
;

529 
	`lua_lock
(
L
);

530 
t
 = 
	`luaA_ödex
(
L
, 
idx
);

531 
	`≠i_check
(
L
, 
	`âi°abÀ
(
t
));

532 
	`£tobj2s
(
L
->
t›
 - 1, 
	`luaH_gë
(
	`hvÆue
(
t
), L->top - 1));

533 
	`lua_u∆ock
(
L
);

534 
	}
}

536 
LUA_API
 

537 
	$lua_øwgëi
(
lua_Sèã
 * 
L
, 
idx
, 
n
)

539 
StkId
 
o
;

540 
	`lua_lock
(
L
);

541 
o
 = 
	`luaA_ödex
(
L
, 
idx
);

542 
	`≠i_check
(
L
, 
	`âi°abÀ
(
o
));

543 
	`£tobj2s
(
L
->
t›
, 
	`luaH_gënum
(
	`hvÆue
(
o
), 
n
));

544 
	`≠i_ö¸_t›
(
L
);

545 
	`lua_u∆ock
(
L
);

546 
	}
}

548 
LUA_API
 

549 
	$lua_√wèbÀ
(
lua_Sèã
 * 
L
)

551 
	`lua_lock
(
L
);

552 
	`luaC_checkGC
(
L
);

553 
	`£thvÆue
(
L
->
t›
, 
	`luaH_√w
(L, 0, 0));

554 
	`≠i_ö¸_t›
(
L
);

555 
	`lua_u∆ock
(
L
);

556 
	}
}

558 
LUA_API
 

559 
	$lua_gëmë©abÀ
(
lua_Sèã
 * 
L
, 
objödex
)

561 c⁄° 
TObje˘
 *
obj
;

562 
TabÀ
 *
mt
 = 
NULL
;

563 
ªs
;

564 
	`lua_lock
(
L
);

565 
obj
 = 
	`luaA_ödexAc˚±abÀ
(
L
, 
objödex
);

566 i‡(
obj
 !
NULL
) {

567 
	`ây≥
(
obj
)) {

568 
LUA_TTABLE
:

569 
mt
 = 
	`hvÆue
(
obj
)->
më©abÀ
;

571 
LUA_TUSERDATA
:

572 
mt
 = 
	`uvÆue
(
obj
)->
uv
.
më©abÀ
;

576 i‡(
mt
 =
NULL
 || mà=
	`hvÆue
(
	`deÁu…mëa
(
L
)))

577 
ªs
 = 0;

579 
	`£thvÆue
(
L
->
t›
, 
mt
);

580 
	`≠i_ö¸_t›
(
L
);

581 
ªs
 = 1;

583 
	`lua_u∆ock
(
L
);

584  
ªs
;

585 
	}
}

587 
LUA_API
 

588 
	$lua_gë„nv
(
lua_Sèã
 * 
L
, 
idx
)

590 
StkId
 
o
;

591 
	`lua_lock
(
L
);

592 
o
 = 
	`luaA_ödex
(
L
, 
idx
);

593 
	`£tobj2s
(
L
->
t›
, 
	`isLfun˘i⁄
(
o
Ë? &
	`˛vÆue
(o)->
l
.
g
 : 
	`gt
(L));

594 
	`≠i_ö¸_t›
(
L
);

595 
	`lua_u∆ock
(
L
);

596 
	}
}

602 
LUA_API
 

603 
	$lua_£âabÀ
(
lua_Sèã
 * 
L
, 
idx
)

605 
StkId
 
t
;

606 
	`lua_lock
(
L
);

607 
	`≠i_check√Àms
(
L
, 2);

608 
t
 = 
	`luaA_ödex
(
L
, 
idx
);

609 
	`luaV_£âabÀ
(
L
, 
t
, L->
t›
 - 2, L->top - 1);

610 
L
->
t›
 -= 2;

611 
	`lua_u∆ock
(
L
);

612 
	}
}

614 
LUA_API
 

615 
	$lua_øw£t
(
lua_Sèã
 * 
L
, 
idx
)

617 
StkId
 
t
;

618 
	`lua_lock
(
L
);

619 
	`≠i_check√Àms
(
L
, 2);

620 
t
 = 
	`luaA_ödex
(
L
, 
idx
);

621 
	`≠i_check
(
L
, 
	`âi°abÀ
(
t
));

622 
	`£tobj2t
(
	`luaH_£t
(
L
, 
	`hvÆue
(
t
), L->
t›
 - 2), L->top - 1);

623 
L
->
t›
 -= 2;

624 
	`lua_u∆ock
(
L
);

625 
	}
}

627 
LUA_API
 

628 
	$lua_øw£ti
(
lua_Sèã
 * 
L
, 
idx
, 
n
)

630 
StkId
 
o
;

631 
	`lua_lock
(
L
);

632 
	`≠i_check√Àms
(
L
, 1);

633 
o
 = 
	`luaA_ödex
(
L
, 
idx
);

634 
	`≠i_check
(
L
, 
	`âi°abÀ
(
o
));

635 
	`£tobj2t
(
	`luaH_£äum
(
L
, 
	`hvÆue
(
o
), 
n
), L->
t›
 - 1);

636 
L
->
t›
--;

637 
	`lua_u∆ock
(
L
);

638 
	}
}

640 
LUA_API
 

641 
	$lua_£tmë©abÀ
(
lua_Sèã
 * 
L
, 
objödex
)

643 
TObje˘
 *
obj
, *
mt
;

644 
ªs
 = 1;

645 
	`lua_lock
(
L
);

646 
	`≠i_check√Àms
(
L
, 1);

647 
obj
 = 
	`luaA_ödex
(
L
, 
objödex
);

648 
mt
 = (!
	`âi¢û
(
L
->
t›
 - 1)Ë? L->t› - 1 : 
	`deÁu…mëa
(L);

649 
	`≠i_check
(
L
, 
	`âi°abÀ
(
mt
));

650 
	`ây≥
(
obj
)) {

651 
LUA_TTABLE
:

653 
	`hvÆue
(
obj
)->
më©abÀ
 = hvÆue(
mt
);

656 
LUA_TUSERDATA
:

658 
	`uvÆue
(
obj
)->
uv
.
më©abÀ
 = 
	`hvÆue
(
mt
);

663 
ªs
 = 0;

667 
L
->
t›
--;

668 
	`lua_u∆ock
(
L
);

669  
ªs
;

670 
	}
}

672 
LUA_API
 

673 
	$lua_£t„nv
(
lua_Sèã
 * 
L
, 
idx
)

675 
StkId
 
o
;

676 
ªs
 = 0;

677 
	`lua_lock
(
L
);

678 
	`≠i_check√Àms
(
L
, 1);

679 
o
 = 
	`luaA_ödex
(
L
, 
idx
);

680 
L
->
t›
--;

681 
	`≠i_check
(
L
, 
	`âi°abÀ
(L->
t›
));

682 i‡(
	`isLfun˘i⁄
(
o
)) {

683 
ªs
 = 1;

684 
	`˛vÆue
(
o
)->
l
.
g
 = *(
L
->
t›
);

686 
	`lua_u∆ock
(
L
);

687  
ªs
;

688 
	}
}

694 
LUA_API
 

695 
	$lua_ˇŒ
(
lua_Sèã
 * 
L
, 
«rgs
, 
ƒesu…s
)

697 
StkId
 
func
;

698 
	`lua_lock
(
L
);

699 
	`≠i_check√Àms
(
L
, 
«rgs
 + 1);

700 
func
 = 
L
->
t›
 - (
«rgs
 + 1);

701 
	`luaD_ˇŒ
(
L
, 
func
, 
ƒesu…s
);

702 
	`lua_u∆ock
(
L
);

703 
	}
}

708 
	sCÆlS
 {

709 
StkId
 
	mfunc
;

710 
	mƒesu…s
;

714 
	$f_ˇŒ
(
lua_Sèã
 * 
L
, *
ud
)

716 
CÆlS
 *
c
 = 
	`ˇ°
(CÆlS *, 
ud
);

717 
	`luaD_ˇŒ
(
L
, 
c
->
func
, c->
ƒesu…s
);

718 
	}
}

720 
LUA_API
 

721 
	$lua_pˇŒ
(
lua_Sèã
 * 
L
, 
«rgs
, 
ƒesu…s
, 
îrfunc
)

723 
CÆlS
 
c
;

724 
°©us
;

725 
±rdiff_t
 
func
;

726 
	`lua_lock
(
L
);

727 
func
 = (
îrfunc
 =0Ë? 0 : 
	`ßve°ack
(
L
, 
	`luaA_ödex
(L,Érrfunc));

728 
c
.
func
 = 
L
->
t›
 - (
«rgs
 + 1);

729 
c
.
ƒesu…s
 =Çresults;

730 
°©us
 = 
	`luaD_pˇŒ
(
L
, 
f_ˇŒ
, &
c
, 
	`ßve°ack
(L, c.
func
), func);

731 
	`lua_u∆ock
(
L
);

732  
°©us
;

733 
	}
}

738 
	sCCÆlS
 {

739 
lua_CFun˘i⁄
 
	mfunc
;

740 *
	mud
;

744 
	$f_CˇŒ
(
lua_Sèã
 * 
L
, *
ud
)

746 
CCÆlS
 *
c
 = 
	`ˇ°
(CCÆlS *, 
ud
);

747 
Closuª
 *
˛
;

748 
˛
 = 
	`luaF_√wC˛osuª
(
L
, 0);

749 
˛
->
c
.
f
 = c->
func
;

750 
	`£t˛vÆue
(
L
->
t›
, 
˛
);

751 
	`ö¸_t›
(
L
);

752 
	`£çvÆue
(
L
->
t›
, 
c
->
ud
);

753 
	`ö¸_t›
(
L
);

754 
	`luaD_ˇŒ
(
L
, L->
t›
 - 2, 0);

755 
	}
}

757 
LUA_API
 

758 
	$lua_˝ˇŒ
(
lua_Sèã
 * 
L
, 
lua_CFun˘i⁄
 
func
, *
ud
)

760 
CCÆlS
 
c
;

761 
°©us
;

762 
	`lua_lock
(
L
);

763 
c
.
func
 = func;

764 
c
.
ud
 = ud;

765 
°©us
 = 
	`luaD_pˇŒ
(
L
, 
f_CˇŒ
, &
c
, 
	`ßve°ack
(L, L->
t›
), 0);

766 
	`lua_u∆ock
(
L
);

767  
°©us
;

768 
	}
}

770 
LUA_API
 

771 
	$lua_lﬂd
(
lua_Sèã
 * 
L
, 
lua_Chunkªadî
 
ªadî
, *
d©a
, c⁄° *
chunk«me
)

773 
ZIO
 
z
;

774 
°©us
;

775 
c
;

776 
	`lua_lock
(
L
);

777 i‡(!
chunk«me
)

778 
chunk«me
 = "?";

779 
	`luaZ_öô
(&
z
, 
ªadî
, 
d©a
, 
chunk«me
);

780 
c
 = 
	`luaZ_lookahód
(&
z
);

781 
°©us
 = 
	`luaD_¥Ÿe˘ed∑r£r
(
L
, &
z
, (
c
 =
LUA_SIGNATURE
[0]));

782 
	`lua_u∆ock
(
L
);

783  
°©us
;

784 
	}
}

786 
LUA_API
 

787 
	$lua_dump
(
lua_Sèã
 * 
L
, 
lua_Chunkwrôî
 
wrôî
, *
d©a
)

789 
°©us
;

790 
TObje˘
 *
o
;

791 
	`lua_lock
(
L
);

792 
	`≠i_check√Àms
(
L
, 1);

793 
o
 = 
L
->
t›
 - 1;

794 i‡(
	`isLfun˘i⁄
(
o
Ë&& 
	`˛vÆue
(o)->
l
.
nupvÆues
 == 0) {

795 
	`luaU_dump
(
L
, 
	`˛vÆue
(
o
)->
l
.
p
, 
wrôî
, 
d©a
);

796 
°©us
 = 1;

798 
°©us
 = 0;

799 
	`lua_u∆ock
(
L
);

800  
°©us
;

801 
	}
}

808 
	#GCsˇÀl
(
x
Ë((x)>>10)

	)

809 
	#GCsˇÀ
(
x
Ë(
	`ˇ°
(, 
	`GCsˇÀl
(x)))

	)

810 
	#GCunsˇÀ
(
x
Ë(
	`ˇ°
(
lu_mem
, x)<<10)

	)

812 
LUA_API
 

813 
	$lua_gëg˘hªshﬁd
(
lua_Sèã
 * 
L
)

815 
thªshﬁd
;

816 
	`lua_lock
(
L
);

817 
thªshﬁd
 = 
	`GCsˇÀ
(
	`G
(
L
)->
GCthªshﬁd
);

818 
	`lua_u∆ock
(
L
);

819  
thªshﬁd
;

820 
	}
}

822 
LUA_API
 

823 
	$lua_gëgccou¡
(
lua_Sèã
 * 
L
)

825 
cou¡
;

826 
	`lua_lock
(
L
);

827 
cou¡
 = 
	`GCsˇÀ
(
	`G
(
L
)->
nblocks
);

828 
	`lua_u∆ock
(
L
);

829  
cou¡
;

830 
	}
}

832 
LUA_API
 

833 
	$lua_£tg˘hªshﬁd
(
lua_Sèã
 * 
L
, 
√wthªshﬁd
)

835 
	`lua_lock
(
L
);

836 i‡(
	`ˇ°
(
lu_mem
, 
√wthªshﬁd
Ë> 
	`GCsˇÀl
(
MAX_LUMEM
))

837 
	`G
(
L
)->
GCthªshﬁd
 = 
MAX_LUMEM
;

839 
	`G
(
L
)->
GCthªshﬁd
 = 
	`GCunsˇÀ
(
√wthªshﬁd
);

840 
	`luaC_checkGC
(
L
);

841 
	`lua_u∆ock
(
L
);

842 
	}
}

848 
LUA_API
 const *

849 
	$lua_vîsi⁄
()

851  
LUA_VERSION
;

852 
	}
}

854 
LUA_API
 

855 
	$lua_îr‹
(
lua_Sèã
 * 
L
)

857 
	`lua_lock
(
L
);

858 
	`≠i_check√Àms
(
L
, 1);

859 
	`luaG_îr‹msg
(
L
);

860 
	`lua_u∆ock
(
L
);

861 
	}
}

863 
LUA_API
 

864 
	$lua_√xt
(
lua_Sèã
 * 
L
, 
idx
)

866 
StkId
 
t
;

867 
m‹e
;

868 
	`lua_lock
(
L
);

869 
t
 = 
	`luaA_ödex
(
L
, 
idx
);

870 
	`≠i_check
(
L
, 
	`âi°abÀ
(
t
));

871 
m‹e
 = 
	`luaH_√xt
(
L
, 
	`hvÆue
(
t
), L->
t›
 - 1);

872 i‡(
m‹e
) {

873 
	`≠i_ö¸_t›
(
L
);

875 
L
->
t›
 -= 1;

876 
	`lua_u∆ock
(
L
);

877  
m‹e
;

878 
	}
}

880 
LUA_API
 

881 
	$lua_c⁄ˇt
(
lua_Sèã
 * 
L
, 
n
)

883 
	`lua_lock
(
L
);

884 
	`luaC_checkGC
(
L
);

885 
	`≠i_check√Àms
(
L
, 
n
);

886 i‡(
n
 >= 2) {

887 
	`luaV_c⁄ˇt
(
L
, 
n
, L->
t›
 - L->
ba£
 - 1);

888 
L
->
t›
 -(
n
 - 1);

889 } i‡(
n
 == 0) {

890 
	`£tsvÆue2s
(
L
->
t›
, 
	`luaS_√wl°r
(L, 
NULL
, 0));

891 
	`≠i_ö¸_t›
(
L
);

894 
	`lua_u∆ock
(
L
);

895 
	}
}

897 
LUA_API
 *

898 
	$lua_√wu£rd©a
(
lua_Sèã
 * 
L
, 
size_t
 
size
)

900 
Ud©a
 *
u
;

901 
	`lua_lock
(
L
);

902 
	`luaC_checkGC
(
L
);

903 
u
 = 
	`luaS_√wud©a
(
L
, 
size
);

904 
	`£tuvÆue
(
L
->
t›
, 
u
);

905 
	`≠i_ö¸_t›
(
L
);

906 
	`lua_u∆ock
(
L
);

907  
u
 + 1;

908 
	}
}

910 
LUA_API
 

911 
	$lua_pushupvÆues
(
lua_Sèã
 * 
L
)

913 
Closuª
 *
func
;

914 
n
, 
i
;

915 
	`lua_lock
(
L
);

916 
	`≠i_check
(
L
, 
	`iscfun˘i⁄
(L->
ba£
 - 1));

917 
func
 = 
	`˛vÆue
(
L
->
ba£
 - 1);

918 
n
 = 
func
->
c
.
nupvÆues
;

919 
	`luaD_check°ack
(
L
, 
n
 + 
LUA_MINSTACK
);

920 
i
 = 0; i < 
n
; i++) {

921 
	`£tobj2s
(
L
->
t›
, &
func
->
c
.
upvÆue
[
i
]);

922 
L
->
t›
++;

924 
	`lua_u∆ock
(
L
);

925  
n
;

926 
	}
}

929 
	$aux_upvÆue
(
lua_Sèã
 * 
L
, 
funcödex
, 
n
, 
TObje˘
 ** 
vÆ
)

931 
Closuª
 *
f
;

932 
StkId
 
fi
 = 
	`luaA_ödex
(
L
, 
funcödex
);

933 i‡(!
	`âisfun˘i⁄
(
fi
))

934  
NULL
;

935 
f
 = 
	`˛vÆue
(
fi
);

936 i‡(
f
->
c
.
isC
) {

937 i‡(
n
 > 
f
->
c
.
nupvÆues
)

938  
NULL
;

939 *
vÆ
 = &
f
->
c
.
upvÆue
[
n
 - 1];

942 
PrŸo
 *
p
 = 
f
->
l
.p;

943 i‡(
n
 > 
p
->
sizeupvÆues
)

944  
NULL
;

945 *
vÆ
 = 
f
->
l
.
upvÆs
[
n
 - 1]->
v
;

946  
	`gë°r
(
p
->
upvÆues
[
n
 - 1]);

948 
	}
}

950 
LUA_API
 const *

951 
	$lua_gëupvÆue
(
lua_Sèã
 * 
L
, 
funcödex
, 
n
)

953 c⁄° *
«me
;

954 
TObje˘
 *
vÆ
;

955 
	`lua_lock
(
L
);

956 
«me
 = 
	`aux_upvÆue
(
L
, 
funcödex
, 
n
, &
vÆ
);

957 i‡(
«me
) {

958 
	`£tobj2s
(
L
->
t›
, 
vÆ
);

959 
	`≠i_ö¸_t›
(
L
);

961 
	`lua_u∆ock
(
L
);

962  
«me
;

963 
	}
}

965 
LUA_API
 const *

966 
	$lua_£tupvÆue
(
lua_Sèã
 * 
L
, 
funcödex
, 
n
)

968 c⁄° *
«me
;

969 
TObje˘
 *
vÆ
;

970 
	`lua_lock
(
L
);

971 
	`≠i_check√Àms
(
L
, 1);

972 
«me
 = 
	`aux_upvÆue
(
L
, 
funcödex
, 
n
, &
vÆ
);

973 i‡(
«me
) {

974 
L
->
t›
--;

975 
	`£tobj
(
vÆ
, 
L
->
t›
);

977 
	`lua_u∆ock
(
L
);

978  
«me
;

979 
	}
}

	@lib/tas/src/lua/lapi.h

7 #i‚de‡
œpi_h


8 
	#œpi_h


	)

10 
	~"lobje˘.h
"

12 
luaA_pushobje˘
(
lua_Sèã
 * 
L
, c⁄° 
TObje˘
 * 
o
);

	@lib/tas/src/lua/lauxlib.c

7 
	~<˘y≥.h
>

8 
	~<î∫o.h
>

9 
	~<°d¨g.h
>

10 
	~<°dio.h
>

11 
	~<°rög.h
>

17 
	#œuxlib_c


	)

19 
	~"lua.h
"

21 
	~"œuxlib.h
"

24 
	#RESERVED_REFS
 2

	)

27 
	#FREELIST_REF
 1

	)

28 
	#ARRAYSIZE_REF
 2

	)

31 
	#abs_ödex
(
L
, 
i
Ë((iË> 0 || (iË<
LUA_REGISTRYINDEX
 ? (i) : \

32 
	`lua_gët›
(
L
Ë+ (
i
Ë+ 1)

	)

40 
LUALIB_API
 

41 
	$luaL_¨gîr‹
(
lua_Sèã
 * 
L
, 
«rg
, c⁄° *
exåamsg
)

43 
lua_Debug
 
¨
;

44 
	`lua_gë°ack
(
L
, 0, &
¨
);

45 
	`lua_gëöfo
(
L
, "n", &
¨
);

46 i‡(
	`°rcmp
(
¨
.
«mewh©
, "method") == 0) {

47 
«rg
--;

48 i‡(
«rg
 == 0)

49 
	`luaL_îr‹
(
L
, "ˇŒög `%s' o¿bad sñ‡(%s)", 
¨
.
«me
, 
exåamsg
);

51 i‡(
¨
.
«me
 =
NULL
)

52 
¨
.
«me
 = "?";

53 
	`luaL_îr‹
(
L
, "badárgumíà#%dÅÿ`%s' (%s)", 
«rg
, 
¨
.
«me
, 
exåamsg
);

54 
	}
}

56 
LUALIB_API
 

57 
	$luaL_ty≥º‹
(
lua_Sèã
 * 
L
, 
«rg
, c⁄° *
äame
)

59 c⁄° *
msg
 = 
	`lua_pushf°rög
(
L
, "%sÉxpected, got %s",

60 
äame
, 
	`lua_ty≥«me
(
L
,

61 
	`lua_ty≥
(
L
,

62 
«rg
)));

63 
	`luaL_¨gîr‹
(
L
, 
«rg
, 
msg
);

64 
	}
}

66 
	$èg_îr‹
(
lua_Sèã
 * 
L
, 
«rg
, 
èg
Ë
	`__©åibuã__
 ((
n‹ëu∫
));

68 
	$èg_îr‹
(
lua_Sèã
 * 
L
, 
«rg
, 
èg
)

70 
	`luaL_ty≥º‹
(
L
, 
«rg
, 
	`lua_ty≥«me
(L, 
èg
));

71 
	}
}

73 
LUALIB_API
 

74 
	$luaL_whîe
(
lua_Sèã
 * 
L
, 
Àvñ
)

76 
lua_Debug
 
¨
;

77 i‡(
	`lua_gë°ack
(
L
, 
Àvñ
, &
¨
)) {

78 
	`lua_gëöfo
(
L
, "S∆", &
¨
);

79 i‡(
¨
.
cuºíéöe
 > 0) {

80 
	`lua_pushf°rög
(
L
, "%s:%d: ", 
¨
.
sh‹t_§c
,ár.
cuºíéöe
);

84 
	`lua_pushlôîÆ
(
L
, "");

85 
	}
}

87 
LUALIB_API
 

88 
	$luaL_îr‹
(
lua_Sèã
 * 
L
, c⁄° *
fmt
, ...)

90 
va_li°
 
¨gp
;

91 
	`va_°¨t
(
¨gp
, 
fmt
);

92 
	`luaL_whîe
(
L
, 1);

93 
	`lua_pushvf°rög
(
L
, 
fmt
, 
¨gp
);

94 
	`va_íd
(
¨gp
);

95 
	`lua_c⁄ˇt
(
L
, 2);

96 
	`lua_îr‹
(
L
);

97 
	}
}

101 
LUALIB_API
 

102 
	$luaL_föd°rög
(c⁄° *
«me
, c⁄° *c⁄° 
li°
[])

104 
i
;

105 
i
 = 0; 
li°
[i]; i++)

106 i‡(
	`°rcmp
(
li°
[
i
], 
«me
) == 0)

107  
i
;

109 
	}
}

111 
LUALIB_API
 

112 
	$luaL_√wmë©abÀ
(
lua_Sèã
 * 
L
, c⁄° *
äame
)

114 
	`lua_push°rög
(
L
, 
äame
);

115 
	`lua_øwgë
(
L
, 
LUA_REGISTRYINDEX
);

116 i‡(!
	`lua_i¢û
(
L
, -1))

118 
	`lua_p›
(
L
, 1);

119 
	`lua_√wèbÀ
(
L
);

120 
	`lua_push°rög
(
L
, 
äame
);

121 
	`lua_pushvÆue
(
L
, -2);

122 
	`lua_øw£t
(
L
, 
LUA_REGISTRYINDEX
);

123 
	`lua_pushvÆue
(
L
, -1);

124 
	`lua_push°rög
(
L
, 
äame
);

125 
	`lua_øw£t
(
L
, 
LUA_REGISTRYINDEX
);

127 
	}
}

129 
LUALIB_API
 

130 
	$luaL_gëmë©abÀ
(
lua_Sèã
 * 
L
, c⁄° *
äame
)

132 
	`lua_push°rög
(
L
, 
äame
);

133 
	`lua_øwgë
(
L
, 
LUA_REGISTRYINDEX
);

134 
	}
}

136 
LUALIB_API
 *

137 
	$luaL_checkud©a
(
lua_Sèã
 * 
L
, 
ud
, c⁄° *
äame
)

139 c⁄° *
ä
;

140 i‡(!
	`lua_gëmë©abÀ
(
L
, 
ud
))

141  
NULL
;

142 
	`lua_øwgë
(
L
, 
LUA_REGISTRYINDEX
);

143 
ä
 = 
	`lua_to°rög
(
L
, -1);

144 i‡(
ä
 && (
	`°rcmp
—n, 
äame
) == 0)) {

145 
	`lua_p›
(
L
, 1);

146  
	`lua_tou£rd©a
(
L
, 
ud
);

148 
	`lua_p›
(
L
, 1);

149  
NULL
;

151 
	}
}

153 
LUALIB_API
 

154 
	$luaL_check°ack
(
lua_Sèã
 * 
L
, 
•a˚
, c⁄° *
mes
)

156 i‡(!
	`lua_check°ack
(
L
, 
•a˚
))

157 
	`luaL_îr‹
(
L
, "°ack ovîÊow (%s)", 
mes
);

158 
	}
}

160 
LUALIB_API
 

161 
	$luaL_checkty≥
(
lua_Sèã
 * 
L
, 
«rg
, 
t
)

163 i‡(
	`lua_ty≥
(
L
, 
«rg
Ë!
t
)

164 
	`èg_îr‹
(
L
, 
«rg
, 
t
);

165 
	}
}

167 
LUALIB_API
 

168 
	$luaL_check™y
(
lua_Sèã
 * 
L
, 
«rg
)

170 i‡(
	`lua_ty≥
(
L
, 
«rg
Ë=
LUA_TNONE
)

171 
	`luaL_¨gîr‹
(
L
, 
«rg
, "valueÉxpected");

172 
	}
}

174 
LUALIB_API
 const *

175 
	$luaL_checkl°rög
(
lua_Sèã
 * 
L
, 
«rg
, 
size_t
 * 
Àn
)

177 c⁄° *
s
 = 
	`lua_to°rög
(
L
, 
«rg
);

178 i‡(!
s
)

179 
	`èg_îr‹
(
L
, 
«rg
, 
LUA_TSTRING
);

180 i‡(
Àn
)

181 *
Àn
 = 
	`lua_°æí
(
L
, 
«rg
);

182  
s
;

183 
	}
}

185 
LUALIB_API
 const *

186 
	$luaL_›é°rög
(
lua_Sèã
 * 
L
, 
«rg
, c⁄° *
def
, 
size_t
 * 
Àn
)

188 i‡(
	`lua_i¢⁄e‹nû
(
L
, 
«rg
)) {

189 i‡(
Àn
)

190 *
Àn
 = (
def
 ? 
	`°æí
(def) : 0);

191  
def
;

193  
	`luaL_checkl°rög
(
L
, 
«rg
, 
Àn
);

194 
	}
}

196 
LUALIB_API
 
lua_Numbî


197 
	$luaL_checknumbî
(
lua_Sèã
 * 
L
, 
«rg
)

199 
lua_Numbî
 
d
 = 
	`lua_t⁄umbî
(
L
, 
«rg
);

200 i‡(
d
 =0 && !
	`lua_i¢umbî
(
L
, 
«rg
))

201 
	`èg_îr‹
(
L
, 
«rg
, 
LUA_TNUMBER
);

202  
d
;

203 
	}
}

205 
LUALIB_API
 
lua_Numbî


206 
	$luaL_›äumbî
(
lua_Sèã
 * 
L
, 
«rg
, 
lua_Numbî
 
def
)

208 i‡(
	`lua_i¢⁄e‹nû
(
L
, 
«rg
))

209  
def
;

211  
	`luaL_checknumbî
(
L
, 
«rg
);

212 
	}
}

214 
LUALIB_API
 

215 
	$luaL_gëmëafõld
(
lua_Sèã
 * 
L
, 
obj
, c⁄° *
evít
)

217 i‡(!
	`lua_gëmë©abÀ
(
L
, 
obj
))

219 
	`lua_push°rög
(
L
, 
evít
);

220 
	`lua_øwgë
(
L
, -2);

221 i‡(
	`lua_i¢û
(
L
, -1)) {

222 
	`lua_p›
(
L
, 2);

225 
	`lua_ªmove
(
L
, -2);

228 
	}
}

230 
LUALIB_API
 

231 
	$luaL_ˇŒmëa
(
lua_Sèã
 * 
L
, 
obj
, c⁄° *
evít
)

233 
obj
 = 
	`abs_ödex
(
L
, obj);

234 i‡(!
	`luaL_gëmëafõld
(
L
, 
obj
, 
evít
))

236 
	`lua_pushvÆue
(
L
, 
obj
);

237 
	`lua_ˇŒ
(
L
, 1, 1);

239 
	}
}

241 
LUALIB_API
 

242 
	$luaL_›ílib
(
lua_Sèã
 * 
L
, c⁄° *
lib«me
, c⁄° 
luaL_ªg
 * 
l
, 
nup
)

244 i‡(
lib«me
) {

245 
	`lua_push°rög
(
L
, 
lib«me
);

246 
	`lua_gëèbÀ
(
L
, 
LUA_GLOBALSINDEX
);

247 i‡(
	`lua_i¢û
(
L
, -1)) {

248 
	`lua_p›
(
L
, 1);

249 
	`lua_√wèbÀ
(
L
);

250 
	`lua_push°rög
(
L
, 
lib«me
);

251 
	`lua_pushvÆue
(
L
, -2);

252 
	`lua_£âabÀ
(
L
, 
LUA_GLOBALSINDEX
);

254 
	`lua_ö£π
(
L
, -(
nup
 + 1));

256 ; 
l
->
«me
;Ü++) {

257 
i
;

258 
	`lua_push°rög
(
L
, 
l
->
«me
);

259 
i
 = 0; i < 
nup
; i++)

260 
	`lua_pushvÆue
(
L
, -(
nup
 + 1));

261 
	`lua_pushc˛osuª
(
L
, 
l
->
func
, 
nup
);

262 
	`lua_£âabÀ
(
L
, -(
nup
 + 3));

264 
	`lua_p›
(
L
, 
nup
);

265 
	}
}

274 
	$checköt
(
lua_Sèã
 * 
L
, 
t››
)

276 
n
 = 
	`lua_t⁄umbî
(
L
, -1);

277 i‡(
n
 =0 && !
	`lua_i¢umbî
(
L
, -1))

278 
n
 = -1;

279 
	`lua_p›
(
L
, 
t››
);

280  
n
;

281 
	}
}

284 
	$gësizes
(
lua_Sèã
 * 
L
)

286 
	`lua_øwgëi
(
L
, 
LUA_REGISTRYINDEX
, 
ARRAYSIZE_REF
);

287 i‡(
	`lua_i¢û
(
L
, -1)) {

288 
	`lua_p›
(
L
, 1);

289 
	`lua_√wèbÀ
(
L
);

290 
	`lua_pushvÆue
(
L
, -1);

291 
	`lua_£tmë©abÀ
(
L
, -2);

292 
	`lua_pushlôîÆ
(
L
, "__mode");

293 
	`lua_pushlôîÆ
(
L
, "k");

294 
	`lua_øw£t
(
L
, -3);

295 
	`lua_pushvÆue
(
L
, -1);

296 
	`lua_øw£ti
(
L
, 
LUA_REGISTRYINDEX
, 
ARRAYSIZE_REF
);

298 
	}
}

301 
	$luaL_£ä
(
lua_Sèã
 * 
L
, 
t
, 
n
)

303 
t
 = 
	`abs_ödex
(
L
,Å);

304 
	`lua_pushlôîÆ
(
L
, "n");

305 
	`lua_øwgë
(
L
, 
t
);

306 i‡(
	`checköt
(
L
, 1) >= 0) {

307 
	`lua_pushlôîÆ
(
L
, "n");

308 
	`lua_pushnumbî
(
L
, (
lua_Numbî
Ë
n
);

309 
	`lua_øw£t
(
L
, 
t
);

311 
	`gësizes
(
L
);

312 
	`lua_pushvÆue
(
L
, 
t
);

313 
	`lua_pushnumbî
(
L
, (
lua_Numbî
Ë
n
);

314 
	`lua_øw£t
(
L
, -3);

315 
	`lua_p›
(
L
, 1);

317 
	}
}

320 
	$luaL_gën
(
lua_Sèã
 * 
L
, 
t
)

322 
n
;

323 
t
 = 
	`abs_ödex
(
L
,Å);

324 
	`lua_pushlôîÆ
(
L
, "n");

325 
	`lua_øwgë
(
L
, 
t
);

326 i‡((
n
 = 
	`checköt
(
L
, 1)) >= 0)

327  
n
;

328 
	`gësizes
(
L
);

329 
	`lua_pushvÆue
(
L
, 
t
);

330 
	`lua_øwgë
(
L
, -2);

331 i‡((
n
 = 
	`checköt
(
L
, 2)) >= 0)

332  
n
;

333 
n
 = 1;;Ç++) {

334 
	`lua_øwgëi
(
L
, 
t
, 
n
);

335 i‡(
	`lua_i¢û
(
L
, -1))

337 
	`lua_p›
(
L
, 1);

339 
	`lua_p›
(
L
, 1);

340  
n
 - 1;

341 
	}
}

351 
	#bufÊí
(
B
Ë((B)->
p
 - (B)->
buf„r
)

	)

352 
	#buff‰ì
(
B
Ë((
size_t
)(
LUAL_BUFFERSIZE
 - 
	`bufÊí
(B)))

	)

354 
	#LIMIT
 (
LUA_MINSTACK
/2)

	)

357 
	$em±ybuf„r
(
luaL_Buf„r
 * 
B
)

359 
size_t
 
l
 = 
	`bufÊí
(
B
);

360 i‡(
l
 == 0)

363 
	`lua_pushl°rög
(
B
->
L
, B->
buf„r
, 
l
);

364 
B
->
p
 = B->
buf„r
;

365 
B
->
lvl
++;

368 
	}
}

371 
	$adju°°ack
(
luaL_Buf„r
 * 
B
)

373 i‡(
B
->
lvl
 > 1) {

374 
lua_Sèã
 *
L
 = 
B
->L;

375 
togë
 = 1;

376 
size_t
 
t›Àn
 = 
	`lua_°æí
(
L
, -1);

378 
size_t
 
l
 = 
	`lua_°æí
(
L
, -(
togë
 + 1));

379 i‡(
B
->
lvl
 - 
togë
 + 1 >
LIMIT
 || 
t›Àn
 > 
l
) {

380 
t›Àn
 +
l
;

381 
togë
++;

385 
togë
 < 
B
->
lvl
);

386 
	`lua_c⁄ˇt
(
L
, 
togë
);

387 
B
->
lvl
 = B->lv»- 
togë
 + 1;

389 
	}
}

391 
LUALIB_API
 *

392 
	$luaL_¥ïbuf„r
(
luaL_Buf„r
 * 
B
)

394 i‡(
	`em±ybuf„r
(
B
))

395 
	`adju°°ack
(
B
);

396  
B
->
buf„r
;

397 
	}
}

399 
LUALIB_API
 

400 
	$luaL_addl°rög
(
luaL_Buf„r
 * 
B
, c⁄° *
s
, 
size_t
 
l
)

402 
l
--)

403 
	`luaL_putch¨
(
B
, *
s
++);

404 
	}
}

406 
LUALIB_API
 

407 
	$luaL_add°rög
(
luaL_Buf„r
 * 
B
, c⁄° *
s
)

409 
	`luaL_addl°rög
(
B
, 
s
, 
	`°æí
(s));

410 
	}
}

412 
LUALIB_API
 

413 
	$luaL_pushªsu…
(
luaL_Buf„r
 * 
B
)

415 
	`em±ybuf„r
(
B
);

416 
	`lua_c⁄ˇt
(
B
->
L
, B->
lvl
);

417 
B
->
lvl
 = 1;

418 
	}
}

420 
LUALIB_API
 

421 
	$luaL_addvÆue
(
luaL_Buf„r
 * 
B
)

423 
lua_Sèã
 *
L
 = 
B
->L;

424 
size_t
 
vl
 = 
	`lua_°æí
(
L
, -1);

425 i‡(
vl
 <
	`buff‰ì
(
B
)) {

426 
	`mem˝y
(
B
->
p
, 
	`lua_to°rög
(
L
, -1), 
vl
);

427 
B
->
p
 +
vl
;

428 
	`lua_p›
(
L
, 1);

430 i‡(
	`em±ybuf„r
(
B
))

431 
	`lua_ö£π
(
L
, -2);

432 
B
->
lvl
++;

433 
	`adju°°ack
(
B
);

435 
	}
}

437 
LUALIB_API
 

438 
	$luaL_bufföô
(
lua_Sèã
 * 
L
, 
luaL_Buf„r
 * 
B
)

440 
B
->
L
 = L;

441 
B
->
p
 = B->
buf„r
;

442 
B
->
lvl
 = 0;

443 
	}
}

447 
LUALIB_API
 

448 
	$luaL_ªf
(
lua_Sèã
 * 
L
, 
t
)

450 
ªf
;

451 
t
 = 
	`abs_ödex
(
L
,Å);

452 i‡(
	`lua_i¢û
(
L
, -1)) {

453 
	`lua_p›
(
L
, 1);

454  
LUA_REFNIL
;

456 
	`lua_øwgëi
(
L
, 
t
, 
FREELIST_REF
);

457 
ªf
 = 
	`lua_t⁄umbî
(
L
, -1);

458 
	`lua_p›
(
L
, 1);

459 i‡(
ªf
 != 0) {

460 
	`lua_øwgëi
(
L
, 
t
, 
ªf
);

461 
	`lua_øw£ti
(
L
, 
t
, 
FREELIST_REF
);

463 
ªf
 = 
	`luaL_gën
(
L
, 
t
);

464 i‡(
ªf
 < 
RESERVED_REFS
)

465 
ªf
 = 
RESERVED_REFS
;

466 
ªf
++;

467 
	`luaL_£ä
(
L
, 
t
, 
ªf
);

469 
	`lua_øw£ti
(
L
, 
t
, 
ªf
);

470  
ªf
;

471 
	}
}

473 
LUALIB_API
 

474 
	$luaL_uƒef
(
lua_Sèã
 * 
L
, 
t
, 
ªf
)

476 i‡(
ªf
 >= 0) {

477 
t
 = 
	`abs_ödex
(
L
,Å);

478 
	`lua_øwgëi
(
L
, 
t
, 
FREELIST_REF
);

479 
	`lua_øw£ti
(
L
, 
t
, 
ªf
);

480 
	`lua_pushnumbî
(
L
, (
lua_Numbî
Ë
ªf
);

481 
	`lua_øw£ti
(
L
, 
t
, 
FREELIST_REF
);

483 
	}
}

491 
	sLﬂdF
 {

492 
FILE
 *
	mf
;

493 
	mbuff
[
LUAL_BUFFERSIZE
];

494 } 
	tLﬂdF
;

497 
	$gëF
(
lua_Sèã
 * 
L
, *
ud
, 
size_t
 * 
size
)

499 
LﬂdF
 *
lf
 = (LﬂdF *Ë
ud
;

500 ()
L
;

501 i‡(
	`„of
(
lf
->
f
))

502  
NULL
;

503 *
size
 = 
	`‰ód
(
lf
->
buff
, 1, 
LUAL_BUFFERSIZE
,Üf->
f
);

504  (*
size
 > 0Ë? 
lf
->
buff
 : 
NULL
;

505 
	}
}

508 
	$îrfûe
(
lua_Sèã
 * 
L
, 
‚ameödex
)

510 c⁄° *
fûíame
 = 
	`lua_to°rög
(
L
, 
‚ameödex
) + 1;

511 
	`lua_pushf°rög
(
L
, "ˇ¬ŸÑód %s: %s", 
fûíame
, 
	`°ªº‹
(
î∫o
));

512 
	`lua_ªmove
(
L
, 
‚ameödex
);

513  
LUA_ERRFILE
;

514 
	}
}

516 
LUALIB_API
 

517 
	$luaL_lﬂdfûe
(
lua_Sèã
 * 
L
, c⁄° *
fûíame
)

519 
LﬂdF
 
lf
;

520 
°©us
, 
ªad°©us
;

521 
c
;

522 
‚ameödex
 = 
	`lua_gët›
(
L
) + 1;

523 i‡(
fûíame
 =
NULL
) {

524 
	`lua_pushlôîÆ
(
L
, "=stdin");

525 
lf
.
f
 = 
°dö
;

527 
	`lua_pushf°rög
(
L
, "@%s", 
fûíame
);

528 
lf
.
f
 = 
	`f›í
(
fûíame
, "r");

530 i‡(
lf
.
f
 =
NULL
)

531  
	`îrfûe
(
L
, 
‚ameödex
);

532 
c
 = 
	`ungëc
(
	`gëc
(
lf
.
f
),Üf.f);

533 i‡(!(
	`is•a˚
(
c
Ë|| 
	`i•röt
(c)Ë&& 
lf
.
f
 !
°dö
) {

534 
	`f˛o£
(
lf
.
f
);

535 
lf
.
f
 = 
	`f›í
(
fûíame
, "rb");

536 i‡(
lf
.
f
 =
NULL
)

537  
	`îrfûe
(
L
, 
‚ameödex
);

539 
°©us
 = 
	`lua_lﬂd
(
L
, 
gëF
, &
lf
, 
	`lua_to°rög
(L, -1));

540 
ªad°©us
 = 
	`„º‹
(
lf
.
f
);

541 i‡(
lf
.
f
 !
°dö
)

542 
	`f˛o£
(
lf
.
f
);

543 i‡(
ªad°©us
) {

544 
	`lua_£â›
(
L
, 
‚ameödex
);

545  
	`îrfûe
(
L
, 
‚ameödex
);

547 
	`lua_ªmove
(
L
, 
‚ameödex
);

548  
°©us
;

549 
	}
}

551 
	sLﬂdS
 {

552 c⁄° *
	ms
;

553 
size_t
 
	msize
;

554 } 
	tLﬂdS
;

557 
	$gëS
(
lua_Sèã
 * 
L
, *
ud
, 
size_t
 * 
size
)

559 
LﬂdS
 *
ls
 = (LﬂdS *Ë
ud
;

560 ()
L
;

561 i‡(
ls
->
size
 == 0)

562  
NULL
;

563 *
size
 = 
ls
->size;

564 
ls
->
size
 = 0;

565  
ls
->
s
;

566 
	}
}

568 
LUALIB_API
 

569 
	$luaL_lﬂdbuf„r
(
lua_Sèã
 * 
L
, c⁄° *
buff
, 
size_t
 
size
, c⁄° *
«me
)

571 
LﬂdS
 
ls
;

572 
ls
.
s
 = 
buff
;

573 
ls
.
size
 = size;

574  
	`lua_lﬂd
(
L
, 
gëS
, &
ls
, 
«me
);

575 
	}
}

586 
	$ˇŒÆît
(
lua_Sèã
 * 
L
, 
°©us
)

588 i‡(
°©us
 != 0) {

589 
	`lua_gëglobÆ
(
L
, "_ALERT");

590 i‡(
	`lua_isfun˘i⁄
(
L
, -1)) {

591 
	`lua_ö£π
(
L
, -2);

592 
	`lua_ˇŒ
(
L
, 1, 0);

594 
	`Ârötf
(
°dîr
, "%s\n", 
	`lua_to°rög
(
L
, -2));

595 
	`lua_p›
(
L
, 2);

598 
	}
}

601 
	$aux_do
(
lua_Sèã
 * 
L
, 
°©us
)

603 i‡(
°©us
 == 0) {

604 
°©us
 = 
	`lua_pˇŒ
(
L
, 0, 
LUA_MULTRET
, 0);

606 
	`ˇŒÆît
(
L
, 
°©us
);

607  
°©us
;

608 
	}
}

610 
LUALIB_API
 

611 
	$lua_dofûe
(
lua_Sèã
 * 
L
, c⁄° *
fûíame
)

613  
	`aux_do
(
L
, 
	`luaL_lﬂdfûe
(L, 
fûíame
));

614 
	}
}

616 
LUALIB_API
 

617 
	$lua_dobuf„r
(
lua_Sèã
 * 
L
, c⁄° *
buff
, 
size_t
 
size
, c⁄° *
«me
)

619  
	`aux_do
(
L
, 
	`luaL_lﬂdbuf„r
(L, 
buff
, 
size
, 
«me
));

620 
	}
}

622 
LUALIB_API
 

623 
	$lua_do°rög
(
lua_Sèã
 * 
L
, c⁄° *
°r
)

625  
	`lua_dobuf„r
(
L
, 
°r
, 
	`°æí
(str), str);

626 
	}
}

	@lib/tas/src/lua/lauxlib.h

7 #i‚de‡
œuxlib_h


8 
	#œuxlib_h


	)

10 
	~<°ddef.h
>

11 
	~<°dio.h
>

13 
	~"lua.h
"

15 #i‚de‡
LUALIB_API


16 
	#LUALIB_API
 
LUA_API


	)

19 
	sluaL_ªg
 {

20 c⁄° *
	m«me
;

21 
lua_CFun˘i⁄
 
	mfunc
;

22 } 
	tluaL_ªg
;

24 
LUALIB_API
 
luaL_›ílib
(
lua_Sèã
 * 
L
, c⁄° *
lib«me
, c⁄° 
luaL_ªg
 * 
l
, 
nup
);

25 
LUALIB_API
 
luaL_gëmëafõld
(
lua_Sèã
 * 
L
, 
obj
, c⁄° *
e
);

26 
LUALIB_API
 
luaL_ˇŒmëa
(
lua_Sèã
 * 
L
, 
obj
, c⁄° *
e
);

27 
LUALIB_API
 
	$luaL_ty≥º‹
(
lua_Sèã
 * 
L
, 
«rg
, c⁄° *
äame
Ë
	`__©åibuã__
 ((
n‹ëu∫
));

28 
LUALIB_API
 
	$luaL_¨gîr‹
(
lua_Sèã
 * 
L
, 
num¨g
, c⁄° *
exåamsg
Ë
	`__©åibuã__
 ((
n‹ëu∫
));

29 
LUALIB_API
 c⁄° *
	`luaL_checkl°rög
(
lua_Sèã
 * 
L
, 
numArg
, 
size_t
 * 
l
);

30 
LUALIB_API
 c⁄° *
	`luaL_›é°rög
(
lua_Sèã
 * 
L
, 
numArg
, c⁄° *
def
, 
size_t
 * 
l
);

31 
LUALIB_API
 
lua_Numbî
 
	`luaL_checknumbî
(
lua_Sèã
 * 
L
, 
numArg
);

32 
LUALIB_API
 
lua_Numbî
 
	`luaL_›äumbî
(
lua_Sèã
 * 
L
, 
nArg
,Üua_Numbî 
def
);

34 
LUALIB_API
 
	`luaL_check°ack
(
lua_Sèã
 * 
L
, 
sz
, c⁄° *
msg
);

35 
LUALIB_API
 
	`luaL_checkty≥
(
lua_Sèã
 * 
L
, 
«rg
, 
t
);

36 
LUALIB_API
 
	`luaL_check™y
(
lua_Sèã
 * 
L
, 
«rg
);

38 
LUALIB_API
 
	`luaL_√wmë©abÀ
(
lua_Sèã
 * 
L
, c⁄° *
äame
);

39 
LUALIB_API
 
	`luaL_gëmë©abÀ
(
lua_Sèã
 * 
L
, c⁄° *
äame
);

40 
LUALIB_API
 *
	`luaL_checkud©a
(
lua_Sèã
 * 
L
, 
ud
, c⁄° *
äame
);

42 
LUALIB_API
 
	`luaL_whîe
(
lua_Sèã
 * 
L
, 
lvl
);

43 
LUALIB_API
 
	$luaL_îr‹
(
lua_Sèã
 * 
L
, c⁄° *
fmt
, ...Ë
	`__©åibuã__
 ((
n‹ëu∫
));

45 
LUALIB_API
 
	`luaL_föd°rög
(c⁄° *
°
, c⁄° *c⁄° 
l°
[]);

47 
LUALIB_API
 
	`luaL_ªf
(
lua_Sèã
 * 
L
, 
t
);

48 
LUALIB_API
 
	`luaL_uƒef
(
lua_Sèã
 * 
L
, 
t
, 
ªf
);

50 
LUALIB_API
 
	`luaL_gën
(
lua_Sèã
 * 
L
, 
t
);

51 
LUALIB_API
 
	`luaL_£ä
(
lua_Sèã
 * 
L
, 
t
, 
n
);

53 
LUALIB_API
 
	`luaL_lﬂdfûe
(
lua_Sèã
 * 
L
, c⁄° *
fûíame
);

54 
LUALIB_API
 
	`luaL_lﬂdbuf„r
(
lua_Sèã
 * 
L
, c⁄° *
buff
, 
size_t
 
sz
, c⁄° *
«me
);

62 
	#luaL_¨gcheck
(
L
, 
c⁄d
,
num¨g
,
exåamsg
) do { if (!(cond)) \

63 
	`luaL_¨gîr‹
(
L
, 
num¨g
,
exåamsg
); 
	}
} 0)

	)

64 
	#luaL_check°rög
(
L
,
n
Ë
	`luaL_checkl°rög
(L, (n), 
NULL
)

	)

65 
	#luaL_›t°rög
(
L
,
n
,
d
Ë
	`luaL_›é°rög
(L, (n), (d), 
NULL
)

	)

66 
	#luaL_checköt
(
L
,
n
Ë
	`luaL_checknumbî
(L,Ç)

	)

67 
	#luaL_checkl⁄g
(
L
,
n
Ë
	`luaL_checknumbî
(L,Ç)

	)

68 
	#luaL_›töt
(
L
,
n
,
d
Ë
	`luaL_›äumbî
(L,Ç,(
lua_Numbî
)(d))

	)

69 
	#luaL_›é⁄g
(
L
,
n
,
d
Ë
	`luaL_›äumbî
(L,Ç,(
lua_Numbî
)(d))

	)

77 #i‚de‡
LUAL_BUFFERSIZE


78 
	#LUAL_BUFFERSIZE
 
BUFSIZ


	)

81 
	sluaL_Buf„r
 {

82 *
	mp
;

83 
	mlvl
;

84 
lua_Sèã
 *
	mL
;

85 
	mbuf„r
[
LUAL_BUFFERSIZE
];

86 } 
	tluaL_Buf„r
;

88 
	#luaL_putch¨
(
B
,
c
) \

89 (()((
B
)->
p
 < ((B)->
buf„r
+
LUAL_BUFFERSIZE
Ë|| 
	`luaL_¥ïbuf„r
(B)), \

90 (*(
B
)->
p
++ = ()(
c
)))

	)

92 
	#luaL_addsize
(
B
,
n
Ë((B)->
p
 +“))

	)

94 
LUALIB_API
 
luaL_bufföô
(
lua_Sèã
 * 
L
, 
luaL_Buf„r
 * 
B
);

95 
LUALIB_API
 *
luaL_¥ïbuf„r
(
luaL_Buf„r
 * 
B
);

96 
LUALIB_API
 
luaL_addl°rög
(
luaL_Buf„r
 * 
B
, c⁄° *
s
, 
size_t
 
l
);

97 
LUALIB_API
 
luaL_add°rög
(
luaL_Buf„r
 * 
B
, c⁄° *
s
);

98 
LUALIB_API
 
luaL_addvÆue
(
luaL_Buf„r
 * 
B
);

99 
LUALIB_API
 
luaL_pushªsu…
(
luaL_Buf„r
 * 
B
);

107 
LUALIB_API
 
lua_dofûe
(
lua_Sèã
 * 
L
, c⁄° *
fûíame
);

108 
LUALIB_API
 
lua_do°rög
(
lua_Sèã
 * 
L
, c⁄° *
°r
);

109 
LUALIB_API
 
lua_dobuf„r
(
lua_Sèã
 * 
L
, c⁄° *
buff
, 
size_t
 
sz
, c⁄° *
n
);

111 
	#luaL_check_l°r
 
luaL_checkl°rög


	)

112 
	#luaL_›t_l°r
 
luaL_›é°rög


	)

113 
	#luaL_check_numbî
 
luaL_checknumbî


	)

114 
	#luaL_›t_numbî
 
luaL_›äumbî


	)

115 
	#luaL_¨g_check
 
luaL_¨gcheck


	)

116 
	#luaL_check_°rög
 
luaL_check°rög


	)

117 
	#luaL_›t_°rög
 
luaL_›t°rög


	)

118 
	#luaL_check_öt
 
luaL_checköt


	)

119 
	#luaL_check_l⁄g
 
luaL_checkl⁄g


	)

120 
	#luaL_›t_öt
 
luaL_›töt


	)

121 
	#luaL_›t_l⁄g
 
luaL_›é⁄g


	)

	@lib/tas/src/lua/lbaselib.c

7 
	~<˘y≥.h
>

8 
	~<°dio.h
>

9 
	~<°dlib.h
>

10 
	~<°rög.h
>

12 
	#lba£lib_c


	)

14 
	~"lua.h
"

16 
	~"œuxlib.h
"

17 
	~"luÆib.h
"

26 
	$luaB_¥öt
(
lua_Sèã
 * 
L
)

28 
n
 = 
	`lua_gët›
(
L
);

29 
i
;

30 
	`lua_gëglobÆ
(
L
, "tostring");

31 
i
 = 1; i <
n
; i++) {

32 c⁄° *
s
;

33 
	`lua_pushvÆue
(
L
, -1);

34 
	`lua_pushvÆue
(
L
, 
i
);

35 
	`lua_ˇŒ
(
L
, 1, 1);

36 
s
 = 
	`lua_to°rög
(
L
, -1);

37 i‡(
s
 =
NULL
)

38  
	`luaL_îr‹
(
L
, "`tostring' mustÑeturná stringÅo `print'");

39 i‡(
i
 > 1)

40 
	`Âuts
("\t", 
°dout
);

41 
	`Âuts
(
s
, 
°dout
);

42 
	`lua_p›
(
L
, 1);

44 
	`Âuts
("\n", 
°dout
);

46 
	}
}

49 
	$luaB_t⁄umbî
(
lua_Sèã
 * 
L
)

51 
ba£
 = 
	`luaL_›töt
(
L
, 2, 10);

52 i‡(
ba£
 == 10) {

53 
	`luaL_check™y
(
L
, 1);

54 i‡(
	`lua_i¢umbî
(
L
, 1)) {

55 
	`lua_pushnumbî
(
L
, 
	`lua_t⁄umbî
(L, 1));

59 c⁄° *
s1
 = 
	`luaL_check°rög
(
L
, 1);

60 *
s2
;

61 
n
;

62 
	`luaL_¨gcheck
(
L
, 2 <
ba£
 && base <= 36, 2, "base out ofÑange");

63 
n
 = 
	`°πoul
(
s1
, &
s2
, 
ba£
);

64 i‡(
s1
 !
s2
) {

65 
	`is•a˚
(()(*
s2
)))

66 
s2
++;

67 i‡(*
s2
 == '\0') {

68 
	`lua_pushnumbî
(
L
, (
lua_Numbî
Ë
n
);

73 
	`lua_pushnû
(
L
);

75 
	}
}

77 
	$luaB_îr‹
(
lua_Sèã
 * 
L
Ë
	`__©åibuã__
 ((
n‹ëu∫
));

79 
	$luaB_îr‹
(
lua_Sèã
 * 
L
)

81 
Àvñ
 = 
	`luaL_›töt
(
L
, 2, 1);

82 
	`luaL_check™y
(
L
, 1);

83 i‡(!
	`lua_is°rög
(
L
, 1Ë|| 
Àvñ
 == 0)

84 
	`lua_pushvÆue
(
L
, 1);

86 
	`luaL_whîe
(
L
, 
Àvñ
);

87 
	`lua_pushvÆue
(
L
, 1);

88 
	`lua_c⁄ˇt
(
L
, 2);

90 
	`lua_îr‹
(
L
);

91 
	}
}

94 
	$luaB_gëmë©abÀ
(
lua_Sèã
 * 
L
)

96 
	`luaL_check™y
(
L
, 1);

97 i‡(!
	`lua_gëmë©abÀ
(
L
, 1)) {

98 
	`lua_pushnû
(
L
);

101 
	`luaL_gëmëafõld
(
L
, 1, "__metatable");

103 
	}
}

106 
	$luaB_£tmë©abÀ
(
lua_Sèã
 * 
L
)

108 
t
 = 
	`lua_ty≥
(
L
, 2);

109 
	`luaL_checkty≥
(
L
, 1, 
LUA_TTABLE
);

110 
	`luaL_¨gcheck
(
L
, 
t
 =
LUA_TNIL
 ||Å =
LUA_TTABLE
, 2, "nil orÅableÉxpected");

111 i‡(
	`luaL_gëmëafõld
(
L
, 1, "__metatable"))

112 
	`luaL_îr‹
(
L
, "cannot changeáÖrotected metatable");

113 
	`lua_£â›
(
L
, 2);

114 
	`lua_£tmë©abÀ
(
L
, 1);

116 
	}
}

119 
	$gëfunc
(
lua_Sèã
 * 
L
)

121 i‡(
	`lua_isfun˘i⁄
(
L
, 1))

122 
	`lua_pushvÆue
(
L
, 1);

124 
lua_Debug
 
¨
;

125 
Àvñ
 = 
	`luaL_›töt
(
L
, 1, 1);

126 
	`luaL_¨gcheck
(
L
, 
Àvñ
 >= 0, 1, "level must beÇon-negative");

127 i‡(
	`lua_gë°ack
(
L
, 
Àvñ
, &
¨
) == 0)

128 
	`luaL_¨gîr‹
(
L
, 1, "invalidÜevel");

129 
	`lua_gëöfo
(
L
, "f", &
¨
);

130 i‡(
	`lua_i¢û
(
L
, -1))

131 
	`luaL_îr‹
(
L
, "nÿfun˘i⁄Énvú⁄míàf‹Åaû cÆ»©Üevñ %d", 
Àvñ
);

133 
	}
}

136 
	$aux_gë„nv
(
lua_Sèã
 * 
L
)

138 
	`lua_gë„nv
(
L
, -1);

139 
	`lua_pushlôîÆ
(
L
, "__fenv");

140 
	`lua_øwgë
(
L
, -2);

141  !
	`lua_i¢û
(
L
, -1);

142 
	}
}

145 
	$luaB_gë„nv
(
lua_Sèã
 * 
L
)

147 
	`gëfunc
(
L
);

148 i‡(!
	`aux_gë„nv
(
L
))

149 
	`lua_p›
(
L
, 1);

151 
	}
}

154 
	$luaB_£t„nv
(
lua_Sèã
 * 
L
)

156 
	`luaL_checkty≥
(
L
, 2, 
LUA_TTABLE
);

157 
	`gëfunc
(
L
);

158 i‡(
	`aux_gë„nv
(
L
))

159 
	`luaL_îr‹
(
L
, "`setfenv' cannot changeáÖrotectedÉnvironment");

161 
	`lua_p›
(
L
, 2);

162 
	`lua_pushvÆue
(
L
, 2);

163 i‡(
	`lua_i¢umbî
(
L
, 1Ë&& 
	`lua_t⁄umbî
(L, 1) == 0)

164 
	`lua_ª∂a˚
(
L
, 
LUA_GLOBALSINDEX
);

165 i‡(
	`lua_£t„nv
(
L
, -2) == 0)

166 
	`luaL_îr‹
(
L
, "`setfenv' cannot changeÉnvironment of given function");

168 
	}
}

171 
	$luaB_øwequÆ
(
lua_Sèã
 * 
L
)

173 
	`luaL_check™y
(
L
, 1);

174 
	`luaL_check™y
(
L
, 2);

175 
	`lua_pushboﬁón
(
L
, 
	`lua_øwequÆ
(L, 1, 2));

177 
	}
}

180 
	$luaB_øwgë
(
lua_Sèã
 * 
L
)

182 
	`luaL_checkty≥
(
L
, 1, 
LUA_TTABLE
);

183 
	`luaL_check™y
(
L
, 2);

184 
	`lua_øwgë
(
L
, 1);

186 
	}
}

189 
	$luaB_øw£t
(
lua_Sèã
 * 
L
)

191 
	`luaL_checkty≥
(
L
, 1, 
LUA_TTABLE
);

192 
	`luaL_check™y
(
L
, 2);

193 
	`luaL_check™y
(
L
, 3);

194 
	`lua_øw£t
(
L
, 1);

196 
	}
}

199 
	$luaB_gcöfo
(
lua_Sèã
 * 
L
)

201 
	`lua_pushnumbî
(
L
, 
	`lua_gëgccou¡
(L));

202 
	`lua_pushnumbî
(
L
, 
	`lua_gëg˘hªshﬁd
(L));

204 
	}
}

207 
	$luaB_cﬁÀ˘g¨bage
(
lua_Sèã
 * 
L
)

209 
	`lua_£tg˘hªshﬁd
(
L
, 
	`luaL_›töt
(L, 1, 0));

211 
	}
}

214 
	$luaB_ty≥
(
lua_Sèã
 * 
L
)

216 
	`luaL_check™y
(
L
, 1);

217 
	`lua_push°rög
(
L
, 
	`lua_ty≥«me
(L, 
	`lua_ty≥
(L, 1)));

219 
	}
}

222 
	$luaB_√xt
(
lua_Sèã
 * 
L
)

224 
	`luaL_checkty≥
(
L
, 1, 
LUA_TTABLE
);

225 
	`lua_£â›
(
L
, 2);

226 i‡(
	`lua_√xt
(
L
, 1))

229 
	`lua_pushnû
(
L
);

232 
	}
}

235 
	$luaB_∑ús
(
lua_Sèã
 * 
L
)

237 
	`luaL_checkty≥
(
L
, 1, 
LUA_TTABLE
);

238 
	`lua_pushlôîÆ
(
L
, "next");

239 
	`lua_øwgë
(
L
, 
LUA_GLOBALSINDEX
);

240 
	`lua_pushvÆue
(
L
, 1);

241 
	`lua_pushnû
(
L
);

243 
	}
}

246 
	$luaB_ùaús
(
lua_Sèã
 * 
L
)

248 
lua_Numbî
 
i
 = 
	`lua_t⁄umbî
(
L
, 2);

249 
	`luaL_checkty≥
(
L
, 1, 
LUA_TTABLE
);

250 i‡(
i
 =0 && 
	`lua_i¢⁄e
(
L
, 2)) {

251 
	`lua_pushlôîÆ
(
L
, "ipairs");

252 
	`lua_øwgë
(
L
, 
LUA_GLOBALSINDEX
);

253 
	`lua_pushvÆue
(
L
, 1);

254 
	`lua_pushnumbî
(
L
, 0);

257 
i
++;

258 
	`lua_pushnumbî
(
L
, 
i
);

259 
	`lua_øwgëi
(
L
, 1, ()
i
);

260  (
	`lua_i¢û
(
L
, -1)) ? 0 : 2;

262 
	}
}

265 
	$lﬂd_aux
(
lua_Sèã
 * 
L
, 
°©us
)

267 i‡(
°©us
 == 0)

270 
	`lua_pushnû
(
L
);

271 
	`lua_ö£π
(
L
, -2);

274 
	}
}

277 
	$luaB_lﬂd°rög
(
lua_Sèã
 * 
L
)

279 
size_t
 
l
;

280 c⁄° *
s
 = 
	`luaL_checkl°rög
(
L
, 1, &
l
);

281 c⁄° *
chunk«me
 = 
	`luaL_›t°rög
(
L
, 2, 
s
);

282  
	`lﬂd_aux
(
L
, 
	`luaL_lﬂdbuf„r
(L, 
s
, 
l
, 
chunk«me
));

283 
	}
}

286 
	$luaB_lﬂdfûe
(
lua_Sèã
 * 
L
)

288 c⁄° *
‚ame
 = 
	`luaL_›t°rög
(
L
, 1, 
NULL
);

289  
	`lﬂd_aux
(
L
, 
	`luaL_lﬂdfûe
(L, 
‚ame
));

290 
	}
}

293 
	$luaB_dofûe
(
lua_Sèã
 * 
L
)

295 c⁄° *
‚ame
 = 
	`luaL_›t°rög
(
L
, 1, 
NULL
);

296 
n
 = 
	`lua_gët›
(
L
);

297 
°©us
 = 
	`luaL_lﬂdfûe
(
L
, 
‚ame
);

298 i‡(
°©us
 != 0)

299 
	`lua_îr‹
(
L
);

300 
	`lua_ˇŒ
(
L
, 0, 
LUA_MULTRET
);

301  
	`lua_gët›
(
L
Ë- 
n
;

302 
	}
}

305 
	$luaB_as£π
(
lua_Sèã
 * 
L
)

307 
	`luaL_check™y
(
L
, 1);

308 i‡(!
	`lua_toboﬁón
(
L
, 1))

309  
	`luaL_îr‹
(
L
, "%s", 
	`luaL_›t°rög
(L, 2, "assertion failed!"));

310 
	`lua_£â›
(
L
, 1);

312 
	}
}

315 
	$luaB_u≈ack
(
lua_Sèã
 * 
L
)

317 
n
, 
i
;

318 
	`luaL_checkty≥
(
L
, 1, 
LUA_TTABLE
);

319 
n
 = 
	`luaL_gën
(
L
, 1);

320 
	`luaL_check°ack
(
L
, 
n
, "tableÅoo bigÅo unpack");

321 
i
 = 1; i <
n
; i++)

322 
	`lua_øwgëi
(
L
, 1, 
i
);

323  
n
;

324 
	}
}

327 
	$luaB_pˇŒ
(
lua_Sèã
 * 
L
)

329 
°©us
;

330 
	`luaL_check™y
(
L
, 1);

331 
°©us
 = 
	`lua_pˇŒ
(
L
, 
	`lua_gët›
(LË- 1, 
LUA_MULTRET
, 0);

332 
	`lua_pushboﬁón
(
L
, (
°©us
 == 0));

333 
	`lua_ö£π
(
L
, 1);

334  
	`lua_gët›
(
L
);

335 
	}
}

338 
	$luaB_xpˇŒ
(
lua_Sèã
 * 
L
)

340 
°©us
;

341 
	`luaL_check™y
(
L
, 2);

342 
	`lua_£â›
(
L
, 2);

343 
	`lua_ö£π
(
L
, 1);

344 
°©us
 = 
	`lua_pˇŒ
(
L
, 0, 
LUA_MULTRET
, 1);

345 
	`lua_pushboﬁón
(
L
, (
°©us
 == 0));

346 
	`lua_ª∂a˚
(
L
, 1);

347  
	`lua_gët›
(
L
);

348 
	}
}

351 
	$luaB_to°rög
(
lua_Sèã
 * 
L
)

353 
buff
[128];

354 
	`luaL_check™y
(
L
, 1);

355 i‡(
	`luaL_ˇŒmëa
(
L
, 1, "__tostring"))

357 
	`lua_ty≥
(
L
, 1)) {

358 
LUA_TNUMBER
:

359 
	`lua_push°rög
(
L
, 
	`lua_to°rög
(L, 1));

361 
LUA_TSTRING
:

362 
	`lua_pushvÆue
(
L
, 1);

364 
LUA_TBOOLEAN
:

365 
	`lua_push°rög
(
L
, (
	`lua_toboﬁón
(L, 1) ? "true" : "false"));

367 
LUA_TTABLE
:

368 
	`•rötf
(
buff
, "èbÀ: %p", 
	`lua_t›oöãr
(
L
, 1));

370 
LUA_TFUNCTION
:

371 
	`•rötf
(
buff
, "fun˘i⁄: %p", 
	`lua_t›oöãr
(
L
, 1));

373 
LUA_TUSERDATA
:

374 
LUA_TLIGHTUSERDATA
:

375 
	`•rötf
(
buff
, "u£rd©a: %p", 
	`lua_tou£rd©a
(
L
, 1));

377 
LUA_TTHREAD
:

378 
	`•rötf
(
buff
, "thªad: %p", (*)
	`lua_tŸhªad
(
L
, 1));

380 
LUA_TNIL
:

381 
	`lua_pushlôîÆ
(
L
, "nil");

384 
	`lua_push°rög
(
L
, 
buff
);

386 
	}
}

389 
	$luaB_√w¥oxy
(
lua_Sèã
 * 
L
)

391 
	`lua_£â›
(
L
, 1);

392 
	`lua_√wu£rd©a
(
L
, 0);

393 i‡(
	`lua_toboﬁón
(
L
, 1) == 0)

395 i‡(
	`lua_isboﬁón
(
L
, 1)) {

396 
	`lua_√wèbÀ
(
L
);

397 
	`lua_pushvÆue
(
L
, -1);

398 
	`lua_pushboﬁón
(
L
, 1);

399 
	`lua_øw£t
(
L
, 
	`lua_upvÆueödex
(1));

401 
vÆid¥oxy
 = 0;

402 i‡(
	`lua_gëmë©abÀ
(
L
, 1)) {

403 
	`lua_øwgë
(
L
, 
	`lua_upvÆueödex
(1));

404 
vÆid¥oxy
 = 
	`lua_toboﬁón
(
L
, -1);

405 
	`lua_p›
(
L
, 1);

407 
	`luaL_¨gcheck
(
L
, 
vÆid¥oxy
, 1, "boolean orÖroxyÉxpected");

408 
	`lua_gëmë©abÀ
(
L
, 1);

410 
	`lua_£tmë©abÀ
(
L
, 2);

412 
	}
}

421 
	#REQTAB
 "_LOADED"

	)

424 
	#LUA_PATH
 "LUA_PATH"

	)

426 #i‚de‡
LUA_PATH_SEP


427 
	#LUA_PATH_SEP
 ';'

	)

430 #i‚de‡
LUA_PATH_MARK


431 
	#LUA_PATH_MARK
 '?'

	)

434 #i‚de‡
LUA_PATH_DEFAULT


435 
	#LUA_PATH_DEFAULT
 "?;?.lua"

	)

439 
	$gë∑th
(
lua_Sèã
 * 
L
)

441 c⁄° *
∑th
;

442 
	`lua_gëglobÆ
(
L
, 
LUA_PATH
);

443 
∑th
 = 
	`lua_to°rög
(
L
, -1);

444 
	`lua_p›
(
L
, 1);

445 i‡(
∑th
)

446  
∑th
;

447 
∑th
 = 
	`gëív
(
LUA_PATH
);

448 i‡(
∑th
)

449  
∑th
;

450  
LUA_PATH_DEFAULT
;

451 
	}
}

454 
	$push√xç©h
(
lua_Sèã
 * 
L
, c⁄° *
∑th
)

456 c⁄° *
l
;

457 i‡(*
∑th
 == '\0')

458  
NULL
;

459 i‡(*
∑th
 =
LUA_PATH_SEP
)

460 
∑th
++;

461 
l
 = 
	`°rchr
(
∑th
, 
LUA_PATH_SEP
);

462 i‡(
l
 =
NULL
)

463 
l
 = 
∑th
 + 
	`°æí
(path);

464 
	`lua_pushl°rög
(
L
, 
∑th
, 
l
 -Öath);

465  
l
;

466 
	}
}

469 
	$pushcompo£«me
(
lua_Sèã
 * 
L
)

471 c⁄° *
∑th
 = 
	`lua_to°rög
(
L
, -1);

472 c⁄° *
wûd
;

473 
n
 = 1;

474 (
wûd
 = 
	`°rchr
(
∑th
, 
LUA_PATH_MARK
)Ë!
NULL
) {

476 
	`luaL_check°ack
(
L
, 3, "too many marks ináÖath component");

477 
	`lua_pushl°rög
(
L
, 
∑th
, 
wûd
 -Öath);

478 
	`lua_pushvÆue
(
L
, 1);

479 
∑th
 = 
wûd
 + 1;

480 
n
 += 2;

482 
	`lua_push°rög
(
L
, 
∑th
);

483 
	`lua_c⁄ˇt
(
L
, 
n
);

484 
	}
}

487 
	$luaB_ªquúe
(
lua_Sèã
 * 
L
)

489 c⁄° *
∑th
;

490 
°©us
 = 
LUA_ERRFILE
;

491 
	`luaL_check°rög
(
L
, 1);

492 
	`lua_£â›
(
L
, 1);

493 
	`lua_gëglobÆ
(
L
, 
REQTAB
);

494 i‡(!
	`lua_i°abÀ
(
L
, 2))

495  
	`luaL_îr‹
(
L
, "`" 
REQTAB
 "' isÇotáÅable");

496 
∑th
 = 
	`gë∑th
(
L
);

497 
	`lua_pushvÆue
(
L
, 1);

498 
	`lua_øwgë
(
L
, 2);

499 i‡(
	`lua_toboﬁón
(
L
, -1))

502 
°©us
 =
LUA_ERRFILE
) {

503 
	`lua_£â›
(
L
, 3);

504 i‡((
∑th
 = 
	`push√xç©h
(
L
,Ö©h)Ë=
NULL
)

506 
	`pushcompo£«me
(
L
);

507 
°©us
 = 
	`luaL_lﬂdfûe
(
L
, 
	`lua_to°rög
(L, -1));

510 
°©us
) {

513 
	`lua_gëglobÆ
(
L
, "_REQUIREDNAME");

514 
	`lua_ö£π
(
L
, -2);

515 
	`lua_pushvÆue
(
L
, 1);

516 
	`lua_£tglobÆ
(
L
, "_REQUIREDNAME");

517 
	`lua_ˇŒ
(
L
, 0, 1);

518 
	`lua_ö£π
(
L
, -2);

519 
	`lua_£tglobÆ
(
L
, "_REQUIREDNAME");

520 i‡(
	`lua_i¢û
(
L
, -1)) {

521 
	`lua_pushboﬁón
(
L
, 1);

522 
	`lua_ª∂a˚
(
L
, -2);

524 
	`lua_pushvÆue
(
L
, 1);

525 
	`lua_pushvÆue
(
L
, -2);

526 
	`lua_øw£t
(
L
, 2);

529 
LUA_ERRFILE
:

531  
	`luaL_îr‹
(
L
, "couldÇŸÜﬂdÖackagê`%s' fromÖ©h `%s'", 
	`lua_to°rög
(L, 1), 
	`gë∑th
(L));

535  
	`luaL_îr‹
(
L
, "îr‹ÜﬂdögÖackagê`%s' (%s)", 
	`lua_to°rög
(L, 1),Üua_tostring(L, -1));

538 
	}
}

542 c⁄° 
luaL_ªg
 
	gba£_funcs
[] = {

543 {"îr‹", 
luaB_îr‹
},

544 {"gëmë©abÀ", 
luaB_gëmë©abÀ
},

545 {"£tmë©abÀ", 
luaB_£tmë©abÀ
},

546 {"gë„nv", 
luaB_gë„nv
},

547 {"£t„nv", 
luaB_£t„nv
},

548 {"√xt", 
luaB_√xt
},

549 {"ùaús", 
luaB_ùaús
},

550 {"∑ús", 
luaB_∑ús
},

551 {"¥öt", 
luaB_¥öt
},

552 {"t⁄umbî", 
luaB_t⁄umbî
},

553 {"to°rög", 
luaB_to°rög
},

554 {"ty≥", 
luaB_ty≥
},

555 {"as£π", 
luaB_as£π
},

556 {"u≈ack", 
luaB_u≈ack
},

557 {"øwequÆ", 
luaB_øwequÆ
},

558 {"øwgë", 
luaB_øwgë
},

559 {"øw£t", 
luaB_øw£t
},

560 {"pˇŒ", 
luaB_pˇŒ
},

561 {"xpˇŒ", 
luaB_xpˇŒ
},

562 {"cﬁÀ˘g¨bage", 
luaB_cﬁÀ˘g¨bage
},

563 {"gcöfo", 
luaB_gcöfo
},

564 {"lﬂdfûe", 
luaB_lﬂdfûe
},

565 {"dofûe", 
luaB_dofûe
},

566 {"lﬂd°rög", 
luaB_lﬂd°rög
},

567 {"ªquúe", 
luaB_ªquúe
},

568 {
NULL
, NULL}

578 
	$auxªsume
(
lua_Sèã
 * 
L
,Üua_Sèã * 
co
, 
«rg
)

580 
°©us
;

581 i‡(!
	`lua_check°ack
(
co
, 
«rg
))

582 
	`luaL_îr‹
(
L
, "too manyárgumentsÅoÑesume");

583 
	`lua_xmove
(
L
, 
co
, 
«rg
);

584 
°©us
 = 
	`lua_ªsume
(
co
, 
«rg
);

585 i‡(
°©us
 == 0) {

586 
ƒes
 = 
	`lua_gët›
(
co
);

587 i‡(!
	`lua_check°ack
(
L
, 
ƒes
))

588 
	`luaL_îr‹
(
L
, "too manyÑesultsÅoÑesume");

589 
	`lua_xmove
(
co
, 
L
, 
ƒes
);

590  
ƒes
;

592 
	`lua_xmove
(
co
, 
L
, 1);

595 
	}
}

598 
	$luaB_c‹esume
(
lua_Sèã
 * 
L
)

600 
lua_Sèã
 *
co
 = 
	`lua_tŸhªad
(
L
, 1);

601 
r
;

602 
	`luaL_¨gcheck
(
L
, 
co
, 1, "coroutineÉxpected");

603 
r
 = 
	`auxªsume
(
L
, 
co
, 
	`lua_gët›
(L) - 1);

604 i‡(
r
 < 0) {

605 
	`lua_pushboﬁón
(
L
, 0);

606 
	`lua_ö£π
(
L
, -2);

609 
	`lua_pushboﬁón
(
L
, 1);

610 
	`lua_ö£π
(
L
, -(
r
 + 1));

611  
r
 + 1;

613 
	}
}

616 
	$luaB_auxwøp
(
lua_Sèã
 * 
L
)

618 
lua_Sèã
 *
co
 = 
	`lua_tŸhªad
(
L
, 
	`lua_upvÆueödex
(1));

619 
r
 = 
	`auxªsume
(
L
, 
co
, 
	`lua_gët›
(L));

620 i‡(
r
 < 0) {

621 i‡(
	`lua_is°rög
(
L
, -1)) {

622 
	`luaL_whîe
(
L
, 1);

623 
	`lua_ö£π
(
L
, -2);

624 
	`lua_c⁄ˇt
(
L
, 2);

626 
	`lua_îr‹
(
L
);

628  
r
;

629 
	}
}

632 
	$luaB_co¸óã
(
lua_Sèã
 * 
L
)

634 
lua_Sèã
 *
NL
 = 
	`lua_√wthªad
(
L
);

635 
	`luaL_¨gcheck
(
L
, 
	`lua_isfun˘i⁄
(L, 1Ë&& !
	`lua_iscfun˘i⁄
(L, 1), 1, "Lua functionÉxpected");

636 
	`lua_pushvÆue
(
L
, 1);

637 
	`lua_xmove
(
L
, 
NL
, 1);

639 
	}
}

642 
	$luaB_cowøp
(
lua_Sèã
 * 
L
)

644 
	`luaB_co¸óã
(
L
);

645 
	`lua_pushc˛osuª
(
L
, 
luaB_auxwøp
, 1);

647 
	}
}

650 
	$luaB_yõld
(
lua_Sèã
 * 
L
)

652  
	`lua_yõld
(
L
, 
	`lua_gët›
(L));

653 
	}
}

656 
	$luaB_co°©us
(
lua_Sèã
 * 
L
)

658 
lua_Sèã
 *
co
 = 
	`lua_tŸhªad
(
L
, 1);

659 
	`luaL_¨gcheck
(
L
, 
co
, 1, "coroutineÉxpected");

660 i‡(
L
 =
co
)

661 
	`lua_pushlôîÆ
(
L
, "running");

663 
lua_Debug
 
¨
;

664 i‡(
	`lua_gë°ack
(
co
, 0, &
¨
Ë=0 && 
	`lua_gët›
(co) == 0)

665 
	`lua_pushlôîÆ
(
L
, "dead");

667 
	`lua_pushlôîÆ
(
L
, "suspended");

670 
	}
}

672 c⁄° 
luaL_ªg
 
	gco_funcs
[] = {

673 {"¸óã", 
luaB_co¸óã
},

674 {"wøp", 
luaB_cowøp
},

675 {"ªsume", 
luaB_c‹esume
},

676 {"yõld", 
luaB_yõld
},

677 {"°©us", 
luaB_co°©us
},

678 {
NULL
, NULL}

684 
	$ba£_›í
(
lua_Sèã
 * 
L
)

686 
	`lua_pushlôîÆ
(
L
, "_G");

687 
	`lua_pushvÆue
(
L
, 
LUA_GLOBALSINDEX
);

688 
	`luaL_›ílib
(
L
, 
NULL
, 
ba£_funcs
, 0);

689 
	`lua_pushlôîÆ
(
L
, "_VERSION");

690 
	`lua_pushlôîÆ
(
L
, 
LUA_VERSION
);

691 
	`lua_øw£t
(
L
, -3);

693 
	`lua_pushlôîÆ
(
L
, "newproxy");

694 
	`lua_√wèbÀ
(
L
);

695 
	`lua_pushvÆue
(
L
, -1);

696 
	`lua_£tmë©abÀ
(
L
, -2);

697 
	`lua_pushlôîÆ
(
L
, "__mode");

698 
	`lua_pushlôîÆ
(
L
, "k");

699 
	`lua_øw£t
(
L
, -3);

700 
	`lua_pushc˛osuª
(
L
, 
luaB_√w¥oxy
, 1);

701 
	`lua_øw£t
(
L
, -3);

702 
	`lua_øw£t
(
L
, -1);

703 
	}
}

705 
LUALIB_API
 

706 
	$lua›í_ba£
(
lua_Sèã
 * 
L
)

708 
	`ba£_›í
(
L
);

709 
	`luaL_›ílib
(
L
, 
LUA_COLIBNAME
, 
co_funcs
, 0);

710 
	`lua_√wèbÀ
(
L
);

711 
	`lua_£tglobÆ
(
L
, 
REQTAB
);

713 
	}
}

	@lib/tas/src/lua/lcode.c

7 
	~<°dlib.h
>

9 
	#lcode_c


	)

11 
	~"lua.h
"

13 
	~"lcode.h
"

14 
	~"ldebug.h
"

15 
	~"ldo.h
"

16 
	~"Œex.h
"

17 
	~"lmem.h
"

18 
	~"lobje˘.h
"

19 
	~"l›codes.h
"

20 
	~"Õ¨£r.h
"

21 
	~"…abÀ.h
"

23 
	#hasjumps
(
e
Ë(”)->
t
 !”)->
f
)

	)

26 
	$luaK_nû
(
FuncSèã
 * 
fs
, 
‰om
, 
n
)

28 
In°ru˘i⁄
 *
¥evious
;

29 i‡(
fs
->
pc
 > fs->
œ°èrgë
 &&

30 
	`GET_OPCODE
(*(
¥evious
 = &
fs
->
f
->
code
[fs->
pc
 - 1])Ë=
OP_LOADNIL
) {

31 
p‰om
 = 
	`GETARG_A
(*
¥evious
);

32 
±o
 = 
	`GETARG_B
(*
¥evious
);

33 i‡(
p‰om
 <
‰om
 && from <
±o
 + 1) {

34 i‡(
‰om
 + 
n
 - 1 > 
±o
)

35 
	`SETARG_B
(*
¥evious
, 
‰om
 + 
n
 - 1);

39 
	`luaK_codeABC
(
fs
, 
OP_LOADNIL
, 
‰om
, from + 
n
 - 1, 0);

40 
	}
}

43 
	$luaK_jump
(
FuncSèã
 * 
fs
)

45 
jpc
 = 
fs
->jpc;

46 
j
;

47 
fs
->
jpc
 = 
NO_JUMP
;

48 
j
 = 
	`luaK_codeAsBx
(
fs
, 
OP_JMP
, 0, 
NO_JUMP
);

49 
	`luaK_c⁄ˇt
(
fs
, &
j
, 
jpc
);

50  
j
;

51 
	}
}

54 
	$luaK_c⁄djump
(
FuncSèã
 * 
fs
, 
OpCode
 
›
, 
A
, 
B
, 
C
)

56 
	`luaK_codeABC
(
fs
, 
›
, 
A
, 
B
, 
C
);

57  
	`luaK_jump
(
fs
);

58 
	}
}

61 
	$luaK_fixjump
(
FuncSèã
 * 
fs
, 
pc
, 
de°
)

63 
In°ru˘i⁄
 *
jmp
 = &
fs
->
f
->
code
[
pc
];

64 
off£t
 = 
de°
 - (
pc
 + 1);

65 
	`lua_as£π
(
de°
 !
NO_JUMP
);

66 i‡(
	`abs
(
off£t
Ë> 
MAXARG_sBx
)

67 
	`luaX_sy¡axîr‹
(
fs
->
ls
, "control structureÅooÜong");

68 
	`SETARG_sBx
(*
jmp
, 
off£t
);

69 
	}
}

76 
	$luaK_gëœbñ
(
FuncSèã
 * 
fs
)

78 
fs
->
œ°èrgë
 = fs->
pc
;

79  
fs
->
pc
;

80 
	}
}

83 
	$luaK_gëjump
(
FuncSèã
 * 
fs
, 
pc
)

85 
off£t
 = 
	`GETARG_sBx
(
fs
->
f
->
code
[
pc
]);

86 i‡(
off£t
 =
NO_JUMP
)

87  
NO_JUMP
;

89  (
pc
 + 1Ë+ 
off£t
;

90 
	}
}

92 
In°ru˘i⁄
 *

93 
	$gëjumpc⁄åﬁ
(
FuncSèã
 * 
fs
, 
pc
)

95 
In°ru˘i⁄
 *
pi
 = &
fs
->
f
->
code
[
pc
];

96 i‡(
pc
 >1 && 
	`ã°OpMode
(
	`GET_OPCODE
(*(
pi
 - 1)), 
OpModeT
))

97  
pi
 - 1;

99  
pi
;

100 
	}
}

107 
	$√ed_vÆue
(
FuncSèã
 * 
fs
, 
li°
, 
c⁄d
)

109 ; 
li°
 !
NO_JUMP
;Üi° = 
	`luaK_gëjump
(
fs
,Üist)) {

110 
In°ru˘i⁄
 
i
 = *
	`gëjumpc⁄åﬁ
(
fs
, 
li°
);

111 i‡(
	`GET_OPCODE
(
i
Ë!
OP_TEST
 || 
	`GETARG_C
(iË!
c⁄d
)

115 
	}
}

118 
	$∑tchã°ªg
(
In°ru˘i⁄
 * 
i
, 
ªg
)

120 i‡(
ªg
 =
NO_REG
)

121 
ªg
 = 
	`GETARG_B
(*
i
);

122 
	`SETARG_A
(*
i
, 
ªg
);

123 
	}
}

126 
	$luaK_∑tchli°aux
(
FuncSèã
 * 
fs
, 
li°
, 
â¨gë
, 
åeg
, 
·¨gë
, 
‰eg
, 
dèrgë
)

128 
li°
 !
NO_JUMP
) {

129 
√xt
 = 
	`luaK_gëjump
(
fs
, 
li°
);

130 
In°ru˘i⁄
 *
i
 = 
	`gëjumpc⁄åﬁ
(
fs
, 
li°
);

131 i‡(
	`GET_OPCODE
(*
i
Ë!
OP_TEST
) {

132 
	`lua_as£π
(
dèrgë
 !
NO_JUMP
);

133 
	`luaK_fixjump
(
fs
, 
li°
, 
dèrgë
);

135 i‡(
	`GETARG_C
(*
i
)) {

136 
	`lua_as£π
(
â¨gë
 !
NO_JUMP
);

137 
	`∑tchã°ªg
(
i
, 
åeg
);

138 
	`luaK_fixjump
(
fs
, 
li°
, 
â¨gë
);

140 
	`lua_as£π
(
·¨gë
 !
NO_JUMP
);

141 
	`∑tchã°ªg
(
i
, 
‰eg
);

142 
	`luaK_fixjump
(
fs
, 
li°
, 
·¨gë
);

145 
li°
 = 
√xt
;

147 
	}
}

150 
	$luaK_disch¨gejpc
(
FuncSèã
 * 
fs
)

152 
	`luaK_∑tchli°aux
(
fs
, fs->
jpc
, fs->
pc
, 
NO_REG
, fs->pc, NO_REG, fs->pc);

153 
fs
->
jpc
 = 
NO_JUMP
;

154 
	}
}

157 
	$luaK_∑tchli°
(
FuncSèã
 * 
fs
, 
li°
, 
èrgë
)

159 i‡(
èrgë
 =
fs
->
pc
)

160 
	`luaK_∑tchtohîe
(
fs
, 
li°
);

162 
	`lua_as£π
(
èrgë
 < 
fs
->
pc
);

163 
	`luaK_∑tchli°aux
(
fs
, 
li°
, 
èrgë
, 
NO_REG
,Åarget, NO_REG,Åarget);

165 
	}
}

168 
	$luaK_∑tchtohîe
(
FuncSèã
 * 
fs
, 
li°
)

170 
	`luaK_gëœbñ
(
fs
);

171 
	`luaK_c⁄ˇt
(
fs
, &fs->
jpc
, 
li°
);

172 
	}
}

175 
	$luaK_c⁄ˇt
(
FuncSèã
 * 
fs
, *
l1
, 
l2
)

177 i‡(
l2
 =
NO_JUMP
)

179 i‡(*
l1
 =
NO_JUMP
)

180 *
l1
 = 
l2
;

182 
li°
 = *
l1
;

183 
√xt
;

184 (
√xt
 = 
	`luaK_gëjump
(
fs
, 
li°
)Ë!
NO_JUMP
)

185 
li°
 = 
√xt
;

186 
	`luaK_fixjump
(
fs
, 
li°
, 
l2
);

188 
	}
}

191 
	$luaK_check°ack
(
FuncSèã
 * 
fs
, 
n
)

193 
√w°ack
 = 
fs
->
‰ìªg
 + 
n
;

194 i‡(
√w°ack
 > 
fs
->
f
->
max°acksize
) {

195 i‡(
√w°ack
 >
MAXSTACK
)

196 
	`luaX_sy¡axîr‹
(
fs
->
ls
, "function orÉxpressionÅoo complex");

197 
fs
->
f
->
max°acksize
 = 
	`ˇ°
(
lu_byã
, 
√w°ack
);

199 
	}
}

202 
	$luaK_ª£rvîegs
(
FuncSèã
 * 
fs
, 
n
)

204 
	`luaK_check°ack
(
fs
, 
n
);

205 
fs
->
‰ìªg
 +
n
;

206 
	}
}

209 
	$‰ìªg
(
FuncSèã
 * 
fs
, 
ªg
)

211 i‡(
ªg
 >
fs
->
«˘v¨
 &&Ñeg < 
MAXSTACK
) {

212 
fs
->
‰ìªg
--;

213 
	`lua_as£π
(
ªg
 =
fs
->
‰ìªg
);

215 
	}
}

218 
	$‰ìexp
(
FuncSèã
 * 
fs
, 
expdesc
 * 
e
)

220 i‡(
e
->
k
 =
VNONRELOC
)

221 
	`‰ìªg
(
fs
, 
e
->
öfo
);

222 
	}
}

225 
	$addk
(
FuncSèã
 * 
fs
, 
TObje˘
 * 
k
, TObje˘ * 
v
)

227 c⁄° 
TObje˘
 *
idx
 = 
	`luaH_gë
(
fs
->
h
, 
k
);

228 i‡(
	`âi¢umbî
(
idx
)) {

229 
	`lua_as£π
(
	`luaO_øwequÆObj
(&
fs
->
f
->
k
[
	`ˇ°
(, 
	`nvÆue
(
idx
))], 
v
));

230  
	`ˇ°
(, 
	`nvÆue
(
idx
));

232 
PrŸo
 *
f
 = 
fs
->f;

233 
	`luaM_growve˘‹
(
fs
->
L
, 
f
->
k
, fs->
nk
, f->
sizek
, 
TObje˘
, 
MAXARG_Bx
, "constantÅable overflow");

234 
	`£tobj2n
(&
f
->
k
[
fs
->
nk
], 
v
);

235 
	`£ävÆue
(
	`luaH_£t
(
fs
->
L
, fs->
h
, 
k
), 
	`ˇ°
(
lua_Numbî
, fs->
nk
));

236  
fs
->
nk
++;

238 
	}
}

241 
	$luaK_°rögK
(
FuncSèã
 * 
fs
, 
TSåög
 * 
s
)

243 
TObje˘
 
o
;

244 
	`£tsvÆue
(&
o
, 
s
);

245  
	`addk
(
fs
, &
o
, &o);

246 
	}
}

249 
	$luaK_numbîK
(
FuncSèã
 * 
fs
, 
lua_Numbî
 
r
)

251 
TObje˘
 
o
;

252 
	`£ävÆue
(&
o
, 
r
);

253  
	`addk
(
fs
, &
o
, &o);

254 
	}
}

257 
	$nû_c⁄°™t
(
FuncSèã
 * 
fs
)

259 
TObje˘
 
k
, 
v
;

260 
	`£äûvÆue
(&
v
);

261 
	`£thvÆue
(&
k
, 
fs
->
h
);

262  
	`addk
(
fs
, &
k
, &
v
);

263 
	}
}

266 
	$luaK_£tˇŒªtu∫s
(
FuncSèã
 * 
fs
, 
expdesc
 * 
e
, 
ƒesu…s
)

268 i‡(
e
->
k
 =
VCALL
) {

269 
	`SETARG_C
(
	`gëcode
(
fs
, 
e
), 
ƒesu…s
 + 1);

270 i‡(
ƒesu…s
 == 1) {

271 
e
->
k
 = 
VNONRELOC
;

272 
e
->
öfo
 = 
	`GETARG_A
(
	`gëcode
(
fs
,É));

275 
	}
}

278 
	$luaK_disch¨gev¨s
(
FuncSèã
 * 
fs
, 
expdesc
 * 
e
)

280 
e
->
k
) {

281 
VLOCAL
:

283 
e
->
k
 = 
VNONRELOC
;

286 
VUPVAL
:

288 
e
->
öfo
 = 
	`luaK_codeABC
(
fs
, 
OP_GETUPVAL
, 0,É->info, 0);

289 
e
->
k
 = 
VRELOCABLE
;

292 
VGLOBAL
:

294 
e
->
öfo
 = 
	`luaK_codeABx
(
fs
, 
OP_GETGLOBAL
, 0,É->info);

295 
e
->
k
 = 
VRELOCABLE
;

298 
VINDEXED
:

300 
	`‰ìªg
(
fs
, 
e
->
aux
);

301 
	`‰ìªg
(
fs
, 
e
->
öfo
);

302 
e
->
öfo
 = 
	`luaK_codeABC
(
fs
, 
OP_GETTABLE
, 0,É->öfo,É->
aux
);

303 
e
->
k
 = 
VRELOCABLE
;

306 
VCALL
:

308 
	`luaK_£tˇŒªtu∫s
(
fs
, 
e
, 1);

314 
	}
}

317 
	$code_œbñ
(
FuncSèã
 * 
fs
, 
A
, 
b
, 
jump
)

319 
	`luaK_gëœbñ
(
fs
);

320  
	`luaK_codeABC
(
fs
, 
OP_LOADBOOL
, 
A
, 
b
, 
jump
);

321 
	}
}

324 
	$disch¨ge2ªg
(
FuncSèã
 * 
fs
, 
expdesc
 * 
e
, 
ªg
)

326 
	`luaK_disch¨gev¨s
(
fs
, 
e
);

327 
e
->
k
) {

328 
VNIL
:

330 
	`luaK_nû
(
fs
, 
ªg
, 1);

333 
VFALSE
:

334 
VTRUE
:

336 
	`luaK_codeABC
(
fs
, 
OP_LOADBOOL
, 
ªg
, 
e
->
k
 =
VTRUE
, 0);

339 
VK
:

341 
	`luaK_codeABx
(
fs
, 
OP_LOADK
, 
ªg
, 
e
->
öfo
);

344 
VRELOCABLE
:

346 
In°ru˘i⁄
 *
pc
 = &
	`gëcode
(
fs
, 
e
);

347 
	`SETARG_A
(*
pc
, 
ªg
);

350 
VNONRELOC
:

352 i‡(
ªg
 !
e
->
öfo
)

353 
	`luaK_codeABC
(
fs
, 
OP_MOVE
, 
ªg
, 
e
->
öfo
, 0);

358 
	`lua_as£π
(
e
->
k
 =
VVOID
 ||É->k =
VJMP
);

362 
e
->
öfo
 = 
ªg
;

363 
e
->
k
 = 
VNONRELOC
;

364 
	}
}

367 
	$disch¨ge2™yªg
(
FuncSèã
 * 
fs
, 
expdesc
 * 
e
)

369 i‡(
e
->
k
 !
VNONRELOC
) {

370 
	`luaK_ª£rvîegs
(
fs
, 1);

371 
	`disch¨ge2ªg
(
fs
, 
e
, fs->
‰ìªg
 - 1);

373 
	}
}

376 
	$luaK_exp2ªg
(
FuncSèã
 * 
fs
, 
expdesc
 * 
e
, 
ªg
)

378 
	`disch¨ge2ªg
(
fs
, 
e
, 
ªg
);

379 i‡(
e
->
k
 =
VJMP
)

380 
	`luaK_c⁄ˇt
(
fs
, &
e
->
t
,É->
öfo
);

381 i‡(
	`hasjumps
(
e
)) {

382 
föÆ
;

383 
p_f
 = 
NO_JUMP
;

384 
p_t
 = 
NO_JUMP
;

385 i‡(
	`√ed_vÆue
(
fs
, 
e
->
t
, 1Ë||Çìd_vÆue(fs,É->
f
, 0)) {

386 
fj
 = 
NO_JUMP
;

387 i‡(
e
->
k
 !
VJMP
)

388 
fj
 = 
	`luaK_jump
(
fs
);

389 
p_f
 = 
	`code_œbñ
(
fs
, 
ªg
, 0, 1);

390 
p_t
 = 
	`code_œbñ
(
fs
, 
ªg
, 1, 0);

391 
	`luaK_∑tchtohîe
(
fs
, 
fj
);

393 
föÆ
 = 
	`luaK_gëœbñ
(
fs
);

394 
	`luaK_∑tchli°aux
(
fs
, 
e
->
f
, 
p_f
, 
NO_REG
, 
föÆ
, 
ªg
,Ö_f);

395 
	`luaK_∑tchli°aux
(
fs
, 
e
->
t
, 
föÆ
, 
ªg
, 
p_t
, 
NO_REG
,Ö_t);

397 
e
->
f
 =É->
t
 = 
NO_JUMP
;

398 
e
->
öfo
 = 
ªg
;

399 
e
->
k
 = 
VNONRELOC
;

400 
	}
}

403 
	$luaK_exp2√xåeg
(
FuncSèã
 * 
fs
, 
expdesc
 * 
e
)

405 
	`luaK_disch¨gev¨s
(
fs
, 
e
);

406 
	`‰ìexp
(
fs
, 
e
);

407 
	`luaK_ª£rvîegs
(
fs
, 1);

408 
	`luaK_exp2ªg
(
fs
, 
e
, fs->
‰ìªg
 - 1);

409 
	}
}

412 
	$luaK_exp2™yªg
(
FuncSèã
 * 
fs
, 
expdesc
 * 
e
)

414 
	`luaK_disch¨gev¨s
(
fs
, 
e
);

415 i‡(
e
->
k
 =
VNONRELOC
) {

416 i‡(!
	`hasjumps
(
e
))

417  
e
->
öfo
;

418 i‡(
e
->
öfo
 >
fs
->
«˘v¨
) {

419 
	`luaK_exp2ªg
(
fs
, 
e
,É->
öfo
);

420  
e
->
öfo
;

423 
	`luaK_exp2√xåeg
(
fs
, 
e
);

424  
e
->
öfo
;

425 
	}
}

428 
	$luaK_exp2vÆ
(
FuncSèã
 * 
fs
, 
expdesc
 * 
e
)

430 i‡(
	`hasjumps
(
e
))

431 
	`luaK_exp2™yªg
(
fs
, 
e
);

433 
	`luaK_disch¨gev¨s
(
fs
, 
e
);

434 
	}
}

437 
	$luaK_exp2RK
(
FuncSèã
 * 
fs
, 
expdesc
 * 
e
)

439 
	`luaK_exp2vÆ
(
fs
, 
e
);

440 
e
->
k
) {

441 
VNIL
:

443 i‡(
fs
->
nk
 + 
MAXSTACK
 <
MAXARG_C
) {

444 
e
->
öfo
 = 
	`nû_c⁄°™t
(
fs
);

445 
e
->
k
 = 
VK
;

446  
e
->
öfo
 + 
MAXSTACK
;

450 
VK
:

452 i‡(
e
->
öfo
 + 
MAXSTACK
 <
MAXARG_C
)

453  
e
->
öfo
 + 
MAXSTACK
;

461  
	`luaK_exp2™yªg
(
fs
, 
e
);

462 
	}
}

465 
	$luaK_°‹ev¨
(
FuncSèã
 * 
fs
, 
expdesc
 * 
v¨
,Éxpdes¯* 
exp
)

467 
v¨
->
k
) {

468 
VLOCAL
:

470 
	`‰ìexp
(
fs
, 
exp
);

471 
	`luaK_exp2ªg
(
fs
, 
exp
, 
v¨
->
öfo
);

474 
VUPVAL
:

476 
e
 = 
	`luaK_exp2™yªg
(
fs
, 
exp
);

477 
	`luaK_codeABC
(
fs
, 
OP_SETUPVAL
, 
e
, 
v¨
->
öfo
, 0);

480 
VGLOBAL
:

482 
e
 = 
	`luaK_exp2™yªg
(
fs
, 
exp
);

483 
	`luaK_codeABx
(
fs
, 
OP_SETGLOBAL
, 
e
, 
v¨
->
öfo
);

486 
VINDEXED
:

488 
e
 = 
	`luaK_exp2RK
(
fs
, 
exp
);

489 
	`luaK_codeABC
(
fs
, 
OP_SETTABLE
, 
v¨
->
öfo
, v¨->
aux
, 
e
);

494 
	`lua_as£π
(0);

498 
	`‰ìexp
(
fs
, 
exp
);

499 
	}
}

502 
	$luaK_£lf
(
FuncSèã
 * 
fs
, 
expdesc
 * 
e
,Éxpdes¯* 
key
)

504 
func
;

505 
	`luaK_exp2™yªg
(
fs
, 
e
);

506 
	`‰ìexp
(
fs
, 
e
);

507 
func
 = 
fs
->
‰ìªg
;

508 
	`luaK_ª£rvîegs
(
fs
, 2);

509 
	`luaK_codeABC
(
fs
, 
OP_SELF
, 
func
, 
e
->
öfo
, 
	`luaK_exp2RK
(fs, 
key
));

510 
	`‰ìexp
(
fs
, 
key
);

511 
e
->
öfo
 = 
func
;

512 
e
->
k
 = 
VNONRELOC
;

513 
	}
}

516 
	$övîtjump
(
FuncSèã
 * 
fs
, 
expdesc
 * 
e
)

518 
In°ru˘i⁄
 *
pc
 = 
	`gëjumpc⁄åﬁ
(
fs
, 
e
->
öfo
);

519 
	`lua_as£π
(
	`ã°OpMode
(
	`GET_OPCODE
(*
pc
), 
OpModeT
Ë&& GET_OPCODE(*pcË!
OP_TEST
);

520 
	`SETARG_A
(*
pc
, !(
	`GETARG_A
(*pc)));

521 
	}
}

524 
	$jump⁄c⁄d
(
FuncSèã
 * 
fs
, 
expdesc
 * 
e
, 
c⁄d
)

526 i‡(
e
->
k
 =
VRELOCABLE
) {

527 
In°ru˘i⁄
 
õ
 = 
	`gëcode
(
fs
, 
e
);

528 i‡(
	`GET_OPCODE
(
õ
Ë=
OP_NOT
) {

529 
fs
->
pc
--;

530  
	`luaK_c⁄djump
(
fs
, 
OP_TEST
, 
NO_REG
, 
	`GETARG_B
(
õ
), !
c⁄d
);

534 
	`disch¨ge2™yªg
(
fs
, 
e
);

535 
	`‰ìexp
(
fs
, 
e
);

536  
	`luaK_c⁄djump
(
fs
, 
OP_TEST
, 
NO_REG
, 
e
->
öfo
, 
c⁄d
);

537 
	}
}

540 
	$luaK_goi·rue
(
FuncSèã
 * 
fs
, 
expdesc
 * 
e
)

542 
pc
;

543 
	`luaK_disch¨gev¨s
(
fs
, 
e
);

544 
e
->
k
) {

545 
VK
:

546 
VTRUE
:

548 
pc
 = 
NO_JUMP
;

551 
VFALSE
:

553 
pc
 = 
	`luaK_jump
(
fs
);

556 
VJMP
:

558 
	`övîtjump
(
fs
, 
e
);

559 
pc
 = 
e
->
öfo
;

564 
pc
 = 
	`jump⁄c⁄d
(
fs
, 
e
, 0);

568 
	`luaK_c⁄ˇt
(
fs
, &
e
->
f
, 
pc
);

569 
	}
}

572 
	$luaK_goifÁl£
(
FuncSèã
 * 
fs
, 
expdesc
 * 
e
)

574 
pc
;

575 
	`luaK_disch¨gev¨s
(
fs
, 
e
);

576 
e
->
k
) {

577 
VNIL
:

578 
VFALSE
:

580 
pc
 = 
NO_JUMP
;

583 
VTRUE
:

585 
pc
 = 
	`luaK_jump
(
fs
);

588 
VJMP
:

590 
pc
 = 
e
->
öfo
;

595 
pc
 = 
	`jump⁄c⁄d
(
fs
, 
e
, 1);

599 
	`luaK_c⁄ˇt
(
fs
, &
e
->
t
, 
pc
);

600 
	}
}

603 
	$codíŸ
(
FuncSèã
 * 
fs
, 
expdesc
 * 
e
)

605 
	`luaK_disch¨gev¨s
(
fs
, 
e
);

606 
e
->
k
) {

607 
VNIL
:

608 
VFALSE
:

610 
e
->
k
 = 
VTRUE
;

613 
VK
:

614 
VTRUE
:

616 
e
->
k
 = 
VFALSE
;

619 
VJMP
:

621 
	`övîtjump
(
fs
, 
e
);

624 
VRELOCABLE
:

625 
VNONRELOC
:

627 
	`disch¨ge2™yªg
(
fs
, 
e
);

628 
	`‰ìexp
(
fs
, 
e
);

629 
e
->
öfo
 = 
	`luaK_codeABC
(
fs
, 
OP_NOT
, 0,É->info, 0);

630 
e
->
k
 = 
VRELOCABLE
;

635 
	`lua_as£π
(0);

641 
ãmp
 = 
e
->
f
;

642 
e
->
f
 =É->
t
;

643 
e
->
t
 = 
ãmp
;

645 
	}
}

648 
	$luaK_ödexed
(
FuncSèã
 * 
fs
, 
expdesc
 * 
t
,Éxpdes¯* 
k
)

650 
t
->
aux
 = 
	`luaK_exp2RK
(
fs
, 
k
);

651 
t
->
k
 = 
VINDEXED
;

652 
	}
}

655 
	$luaK_¥efix
(
FuncSèã
 * 
fs
, 
UnO¥
 
›
, 
expdesc
 * 
e
)

657 i‡(
›
 =
OPR_MINUS
) {

658 
	`luaK_exp2vÆ
(
fs
, 
e
);

659 i‡(
e
->
k
 =
VK
 && 
	`âi¢umbî
(&
fs
->
f
->k[e->
öfo
]))

660 
e
->
öfo
 = 
	`luaK_numbîK
(
fs
, -
	`nvÆue
(&fs->
f
->
k
[e->info]));

662 
	`luaK_exp2™yªg
(
fs
, 
e
);

663 
	`‰ìexp
(
fs
, 
e
);

664 
e
->
öfo
 = 
	`luaK_codeABC
(
fs
, 
OP_UNM
, 0,É->info, 0);

665 
e
->
k
 = 
VRELOCABLE
;

668 
	`codíŸ
(
fs
, 
e
);

669 
	}
}

672 
	$luaK_öfix
(
FuncSèã
 * 
fs
, 
BöO¥
 
›
, 
expdesc
 * 
v
)

674 
›
) {

675 
OPR_AND
:

677 
	`luaK_goi·rue
(
fs
, 
v
);

678 
	`luaK_∑tchtohîe
(
fs
, 
v
->
t
);

679 
v
->
t
 = 
NO_JUMP
;

682 
OPR_OR
:

684 
	`luaK_goifÁl£
(
fs
, 
v
);

685 
	`luaK_∑tchtohîe
(
fs
, 
v
->
f
);

686 
v
->
f
 = 
NO_JUMP
;

689 
OPR_CONCAT
:

691 
	`luaK_exp2√xåeg
(
fs
, 
v
);

696 
	`luaK_exp2RK
(
fs
, 
v
);

700 
	}
}

703 
	$codebö›
(
FuncSèã
 * 
fs
, 
expdesc
 * 
ªs
, 
BöO¥
 
›
, 
o1
, 
o2
)

705 i‡(
›
 <
OPR_POW
) {

706 
OpCode
 
›c
 = 
	`ˇ°
(OpCode, (
›
 - 
OPR_ADD
Ë+ 
OP_ADD
);

707 
ªs
->
öfo
 = 
	`luaK_codeABC
(
fs
, 
›c
, 0, 
o1
, 
o2
);

708 
ªs
->
k
 = 
VRELOCABLE
;

710 c⁄° 
OpCode
 
›s
[] = { 
OP_EQ
, OP_EQ, 
OP_LT
, 
OP_LE
, OP_LT, OP_LE };

711 
c⁄d
 = 1;

712 i‡(
›
 >
OPR_GT
) {

713 
ãmp
;

714 
ãmp
 = 
o1
;

715 
o1
 = 
o2
;

716 
o2
 = 
ãmp
;

717 } i‡(
›
 =
OPR_NE
)

718 
c⁄d
 = 0;

719 
ªs
->
öfo
 = 
	`luaK_c⁄djump
(
fs
, 
›s
[
›
 - 
OPR_NE
], 
c⁄d
, 
o1
, 
o2
);

720 
ªs
->
k
 = 
VJMP
;

722 
	}
}

725 
	$luaK_posfix
(
FuncSèã
 * 
fs
, 
BöO¥
 
›
, 
expdesc
 * 
e1
,Éxpdes¯* 
e2
)

727 
›
) {

728 
OPR_AND
:

730 
	`lua_as£π
(
e1
->
t
 =
NO_JUMP
);

731 
	`luaK_disch¨gev¨s
(
fs
, 
e2
);

732 
	`luaK_c⁄ˇt
(
fs
, &
e1
->
f
, 
e2
->f);

733 
e1
->
k
 = 
e2
->k;

734 
e1
->
öfo
 = 
e2
->info;

735 
e1
->
aux
 = 
e2
->aux;

736 
e1
->
t
 = 
e2
->t;

739 
OPR_OR
:

741 
	`lua_as£π
(
e1
->
f
 =
NO_JUMP
);

742 
	`luaK_disch¨gev¨s
(
fs
, 
e2
);

743 
	`luaK_c⁄ˇt
(
fs
, &
e1
->
t
, 
e2
->t);

744 
e1
->
k
 = 
e2
->k;

745 
e1
->
öfo
 = 
e2
->info;

746 
e1
->
aux
 = 
e2
->aux;

747 
e1
->
f
 = 
e2
->f;

750 
OPR_CONCAT
:

752 
	`luaK_exp2vÆ
(
fs
, 
e2
);

753 i‡(
e2
->
k
 =
VRELOCABLE
 && 
	`GET_OPCODE
(
	`gëcode
(
fs
,É2)Ë=
OP_CONCAT
) {

754 
	`lua_as£π
(
e1
->
öfo
 =
	`GETARG_B
(
	`gëcode
(
fs
, 
e2
)) - 1);

755 
	`‰ìexp
(
fs
, 
e1
);

756 
	`SETARG_B
(
	`gëcode
(
fs
, 
e2
), 
e1
->
öfo
);

757 
e1
->
k
 = 
e2
->k;

758 
e1
->
öfo
 = 
e2
->info;

760 
	`luaK_exp2√xåeg
(
fs
, 
e2
);

761 
	`‰ìexp
(
fs
, 
e2
);

762 
	`‰ìexp
(
fs
, 
e1
);

763 
e1
->
öfo
 = 
	`luaK_codeABC
(
fs
, 
OP_CONCAT
, 0,É1->öfo, 
e2
->info);

764 
e1
->
k
 = 
VRELOCABLE
;

770 
o1
 = 
	`luaK_exp2RK
(
fs
, 
e1
);

771 
o2
 = 
	`luaK_exp2RK
(
fs
, 
e2
);

772 
	`‰ìexp
(
fs
, 
e2
);

773 
	`‰ìexp
(
fs
, 
e1
);

774 
	`codebö›
(
fs
, 
e1
, 
›
, 
o1
, 
o2
);

777 
	}
}

780 
	$luaK_fixlöe
(
FuncSèã
 * 
fs
, 
löe
)

782 
fs
->
f
->
löeöfo
[fs->
pc
 - 1] = 
löe
;

783 
	}
}

786 
	$luaK_code
(
FuncSèã
 * 
fs
, 
In°ru˘i⁄
 
i
, 
löe
)

788 
PrŸo
 *
f
 = 
fs
->f;

789 
	`luaK_disch¨gejpc
(
fs
);

791 
	`luaM_growve˘‹
(
fs
->
L
, 
f
->
code
, fs->
pc
, f->
sizecode
, 
In°ru˘i⁄
, 
MAX_INT
, "code size overflow");

792 
f
->
code
[
fs
->
pc
] = 
i
;

794 
	`luaM_growve˘‹
(
fs
->
L
, 
f
->
löeöfo
, fs->
pc
, f->
sizñöeöfo
, , 
MAX_INT
, "code size overflow");

795 
f
->
löeöfo
[
fs
->
pc
] = 
löe
;

796  
fs
->
pc
++;

797 
	}
}

800 
	$luaK_codeABC
(
FuncSèã
 * 
fs
, 
OpCode
 
o
, 
a
, 
b
, 
c
)

802 
	`lua_as£π
(
	`gëOpMode
(
o
Ë=
iABC
);

803  
	`luaK_code
(
fs
, 
	`CREATE_ABC
(
o
, 
a
, 
b
, 
c
), fs->
ls
->
œ°löe
);

804 
	}
}

807 
	$luaK_codeABx
(
FuncSèã
 * 
fs
, 
OpCode
 
o
, 
a
, 
bc
)

809 
	`lua_as£π
(
	`gëOpMode
(
o
Ë=
iABx
 || gëOpMode(oË=
iAsBx
);

810  
	`luaK_code
(
fs
, 
	`CREATE_ABx
(
o
, 
a
, 
bc
), fs->
ls
->
œ°löe
);

811 
	}
}

	@lib/tas/src/lua/lcode.h

7 #i‚de‡
lcode_h


8 
	#lcode_h


	)

10 
	~"Œex.h
"

11 
	~"lobje˘.h
"

12 
	~"l›codes.h
"

13 
	~"Õ¨£r.h
"

19 
	#NO_JUMP
 (-1)

	)

24 
	eBöO¥
 {

25 
	mOPR_ADD
, 
	mOPR_SUB
, 
	mOPR_MULT
, 
	mOPR_DIV
, 
	mOPR_POW
,

26 
	mOPR_CONCAT
,

27 
	mOPR_NE
, 
	mOPR_EQ
,

28 
	mOPR_LT
, 
	mOPR_LE
, 
	mOPR_GT
, 
	mOPR_GE
,

29 
	mOPR_AND
, 
	mOPR_OR
,

30 
	mOPR_NOBINOPR


31 } 
	tBöO¥
;

33 
	#bö›i°e°
(
›
Ë((›Ë>
OPR_NE
)

	)

35 
	eUnO¥
 { 
	mOPR_MINUS
, 
	mOPR_NOT
, 
	mOPR_NOUNOPR
 } 
	tUnO¥
;

37 
	#gëcode
(
fs
,
e
Ë((fs)->
f
->
code
[”)->
öfo
])

	)

39 
	#luaK_codeAsBx
(
fs
,
o
,
A
,
sBx
Ë
	`luaK_codeABx
(fs,o,A,(sBx)+
MAXARG_sBx
)

	)

41 
luaK_code
(
FuncSèã
 * 
fs
, 
In°ru˘i⁄
 
i
, 
löe
);

42 
luaK_codeABx
(
FuncSèã
 * 
fs
, 
OpCode
 
o
, 
A
, 
Bx
);

43 
luaK_codeABC
(
FuncSèã
 * 
fs
, 
OpCode
 
o
, 
A
, 
B
, 
C
);

44 
luaK_fixlöe
(
FuncSèã
 * 
fs
, 
löe
);

45 
luaK_nû
(
FuncSèã
 * 
fs
, 
‰om
, 
n
);

46 
luaK_ª£rvîegs
(
FuncSèã
 * 
fs
, 
n
);

47 
luaK_check°ack
(
FuncSèã
 * 
fs
, 
n
);

48 
luaK_°rögK
(
FuncSèã
 * 
fs
, 
TSåög
 * 
s
);

49 
luaK_numbîK
(
FuncSèã
 * 
fs
, 
lua_Numbî
 
r
);

50 
luaK_disch¨gev¨s
(
FuncSèã
 * 
fs
, 
expdesc
 * 
e
);

51 
luaK_exp2™yªg
(
FuncSèã
 * 
fs
, 
expdesc
 * 
e
);

52 
luaK_exp2√xåeg
(
FuncSèã
 * 
fs
, 
expdesc
 * 
e
);

53 
luaK_exp2vÆ
(
FuncSèã
 * 
fs
, 
expdesc
 * 
e
);

54 
luaK_exp2RK
(
FuncSèã
 * 
fs
, 
expdesc
 * 
e
);

55 
luaK_£lf
(
FuncSèã
 * 
fs
, 
expdesc
 * 
e
,Éxpdes¯* 
key
);

56 
luaK_ödexed
(
FuncSèã
 * 
fs
, 
expdesc
 * 
t
,Éxpdes¯* 
k
);

57 
luaK_goi·rue
(
FuncSèã
 * 
fs
, 
expdesc
 * 
e
);

58 
luaK_goifÁl£
(
FuncSèã
 * 
fs
, 
expdesc
 * 
e
);

59 
luaK_°‹ev¨
(
FuncSèã
 * 
fs
, 
expdesc
 * 
v¨
,Éxpdes¯* 
e
);

60 
luaK_£tˇŒªtu∫s
(
FuncSèã
 * 
fs
, 
expdesc
 * 
v¨
, 
ƒesu…s
);

61 
luaK_jump
(
FuncSèã
 * 
fs
);

62 
luaK_∑tchli°
(
FuncSèã
 * 
fs
, 
li°
, 
èrgë
);

63 
luaK_∑tchtohîe
(
FuncSèã
 * 
fs
, 
li°
);

64 
luaK_c⁄ˇt
(
FuncSèã
 * 
fs
, *
l1
, 
l2
);

65 
luaK_gëœbñ
(
FuncSèã
 * 
fs
);

66 
luaK_¥efix
(
FuncSèã
 * 
fs
, 
UnO¥
 
›
, 
expdesc
 * 
v
);

67 
luaK_öfix
(
FuncSèã
 * 
fs
, 
BöO¥
 
›
, 
expdesc
 * 
v
);

68 
luaK_posfix
(
FuncSèã
 * 
fs
, 
BöO¥
 
›
, 
expdesc
 * 
v1
,Éxpdes¯* 
v2
);

	@lib/tas/src/lua/ldblib.c

7 
	~<°dio.h
>

8 
	~<°dlib.h
>

9 
	~<°rög.h
>

11 
	#ldblib_c


	)

13 
	~"lua.h
"

15 
	~"œuxlib.h
"

16 
	~"luÆib.h
"

19 
	$£âabss
(
lua_Sèã
 * 
L
, c⁄° *
i
, c⁄° *
v
)

21 
	`lua_push°rög
(
L
, 
i
);

22 
	`lua_push°rög
(
L
, 
v
);

23 
	`lua_øw£t
(
L
, -3);

24 
	}
}

27 
	$£âabsi
(
lua_Sèã
 * 
L
, c⁄° *
i
, 
v
)

29 
	`lua_push°rög
(
L
, 
i
);

30 
	`lua_pushnumbî
(
L
, (
lua_Numbî
Ë
v
);

31 
	`lua_øw£t
(
L
, -3);

32 
	}
}

35 
	$gëöfo
(
lua_Sèã
 * 
L
)

37 
lua_Debug
 
¨
;

38 c⁄° *
›ti⁄s
 = 
	`luaL_›t°rög
(
L
, 2, "flnSu");

39 i‡(
	`lua_i¢umbî
(
L
, 1)) {

40 i‡(!
	`lua_gë°ack
(
L
, 
	`lua_t⁄umbî
(L, 1), &
¨
)) {

41 
	`lua_pushnû
(
L
);

44 } i‡(
	`lua_isfun˘i⁄
(
L
, 1)) {

45 
	`lua_pushf°rög
(
L
, ">%s", 
›ti⁄s
);

46 
›ti⁄s
 = 
	`lua_to°rög
(
L
, -1);

47 
	`lua_pushvÆue
(
L
, 1);

49  
	`luaL_¨gîr‹
(
L
, 1, "function orÜevelÉxpected");

50 i‡(!
	`lua_gëöfo
(
L
, 
›ti⁄s
, &
¨
))

51  
	`luaL_¨gîr‹
(
L
, 2, "invalid option");

52 
	`lua_√wèbÀ
(
L
);

53 ; *
›ti⁄s
; options++) {

54 *
›ti⁄s
) {

56 
	`£âabss
(
L
, "sour˚", 
¨
.
sour˚
);

57 
	`£âabss
(
L
, "sh‹t_§c", 
¨
.
sh‹t_§c
);

58 
	`£âabsi
(
L
, "löedeföed", 
¨
.
löedeföed
);

59 
	`£âabss
(
L
, "wh©", 
¨
.
wh©
);

62 
	`£âabsi
(
L
, "cuºíéöe", 
¨
.
cuºíéöe
);

65 
	`£âabsi
(
L
, "nups", 
¨
.
nups
);

68 
	`£âabss
(
L
, "«me", 
¨
.
«me
);

69 
	`£âabss
(
L
, "«mewh©", 
¨
.
«mewh©
);

72 
	`lua_pushlôîÆ
(
L
, "func");

73 
	`lua_pushvÆue
(
L
, -3);

74 
	`lua_øw£t
(
L
, -3);

79 
	}
}

82 
	$gëloˇl
(
lua_Sèã
 * 
L
)

84 
lua_Debug
 
¨
;

85 c⁄° *
«me
;

86 i‡(!
	`lua_gë°ack
(
L
, 
	`luaL_checköt
(L, 1), &
¨
))

87  
	`luaL_¨gîr‹
(
L
, 1, "level out ofÑange");

88 
«me
 = 
	`lua_gëloˇl
(
L
, &
¨
, 
	`luaL_checköt
(L, 2));

89 i‡(
«me
) {

90 
	`lua_push°rög
(
L
, 
«me
);

91 
	`lua_pushvÆue
(
L
, -2);

94 
	`lua_pushnû
(
L
);

97 
	}
}

100 
	$£éoˇl
(
lua_Sèã
 * 
L
)

102 
lua_Debug
 
¨
;

103 i‡(!
	`lua_gë°ack
(
L
, 
	`luaL_checköt
(L, 1), &
¨
))

104  
	`luaL_¨gîr‹
(
L
, 1, "level out ofÑange");

105 
	`luaL_check™y
(
L
, 3);

106 
	`lua_push°rög
(
L
, 
	`lua_£éoˇl
(L, &
¨
, 
	`luaL_checköt
(L, 2)));

108 
	}
}

111 
	$auxupvÆue
(
lua_Sèã
 * 
L
, 
gë
)

113 c⁄° *
«me
;

114 
n
 = 
	`luaL_checköt
(
L
, 2);

115 
	`luaL_checkty≥
(
L
, 1, 
LUA_TFUNCTION
);

116 i‡(
	`lua_iscfun˘i⁄
(
L
, 1))

118 
«me
 = 
gë
 ? 
	`lua_gëupvÆue
(
L
, 1, 
n
Ë: 
	`lua_£tupvÆue
(L, 1,Ç);

119 i‡(
«me
 =
NULL
)

121 
	`lua_push°rög
(
L
, 
«me
);

122 
	`lua_ö£π
(
L
, -(
gë
 + 1));

123  
gë
 + 1;

124 
	}
}

127 
	$gëupvÆue
(
lua_Sèã
 * 
L
)

129  
	`auxupvÆue
(
L
, 1);

130 
	}
}

133 
	$£tupvÆue
(
lua_Sèã
 * 
L
)

135 
	`luaL_check™y
(
L
, 3);

136  
	`auxupvÆue
(
L
, 0);

137 
	}
}

139 c⁄° 
	gKEY_HOOK
 = 'h';

142 
	$hookf
(
lua_Sèã
 * 
L
, 
lua_Debug
 * 
¨
)

144 c⁄° *c⁄° 
hook«mes
[] = { "call", "return", "line", "count", "tailÑeturn" };

145 
	`lua_pushlightu£rd©a
(
L
, &
KEY_HOOK
);

146 
	`lua_øwgë
(
L
, 
LUA_REGISTRYINDEX
);

147 i‡(
	`lua_isfun˘i⁄
(
L
, -1)) {

148 
	`lua_push°rög
(
L
, 
hook«mes
[()
¨
->
evít
]);

149 i‡(
¨
->
cuºíéöe
 >= 0)

150 
	`lua_pushnumbî
(
L
, (
lua_Numbî
Ë
¨
->
cuºíéöe
);

152 
	`lua_pushnû
(
L
);

153 
	`lua_as£π
(
	`lua_gëöfo
(
L
, "lS", 
¨
));

154 
	`lua_ˇŒ
(
L
, 2, 0);

156 
	`lua_p›
(
L
, 1);

157 
	}
}

160 
	$makemask
(c⁄° *
smask
, 
cou¡
)

162 
mask
 = 0;

163 i‡(
	`°rchr
(
smask
, 'c'))

164 
mask
 |
LUA_MASKCALL
;

165 i‡(
	`°rchr
(
smask
, 'r'))

166 
mask
 |
LUA_MASKRET
;

167 i‡(
	`°rchr
(
smask
, 'l'))

168 
mask
 |
LUA_MASKLINE
;

169 i‡(
cou¡
 > 0)

170 
mask
 |
LUA_MASKCOUNT
;

171  
mask
;

172 
	}
}

175 
	$unmakemask
(
mask
, *
smask
)

177 
i
 = 0;

178 i‡(
mask
 & 
LUA_MASKCALL
)

179 
smask
[
i
++] = 'c';

180 i‡(
mask
 & 
LUA_MASKRET
)

181 
smask
[
i
++] = 'r';

182 i‡(
mask
 & 
LUA_MASKLINE
)

183 
smask
[
i
++] = 'l';

184 
smask
[
i
] = '\0';

185  
smask
;

186 
	}
}

189 
	$£thook
(
lua_Sèã
 * 
L
)

191 i‡(
	`lua_i¢⁄e‹nû
(
L
, 1)) {

192 
	`lua_£â›
(
L
, 1);

193 
	`lua_£thook
(
L
, 
NULL
, 0, 0);

195 c⁄° *
smask
 = 
	`luaL_check°rög
(
L
, 2);

196 
cou¡
 = 
	`luaL_›töt
(
L
, 3, 0);

197 
	`luaL_checkty≥
(
L
, 1, 
LUA_TFUNCTION
);

198 
	`lua_£thook
(
L
, 
hookf
, 
	`makemask
(
smask
, 
cou¡
), count);

200 
	`lua_pushlightu£rd©a
(
L
, &
KEY_HOOK
);

201 
	`lua_pushvÆue
(
L
, 1);

202 
	`lua_øw£t
(
L
, 
LUA_REGISTRYINDEX
);

204 
	}
}

207 
	$gëhook
(
lua_Sèã
 * 
L
)

209 
buff
[5];

210 
mask
 = 
	`lua_gëhookmask
(
L
);

211 
lua_Hook
 
hook
 = 
	`lua_gëhook
(
L
);

212 i‡(
hook
 !
NULL
 && hook !
hookf
)

213 
	`lua_pushlôîÆ
(
L
, "external hook");

215 
	`lua_pushlightu£rd©a
(
L
, &
KEY_HOOK
);

216 
	`lua_øwgë
(
L
, 
LUA_REGISTRYINDEX
);

218 
	`lua_push°rög
(
L
, 
	`unmakemask
(
mask
, 
buff
));

219 
	`lua_pushnumbî
(
L
, 
	`lua_gëhookcou¡
(L));

221 
	}
}

224 
	$debug
(
lua_Sèã
 * 
L
)

227 
buf„r
[250];

228 
	`Âuts
("lua_debug> ", 
°dîr
);

229 i‡(
	`fgës
(
buf„r
, (buf„r), 
°dö
Ë=0 || 
	`°rcmp
(buffer, "cont\n") == 0)

231 
	`lua_do°rög
(
L
, 
buf„r
);

232 
	`lua_£â›
(
L
, 0);

234 
	}
}

236 
	#LEVELS1
 12

	)

237 
	#LEVELS2
 10

	)

240 
	$îr‹fb
(
lua_Sèã
 * 
L
)

242 
Àvñ
 = 1;

243 
fú°∑π
 = 1;

244 
lua_Debug
 
¨
;

245 i‡(
	`lua_gët›
(
L
) == 0)

246 
	`lua_pushlôîÆ
(
L
, "");

247 i‡(!
	`lua_is°rög
(
L
, 1))

250 
	`lua_pushlôîÆ
(
L
, "\n");

251 
	`lua_pushlôîÆ
(
L
, "stackÅraceback:");

252 
	`lua_gë°ack
(
L
, 
Àvñ
++, &
¨
)) {

253 i‡(
Àvñ
 > 
LEVELS1
 && 
fú°∑π
) {

255 i‡(!
	`lua_gë°ack
(
L
, 
Àvñ
 + 
LEVELS2
, &
¨
))

256 
Àvñ
--;

258 
	`lua_pushlôîÆ
(
L
, "\n\t...");

259 
	`lua_gë°ack
(
L
, 
Àvñ
 + 
LEVELS2
, &
¨
))

260 
Àvñ
++;

262 
fú°∑π
 = 0;

265 
	`lua_pushlôîÆ
(
L
, "\n\t");

266 
	`lua_gëöfo
(
L
, "S∆", &
¨
);

267 
	`lua_pushf°rög
(
L
, "%s:", 
¨
.
sh‹t_§c
);

268 i‡(
¨
.
cuºíéöe
 > 0)

269 
	`lua_pushf°rög
(
L
, "%d:", 
¨
.
cuºíéöe
);

270 *
¨
.
«mewh©
) {

275 
	`lua_pushf°rög
(
L
, " i¿fun˘i⁄ `%s'", 
¨
.
«me
);

279 i‡(*
¨
.
wh©
 == 'm')

280 
	`lua_pushf°rög
(
L
, " in main chunk");

281 i‡(*
¨
.
wh©
 == 'C' || *ar.what == 't')

282 
	`lua_pushlôîÆ
(
L
, " ?");

284 
	`lua_pushf°rög
(
L
, " i¿fun˘i⁄ <%s:%d>", 
¨
.
sh‹t_§c
,ár.
löedeföed
);

287 
	`lua_c⁄ˇt
(
L
, 
	`lua_gët›
(L));

289 
	`lua_c⁄ˇt
(
L
, 
	`lua_gët›
(L));

291 
	}
}

293 c⁄° 
luaL_ªg
 
	gdblib
[] = {

294 {"gëloˇl", 
gëloˇl
},

295 {"gëöfo", 
gëöfo
},

296 {"gëhook", 
gëhook
},

297 {"gëupvÆue", 
gëupvÆue
},

298 {"£thook", 
£thook
},

299 {"£éoˇl", 
£éoˇl
},

300 {"£tupvÆue", 
£tupvÆue
},

301 {"debug", 
debug
},

302 {"åa˚back", 
îr‹fb
},

303 {
NULL
, NULL}

306 
LUALIB_API
 

307 
	$lua›í_debug
(
lua_Sèã
 * 
L
)

309 
	`luaL_›ílib
(
L
, 
LUA_DBLIBNAME
, 
dblib
, 0);

310 
	`lua_pushlôîÆ
(
L
, "_TRACEBACK");

311 
	`lua_pushcfun˘i⁄
(
L
, 
îr‹fb
);

312 
	`lua_£âabÀ
(
L
, 
LUA_GLOBALSINDEX
);

314 
	}
}

	@lib/tas/src/lua/ldebug.c

7 
	~<°dlib.h
>

8 
	~<°rög.h
>

10 
	#ldebug_c


	)

12 
	~"lua.h
"

14 
	~"œpi.h
"

15 
	~"lcode.h
"

16 
	~"ldebug.h
"

17 
	~"ldo.h
"

18 
	~"lfunc.h
"

19 
	~"lobje˘.h
"

20 
	~"l›codes.h
"

21 
	~"l°©e.h
"

22 
	~"l°rög.h
"

23 
	~"…abÀ.h
"

24 
	~"…m.h
"

25 
	~"lvm.h
"

27 c⁄° *
gëfun˙ame
(
CÆlInfo
 * 
ci
, c⁄° **
«me
);

29 
	#isLua
(
ci
Ë(!((ci)->
°©e
 & 
CI_C
))

	)

32 
	$cuºíçc
(
CÆlInfo
 * 
ci
)

34 i‡(!
	`isLua
(
ci
))

36 i‡(
ci
->
°©e
 & 
CI_HASFRAME
)

37 
ci
->
u
.
l
.
ßvedpc
 = *ci->u.l.
pc
;

39  
	`pcRñ
(
ci
->
u
.
l
.
ßvedpc
, 
	`ci_func
(ci)->l.
p
);

40 
	}
}

43 
	$cuºíéöe
(
CÆlInfo
 * 
ci
)

45 
pc
 = 
	`cuºíçc
(
ci
);

46 i‡(
pc
 < 0)

49  
	`gëlöe
(
	`ci_func
(
ci
)->
l
.
p
, 
pc
);

50 
	}
}

53 
	$luaG_öôhooks
(
lua_Sèã
 * 
L
)

55 
CÆlInfo
 *
ci
;

56 
ci
 = 
L
->ci; cò!L->
ba£_ci
; ci--)

57 
	`cuºíçc
(
ci
);

58 
L
->
hooköô
 = 1;

59 
	}
}

64 
LUA_API
 

65 
	$lua_£thook
(
lua_Sèã
 * 
L
, 
lua_Hook
 
func
, 
mask
, 
cou¡
)

67 i‡(
func
 =
NULL
 || 
mask
 == 0) {

68 
mask
 = 0;

69 
func
 = 
NULL
;

71 
L
->
hook
 = 
func
;

72 
L
->
ba£hookcou¡
 = 
cou¡
;

73 
	`ª£thookcou¡
(
L
);

74 
L
->
hookmask
 = 
	`ˇ°
(
lu_byã
, 
mask
);

75 
L
->
hooköô
 = 0;

77 
	}
}

79 
LUA_API
 
lua_Hook


80 
	$lua_gëhook
(
lua_Sèã
 * 
L
)

82  
L
->
hook
;

83 
	}
}

85 
LUA_API
 

86 
	$lua_gëhookmask
(
lua_Sèã
 * 
L
)

88  
L
->
hookmask
;

89 
	}
}

91 
LUA_API
 

92 
	$lua_gëhookcou¡
(
lua_Sèã
 * 
L
)

94  
L
->
ba£hookcou¡
;

95 
	}
}

97 
LUA_API
 

98 
	$lua_gë°ack
(
lua_Sèã
 * 
L
, 
Àvñ
, 
lua_Debug
 * 
¨
)

100 
°©us
;

101 
CÆlInfo
 *
ci
;

102 
	`lua_lock
(
L
);

103 
ci
 = 
L
->ci; 
Àvñ
 > 0 && cò> L->
ba£_ci
; ci--) {

104 
Àvñ
--;

105 i‡(!(
ci
->
°©e
 & 
CI_C
))

106 
Àvñ
 -
ci
->
u
.
l
.
èûˇŒs
;

108 i‡(
Àvñ
 > 0 || 
ci
 =
L
->
ba£_ci
)

109 
°©us
 = 0;

110 i‡(
Àvñ
 < 0) {

111 
°©us
 = 1;

112 
¨
->
i_ci
 = 0;

114 
°©us
 = 1;

115 
¨
->
i_ci
 = 
ci
 - 
L
->
ba£_ci
;

117 
	`lua_u∆ock
(
L
);

118  
°©us
;

119 
	}
}

121 
PrŸo
 *

122 
	$gëlu≠rŸo
(
CÆlInfo
 * 
ci
)

124  (
	`isLua
(
ci
Ë? 
	`ci_func
(ci)->
l
.
p
 : 
NULL
);

125 
	}
}

127 
LUA_API
 const *

128 
	$lua_gëloˇl
(
lua_Sèã
 * 
L
, c⁄° 
lua_Debug
 * 
¨
, 
n
)

130 c⁄° *
«me
;

131 
CÆlInfo
 *
ci
;

132 
PrŸo
 *
Â
;

133 
	`lua_lock
(
L
);

134 
«me
 = 
NULL
;

135 
ci
 = 
L
->
ba£_ci
 + 
¨
->
i_ci
;

136 
Â
 = 
	`gëlu≠rŸo
(
ci
);

137 i‡(
Â
) {

138 
«me
 = 
	`luaF_gëloˇ ame
(
Â
, 
n
, 
	`cuºíçc
(
ci
));

139 i‡(
«me
)

140 
	`luaA_pushobje˘
(
L
, 
ci
->
ba£
 + (
n
 - 1));

142 
	`lua_u∆ock
(
L
);

143  
«me
;

144 
	}
}

146 
LUA_API
 const *

147 
	$lua_£éoˇl
(
lua_Sèã
 * 
L
, c⁄° 
lua_Debug
 * 
¨
, 
n
)

149 c⁄° *
«me
;

150 
CÆlInfo
 *
ci
;

151 
PrŸo
 *
Â
;

152 
	`lua_lock
(
L
);

153 
«me
 = 
NULL
;

154 
ci
 = 
L
->
ba£_ci
 + 
¨
->
i_ci
;

155 
Â
 = 
	`gëlu≠rŸo
(
ci
);

156 
L
->
t›
--;

157 i‡(
Â
) {

158 
«me
 = 
	`luaF_gëloˇ ame
(
Â
, 
n
, 
	`cuºíçc
(
ci
));

159 i‡(!
«me
 ||Çame[0] == '(')

160 
«me
 = 
NULL
;

162 
	`£tobjs2s
(
ci
->
ba£
 + (
n
 - 1), 
L
->
t›
);

164 
	`lua_u∆ock
(
L
);

165  
«me
;

166 
	}
}

169 
	$funcöfo
(
lua_Debug
 * 
¨
, 
StkId
 
func
)

171 
Closuª
 *
˛
 = 
	`˛vÆue
(
func
);

172 i‡(
˛
->
c
.
isC
) {

173 
¨
->
sour˚
 = "=[C]";

174 
¨
->
löedeföed
 = -1;

175 
¨
->
wh©
 = "C";

177 
¨
->
sour˚
 = 
	`gë°r
(
˛
->
l
.
p
->source);

178 
¨
->
löedeföed
 = 
˛
->
l
.
p
->
löeDeföed
;

179 
¨
->
wh©
 = (¨->
löedeföed
 == 0) ? "main" : "Lua";

181 
	`luaO_chunkid
(
¨
->
sh‹t_§c
,ár->
sour˚
, 
LUA_IDSIZE
);

182 
	}
}

185 
	$åavglobÆs
(
lua_Sèã
 * 
L
, c⁄° 
TObje˘
 * 
o
)

187 
TabÀ
 *
g
 = 
	`hvÆue
(
	`gt
(
L
));

188 
i
 = 
	`sizíode
(
g
);

189 
i
--) {

190 
Node
 *
n
 = 
	`gnode
(
g
, 
i
);

191 i‡(
	`luaO_øwequÆObj
(
o
, 
	`gvÆ
(
n
)Ë&& 
	`âis°rög
(
	`gkey
(n)))

192  
	`gë°r
(
	`tsvÆue
(
	`gkey
(
n
)));

194  
NULL
;

195 
	}
}

198 
	$öfo_èûˇŒ
(
lua_Sèã
 * 
L
, 
lua_Debug
 * 
¨
)

200 
¨
->
«me
 =ár->
«mewh©
 = "";

201 
¨
->
wh©
 = "tail";

202 
¨
->
löedeföed
 =ár->
cuºíéöe
 = -1;

203 
¨
->
sour˚
 = "=(tail call)";

204 
	`luaO_chunkid
(
¨
->
sh‹t_§c
,ár->
sour˚
, 
LUA_IDSIZE
);

205 
¨
->
nups
 = 0;

206 
	`£äûvÆue
(
L
->
t›
);

207 
	}
}

210 
	$auxgëöfo
(
lua_Sèã
 * 
L
, c⁄° *
wh©
, 
lua_Debug
 * 
¨
, 
StkId
 
f
, 
CÆlInfo
 * 
ci
)

212 
°©us
 = 1;

213 ; *
wh©
; what++) {

214 *
wh©
) {

217 
	`funcöfo
(
¨
, 
f
);

222 
¨
->
cuºíéöe
 = (
ci
Ë? 
	`cuºíéöe
(ci) : -1;

227 
¨
->
nups
 = 
	`˛vÆue
(
f
)->
c
.
nupvÆues
;

232 
¨
->
«mewh©
 = (
ci
Ë? 
	`gëfun˙ame
(ci, &¨->
«me
Ë: 
NULL
;

233 i‡(
¨
->
«mewh©
 =
NULL
) {

235 i‡((
¨
->
«me
 = 
	`åavglobÆs
(
L
, 
f
)Ë!
NULL
)

236 
¨
->
«mewh©
 = "global";

238 
¨
->
«mewh©
 = "";

244 
	`£tobj2s
(
L
->
t›
, 
f
);

248 
°©us
 = 0;

251  
°©us
;

252 
	}
}

254 
LUA_API
 

255 
	$lua_gëöfo
(
lua_Sèã
 * 
L
, c⁄° *
wh©
, 
lua_Debug
 * 
¨
)

257 
°©us
 = 1;

258 
	`lua_lock
(
L
);

259 i‡(*
wh©
 == '>') {

260 
StkId
 
f
 = 
L
->
t›
 - 1;

261 i‡(!
	`âisfun˘i⁄
(
f
))

262 
	`luaG_ru√º‹
(
L
, "value for `lua_getinfo' isÇotá function");

263 
°©us
 = 
	`auxgëöfo
(
L
, 
wh©
 + 1, 
¨
, 
f
, 
NULL
);

264 
L
->
t›
--;

265 } i‡(
¨
->
i_ci
 != 0) {

266 
CÆlInfo
 *
ci
 = 
L
->
ba£_ci
 + 
¨
->
i_ci
;

267 
	`lua_as£π
(
	`âisfun˘i⁄
(
ci
->
ba£
 - 1));

268 
°©us
 = 
	`auxgëöfo
(
L
, 
wh©
, 
¨
, 
ci
->
ba£
 - 1, ci);

270 
	`öfo_èûˇŒ
(
L
, 
¨
);

271 i‡(
	`°rchr
(
wh©
, 'f'))

272 
	`ö¸_t›
(
L
);

273 
	`lua_u∆ock
(
L
);

274  
°©us
;

275 
	}
}

283 
	#check
(
x
Ëi‡(!(x)Ë 0;

	)

285 
	#checkjump
(
±
,
pc
Ë
	`check
(0 <p¯&&Ö¯<Öt->
sizecode
)

	)

287 
	#checkªg
(
±
,
ªg
Ë
	`check
(‘egË< (±)->
max°acksize
)

	)

290 
	$¥echeck
(c⁄° 
PrŸo
 * 
±
)

292 
	`check
(
±
->
max°acksize
 <
MAXSTACK
);

293 
	`check
(
±
->
sizñöeöfo
 =±->
sizecode
 ||Öt->sizelineinfo == 0);

294 
	`lua_as£π
(
±
->
num∑øms
 +Öt->
is_v¨¨g
 <±->
max°acksize
);

295 
	`check
(
	`GET_OPCODE
(
±
->
code
[±->
sizecode
 - 1]Ë=
OP_RETURN
);

297 
	}
}

300 
	$check›í›
(c⁄° 
PrŸo
 * 
±
, 
pc
)

302 
In°ru˘i⁄
 
i
 = 
±
->
code
[
pc
 + 1];

303 
	`GET_OPCODE
(
i
)) {

304 
OP_CALL
:

305 
OP_TAILCALL
:

306 
OP_RETURN
:

308 
	`check
(
	`GETARG_B
(
i
) == 0);

311 
OP_SETLISTO
:

316 
	}
}

319 
	$checkRK
(c⁄° 
PrŸo
 * 
±
, 
r
)

321  (
r
 < 
±
->
max°acksize
 || (∏>
MAXSTACK
 &&Ñ - MAXSTACK <Öt->
sizek
));

322 
	}
}

324 
In°ru˘i⁄


325 
	$luaG_symbexec
(c⁄° 
PrŸo
 * 
±
, 
œ°pc
, 
ªg
)

327 
pc
;

328 
œ°
;

329 
œ°
 = 
±
->
sizecode
 - 1;

330 
	`check
(
	`¥echeck
(
±
));

331 
pc
 = 0;Ö¯< 
œ°pc
;Öc++) {

332 c⁄° 
In°ru˘i⁄
 
i
 = 
±
->
code
[
pc
];

333 
OpCode
 
›
 = 
	`GET_OPCODE
(
i
);

334 
a
 = 
	`GETARG_A
(
i
);

335 
b
 = 0;

336 
c
 = 0;

337 
	`checkªg
(
±
, 
a
);

338 
	`gëOpMode
(
›
)) {

339 
iABC
:

341 
b
 = 
	`GETARG_B
(
i
);

342 
c
 = 
	`GETARG_C
(
i
);

343 i‡(
	`ã°OpMode
(
›
, 
OpModeBªg
)) {

344 
	`checkªg
(
±
, 
b
);

345 } i‡(
	`ã°OpMode
(
›
, 
OpModeBrk
))

346 
	`check
(
	`checkRK
(
±
, 
b
));

347 i‡(
	`ã°OpMode
(
›
, 
OpModeCrk
))

348 
	`check
(
	`checkRK
(
±
, 
c
));

351 
iABx
:

353 
b
 = 
	`GETARG_Bx
(
i
);

354 i‡(
	`ã°OpMode
(
›
, 
OpModeK
))

355 
	`check
(
b
 < 
±
->
sizek
);

358 
iAsBx
:

360 
b
 = 
	`GETARG_sBx
(
i
);

364 i‡(
	`ã°OpMode
(
›
, 
OpMode£tA
)) {

365 i‡(
a
 =
ªg
)

366 
œ°
 = 
pc
;

368 i‡(
	`ã°OpMode
(
›
, 
OpModeT
)) {

369 
	`check
(
pc
 + 2 < 
±
->
sizecode
);

370 
	`check
(
	`GET_OPCODE
(
±
->
code
[
pc
 + 1]Ë=
OP_JMP
);

372 
›
) {

373 
OP_LOADBOOL
:

375 
	`check
(
c
 =0 || 
pc
 + 2 < 
±
->
sizecode
);

378 
OP_LOADNIL
:

380 i‡(
a
 <
ªg
 &&Ñeg <
b
)

381 
œ°
 = 
pc
;

384 
OP_GETUPVAL
:

385 
OP_SETUPVAL
:

387 
	`check
(
b
 < 
±
->
nups
);

390 
OP_GETGLOBAL
:

391 
OP_SETGLOBAL
:

393 
	`check
(
	`âis°rög
(&
±
->
k
[
b
]));

396 
OP_SELF
:

398 
	`checkªg
(
±
, 
a
 + 1);

399 i‡(
ªg
 =
a
 + 1)

400 
œ°
 = 
pc
;

403 
OP_CONCAT
:

406 
	`check
(
c
 < 
MAXSTACK
 && 
b
 < c);

409 
OP_TFORLOOP
:

410 
	`checkªg
(
±
, 
a
 + 
c
 + 5);

411 i‡(
ªg
 >
a
)

412 
œ°
 = 
pc
;

414 
OP_FORLOOP
:

415 
	`checkªg
(
±
, 
a
 + 2);

417 
OP_JMP
:

419 
de°
 = 
pc
 + 1 + 
b
;

420 
	`check
(0 <
de°
 && de° < 
±
->
sizecode
);

422 i‡(
ªg
 !
NO_REG
 && 
pc
 < 
de°
 && de° <
œ°pc
)

423 
pc
 +
b
;

426 
OP_CALL
:

427 
OP_TAILCALL
:

429 i‡(
b
 != 0) {

430 
	`checkªg
(
±
, 
a
 + 
b
 - 1);

432 
c
--;

433 i‡(
c
 =
LUA_MULTRET
) {

434 
	`check
(
	`check›í›
(
±
, 
pc
));

435 } i‡(
c
 != 0)

436 
	`checkªg
(
±
, 
a
 + 
c
 - 1);

437 i‡(
ªg
 >
a
)

438 
œ°
 = 
pc
;

441 
OP_RETURN
:

443 
b
--;

444 i‡(
b
 > 0)

445 
	`checkªg
(
±
, 
a
 + 
b
 - 1);

448 
OP_SETLIST
:

450 
	`checkªg
(
±
, 
a
 + (
b
 & (
LFIELDS_PER_FLUSH
 - 1)) + 1);

453 
OP_CLOSURE
:

455 
nup
;

456 
	`check
(
b
 < 
±
->
sizï
);

457 
nup
 = 
±
->
p
[
b
]->
nups
;

458 
	`check
(
pc
 + 
nup
 < 
±
->
sizecode
);

459 ; 
nup
 > 0;Çup--) {

460 
OpCode
 
›1
 = 
	`GET_OPCODE
(
±
->
code
[
pc
 + 
nup
]);

461 
	`check
(
›1
 =
OP_GETUPVAL
 || op1 =
OP_MOVE
);

469  
±
->
code
[
œ°
];

470 
	}
}

472 #unde‡
check


473 #unde‡
checkjump


474 #unde‡
checkªg


479 
	$luaG_checkcode
(c⁄° 
PrŸo
 * 
±
)

481  
	`luaG_symbexec
(
±
,Öt->
sizecode
, 
NO_REG
);

482 
	}
}

485 
	$k«me
(
PrŸo
 * 
p
, 
c
)

487 
c
 = c - 
MAXSTACK
;

488 i‡(
c
 >0 && 
	`âis°rög
(&
p
->
k
[c]))

489  
	`svÆue
(&
p
->
k
[
c
]);

492 
	}
}

495 
	$gëobj«me
(
CÆlInfo
 * 
ci
, 
°ackpos
, c⁄° **
«me
)

497 i‡(
	`isLua
(
ci
)) {

498 
PrŸo
 *
p
 = 
	`ci_func
(
ci
)->
l
.p;

499 
pc
 = 
	`cuºíçc
(
ci
);

500 
In°ru˘i⁄
 
i
;

501 *
«me
 = 
	`luaF_gëloˇ ame
(
p
, 
°ackpos
 + 1, 
pc
);

502 i‡(*
«me
)

504 
i
 = 
	`luaG_symbexec
(
p
, 
pc
, 
°ackpos
);

505 
	`lua_as£π
(
pc
 != -1);

506 
	`GET_OPCODE
(
i
)) {

507 
OP_GETGLOBAL
:

509 
g
 = 
	`GETARG_Bx
(
i
);

510 
	`lua_as£π
(
	`âis°rög
(&
p
->
k
[
g
]));

511 *
«me
 = 
	`svÆue
(&
p
->
k
[
g
]);

514 
OP_MOVE
:

516 
a
 = 
	`GETARG_A
(
i
);

517 
b
 = 
	`GETARG_B
(
i
);

518 i‡(
b
 < 
a
)

519  
	`gëobj«me
(
ci
, 
b
, 
«me
);

522 
OP_GETTABLE
:

524 
k
 = 
	`GETARG_C
(
i
);

525 *
«me
 = 
	`k«me
(
p
, 
k
);

528 
OP_SELF
:

530 
k
 = 
	`GETARG_C
(
i
);

531 *
«me
 = 
	`k«me
(
p
, 
k
);

538  
NULL
;

539 
	}
}

542 
	$gëfun˙ame
(
CÆlInfo
 * 
ci
, c⁄° **
«me
)

544 
In°ru˘i⁄
 
i
;

545 i‡((
	`isLua
(
ci
Ë&& ci->
u
.
l
.
èûˇŒs
 > 0) || !isLua(ci - 1))

546  
NULL
;

547 
ci
--;

548 
i
 = 
	`ci_func
(
ci
)->
l
.
p
->
code
[
	`cuºíçc
(ci)];

549 i‡(
	`GET_OPCODE
(
i
Ë=
OP_CALL
 || GET_OPCODE(iË=
OP_TAILCALL
)

550  
	`gëobj«me
(
ci
, 
	`GETARG_A
(
i
), 
«me
);

552  
NULL
;

553 
	}
}

557 
	$isö°ack
(
CÆlInfo
 * 
ci
, c⁄° 
TObje˘
 * 
o
)

559 
StkId
 
p
;

560 
p
 = 
ci
->
ba£
;Ö < ci->
t›
;Ö++)

561 i‡(
o
 =
p
)

564 
	}
}

567 
	$luaG_ty≥îr‹
(
lua_Sèã
 * 
L
, c⁄° 
TObje˘
 * 
o
, c⁄° *
›
)

569 c⁄° *
«me
 = 
NULL
;

570 c⁄° *
t
 = 
luaT_ty≥«mes
[
	`ây≥
(
o
)];

571 c⁄° *
köd
 = (
	`isö°ack
(
L
->
ci
, 
o
)Ë? 
	`gëobj«me
(L->ci, o - L->
ba£
, &
«me
Ë: 
NULL
;

572 i‡(
köd
)

573 
	`luaG_ru√º‹
(
L
, "©ãm±Åÿ%†%†`%s' (®%†vÆue)", 
›
, 
köd
, 
«me
, 
t
);

575 
	`luaG_ru√º‹
(
L
, "©ãm±Åÿ%†®%†vÆue", 
›
, 
t
);

576 
	}
}

579 
	$luaG_c⁄ˇãº‹
(
lua_Sèã
 * 
L
, 
StkId
 
p1
, StkId 
p2
)

581 i‡(
	`âis°rög
(
p1
))

582 
p1
 = 
p2
;

583 
	`lua_as£π
(!
	`âis°rög
(
p1
));

584 
	`luaG_ty≥îr‹
(
L
, 
p1
, "concatenate");

585 
	}
}

588 
	$luaG_¨ôhîr‹
(
lua_Sèã
 * 
L
, c⁄° 
TObje˘
 * 
p1
, c⁄° TObje˘ * 
p2
)

590 
TObje˘
 
ãmp
;

591 i‡(
	`luaV_t⁄umbî
(
p1
, &
ãmp
Ë=
NULL
)

592 
p2
 = 
p1
;

593 
	`luaG_ty≥îr‹
(
L
, 
p2
, "performárithmetic on");

594 
	}
}

597 
	$luaG_‹dîîr‹
(
lua_Sèã
 * 
L
, c⁄° 
TObje˘
 * 
p1
, c⁄° TObje˘ * 
p2
)

599 c⁄° *
t1
 = 
luaT_ty≥«mes
[
	`ây≥
(
p1
)];

600 c⁄° *
t2
 = 
luaT_ty≥«mes
[
	`ây≥
(
p2
)];

601 i‡(
t1
[2] =
t2
[2])

602 
	`luaG_ru√º‹
(
L
, "©ãm±Åÿcom∑ªÅwÿ%†vÆues", 
t1
);

604 
	`luaG_ru√º‹
(
L
, "©ãm±Åÿcom∑ª %†wôh %s", 
t1
, 
t2
);

605 
	}
}

608 
	$addöfo
(
lua_Sèã
 * 
L
, c⁄° *
msg
)

610 
CÆlInfo
 *
ci
 = 
L
->ci;

611 i‡(
	`isLua
(
ci
)) {

612 
buff
[
LUA_IDSIZE
];

613 
löe
 = 
	`cuºíéöe
(
ci
);

614 
	`luaO_chunkid
(
buff
, 
	`gë°r
(
	`gëlu≠rŸo
(
ci
)->
sour˚
), 
LUA_IDSIZE
);

615 
	`luaO_pushf°rög
(
L
, "%s:%d: %s", 
buff
, 
löe
, 
msg
);

617 
	}
}

620 
	$luaG_îr‹msg
(
lua_Sèã
 * 
L
)

622 i‡(
L
->
îrfunc
 != 0) {

623 
StkId
 
îrfunc
 = 
	`ª°‹e°ack
(
L
, L->errfunc);

624 i‡(!
	`âisfun˘i⁄
(
îrfunc
))

625 
	`luaD_throw
(
L
, 
LUA_ERRERR
);

626 
	`£tobjs2s
(
L
->
t›
, L->top - 1);

627 
	`£tobjs2s
(
L
->
t›
 - 1, 
îrfunc
);

628 
	`ö¸_t›
(
L
);

629 
	`luaD_ˇŒ
(
L
, L->
t›
 - 2, 1);

631 
	`luaD_throw
(
L
, 
LUA_ERRRUN
);

632 
	}
}

635 
	$luaG_ru√º‹
(
lua_Sèã
 * 
L
, c⁄° *
fmt
, ...)

637 
va_li°
 
¨gp
;

638 
	`va_°¨t
(
¨gp
, 
fmt
);

639 
	`addöfo
(
L
, 
	`luaO_pushvf°rög
(L, 
fmt
, 
¨gp
));

640 
	`va_íd
(
¨gp
);

641 
	`luaG_îr‹msg
(
L
);

642 
	}
}

	@lib/tas/src/lua/ldebug.h

7 #i‚de‡
ldebug_h


8 
	#ldebug_h


	)

10 
	~"l°©e.h
"

12 
	#pcRñ
(
pc
, 
p
Ë(
	`ˇ°
(, (pcË- (p)->
code
Ë- 1)

	)

14 
	#gëlöe
(
f
,
pc
Ë(((f)->
löeöfo
Ë? (f)->löeöfo[pc] : 0)

	)

16 
	#ª£thookcou¡
(
L
Ë(L->
hookcou¡
 = L->
ba£hookcou¡
)

	)

18 
luaG_öôhooks
(
lua_Sèã
 * 
L
);

19 
	$luaG_ty≥îr‹
(
lua_Sèã
 * 
L
, c⁄° 
TObje˘
 * 
o
, c⁄° *
›«me
Ë
	`__©åibuã__
 ((
n‹ëu∫
));

20 
	$luaG_c⁄ˇãº‹
(
lua_Sèã
 * 
L
, 
StkId
 
p1
, StkId 
p2
Ë
	`__©åibuã__
 ((
n‹ëu∫
));

21 
	$luaG_¨ôhîr‹
(
lua_Sèã
 * 
L
, c⁄° 
TObje˘
 * 
p1
, c⁄° TObje˘ * 
p2
Ë
	`__©åibuã__
 ((
n‹ëu∫
));

22 
	$luaG_‹dîîr‹
(
lua_Sèã
 * 
L
, c⁄° 
TObje˘
 * 
p1
, c⁄° TObje˘ * 
p2
Ë
	`__©åibuã__
 ((
n‹ëu∫
));

23 
	$luaG_ru√º‹
(
lua_Sèã
 * 
L
, c⁄° *
fmt
, ...Ë
	`__©åibuã__
 ((
n‹ëu∫
));

24 
	$luaG_îr‹msg
(
lua_Sèã
 * 
L
Ë
	`__©åibuã__
 ((
n‹ëu∫
));

25 
	`luaG_checkcode
(c⁄° 
PrŸo
 * 
±
);

	@lib/tas/src/lua/ldo.c

7 
	~<£tjmp.h
>

8 
	~<°dlib.h
>

9 
	~<°rög.h
>

11 
	#ldo_c


	)

13 
	~"lua.h
"

15 
	~"ldebug.h
"

16 
	~"ldo.h
"

17 
	~"lfunc.h
"

18 
	~"lgc.h
"

19 
	~"lmem.h
"

20 
	~"lobje˘.h
"

21 
	~"l›codes.h
"

22 
	~"Õ¨£r.h
"

23 
	~"l°©e.h
"

24 
	~"l°rög.h
"

25 
	~"…abÀ.h
"

26 
	~"…m.h
"

27 
	~"lundump.h
"

28 
	~"lvm.h
"

29 
	~"lzio.h
"

38 
	slua_l⁄gjmp
 {

39 
lua_l⁄gjmp
 *
	m¥evious
;

40 
jmp_buf
 
	mb
;

41 vﬁ©ûê
	m°©us
;

45 
	$£ãº‹obj
(
lua_Sèã
 * 
L
, 
îrcode
, 
StkId
 
ﬁdt›
)

47 
îrcode
) {

48 
LUA_ERRMEM
:

50 
	`£tsvÆue2s
(
ﬁdt›
, 
	`luaS_√w
(
L
, 
MEMERRMSG
));

53 
LUA_ERRERR
:

55 
	`£tsvÆue2s
(
ﬁdt›
, 
	`luaS_√w
(
L
, "error inÉrror handling"));

58 
LUA_ERRSYNTAX
:

59 
LUA_ERRRUN
:

61 
	`£tobjs2s
(
ﬁdt›
, 
L
->
t›
 - 1);

65 
L
->
t›
 = 
ﬁdt›
 + 1;

66 
	}
}

69 
	$luaD_throw
(
lua_Sèã
 * 
L
, 
îrcode
)

71 i‡(
L
->
îr‹Jmp
) {

72 
L
->
îr‹Jmp
->
°©us
 = 
îrcode
;

73 
	`l⁄gjmp
(
L
->
îr‹Jmp
->
b
, 1);

75 
	`G
(
L
)->
	`∑nic
(L);

76 
	`exô
(
EXIT_FAILURE
);

78 
	}
}

81 
	$luaD_øwru≈rŸe˘ed
(
lua_Sèã
 * 
L
, 
Pfunc
 
f
, *
ud
)

83 
lua_l⁄gjmp
 
lj
;

84 
lj
.
°©us
 = 0;

85 
lj
.
¥evious
 = 
L
->
îr‹Jmp
;

86 
L
->
îr‹Jmp
 = &
lj
;

87 i‡(
	`£tjmp
(
lj
.
b
) == 0)

88 (*
f
Ë(
L
, 
ud
);

89 
L
->
îr‹Jmp
 = 
lj
.
¥evious
;

90  
lj
.
°©us
;

91 
	}
}

94 
	$ª°‹e_°ack_limô
(
lua_Sèã
 * 
L
)

96 
L
->
°ack_œ°
 = L->
°ack
 + L->
°acksize
 - 1;

97 i‡(
L
->
size_ci
 > 
LUA_MAXCALLS
) {

98 
öu£
 = (
L
->
ci
 - L->
ba£_ci
);

99 i‡(
öu£
 + 1 < 
LUA_MAXCALLS
)

100 
	`luaD_ªÆlocCI
(
L
, 
LUA_MAXCALLS
);

102 
	}
}

107 
	$c‹ª˘°ack
(
lua_Sèã
 * 
L
, 
TObje˘
 * 
ﬁd°ack
)

109 
CÆlInfo
 *
ci
;

110 
GCObje˘
 *
up
;

111 
L
->
t›
 = (L->t› - 
ﬁd°ack
Ë+ L->
°ack
;

112 
up
 = 
L
->
›íupvÆ
; u∞!
NULL
; u∞up->
gch
.
√xt
)

113 
	`gcŸouv
(
up
)->
v
 = (gcŸouv(up)->v - 
ﬁd°ack
Ë+ 
L
->
°ack
;

114 
ci
 = 
L
->
ba£_ci
; ci <= L->ci; ci++) {

115 
ci
->
t›
 = (ci->t› - 
ﬁd°ack
Ë+ 
L
->
°ack
;

116 
ci
->
ba£
 = (ci->ba£ - 
ﬁd°ack
Ë+ 
L
->
°ack
;

118 
L
->
ba£
 = L->
ci
->base;

119 
	}
}

122 
	$luaD_ªÆloc°ack
(
lua_Sèã
 * 
L
, 
√wsize
)

124 
TObje˘
 *
ﬁd°ack
 = 
L
->
°ack
;

125 
	`luaM_ªÆlocve˘‹
(
L
, L->
°ack
, L->
°acksize
, 
√wsize
, 
TObje˘
);

126 
L
->
°acksize
 = 
√wsize
;

127 
L
->
°ack_œ°
 = L->
°ack
 + 
√wsize
 - 1 - 
EXTRA_STACK
;

128 
	`c‹ª˘°ack
(
L
, 
ﬁd°ack
);

129 
	}
}

132 
	$luaD_ªÆlocCI
(
lua_Sèã
 * 
L
, 
√wsize
)

134 
CÆlInfo
 *
ﬁdci
 = 
L
->
ba£_ci
;

135 
	`luaM_ªÆlocve˘‹
(
L
, L->
ba£_ci
, L->
size_ci
, 
√wsize
, 
CÆlInfo
);

136 
L
->
size_ci
 = 
	`ˇ°
(, 
√wsize
);

137 
L
->
ci
 = (L->cò- 
ﬁdci
Ë+ L->
ba£_ci
;

138 
L
->
íd_ci
 = L->
ba£_ci
 + L->
size_ci
;

139 
	}
}

142 
	$luaD_grow°ack
(
lua_Sèã
 * 
L
, 
n
)

144 i‡(
n
 <
L
->
°acksize
)

145 
	`luaD_ªÆloc°ack
(
L
, 2 * L->
°acksize
);

147 
	`luaD_ªÆloc°ack
(
L
, L->
°acksize
 + 
n
 + 
EXTRA_STACK
);

148 
	}
}

151 
	$luaD_growCI
(
lua_Sèã
 * 
L
)

153 i‡(
L
->
size_ci
 > 
LUA_MAXCALLS
)

154 
	`luaD_throw
(
L
, 
LUA_ERRERR
);

156 
	`luaD_ªÆlocCI
(
L
, 2 * L->
size_ci
);

157 i‡(
L
->
size_ci
 > 
LUA_MAXCALLS
)

158 
	`luaG_ru√º‹
(
L
, "stack overflow");

160 
	}
}

163 
	$luaD_ˇŒhook
(
lua_Sèã
 * 
L
, 
evít
, 
löe
)

165 
lua_Hook
 
hook
 = 
L
->hook;

166 i‡(
hook
 && 
L
->
Ælowhook
) {

167 
±rdiff_t
 
t›
 = 
	`ßve°ack
(
L
, L->top);

168 
±rdiff_t
 
ci_t›
 = 
	`ßve°ack
(
L
, L->
ci
->
t›
);

169 
lua_Debug
 
¨
;

170 
¨
.
evít
 =Évent;

171 
¨
.
cuºíéöe
 = 
löe
;

172 i‡(
evít
 =
LUA_HOOKTAILRET
)

173 
¨
.
i_ci
 = 0;

175 
¨
.
i_ci
 = 
L
->
ci
 - L->
ba£_ci
;

176 
	`luaD_check°ack
(
L
, 
LUA_MINSTACK
);

177 
L
->
ci
->
t›
 = L->t› + 
LUA_MINSTACK
;

178 
L
->
Ælowhook
 = 0;

179 
	`lua_u∆ock
(
L
);

180 (*
hook
Ë(
L
, &
¨
);

181 
	`lua_lock
(
L
);

182 
	`lua_as£π
(!
L
->
Ælowhook
);

183 
L
->
Ælowhook
 = 1;

184 
L
->
ci
->
t›
 = 
	`ª°‹e°ack
(L, 
ci_t›
);

185 
L
->
t›
 = 
	`ª°‹e°ack
(L,Åop);

187 
	}
}

190 
	$adju°_v¨¨gs
(
lua_Sèã
 * 
L
, 
nfix¨gs
, 
StkId
 
ba£
)

192 
i
;

193 
TabÀ
 *
hèb
;

194 
TObje˘
 
¬ame
;

195 
a˘uÆ
 = 
L
->
t›
 - 
ba£
;

196 i‡(
a˘uÆ
 < 
nfix¨gs
) {

197 
	`luaD_check°ack
(
L
, 
nfix¨gs
 - 
a˘uÆ
);

198 ; 
a˘uÆ
 < 
nfix¨gs
; ++actual)

199 
	`£äûvÆue
(
L
->
t›
++);

201 
a˘uÆ
 -
nfix¨gs
;

202 
hèb
 = 
	`luaH_√w
(
L
, 
a˘uÆ
, 1);

203 
i
 = 0; i < 
a˘uÆ
; i++)

204 
	`£tobj2n
(
	`luaH_£äum
(
L
, 
hèb
, 
i
 + 1), L->
t›
 - 
a˘uÆ
 + i);

206 
	`£tsvÆue
(&
¬ame
, 
	`luaS_√wlôîÆ
(
L
, "n"));

207 
	`£ävÆue
(
	`luaH_£t
(
L
, 
hèb
, &
¬ame
), 
	`ˇ°
(
lua_Numbî
, 
a˘uÆ
));

208 
L
->
t›
 -
a˘uÆ
;

209 
	`£thvÆue
(
L
->
t›
, 
hèb
);

210 
	`ö¸_t›
(
L
);

211 
	}
}

213 
StkId


214 
	$åyfuncTM
(
lua_Sèã
 * 
L
, 
StkId
 
func
)

216 c⁄° 
TObje˘
 *
tm
 = 
	`luaT_gëtmbyobj
(
L
, 
func
, 
TM_CALL
);

217 
StkId
 
p
;

218 
±rdiff_t
 
fun¸
 = 
	`ßve°ack
(
L
, 
func
);

219 i‡(!
	`âisfun˘i⁄
(
tm
))

220 
	`luaG_ty≥îr‹
(
L
, 
func
, "call");

222 
p
 = 
L
->
t›
;Ö > 
func
;Ö--)

223 
	`£tobjs2s
(
p
,Ö - 1);

224 
	`ö¸_t›
(
L
);

225 
func
 = 
	`ª°‹e°ack
(
L
, 
fun¸
);

226 
	`£tobj2s
(
func
, 
tm
);

227  
func
;

228 
	}
}

230 
StkId


231 
	$luaD_¥eˇŒ
(
lua_Sèã
 * 
L
, 
StkId
 
func
)

233 
LClosuª
 *
˛
;

234 
±rdiff_t
 
fun¸
 = 
	`ßve°ack
(
L
, 
func
);

235 i‡(!
	`âisfun˘i⁄
(
func
))

236 
func
 = 
	`åyfuncTM
(
L
, func);

237 i‡(
L
->
ci
 + 1 =L->
íd_ci
)

238 
	`luaD_growCI
(
L
);

240 
	`c⁄dh¨d°ackã°s
(
	`luaD_ªÆlocCI
(
L
, L->
size_ci
));

241 
˛
 = &
	`˛vÆue
(
func
)->
l
;

242 i‡(!
˛
->
isC
) {

243 
CÆlInfo
 *
ci
;

244 
PrŸo
 *
p
 = 
˛
->p;

245 i‡(
p
->
is_v¨¨g
)

246 
	`adju°_v¨¨gs
(
L
, 
p
->
num∑øms
, 
func
 + 1);

247 
	`luaD_check°ack
(
L
, 
p
->
max°acksize
);

248 
ci
 = ++
L
->ci;

249 
L
->
ba£
 = L->
ci
->ba£ = 
	`ª°‹e°ack
(L, 
fun¸
) + 1;

250 
ci
->
t›
 = 
L
->
ba£
 + 
p
->
max°acksize
;

251 
ci
->
u
.
l
.
ßvedpc
 = 
p
->
code
;

252 
ci
->
u
.
l
.
èûˇŒs
 = 0;

253 
ci
->
°©e
 = 
CI_SAVEDPC
;

254 
L
->
t›
 < 
ci
->top)

255 
	`£äûvÆue
(
L
->
t›
++);

256 
L
->
t›
 = 
ci
->top;

257  
NULL
;

259 
CÆlInfo
 *
ci
;

260 
n
;

261 
	`luaD_check°ack
(
L
, 
LUA_MINSTACK
);

262 
ci
 = ++
L
->ci;

263 
L
->
ba£
 = L->
ci
->ba£ = 
	`ª°‹e°ack
(L, 
fun¸
) + 1;

264 
ci
->
t›
 = 
L
->t› + 
LUA_MINSTACK
;

265 
ci
->
°©e
 = 
CI_C
;

266 i‡(
L
->
hookmask
 & 
LUA_MASKCALL
)

267 
	`luaD_ˇŒhook
(
L
, 
LUA_HOOKCALL
, -1);

268 
	`lua_u∆ock
(
L
);

269 #ifde‡
LUA_COMPATUPVALUES


270 
	`lua_pushupvÆues
(
L
);

272 
n
 = (*
	`˛vÆue
(
L
->
ba£
 - 1)->
c
.
f
) (L);

273 
	`lua_lock
(
L
);

274  
L
->
t›
 - 
n
;

276 
	}
}

278 
StkId


279 
	$ˇŒªthooks
(
lua_Sèã
 * 
L
, 
StkId
 
fú°Resu…
)

281 
±rdiff_t
 
‰
 = 
	`ßve°ack
(
L
, 
fú°Resu…
);

282 
	`luaD_ˇŒhook
(
L
, 
LUA_HOOKRET
, -1);

283 i‡(!(
L
->
ci
->
°©e
 & 
CI_C
)) {

284 
L
->
ci
->
u
.
l
.
èûˇŒs
--)

285 
	`luaD_ˇŒhook
(
L
, 
LUA_HOOKTAILRET
, -1);

287  
	`ª°‹e°ack
(
L
, 
‰
);

288 
	}
}

291 
	$luaD_posˇŒ
(
lua_Sèã
 * 
L
, 
w™ãd
, 
StkId
 
fú°Resu…
)

293 
StkId
 
ªs
;

294 i‡(
L
->
hookmask
 & 
LUA_MASKRET
)

295 
fú°Resu…
 = 
	`ˇŒªthooks
(
L
, firstResult);

296 
ªs
 = 
L
->
ba£
 - 1;

297 
L
->
ci
--;

298 
L
->
ba£
 = L->
ci
->base;

300 
w™ãd
 !0 && 
fú°Resu…
 < 
L
->
t›
) {

301 
	`£tobjs2s
(
ªs
++, 
fú°Resu…
++);

302 
w™ãd
--;

304 
w™ãd
-- > 0)

305 
	`£äûvÆue
(
ªs
++);

306 
L
->
t›
 = 
ªs
;

307 
	}
}

316 
	$luaD_ˇŒ
(
lua_Sèã
 * 
L
, 
StkId
 
func
, 
nResu…s
)

318 
StkId
 
fú°Resu…
;

319 
	`lua_as£π
(!(
L
->
ci
->
°©e
 & 
CI_CALLING
));

320 i‡(++
L
->
nCˇŒs
 >
LUA_MAXCCALLS
) {

321 i‡(
L
->
nCˇŒs
 =
LUA_MAXCCALLS
)

322 
	`luaG_ru√º‹
(
L
, "C stack overflow");

323 i‡(
L
->
nCˇŒs
 >(
LUA_MAXCCALLS
 + (LUA_MAXCCALLS >> 3)))

324 
	`luaD_throw
(
L
, 
LUA_ERRERR
);

326 
fú°Resu…
 = 
	`luaD_¥eˇŒ
(
L
, 
func
);

327 i‡(
fú°Resu…
 =
NULL
)

328 
fú°Resu…
 = 
	`luaV_execuã
(
L
);

329 
	`luaD_posˇŒ
(
L
, 
nResu…s
, 
fú°Resu…
);

330 
L
->
nCˇŒs
--;

331 
	`luaC_checkGC
(
L
);

332 
	}
}

335 
	$ªsume
(
lua_Sèã
 * 
L
, *
ud
)

337 
StkId
 
fú°Resu…
;

338 
«rgs
 = *
	`ˇ°
(*, 
ud
);

339 
CÆlInfo
 *
ci
 = 
L
->ci;

340 i‡(
ci
 =
L
->
ba£_ci
) {

341 
	`lua_as£π
(
«rgs
 < 
L
->
t›
 - L->
ba£
);

342 
	`luaD_¥eˇŒ
(
L
, L->
t›
 - (
«rgs
 + 1));

344 
	`lua_as£π
(
ci
->
°©e
 & 
CI_YIELD
);

345 i‡(
ci
->
°©e
 & 
CI_C
) {

347 
ƒesu…s
;

348 
	`lua_as£π
((
ci
 - 1)->
°©e
 & 
CI_SAVEDPC
);

349 
	`lua_as£π
(
	`GET_OPCODE
(*((
ci
 - 1)->
u
.
l
.
ßvedpc
 - 1)Ë=
OP_CALL
 || GET_OPCODE(*((cò- 1)->u.l.ßvedp¯- 1)Ë=
OP_TAILCALL
);

350 
ƒesu…s
 = 
	`GETARG_C
(*((
ci
 - 1)->
u
.
l
.
ßvedpc
 - 1)) - 1;

351 
	`luaD_posˇŒ
(
L
, 
ƒesu…s
, L->
t›
 - 
«rgs
);

352 i‡(
ƒesu…s
 >= 0)

353 
L
->
t›
 = L->
ci
->top;

355 
ci
->
°©e
 &~
CI_YIELD
;

358 
fú°Resu…
 = 
	`luaV_execuã
(
L
);

359 i‡(
fú°Resu…
 !
NULL
)

360 
	`luaD_posˇŒ
(
L
, 
LUA_MULTRET
, 
fú°Resu…
);

361 
	}
}

364 
	$ªsume_îr‹
(
lua_Sèã
 * 
L
, c⁄° *
msg
)

366 
L
->
t›
 = L->
ci
->
ba£
;

367 
	`£tsvÆue2s
(
L
->
t›
, 
	`luaS_√w
(L, 
msg
));

368 
	`ö¸_t›
(
L
);

369 
	`lua_u∆ock
(
L
);

370  
LUA_ERRRUN
;

371 
	}
}

373 
LUA_API
 

374 
	$lua_ªsume
(
lua_Sèã
 * 
L
, 
«rgs
)

376 
°©us
;

377 
lu_byã
 
ﬁd_Ælowhooks
;

378 
	`lua_lock
(
L
);

379 i‡(
L
->
ci
 =L->
ba£_ci
) {

380 i‡(
«rgs
 >
L
->
t›
 - L->
ba£
)

381  
	`ªsume_îr‹
(
L
, "cannotÑesume dead coroutine");

382 } i‡(!(
L
->
ci
->
°©e
 & 
CI_YIELD
))

383  
	`ªsume_îr‹
(
L
, "cannotÑesumeÇon-suspended coroutine");

384 
ﬁd_Ælowhooks
 = 
L
->
Ælowhook
;

385 
	`lua_as£π
(
L
->
îrfunc
 =0 && L->
nCˇŒs
 == 0);

386 
°©us
 = 
	`luaD_øwru≈rŸe˘ed
(
L
, 
ªsume
, &
«rgs
);

387 i‡(
°©us
 != 0) {

388 
L
->
ci
 = L->
ba£_ci
;

389 
L
->
ba£
 = L->
ci
->base;

390 
L
->
nCˇŒs
 = 0;

391 
	`luaF_˛o£
(
L
, L->
ba£
);

392 
	`£ãº‹obj
(
L
, 
°©us
, L->
ba£
);

393 
L
->
Ælowhook
 = 
ﬁd_Ælowhooks
;

394 
	`ª°‹e_°ack_limô
(
L
);

396 
	`lua_u∆ock
(
L
);

397  
°©us
;

398 
	}
}

400 
LUA_API
 

401 
	$lua_yõld
(
lua_Sèã
 * 
L
, 
ƒesu…s
)

403 
CÆlInfo
 *
ci
;

404 
	`lua_lock
(
L
);

405 
ci
 = 
L
->ci;

406 i‡(
L
->
nCˇŒs
 > 0)

407 
	`luaG_ru√º‹
(
L
, "attemptÅo yieldácross metamethod/C-call boundary");

408 i‡(
ci
->
°©e
 & 
CI_C
) {

409 i‡((
ci
 - 1)->
°©e
 & 
CI_C
)

410 
	`luaG_ru√º‹
(
L
, "cannot yieldá C function");

411 i‡(
L
->
t›
 - 
ƒesu…s
 > L->
ba£
) {

412 
i
;

413 
i
 = 0; i < 
ƒesu…s
; i++)

414 
	`£tobjs2s
(
L
->
ba£
 + 
i
, L->
t›
 - 
ƒesu…s
 + i);

415 
L
->
t›
 = L->
ba£
 + 
ƒesu…s
;

418 
ci
->
°©e
 |
CI_YIELD
;

419 
	`lua_u∆ock
(
L
);

421 
	}
}

424 
	$luaD_pˇŒ
(
lua_Sèã
 * 
L
, 
Pfunc
 
func
, *
u
, 
±rdiff_t
 
ﬁd_t›
,Öådiff_à
ef
)

426 
°©us
;

427 
ﬁdnCˇŒs
 = 
L
->
nCˇŒs
;

428 
±rdiff_t
 
ﬁd_ci
 = 
	`ßveci
(
L
, L->
ci
);

429 
lu_byã
 
ﬁd_Ælowhooks
 = 
L
->
Ælowhook
;

430 
±rdiff_t
 
ﬁd_îrfunc
 = 
L
->
îrfunc
;

431 
L
->
îrfunc
 = 
ef
;

432 
°©us
 = 
	`luaD_øwru≈rŸe˘ed
(
L
, 
func
, 
u
);

433 i‡(
°©us
 != 0) {

434 
StkId
 
ﬁdt›
 = 
	`ª°‹e°ack
(
L
, 
ﬁd_t›
);

435 
	`luaF_˛o£
(
L
, 
ﬁdt›
);

436 
	`£ãº‹obj
(
L
, 
°©us
, 
ﬁdt›
);

437 
L
->
nCˇŒs
 = 
ﬁdnCˇŒs
;

438 
L
->
ci
 = 
	`ª°‹eci
(L, 
ﬁd_ci
);

439 
L
->
ba£
 = L->
ci
->base;

440 
L
->
Ælowhook
 = 
ﬁd_Ælowhooks
;

441 
	`ª°‹e_°ack_limô
(
L
);

443 
L
->
îrfunc
 = 
ﬁd_îrfunc
;

444  
°©us
;

445 
	}
}

450 
	sSP¨£r
 {

451 
ZIO
 *
	mz
;

452 
Mbuf„r
 
	mbuff
;

453 
	mbö
;

457 
	$f_∑r£r
(
lua_Sèã
 * 
L
, *
ud
)

459 
SP¨£r
 *
p
;

460 
PrŸo
 *
tf
;

461 
Closuª
 *
˛
;

462 
	`luaC_checkGC
(
L
);

463 
p
 = 
	`ˇ°
(
SP¨£r
 *, 
ud
);

464 
tf
 = 
p
->
bö
 ? 
	`luaU_undump
(
L
,Ö->
z
, &p->
buff
Ë: 
	`luaY_∑r£r
(L,Ö->z, &p->buff);

465 
˛
 = 
	`luaF_√wL˛osuª
(
L
, 0, 
	`gt
(L));

466 
˛
->
l
.
p
 = 
tf
;

467 
	`£t˛vÆue
(
L
->
t›
, 
˛
);

468 
	`ö¸_t›
(
L
);

469 
	}
}

472 
	$luaD_¥Ÿe˘ed∑r£r
(
lua_Sèã
 * 
L
, 
ZIO
 * 
z
, 
bö
)

474 
SP¨£r
 
p
;

475 
°©us
;

476 
±rdiff_t
 
ﬁdt›r
 = 
	`ßve°ack
(
L
, L->
t›
);

477 
p
.
z
 = z;

478 
p
.
bö
 = bin;

479 
	`luaZ_öôbuf„r
(
L
, &
p
.
buff
);

480 
°©us
 = 
	`luaD_øwru≈rŸe˘ed
(
L
, 
f_∑r£r
, &
p
);

481 
	`luaZ_‰ìbuf„r
(
L
, &
p
.
buff
);

482 i‡(
°©us
 != 0) {

483 
StkId
 
ﬁdt›
 = 
	`ª°‹e°ack
(
L
, 
ﬁdt›r
);

484 
	`£ãº‹obj
(
L
, 
°©us
, 
ﬁdt›
);

486  
°©us
;

487 
	}
}

	@lib/tas/src/lua/ldo.h

7 #i‚de‡
ldo_h


8 
	#ldo_h


	)

10 
	~"lobje˘.h
"

11 
	~"l°©e.h
"

12 
	~"lzio.h
"

14 
	~"defs.h
"

19 #i‚de‡
HARDSTACKTESTS


20 
	#c⁄dh¨d°ackã°s
(
x
Ë{ }

	)

22 
	#c⁄dh¨d°ackã°s
(
x
Ë
	)
x

25 
	#luaD_check°ack
(
L
,
n
) \

26 i‡((*)
L
->
°ack_œ°
 - (*)L->
t›
 <(
n
)*()(
TObje˘
)) \

27 
	`luaD_grow°ack
(
L
, 
n
); \

28 
	`c⁄dh¨d°ackã°s
(
	`luaD_ªÆloc°ack
(
L
, L->
°acksize
));

	)

30 
	#ö¸_t›
(
L
Ë{
	`luaD_check°ack
(L,1); L->
t›
++;}

	)

32 
	#ßve°ack
(
L
,
p
Ë((*)’Ë- (*)L->
°ack
)

	)

33 
	#ª°‹e°ack
(
L
,
n
Ë((
TObje˘
 *)
	`ARM_NOWARN_ALIGN
((*)L->
°ack
 + (n)))

	)

35 
	#ßveci
(
L
,
p
Ë((*)’Ë- (*)L->
ba£_ci
)

	)

36 
	#ª°‹eci
(
L
,
n
Ë((
CÆlInfo
 *)
	`ARM_NOWARN_ALIGN
((*)L->
ba£_ci
 + (n)))

	)

39 (*
	tPfunc
Ë(
	tlua_Sèã
 * 
	tL
, *
	tud
);

41 
	`luaD_ª£çrŸe˘i⁄
(
lua_Sèã
 * 
L
);

42 
	`luaD_¥Ÿe˘ed∑r£r
(
lua_Sèã
 * 
L
, 
ZIO
 * 
z
, 
bö
);

43 
	`luaD_ˇŒhook
(
lua_Sèã
 * 
L
, 
evít
, 
löe
);

44 
StkId
 
	`luaD_¥eˇŒ
(
lua_Sèã
 * 
L
, StkId 
func
);

45 
	`luaD_ˇŒ
(
lua_Sèã
 * 
L
, 
StkId
 
func
, 
nResu…s
);

46 
	`luaD_pˇŒ
(
lua_Sèã
 * 
L
, 
Pfunc
 
func
, *
u
, 
±rdiff_t
 
ﬁdt›
,Öådiff_à
ef
);

47 
	`luaD_posˇŒ
(
lua_Sèã
 * 
L
, 
w™ãd
, 
StkId
 
fú°Resu…
);

48 
	`luaD_ªÆlocCI
(
lua_Sèã
 * 
L
, 
√wsize
);

49 
	`luaD_ªÆloc°ack
(
lua_Sèã
 * 
L
, 
√wsize
);

50 
	`luaD_grow°ack
(
lua_Sèã
 * 
L
, 
n
);

52 
	$luaD_throw
(
lua_Sèã
 * 
L
, 
îrcode
Ë
	`__©åibuã__
 ((
n‹ëu∫
));

53 
	`luaD_øwru≈rŸe˘ed
(
lua_Sèã
 * 
L
, 
Pfunc
 
f
, *
ud
);

	@lib/tas/src/lua/ldump.c

7 
	~<°ddef.h
>

9 
	#ldump_c


	)

11 
	~"lua.h
"

13 
	~"lobje˘.h
"

14 
	~"l›codes.h
"

15 
	~"l°©e.h
"

16 
	~"lundump.h
"

18 
	#DumpVe˘‹
(
b
,
n
,
size
,
D
Ë
	`DumpBlock
(b,“)*(size),D)

	)

19 
	#DumpLôîÆ
(
s
,
D
Ë
	`DumpBlock
("" s,((s))-1,D)

	)

22 
lua_Sèã
 *
	mL
;

23 
lua_Chunkwrôî
 
	mwrôe
;

24 *
	md©a
;

25 } 
	tDumpSèã
;

28 
	$DumpBlock
(c⁄° *
b
, 
size_t
 
size
, 
DumpSèã
 * 
D
)

30 
	`lua_u∆ock
(
D
->
L
);

31 (*
D
->
wrôe
Ë(D->
L
, 
b
, 
size
, D->
d©a
);

32 
	`lua_lock
(
D
->
L
);

33 
	}
}

36 
	$DumpByã
(
y
, 
DumpSèã
 * 
D
)

38 
x
 = ()
y
;

39 
	`DumpBlock
(&
x
, (x), 
D
);

40 
	}
}

43 
	$DumpI¡
(
x
, 
DumpSèã
 * 
D
)

45 
	`DumpBlock
(&
x
, (x), 
D
);

46 
	}
}

49 
	$DumpSize
(
size_t
 
x
, 
DumpSèã
 * 
D
)

51 
	`DumpBlock
(&
x
, (x), 
D
);

52 
	}
}

55 
	$DumpNumbî
(
lua_Numbî
 
x
, 
DumpSèã
 * 
D
)

57 
	`DumpBlock
(&
x
, (x), 
D
);

58 
	}
}

61 
	$DumpSåög
(
TSåög
 * 
s
, 
DumpSèã
 * 
D
)

63 i‡(
s
 =
NULL
 || 
	`gë°r
(s) == NULL)

64 
	`DumpSize
(0, 
D
);

66 
size_t
 
size
 = 
s
->
tsv
.
Àn
 + 1;

67 
	`DumpSize
(
size
, 
D
);

68 
	`DumpBlock
(
	`gë°r
(
s
), 
size
, 
D
);

70 
	}
}

73 
	$DumpCode
(c⁄° 
PrŸo
 * 
f
, 
DumpSèã
 * 
D
)

75 
	`DumpI¡
(
f
->
sizecode
, 
D
);

76 
	`DumpVe˘‹
(
f
->
code
, f->
sizecode
, (*f->code), 
D
);

77 
	}
}

80 
	$DumpLoˇls
(c⁄° 
PrŸo
 * 
f
, 
DumpSèã
 * 
D
)

82 
i
, 
n
 = 
f
->
sizñocv¨s
;

83 
	`DumpI¡
(
n
, 
D
);

84 
i
 = 0; i < 
n
; i++) {

85 
	`DumpSåög
(
f
->
locv¨s
[
i
].
v¨«me
, 
D
);

86 
	`DumpI¡
(
f
->
locv¨s
[
i
].
°¨çc
, 
D
);

87 
	`DumpI¡
(
f
->
locv¨s
[
i
].
ídpc
, 
D
);

89 
	}
}

92 
	$DumpLöes
(c⁄° 
PrŸo
 * 
f
, 
DumpSèã
 * 
D
)

94 
	`DumpI¡
(
f
->
sizñöeöfo
, 
D
);

95 
	`DumpVe˘‹
(
f
->
löeöfo
, f->
sizñöeöfo
, (*f->löeöfo), 
D
);

96 
	}
}

99 
	$DumpUpvÆues
(c⁄° 
PrŸo
 * 
f
, 
DumpSèã
 * 
D
)

101 
i
, 
n
 = 
f
->
sizeupvÆues
;

102 
	`DumpI¡
(
n
, 
D
);

103 
i
 = 0; i < 
n
; i++)

104 
	`DumpSåög
(
f
->
upvÆues
[
i
], 
D
);

105 
	}
}

107 
DumpFun˘i⁄
(c⁄° 
PrŸo
 * 
f
, c⁄° 
TSåög
 * 
p
, 
DumpSèã
 * 
D
);

110 
	$DumpC⁄°™ts
(c⁄° 
PrŸo
 * 
f
, 
DumpSèã
 * 
D
)

112 
i
, 
n
;

113 
	`DumpI¡
(
n
 = 
f
->
sizek
, 
D
);

114 
i
 = 0; i < 
n
; i++) {

115 c⁄° 
TObje˘
 *
o
 = &
f
->
k
[
i
];

116 
	`DumpByã
(
	`ây≥
(
o
), 
D
);

117 
	`ây≥
(
o
)) {

118 
LUA_TNUMBER
:

119 
	`DumpNumbî
(
	`nvÆue
(
o
), 
D
);

121 
LUA_TSTRING
:

122 
	`DumpSåög
(
	`tsvÆue
(
o
), 
D
);

124 
LUA_TNIL
:

127 
	`lua_as£π
(0);

131 
	`DumpI¡
(
n
 = 
f
->
sizï
, 
D
);

132 
i
 = 0; i < 
n
; i++)

133 
	`DumpFun˘i⁄
(
f
->
p
[
i
], f->
sour˚
, 
D
);

134 
	}
}

137 
	$DumpFun˘i⁄
(c⁄° 
PrŸo
 * 
f
, c⁄° 
TSåög
 * 
p
, 
DumpSèã
 * 
D
)

139 
	`DumpSåög
((
f
->
sour˚
 =
p
Ë? 
NULL
 : f->sour˚, 
D
);

140 
	`DumpI¡
(
f
->
löeDeföed
, 
D
);

141 
	`DumpByã
(
f
->
nups
, 
D
);

142 
	`DumpByã
(
f
->
num∑øms
, 
D
);

143 
	`DumpByã
(
f
->
is_v¨¨g
, 
D
);

144 
	`DumpByã
(
f
->
max°acksize
, 
D
);

145 
	`DumpLöes
(
f
, 
D
);

146 
	`DumpLoˇls
(
f
, 
D
);

147 
	`DumpUpvÆues
(
f
, 
D
);

148 
	`DumpC⁄°™ts
(
f
, 
D
);

149 
	`DumpCode
(
f
, 
D
);

150 
	}
}

153 
	$DumpHódî
(
DumpSèã
 * 
D
)

155 
	`DumpLôîÆ
(
LUA_SIGNATURE
, 
D
);

156 
	`DumpByã
(
VERSION
, 
D
);

157 
	`DumpByã
(
	`luaU_ídü¬ess
(), 
D
);

158 
	`DumpByã
((), 
D
);

159 
	`DumpByã
((
size_t
), 
D
);

160 
	`DumpByã
((
In°ru˘i⁄
), 
D
);

161 
	`DumpByã
(
SIZE_OP
, 
D
);

162 
	`DumpByã
(
SIZE_A
, 
D
);

163 
	`DumpByã
(
SIZE_B
, 
D
);

164 
	`DumpByã
(
SIZE_C
, 
D
);

165 
	`DumpByã
((
lua_Numbî
), 
D
);

166 
	`DumpNumbî
(
TEST_NUMBER
, 
D
);

167 
	}
}

173 
	$luaU_dump
(
lua_Sèã
 * 
L
, c⁄° 
PrŸo
 * 
Maö
, 
lua_Chunkwrôî
 
w
, *
d©a
)

175 
DumpSèã
 
D
;

176 
D
.
L
 = L;

177 
D
.
wrôe
 = 
w
;

178 
D
.
d©a
 = data;

179 
	`DumpHódî
(&
D
);

180 
	`DumpFun˘i⁄
(
Maö
, 
NULL
, &
D
);

181 
	}
}

	@lib/tas/src/lua/lfunc.c

7 
	~<°dlib.h
>

9 
	#lfunc_c


	)

11 
	~"lua.h
"

13 
	~"lfunc.h
"

14 
	~"lgc.h
"

15 
	~"lmem.h
"

16 
	~"lobje˘.h
"

17 
	~"l°©e.h
"

19 
	#sizeC˛osuª
(
n
Ë(
	`ˇ°
(, (
CClosuª
)) + \

20 
	`ˇ°
(, (
TObje˘
)*((
n
)-1)))

	)

22 
	#sizeL˛osuª
(
n
Ë(
	`ˇ°
(, (
LClosuª
)) + \

23 
	`ˇ°
(, (
TObje˘
 *)*((
n
)-1)))

	)

25 
Closuª
 *

26 
	$luaF_√wC˛osuª
(
lua_Sèã
 * 
L
, 
√Àms
)

28 
Closuª
 *
c
 = 
	`ˇ°
(Closuª *, 
	`luaM_mÆloc
(
L
, 
	`sizeC˛osuª
(
√Àms
)));

29 
	`luaC_lök
(
L
, 
	`vÆtogco
(
c
), 
LUA_TFUNCTION
);

30 
c
->c.
isC
 = 1;

31 
c
->c.
nupvÆues
 = 
	`ˇ°
(
lu_byã
, 
√Àms
);

32  
c
;

33 
	}
}

35 
Closuª
 *

36 
	$luaF_√wL˛osuª
(
lua_Sèã
 * 
L
, 
√Àms
, 
TObje˘
 * 
e
)

38 
Closuª
 *
c
 = 
	`ˇ°
(Closuª *, 
	`luaM_mÆloc
(
L
, 
	`sizeL˛osuª
(
√Àms
)));

39 
	`luaC_lök
(
L
, 
	`vÆtogco
(
c
), 
LUA_TFUNCTION
);

40 
c
->
l
.
isC
 = 0;

41 
c
->
l
.
g
 = *
e
;

42 
c
->
l
.
nupvÆues
 = 
	`ˇ°
(
lu_byã
, 
√Àms
);

43  
c
;

44 
	}
}

46 
UpVÆ
 *

47 
	$luaF_födupvÆ
(
lua_Sèã
 * 
L
, 
StkId
 
Àvñ
)

49 
GCObje˘
 **
µ
 = &
L
->
›íupvÆ
;

50 
UpVÆ
 *
p
;

51 
UpVÆ
 *
v
;

52 (
p
 = 
	`ngcŸouv
(*
µ
)Ë!
NULL
 &&Ö->
v
 >
Àvñ
) {

53 i‡(
p
->
v
 =
Àvñ
)

54  
p
;

55 
µ
 = &
p
->
√xt
;

57 
v
 = 
	`luaM_√w
(
L
, 
UpVÆ
);

58 
v
->
â
 = 
LUA_TUPVAL
;

59 
v
->
m¨ked
 = 1;

60 
v
->v = 
Àvñ
;

61 
v
->
√xt
 = *
µ
;

62 *
µ
 = 
	`vÆtogco
(
v
);

63  
v
;

64 
	}
}

67 
	$luaF_˛o£
(
lua_Sèã
 * 
L
, 
StkId
 
Àvñ
)

69 
UpVÆ
 *
p
;

70 (
p
 = 
	`ngcŸouv
(
L
->
›íupvÆ
)Ë!
NULL
 &&Ö->
v
 >
Àvñ
) {

71 
	`£tobj
(&
p
->
vÆue
,Ö->
v
);

72 
p
->
v
 = &p->
vÆue
;

73 
L
->
›íupvÆ
 = 
p
->
√xt
;

74 
	`luaC_lök
(
L
, 
	`vÆtogco
(
p
), 
LUA_TUPVAL
);

76 
	}
}

78 
PrŸo
 *

79 
	$luaF_√w¥Ÿo
(
lua_Sèã
 * 
L
)

81 
PrŸo
 *
f
 = 
	`luaM_√w
(
L
, Proto);

82 
	`luaC_lök
(
L
, 
	`vÆtogco
(
f
), 
LUA_TPROTO
);

83 
f
->
k
 = 
NULL
;

84 
f
->
sizek
 = 0;

85 
f
->
p
 = 
NULL
;

86 
f
->
sizï
 = 0;

87 
f
->
code
 = 
NULL
;

88 
f
->
sizecode
 = 0;

89 
f
->
sizñöeöfo
 = 0;

90 
f
->
sizeupvÆues
 = 0;

91 
f
->
nups
 = 0;

92 
f
->
upvÆues
 = 
NULL
;

93 
f
->
num∑øms
 = 0;

94 
f
->
is_v¨¨g
 = 0;

95 
f
->
max°acksize
 = 0;

96 
f
->
löeöfo
 = 
NULL
;

97 
f
->
sizñocv¨s
 = 0;

98 
f
->
locv¨s
 = 
NULL
;

99 
f
->
löeDeföed
 = 0;

100 
f
->
sour˚
 = 
NULL
;

101  
f
;

102 
	}
}

105 
	$luaF_‰ì¥Ÿo
(
lua_Sèã
 * 
L
, 
PrŸo
 * 
f
)

107 
	`luaM_‰ì¨øy
(
L
, 
f
->
code
, f->
sizecode
, 
In°ru˘i⁄
);

108 
	`luaM_‰ì¨øy
(
L
, 
f
->
p
, f->
sizï
, 
PrŸo
 *);

109 
	`luaM_‰ì¨øy
(
L
, 
f
->
k
, f->
sizek
, 
TObje˘
);

110 
	`luaM_‰ì¨øy
(
L
, 
f
->
löeöfo
, f->
sizñöeöfo
, );

111 
	`luaM_‰ì¨øy
(
L
, 
f
->
locv¨s
, f->
sizñocv¨s
, 
LocV¨
);

112 
	`luaM_‰ì¨øy
(
L
, 
f
->
upvÆues
, f->
sizeupvÆues
, 
TSåög
 *);

113 
	`luaM_‰ìÀm
(
L
, 
f
);

114 
	}
}

117 
	$luaF_‰ì˛osuª
(
lua_Sèã
 * 
L
, 
Closuª
 * 
c
)

119 
size
 = (
c
->c.
isC
Ë? 
	`sizeC˛osuª
(c->c.
nupvÆues
Ë: 
	`sizeL˛osuª
(c->
l
.nupvalues);

120 
	`luaM_‰ì
(
L
, 
c
, 
size
);

121 
	}
}

128 
	$luaF_gëloˇ ame
(c⁄° 
PrŸo
 * 
f
, 
loˇl_numbî
, 
pc
)

130 
i
;

131 
i
 = 0; i < 
f
->
sizñocv¨s
 && f->
locv¨s
[i].
°¨çc
 <
pc
; i++) {

132 i‡(
pc
 < 
f
->
locv¨s
[
i
].
ídpc
) {

133 
loˇl_numbî
--;

134 i‡(
loˇl_numbî
 == 0)

135  
	`gë°r
(
f
->
locv¨s
[
i
].
v¨«me
);

138  
NULL
;

139 
	}
}

	@lib/tas/src/lua/lfunc.h

7 #i‚de‡
lfunc_h


8 
	#lfunc_h


	)

10 
	~"lobje˘.h
"

12 
PrŸo
 *
luaF_√w¥Ÿo
(
lua_Sèã
 * 
L
);

13 
Closuª
 *
luaF_√wC˛osuª
(
lua_Sèã
 * 
L
, 
√Àms
);

14 
Closuª
 *
luaF_√wL˛osuª
(
lua_Sèã
 * 
L
, 
√Àms
, 
TObje˘
 * 
e
);

15 
UpVÆ
 *
luaF_födupvÆ
(
lua_Sèã
 * 
L
, 
StkId
 
Àvñ
);

16 
luaF_˛o£
(
lua_Sèã
 * 
L
, 
StkId
 
Àvñ
);

17 
luaF_‰ì¥Ÿo
(
lua_Sèã
 * 
L
, 
PrŸo
 * 
f
);

18 
luaF_‰ì˛osuª
(
lua_Sèã
 * 
L
, 
Closuª
 * 
c
);

20 c⁄° *
luaF_gëloˇ ame
(c⁄° 
PrŸo
 * 
func
, 
loˇl_numbî
, 
pc
);

	@lib/tas/src/lua/lgc.c

7 
	~<°rög.h
>

9 
	#lgc_c


	)

11 
	~"lua.h
"

13 
	~"ldebug.h
"

14 
	~"ldo.h
"

15 
	~"lfunc.h
"

16 
	~"lgc.h
"

17 
	~"lmem.h
"

18 
	~"lobje˘.h
"

19 
	~"l°©e.h
"

20 
	~"l°rög.h
"

21 
	~"…abÀ.h
"

22 
	~"…m.h
"

24 
	sGCSèã
 {

25 
GCObje˘
 *
	mtm¨k
;

26 
GCObje˘
 *
	mwk
;

27 
GCObje˘
 *
	mwv
;

28 
GCObje˘
 *
	mwkv
;

29 
globÆ_Sèã
 *
	mg
;

30 } 
	tGCSèã
;

35 
	#£tbô
(
x
,
b
Ë((xË|(1<<(b)))

	)

36 
	#ª£tbô
(
x
,
b
Ë((xË&
	`ˇ°
(
lu_byã
, ~(1<<(b))))

	)

37 
	#ã°bô
(
x
,
b
Ë((xË& (1<<(b)))

	)

39 
	#unm¨k
(
x
Ë
	`ª£tbô
((x)->
gch
.
m¨ked
, 0)

	)

40 
	#ism¨ked
(
x
Ë((x)->
gch
.
m¨ked
 & ((1<<4)|1))

	)

42 
	#°rögm¨k
(
s
Ë
	`£tbô
((s)->
tsv
.
m¨ked
, 0)

	)

44 
	#isföÆized
(
u
Ë(!
	`ã°bô
((u)->
uv
.
m¨ked
, 1))

	)

45 
	#m¨kföÆized
(
u
Ë
	`ª£tbô
((u)->
uv
.
m¨ked
, 1)

	)

47 
	#KEYWEAKBIT
 1

	)

48 
	#VALUEWEAKBIT
 2

	)

49 
	#KEYWEAK
 (1<<
KEYWEAKBIT
)

	)

50 
	#VALUEWEAK
 (1<<
VALUEWEAKBIT
)

	)

52 
	#m¨kobje˘
(
°
,
o
Ë{ 
	`checkc⁄si°ícy
(o); \

53 i‡(
	`iscﬁÀ˘abÀ
(
o
Ë&& !
	`ism¨ked
(
	`gcvÆue
(o))Ë
	`ªÆlym¨kobje˘
(
°
,gcvÆue(o)); }

	)

55 
	#c⁄dm¨kobje˘
(
°
,
o
,
c
Ë{ 
	`checkc⁄si°ícy
(o); \

56 i‡(
	`iscﬁÀ˘abÀ
(
o
Ë&& !
	`ism¨ked
(
	`gcvÆue
(o)Ë&& (
c
)) \

57 
	`ªÆlym¨kobje˘
(
°
,
	`gcvÆue
(
o
)); }

	)

59 
	#m¨kvÆue
(
°
,
t
Ë{ i‡(!
	`ism¨ked
(
	`vÆtogco
(t))) \

60 
	`ªÆlym¨kobje˘
(
°
, 
	`vÆtogco
(
t
)); }

	)

63 
	$ªÆlym¨kobje˘
(
GCSèã
 * 
°
, 
GCObje˘
 * 
o
)

65 
	`lua_as£π
(!
	`ism¨ked
(
o
));

66 
	`£tbô
(
o
->
gch
.
m¨ked
, 0);

67 
o
->
gch
.
â
) {

68 
LUA_TUSERDATA
:

70 
	`m¨kvÆue
(
°
, 
	`gcŸou
(
o
)->
uv
.
më©abÀ
);

73 
LUA_TFUNCTION
:

75 
	`gcŸo˛
(
o
)->
c
.
g˛i°
 = 
°
->
tm¨k
;

76 
°
->
tm¨k
 = 
o
;

79 
LUA_TTABLE
:

81 
	`gcŸoh
(
o
)->
g˛i°
 = 
°
->
tm¨k
;

82 
°
->
tm¨k
 = 
o
;

85 
LUA_TTHREAD
:

87 
	`gcŸŸh
(
o
)->
g˛i°
 = 
°
->
tm¨k
;

88 
°
->
tm¨k
 = 
o
;

91 
LUA_TPROTO
:

93 
	`gcŸ›
(
o
)->
g˛i°
 = 
°
->
tm¨k
;

94 
°
->
tm¨k
 = 
o
;

98 
	`lua_as£π
(
o
->
gch
.
â
 =
LUA_TSTRING
);

100 
	}
}

103 
	$m¨ktmu
(
GCSèã
 * 
°
)

105 
GCObje˘
 *
u
;

106 
u
 = 
°
->
g
->
tmud©a
; u; u = u->
gch
.
√xt
) {

107 
	`unm¨k
(
u
);

108 
	`ªÆlym¨kobje˘
(
°
, 
u
);

110 
	}
}

113 
size_t


114 
	$luaC_£∑øãud©a
(
lua_Sèã
 * 
L
)

116 
size_t
 
dódmem
 = 0;

117 
GCObje˘
 **
p
 = &
	`G
(
L
)->
roŸud©a
;

118 
GCObje˘
 *
cuº
;

119 
GCObje˘
 *
cﬁÀ˘ed
 = 
NULL
;

120 
GCObje˘
 **
œ°cﬁÀ˘ed
 = &
cﬁÀ˘ed
;

121 (
cuº
 = *
p
Ë!
NULL
) {

122 
	`lua_as£π
(
cuº
->
gch
.
â
 =
LUA_TUSERDATA
);

123 i‡(
	`ism¨ked
(
cuº
Ë|| 
	`isföÆized
(
	`gcŸou
(curr)))

124 
p
 = &
cuº
->
gch
.
√xt
;

126 i‡(
	`Á°tm
(
L
, 
	`gcŸou
(
cuº
)->
uv
.
më©abÀ
, 
TM_GC
Ë=
NULL
) {

127 
	`m¨kföÆized
(
	`gcŸou
(
cuº
));

128 
p
 = &
cuº
->
gch
.
√xt
;

130 
dódmem
 +
	`sizeud©a
(
	`gcŸou
(
cuº
)->
uv
.
Àn
);

131 *
p
 = 
cuº
->
gch
.
√xt
;

132 
cuº
->
gch
.
√xt
 = 
NULL
;

133 *
œ°cﬁÀ˘ed
 = 
cuº
;

134 
œ°cﬁÀ˘ed
 = &
cuº
->
gch
.
√xt
;

138 *
œ°cﬁÀ˘ed
 = 
	`G
(
L
)->
tmud©a
;

139 
	`G
(
L
)->
tmud©a
 = 
cﬁÀ˘ed
;

140  
dódmem
;

141 
	}
}

144 
	$ªmovekey
(
Node
 * 
n
)

146 
	`£äûvÆue
(
	`gvÆ
(
n
));

147 i‡(
	`iscﬁÀ˘abÀ
(
	`gkey
(
n
)))

148 
	`£âty≥
(
	`gkey
(
n
), 
LUA_TNONE
);

149 
	}
}

152 
	$åavî£èbÀ
(
GCSèã
 * 
°
, 
TabÀ
 * 
h
)

154 
i
;

155 
wókkey
 = 0;

156 
wókvÆue
 = 0;

157 c⁄° 
TObje˘
 *
mode
;

158 
	`m¨kvÆue
(
°
, 
h
->
më©abÀ
);

159 
	`lua_as£π
(
h
->
lsizíode
 || h->
node
 =
°
->
g
->
dummynode
);

160 
mode
 = 
	`gÁ°tm
(
°
->
g
, 
h
->
më©abÀ
, 
TM_MODE
);

161 i‡(
mode
 && 
	`âis°rög
(mode)) {

162 
wókkey
 = (
	`°rchr
(
	`svÆue
(
mode
), 'k'Ë!
NULL
);

163 
wókvÆue
 = (
	`°rchr
(
	`svÆue
(
mode
), 'v'Ë!
NULL
);

164 i‡(
wókkey
 || 
wókvÆue
) {

165 
GCObje˘
 **
wókli°
;

166 
h
->
m¨ked
 &~(
KEYWEAK
 | 
VALUEWEAK
);

167 
h
->
m¨ked
 |
	`ˇ°
(
lu_byã
, (
wókkey
 << 
KEYWEAKBIT
Ë| (
wókvÆue
 << 
VALUEWEAKBIT
));

168 
wókli°
 = (
wókkey
 && 
wókvÆue
Ë? &
°
->
wkv
 : (wókkeyË? &°->
wk
 : &°->
wv
;

169 
h
->
g˛i°
 = *
wókli°
;

170 *
wókli°
 = 
	`vÆtogco
(
h
);

173 i‡(!
wókvÆue
) {

174 
i
 = 
h
->
sizóºay
;

175 
i
--)

176 
	`m¨kobje˘
(
°
, &
h
->
¨øy
[
i
]);

178 
i
 = 
	`sizíode
(
h
);

179 
i
--) {

180 
Node
 *
n
 = 
	`gnode
(
h
, 
i
);

181 i‡(!
	`âi¢û
(
	`gvÆ
(
n
))) {

182 
	`lua_as£π
(!
	`âi¢û
(
	`gkey
(
n
)));

183 
	`c⁄dm¨kobje˘
(
°
, 
	`gkey
(
n
), !
wókkey
);

184 
	`c⁄dm¨kobje˘
(
°
, 
	`gvÆ
(
n
), !
wókvÆue
);

187 
	}
}

190 
	$åavî£¥Ÿo
(
GCSèã
 * 
°
, 
PrŸo
 * 
f
)

192 
i
;

193 
	`°rögm¨k
(
f
->
sour˚
);

194 
i
 = 0; i < 
f
->
sizek
; i++) {

195 i‡(
	`âis°rög
(
f
->
k
 + 
i
))

196 
	`°rögm¨k
(
	`tsvÆue
(
f
->
k
 + 
i
));

198 
i
 = 0; i < 
f
->
sizeupvÆues
; i++)

199 
	`°rögm¨k
(
f
->
upvÆues
[
i
]);

200 
i
 = 0; i < 
f
->
sizï
; i++)

201 
	`m¨kvÆue
(
°
, 
f
->
p
[
i
]);

202 
i
 = 0; i < 
f
->
sizñocv¨s
; i++)

203 
	`°rögm¨k
(
f
->
locv¨s
[
i
].
v¨«me
);

204 
	`lua_as£π
(
	`luaG_checkcode
(
f
));

205 
	}
}

208 
	$åavî£˛osuª
(
GCSèã
 * 
°
, 
Closuª
 * 
˛
)

210 i‡(
˛
->
c
.
isC
) {

211 
i
;

212 
i
 = 0; i < 
˛
->
c
.
nupvÆues
; i++)

213 
	`m¨kobje˘
(
°
, &
˛
->
c
.
upvÆue
[
i
]);

215 
i
;

216 
	`lua_as£π
(
˛
->
l
.
nupvÆues
 =˛->l.
p
->
nups
);

217 
	`m¨kvÆue
(
°
, 
	`hvÆue
(&
˛
->
l
.
g
));

218 
	`m¨kvÆue
(
°
, 
˛
->
l
.
p
);

219 
i
 = 0; i < 
˛
->
l
.
nupvÆues
; i++) {

220 
UpVÆ
 *
u
 = 
˛
->
l
.
upvÆs
[
i
];

221 i‡(!
u
->
m¨ked
) {

222 
	`m¨kobje˘
(
°
, &
u
->
vÆue
);

223 
u
->
m¨ked
 = 1;

227 
	}
}

230 
	$check°acksizes
(
lua_Sèã
 * 
L
, 
StkId
 
max
)

232 
u£d
 = 
L
->
ci
 - L->
ba£_ci
;

233 i‡(4 * 
u£d
 < 
L
->
size_ci
 && 2 * 
BASIC_CI_SIZE
 < L->size_ci)

234 
	`luaD_ªÆlocCI
(
L
, L->
size_ci
 / 2);

236 
	`c⁄dh¨d°ackã°s
(
	`luaD_ªÆlocCI
(
L
, L->
size_ci
));

237 
u£d
 = 
max
 - 
L
->
°ack
;

238 i‡(4 * 
u£d
 < 
L
->
°acksize
 && 2 * (
BASIC_STACK_SIZE
 + 
EXTRA_STACK
) < L->stacksize)

239 
	`luaD_ªÆloc°ack
(
L
, L->
°acksize
 / 2);

241 
	`c⁄dh¨d°ackã°s
(
	`luaD_ªÆloc°ack
(
L
, L->
°acksize
));

242 
	}
}

245 
	$åavî£°ack
(
GCSèã
 * 
°
, 
lua_Sèã
 * 
L1
)

247 
StkId
 
o
, 
lim
;

248 
CÆlInfo
 *
ci
;

249 
	`m¨kobje˘
(
°
, 
	`gt
(
L1
));

250 
lim
 = 
L1
->
t›
;

251 
ci
 = 
L1
->
ba£_ci
; ci <= L1->ci; ci++) {

252 
	`lua_as£π
(
ci
->
t›
 <
L1
->
°ack_œ°
);

253 
	`lua_as£π
(
ci
->
°©e
 & (
CI_C
 | 
CI_HASFRAME
 | 
CI_SAVEDPC
));

254 i‡(
lim
 < 
ci
->
t›
)

255 
lim
 = 
ci
->
t›
;

257 
o
 = 
L1
->
°ack
; o < L1->
t›
; o++)

258 
	`m¨kobje˘
(
°
, 
o
);

259 ; 
o
 <
lim
; o++)

260 
	`£äûvÆue
(
o
);

261 
	`check°acksizes
(
L1
, 
lim
);

262 
	}
}

265 
	$¥›ag©em¨ks
(
GCSèã
 * 
°
)

267 
°
->
tm¨k
) {

268 
°
->
tm¨k
->
gch
.
â
) {

269 
LUA_TTABLE
:

271 
TabÀ
 *
h
 = 
	`gcŸoh
(
°
->
tm¨k
);

272 
°
->
tm¨k
 = 
h
->
g˛i°
;

273 
	`åavî£èbÀ
(
°
, 
h
);

276 
LUA_TFUNCTION
:

278 
Closuª
 *
˛
 = 
	`gcŸo˛
(
°
->
tm¨k
);

279 
°
->
tm¨k
 = 
˛
->
c
.
g˛i°
;

280 
	`åavî£˛osuª
(
°
, 
˛
);

283 
LUA_TTHREAD
:

285 
lua_Sèã
 *
th
 = 
	`gcŸŸh
(
°
->
tm¨k
);

286 
°
->
tm¨k
 = 
th
->
g˛i°
;

287 
	`åavî£°ack
(
°
, 
th
);

290 
LUA_TPROTO
:

292 
PrŸo
 *
p
 = 
	`gcŸ›
(
°
->
tm¨k
);

293 
°
->
tm¨k
 = 
p
->
g˛i°
;

294 
	`åavî£¥Ÿo
(
°
, 
p
);

298 
	`lua_as£π
(0);

301 
	}
}

304 
	$vÆism¨ked
(c⁄° 
TObje˘
 * 
o
)

306 i‡(
	`âis°rög
(
o
))

307 
	`°rögm¨k
(
	`tsvÆue
(
o
));

308  !
	`iscﬁÀ˘abÀ
(
o
Ë|| 
	`ã°bô
(o->
vÆue
.
gc
->
gch
.
m¨ked
, 0);

309 
	}
}

315 
	$˛óπabÀkeys
(
GCObje˘
 * 
l
)

317 
l
) {

318 
TabÀ
 *
h
 = 
	`gcŸoh
(
l
);

319 
i
 = 
	`sizíode
(
h
);

320 
	`lua_as£π
(
h
->
m¨ked
 & 
KEYWEAK
);

321 
i
--) {

322 
Node
 *
n
 = 
	`gnode
(
h
, 
i
);

323 i‡(!
	`vÆism¨ked
(
	`gkey
(
n
)))

324 
	`ªmovekey
(
n
);

326 
l
 = 
h
->
g˛i°
;

328 
	}
}

334 
	$˛óπabÀvÆues
(
GCObje˘
 * 
l
)

336 
l
) {

337 
TabÀ
 *
h
 = 
	`gcŸoh
(
l
);

338 
i
 = 
h
->
sizóºay
;

339 
	`lua_as£π
(
h
->
m¨ked
 & 
VALUEWEAK
);

340 
i
--) {

341 
TObje˘
 *
o
 = &
h
->
¨øy
[
i
];

342 i‡(!
	`vÆism¨ked
(
o
))

343 
	`£äûvÆue
(
o
);

345 
i
 = 
	`sizíode
(
h
);

346 
i
--) {

347 
Node
 *
n
 = 
	`gnode
(
h
, 
i
);

348 i‡(!
	`vÆism¨ked
(
	`gvÆ
(
n
)))

349 
	`ªmovekey
(
n
);

351 
l
 = 
h
->
g˛i°
;

353 
	}
}

356 
	$‰ìobj
(
lua_Sèã
 * 
L
, 
GCObje˘
 * 
o
)

358 
o
->
gch
.
â
) {

359 
LUA_TPROTO
:

360 
	`luaF_‰ì¥Ÿo
(
L
, 
	`gcŸ›
(
o
));

362 
LUA_TFUNCTION
:

363 
	`luaF_‰ì˛osuª
(
L
, 
	`gcŸo˛
(
o
));

365 
LUA_TUPVAL
:

366 
	`luaM_‰ìÀm
(
L
, 
	`gcŸouv
(
o
));

368 
LUA_TTABLE
:

369 
	`luaH_‰ì
(
L
, 
	`gcŸoh
(
o
));

371 
LUA_TTHREAD
:

373 
	`lua_as£π
(
	`gcŸŸh
(
o
Ë!
L
 && gcŸŸh(oË!
	`G
(L)->
maöthªad
);

374 
	`luaE_‰ìthªad
(
L
, 
	`gcŸŸh
(
o
));

377 
LUA_TSTRING
:

379 
	`luaM_‰ì
(
L
, 
o
, 
	`size°rög
(
	`gcŸŸs
(o)->
tsv
.
Àn
));

382 
LUA_TUSERDATA
:

384 
	`luaM_‰ì
(
L
, 
o
, 
	`sizeud©a
(
	`gcŸou
(o)->
uv
.
Àn
));

388 
	`lua_as£π
(0);

390 
	}
}

393 
	$swì∂i°
(
lua_Sèã
 * 
L
, 
GCObje˘
 ** 
p
, 
limô
)

395 
GCObje˘
 *
cuº
;

396 
cou¡
 = 0;

397 (
cuº
 = *
p
Ë!
NULL
) {

398 i‡(
cuº
->
gch
.
m¨ked
 > 
limô
) {

399 
	`unm¨k
(
cuº
);

400 
p
 = &
cuº
->
gch
.
√xt
;

402 
cou¡
++;

403 *
p
 = 
cuº
->
gch
.
√xt
;

404 
	`‰ìobj
(
L
, 
cuº
);

407  
cou¡
;

408 
	}
}

411 
	$swìp°rögs
(
lua_Sèã
 * 
L
, 
Æl
)

413 
i
;

414 
i
 = 0; i < 
	`G
(
L
)->
°π
.
size
; i++) {

415 
	`G
(
L
)->
°π
.
nu£
 -
	`swì∂i°
(L, &G(L)->°π.
hash
[
i
], 
Æl
);

417 
	}
}

420 
	$checkSizes
(
lua_Sèã
 * 
L
, 
size_t
 
dódmem
)

423 i‡(
	`G
(
L
)->
°π
.
nu£
 < 
	`ˇ°
(
ls_n°r
, G(L)->°π.
size
 / 4Ë&& G(L)->°π.sizê> 
MINSTRTABSIZE
 * 2)

424 
	`luaS_ªsize
(
L
, 
	`G
(L)->
°π
.
size
 / 2);

426 i‡(
	`luaZ_sizebuf„r
(&
	`G
(
L
)->
buff
Ë> 
LUA_MINBUFFER
 * 2) {

427 
size_t
 
√wsize
 = 
	`luaZ_sizebuf„r
(&
	`G
(
L
)->
buff
) / 2;

428 
	`luaZ_ªsizebuf„r
(
L
, &
	`G
(L)->
buff
, 
√wsize
);

430 
	`G
(
L
)->
GCthªshﬁd
 = 2 * G(L)->
nblocks
 - 
dódmem
;

431 
	}
}

434 
	$do1gcTM
(
lua_Sèã
 * 
L
, 
Ud©a
 * 
ud©a
)

436 c⁄° 
TObje˘
 *
tm
 = 
	`Á°tm
(
L
, 
ud©a
->
uv
.
më©abÀ
, 
TM_GC
);

437 i‡(
tm
 !
NULL
) {

438 
	`£tobj2s
(
L
->
t›
, 
tm
);

439 
	`£tuvÆue
(
L
->
t›
 + 1, 
ud©a
);

440 
L
->
t›
 += 2;

441 
	`luaD_ˇŒ
(
L
, L->
t›
 - 2, 0);

443 
	}
}

446 
	$luaC_ˇŒGCTM
(
lua_Sèã
 * 
L
)

448 
lu_byã
 
ﬁdah
 = 
L
->
Ælowhook
;

449 
L
->
Ælowhook
 = 0;

450 
L
->
t›
++;

451 
	`G
(
L
)->
tmud©a
 !
NULL
) {

452 
GCObje˘
 *
o
 = 
	`G
(
L
)->
tmud©a
;

453 
Ud©a
 *
ud©a
 = 
	`gcŸou
(
o
);

454 
	`G
(
L
)->
tmud©a
 = 
ud©a
->
uv
.
√xt
;

455 
ud©a
->
uv
.
√xt
 = 
	`G
(
L
)->
roŸud©a
;

456 
	`G
(
L
)->
roŸud©a
 = 
o
;

457 
	`£tuvÆue
(
L
->
t›
 - 1, 
ud©a
);

458 
	`unm¨k
(
o
);

459 
	`m¨kföÆized
(
ud©a
);

460 
	`do1gcTM
(
L
, 
ud©a
);

462 
L
->
t›
--;

463 
L
->
Ælowhook
 = 
ﬁdah
;

464 
	}
}

467 
	$luaC_swìp
(
lua_Sèã
 * 
L
, 
Æl
)

469 i‡(
Æl
)

470 
Æl
 = 256;

471 
	`swì∂i°
(
L
, &
	`G
(L)->
roŸud©a
, 
Æl
);

472 
	`swìp°rögs
(
L
, 
Æl
);

473 
	`swì∂i°
(
L
, &
	`G
(L)->
roŸgc
, 
Æl
);

474 
	}
}

478 
	$m¨kroŸ
(
GCSèã
 * 
°
, 
lua_Sèã
 * 
L
)

480 
globÆ_Sèã
 *
g
 = 
°
->g;

481 
	`m¨kobje˘
(
°
, 
	`deÁu…mëa
(
L
));

482 
	`m¨kobje˘
(
°
, 
	`ªgi°ry
(
L
));

483 
	`åavî£°ack
(
°
, 
g
->
maöthªad
);

484 i‡(
L
 !
g
->
maöthªad
)

485 
	`m¨kvÆue
(
°
, 
L
);

486 
	}
}

488 
size_t


489 
	$m¨k
(
lua_Sèã
 * 
L
)

491 
size_t
 
dódmem
;

492 
GCSèã
 
°
;

493 
GCObje˘
 *
wkv
;

494 
°
.
g
 = 
	`G
(
L
);

495 
°
.
tm¨k
 = 
NULL
;

496 
°
.
wkv
 = st.
wk
 = st.
wv
 = 
NULL
;

497 
	`m¨kroŸ
(&
°
, 
L
);

498 
	`¥›ag©em¨ks
(&
°
);

499 
	`˛óπabÀvÆues
(
°
.
wkv
);

500 
	`˛óπabÀvÆues
(
°
.
wv
);

501 
wkv
 = 
°
.wkv;

502 
°
.
wkv
 = 
NULL
;

503 
°
.
wv
 = 
NULL
;

504 
dódmem
 = 
	`luaC_£∑øãud©a
(
L
);

505 
	`m¨ktmu
(&
°
);

506 
	`¥›ag©em¨ks
(&
°
);

507 
	`˛óπabÀkeys
(
wkv
);

509 
	`˛óπabÀkeys
(
°
.
wk
);

510 
	`˛óπabÀvÆues
(
°
.
wv
);

511 
	`˛óπabÀkeys
(
°
.
wkv
);

512 
	`˛óπabÀvÆues
(
°
.
wkv
);

513  
dódmem
;

514 
	}
}

517 
	$luaC_cﬁÀ˘g¨bage
(
lua_Sèã
 * 
L
)

519 
size_t
 
dódmem
 = 
	`m¨k
(
L
);

520 
	`luaC_swìp
(
L
, 0);

521 
	`checkSizes
(
L
, 
dódmem
);

522 
	`luaC_ˇŒGCTM
(
L
);

523 
	}
}

526 
	$luaC_lök
(
lua_Sèã
 * 
L
, 
GCObje˘
 * 
o
, 
lu_byã
 
â
)

528 
o
->
gch
.
√xt
 = 
	`G
(
L
)->
roŸgc
;

529 
	`G
(
L
)->
roŸgc
 = 
o
;

530 
o
->
gch
.
m¨ked
 = 0;

531 
o
->
gch
.
â
 =Åt;

532 
	}
}

	@lib/tas/src/lua/lgc.h

7 #i‚de‡
lgc_h


8 
	#lgc_h


	)

10 
	~"lobje˘.h
"

12 
	#luaC_checkGC
(
L
Ë{ 
	`lua_as£π
(!(L->
ci
->
°©e
 & 
CI_CALLING
)); \

13 i‡(
	`G
(
L
)->
nblocks
 >G(L)->
GCthªshﬁd
Ë
	`luaC_cﬁÀ˘g¨bage
(L); }

	)

15 
size_t
 
luaC_£∑øãud©a
(
lua_Sèã
 * 
L
);

16 
luaC_ˇŒGCTM
(
lua_Sèã
 * 
L
);

17 
luaC_swìp
(
lua_Sèã
 * 
L
, 
Æl
);

18 
luaC_cﬁÀ˘g¨bage
(
lua_Sèã
 * 
L
);

19 
luaC_lök
(
lua_Sèã
 * 
L
, 
GCObje˘
 * 
o
, 
lu_byã
 
â
);

	@lib/tas/src/lua/liolib.c

7 
	~<î∫o.h
>

8 
	~<loˇÀ.h
>

9 
	~<°dio.h
>

10 
	~<°dlib.h
>

11 
	~<°rög.h
>

12 
	~<time.h
>

14 
	#liﬁib_c


	)

16 
	~"lua.h
"

18 
	~"œuxlib.h
"

19 
	~"luÆib.h
"

24 #i‚de‡
USE_TMPNAME


25 #ifde‡
__GNUC__


26 
	#USE_TMPNAME
 0

	)

28 
	#USE_TMPNAME
 1

	)

35 #i‚de‡
USE_POPEN


36 #ifde‡
_POSIX_C_SOURCE


37 #i‡
_POSIX_C_SOURCE
 >= 2

38 
	#USE_POPEN
 1

	)

43 #i‚de‡
USE_POPEN


44 
	#USE_POPEN
 0

	)

47 
	$io_exô
(
lua_Sèã
 * 
L
Ë
	`__©åibuã__
 ((
n‹ëu∫
));

55 #i‡!
USE_POPEN


56 
	#p˛o£
(
f
Ë(-1)

	)

59 
	#FILEHANDLE
 "FILE*"

	)

61 
	#IO_INPUT
 "_öput"

	)

62 
	#IO_OUTPUT
 "_ouçut"

	)

65 
	$pushªsu…
(
lua_Sèã
 * 
L
, 
i
, c⁄° *
fûíame
)

67 i‡(
i
) {

68 
	`lua_pushboﬁón
(
L
, 1);

71 
	`lua_pushnû
(
L
);

72 i‡(
fûíame
)

73 
	`lua_pushf°rög
(
L
, "%s: %s", 
fûíame
, 
	`°ªº‹
(
î∫o
));

75 
	`lua_pushf°rög
(
L
, "%s", 
	`°ªº‹
(
î∫o
));

76 
	`lua_pushnumbî
(
L
, 
î∫o
);

79 
	}
}

81 
FILE
 **

82 
	$t›fûe
(
lua_Sèã
 * 
L
, 
födex
)

84 
FILE
 **
f
 = (FILE **Ë
	`luaL_checkud©a
(
L
, 
födex
, 
FILEHANDLE
);

85 i‡(
f
 =
NULL
)

86 
	`luaL_¨gîr‹
(
L
, 
födex
, "bad file");

87  
f
;

88 
	}
}

91 
	$io_ty≥
(
lua_Sèã
 * 
L
)

93 
FILE
 **
f
 = (FILE **Ë
	`luaL_checkud©a
(
L
, 1, 
FILEHANDLE
);

94 i‡(
f
 =
NULL
)

95 
	`lua_pushnû
(
L
);

96 i‡(*
f
 =
NULL
)

97 
	`lua_pushlôîÆ
(
L
, "closed file");

99 
	`lua_pushlôîÆ
(
L
, "file");

101 
	}
}

103 
FILE
 *

104 
	$tofûe
(
lua_Sèã
 * 
L
, 
födex
)

106 
FILE
 **
f
 = 
	`t›fûe
(
L
, 
födex
);

107 i‡(*
f
 =
NULL
)

108 
	`luaL_îr‹
(
L
, "attemptÅo useá closed file");

109  *
f
;

110 
	}
}

117 
FILE
 **

118 
	$√wfûe
(
lua_Sèã
 * 
L
)

120 
FILE
 **
pf
 = (FILE **Ë
	`lua_√wu£rd©a
(
L
, (FILE *));

121 *
pf
 = 
NULL
;

122 
	`luaL_gëmë©abÀ
(
L
, 
FILEHANDLE
);

123 
	`lua_£tmë©abÀ
(
L
, -2);

124  
pf
;

125 
	}
}

132 
	$ªgi°îfûe
(
lua_Sèã
 * 
L
, 
FILE
 * 
f
, c⁄° *
«me
, c⁄° *
im≤ame
)

134 
	`lua_push°rög
(
L
, 
«me
);

135 *
	`√wfûe
(
L
Ë
f
;

136 i‡(
im≤ame
) {

137 
	`lua_push°rög
(
L
, 
im≤ame
);

138 
	`lua_pushvÆue
(
L
, -2);

139 
	`lua_£âabÀ
(
L
, -6);

141 
	`lua_£âabÀ
(
L
, -3);

142 
	}
}

145 
	$aux_˛o£
(
lua_Sèã
 * 
L
)

147 
FILE
 *
f
 = 
	`tofûe
(
L
, 1);

148 i‡(
f
 =
°dö
 || f =
°dout
 || f =
°dîr
)

151 
ok
 = (
	`p˛o£
(
f
Ë!-1Ë|| (
	`f˛o£
(f) == 0);

152 i‡(
ok
)

153 *(
FILE
 **Ë
	`lua_tou£rd©a
(
L
, 1Ë
NULL
;

154  
ok
;

156 
	}
}

159 
	$io_˛o£
(
lua_Sèã
 * 
L
)

161 i‡(
	`lua_i¢⁄e
(
L
, 1Ë&& 
	`lua_ty≥
(L, 
	`lua_upvÆueödex
(1)Ë=
LUA_TTABLE
) {

162 
	`lua_push°rög
(
L
, 
IO_OUTPUT
);

163 
	`lua_øwgë
(
L
, 
	`lua_upvÆueödex
(1));

165  
	`pushªsu…
(
L
, 
	`aux_˛o£
(L), 
NULL
);

166 
	}
}

169 
	$io_gc
(
lua_Sèã
 * 
L
)

171 
FILE
 **
f
 = 
	`t›fûe
(
L
, 1);

172 i‡(*
f
 !
NULL
)

173 
	`aux_˛o£
(
L
);

175 
	}
}

178 
	$io_to°rög
(
lua_Sèã
 * 
L
)

180 
buff
[128];

181 
FILE
 **
f
 = 
	`t›fûe
(
L
, 1);

182 i‡(*
f
 =
NULL
)

183 
	`°r˝y
(
buff
, "closed");

185 
	`•rötf
(
buff
, "%p", 
	`lua_tou£rd©a
(
L
, 1));

186 
	`lua_pushf°rög
(
L
, "fûê(%s)", 
buff
);

188 
	}
}

191 
	$io_›í
(
lua_Sèã
 * 
L
)

193 c⁄° *
fûíame
 = 
	`luaL_check°rög
(
L
, 1);

194 c⁄° *
mode
 = 
	`luaL_›t°rög
(
L
, 2, "r");

195 
FILE
 **
pf
 = 
	`√wfûe
(
L
);

196 *
pf
 = 
	`f›í
(
fûíame
, 
mode
);

197  (*
pf
 =
NULL
Ë? 
	`pushªsu…
(
L
, 0, 
fûíame
) : 1;

198 
	}
}

201 
	$io_p›í
(
lua_Sèã
 * 
L
)

203 #i‡!
USE_POPEN


204 
	`luaL_îr‹
(
L
, "`popen'Çot supported");

207 c⁄° *
fûíame
 = 
	`luaL_check°rög
(
L
, 1);

208 c⁄° *
mode
 = 
	`luaL_›t°rög
(
L
, 2, "r");

209 
FILE
 **
pf
 = 
	`√wfûe
(
L
);

210 *
pf
 = 
	`p›í
(
fûíame
, 
mode
);

211  (*
pf
 =
NULL
Ë? 
	`pushªsu…
(
L
, 0, 
fûíame
) : 1;

213 
	}
}

216 
	$io_tmpfûe
(
lua_Sèã
 * 
L
)

218 
FILE
 **
pf
 = 
	`√wfûe
(
L
);

219 *
pf
 = 
	`tmpfûe
();

220  (*
pf
 =
NULL
Ë? 
	`pushªsu…
(
L
, 0, NULL) : 1;

221 
	}
}

223 
FILE
 *

224 
	$gëiofûe
(
lua_Sèã
 * 
L
, c⁄° *
«me
)

226 
	`lua_push°rög
(
L
, 
«me
);

227 
	`lua_øwgë
(
L
, 
	`lua_upvÆueödex
(1));

228  
	`tofûe
(
L
, -1);

229 
	}
}

232 
	$g_iofûe
(
lua_Sèã
 * 
L
, c⁄° *
«me
, c⁄° *
mode
)

234 i‡(!
	`lua_i¢⁄e‹nû
(
L
, 1)) {

235 c⁄° *
fûíame
 = 
	`lua_to°rög
(
L
, 1);

236 
	`lua_push°rög
(
L
, 
«me
);

237 i‡(
fûíame
) {

238 
FILE
 **
pf
 = 
	`√wfûe
(
L
);

239 *
pf
 = 
	`f›í
(
fûíame
, 
mode
);

240 i‡(*
pf
 =
NULL
) {

241 
	`lua_pushf°rög
(
L
, "%s: %s", 
fûíame
, 
	`°ªº‹
(
î∫o
));

242 
	`luaL_¨gîr‹
(
L
, 1, 
	`lua_to°rög
(L, -1));

245 
	`tofûe
(
L
, 1);

246 
	`lua_pushvÆue
(
L
, 1);

248 
	`lua_øw£t
(
L
, 
	`lua_upvÆueödex
(1));

251 
	`lua_push°rög
(
L
, 
«me
);

252 
	`lua_øwgë
(
L
, 
	`lua_upvÆueödex
(1));

254 
	}
}

257 
	$io_öput
(
lua_Sèã
 * 
L
)

259  
	`g_iofûe
(
L
, 
IO_INPUT
, "r");

260 
	}
}

263 
	$io_ouçut
(
lua_Sèã
 * 
L
)

265  
	`g_iofûe
(
L
, 
IO_OUTPUT
, "w");

266 
	}
}

268 
io_ªadlöe
(
lua_Sèã
 * 
L
);

271 
	$aux_löes
(
lua_Sèã
 * 
L
, 
idx
, 
˛o£
)

273 
	`lua_pushlôîÆ
(
L
, 
FILEHANDLE
);

274 
	`lua_øwgë
(
L
, 
LUA_REGISTRYINDEX
);

275 
	`lua_pushvÆue
(
L
, 
idx
);

276 
	`lua_pushboﬁón
(
L
, 
˛o£
);

277 
	`lua_pushc˛osuª
(
L
, 
io_ªadlöe
, 3);

278 
	}
}

281 
	$f_löes
(
lua_Sèã
 * 
L
)

283 
	`tofûe
(
L
, 1);

284 
	`aux_löes
(
L
, 1, 0);

286 
	}
}

289 
	$io_löes
(
lua_Sèã
 * 
L
)

291 i‡(
	`lua_i¢⁄e‹nû
(
L
, 1)) {

292 
	`lua_push°rög
(
L
, 
IO_INPUT
);

293 
	`lua_øwgë
(
L
, 
	`lua_upvÆueödex
(1));

294  
	`f_löes
(
L
);

296 c⁄° *
fûíame
 = 
	`luaL_check°rög
(
L
, 1);

297 
FILE
 **
pf
 = 
	`√wfûe
(
L
);

298 *
pf
 = 
	`f›í
(
fûíame
, "r");

299 
	`luaL_¨gcheck
(
L
, *
pf
, 1, 
	`°ªº‹
(
î∫o
));

300 
	`aux_löes
(
L
, 
	`lua_gët›
(L), 1);

303 
	}
}

312 
	$ªad_numbî
(
lua_Sèã
 * 
L
, 
FILE
 * 
f
)

314 
lua_Numbî
 
d
;

315 i‡(
	`fsˇnf
(
f
, 
LUA_NUMBER_SCAN
, &
d
) == 1) {

316 
	`lua_pushnumbî
(
L
, 
d
);

320 
	}
}

323 
	$ã°_eof
(
lua_Sèã
 * 
L
, 
FILE
 * 
f
)

325 
c
 = 
	`gëc
(
f
);

326 
	`ungëc
(
c
, 
f
);

327 
	`lua_pushl°rög
(
L
, 
NULL
, 0);

328  (
c
 !
EOF
);

329 
	}
}

332 
	$ªad_löe
(
lua_Sèã
 * 
L
, 
FILE
 * 
f
)

334 
luaL_Buf„r
 
b
;

335 
	`luaL_bufföô
(
L
, &
b
);

337 
size_t
 
l
;

338 *
p
 = 
	`luaL_¥ïbuf„r
(&
b
);

339 i‡(
	`fgës
(
p
, 
LUAL_BUFFERSIZE
, 
f
Ë=
NULL
) {

340 
	`luaL_pushªsu…
(&
b
);

341  (
	`lua_°æí
(
L
, -1) > 0);

343 
l
 = 
	`°æí
(
p
);

344 i‡(
p
[
l
 - 1] != '\n')

345 
	`luaL_addsize
(&
b
, 
l
);

347 
	`luaL_addsize
(&
b
, 
l
 - 1);

348 
	`luaL_pushªsu…
(&
b
);

352 
	}
}

355 
	$ªad_ch¨s
(
lua_Sèã
 * 
L
, 
FILE
 * 
f
, 
size_t
 
n
)

357 
size_t
 
æí
;

358 
size_t
 
ƒ
;

359 
luaL_Buf„r
 
b
;

360 
	`luaL_bufföô
(
L
, &
b
);

361 
æí
 = 
LUAL_BUFFERSIZE
;

363 *
p
 = 
	`luaL_¥ïbuf„r
(&
b
);

364 i‡(
æí
 > 
n
)

365 
æí
 = 
n
;

366 
ƒ
 = 
	`‰ód
(
p
, (), 
æí
, 
f
);

367 
	`luaL_addsize
(&
b
, 
ƒ
);

368 
n
 -
ƒ
;

370 
n
 > 0 && 
ƒ
 =
æí
);

371 
	`luaL_pushªsu…
(&
b
);

372  (
n
 =0 || 
	`lua_°æí
(
L
, -1) > 0);

373 
	}
}

376 
	$g_ªad
(
lua_Sèã
 * 
L
, 
FILE
 * 
f
, 
fú°
)

378 
«rgs
 = 
	`lua_gët›
(
L
) - 1;

379 
suc˚ss
;

380 
n
;

381 i‡(
«rgs
 == 0) {

382 
suc˚ss
 = 
	`ªad_löe
(
L
, 
f
);

383 
n
 = 
fú°
 + 1;

385 
	`luaL_check°ack
(
L
, 
«rgs
 + 
LUA_MINSTACK
, "too manyárguments");

386 
suc˚ss
 = 1;

387 
n
 = 
fú°
; 
«rgs
-- && 
suc˚ss
;Ç++) {

388 i‡(
	`lua_ty≥
(
L
, 
n
Ë=
LUA_TNUMBER
) {

389 
size_t
 
l
 = 
	`lua_t⁄umbî
(
L
, 
n
);

390 
suc˚ss
 = (
l
 =0Ë? 
	`ã°_eof
(
L
, 
f
Ë: 
	`ªad_ch¨s
(L, f,Ü);

392 c⁄° *
p
 = 
	`lua_to°rög
(
L
, 
n
);

393 
	`luaL_¨gcheck
(
L
, 
p
 &&Ö[0] ='*', 
n
, "invalid option");

394 
p
[1]) {

396 
suc˚ss
 = 
	`ªad_numbî
(
L
, 
f
);

399 
suc˚ss
 = 
	`ªad_löe
(
L
, 
f
);

402 
	`ªad_ch¨s
(
L
, 
f
, ~((
size_t
) 0));

403 
suc˚ss
 = 1;

406  
	`luaL_îr‹
(
L
, "obsolete option `*w'Åo `read'");

408  
	`luaL_¨gîr‹
(
L
, 
n
, "invalid format");

413 i‡(!
suc˚ss
) {

414 
	`lua_p›
(
L
, 1);

415 
	`lua_pushnû
(
L
);

417  
n
 - 
fú°
;

418 
	}
}

421 
	$io_ªad
(
lua_Sèã
 * 
L
)

423  
	`g_ªad
(
L
, 
	`gëiofûe
(L, 
IO_INPUT
), 1);

424 
	}
}

427 
	$f_ªad
(
lua_Sèã
 * 
L
)

429  
	`g_ªad
(
L
, 
	`tofûe
(L, 1), 2);

430 
	}
}

433 
	$io_ªadlöe
(
lua_Sèã
 * 
L
)

435 
FILE
 *
f
 = *(FILE **Ë
	`lua_tou£rd©a
(
L
, 
	`lua_upvÆueödex
(2));

436 i‡(
f
 =
NULL
)

437 
	`luaL_îr‹
(
L
, "file isálready closed");

438 i‡(
	`ªad_löe
(
L
, 
f
))

441 i‡(
	`lua_toboﬁón
(
L
, 
	`lua_upvÆueödex
(3))) {

442 
	`lua_£â›
(
L
, 0);

443 
	`lua_pushvÆue
(
L
, 
	`lua_upvÆueödex
(2));

444 
	`aux_˛o£
(
L
);

448 
	}
}

453 
	$g_wrôe
(
lua_Sèã
 * 
L
, 
FILE
 * 
f
, 
¨g
)

455 
«rgs
 = 
	`lua_gët›
(
L
) - 1;

456 
°©us
 = 1;

457 ; 
«rgs
--; 
¨g
++) {

458 i‡(
	`lua_ty≥
(
L
, 
¨g
Ë=
LUA_TNUMBER
) {

460 
°©us
 = sètu†&& 
	`Ârötf
(
f
, 
LUA_NUMBER_FMT
, 
	`lua_t⁄umbî
(
L
, 
¨g
)) > 0;

462 
size_t
 
l
;

463 c⁄° *
s
 = 
	`luaL_checkl°rög
(
L
, 
¨g
, &
l
);

464 
°©us
 = sètu†&& (
	`fwrôe
(
s
, (), 
l
, 
f
) ==Ü);

467  
	`pushªsu…
(
L
, 
°©us
, 
NULL
);

468 
	}
}

471 
	$io_wrôe
(
lua_Sèã
 * 
L
)

473  
	`g_wrôe
(
L
, 
	`gëiofûe
(L, 
IO_OUTPUT
), 1);

474 
	}
}

477 
	$f_wrôe
(
lua_Sèã
 * 
L
)

479  
	`g_wrôe
(
L
, 
	`tofûe
(L, 1), 2);

480 
	}
}

483 
	$f_£ek
(
lua_Sèã
 * 
L
)

485 c⁄° 
mode
[] = { 
SEEK_SET
, 
SEEK_CUR
, 
SEEK_END
 };

486 c⁄° *c⁄° 
modíames
[] = { "£t", "cur", "íd", 
NULL
 };

487 
FILE
 *
f
 = 
	`tofûe
(
L
, 1);

488 
›
 = 
	`luaL_föd°rög
(
	`luaL_›t°rög
(
L
, 2, "cur"), 
modíames
);

489 
off£t
 = 
	`luaL_›é⁄g
(
L
, 3, 0);

490 
	`luaL_¨gcheck
(
L
, 
›
 != -1, 2, "invalid mode");

491 
›
 = 
	`f£ek
(
f
, 
off£t
, 
mode
[op]);

492 i‡(
›
)

493  
	`pushªsu…
(
L
, 0, 
NULL
);

495 
	`lua_pushnumbî
(
L
, 
	`·ñl
(
f
));

498 
	}
}

501 
	$io_Êush
(
lua_Sèã
 * 
L
)

503  
	`pushªsu…
(
L
, 
	`fÊush
(
	`gëiofûe
(L, 
IO_OUTPUT
)Ë=0, 
NULL
);

504 
	}
}

507 
	$f_Êush
(
lua_Sèã
 * 
L
)

509  
	`pushªsu…
(
L
, 
	`fÊush
(
	`tofûe
(L, 1)Ë=0, 
NULL
);

510 
	}
}

512 c⁄° 
luaL_ªg
 
	giﬁib
[] = {

513 {"öput", 
io_öput
},

514 {"ouçut", 
io_ouçut
},

515 {"löes", 
io_löes
},

516 {"˛o£", 
io_˛o£
},

517 {"Êush", 
io_Êush
},

518 {"›í", 
io_›í
},

519 {"p›í", 
io_p›í
},

520 {"ªad", 
io_ªad
},

521 {"tmpfûe", 
io_tmpfûe
},

522 {"ty≥", 
io_ty≥
},

523 {"wrôe", 
io_wrôe
},

524 {
NULL
, NULL}

527 c⁄° 
luaL_ªg
 
	gÊib
[] = {

528 {"Êush", 
f_Êush
},

529 {"ªad", 
f_ªad
},

530 {"löes", 
f_löes
},

531 {"£ek", 
f_£ek
},

532 {"wrôe", 
f_wrôe
},

533 {"˛o£", 
io_˛o£
},

534 {"__gc", 
io_gc
},

535 {"__to°rög", 
io_to°rög
},

536 {
NULL
, NULL}

540 
	$¸óãmëa
(
lua_Sèã
 * 
L
)

542 
	`luaL_√wmë©abÀ
(
L
, 
FILEHANDLE
);

544 
	`lua_pushlôîÆ
(
L
, "__index");

545 
	`lua_pushvÆue
(
L
, -2);

546 
	`lua_øw£t
(
L
, -3);

547 
	`luaL_›ílib
(
L
, 
NULL
, 
Êib
, 0);

548 
	}
}

559 
	$io_execuã
(
lua_Sèã
 * 
L
)

561 
	`lua_pushnumbî
(
L
, 
	`sy°em
(
	`luaL_check°rög
(L, 1)));

563 
	}
}

566 
	$io_ªmove
(
lua_Sèã
 * 
L
)

568 c⁄° *
fûíame
 = 
	`luaL_check°rög
(
L
, 1);

569  
	`pushªsu…
(
L
, 
	`ªmove
(
fûíame
) == 0, filename);

570 
	}
}

573 
	$io_ª«me
(
lua_Sèã
 * 
L
)

575 c⁄° *
‰om«me
 = 
	`luaL_check°rög
(
L
, 1);

576 c⁄° *
t⁄ame
 = 
	`luaL_check°rög
(
L
, 2);

577  
	`pushªsu…
(
L
, 
	`ª«me
(
‰om«me
, 
t⁄ame
) == 0, fromname);

578 
	}
}

580 #i‡!
USE_TMPNAME


581 
	$io_tm≤ame
(
lua_Sèã
 * 
L
Ë
	`__©åibuã__
 ((
n‹ëu∫
));

583 
	`io_tm≤ame
(
lua_Sèã
 * 
L
);

587 
	$io_tm≤ame
(
lua_Sèã
 * 
L
)

589 #i‡!
USE_TMPNAME


590 
	`luaL_îr‹
(
L
, "`tmpname'Çot supported");

592 
buff
[
L_tm≤am
];

593 i‡(
	`tm≤am
(
buff
) != buff)

594  
	`luaL_îr‹
(
L
, "unableÅo generateá unique filename in `tmpname'");

595 
	`lua_push°rög
(
L
, 
buff
);

598 
	}
}

601 
	$io_gëív
(
lua_Sèã
 * 
L
)

603 
	`lua_push°rög
(
L
, 
	`gëív
(
	`luaL_check°rög
(L, 1)));

605 
	}
}

608 
	$io_˛ock
(
lua_Sèã
 * 
L
)

610 
	`lua_pushnumbî
(
L
, 
	`˛ock
(Ë/ (
lua_Numbî
Ë
CLOCKS_PER_SEC
);

612 
	}
}

623 
	$£tfõld
(
lua_Sèã
 * 
L
, c⁄° *
key
, 
vÆue
)

625 
	`lua_push°rög
(
L
, 
key
);

626 
	`lua_pushnumbî
(
L
, 
vÆue
);

627 
	`lua_øw£t
(
L
, -3);

628 
	}
}

631 
	$£tboﬁfõld
(
lua_Sèã
 * 
L
, c⁄° *
key
, 
vÆue
)

633 
	`lua_push°rög
(
L
, 
key
);

634 
	`lua_pushboﬁón
(
L
, 
vÆue
);

635 
	`lua_øw£t
(
L
, -3);

636 
	}
}

639 
	$gëboﬁfõld
(
lua_Sèã
 * 
L
, c⁄° *
key
)

641 
ªs
;

642 
	`lua_push°rög
(
L
, 
key
);

643 
	`lua_gëèbÀ
(
L
, -2);

644 
ªs
 = 
	`lua_toboﬁón
(
L
, -1);

645 
	`lua_p›
(
L
, 1);

646  
ªs
;

647 
	}
}

650 
	$gëfõld
(
lua_Sèã
 * 
L
, c⁄° *
key
, 
d
)

652 
ªs
;

653 
	`lua_push°rög
(
L
, 
key
);

654 
	`lua_gëèbÀ
(
L
, -2);

655 i‡(
	`lua_i¢umbî
(
L
, -1))

656 
ªs
 = 
	`lua_t⁄umbî
(
L
, -1);

658 i‡(
d
 == -2)

659  
	`luaL_îr‹
(
L
, "fõld `%s' missög i¿d©êèbÀ", 
key
);

660 
ªs
 = 
d
;

662 
	`lua_p›
(
L
, 1);

663  
ªs
;

664 
	}
}

667 
	$io_d©e
(
lua_Sèã
 * 
L
)

669 c⁄° *
s
 = 
	`luaL_›t°rög
(
L
, 1, "%c");

670 
time_t
 
t
 = 
	`luaL_›äumbî
(
L
, 2, -1);

671 
tm
 *
°m
;

672 i‡(
t
 =(
time_t
) (-1))

673 
t
 = 
	`time
(
NULL
);

674 i‡(*
s
 == '!') {

675 
°m
 = 
	`gmtime
(&
t
);

676 
s
++;

678 
°m
 = 
	`loˇ…ime
(&
t
);

679 i‡(
°m
 =
NULL
)

680 
	`lua_pushnû
(
L
);

681 i‡(
	`°rcmp
(
s
, "*t") == 0) {

682 
	`lua_√wèbÀ
(
L
);

683 
	`£tfõld
(
L
, "£c", 
°m
->
tm_£c
);

684 
	`£tfõld
(
L
, "mö", 
°m
->
tm_mö
);

685 
	`£tfõld
(
L
, "hour", 
°m
->
tm_hour
);

686 
	`£tfõld
(
L
, "day", 
°m
->
tm_mday
);

687 
	`£tfõld
(
L
, "m⁄th", 
°m
->
tm_m⁄
 + 1);

688 
	`£tfõld
(
L
, "yór", 
°m
->
tm_yór
 + 1900);

689 
	`£tfõld
(
L
, "wday", 
°m
->
tm_wday
 + 1);

690 
	`£tfõld
(
L
, "yday", 
°m
->
tm_yday
 + 1);

691 
	`£tboﬁfõld
(
L
, "isd°", 
°m
->
tm_isd°
);

693 
b
[256];

694 i‡(
	`°r·ime
(
b
, (b), 
s
, 
°m
))

695 
	`lua_push°rög
(
L
, 
b
);

697  
	`luaL_îr‹
(
L
, "`date' formatÅooÜong");

700 
	}
}

703 
	$io_time
(
lua_Sèã
 * 
L
)

705 i‡(
	`lua_i¢⁄e‹nû
(
L
, 1))

706 
	`lua_pushnumbî
(
L
, 
	`time
(
NULL
));

708 
time_t
 
t
;

709 
tm
 
ts
;

710 
	`luaL_checkty≥
(
L
, 1, 
LUA_TTABLE
);

711 
	`lua_£â›
(
L
, 1);

712 
ts
.
tm_£c
 = 
	`gëfõld
(
L
, "sec", 0);

713 
ts
.
tm_mö
 = 
	`gëfõld
(
L
, "min", 0);

714 
ts
.
tm_hour
 = 
	`gëfõld
(
L
, "hour", 12);

715 
ts
.
tm_mday
 = 
	`gëfõld
(
L
, "day", -2);

716 
ts
.
tm_m⁄
 = 
	`gëfõld
(
L
, "month", -2) - 1;

717 
ts
.
tm_yór
 = 
	`gëfõld
(
L
, "year", -2) - 1900;

718 
ts
.
tm_isd°
 = 
	`gëboﬁfõld
(
L
, "isdst");

719 
t
 = 
	`mktime
(&
ts
);

720 i‡(
t
 =(
time_t
) (-1))

721 
	`lua_pushnû
(
L
);

723 
	`lua_pushnumbî
(
L
, 
t
);

726 
	}
}

729 
	$io_dif·ime
(
lua_Sèã
 * 
L
)

731 
	`lua_pushnumbî
(
L
, 
	`dif·ime
(
	`luaL_checknumbî
(L, 1), 
	`luaL_›äumbî
(L, 2, 0)));

733 
	}
}

738 
	$io_£éoc
(
lua_Sèã
 * 
L
)

740 c⁄° 
ˇt
[] = { 
LC_ALL
, 
LC_COLLATE
, 
LC_CTYPE
, 
LC_MONETARY
,

741 
LC_NUMERIC
, 
LC_TIME


743 c⁄° *c⁄° 
ˇäames
[] = { "all", "collate", "ctype", "monetary",

744 "numîic", "time", 
NULL


746 c⁄° *
l
 = 
	`lua_to°rög
(
L
, 1);

747 
›
 = 
	`luaL_föd°rög
(
	`luaL_›t°rög
(
L
, 2, "Æl"), 
ˇäames
);

748 
	`luaL_¨gcheck
(
L
, 
l
 || 
	`lua_i¢⁄e‹nû
(L, 1), 1, "stringÉxpected");

749 
	`luaL_¨gcheck
(
L
, 
›
 != -1, 2, "invalid option");

750 
	`lua_push°rög
(
L
, 
	`£éoˇÀ
(
ˇt
[
›
], 
l
));

752 
	}
}

755 
	$io_exô
(
lua_Sèã
 * 
L
)

757 
	`exô
(
	`luaL_›töt
(
L
, 1, 
EXIT_SUCCESS
));

758 
	}
}

760 c⁄° 
luaL_ªg
 
	gsy¶ib
[] = {

761 {"˛ock", 
io_˛ock
},

762 {"d©e", 
io_d©e
},

763 {"dif·ime", 
io_dif·ime
},

764 {"execuã", 
io_execuã
},

765 {"exô", 
io_exô
},

766 {"gëív", 
io_gëív
},

767 {"ªmove", 
io_ªmove
},

768 {"ª«me", 
io_ª«me
},

769 {"£éoˇÀ", 
io_£éoc
},

770 {"time", 
io_time
},

771 {"tm≤ame", 
io_tm≤ame
},

772 {
NULL
, NULL}

777 
LUALIB_API
 

778 
	$lua›í_io
(
lua_Sèã
 * 
L
)

780 
	`luaL_›ílib
(
L
, 
LUA_OSLIBNAME
, 
sy¶ib
, 0);

781 
	`¸óãmëa
(
L
);

782 
	`lua_pushvÆue
(
L
, -1);

783 
	`luaL_›ílib
(
L
, 
LUA_IOLIBNAME
, 
iﬁib
, 1);

785 
	`ªgi°îfûe
(
L
, 
°dö
, "°dö", 
IO_INPUT
);

786 
	`ªgi°îfûe
(
L
, 
°dout
, "°dout", 
IO_OUTPUT
);

787 
	`ªgi°îfûe
(
L
, 
°dîr
, "°dîr", 
NULL
);

789 
	}
}

	@lib/tas/src/lua/llex.c

7 
	~<˘y≥.h
>

8 
	~<°rög.h
>

10 
	#Œex_c


	)

12 
	~"lua.h
"

14 
	~"ldo.h
"

15 
	~"Œex.h
"

16 
	~"lobje˘.h
"

17 
	~"Õ¨£r.h
"

18 
	~"l°©e.h
"

19 
	~"l°rög.h
"

20 
	~"lzio.h
"

22 
	#√xt
(
LS
Ë(LS->
cuºít
 = 
	`zgëc
(LS->
z
))

	)

24 
	$luaX_îr‹
(
LexSèã
 * 
ls
, c⁄° *
s
, c⁄° *
tokí
Ë
	`__©åibuã__
 ((
n‹ëu∫
));

25 
	$luaX_Àxîr‹
(
LexSèã
 * 
ls
, c⁄° *
s
, 
tokí
Ë
	`__©åibuã__
 ((
n‹ëu∫
));

28 c⁄° *c⁄° 
tokí2°rög
[] = {

35 
	}
};

38 
	$luaX_öô
(
lua_Sèã
 * 
L
)

40 
i
;

41 
i
 = 0; i < 
NUM_RESERVED
; i++) {

42 
TSåög
 *
ts
 = 
	`luaS_√w
(
L
, 
tokí2°rög
[
i
]);

43 
	`luaS_fix
(
ts
);

44 
	`lua_as£π
(
	`°æí
(
tokí2°rög
[
i
]Ë+ 1 <
TOKEN_LEN
);

45 
ts
->
tsv
.
ª£rved
 = 
	`ˇ°
(
lu_byã
, 
i
 + 1);

47 
	}
}

49 
	#MAXSRC
 80

	)

52 
	$luaX_checklimô
(
LexSèã
 * 
ls
, 
vÆ
, 
limô
, c⁄° *
msg
)

54 i‡(
vÆ
 > 
limô
) {

55 
msg
 = 
	`luaO_pushf°rög
(
ls
->
L
, "toÿm™y %†÷imô=%d)", msg, 
limô
);

56 
	`luaX_sy¡axîr‹
(
ls
, 
msg
);

58 
	}
}

61 
	$luaX_îr‹löe
(
LexSèã
 * 
ls
, c⁄° *
s
, c⁄° *
tokí
, 
löe
)

63 
lua_Sèã
 *
L
 = 
ls
->L;

64 
buff
[
MAXSRC
];

65 
	`luaO_chunkid
(
buff
, 
	`gë°r
(
ls
->
sour˚
), 
MAXSRC
);

66 
	`luaO_pushf°rög
(
L
, "%s:%d: %†√¨ `%s'", 
buff
, 
löe
, 
s
, 
tokí
);

67 
	`luaD_throw
(
L
, 
LUA_ERRSYNTAX
);

68 
	}
}

71 
	$luaX_îr‹
(
LexSèã
 * 
ls
, c⁄° *
s
, c⁄° *
tokí
)

73 
	`luaX_îr‹löe
(
ls
, 
s
, 
tokí
,Üs->
löíumbî
);

74 
	}
}

77 
	$luaX_sy¡axîr‹
(
LexSèã
 * 
ls
, c⁄° *
msg
)

79 c⁄° *
œ°tokí
;

80 
ls
->
t
.
tokí
) {

81 
TK_NAME
:

82 
œ°tokí
 = 
	`gë°r
(
ls
->
t
.
£möfo
.
ts
);

84 
TK_STRING
:

85 
TK_NUMBER
:

86 
œ°tokí
 = 
	`luaZ_buf„r
(
ls
->
buff
);

89 
œ°tokí
 = 
	`luaX_tokí2°r
(
ls
,Üs->
t
.
tokí
);

92 
	`luaX_îr‹
(
ls
, 
msg
, 
œ°tokí
);

93 
	}
}

96 
	$luaX_tokí2°r
(
LexSèã
 * 
ls
, 
tokí
)

98 i‡(
tokí
 < 
FIRST_RESERVED
) {

99 
	`lua_as£π
(
tokí
 == ()token);

100  
	`luaO_pushf°rög
(
ls
->
L
, "%c", 
tokí
);

102  
tokí2°rög
[
tokí
 - 
FIRST_RESERVED
];

103 
	}
}

106 
	$luaX_Àxîr‹
(
LexSèã
 * 
ls
, c⁄° *
s
, 
tokí
)

108 i‡(
tokí
 =
TK_EOS
)

109 
	`luaX_îr‹
(
ls
, 
s
, 
	`luaX_tokí2°r
÷s, 
tokí
));

111 
	`luaX_îr‹
(
ls
, 
s
, 
	`luaZ_buf„r
÷s->
buff
));

112 
	}
}

115 
	$ö˛öíumbî
(
LexSèã
 * 
LS
)

117 
	`√xt
(
LS
);

118 ++
LS
->
löíumbî
;

119 
	`luaX_checklimô
(
LS
, LS->
löíumbî
, 
MAX_INT
, "lines iná chunk");

120 
	}
}

123 
	$luaX_£töput
(
lua_Sèã
 * 
L
, 
LexSèã
 * 
LS
, 
ZIO
 * 
z
, 
TSåög
 * 
sour˚
)

125 
LS
->
L
 = L;

126 
LS
->
lookahód
.
tokí
 = 
TK_EOS
;

127 
LS
->
z
 = z;

128 
LS
->
fs
 = 
NULL
;

129 
LS
->
löíumbî
 = 1;

130 
LS
->
œ°löe
 = 1;

131 
LS
->
sour˚
 = source;

132 
	`√xt
(
LS
);

133 i‡(
LS
->
cuºít
 == '#') {

135 
	`√xt
(
LS
);

137 
LS
->
cuºít
 !'\n' && LS->cuºíà!
EOZ
);

139 
	}
}

150 
	#EXTRABUFF
 32

	)

153 
	#MAXNOCHECK
 5

	)

155 
	#checkbuf„r
(
LS
, 
Àn
) \

156 i‡(((
Àn
)+
MAXNOCHECK
)*(Ë> 
	`luaZ_sizebuf„r
((
LS
)->
buff
)) \

157 
	`luaZ_›í•a˚
((
LS
)->
L
, (LS)->
buff
, (
Àn
)+
EXTRABUFF
)

	)

159 
	#ßve
(
LS
, 
c
, 
l
) \

160 (
	`luaZ_buf„r
((
LS
)->
buff
)[
l
++] = 
	`ˇ°
(, 
c
))

	)

161 
	#ßve_™d_√xt
(
LS
, 
l
Ë(
	`ßve
(LS, LS->
cuºít
,Ü), 
	`√xt
(LS))

	)

163 
size_t


164 
	$ªad«me
(
LexSèã
 * 
LS
)

166 
size_t
 
l
 = 0;

167 
	`checkbuf„r
(
LS
, 
l
);

169 
	`checkbuf„r
(
LS
, 
l
);

170 
	`ßve_™d_√xt
(
LS
, 
l
);

172 
	`iß um
(
LS
->
cuºít
) || LS->current == '_');

173 
	`ßve
(
LS
, '\0', 
l
);

174  
l
 - 1;

175 
	}
}

179 
	$ªad_numîÆ
(
LexSèã
 * 
LS
, 
comma
, 
SemInfo
 * 
£möfo
)

181 
size_t
 
l
 = 0;

182 
	`checkbuf„r
(
LS
, 
l
);

183 i‡(
comma
)

184 
	`ßve
(
LS
, '.', 
l
);

185 
	`isdigô
(
LS
->
cuºít
)) {

186 
	`checkbuf„r
(
LS
, 
l
);

187 
	`ßve_™d_√xt
(
LS
, 
l
);

189 i‡(
LS
->
cuºít
 == '.') {

190 
	`ßve_™d_√xt
(
LS
, 
l
);

191 i‡(
LS
->
cuºít
 == '.') {

192 
	`ßve_™d_√xt
(
LS
, 
l
);

193 
	`ßve
(
LS
, '\0', 
l
);

194 
	`luaX_Àxîr‹
(
LS
, "ambiguou†sy¡ax (decimÆÖoöàx såög c⁄ˇã«ti⁄)", 
TK_NUMBER
);

197 
	`isdigô
(
LS
->
cuºít
)) {

198 
	`checkbuf„r
(
LS
, 
l
);

199 
	`ßve_™d_√xt
(
LS
, 
l
);

201 i‡(
LS
->
cuºít
 == 'e' || LS->current == 'E') {

202 
	`ßve_™d_√xt
(
LS
, 
l
);

203 i‡(
LS
->
cuºít
 == '+' || LS->current == '-')

204 
	`ßve_™d_√xt
(
LS
, 
l
);

205 
	`isdigô
(
LS
->
cuºít
)) {

206 
	`checkbuf„r
(
LS
, 
l
);

207 
	`ßve_™d_√xt
(
LS
, 
l
);

210 
	`ßve
(
LS
, '\0', 
l
);

211 i‡(!
	`luaO_°r2d
(
	`luaZ_buf„r
(
LS
->
buff
), &
£möfo
->
r
))

212 
	`luaX_Àxîr‹
(
LS
, "mÆf‹medÇumbî", 
TK_NUMBER
);

213 
	}
}

216 
	$ªad_l⁄g_°rög
(
LexSèã
 * 
LS
, 
SemInfo
 * 
£möfo
)

218 
c⁄t
 = 0;

219 
size_t
 
l
 = 0;

220 
	`checkbuf„r
(
LS
, 
l
);

221 
	`ßve
(
LS
, '[', 
l
);

222 
	`ßve_™d_√xt
(
LS
, 
l
);

223 i‡(
LS
->
cuºít
 == '\n')

224 
	`ö˛öíumbî
(
LS
);

226 
	`checkbuf„r
(
LS
, 
l
);

227 
LS
->
cuºít
) {

228 
EOZ
:

229 
	`ßve
(
LS
, '\0', 
l
);

230 
	`luaX_Àxîr‹
(
LS
, (
£möfo
Ë? "unföishedÜ⁄g såög" : "unföishedÜ⁄g commít", 
TK_EOS
);

233 
	`ßve_™d_√xt
(
LS
, 
l
);

234 i‡(
LS
->
cuºít
 == '[') {

235 
c⁄t
++;

236 
	`ßve_™d_√xt
(
LS
, 
l
);

240 
	`ßve_™d_√xt
(
LS
, 
l
);

241 i‡(
LS
->
cuºít
 == ']') {

242 i‡(
c⁄t
 == 0)

243 
ídlo›
;

244 
c⁄t
--;

245 
	`ßve_™d_√xt
(
LS
, 
l
);

249 
	`ßve
(
LS
, '\n', 
l
);

250 
	`ö˛öíumbî
(
LS
);

251 i‡(!
£möfo
)

252 
l
 = 0;

255 
	`ßve_™d_√xt
(
LS
, 
l
);

258 
ídlo›
:

259 
	`ßve_™d_√xt
(
LS
, 
l
);

260 
	`ßve
(
LS
, '\0', 
l
);

261 i‡(
£möfo
)

262 
£möfo
->
ts
 = 
	`luaS_√wl°r
(
LS
->
L
, 
	`luaZ_buf„r
(LS->
buff
Ë+ 2, 
l
 - 5);

263 
	}
}

266 
	$ªad_°rög
(
LexSèã
 * 
LS
, 
dñ
, 
SemInfo
 * 
£möfo
)

268 
size_t
 
l
 = 0;

269 
	`checkbuf„r
(
LS
, 
l
);

270 
	`ßve_™d_√xt
(
LS
, 
l
);

271 
LS
->
cuºít
 !
dñ
) {

272 
	`checkbuf„r
(
LS
, 
l
);

273 
LS
->
cuºít
) {

274 
EOZ
:

275 
	`ßve
(
LS
, '\0', 
l
);

276 
	`luaX_Àxîr‹
(
LS
, "unföished såög", 
TK_EOS
);

279 
	`ßve
(
LS
, '\0', 
l
);

280 
	`luaX_Àxîr‹
(
LS
, "unföished såög", 
TK_STRING
);

283 
	`√xt
(
LS
);

284 
LS
->
cuºít
) {

286 
	`ßve
(
LS
, '\a', 
l
);

287 
	`√xt
(
LS
);

290 
	`ßve
(
LS
, '\b', 
l
);

291 
	`√xt
(
LS
);

294 
	`ßve
(
LS
, '\f', 
l
);

295 
	`√xt
(
LS
);

298 
	`ßve
(
LS
, '\n', 
l
);

299 
	`√xt
(
LS
);

302 
	`ßve
(
LS
, '\r', 
l
);

303 
	`√xt
(
LS
);

306 
	`ßve
(
LS
, '\t', 
l
);

307 
	`√xt
(
LS
);

310 
	`ßve
(
LS
, '\v', 
l
);

311 
	`√xt
(
LS
);

314 
	`ßve
(
LS
, '\n', 
l
);

315 
	`ö˛öíumbî
(
LS
);

317 
EOZ
:

321 i‡(!
	`isdigô
(
LS
->
cuºít
))

322 
	`ßve_™d_√xt
(
LS
, 
l
);

324 
c
 = 0;

325 
i
 = 0;

327 
c
 = 10 * c + (
LS
->
cuºít
 - '0');

328 
	`√xt
(
LS
);

330 ++
i
 < 3 && 
	`isdigô
(
LS
->
cuºít
));

331 i‡(
c
 > 
UCHAR_MAX
) {

332 
	`ßve
(
LS
, '\0', 
l
);

333 
	`luaX_Àxîr‹
(
LS
, "esˇ≥ sequí˚Åoÿœrge", 
TK_STRING
);

335 
	`ßve
(
LS
, 
c
, 
l
);

341 
	`ßve_™d_√xt
(
LS
, 
l
);

344 
	`ßve_™d_√xt
(
LS
, 
l
);

345 
	`ßve
(
LS
, '\0', 
l
);

346 
£möfo
->
ts
 = 
	`luaS_√wl°r
(
LS
->
L
, 
	`luaZ_buf„r
(LS->
buff
Ë+ 1, 
l
 - 3);

347 
	}
}

350 
	$luaX_Àx
(
LexSèã
 * 
LS
, 
SemInfo
 * 
£möfo
)

353 
LS
->
cuºít
) {

357 
	`ö˛öíumbî
(
LS
);

362 
	`√xt
(
LS
);

363 i‡(
LS
->
cuºít
 != '-')

366 
	`√xt
(
LS
);

367 i‡(
LS
->
cuºít
 ='[' && (
	`√xt
(LS), LS->current == '['))

368 
	`ªad_l⁄g_°rög
(
LS
, 
NULL
);

370 
LS
->
cuºít
 !'\n' && LS->cuºíà!
EOZ
)

371 
	`√xt
(
LS
);

376 
	`√xt
(
LS
);

377 i‡(
LS
->
cuºít
 != '[')

380 
	`ªad_l⁄g_°rög
(
LS
, 
£möfo
);

381  
TK_STRING
;

386 
	`√xt
(
LS
);

387 i‡(
LS
->
cuºít
 != '=')

390 
	`√xt
(
LS
);

391  
TK_EQ
;

396 
	`√xt
(
LS
);

397 i‡(
LS
->
cuºít
 != '=')

400 
	`√xt
(
LS
);

401  
TK_LE
;

406 
	`√xt
(
LS
);

407 i‡(
LS
->
cuºít
 != '=')

410 
	`√xt
(
LS
);

411  
TK_GE
;

416 
	`√xt
(
LS
);

417 i‡(
LS
->
cuºít
 != '=')

420 
	`√xt
(
LS
);

421  
TK_NE
;

427 
	`ªad_°rög
(
LS
, LS->
cuºít
, 
£möfo
);

428  
TK_STRING
;

432 
	`√xt
(
LS
);

433 i‡(
LS
->
cuºít
 == '.') {

434 
	`√xt
(
LS
);

435 i‡(
LS
->
cuºít
 == '.') {

436 
	`√xt
(
LS
);

437  
TK_DOTS
;

439  
TK_CONCAT
;

440 } i‡(!
	`isdigô
(
LS
->
cuºít
))

443 
	`ªad_numîÆ
(
LS
, 1, 
£möfo
);

444  
TK_NUMBER
;

447 
EOZ
:

449  
TK_EOS
;

453 i‡(
	`is•a˚
(
LS
->
cuºít
)) {

454 
	`√xt
(
LS
);

456 } i‡(
	`isdigô
(
LS
->
cuºít
)) {

457 
	`ªad_numîÆ
(
LS
, 0, 
£möfo
);

458  
TK_NUMBER
;

459 } i‡(
	`ißÕha
(
LS
->
cuºít
) || LS->current == '_') {

461 
size_t
 
l
 = 
	`ªad«me
(
LS
);

462 
TSåög
 *
ts
 = 
	`luaS_√wl°r
(
LS
->
L
, 
	`luaZ_buf„r
(LS->
buff
), 
l
);

463 i‡(
ts
->
tsv
.
ª£rved
 > 0)

464  
ts
->
tsv
.
ª£rved
 - 1 + 
FIRST_RESERVED
;

465 
£möfo
->
ts
 =Ås;

466  
TK_NAME
;

468 
c
 = 
LS
->
cuºít
;

469 i‡(
	`is˙ål
(
c
))

470 
	`luaX_îr‹
(
LS
, "övÆid c⁄åﬁ ch¨", 
	`luaO_pushf°rög
(LS->
L
, "ch¨(%d)", 
c
));

471 
	`√xt
(
LS
);

472  
c
;

477 
	}
}

479 #unde‡
√xt


	@lib/tas/src/lua/llex.h

7 #i‚de‡
Œex_h


8 
	#Œex_h


	)

10 
	~"lobje˘.h
"

11 
	~"lzio.h
"

13 
	#FIRST_RESERVED
 257

	)

16 
	#TOKEN_LEN
 (("fun˘i⁄")/())

	)

22 
	eRESERVED
 {

24 
	mTK_AND
 = 
FIRST_RESERVED
, 
	mTK_BREAK
,

25 
	mTK_DO
, 
	mTK_ELSE
, 
	mTK_ELSEIF
, 
	mTK_END
, 
	mTK_FALSE
, 
	mTK_FOR
, 
	mTK_FUNCTION
,

26 
	mTK_IF
, 
	mTK_IN
, 
	mTK_LOCAL
, 
	mTK_NIL
, 
	mTK_NOT
, 
	mTK_OR
, 
	mTK_REPEAT
,

27 
	mTK_RETURN
, 
	mTK_THEN
, 
	mTK_TRUE
, 
	mTK_UNTIL
, 
	mTK_WHILE
,

29 
	mTK_NAME
, 
	mTK_CONCAT
, 
	mTK_DOTS
, 
	mTK_EQ
, 
	mTK_GE
, 
	mTK_LE
, 
	mTK_NE
, 
	mTK_NUMBER
,

30 
	mTK_STRING
, 
	mTK_EOS


34 
	#NUM_RESERVED
 (
	`ˇ°
(, 
TK_WHILE
-
FIRST_RESERVED
+1))

	)

37 
lua_Numbî
 
	mr
;

38 
TSåög
 *
	mts
;

39 } 
	tSemInfo
;

41 
	sTokí
 {

42 
	mtokí
;

43 
SemInfo
 
	m£möfo
;

44 } 
	tTokí
;

46 
	sLexSèã
 {

47 
	mcuºít
;

48 
	mlöíumbî
;

49 
	mœ°löe
;

50 
Tokí
 
	mt
;

51 
Tokí
 
	mlookahód
;

52 
FuncSèã
 *
	mfs
;

53 
lua_Sèã
 *
	mL
;

54 
ZIO
 *
	mz
;

55 
Mbuf„r
 *
	mbuff
;

56 
TSåög
 *
	msour˚
;

57 
	m√°Àvñ
;

58 } 
	tLexSèã
;

60 
luaX_öô
(
lua_Sèã
 * 
L
);

61 
luaX_£töput
(
lua_Sèã
 * 
L
, 
LexSèã
 * 
LS
, 
ZIO
 * 
z
, 
TSåög
 * 
sour˚
);

62 
luaX_Àx
(
LexSèã
 * 
LS
, 
SemInfo
 * 
£möfo
);

63 
luaX_checklimô
(
LexSèã
 * 
ls
, 
vÆ
, 
limô
, c⁄° *
msg
);

64 
	$luaX_sy¡axîr‹
(
LexSèã
 * 
ls
, c⁄° *
s
Ë
	`__©åibuã__
 ((
n‹ëu∫
));

65 
	$luaX_îr‹löe
(
LexSèã
 * 
ls
, c⁄° *
s
, c⁄° *
tokí
, 
löe
Ë
	`__©åibuã__
 ((
n‹ëu∫
));

66 c⁄° *
	`luaX_tokí2°r
(
LexSèã
 * 
ls
, 
tokí
);

	@lib/tas/src/lua/llimits.h

7 #i‚de‡
Œimôs_h


8 
	#Œimôs_h


	)

10 
	~<limôs.h
>

11 
	~<°ddef.h
>

13 
	~"lua.h
"

14 
	~"defs.h
"

19 #i‚de‡
BITS_INT


22 #i‡
INT_MAX
-20 < 32760

23 
	#BITS_INT
 16

	)

25 #i‡
INT_MAX
 > 2147483640L

28 
	#BITS_INT
 32

	)

43 
	tlu_hash
;

46 
	tls_hash
;

51 
	tlu_mem
;

53 
	#MAX_LUMEM
 
ULONG_MAX


	)

56 
	tls_n°r
;

59 
	tlu_byã
;

61 
	#MAX_SIZET
 ((
size_t
)(~(size_t)0)-2)

	)

63 
	#MAX_INT
 (
INT_MAX
-2Ë

	)

70 
	#I¡Poöt
(
p
Ë((
lu_hash
)’))

	)

73 #i‚de‡
LUSER_ALIGNMENT_T


75 
	mu
;

76 *
	ms
;

77 
	ml
;

78 } 
	tL_UmaxÆign
;

80 
LUSER_ALIGNMENT_T
 
	tL_UmaxÆign
;

84 #i‚de‡
LUA_UACNUMBER


85 
	tl_uacNumbî
;

87 
LUA_UACNUMBER
 
	tl_uacNumbî
;

90 #i‚de‡
lua_as£π


91 
	#lua_as£π
(
c
Ë

	)

94 #i‚de‡
check_exp


95 
	#check_exp
(
c
,
e
Ë”)

	)

98 #i‚de‡
UNUSED


99 
	#UNUSED
(
x
Ë(()(x)Ë

	)

102 #i‚de‡
ˇ°


103 
	#ˇ°
(
t
, 
exp
Ë(—)”xp))

	)

106 #i‚de‡
ˇ°_Æign


107 
	#ˇ°_Æign
(
t
, 
exp
Ë(—)
	`ARM_NOWARN_ALIGN
”xp))

	)

114 
	tIn°ru˘i⁄
;

117 #i‚de‡
LUA_MAXCALLS


118 
	#LUA_MAXCALLS
 4096

	)

126 #i‚de‡
LUA_MAXCCALLS


127 
	#LUA_MAXCCALLS
 200

	)

131 #i‚de‡
LUA_MAXCSTACK


132 
	#LUA_MAXCSTACK
 2048

	)

136 
	#MAXSTACK
 250

	)

139 #i‚de‡
MAXVARS


140 
	#MAXVARS
 200

	)

144 #i‚de‡
MAXUPVALUES


145 
	#MAXUPVALUES
 32

	)

149 #i‚de‡
MAXPARAMS


150 
	#MAXPARAMS
 100

	)

154 #i‚de‡
MINSTRTABSIZE


155 
	#MINSTRTABSIZE
 32

	)

159 #i‚de‡
LUA_MINBUFFER


160 
	#LUA_MINBUFFER
 32

	)

167 #i‚de‡
LUA_MAXPARSERLEVEL


168 
	#LUA_MAXPARSERLEVEL
 200

	)

	@lib/tas/src/lua/lmathlib.c

7 
	~<°dlib.h
>

8 
	~<m©h.h
>

10 
	#lm©hlib_c


	)

12 
	~"lua.h
"

14 
	~"œuxlib.h
"

15 
	~"luÆib.h
"

17 #unde‡
PI


18 
	#PI
 (3.14159265358979323846)

	)

19 
	#RADIANS_PER_DEGREE
 (
PI
/180.0)

	)

25 #ifde‡
USE_DEGREES


26 
	#FROMRAD
(
a
Ë(◊)/
RADIANS_PER_DEGREE
)

	)

27 
	#TORAD
(
a
Ë(◊)*
RADIANS_PER_DEGREE
)

	)

29 
	#FROMRAD
(
a
Ë◊)

	)

30 
	#TORAD
(
a
Ë◊)

	)

34 
	$m©h_abs
(
lua_Sèã
 * 
L
)

36 
	`lua_pushnumbî
(
L
, 
	`Ábs
(
	`luaL_checknumbî
(L, 1)));

38 
	}
}

41 
	$m©h_sö
(
lua_Sèã
 * 
L
)

43 
	`lua_pushnumbî
(
L
, 
	`sö
(
	`TORAD
(
	`luaL_checknumbî
(L, 1))));

45 
	}
}

48 
	$m©h_cos
(
lua_Sèã
 * 
L
)

50 
	`lua_pushnumbî
(
L
, 
	`cos
(
	`TORAD
(
	`luaL_checknumbî
(L, 1))));

52 
	}
}

55 
	$m©h_èn
(
lua_Sèã
 * 
L
)

57 
	`lua_pushnumbî
(
L
, 
	`èn
(
	`TORAD
(
	`luaL_checknumbî
(L, 1))));

59 
	}
}

62 
	$m©h_asö
(
lua_Sèã
 * 
L
)

64 
	`lua_pushnumbî
(
L
, 
	`FROMRAD
(
	`asö
(
	`luaL_checknumbî
(L, 1))));

66 
	}
}

69 
	$m©h_acos
(
lua_Sèã
 * 
L
)

71 
	`lua_pushnumbî
(
L
, 
	`FROMRAD
(
	`acos
(
	`luaL_checknumbî
(L, 1))));

73 
	}
}

76 
	$m©h_©™
(
lua_Sèã
 * 
L
)

78 
	`lua_pushnumbî
(
L
, 
	`FROMRAD
(
	`©™
(
	`luaL_checknumbî
(L, 1))));

80 
	}
}

83 
	$m©h_©™2
(
lua_Sèã
 * 
L
)

85 
	`lua_pushnumbî
(
L
, 
	`FROMRAD
(
	`©™2
(
	`luaL_checknumbî
(L, 1),ÜuaL_checknumber(L, 2))));

87 
	}
}

90 
	$m©h_˚û
(
lua_Sèã
 * 
L
)

92 
	`lua_pushnumbî
(
L
, 
	`˚û
(
	`luaL_checknumbî
(L, 1)));

94 
	}
}

97 
	$m©h_Êo‹
(
lua_Sèã
 * 
L
)

99 
	`lua_pushnumbî
(
L
, 
	`Êo‹
(
	`luaL_checknumbî
(L, 1)));

101 
	}
}

104 
	$m©h_mod
(
lua_Sèã
 * 
L
)

106 
	`lua_pushnumbî
(
L
, 
	`fmod
(
	`luaL_checknumbî
(L, 1),ÜuaL_checknumber(L, 2)));

108 
	}
}

111 
	$m©h_sqπ
(
lua_Sèã
 * 
L
)

113 
	`lua_pushnumbî
(
L
, 
	`sqπ
(
	`luaL_checknumbî
(L, 1)));

115 
	}
}

118 
	$m©h_pow
(
lua_Sèã
 * 
L
)

120 
	`lua_pushnumbî
(
L
, 
	`pow
(
	`luaL_checknumbî
(L, 1),ÜuaL_checknumber(L, 2)));

122 
	}
}

125 
	$m©h_log
(
lua_Sèã
 * 
L
)

127 
	`lua_pushnumbî
(
L
, 
	`log
(
	`luaL_checknumbî
(L, 1)));

129 
	}
}

132 
	$m©h_log10
(
lua_Sèã
 * 
L
)

134 
	`lua_pushnumbî
(
L
, 
	`log10
(
	`luaL_checknumbî
(L, 1)));

136 
	}
}

139 
	$m©h_exp
(
lua_Sèã
 * 
L
)

141 
	`lua_pushnumbî
(
L
, 
	`exp
(
	`luaL_checknumbî
(L, 1)));

143 
	}
}

146 
	$m©h_deg
(
lua_Sèã
 * 
L
)

148 
	`lua_pushnumbî
(
L
, 
	`luaL_checknumbî
(L, 1Ë/ 
RADIANS_PER_DEGREE
);

150 
	}
}

153 
	$m©h_ød
(
lua_Sèã
 * 
L
)

155 
	`lua_pushnumbî
(
L
, 
	`luaL_checknumbî
(L, 1Ë* 
RADIANS_PER_DEGREE
);

157 
	}
}

160 
	$m©h_‰exp
(
lua_Sèã
 * 
L
)

162 
e
;

163 
	`lua_pushnumbî
(
L
, 
	`‰exp
(
	`luaL_checknumbî
(L, 1), &
e
));

164 
	`lua_pushnumbî
(
L
, 
e
);

166 
	}
}

169 
	$m©h_ldexp
(
lua_Sèã
 * 
L
)

171 
	`lua_pushnumbî
(
L
, 
	`ldexp
(
	`luaL_checknumbî
(L, 1), 
	`luaL_checköt
(L, 2)));

173 
	}
}

176 
	$m©h_mö
(
lua_Sèã
 * 
L
)

178 
n
 = 
	`lua_gët›
(
L
);

179 
lua_Numbî
 
dmö
 = 
	`luaL_checknumbî
(
L
, 1);

180 
i
;

181 
i
 = 2; i <
n
; i++) {

182 
lua_Numbî
 
d
 = 
	`luaL_checknumbî
(
L
, 
i
);

183 i‡(
d
 < 
dmö
)

184 
dmö
 = 
d
;

186 
	`lua_pushnumbî
(
L
, 
dmö
);

188 
	}
}

191 
	$m©h_max
(
lua_Sèã
 * 
L
)

193 
n
 = 
	`lua_gët›
(
L
);

194 
lua_Numbî
 
dmax
 = 
	`luaL_checknumbî
(
L
, 1);

195 
i
;

196 
i
 = 2; i <
n
; i++) {

197 
lua_Numbî
 
d
 = 
	`luaL_checknumbî
(
L
, 
i
);

198 i‡(
d
 > 
dmax
)

199 
dmax
 = 
d
;

201 
	`lua_pushnumbî
(
L
, 
dmax
);

203 
	}
}

206 
	$m©h_øndom
(
lua_Sèã
 * 
L
)

210 
lua_Numbî
 
r
 = (lua_NumbîË(
	`ønd
(Ë% 
RAND_MAX
) / (lua_Number) RAND_MAX;

211 
	`lua_gët›
(
L
)) {

214 
	`lua_pushnumbî
(
L
, 
r
);

219 
u
 = 
	`luaL_checköt
(
L
, 1);

220 
	`luaL_¨gcheck
(
L
, 1 <
u
, 1, "interval isÉmpty");

221 
	`lua_pushnumbî
(
L
, 
	`Êo‹
(
r
 * 
u
) + 1);

226 
l
 = 
	`luaL_checköt
(
L
, 1);

227 
u
 = 
	`luaL_checköt
(
L
, 2);

228 
	`luaL_¨gcheck
(
L
, 
l
 <
u
, 2, "interval isÉmpty");

229 
	`lua_pushnumbî
(
L
, 
	`Êo‹
(
r
 * (
u
 - 
l
 + 1)) +Ü);

233  
	`luaL_îr‹
(
L
, "wrongÇumber ofárguments");

236 
	}
}

239 
	$m©h_øndom£ed
(
lua_Sèã
 * 
L
)

241 
	`§™d
(
	`luaL_checköt
(
L
, 1));

243 
	}
}

245 c⁄° 
luaL_ªg
 
	gm©hlib
[] = {

246 {"abs", 
m©h_abs
},

247 {"sö", 
m©h_sö
},

248 {"cos", 
m©h_cos
},

249 {"èn", 
m©h_èn
},

250 {"asö", 
m©h_asö
},

251 {"acos", 
m©h_acos
},

252 {"©™", 
m©h_©™
},

253 {"©™2", 
m©h_©™2
},

254 {"˚û", 
m©h_˚û
},

255 {"Êo‹", 
m©h_Êo‹
},

256 {"mod", 
m©h_mod
},

257 {"‰exp", 
m©h_‰exp
},

258 {"ldexp", 
m©h_ldexp
},

259 {"sqπ", 
m©h_sqπ
},

260 {"mö", 
m©h_mö
},

261 {"max", 
m©h_max
},

262 {"log", 
m©h_log
},

263 {"log10", 
m©h_log10
},

264 {"exp", 
m©h_exp
},

265 {"deg", 
m©h_deg
},

266 {"pow", 
m©h_pow
},

267 {"ød", 
m©h_ød
},

268 {"øndom", 
m©h_øndom
},

269 {"øndom£ed", 
m©h_øndom£ed
},

270 {
NULL
, NULL}

276 
LUALIB_API
 

277 
	$lua›í_m©h
(
lua_Sèã
 * 
L
)

279 
	`luaL_›ílib
(
L
, 
LUA_MATHLIBNAME
, 
m©hlib
, 0);

280 
	`lua_pushlôîÆ
(
L
, "pi");

281 
	`lua_pushnumbî
(
L
, 
PI
);

282 
	`lua_£âabÀ
(
L
, -3);

283 
	`lua_pushlôîÆ
(
L
, "__pow");

284 
	`lua_pushcfun˘i⁄
(
L
, 
m©h_pow
);

285 
	`lua_£âabÀ
(
L
, 
LUA_GLOBALSINDEX
);

287 
	}
}

	@lib/tas/src/lua/lmem.c

7 
	~<°dlib.h
>

9 
	#lmem_c


	)

11 
	~"lua.h
"

13 
	~"ldebug.h
"

14 
	~"ldo.h
"

15 
	~"lmem.h
"

16 
	~"lobje˘.h
"

17 
	~"l°©e.h
"

24 #i‚de‡
l_ªÆloc


25 
	#l_ªÆloc
(
b
,
os
,
s
Ë
	`ªÆloc
(b,s)

	)

32 #i‚de‡
l_‰ì


33 
	#l_‰ì
(
b
,
os
Ë
	`‰ì
(b)

	)

36 
	#MINSIZEARRAY
 4

	)

39 
	$luaM_growaux
(
lua_Sèã
 * 
L
, *
block
, *
size
, 
size_ñems
, 
limô
, c⁄° *
îr‹msg
)

41 *
√wblock
;

42 
√wsize
 = (*
size
) * 2;

43 i‡(
√wsize
 < 
MINSIZEARRAY
)

44 
√wsize
 = 
MINSIZEARRAY
;

45 i‡(*
size
 >
limô
 / 2) {

46 i‡(*
size
 < 
limô
 - 
MINSIZEARRAY
)

47 
√wsize
 = 
limô
;

49 
	`luaG_ru√º‹
(
L
, 
îr‹msg
);

51 
√wblock
 =

52 
	`luaM_ªÆloc
(
L
, 
block
, 
	`ˇ°
(
lu_mem
, *
size
Ë* ca°÷u_mem, 
size_ñems
), ca°÷u_mem, 
√wsize
) * cast(lu_mem, size_elems));

53 *
size
 = 
√wsize
;

54  
√wblock
;

55 
	}
}

61 
	$luaM_ªÆloc
(
lua_Sèã
 * 
L
, *
block
, 
lu_mem
 
ﬁdsize
,Üu_mem 
size
)

63 
	`lua_as£π
((
ﬁdsize
 =0Ë=(
block
 =
NULL
));

64 i‡(
size
 == 0) {

65 i‡(
block
 !
NULL
) {

66 
	`l_‰ì
(
block
, 
ﬁdsize
);

67 
block
 = 
NULL
;

69  
NULL
;

70 } i‡(
size
 >
MAX_SIZET
)

71 
	`luaG_ru√º‹
(
L
, "memoryállocationÉrror: blockÅoo big");

73 
block
 = 
	`l_ªÆloc
(block, 
ﬁdsize
, 
size
);

74 i‡(
block
 =
NULL
) {

75 i‡(
L
)

76 
	`luaD_throw
(
L
, 
LUA_ERRMEM
);

78  
NULL
;

81 i‡(
L
) {

82 
	`lua_as£π
(
	`G
(
L
Ë!
NULL
 && G(L)->
nblocks
 > 0);

83 
	`G
(
L
)->
nblocks
 -
ﬁdsize
;

84 
	`G
(
L
)->
nblocks
 +
size
;

86  
block
;

87 
	}
}

	@lib/tas/src/lua/lmem.h

7 #i‚de‡
lmem_h


8 
	#lmem_h


	)

10 
	~<°ddef.h
>

12 
	~"Œimôs.h
"

13 
	~"lua.h
"

15 
	#MEMERRMSG
 "nŸÉnough mem‹y"

	)

17 *
luaM_ªÆloc
(
lua_Sèã
 * 
L
, *
ﬁdblock
, 
lu_mem
 
ﬁdsize
,Üu_mem 
size
);

19 *
luaM_growaux
(
lua_Sèã
 * 
L
, *
block
, *
size
, 
size_ñem
, 
limô
, c⁄° *
îr‹msg
);

21 
	#luaM_‰ì
(
L
, 
b
, 
s
Ë
	`luaM_ªÆloc
(L, (b), (s), 0)

	)

22 
	#luaM_‰ìÀm
(
L
, 
b
Ë
	`luaM_ªÆloc
(L, (b), (*(b)), 0)

	)

23 
	#luaM_‰ì¨øy
(
L
, 
b
, 
n
, 
t
Ë
	`luaM_ªÆloc
(L, (b), \

24 
	`ˇ°
(
lu_mem
, 
n
)*ˇ°÷u_mem, (
t
)), 0)

	)

26 
	#luaM_mÆloc
(
L
, 
t
Ë
	`luaM_ªÆloc
(L, 
NULL
, 0, (t))

	)

27 
	#luaM_√w
(
L
, 
t
Ë
	`ˇ°
— *, 
	`luaM_mÆloc
(L, —)))

	)

28 
	#luaM_√wve˘‹
(
L
, 
n
,
t
Ë
	`ˇ°
— *, 
	`luaM_mÆloc
(L, \

29 
	`ˇ°
(
lu_mem
, 
n
)*ˇ°÷u_mem, (
t
))))

	)

31 
	#luaM_growve˘‹
(
L
,
v
,
√Àms
,
size
,
t
,
limô
,
e
) \

32 i‡(((
√Àms
)+1Ë> (
size
)) \

33 ((
v
)=
	`ˇ°
(
t
 *, 
	`luaM_growaux
(
L
,v,&(
size
),—),
limô
,
e
)))

	)

35 
	#luaM_ªÆlocve˘‹
(
L
, 
v
,
ﬁdn
,
n
,
t
) \

36 ((
v
)=
	`ˇ°
(
t
 *, 
	`luaM_ªÆloc
(
L
, v,ˇ°(
lu_mem
, 
ﬁdn
)*cast(lu_mem, (t)), \

37 
	`ˇ°
(
lu_mem
, 
n
)*ˇ°÷u_mem, (
t
)))))

	)

	@lib/tas/src/lua/loadlib.c

29 
	~"lua.h
"

30 
	~"œuxlib.h
"

31 
	~"luÆib.h
"

33 #unde‡
LOADLIB


35 #ifde‡
USE_DLOPEN


36 
	#LOADLIB


	)

45 
	~<dlf˙.h
>

48 
	$lﬂdlib
(
lua_Sèã
 * 
L
)

50 c⁄° *
∑th
 = 
	`luaL_check°rög
(
L
, 1);

51 c⁄° *
öô
 = 
	`luaL_check°rög
(
L
, 2);

52 *
lib
 = 
	`dl›í
(
∑th
, 
RTLD_NOW
);

53 i‡(
lib
 !
NULL
) {

54 
lua_CFun˘i⁄
 
f
 = (lua_CFun˘i⁄Ë
	`dlsym
(
lib
, 
öô
);

55 i‡(
f
 !
NULL
) {

56 
	`lua_pushlightu£rd©a
(
L
, 
lib
);

57 
	`lua_pushc˛osuª
(
L
, 
f
, 1);

62 
	`lua_pushnû
(
L
);

63 
	`lua_push°rög
(
L
, 
	`dÀº‹
());

64 
	`lua_push°rög
(
L
, (
lib
 !
NULL
) ? "init" : "open");

65 i‡(
lib
 !
NULL
)

66 
	`dl˛o£
(
lib
);

68 
	}
}

75 #i‚de‡
USE_DLL


76 #ifde‡
_WIN32


77 
	#USE_DLL
 1

	)

79 
	#USE_DLL
 0

	)

83 #i‡
USE_DLL


84 
	#LOADLIB


	)

90 
	~<wödows.h
>

93 
	$pushîr‹
(
lua_Sèã
 * 
L
)

95 
îr‹
 = 
	`GëLa°Eº‹
();

96 
buf„r
[128];

97 i‡(
	`F‹m©Mesßge
(
FORMAT_MESSAGE_IGNORE_INSERTS
 | 
FORMAT_MESSAGE_FROM_SYSTEM
, 0, 
îr‹
, 0, 
buf„r
, (buffer), 0))

98 
	`lua_push°rög
(
L
, 
buf„r
);

100 
	`lua_pushf°rög
(
L
, "sy°emÉº‹ %d\n", 
îr‹
);

101 
	}
}

104 
	$lﬂdlib
(
lua_Sèã
 * 
L
)

106 c⁄° *
∑th
 = 
	`luaL_check°rög
(
L
, 1);

107 c⁄° *
öô
 = 
	`luaL_check°rög
(
L
, 2);

108 
HINSTANCE
 
lib
 = 
	`LﬂdLibøry
(
∑th
);

109 i‡(
lib
 !
NULL
) {

110 
lua_CFun˘i⁄
 
f
 = (lua_CFun˘i⁄Ë
	`GëProcAddªss
(
lib
, 
öô
);

111 i‡(
f
 !
NULL
) {

112 
	`lua_pushlightu£rd©a
(
L
, 
lib
);

113 
	`lua_pushc˛osuª
(
L
, 
f
, 1);

117 
	`lua_pushnû
(
L
);

118 
	`pushîr‹
(
L
);

119 
	`lua_push°rög
(
L
, (
lib
 !
NULL
) ? "init" : "open");

120 i‡(
lib
 !
NULL
)

121 
	`FªeLibøry
(
lib
);

123 
	}
}

127 #i‚de‡
LOADLIB


135 #ifde‡
löux


136 
	#LOADLIB


	)

139 #ifde‡
sun


140 
	#LOADLIB


	)

143 #ifde‡
sgi


144 
	#LOADLIB


	)

147 #ifde‡
BSD


148 
	#LOADLIB


	)

151 #ifde‡
_WIN32


152 
	#LOADLIB


	)

155 #ifde‡
LOADLIB


156 #unde‡
LOADLIB


157 
	#LOADLIB
 "`lﬂdlib'ÇŸ in°ÆÀd (check you∏Lu®c⁄figuøti⁄)"

	)

159 
	#LOADLIB
 "`lﬂdlib'ÇŸ suµ‹ãd"

	)

163 
	$lﬂdlib
(
lua_Sèã
 * 
L
)

165 
	`lua_pushnû
(
L
);

166 
	`lua_pushlôîÆ
(
L
, 
LOADLIB
);

167 
	`lua_pushlôîÆ
(
L
, "absent");

169 
	}
}

172 
LUALIB_API
 

173 
	$lua›í_lﬂdlib
(
lua_Sèã
 * 
L
)

175 
	`lua_ªgi°î
(
L
, "lﬂdlib", 
lﬂdlib
);

177 
	}
}

	@lib/tas/src/lua/lobject.c

7 
	~<˘y≥.h
>

8 
	~<°d¨g.h
>

9 
	~<°dlib.h
>

10 
	~<°rög.h
>

12 
	#lobje˘_c


	)

14 
	~"lua.h
"

16 
	~"ldo.h
"

17 
	~"lmem.h
"

18 
	~"lobje˘.h
"

19 
	~"l°©e.h
"

20 
	~"l°rög.h
"

21 
	~"lvm.h
"

24 #i‚de‡
lua_°r2numbî


25 
	#lua_°r2numbî
(
s
,
p
Ë
	`°πod
((s), (p))

	)

28 c⁄° 
TObje˘
 
	gluaO_nûobje˘
 = { 
LUA_TNIL
, {
NULL
} };

35 
	$luaO_öt2fb
(
x
)

37 
m
 = 0;

38 
x
 >= (1 << 3)) {

39 
x
 = (x + 1) >> 1;

40 
m
++;

42  (
m
 << 3Ë| 
	`ˇ°
(, 
x
);

43 
	}
}

47 
	$luaO_log2
(
x
)

49 c⁄° 
lu_byã
 
log_8
[255] = {

63 i‡(
x
 >= 0x00010000) {

64 i‡(
x
 >= 0x01000000)

65  
log_8
[((
x
 >> 24) & 0xff) - 1] + 24;

67  
log_8
[((
x
 >> 16) & 0xff) - 1] + 16;

69 i‡(
x
 >= 0x00000100)

70  
log_8
[((
x
 >> 8) & 0xff) - 1] + 8;

71 i‡(
x
)

72  
log_8
[(
x
 & 0xff) - 1];

75 
	}
}

79 
	$luaO_øwequÆObj
(c⁄° 
TObje˘
 * 
t1
, c⁄° TObje˘ * 
t2
)

81 i‡(
	`ây≥
(
t1
Ë!ây≥(
t2
))

84 
	`ây≥
(
t1
)) {

85 
LUA_TNIL
:

87 
LUA_TNUMBER
:

88  
	`nvÆue
(
t1
Ë=nvÆue(
t2
);

89 
LUA_TBOOLEAN
:

90  
	`bvÆue
(
t1
Ë=bvÆue(
t2
);

91 
LUA_TLIGHTUSERDATA
:

92  
	`pvÆue
(
t1
Ë=pvÆue(
t2
);

94 
	`lua_as£π
(
	`iscﬁÀ˘abÀ
(
t1
));

95  
	`gcvÆue
(
t1
Ë=gcvÆue(
t2
);

97 
	}
}

100 
	$luaO_°r2d
(c⁄° *
s
, 
lua_Numbî
 * 
ªsu…
)

102 *
íd±r
;

103 
lua_Numbî
 
ªs
 = 
	`lua_°r2numbî
(
s
, &
íd±r
);

104 i‡(
íd±r
 =
s
)

106 
	`is•a˚
(()(*
íd±r
)))

107 
íd±r
++;

108 i‡(*
íd±r
 != '\0')

110 *
ªsu…
 = 
ªs
;

112 
	}
}

115 
	$push°r
(
lua_Sèã
 * 
L
, c⁄° *
°r
)

117 
	`£tsvÆue2s
(
L
->
t›
, 
	`luaS_√w
(L, 
°r
));

118 
	`ö¸_t›
(
L
);

119 
	}
}

123 
	$luaO_pushvf°rög
(
lua_Sèã
 * 
L
, c⁄° *
fmt
, 
va_li°
 
¨gp
)

125 
n
 = 1;

126 
	`push°r
(
L
, "");

128 c⁄° *
e
 = 
	`°rchr
(
fmt
, '%');

129 i‡(
e
 =
NULL
)

131 
	`£tsvÆue2s
(
L
->
t›
, 
	`luaS_√wl°r
(L, 
fmt
, 
e
 - fmt));

132 
	`ö¸_t›
(
L
);

133 *(
e
 + 1)) {

135 
	`push°r
(
L
, 
	`va_¨g
(
¨gp
, *));

139 
buff
[2];

140 
buff
[0] = 
	`ˇ°
(, 
	`va_¨g
(
¨gp
, ));

141 
buff
[1] = '\0';

142 
	`push°r
(
L
, 
buff
);

146 
	`£ävÆue
(
L
->
t›
, 
	`ˇ°
(
lua_Numbî
, 
	`va_¨g
(
¨gp
, )));

147 
	`ö¸_t›
(
L
);

150 
	`£ävÆue
(
L
->
t›
, 
	`ˇ°
(
lua_Numbî
, 
	`va_¨g
(
¨gp
, 
l_uacNumbî
)));

151 
	`ö¸_t›
(
L
);

154 
	`push°r
(
L
, "%");

157 
	`lua_as£π
(0);

159 
n
 += 2;

160 
fmt
 = 
e
 + 2;

162 
	`push°r
(
L
, 
fmt
);

163 
	`luaV_c⁄ˇt
(
L
, 
n
 + 1, L->
t›
 - L->
ba£
 - 1);

164 
L
->
t›
 -
n
;

165  
	`svÆue
(
L
->
t›
 - 1);

166 
	}
}

169 
	$luaO_pushf°rög
(
lua_Sèã
 * 
L
, c⁄° *
fmt
, ...)

171 c⁄° *
msg
;

172 
va_li°
 
¨gp
;

173 
	`va_°¨t
(
¨gp
, 
fmt
);

174 
msg
 = 
	`luaO_pushvf°rög
(
L
, 
fmt
, 
¨gp
);

175 
	`va_íd
(
¨gp
);

176  
msg
;

177 
	}
}

180 
	$luaO_chunkid
(*
out
, c⁄° *
sour˚
, 
bufÊí
)

182 i‡(*
sour˚
 == '=') {

183 
	`°∫˝y
(
out
, 
sour˚
 + 1, 
bufÊí
);

184 
out
[
bufÊí
 - 1] = '\0';

186 i‡(*
sour˚
 == '@') {

187 
l
;

188 
sour˚
++;

189 
bufÊí
 -= (" `...' ");

190 
l
 = 
	`°æí
(
sour˚
);

191 
	`°r˝y
(
out
, "");

192 i‡(
l
 > 
bufÊí
) {

193 
sour˚
 +(
l
 - 
bufÊí
);

194 
	`°rˇt
(
out
, "...");

196 
	`°rˇt
(
out
, 
sour˚
);

198 
Àn
 = 
	`°rc•n
(
sour˚
, "\n");

199 
bufÊí
 -= (" [string \"...\"] ");

200 i‡(
Àn
 > 
bufÊí
)

201 
Àn
 = 
bufÊí
;

202 
	`°r˝y
(
out
, "[string \"");

203 i‡(
sour˚
[
Àn
] != '\0') {

204 
	`°∫ˇt
(
out
, 
sour˚
, 
Àn
);

205 
	`°rˇt
(
out
, "...");

207 
	`°rˇt
(
out
, 
sour˚
);

208 
	`°rˇt
(
out
, "\"]");

211 
	}
}

	@lib/tas/src/lua/lobject.h

7 #i‚de‡
lobje˘_h


8 
	#lobje˘_h


	)

10 
	~"Œimôs.h
"

11 
	~"lua.h
"

14 
	#NUM_TAGS
 
LUA_TTHREAD


	)

19 
	#LUA_TPROTO
 (
NUM_TAGS
+1)

	)

20 
	#LUA_TUPVAL
 (
NUM_TAGS
+2)

	)

25 
GCObje˘
 
	tGCObje˘
;

31 
	#Comm⁄Hódî
 
GCObje˘
 *
√xt
; 
lu_byã
 
â
;Üu_byã 
m¨ked


	)

36 
	sGChódî
 {

37 
	mComm⁄Hódî
;

38 } 
	tGChódî
;

44 
GCObje˘
 *
	mgc
;

45 *
	mp
;

46 
lua_Numbî
 
	mn
;

47 
	mb
;

48 } 
	tVÆue
;

53 
	slua_TObje˘
 {

54 
	mâ
;

55 
VÆue
 
	mvÆue
;

56 } 
	tTObje˘
;

59 
	#âi¢û
(
o
Ë(
	`ây≥
(oË=
LUA_TNIL
)

	)

60 
	#âi¢umbî
(
o
Ë(
	`ây≥
(oË=
LUA_TNUMBER
)

	)

61 
	#âis°rög
(
o
Ë(
	`ây≥
(oË=
LUA_TSTRING
)

	)

62 
	#âi°abÀ
(
o
Ë(
	`ây≥
(oË=
LUA_TTABLE
)

	)

63 
	#âisfun˘i⁄
(
o
Ë(
	`ây≥
(oË=
LUA_TFUNCTION
)

	)

64 
	#âisboﬁón
(
o
Ë(
	`ây≥
(oË=
LUA_TBOOLEAN
)

	)

65 
	#âisu£rd©a
(
o
Ë(
	`ây≥
(oË=
LUA_TUSERDATA
)

	)

66 
	#âi°hªad
(
o
Ë(
	`ây≥
(oË=
LUA_TTHREAD
)

	)

67 
	#âi¶ightu£rd©a
(
o
Ë(
	`ây≥
(oË=
LUA_TLIGHTUSERDATA
)

	)

70 
	#ây≥
(
o
Ë((o)->
â
)

	)

71 
	#gcvÆue
(
o
Ë
	`check_exp
(
	`iscﬁÀ˘abÀ
(o), (o)->
vÆue
.
gc
)

	)

72 
	#pvÆue
(
o
Ë
	`check_exp
(
	`âi¶ightu£rd©a
(o), (o)->
vÆue
.
p
)

	)

73 
	#nvÆue
(
o
Ë
	`check_exp
(
	`âi¢umbî
(o), (o)->
vÆue
.
n
)

	)

74 
	#tsvÆue
(
o
Ë
	`check_exp
(
	`âis°rög
(o), &(o)->
vÆue
.
gc
->
ts
)

	)

75 
	#uvÆue
(
o
Ë
	`check_exp
(
	`âisu£rd©a
(o), &(o)->
vÆue
.
gc
->
u
)

	)

76 
	#˛vÆue
(
o
Ë
	`check_exp
(
	`âisfun˘i⁄
(o), &(o)->
vÆue
.
gc
->
˛
)

	)

77 
	#hvÆue
(
o
Ë
	`check_exp
(
	`âi°abÀ
(o), &(o)->
vÆue
.
gc
->
h
)

	)

78 
	#bvÆue
(
o
Ë
	`check_exp
(
	`âisboﬁón
(o), (o)->
vÆue
.
b
)

	)

79 
	#thvÆue
(
o
Ë
	`check_exp
(
	`âi°hªad
(o), &(o)->
vÆue
.
gc
->
th
)

	)

81 
	#l_isÁl£
(
o
Ë(
	`âi¢û
(oË|| (
	`âisboﬁón
(oË&& 
	`bvÆue
(oË=0))

	)

84 
	#£ävÆue
(
obj
,
x
) \

85 { 
TObje˘
 *
i_o
=(
obj
); i_o->
â
=
LUA_TNUMBER
; i_o->
vÆue
.
n
=(
x
); }

	)

87 
	#chgnvÆue
(
obj
,
x
) \

88 
	`check_exp
(
	`ây≥
(
obj
)==
LUA_TNUMBER
, (obj)->
vÆue
.
n
=(
x
))

	)

90 
	#£çvÆue
(
obj
,
x
) \

91 { 
TObje˘
 *
i_o
=(
obj
); i_o->
â
=
LUA_TLIGHTUSERDATA
; i_o->
vÆue
.
p
=(
x
); }

	)

93 
	#£tbvÆue
(
obj
,
x
) \

94 { 
TObje˘
 *
i_o
=(
obj
); i_o->
â
=
LUA_TBOOLEAN
; i_o->
vÆue
.
b
=(
x
); }

	)

96 
	#£tsvÆue
(
obj
,
x
) \

97 { 
TObje˘
 *
i_o
=(
obj
); i_o->
â
=
LUA_TSTRING
; \

98 
i_o
->
vÆue
.
gc
=
	`ˇ°
(
GCObje˘
 *, (
x
)); \

99 
	`lua_as£π
(
i_o
->
vÆue
.
gc
->
gch
.
â
 =
LUA_TSTRING
); }

	)

101 
	#£tuvÆue
(
obj
,
x
) \

102 { 
TObje˘
 *
i_o
=(
obj
); i_o->
â
=
LUA_TUSERDATA
; \

103 
i_o
->
vÆue
.
gc
=
	`ˇ°
(
GCObje˘
 *, (
x
)); \

104 
	`lua_as£π
(
i_o
->
vÆue
.
gc
->
gch
.
â
 =
LUA_TUSERDATA
); }

	)

106 
	#£âhvÆue
(
obj
,
x
) \

107 { 
TObje˘
 *
i_o
=(
obj
); i_o->
â
=
LUA_TTHREAD
; \

108 
i_o
->
vÆue
.
gc
=
	`ˇ°
(
GCObje˘
 *, (
x
)); \

109 
	`lua_as£π
(
i_o
->
vÆue
.
gc
->
gch
.
â
 =
LUA_TTHREAD
); }

	)

111 
	#£t˛vÆue
(
obj
,
x
) \

112 { 
TObje˘
 *
i_o
=(
obj
); i_o->
â
=
LUA_TFUNCTION
; \

113 
i_o
->
vÆue
.
gc
=
	`ˇ°
(
GCObje˘
 *, (
x
)); \

114 
	`lua_as£π
(
i_o
->
vÆue
.
gc
->
gch
.
â
 =
LUA_TFUNCTION
); }

	)

116 
	#£thvÆue
(
obj
,
x
) \

117 { 
TObje˘
 *
i_o
=(
obj
); i_o->
â
=
LUA_TTABLE
; \

118 
i_o
->
vÆue
.
gc
=
	`ˇ°_Æign
(
GCObje˘
 *, (
x
)); \

119 
	`lua_as£π
(
i_o
->
vÆue
.
gc
->
gch
.
â
 =
LUA_TTABLE
); }

	)

121 
	#£äûvÆue
(
obj
Ë((obj)->
â
=
LUA_TNIL
)

	)

126 
	#checkc⁄si°ícy
(
obj
) \

127 
	`lua_as£π
(!
	`iscﬁÀ˘abÀ
(
obj
Ë|| (
	`ây≥
(objË=(obj)->
vÆue
.
gc
->
gch
.
â
))

	)

129 
	#£tobj
(
obj1
,
obj2
) \

130 { c⁄° 
TObje˘
 *
o2
=(
obj2
); TObje˘ *
o1
=(
obj1
); \

131 
	`checkc⁄si°ícy
(
o2
); \

132 
o1
->
â
=
o2
->â; o1->
vÆue
 = o2->vÆue; }

	)

139 
	#£tobjs2s
 
£tobj


	)

142 
	#£tobj2s
 
£tobj


	)

143 
	#£tsvÆue2s
 
£tsvÆue


	)

146 
	#£tobjt2t
 
£tobj


	)

149 
	#£tobj2t
 
£tobj


	)

152 
	#£tobj2n
 
£tobj


	)

153 
	#£tsvÆue2n
 
£tsvÆue


	)

155 
	#£âty≥
(
obj
, 
â
Ë(
	`ây≥
(objË—t))

	)

157 
	#iscﬁÀ˘abÀ
(
o
Ë(
	`ây≥
(oË>
LUA_TSTRING
)

	)

159 
TObje˘
 *
	tStkId
;

164 
	uTSåög
 {

165 
L_UmaxÆign
 
	mdummy
;

167 
	mComm⁄Hódî
;

168 
lu_byã
 
	mª£rved
;

169 
lu_hash
 
	mhash
;

170 
size_t
 
	mÀn
;

171 } 
	mtsv
;

172 } 
	tTSåög
;

174 
	#gë°r
(
ts
Ë
	`ˇ°
(c⁄° *, (tsË+ 1)

	)

175 
	#svÆue
(
o
Ë
	`gë°r
(
	`tsvÆue
(o))

	)

177 
	uUd©a
 {

178 
L_UmaxÆign
 
	mdummy
;

180 
	mComm⁄Hódî
;

181 
TabÀ
 *
	mmë©abÀ
;

182 
size_t
 
	mÀn
;

183 } 
	muv
;

184 } 
	tUd©a
;

189 
	sPrŸo
 {

190 
	mComm⁄Hódî
;

191 
TObje˘
 *
	mk
;

192 
In°ru˘i⁄
 *
	mcode
;

193 
PrŸo
 **
	mp
;

194 *
	mlöeöfo
;

195 
LocV¨
 *
	mlocv¨s
;

196 
TSåög
 **
	mupvÆues
;

197 
TSåög
 *
	msour˚
;

198 
	msizeupvÆues
;

199 
	msizek
;

200 
	msizecode
;

201 
	msizñöeöfo
;

202 
	msizï
;

203 
	msizñocv¨s
;

204 
	mlöeDeföed
;

205 
GCObje˘
 *
	mg˛i°
;

206 
lu_byã
 
	mnups
;

207 
lu_byã
 
	mnum∑øms
;

208 
lu_byã
 
	mis_v¨¨g
;

209 
lu_byã
 
	mmax°acksize
;

210 } 
	tPrŸo
;

212 
	sLocV¨
 {

213 
TSåög
 *
	mv¨«me
;

214 
	m°¨çc
;

215 
	mídpc
;

216 } 
	tLocV¨
;

222 
	sUpVÆ
 {

223 
	mComm⁄Hódî
;

224 
TObje˘
 *
	mv
;

225 
TObje˘
 
	mvÆue
;

226 } 
	tUpVÆ
;

232 
	#ClosuªHódî
 \

233 
Comm⁄Hódî
; 
lu_byã
 
isC
;Üu_byã 
nupvÆues
; 
GCObje˘
 *
g˛i°


	)

235 
	sCClosuª
 {

236 
	mClosuªHódî
;

237 
lua_CFun˘i⁄
 
	mf
;

238 
TObje˘
 
	mupvÆue
[1];

239 } 
	tCClosuª
;

241 
	sLClosuª
 {

242 
	mClosuªHódî
;

243 
PrŸo
 *
	mp
;

244 
TObje˘
 
	mg
;

245 
UpVÆ
 *
	mupvÆs
[1];

246 } 
	tLClosuª
;

248 
	uClosuª
 {

249 
CClosuª
 
	mc
;

250 
LClosuª
 
	ml
;

251 } 
	tClosuª
;

253 
	#iscfun˘i⁄
(
o
Ë(
	`ây≥
(oË=
LUA_TFUNCTION
 && 
	`˛vÆue
(o)->
c
.
isC
)

	)

254 
	#isLfun˘i⁄
(
o
Ë(
	`ây≥
(oË=
LUA_TFUNCTION
 && !
	`˛vÆue
(o)->
c
.
isC
)

	)

260 
	sNode
 {

261 
TObje˘
 
	mi_key
;

262 
TObje˘
 
	mi_vÆ
;

263 
Node
 *
	m√xt
;

264 } 
	tNode
;

266 
	sTabÀ
 {

267 
	mComm⁄Hódî
;

268 
lu_byã
 
	mÊags
;

269 
lu_byã
 
	mlsizíode
;

270 
TabÀ
 *
	mmë©abÀ
;

271 
TObje˘
 *
	m¨øy
;

272 
Node
 *
	mnode
;

273 
Node
 *
	mfú°‰ì
;

274 
GCObje˘
 *
	mg˛i°
;

275 
	msizóºay
;

276 } 
	tTabÀ
;

281 
	#lmod
(
s
,
size
) \

282 
	`check_exp
((
size
&(size-1))==0, (
	`ˇ°
(, (
s
Ë& ((size)-1))))

	)

284 
	#twŸo
(
x
Ë(1<<(x))

	)

285 
	#sizíode
(
t
Ë(
	`twŸo
(—)->
lsizíode
))

	)

287 c⁄° 
TObje˘
 
luaO_nûobje˘
;

289 
luaO_log2
(
x
);

290 
luaO_öt2fb
(
x
);

291 
	#fb2öt
(
x
Ë(((xË& 7Ë<< ((xË>> 3))

	)

293 
luaO_øwequÆObj
(c⁄° 
TObje˘
 * 
t1
, c⁄° TObje˘ * 
t2
);

294 
luaO_°r2d
(c⁄° *
s
, 
lua_Numbî
 * 
ªsu…
);

296 c⁄° *
luaO_pushvf°rög
(
lua_Sèã
 * 
L
, c⁄° *
fmt
, 
va_li°
 
¨gp
);

297 c⁄° *
luaO_pushf°rög
(
lua_Sèã
 * 
L
, c⁄° *
fmt
, ...);

298 
luaO_chunkid
(*
out
, c⁄° *
sour˚
, 
Àn
);

	@lib/tas/src/lua/lopcodes.c

8 
	#l›codes_c


	)

10 
	~"lua.h
"

12 
	~"lobje˘.h
"

13 
	~"l›codes.h
"

15 #ifde‡
LUA_OPNAMES


17 c⁄° *c⁄° 
	gluaP_›«mes
[] = {

57 
	#›mode
(
t
,
b
,
bk
,
ck
,
ß
,
k
,
m
Ë((—)<<
OpModeT
) | \

58 ((
b
)<<
OpModeBªg
Ë| ((
bk
)<<
OpModeBrk
Ë| ((
ck
)<<
OpModeCrk
) | \

59 ((
ß
)<<
OpMode£tA
Ë| ((
k
)<<
OpModeK
Ë| (
m
))

	)

61 c⁄° 
lu_byã
 
	gluaP_›modes
[
NUM_OPCODES
] = {

64 
›mode
(0, 1, 0, 0, 1, 0, 
iABC
)

65 , 
›mode
(0, 0, 0, 0, 1, 1, 
iABx
)

66 , 
›mode
(0, 0, 0, 0, 1, 0, 
iABC
)

67 , 
›mode
(0, 1, 0, 0, 1, 0, 
iABC
)

68 , 
›mode
(0, 0, 0, 0, 1, 0, 
iABC
)

69 , 
›mode
(0, 0, 0, 0, 1, 1, 
iABx
)

70 , 
›mode
(0, 1, 0, 1, 1, 0, 
iABC
)

71 , 
›mode
(0, 0, 0, 0, 0, 1, 
iABx
)

72 , 
›mode
(0, 0, 0, 0, 0, 0, 
iABC
)

73 , 
›mode
(0, 0, 1, 1, 0, 0, 
iABC
)

74 , 
›mode
(0, 0, 0, 0, 1, 0, 
iABC
)

75 , 
›mode
(0, 1, 0, 1, 1, 0, 
iABC
)

76 , 
›mode
(0, 0, 1, 1, 1, 0, 
iABC
)

77 , 
›mode
(0, 0, 1, 1, 1, 0, 
iABC
)

78 , 
›mode
(0, 0, 1, 1, 1, 0, 
iABC
)

79 , 
›mode
(0, 0, 1, 1, 1, 0, 
iABC
)

80 , 
›mode
(0, 0, 1, 1, 1, 0, 
iABC
)

81 , 
›mode
(0, 1, 0, 0, 1, 0, 
iABC
)

82 , 
›mode
(0, 1, 0, 0, 1, 0, 
iABC
)

83 , 
›mode
(0, 1, 0, 1, 1, 0, 
iABC
)

84 , 
›mode
(0, 0, 0, 0, 0, 0, 
iAsBx
)

85 , 
›mode
(1, 0, 1, 1, 0, 0, 
iABC
)

86 , 
›mode
(1, 0, 1, 1, 0, 0, 
iABC
)

87 , 
›mode
(1, 0, 1, 1, 0, 0, 
iABC
)

88 , 
›mode
(1, 1, 0, 0, 1, 0, 
iABC
)

89 , 
›mode
(0, 0, 0, 0, 0, 0, 
iABC
)

90 , 
›mode
(0, 0, 0, 0, 0, 0, 
iABC
)

91 , 
›mode
(0, 0, 0, 0, 0, 0, 
iABC
)

92 , 
›mode
(0, 0, 0, 0, 0, 0, 
iAsBx
)

93 , 
›mode
(1, 0, 0, 0, 0, 0, 
iABC
)

94 , 
›mode
(0, 0, 0, 0, 0, 0, 
iAsBx
)

95 , 
›mode
(0, 0, 0, 0, 0, 0, 
iABx
)

96 , 
›mode
(0, 0, 0, 0, 0, 0, 
iABx
)

97 , 
›mode
(0, 0, 0, 0, 0, 0, 
iABC
)

98 , 
›mode
(0, 0, 0, 0, 1, 0, 
iABx
)

	@lib/tas/src/lua/lopcodes.h

7 #i‚de‡
l›codes_h


8 
	#l›codes_h


	)

10 
	~"Œimôs.h
"

29 
	eOpMode
 { 
	miABC
, 
	miABx
, 
	miAsBx
 };

34 
	#SIZE_C
 9

	)

35 
	#SIZE_B
 9

	)

36 
	#SIZE_Bx
 (
SIZE_C
 + 
SIZE_B
)

	)

37 
	#SIZE_A
 8

	)

39 
	#SIZE_OP
 6

	)

41 
	#POS_C
 
SIZE_OP


	)

42 
	#POS_B
 (
POS_C
 + 
SIZE_C
)

	)

43 
	#POS_Bx
 
POS_C


	)

44 
	#POS_A
 (
POS_B
 + 
SIZE_B
)

	)

51 #i‡
SIZE_Bx
 < 
BITS_INT
-1

52 
	#MAXARG_Bx
 ((1<<
SIZE_Bx
)-1)

	)

53 
	#MAXARG_sBx
 (
MAXARG_Bx
>>1Ë

	)

55 
	#MAXARG_Bx
 
MAX_INT


	)

56 
	#MAXARG_sBx
 
MAX_INT


	)

59 
	#MAXARG_A
 ((1<<
SIZE_A
)-1)

	)

60 
	#MAXARG_B
 ((1<<
SIZE_B
)-1)

	)

61 
	#MAXARG_C
 ((1<<
SIZE_C
)-1)

	)

64 
	#MASK1
(
n
,
p
Ë((~((~(
In°ru˘i⁄
)0)<<n))<<p)

	)

67 
	#MASK0
(
n
,
p
Ë(~
	`MASK1
“,p))

	)

73 
	#GET_OPCODE
(
i
Ë(
	`ˇ°
(
OpCode
, (i)&
	`MASK1
(
SIZE_OP
,0)))

	)

74 
	#SET_OPCODE
(
i
,
o
Ë((iË(((i)&
	`MASK0
(
SIZE_OP
,0)Ë| 
	`ˇ°
(
In°ru˘i⁄
, o)))

	)

76 
	#GETARG_A
(
i
Ë(
	`ˇ°
(, (i)>>
POS_A
))

	)

77 
	#SETARG_A
(
i
,
u
Ë((iË(((i)&
	`MASK0
(
SIZE_A
,
POS_A
)) | \

78 ((
	`ˇ°
(
In°ru˘i⁄
, 
u
)<<
POS_A
)&
	`MASK1
(
SIZE_A
,POS_A))))

	)

80 
	#GETARG_B
(
i
Ë(
	`ˇ°
(, ((i)>>
POS_B
Ë& 
	`MASK1
(
SIZE_B
,0)))

	)

81 
	#SETARG_B
(
i
,
b
Ë((iË(((i)&
	`MASK0
(
SIZE_B
,
POS_B
)) | \

82 ((
	`ˇ°
(
In°ru˘i⁄
, 
b
)<<
POS_B
)&
	`MASK1
(
SIZE_B
,POS_B))))

	)

84 
	#GETARG_C
(
i
Ë(
	`ˇ°
(, ((i)>>
POS_C
Ë& 
	`MASK1
(
SIZE_C
,0)))

	)

85 
	#SETARG_C
(
i
,
b
Ë((iË(((i)&
	`MASK0
(
SIZE_C
,
POS_C
)) | \

86 ((
	`ˇ°
(
In°ru˘i⁄
, 
b
)<<
POS_C
)&
	`MASK1
(
SIZE_C
,POS_C))))

	)

88 
	#GETARG_Bx
(
i
Ë(
	`ˇ°
(, ((i)>>
POS_Bx
Ë& 
	`MASK1
(
SIZE_Bx
,0)))

	)

89 
	#SETARG_Bx
(
i
,
b
Ë((iË(((i)&
	`MASK0
(
SIZE_Bx
,
POS_Bx
)) | \

90 ((
	`ˇ°
(
In°ru˘i⁄
, 
b
)<<
POS_Bx
)&
	`MASK1
(
SIZE_Bx
,POS_Bx))))

	)

92 
	#GETARG_sBx
(
i
Ë(
	`GETARG_Bx
(i)-
MAXARG_sBx
)

	)

93 
	#SETARG_sBx
(
i
,
b
Ë
	`SETARG_Bx
((i),
	`ˇ°
(, (b)+
MAXARG_sBx
))

	)

95 
	#CREATE_ABC
(
o
,
a
,
b
,
c
Ë(
	`ˇ°
(
In°ru˘i⁄
, o) \

96 | (
	`ˇ°
(
In°ru˘i⁄
, 
a
)<<
POS_A
) \

97 | (
	`ˇ°
(
In°ru˘i⁄
, 
b
)<<
POS_B
) \

98 | (
	`ˇ°
(
In°ru˘i⁄
, 
c
)<<
POS_C
))

	)

100 
	#CREATE_ABx
(
o
,
a
,
bc
Ë(
	`ˇ°
(
In°ru˘i⁄
, o) \

101 | (
	`ˇ°
(
In°ru˘i⁄
, 
a
)<<
POS_A
) \

102 | (
	`ˇ°
(
In°ru˘i⁄
, 
bc
)<<
POS_Bx
))

	)

107 
	#NO_REG
 
MAXARG_A


	)

124 
	mOP_MOVE
,

125 
	mOP_LOADK
,

126 
	mOP_LOADBOOL
,

127 
	mOP_LOADNIL
,

128 
	mOP_GETUPVAL
,

130 
	mOP_GETGLOBAL
,

131 
	mOP_GETTABLE
,

133 
	mOP_SETGLOBAL
,

134 
	mOP_SETUPVAL
,

135 
	mOP_SETTABLE
,

137 
	mOP_NEWTABLE
,

139 
	mOP_SELF
,

141 
	mOP_ADD
,

142 
	mOP_SUB
,

143 
	mOP_MUL
,

144 
	mOP_DIV
,

145 
	mOP_POW
,

146 
	mOP_UNM
,

147 
	mOP_NOT
,

149 
	mOP_CONCAT
,

151 
	mOP_JMP
,

153 
	mOP_EQ
,

154 
	mOP_LT
,

155 
	mOP_LE
,

157 
	mOP_TEST
,

159 
	mOP_CALL
,

160 
	mOP_TAILCALL
,

161 
	mOP_RETURN
,

163 
	mOP_FORLOOP
,

165 
	mOP_TFORLOOP
,

167 
	mOP_TFORPREP
,

170 
	mOP_SETLIST
,

171 
	mOP_SETLISTO
,

173 
	mOP_CLOSE
,

174 
	mOP_CLOSURE


175 } 
	tOpCode
;

177 
	#NUM_OPCODES
 (
	`ˇ°
(, 
OP_CLOSURE
+1))

	)

195 
	eOpModeMask
 {

196 
	mOpModeBªg
 = 2,

197 
	mOpModeBrk
,

198 
	mOpModeCrk
,

199 
	mOpMode£tA
,

200 
	mOpModeK
,

201 
	mOpModeT


204 c⁄° 
lu_byã
 
luaP_›modes
[
NUM_OPCODES
];

206 
	#gëOpMode
(
m
Ë(
	`ˇ°
(
OpMode
, 
luaP_›modes
[m] & 3))

	)

207 
	#ã°OpMode
(
m
, 
b
Ë(
luaP_›modes
[m] & (1 << (b)))

	)

209 #ifde‡
LUA_OPNAMES


210 c⁄° *c⁄° 
luaP_›«mes
[];

216 
	#LFIELDS_PER_FLUSH
 32

	)

	@lib/tas/src/lua/lparser.c

7 
	~<°rög.h
>

9 
	#Õ¨£r_c


	)

11 
	~"lua.h
"

13 
	~"lcode.h
"

14 
	~"ldebug.h
"

15 
	~"lfunc.h
"

16 
	~"Œex.h
"

17 
	~"lmem.h
"

18 
	~"lobje˘.h
"

19 
	~"l›codes.h
"

20 
	~"Õ¨£r.h
"

21 
	~"l°©e.h
"

22 
	~"l°rög.h
"

24 
	#gëlocv¨
(
fs
, 
i
Ë((fs)->
f
->
locv¨s
[(fs)->
a˘v¨
[i]])

	)

26 
	#íãæevñ
(
ls
Ëi‡(++÷s)->
√°Àvñ
 > 
LUA_MAXPARSERLEVEL
) \

27 
	`luaX_sy¡axîr‹
(
ls
, "toÿm™y sy¡axÜevñs");

	)

28 
	#Àavñevñ
(
ls
Ë(÷s)->
√°Àvñ
--)

	)

33 
	sBlockC¡
 {

34 
BlockC¡
 *
	m¥evious
;

35 
	mbªakli°
;

36 
	m«˘v¨
;

37 
	mupvÆ
;

38 
	misbªakabÀ
;

39 } 
	tBlockC¡
;

44 
chunk
(
LexSèã
 * 
ls
);

45 
ex¥
(
LexSèã
 * 
ls
, 
expdesc
 * 
v
);

46 
	$îr‹_ex≥˘ed
(
LexSèã
 * 
ls
, 
tokí
Ë
	`__©åibuã__
 ((
n‹ëu∫
));

49 
	$√xt
(
LexSèã
 * 
ls
)

51 
ls
->
œ°löe
 =Üs->
löíumbî
;

52 i‡(
ls
->
lookahód
.
tokí
 !
TK_EOS
) {

53 
ls
->
t
 =Üs->
lookahód
;

54 
ls
->
lookahód
.
tokí
 = 
TK_EOS
;

56 
ls
->
t
.
tokí
 = 
	`luaX_Àx
÷s, &ls->t.
£möfo
);

57 
	}
}

60 
	$lookahód
(
LexSèã
 * 
ls
)

62 
	`lua_as£π
(
ls
->
lookahód
.
tokí
 =
TK_EOS
);

63 
ls
->
lookahód
.
tokí
 = 
	`luaX_Àx
÷s, &ls->lookahód.
£möfo
);

64 
	}
}

67 
	$îr‹_ex≥˘ed
(
LexSèã
 * 
ls
, 
tokí
)

69 
	`luaX_sy¡axîr‹
(
ls
, 
	`luaO_pushf°rög
÷s->
L
, "`%s'Éx≥˘ed", 
	`luaX_tokí2°r
÷s, 
tokí
)));

70 
	}
}

73 
	$ã°√xt
(
LexSèã
 * 
ls
, 
c
)

75 i‡(
ls
->
t
.
tokí
 =
c
) {

76 
	`√xt
(
ls
);

80 
	}
}

83 
	$check
(
LexSèã
 * 
ls
, 
c
)

85 i‡(!
	`ã°√xt
(
ls
, 
c
))

86 
	`îr‹_ex≥˘ed
(
ls
, 
c
);

87 
	}
}

89 
	#check_c⁄dôi⁄
(
ls
,
c
,
msg
Ë{ i‡(!(c)Ë
	`luaX_sy¡axîr‹
÷s, msg); }

	)

92 
	$check_m©ch
(
LexSèã
 * 
ls
, 
wh©
, 
who
, 
whîe
)

94 i‡(!
	`ã°√xt
(
ls
, 
wh©
)) {

95 i‡(
whîe
 =
ls
->
löíumbî
)

96 
	`îr‹_ex≥˘ed
(
ls
, 
wh©
);

98 
	`luaX_sy¡axîr‹
(
ls
,

99 
	`luaO_pushf°rög
(
ls
->
L
, "`%s'Éx≥˘ed (tÿ˛o£ `%s'áàlöê%d)", 
	`luaX_tokí2°r
÷s, 
wh©
),

100 
	`luaX_tokí2°r
(
ls
, 
who
), 
whîe
));

103 
	}
}

105 
TSåög
 *

106 
	$°r_check«me
(
LexSèã
 * 
ls
)

108 
TSåög
 *
ts
;

109 
	`check_c⁄dôi⁄
(
ls
, (ls->
t
.
tokí
 =
TK_NAME
), "<name>Éxpected");

110 
ts
 = 
ls
->
t
.
£möfo
.ts;

111 
	`√xt
(
ls
);

112  
ts
;

113 
	}
}

116 
	$öô_exp
(
expdesc
 * 
e
, 
expköd
 
k
, 
i
)

118 
e
->
f
 =É->
t
 = 
NO_JUMP
;

119 
e
->
k
 = k;

120 
e
->
öfo
 = 
i
;

121 
	}
}

124 
	$code°rög
(
LexSèã
 * 
ls
, 
expdesc
 * 
e
, 
TSåög
 * 
s
)

126 
	`öô_exp
(
e
, 
VK
, 
	`luaK_°rögK
(
ls
->
fs
, 
s
));

127 
	}
}

130 
	$check«me
(
LexSèã
 * 
ls
, 
expdesc
 * 
e
)

132 
	`code°rög
(
ls
, 
e
, 
	`°r_check«me
(ls));

133 
	}
}

136 
	$luaI_ªgi°îloˇlv¨
(
LexSèã
 * 
ls
, 
TSåög
 * 
v¨«me
)

138 
FuncSèã
 *
fs
 = 
ls
->fs;

139 
PrŸo
 *
f
 = 
fs
->f;

140 
	`luaM_growve˘‹
(
ls
->
L
, 
f
->
locv¨s
, 
fs
->
∆ocv¨s
, f->
sizñocv¨s
, 
LocV¨
, 
MAX_INT
, "");

141 
f
->
locv¨s
[
fs
->
∆ocv¨s
].
v¨«me
 = varname;

142  
fs
->
∆ocv¨s
++;

143 
	}
}

146 
	$√w_loˇlv¨
(
LexSèã
 * 
ls
, 
TSåög
 * 
«me
, 
n
)

148 
FuncSèã
 *
fs
 = 
ls
->fs;

149 
	`luaX_checklimô
(
ls
, 
fs
->
«˘v¨
 + 
n
 + 1, 
MAXVARS
, "local variables");

150 
fs
->
a˘v¨
[fs->
«˘v¨
 + 
n
] = 
	`luaI_ªgi°îloˇlv¨
(
ls
, 
«me
);

151 
	}
}

154 
	$adju°loˇlv¨s
(
LexSèã
 * 
ls
, 
nv¨s
)

156 
FuncSèã
 *
fs
 = 
ls
->fs;

157 
fs
->
«˘v¨
 +
nv¨s
;

158 ; 
nv¨s
;Çvars--) {

159 
	`gëlocv¨
(
fs
, fs->
«˘v¨
 - 
nv¨s
).
°¨çc
 = fs->
pc
;

161 
	}
}

164 
	$ªmovev¨s
(
LexSèã
 * 
ls
, 
tﬁevñ
)

166 
FuncSèã
 *
fs
 = 
ls
->fs;

167 
fs
->
«˘v¨
 > 
tﬁevñ
)

168 
	`gëlocv¨
(
fs
, --fs->
«˘v¨
).
ídpc
 = fs->
pc
;

169 
	}
}

172 
	$√w_loˇlv¨°r
(
LexSèã
 * 
ls
, c⁄° *
«me
, 
n
)

174 
	`√w_loˇlv¨
(
ls
, 
	`luaS_√w
÷s->
L
, 
«me
), 
n
);

175 
	}
}

178 
	$¸óã_loˇl
(
LexSèã
 * 
ls
, c⁄° *
«me
)

180 
	`√w_loˇlv¨°r
(
ls
, 
«me
, 0);

181 
	`adju°loˇlv¨s
(
ls
, 1);

182 
	}
}

185 
	$ödexupvÆue
(
FuncSèã
 * 
fs
, 
TSåög
 * 
«me
, 
expdesc
 * 
v
)

187 
i
;

188 
PrŸo
 *
f
 = 
fs
->f;

189 
i
 = 0; i < 
f
->
nups
; i++) {

190 i‡(
fs
->
upvÆues
[
i
].
k
 =
v
->k && fs->upvÆues[i].
öfo
 == v->info) {

191 
	`lua_as£π
(
fs
->
f
->
upvÆues
[
i
] =
«me
);

192  
i
;

196 
	`luaX_checklimô
(
fs
->
ls
, 
f
->
nups
 + 1, 
MAXUPVALUES
, "upvalues");

197 
	`luaM_growve˘‹
(
fs
->
L
, fs->
f
->
upvÆues
, f->
nups
, fs->f->
sizeupvÆues
, 
TSåög
 *, 
MAX_INT
, "");

198 
fs
->
f
->
upvÆues
[f->
nups
] = 
«me
;

199 
fs
->
upvÆues
[
f
->
nups
] = *
v
;

200  
f
->
nups
++;

201 
	}
}

204 
	$£¨chv¨
(
FuncSèã
 * 
fs
, 
TSåög
 * 
n
)

206 
i
;

207 
i
 = 
fs
->
«˘v¨
 - 1; i >= 0; i--) {

208 i‡(
n
 =
	`gëlocv¨
(
fs
, 
i
).
v¨«me
)

209  
i
;

212 
	}
}

215 
	$m¨kupvÆ
(
FuncSèã
 * 
fs
, 
Àvñ
)

217 
BlockC¡
 *
bl
 = 
fs
->bl;

218 
bl
 && bl->
«˘v¨
 > 
Àvñ
)

219 
bl
 = bl->
¥evious
;

220 i‡(
bl
)

221 
bl
->
upvÆ
 = 1;

222 
	}
}

225 
	$sögÀv¨aux
(
FuncSèã
 * 
fs
, 
TSåög
 * 
n
, 
expdesc
 * 
v¨
, 
ba£
)

227 i‡(
fs
 =
NULL
)

228 
	`öô_exp
(
v¨
, 
VGLOBAL
, 
NO_REG
);

230 
v
 = 
	`£¨chv¨
(
fs
, 
n
);

231 i‡(
v
 >= 0) {

232 
	`öô_exp
(
v¨
, 
VLOCAL
, 
v
);

233 i‡(!
ba£
)

234 
	`m¨kupvÆ
(
fs
, 
v
);

236 
	`sögÀv¨aux
(
fs
->
¥ev
, 
n
, 
v¨
, 0);

237 i‡(
v¨
->
k
 =
VGLOBAL
) {

238 i‡(
ba£
)

239 
v¨
->
öfo
 = 
	`luaK_°rögK
(
fs
, 
n
);

241 
v¨
->
öfo
 = 
	`ödexupvÆue
(
fs
, 
n
, var);

242 
v¨
->
k
 = 
VUPVAL
;

246 
	}
}

248 
TSåög
 *

249 
	$sögÀv¨
(
LexSèã
 * 
ls
, 
expdesc
 * 
v¨
, 
ba£
)

251 
TSåög
 *
v¨«me
 = 
	`°r_check«me
(
ls
);

252 
	`sögÀv¨aux
(
ls
->
fs
, 
v¨«me
, 
v¨
, 
ba£
);

253  
v¨«me
;

254 
	}
}

257 
	$adju°_assign
(
LexSèã
 * 
ls
, 
nv¨s
, 
√xps
, 
expdesc
 * 
e
)

259 
FuncSèã
 *
fs
 = 
ls
->fs;

260 
exåa
 = 
nv¨s
 - 
√xps
;

261 i‡(
e
->
k
 =
VCALL
) {

262 
exåa
++;

263 i‡(
exåa
 <= 0)

264 
exåa
 = 0;

266 
	`luaK_ª£rvîegs
(
fs
, 
exåa
 - 1);

267 
	`luaK_£tˇŒªtu∫s
(
fs
, 
e
, 
exåa
);

269 i‡(
e
->
k
 !
VVOID
)

270 
	`luaK_exp2√xåeg
(
fs
, 
e
);

271 i‡(
exåa
 > 0) {

272 
ªg
 = 
fs
->
‰ìªg
;

273 
	`luaK_ª£rvîegs
(
fs
, 
exåa
);

274 
	`luaK_nû
(
fs
, 
ªg
, 
exåa
);

277 
	}
}

280 
	$code_∑øms
(
LexSèã
 * 
ls
, 
≈¨ams
, 
dŸs
)

282 
FuncSèã
 *
fs
 = 
ls
->fs;

283 
	`adju°loˇlv¨s
(
ls
, 
≈¨ams
);

284 
	`luaX_checklimô
(
ls
, 
fs
->
«˘v¨
, 
MAXPARAMS
, "parameters");

285 
fs
->
f
->
num∑øms
 = 
	`ˇ°
(
lu_byã
, fs->
«˘v¨
);

286 
fs
->
f
->
is_v¨¨g
 = 
	`ˇ°
(
lu_byã
, 
dŸs
);

287 i‡(
dŸs
)

288 
	`¸óã_loˇl
(
ls
, "arg");

289 
	`luaK_ª£rvîegs
(
fs
, fs->
«˘v¨
);

290 
	}
}

293 
	$íãrblock
(
FuncSèã
 * 
fs
, 
BlockC¡
 * 
bl
, 
isbªakabÀ
)

295 
bl
->
bªakli°
 = 
NO_JUMP
;

296 
bl
->
isbªakabÀ
 = isbreakable;

297 
bl
->
«˘v¨
 = 
fs
->nactvar;

298 
bl
->
upvÆ
 = 0;

299 
bl
->
¥evious
 = 
fs
->bl;

300 
fs
->
bl
 = bl;

301 
	`lua_as£π
(
fs
->
‰ìªg
 =fs->
«˘v¨
);

302 
	}
}

305 
	$Àaveblock
(
FuncSèã
 * 
fs
)

307 
BlockC¡
 *
bl
 = 
fs
->bl;

308 
fs
->
bl
 = bl->
¥evious
;

309 
	`ªmovev¨s
(
fs
->
ls
, 
bl
->
«˘v¨
);

310 i‡(
bl
->
upvÆ
)

311 
	`luaK_codeABC
(
fs
, 
OP_CLOSE
, 
bl
->
«˘v¨
, 0, 0);

312 
	`lua_as£π
(
bl
->
«˘v¨
 =
fs
->nactvar);

313 
fs
->
‰ìªg
 = fs->
«˘v¨
;

314 
	`luaK_∑tchtohîe
(
fs
, 
bl
->
bªakli°
);

315 
	}
}

318 
	$push˛osuª
(
LexSèã
 * 
ls
, 
FuncSèã
 * 
func
, 
expdesc
 * 
v
)

320 
FuncSèã
 *
fs
 = 
ls
->fs;

321 
PrŸo
 *
f
 = 
fs
->f;

322 
i
;

323 
	`luaM_growve˘‹
(
ls
->
L
, 
f
->
p
, 
fs
->
≈
, f->
sizï
, 
PrŸo
 *, 
MAXARG_Bx
, "constantÅable overflow");

324 
f
->
p
[
fs
->
≈
++] = 
func
->f;

325 
	`öô_exp
(
v
, 
VRELOCABLE
, 
	`luaK_codeABx
(
fs
, 
OP_CLOSURE
, 0, fs->
≈
 - 1));

326 
i
 = 0; i < 
func
->
f
->
nups
; i++) {

327 
OpCode
 
o
 = (
func
->
upvÆues
[
i
].
k
 =
VLOCAL
Ë? 
OP_MOVE
 : 
OP_GETUPVAL
;

328 
	`luaK_codeABC
(
fs
, 
o
, 0, 
func
->
upvÆues
[
i
].
öfo
, 0);

330 
	}
}

333 
	$›í_func
(
LexSèã
 * 
ls
, 
FuncSèã
 * 
fs
)

335 
PrŸo
 *
f
 = 
	`luaF_√w¥Ÿo
(
ls
->
L
);

336 
fs
->
f
 = f;

337 
fs
->
¥ev
 = 
ls
->fs;

338 
fs
->
ls
 =Üs;

339 
fs
->
L
 = 
ls
->L;

340 
ls
->
fs
 = fs;

341 
fs
->
pc
 = 0;

342 
fs
->
œ°èrgë
 = 0;

343 
fs
->
jpc
 = 
NO_JUMP
;

344 
fs
->
‰ìªg
 = 0;

345 
fs
->
nk
 = 0;

346 
fs
->
h
 = 
	`luaH_√w
(
ls
->
L
, 0, 0);

347 
fs
->
≈
 = 0;

348 
fs
->
∆ocv¨s
 = 0;

349 
fs
->
«˘v¨
 = 0;

350 
fs
->
bl
 = 
NULL
;

351 
f
->
sour˚
 = 
ls
->source;

352 
f
->
max°acksize
 = 2;

353 
	}
}

356 
	$˛o£_func
(
LexSèã
 * 
ls
)

358 
lua_Sèã
 *
L
 = 
ls
->L;

359 
FuncSèã
 *
fs
 = 
ls
->fs;

360 
PrŸo
 *
f
 = 
fs
->f;

361 
	`ªmovev¨s
(
ls
, 0);

362 
	`luaK_codeABC
(
fs
, 
OP_RETURN
, 0, 1, 0);

363 
	`luaM_ªÆlocve˘‹
(
L
, 
f
->
code
, f->
sizecode
, 
fs
->
pc
, 
In°ru˘i⁄
);

364 
f
->
sizecode
 = 
fs
->
pc
;

365 
	`luaM_ªÆlocve˘‹
(
L
, 
f
->
löeöfo
, f->
sizñöeöfo
, 
fs
->
pc
, );

366 
f
->
sizñöeöfo
 = 
fs
->
pc
;

367 
	`luaM_ªÆlocve˘‹
(
L
, 
f
->
k
, f->
sizek
, 
fs
->
nk
, 
TObje˘
);

368 
f
->
sizek
 = 
fs
->
nk
;

369 
	`luaM_ªÆlocve˘‹
(
L
, 
f
->
p
, f->
sizï
, 
fs
->
≈
, 
PrŸo
 *);

370 
f
->
sizï
 = 
fs
->
≈
;

371 
	`luaM_ªÆlocve˘‹
(
L
, 
f
->
locv¨s
, f->
sizñocv¨s
, 
fs
->
∆ocv¨s
, 
LocV¨
);

372 
f
->
sizñocv¨s
 = 
fs
->
∆ocv¨s
;

373 
	`luaM_ªÆlocve˘‹
(
L
, 
f
->
upvÆues
, f->
sizeupvÆues
, f->
nups
, 
TSåög
 *);

374 
f
->
sizeupvÆues
 = f->
nups
;

375 
	`lua_as£π
(
	`luaG_checkcode
(
f
));

376 
	`lua_as£π
(
fs
->
bl
 =
NULL
);

377 
ls
->
fs
 = fs->
¥ev
;

378 
	}
}

380 
PrŸo
 *

381 
	$luaY_∑r£r
(
lua_Sèã
 * 
L
, 
ZIO
 * 
z
, 
Mbuf„r
 * 
buff
)

383 
LexSèã
 
Àx°©e
;

384 
FuncSèã
 
func°©e
;

385 
Àx°©e
.
buff
 = buff;

386 
Àx°©e
.
√°Àvñ
 = 0;

387 
	`luaX_£töput
(
L
, &
Àx°©e
, 
z
, 
	`luaS_√w
(L, 
	`z«me
(z)));

388 
	`›í_func
(&
Àx°©e
, &
func°©e
);

389 
	`√xt
(&
Àx°©e
);

390 
	`chunk
(&
Àx°©e
);

391 
	`check_c⁄dôi⁄
(&
Àx°©e
, (Àx°©e.
t
.
tokí
 =
TK_EOS
), "<eof>Éxpected");

392 
	`˛o£_func
(&
Àx°©e
);

393 
	`lua_as£π
(
func°©e
.
¥ev
 =
NULL
);

394 
	`lua_as£π
(
func°©e
.
f
->
nups
 == 0);

395 
	`lua_as£π
(
Àx°©e
.
√°Àvñ
 == 0);

396  
func°©e
.
f
;

397 
	}
}

406 
	$luaY_fõld
(
LexSèã
 * 
ls
, 
expdesc
 * 
v
)

409 
FuncSèã
 *
fs
 = 
ls
->fs;

410 
expdesc
 
key
;

411 
	`luaK_exp2™yªg
(
fs
, 
v
);

412 
	`√xt
(
ls
);

413 
	`check«me
(
ls
, &
key
);

414 
	`luaK_ödexed
(
fs
, 
v
, &
key
);

415 
	}
}

418 
	$luaY_ödex
(
LexSèã
 * 
ls
, 
expdesc
 * 
v
)

421 
	`√xt
(
ls
);

422 
	`ex¥
(
ls
, 
v
);

423 
	`luaK_exp2vÆ
(
ls
->
fs
, 
v
);

424 
	`check
(
ls
, ']');

425 
	}
}

433 
	sC⁄sC⁄åﬁ
 {

434 
expdesc
 
	mv
;

435 
expdesc
 *
	mt
;

436 
	mnh
;

437 
	m«
;

438 
	mto°‹e
;

442 
	$ªcfõld
(
LexSèã
 * 
ls
, 
C⁄sC⁄åﬁ
 *
cc
)

445 
FuncSèã
 *
fs
 = 
ls
->fs;

446 
ªg
 = 
ls
->
fs
->
‰ìªg
;

447 
expdesc
 
key
, 
vÆ
;

448 i‡(
ls
->
t
.
tokí
 =
TK_NAME
) {

449 
	`luaX_checklimô
(
ls
, 
cc
->
nh
, 
MAX_INT
, "items iná constructor");

450 
cc
->
nh
++;

451 
	`check«me
(
ls
, &
key
);

453 
	`luaY_ödex
(
ls
, &
key
);

454 
	`check
(
ls
, '=');

455 
	`luaK_exp2RK
(
fs
, &
key
);

456 
	`ex¥
(
ls
, &
vÆ
);

457 
	`luaK_codeABC
(
fs
, 
OP_SETTABLE
, 
cc
->
t
->
öfo
, 
	`luaK_exp2RK
(fs, &
key
),ÜuaK_exp2RK(fs, &
vÆ
));

458 
fs
->
‰ìªg
 = 
ªg
;

459 
	}
}

462 
	$˛o£li°fõld
(
FuncSèã
 * 
fs
, 
C⁄sC⁄åﬁ
 *
cc
)

464 i‡(
cc
->
v
.
k
 =
VVOID
)

466 
	`luaK_exp2√xåeg
(
fs
, &
cc
->
v
);

467 
cc
->
v
.
k
 = 
VVOID
;

468 i‡(
cc
->
to°‹e
 =
LFIELDS_PER_FLUSH
) {

469 
	`luaK_codeABx
(
fs
, 
OP_SETLIST
, 
cc
->
t
->
öfo
, cc->
«
 - 1);

470 
cc
->
to°‹e
 = 0;

471 
fs
->
‰ìªg
 = 
cc
->
t
->
öfo
 + 1;

473 
	}
}

476 
	$œ°li°fõld
(
FuncSèã
 * 
fs
, 
C⁄sC⁄åﬁ
 *
cc
)

478 i‡(
cc
->
to°‹e
 == 0)

480 i‡(
cc
->
v
.
k
 =
VCALL
) {

481 
	`luaK_£tˇŒªtu∫s
(
fs
, &
cc
->
v
, 
LUA_MULTRET
);

482 
	`luaK_codeABx
(
fs
, 
OP_SETLISTO
, 
cc
->
t
->
öfo
, cc->
«
 - 1);

484 i‡(
cc
->
v
.
k
 !
VVOID
)

485 
	`luaK_exp2√xåeg
(
fs
, &
cc
->
v
);

486 
	`luaK_codeABx
(
fs
, 
OP_SETLIST
, 
cc
->
t
->
öfo
, cc->
«
 - 1);

488 
fs
->
‰ìªg
 = 
cc
->
t
->
öfo
 + 1;

489 
	}
}

492 
	$li°fõld
(
LexSèã
 * 
ls
, 
C⁄sC⁄åﬁ
 *
cc
)

494 
	`ex¥
(
ls
, &
cc
->
v
);

495 
	`luaX_checklimô
(
ls
, 
cc
->
«
, 
MAXARG_Bx
, "items iná constructor");

496 
cc
->
«
++;

497 
cc
->
to°‹e
++;

498 
	}
}

501 
	$c⁄°ru˘‹
(
LexSèã
 * 
ls
, 
expdesc
 * 
t
)

504 
FuncSèã
 *
fs
 = 
ls
->fs;

505 
löe
 = 
ls
->
löíumbî
;

506 
pc
 = 
	`luaK_codeABC
(
fs
, 
OP_NEWTABLE
, 0, 0, 0);

507 
C⁄sC⁄åﬁ
 
cc
;

508 
cc
.
«
 = cc.
nh
 = cc.
to°‹e
 = 0;

509 
cc
.
t
 =Å;

510 
	`öô_exp
(
t
, 
VRELOCABLE
, 
pc
);

511 
	`öô_exp
(&
cc
.
v
, 
VVOID
, 0);

512 
	`luaK_exp2√xåeg
(
ls
->
fs
, 
t
);

513 
	`check
(
ls
, '{');

515 
	`lua_as£π
(
cc
.
v
.
k
 =
VVOID
 || cc.
to°‹e
 > 0);

516 
	`ã°√xt
(
ls
, ';');

517 i‡(
ls
->
t
.
tokí
 == '}')

519 
	`˛o£li°fõld
(
fs
, &
cc
);

520 
ls
->
t
.
tokí
) {

521 
TK_NAME
:

523 
	`lookahód
(
ls
);

524 i‡(
ls
->
lookahód
.
tokí
 != '=')

525 
	`li°fõld
(
ls
, &
cc
);

527 
	`ªcfõld
(
ls
, &
cc
);

532 
	`ªcfõld
(
ls
, &
cc
);

537 
	`li°fõld
(
ls
, &
cc
);

542 
	`ã°√xt
(
ls
, ',') ||Åestnext(ls, ';'));

543 
	`check_m©ch
(
ls
, '}', '{', 
löe
);

544 
	`œ°li°fõld
(
fs
, &
cc
);

545 
	`SETARG_B
(
fs
->
f
->
code
[
pc
], 
	`luaO_öt2fb
(
cc
.
«
));

546 
	`SETARG_C
(
fs
->
f
->
code
[
pc
], 
	`luaO_log2
(
cc
.
nh
) + 1);

547 
	}
}

552 
	$∑æi°
(
LexSèã
 * 
ls
)

555 
≈¨ams
 = 0;

556 
dŸs
 = 0;

557 i‡(
ls
->
t
.
tokí
 != ')') {

559 
ls
->
t
.
tokí
) {

560 
TK_DOTS
:

561 
dŸs
 = 1;

562 
	`√xt
(
ls
);

564 
TK_NAME
:

565 
	`√w_loˇlv¨
(
ls
, 
	`°r_check«me
÷s), 
≈¨ams
++);

568 
	`luaX_sy¡axîr‹
(
ls
, "<name> or `...'Éxpected");

571 !
dŸs
 && 
	`ã°√xt
(
ls
, ','));

573 
	`code_∑øms
(
ls
, 
≈¨ams
, 
dŸs
);

574 
	}
}

577 
	$body
(
LexSèã
 * 
ls
, 
expdesc
 * 
e
, 
√ed£lf
, 
löe
)

580 
FuncSèã
 
√w_fs
;

581 
	`›í_func
(
ls
, &
√w_fs
);

582 
√w_fs
.
f
->
löeDeföed
 = 
löe
;

583 
	`check
(
ls
, '(');

584 i‡(
√ed£lf
)

585 
	`¸óã_loˇl
(
ls
, "self");

586 
	`∑æi°
(
ls
);

587 
	`check
(
ls
, ')');

588 
	`chunk
(
ls
);

589 
	`check_m©ch
(
ls
, 
TK_END
, 
TK_FUNCTION
, 
löe
);

590 
	`˛o£_func
(
ls
);

591 
	`push˛osuª
(
ls
, &
√w_fs
, 
e
);

592 
	}
}

595 
	$ex∂i°1
(
LexSèã
 * 
ls
, 
expdesc
 * 
v
)

598 
n
 = 1;

599 
	`ex¥
(
ls
, 
v
);

600 
	`ã°√xt
(
ls
, ',')) {

601 
	`luaK_exp2√xåeg
(
ls
->
fs
, 
v
);

602 
	`ex¥
(
ls
, 
v
);

603 
n
++;

605  
n
;

606 
	}
}

609 
	$funˇrgs
(
LexSèã
 * 
ls
, 
expdesc
 * 
f
)

611 
FuncSèã
 *
fs
 = 
ls
->fs;

612 
expdesc
 
¨gs
;

613 
ba£
, 
≈¨ams
;

614 
löe
 = 
ls
->
löíumbî
;

615 
ls
->
t
.
tokí
) {

618 i‡(
löe
 !
ls
->
œ°löe
)

619 
	`luaX_sy¡axîr‹
(
ls
, "ambiguous syntax (function call xÇew statement)");

620 
	`√xt
(
ls
);

621 i‡(
ls
->
t
.
tokí
 == ')')

622 
¨gs
.
k
 = 
VVOID
;

624 
	`ex∂i°1
(
ls
, &
¨gs
);

625 
	`luaK_£tˇŒªtu∫s
(
fs
, &
¨gs
, 
LUA_MULTRET
);

627 
	`check_m©ch
(
ls
, ')', '(', 
löe
);

632 
	`c⁄°ru˘‹
(
ls
, &
¨gs
);

635 
TK_STRING
:

637 
	`code°rög
(
ls
, &
¨gs
,Üs->
t
.
£möfo
.
ts
);

638 
	`√xt
(
ls
);

643 
	`luaX_sy¡axîr‹
(
ls
, "functionárgumentsÉxpected");

647 
	`lua_as£π
(
f
->
k
 =
VNONRELOC
);

648 
ba£
 = 
f
->
öfo
;

649 i‡(
¨gs
.
k
 =
VCALL
)

650 
≈¨ams
 = 
LUA_MULTRET
;

652 i‡(
¨gs
.
k
 !
VVOID
)

653 
	`luaK_exp2√xåeg
(
fs
, &
¨gs
);

654 
≈¨ams
 = 
fs
->
‰ìªg
 - (
ba£
 + 1);

656 
	`öô_exp
(
f
, 
VCALL
, 
	`luaK_codeABC
(
fs
, 
OP_CALL
, 
ba£
, 
≈¨ams
 + 1, 2));

657 
	`luaK_fixlöe
(
fs
, 
löe
);

658 
fs
->
‰ìªg
 = 
ba£
 + 1;

660 
	}
}

669 
	$¥efixexp
(
LexSèã
 * 
ls
, 
expdesc
 * 
v
)

672 
ls
->
t
.
tokí
) {

675 
löe
 = 
ls
->
löíumbî
;

676 
	`√xt
(
ls
);

677 
	`ex¥
(
ls
, 
v
);

678 
	`check_m©ch
(
ls
, ')', '(', 
löe
);

679 
	`luaK_disch¨gev¨s
(
ls
->
fs
, 
v
);

682 
TK_NAME
:

684 
	`sögÀv¨
(
ls
, 
v
, 1);

687 #ifde‡
LUA_COMPATUPSYNTAX


690 
TSåög
 *
v¨«me
;

691 
löe
 = 
ls
->
löíumbî
;

692 
	`√xt
(
ls
);

693 
v¨«me
 = 
	`sögÀv¨
(
ls
, 
v
, 1);

694 i‡(
v
->
k
 !
VUPVAL
)

695 
	`luaX_îr‹löe
(
ls
, "globÆ upvÆue†¨êobsﬁëe", 
	`gë°r
(
v¨«me
), 
löe
);

701 
	`luaX_sy¡axîr‹
(
ls
, "unexpected symbol");

705 
	}
}

708 
	$¥im¨yexp
(
LexSèã
 * 
ls
, 
expdesc
 * 
v
)

712 
FuncSèã
 *
fs
 = 
ls
->fs;

713 
	`¥efixexp
(
ls
, 
v
);

715 
ls
->
t
.
tokí
) {

718 
	`luaY_fõld
(
ls
, 
v
);

723 
expdesc
 
key
;

724 
	`luaK_exp2™yªg
(
fs
, 
v
);

725 
	`luaY_ödex
(
ls
, &
key
);

726 
	`luaK_ödexed
(
fs
, 
v
, &
key
);

731 
expdesc
 
key
;

732 
	`√xt
(
ls
);

733 
	`check«me
(
ls
, &
key
);

734 
	`luaK_£lf
(
fs
, 
v
, &
key
);

735 
	`funˇrgs
(
ls
, 
v
);

739 
TK_STRING
:

742 
	`luaK_exp2√xåeg
(
fs
, 
v
);

743 
	`funˇrgs
(
ls
, 
v
);

750 
	}
}

753 
	$sim∂ìxp
(
LexSèã
 * 
ls
, 
expdesc
 * 
v
)

757 
ls
->
t
.
tokí
) {

758 
TK_NUMBER
:

760 
	`öô_exp
(
v
, 
VK
, 
	`luaK_numbîK
(
ls
->
fs
,Üs->
t
.
£möfo
.
r
));

761 
	`√xt
(
ls
);

764 
TK_STRING
:

766 
	`code°rög
(
ls
, 
v
,Üs->
t
.
£möfo
.
ts
);

767 
	`√xt
(
ls
);

770 
TK_NIL
:

772 
	`öô_exp
(
v
, 
VNIL
, 0);

773 
	`√xt
(
ls
);

776 
TK_TRUE
:

778 
	`öô_exp
(
v
, 
VTRUE
, 0);

779 
	`√xt
(
ls
);

782 
TK_FALSE
:

784 
	`öô_exp
(
v
, 
VFALSE
, 0);

785 
	`√xt
(
ls
);

790 
	`c⁄°ru˘‹
(
ls
, 
v
);

793 
TK_FUNCTION
:

795 
	`√xt
(
ls
);

796 
	`body
(
ls
, 
v
, 0,Üs->
löíumbî
);

801 
	`¥im¨yexp
(
ls
, 
v
);

805 
	}
}

807 
UnO¥


808 
	$gëun›r
(
›
)

810 
›
) {

811 
TK_NOT
:

812  
OPR_NOT
;

814  
OPR_MINUS
;

816  
OPR_NOUNOPR
;

818 
	}
}

820 
BöO¥


821 
	$gëbö›r
(
›
)

823 
›
) {

825  
OPR_ADD
;

827  
OPR_SUB
;

829  
OPR_MULT
;

831  
OPR_DIV
;

833  
OPR_POW
;

834 
TK_CONCAT
:

835  
OPR_CONCAT
;

836 
TK_NE
:

837  
OPR_NE
;

838 
TK_EQ
:

839  
OPR_EQ
;

841  
OPR_LT
;

842 
TK_LE
:

843  
OPR_LE
;

845  
OPR_GT
;

846 
TK_GE
:

847  
OPR_GE
;

848 
TK_AND
:

849  
OPR_AND
;

850 
TK_OR
:

851  
OPR_OR
;

853  
OPR_NOBINOPR
;

855 
	}
}

858 
lu_byã
 
	mÀ·
;

859 
lu_byã
 
	mright
;

860 } 
	g¥i‹ôy
[] = {

882 
	#UNARY_PRIORITY
 8

	)

888 
BöO¥


889 
	$subex¥
(
LexSèã
 * 
ls
, 
expdesc
 * 
v
, 
limô
)

891 
BöO¥
 
›
;

892 
UnO¥
 
u›
;

893 
	`íãæevñ
(
ls
);

894 
u›
 = 
	`gëun›r
(
ls
->
t
.
tokí
);

895 i‡(
u›
 !
OPR_NOUNOPR
) {

896 
	`√xt
(
ls
);

897 
	`subex¥
(
ls
, 
v
, 
UNARY_PRIORITY
);

898 
	`luaK_¥efix
(
ls
->
fs
, 
u›
, 
v
);

900 
	`sim∂ìxp
(
ls
, 
v
);

902 
›
 = 
	`gëbö›r
(
ls
->
t
.
tokí
);

903 
›
 !
OPR_NOBINOPR
 && 
	`ˇ°
(, 
¥i‹ôy
[›].
À·
Ë> 
limô
) {

904 
expdesc
 
v2
;

905 
BöO¥
 
√xt›
;

906 
	`√xt
(
ls
);

907 
	`luaK_öfix
(
ls
->
fs
, 
›
, 
v
);

909 
√xt›
 = 
	`subex¥
(
ls
, &
v2
, 
	`ˇ°
(, 
¥i‹ôy
[
›
].
right
));

910 
	`luaK_posfix
(
ls
->
fs
, 
›
, 
v
, &
v2
);

911 
›
 = 
√xt›
;

913 
	`Àavñevñ
(
ls
);

914  
›
;

915 
	}
}

918 
	$ex¥
(
LexSèã
 * 
ls
, 
expdesc
 * 
v
)

920 
	`subex¥
(
ls
, 
v
, -1);

921 
	}
}

932 
	$block_fﬁlow
(
tokí
)

934 
tokí
) {

935 
TK_ELSE
:

936 
TK_ELSEIF
:

937 
TK_END
:

938 
TK_UNTIL
:

939 
TK_EOS
:

944 
	}
}

947 
	$block
(
LexSèã
 * 
ls
)

950 
FuncSèã
 *
fs
 = 
ls
->fs;

951 
BlockC¡
 
bl
;

952 
	`íãrblock
(
fs
, &
bl
, 0);

953 
	`chunk
(
ls
);

954 
	`lua_as£π
(
bl
.
bªakli°
 =
NO_JUMP
);

955 
	`Àaveblock
(
fs
);

956 
	}
}

962 
	sLHS_assign
 {

963 
LHS_assign
 *
	m¥ev
;

964 
expdesc
 
	mv
;

974 
	$check_c⁄Êi˘
(
LexSèã
 * 
ls
, 
LHS_assign
 *
lh
, 
expdesc
 * 
v
)

976 
FuncSèã
 *
fs
 = 
ls
->fs;

977 
exåa
 = 
fs
->
‰ìªg
;

978 
c⁄Êi˘
 = 0;

979 ; 
lh
;Üh =Üh->
¥ev
) {

980 i‡(
lh
->
v
.
k
 =
VINDEXED
) {

981 i‡(
lh
->
v
.
öfo
 == v->info) {

982 
c⁄Êi˘
 = 1;

983 
lh
->
v
.
öfo
 = 
exåa
;

985 i‡(
lh
->
v
.
aux
 =v->
öfo
) {

986 
c⁄Êi˘
 = 1;

987 
lh
->
v
.
aux
 = 
exåa
;

991 i‡(
c⁄Êi˘
) {

992 
	`luaK_codeABC
(
fs
, 
OP_MOVE
, fs->
‰ìªg
, 
v
->
öfo
, 0);

993 
	`luaK_ª£rvîegs
(
fs
, 1);

995 
	}
}

998 
	$assignmít
(
LexSèã
 * 
ls
, 
LHS_assign
 *
lh
, 
nv¨s
)

1000 
expdesc
 
e
;

1001 
	`check_c⁄dôi⁄
(
ls
, 
VLOCAL
 <
lh
->
v
.
k
 &&Üh->v.k <
VINDEXED
, "syntaxÉrror");

1002 i‡(
	`ã°√xt
(
ls
, ',')) {

1003 
LHS_assign
 
nv
;

1004 
nv
.
¥ev
 = 
lh
;

1005 
	`¥im¨yexp
(
ls
, &
nv
.
v
);

1006 i‡(
nv
.
v
.
k
 =
VLOCAL
)

1007 
	`check_c⁄Êi˘
(
ls
, 
lh
, &
nv
.
v
);

1008 
	`assignmít
(
ls
, &
nv
, 
nv¨s
 + 1);

1010 
√xps
;

1011 
	`check
(
ls
, '=');

1012 
√xps
 = 
	`ex∂i°1
(
ls
, &
e
);

1013 i‡(
√xps
 !
nv¨s
) {

1014 
	`adju°_assign
(
ls
, 
nv¨s
, 
√xps
, &
e
);

1015 i‡(
√xps
 > 
nv¨s
)

1016 
ls
->
fs
->
‰ìªg
 -
√xps
 - 
nv¨s
;

1018 
	`luaK_£tˇŒªtu∫s
(
ls
->
fs
, &
e
, 1);

1019 
	`luaK_°‹ev¨
(
ls
->
fs
, &
lh
->
v
, &
e
);

1023 
	`öô_exp
(&
e
, 
VNONRELOC
, 
ls
->
fs
->
‰ìªg
 - 1);

1024 
	`luaK_°‹ev¨
(
ls
->
fs
, &
lh
->
v
, &
e
);

1025 
	}
}

1028 
	$c⁄d
(
LexSèã
 * 
ls
, 
expdesc
 * 
v
)

1031 
	`ex¥
(
ls
, 
v
);

1032 i‡(
v
->
k
 =
VNIL
)

1033 
v
->
k
 = 
VFALSE
;

1034 
	`luaK_goi·rue
(
ls
->
fs
, 
v
);

1035 
	`luaK_∑tchtohîe
(
ls
->
fs
, 
v
->
t
);

1036 
	}
}

1046 #i‚de‡
MAXEXPWHILE


1047 
	#MAXEXPWHILE
 100

	)

1054 
	#EXTRAEXP
 5

	)

1057 
	$whûe°©
(
LexSèã
 * 
ls
, 
löe
)

1060 
In°ru˘i⁄
 
codìxp
[
MAXEXPWHILE
 + 
EXTRAEXP
];

1061 
löìxp
;

1062 
i
;

1063 
sizìxp
;

1064 
FuncSèã
 *
fs
 = 
ls
->fs;

1065 
whûeöô
, 
blocköô
, 
expöô
;

1066 
expdesc
 
v
;

1067 
BlockC¡
 
bl
;

1068 
	`√xt
(
ls
);

1069 
whûeöô
 = 
	`luaK_jump
(
fs
);

1070 
expöô
 = 
	`luaK_gëœbñ
(
fs
);

1071 
	`ex¥
(
ls
, &
v
);

1072 i‡(
v
.
k
 =
VK
)

1073 
v
.
k
 = 
VTRUE
;

1074 
löìxp
 = 
ls
->
löíumbî
;

1075 
	`luaK_goifÁl£
(
fs
, &
v
);

1076 
	`luaK_c⁄ˇt
(
fs
, &
v
.
f
, fs->
jpc
);

1077 
fs
->
jpc
 = 
NO_JUMP
;

1078 
sizìxp
 = 
fs
->
pc
 - 
expöô
;

1079 i‡(
sizìxp
 > 
MAXEXPWHILE
)

1080 
	`luaX_sy¡axîr‹
(
ls
, "`while' conditionÅoo complex");

1081 
i
 = 0; i < 
sizìxp
; i++)

1082 
codìxp
[
i
] = 
fs
->
f
->
code
[
expöô
 + i];

1083 
fs
->
pc
 = 
expöô
;

1084 
	`íãrblock
(
fs
, &
bl
, 1);

1085 
	`check
(
ls
, 
TK_DO
);

1086 
blocköô
 = 
	`luaK_gëœbñ
(
fs
);

1087 
	`block
(
ls
);

1088 
	`luaK_∑tchtohîe
(
fs
, 
whûeöô
);

1090 i‡(
v
.
t
 !
NO_JUMP
)

1091 
v
.
t
 +
fs
->
pc
 - 
expöô
;

1092 i‡(
v
.
f
 !
NO_JUMP
)

1093 
v
.
f
 +
fs
->
pc
 - 
expöô
;

1094 
i
 = 0; i < 
sizìxp
; i++)

1095 
	`luaK_code
(
fs
, 
codìxp
[
i
], 
löìxp
);

1096 
	`check_m©ch
(
ls
, 
TK_END
, 
TK_WHILE
, 
löe
);

1097 
	`Àaveblock
(
fs
);

1098 
	`luaK_∑tchli°
(
fs
, 
v
.
t
, 
blocköô
);

1099 
	`luaK_∑tchtohîe
(
fs
, 
v
.
f
);

1100 
	}
}

1103 
	$ª≥©°©
(
LexSèã
 * 
ls
, 
löe
)

1106 
FuncSèã
 *
fs
 = 
ls
->fs;

1107 
ª≥©_öô
 = 
	`luaK_gëœbñ
(
fs
);

1108 
expdesc
 
v
;

1109 
BlockC¡
 
bl
;

1110 
	`íãrblock
(
fs
, &
bl
, 1);

1111 
	`√xt
(
ls
);

1112 
	`block
(
ls
);

1113 
	`check_m©ch
(
ls
, 
TK_UNTIL
, 
TK_REPEAT
, 
löe
);

1114 
	`c⁄d
(
ls
, &
v
);

1115 
	`luaK_∑tchli°
(
fs
, 
v
.
f
, 
ª≥©_öô
);

1116 
	`Àaveblock
(
fs
);

1117 
	}
}

1120 
	$exp1
(
LexSèã
 * 
ls
)

1122 
expdesc
 
e
;

1123 
k
;

1124 
	`ex¥
(
ls
, &
e
);

1125 
k
 = 
e
.k;

1126 
	`luaK_exp2√xåeg
(
ls
->
fs
, &
e
);

1127  
k
;

1128 
	}
}

1131 
	$f‹body
(
LexSèã
 * 
ls
, 
ba£
, 
löe
, 
nv¨s
, 
i¢um
)

1133 
BlockC¡
 
bl
;

1134 
FuncSèã
 *
fs
 = 
ls
->fs;

1135 
¥ï
, 
ídf‹
;

1136 
	`adju°loˇlv¨s
(
ls
, 
nv¨s
);

1137 
	`check
(
ls
, 
TK_DO
);

1138 
	`íãrblock
(
fs
, &
bl
, 1);

1139 
¥ï
 = 
	`luaK_gëœbñ
(
fs
);

1140 
	`block
(
ls
);

1141 
	`luaK_∑tchtohîe
(
fs
, 
¥ï
 - 1);

1142 
ídf‹
 = (
i¢um
Ë? 
	`luaK_codeAsBx
(
fs
, 
OP_FORLOOP
, 
ba£
, 
NO_JUMP
Ë: 
	`luaK_codeABC
(fs, 
OP_TFORLOOP
, ba£, 0, 
nv¨s
 - 3);

1143 
	`luaK_fixlöe
(
fs
, 
löe
);

1144 
	`luaK_∑tchli°
(
fs
, (
i¢um
Ë? 
ídf‹
 : 
	`luaK_jump
(fs), 
¥ï
);

1145 
	`Àaveblock
(
fs
);

1146 
	}
}

1149 
	$f‹num
(
LexSèã
 * 
ls
, 
TSåög
 * 
v¨«me
, 
löe
)

1152 
FuncSèã
 *
fs
 = 
ls
->fs;

1153 
ba£
 = 
fs
->
‰ìªg
;

1154 
	`√w_loˇlv¨
(
ls
, 
v¨«me
, 0);

1155 
	`√w_loˇlv¨°r
(
ls
, "(forÜimit)", 1);

1156 
	`√w_loˇlv¨°r
(
ls
, "(for step)", 2);

1157 
	`check
(
ls
, '=');

1158 
	`exp1
(
ls
);

1159 
	`check
(
ls
, ',');

1160 
	`exp1
(
ls
);

1161 i‡(
	`ã°√xt
(
ls
, ','))

1162 
	`exp1
(
ls
);

1164 
	`luaK_codeABx
(
fs
, 
OP_LOADK
, fs->
‰ìªg
, 
	`luaK_numbîK
(fs, 1));

1165 
	`luaK_ª£rvîegs
(
fs
, 1);

1167 
	`luaK_codeABC
(
fs
, 
OP_SUB
, fs->
‰ìªg
 - 3, fs->freereg - 3, fs->freereg - 1);

1168 
	`luaK_jump
(
fs
);

1169 
	`f‹body
(
ls
, 
ba£
, 
löe
, 3, 1);

1170 
	}
}

1173 
	$f‹li°
(
LexSèã
 * 
ls
, 
TSåög
 * 
ödex«me
)

1176 
FuncSèã
 *
fs
 = 
ls
->fs;

1177 
expdesc
 
e
;

1178 
nv¨s
 = 0;

1179 
löe
;

1180 
ba£
 = 
fs
->
‰ìªg
;

1181 
	`√w_loˇlv¨°r
(
ls
, "(f‹ gíî©‹)", 
nv¨s
++);

1182 
	`√w_loˇlv¨°r
(
ls
, "(f‹ sèã)", 
nv¨s
++);

1183 
	`√w_loˇlv¨
(
ls
, 
ödex«me
, 
nv¨s
++);

1184 
	`ã°√xt
(
ls
, ','))

1185 
	`√w_loˇlv¨
(
ls
, 
	`°r_check«me
÷s), 
nv¨s
++);

1186 
	`check
(
ls
, 
TK_IN
);

1187 
löe
 = 
ls
->
löíumbî
;

1188 
	`adju°_assign
(
ls
, 
nv¨s
, 
	`ex∂i°1
÷s, &
e
), &e);

1189 
	`luaK_check°ack
(
fs
, 3);

1190 
	`luaK_codeAsBx
(
fs
, 
OP_TFORPREP
, 
ba£
, 
NO_JUMP
);

1191 
	`f‹body
(
ls
, 
ba£
, 
löe
, 
nv¨s
, 0);

1192 
	}
}

1195 
	$f‹°©
(
LexSèã
 * 
ls
, 
löe
)

1198 
FuncSèã
 *
fs
 = 
ls
->fs;

1199 
TSåög
 *
v¨«me
;

1200 
BlockC¡
 
bl
;

1201 
	`íãrblock
(
fs
, &
bl
, 0);

1202 
	`√xt
(
ls
);

1203 
v¨«me
 = 
	`°r_check«me
(
ls
);

1204 
ls
->
t
.
tokí
) {

1206 
	`f‹num
(
ls
, 
v¨«me
, 
löe
);

1209 
TK_IN
:

1210 
	`f‹li°
(
ls
, 
v¨«me
);

1213 
	`luaX_sy¡axîr‹
(
ls
, "`=' or `in'Éxpected");

1215 
	`check_m©ch
(
ls
, 
TK_END
, 
TK_FOR
, 
löe
);

1216 
	`Àaveblock
(
fs
);

1217 
	}
}

1220 
	$ã°_thí_block
(
LexSèã
 * 
ls
, 
expdesc
 * 
v
)

1223 
	`√xt
(
ls
);

1224 
	`c⁄d
(
ls
, 
v
);

1225 
	`check
(
ls
, 
TK_THEN
);

1226 
	`block
(
ls
);

1227 
	}
}

1230 
	$if°©
(
LexSèã
 * 
ls
, 
löe
)

1233 
FuncSèã
 *
fs
 = 
ls
->fs;

1234 
expdesc
 
v
;

1235 
esˇ≥li°
 = 
NO_JUMP
;

1236 
	`ã°_thí_block
(
ls
, &
v
);

1237 
ls
->
t
.
tokí
 =
TK_ELSEIF
) {

1238 
	`luaK_c⁄ˇt
(
fs
, &
esˇ≥li°
, 
	`luaK_jump
(fs));

1239 
	`luaK_∑tchtohîe
(
fs
, 
v
.
f
);

1240 
	`ã°_thí_block
(
ls
, &
v
);

1242 i‡(
ls
->
t
.
tokí
 =
TK_ELSE
) {

1243 
	`luaK_c⁄ˇt
(
fs
, &
esˇ≥li°
, 
	`luaK_jump
(fs));

1244 
	`luaK_∑tchtohîe
(
fs
, 
v
.
f
);

1245 
	`√xt
(
ls
);

1246 
	`block
(
ls
);

1248 
	`luaK_c⁄ˇt
(
fs
, &
esˇ≥li°
, 
v
.
f
);

1249 
	`luaK_∑tchtohîe
(
fs
, 
esˇ≥li°
);

1250 
	`check_m©ch
(
ls
, 
TK_END
, 
TK_IF
, 
löe
);

1251 
	}
}

1254 
	$loˇlfunc
(
LexSèã
 * 
ls
)

1256 
expdesc
 
v
, 
b
;

1257 
FuncSèã
 *
fs
 = 
ls
->fs;

1258 
	`√w_loˇlv¨
(
ls
, 
	`°r_check«me
(ls), 0);

1259 
	`öô_exp
(&
v
, 
VLOCAL
, 
fs
->
‰ìªg
);

1260 
	`luaK_ª£rvîegs
(
fs
, 1);

1261 
	`adju°loˇlv¨s
(
ls
, 1);

1262 
	`body
(
ls
, &
b
, 0,Üs->
löíumbî
);

1263 
	`luaK_°‹ev¨
(
fs
, &
v
, &
b
);

1265 
	`gëlocv¨
(
fs
, fs->
«˘v¨
 - 1).
°¨çc
 = fs->
pc
;

1266 
	}
}

1269 
	$loˇl°©
(
LexSèã
 * 
ls
)

1272 
nv¨s
 = 0;

1273 
√xps
;

1274 
expdesc
 
e
;

1276 
	`√w_loˇlv¨
(
ls
, 
	`°r_check«me
÷s), 
nv¨s
++);

1278 
	`ã°√xt
(
ls
, ','));

1279 i‡(
	`ã°√xt
(
ls
, '='))

1280 
√xps
 = 
	`ex∂i°1
(
ls
, &
e
);

1282 
e
.
k
 = 
VVOID
;

1283 
√xps
 = 0;

1285 
	`adju°_assign
(
ls
, 
nv¨s
, 
√xps
, &
e
);

1286 
	`adju°loˇlv¨s
(
ls
, 
nv¨s
);

1287 
	}
}

1290 
	$fun˙ame
(
LexSèã
 * 
ls
, 
expdesc
 * 
v
)

1293 
√ed£lf
 = 0;

1294 
	`sögÀv¨
(
ls
, 
v
, 1);

1295 
ls
->
t
.
tokí
 == '.')

1296 
	`luaY_fõld
(
ls
, 
v
);

1297 i‡(
ls
->
t
.
tokí
 == ':') {

1298 
√ed£lf
 = 1;

1299 
	`luaY_fõld
(
ls
, 
v
);

1301  
√ed£lf
;

1302 
	}
}

1305 
	$func°©
(
LexSèã
 * 
ls
, 
löe
)

1308 
√ed£lf
;

1309 
expdesc
 
v
, 
b
;

1310 
	`√xt
(
ls
);

1311 
√ed£lf
 = 
	`fun˙ame
(
ls
, &
v
);

1312 
	`body
(
ls
, &
b
, 
√ed£lf
, 
löe
);

1313 
	`luaK_°‹ev¨
(
ls
->
fs
, &
v
, &
b
);

1314 
	`luaK_fixlöe
(
ls
->
fs
, 
löe
);

1315 
	}
}

1318 
	$ex¥°©
(
LexSèã
 * 
ls
)

1321 
FuncSèã
 *
fs
 = 
ls
->fs;

1322 
LHS_assign
 
v
;

1323 
	`¥im¨yexp
(
ls
, &
v
.v);

1324 i‡(
v
.v.
k
 =
VCALL
) {

1325 
	`luaK_£tˇŒªtu∫s
(
fs
, &
v
.v, 0);

1327 
v
.
¥ev
 = 
NULL
;

1328 
	`assignmít
(
ls
, &
v
, 1);

1330 
	}
}

1333 
	$ªt°©
(
LexSèã
 * 
ls
)

1336 
FuncSèã
 *
fs
 = 
ls
->fs;

1337 
expdesc
 
e
;

1338 
fú°
, 
ƒë
;

1339 
	`√xt
(
ls
);

1340 i‡(
	`block_fﬁlow
(
ls
->
t
.
tokí
) ||Üs->t.token == ';')

1341 
fú°
 = 
ƒë
 = 0;

1343 
ƒë
 = 
	`ex∂i°1
(
ls
, &
e
);

1344 i‡(
e
.
k
 =
VCALL
) {

1345 
	`luaK_£tˇŒªtu∫s
(
fs
, &
e
, 
LUA_MULTRET
);

1346 i‡(
ƒë
 == 1) {

1347 
	`SET_OPCODE
(
	`gëcode
(
fs
, &
e
), 
OP_TAILCALL
);

1348 
	`lua_as£π
(
	`GETARG_A
(
	`gëcode
(
fs
, &
e
)Ë=fs->
«˘v¨
);

1350 
fú°
 = 
fs
->
«˘v¨
;

1351 
ƒë
 = 
LUA_MULTRET
;

1353 i‡(
ƒë
 == 1)

1354 
fú°
 = 
	`luaK_exp2™yªg
(
fs
, &
e
);

1356 
	`luaK_exp2√xåeg
(
fs
, &
e
);

1357 
fú°
 = 
fs
->
«˘v¨
;

1358 
	`lua_as£π
(
ƒë
 =
fs
->
‰ìªg
 - 
fú°
);

1362 
	`luaK_codeABC
(
fs
, 
OP_RETURN
, 
fú°
, 
ƒë
 + 1, 0);

1363 
	}
}

1366 
	$bªak°©
(
LexSèã
 * 
ls
)

1369 
FuncSèã
 *
fs
 = 
ls
->fs;

1370 
BlockC¡
 *
bl
 = 
fs
->bl;

1371 
upvÆ
 = 0;

1372 
	`√xt
(
ls
);

1373 
bl
 && !bl->
isbªakabÀ
) {

1374 
upvÆ
 |
bl
->upval;

1375 
bl
 = bl->
¥evious
;

1377 i‡(!
bl
)

1378 
	`luaX_sy¡axîr‹
(
ls
, "noÜoopÅo break");

1379 i‡(
upvÆ
)

1380 
	`luaK_codeABC
(
fs
, 
OP_CLOSE
, 
bl
->
«˘v¨
, 0, 0);

1381 
	`luaK_c⁄ˇt
(
fs
, &
bl
->
bªakli°
, 
	`luaK_jump
(fs));

1382 
	}
}

1385 
	$°©emít
(
LexSèã
 * 
ls
)

1387 
löe
 = 
ls
->
löíumbî
;

1388 
ls
->
t
.
tokí
) {

1389 
TK_IF
:

1391 
	`if°©
(
ls
, 
löe
);

1394 
TK_WHILE
:

1396 
	`whûe°©
(
ls
, 
löe
);

1399 
TK_DO
:

1401 
	`√xt
(
ls
);

1402 
	`block
(
ls
);

1403 
	`check_m©ch
(
ls
, 
TK_END
, 
TK_DO
, 
löe
);

1406 
TK_FOR
:

1408 
	`f‹°©
(
ls
, 
löe
);

1411 
TK_REPEAT
:

1413 
	`ª≥©°©
(
ls
, 
löe
);

1416 
TK_FUNCTION
:

1418 
	`func°©
(
ls
, 
löe
);

1421 
TK_LOCAL
:

1423 
	`√xt
(
ls
);

1424 i‡(
	`ã°√xt
(
ls
, 
TK_FUNCTION
))

1425 
	`loˇlfunc
(
ls
);

1427 
	`loˇl°©
(
ls
);

1430 
TK_RETURN
:

1432 
	`ªt°©
(
ls
);

1435 
TK_BREAK
:

1437 
	`bªak°©
(
ls
);

1442 
	`ex¥°©
(
ls
);

1446 
	}
}

1449 
	$chunk
(
LexSèã
 * 
ls
)

1452 
i¶a°
 = 0;

1453 
	`íãæevñ
(
ls
);

1454 !
i¶a°
 && !
	`block_fﬁlow
(
ls
->
t
.
tokí
)) {

1455 
i¶a°
 = 
	`°©emít
(
ls
);

1456 
	`ã°√xt
(
ls
, ';');

1457 
	`lua_as£π
(
ls
->
fs
->
‰ìªg
 >ls->fs->
«˘v¨
);

1458 
ls
->
fs
->
‰ìªg
 =Üs->fs->
«˘v¨
;

1460 
	`Àavñevñ
(
ls
);

1461 
	}
}

	@lib/tas/src/lua/lparser.h

7 #i‚de‡
Õ¨£r_h


8 
	#Õ¨£r_h


	)

10 
	~"Œimôs.h
"

11 
	~"lobje˘.h
"

12 
	~"…abÀ.h
"

13 
	~"lzio.h
"

20 
	mVVOID
,

21 
	mVNIL
,

22 
	mVTRUE
,

23 
	mVFALSE
,

24 
	mVK
,

25 
	mVLOCAL
,

26 
	mVUPVAL
,

27 
	mVGLOBAL
,

28 
	mVINDEXED
,

29 
	mVJMP
,

30 
	mVRELOCABLE
,

31 
	mVNONRELOC
,

32 
	mVCALL


33 } 
	texpköd
;

35 
	sexpdesc
 {

36 
expköd
 
	mk
;

37 
	möfo
, 
	maux
;

38 
	mt
;

39 
	mf
;

40 } 
	texpdesc
;

42 
	gBlockC¡
;

45 
	sFuncSèã
 {

46 
PrŸo
 *
	mf
;

47 
TabÀ
 *
	mh
;

48 
FuncSèã
 *
	m¥ev
;

49 
LexSèã
 *
	mls
;

50 
lua_Sèã
 *
	mL
;

51 
BlockC¡
 *
	mbl
;

52 
	mpc
;

53 
	mœ°èrgë
;

54 
	mjpc
;

55 
	m‰ìªg
;

56 
	mnk
;

57 
	m≈
;

58 
	m∆ocv¨s
;

59 
	m«˘v¨
;

60 
expdesc
 
	mupvÆues
[
MAXUPVALUES
];

61 
	ma˘v¨
[
MAXVARS
];

62 } 
	tFuncSèã
;

64 
PrŸo
 *
luaY_∑r£r
(
lua_Sèã
 * 
L
, 
ZIO
 * 
z
, 
Mbuf„r
 * 
buff
);

	@lib/tas/src/lua/lstate.c

7 
	~<°dlib.h
>

9 
	#l°©e_c


	)

11 
	~"lua.h
"

13 
	~"ldebug.h
"

14 
	~"ldo.h
"

15 
	~"lfunc.h
"

16 
	~"lgc.h
"

17 
	~"Œex.h
"

18 
	~"lmem.h
"

19 
	~"l°©e.h
"

20 
	~"l°rög.h
"

21 
	~"…abÀ.h
"

22 
	~"…m.h
"

27 #i‚de‡
LUA_USERSTATE


28 
	#EXTRASPACE
 0

	)

30 
	uUEXTRASPACE
 {

31 
L_UmaxÆign
 
	ma
;

32 
LUA_USERSTATE
 
	mb
;

34 
	#EXTRASPACE
 ((
UEXTRASPACE
))

	)

42 
	$deÁu…_∑nic
(
lua_Sèã
 * 
L
)

44 
	`UNUSED
(
L
);

46 
	}
}

48 
lua_Sèã
 *

49 
	$mÆloc°©e
(
lua_Sèã
 * 
L
)

51 
lu_byã
 *
block
 = (lu_byã *Ë
	`luaM_mÆloc
(
L
, (
lua_Sèã
Ë+ 
EXTRASPACE
);

52 i‡(
block
 =
NULL
)

53  
NULL
;

55 
block
 +
EXTRASPACE
;

56  
	`ˇ°_Æign
(
lua_Sèã
 *, 
block
);

58 
	}
}

61 
	$‰ì°©e
(
lua_Sèã
 * 
L
,Üua_Sèã * 
L1
)

63 
	`luaM_‰ì
(
L
, 
	`ˇ°
(
lu_byã
 *, 
L1
Ë- 
EXTRASPACE
, (
lua_Sèã
) + EXTRASPACE);

64 
	}
}

67 
	$°ack_öô
(
lua_Sèã
 * 
L1
,Üua_Sèã * 
L
)

69 
L1
->
°ack
 = 
	`luaM_√wve˘‹
(
L
, 
BASIC_STACK_SIZE
 + 
EXTRA_STACK
, 
TObje˘
);

70 
L1
->
°acksize
 = 
BASIC_STACK_SIZE
 + 
EXTRA_STACK
;

71 
L1
->
t›
 = L1->
°ack
;

72 
L1
->
°ack_œ°
 = L1->
°ack
 + (L1->
°acksize
 - 
EXTRA_STACK
) - 1;

73 
L1
->
ba£_ci
 = 
	`luaM_√wve˘‹
(
L
, 
BASIC_CI_SIZE
, 
CÆlInfo
);

74 
L1
->
ci
 = L1->
ba£_ci
;

75 
L1
->
ci
->
°©e
 = 
CI_C
;

76 
	`£äûvÆue
(
L1
->
t›
++);

77 
L1
->
ba£
 = L1->
ci
->ba£ = L1->
t›
;

78 
L1
->
ci
->
t›
 = L1->t› + 
LUA_MINSTACK
;

79 
L1
->
size_ci
 = 
BASIC_CI_SIZE
;

80 
L1
->
íd_ci
 = L1->
ba£_ci
 + L1->
size_ci
;

81 
	}
}

84 
	$‰ì°ack
(
lua_Sèã
 * 
L
,Üua_Sèã * 
L1
)

86 
	`luaM_‰ì¨øy
(
L
, 
L1
->
ba£_ci
, L1->
size_ci
, 
CÆlInfo
);

87 
	`luaM_‰ì¨øy
(
L
, 
L1
->
°ack
, L1->
°acksize
, 
TObje˘
);

88 
	}
}

94 
	$f_lua›í
(
lua_Sèã
 * 
L
, *
ud
)

97 
globÆ_Sèã
 *
g
 = 
	`luaM_√w
(
NULL
, global_State);

98 
	`UNUSED
(
ud
);

99 i‡(
g
 =
NULL
)

100 
	`luaD_throw
(
L
, 
LUA_ERRMEM
);

101 
L
->
l_G
 = 
g
;

102 
g
->
maöthªad
 = 
L
;

103 
g
->
GCthªshﬁd
 = 0;

104 
g
->
°π
.
size
 = 0;

105 
g
->
°π
.
nu£
 = 0;

106 
g
->
°π
.
hash
 = 
NULL
;

107 
	`£äûvÆue
(
	`deÁu…mëa
(
L
));

108 
	`£äûvÆue
(
	`ªgi°ry
(
L
));

109 
	`luaZ_öôbuf„r
(
L
, &
g
->
buff
);

110 
g
->
∑nic
 = 
deÁu…_∑nic
;

111 
g
->
roŸgc
 = 
NULL
;

112 
g
->
roŸud©a
 = 
NULL
;

113 
g
->
tmud©a
 = 
NULL
;

114 
	`£äûvÆue
(
	`gkey
(
g
->
dummynode
));

115 
	`£äûvÆue
(
	`gvÆ
(
g
->
dummynode
));

116 
g
->
dummynode
->
√xt
 = 
NULL
;

117 
g
->
nblocks
 = (
lua_Sèã
Ë+ (
globÆ_Sèã
);

118 
	`°ack_öô
(
L
, L);

120 
	`deÁu…mëa
(
L
)->
â
 = 
LUA_TTABLE
;

121 
	`£thvÆue
(
	`deÁu…mëa
(
L
), 
	`luaH_√w
(L, 0, 0));

122 
	`hvÆue
(
	`deÁu…mëa
(
L
))->
më©abÀ
 = hvalue(defaultmeta(L));

123 
	`£thvÆue
(
	`gt
(
L
), 
	`luaH_√w
(L, 0, 4));

124 
	`£thvÆue
(
	`ªgi°ry
(
L
), 
	`luaH_√w
(L, 4, 4));

125 
	`luaS_ªsize
(
L
, 
MINSTRTABSIZE
);

126 
	`luaT_öô
(
L
);

127 
	`luaX_öô
(
L
);

128 
	`luaS_fix
(
	`luaS_√wlôîÆ
(
L
, 
MEMERRMSG
));

129 
g
->
GCthªshﬁd
 = 4 * 
	`G
(
L
)->
nblocks
;

130 
	}
}

133 
	$¥eöô_°©e
(
lua_Sèã
 * 
L
)

135 
L
->
°ack
 = 
NULL
;

136 
L
->
°acksize
 = 0;

137 
L
->
îr‹Jmp
 = 
NULL
;

138 
L
->
hook
 = 
NULL
;

139 
L
->
hookmask
 = L->
hooköô
 = 0;

140 
L
->
ba£hookcou¡
 = 0;

141 
L
->
Ælowhook
 = 1;

142 
	`ª£thookcou¡
(
L
);

143 
L
->
›íupvÆ
 = 
NULL
;

144 
L
->
size_ci
 = 0;

145 
L
->
nCˇŒs
 = 0;

146 
L
->
ba£_ci
 = L->
ci
 = 
NULL
;

147 
L
->
îrfunc
 = 0;

148 
	`£äûvÆue
(
	`gt
(
L
));

149 
	}
}

152 
	$˛o£_°©e
(
lua_Sèã
 * 
L
)

154 
	`luaF_˛o£
(
L
, L->
°ack
);

155 i‡(
	`G
(
L
)) {

156 
	`luaC_swìp
(
L
, 1);

157 
	`lua_as£π
(
	`G
(
L
)->
roŸgc
 =
NULL
);

158 
	`lua_as£π
(
	`G
(
L
)->
roŸud©a
 =
NULL
);

159 
	`luaS_‰ìÆl
(
L
);

160 
	`luaZ_‰ìbuf„r
(
L
, &
	`G
(L)->
buff
);

162 
	`‰ì°ack
(
L
, L);

163 i‡(
	`G
(
L
)) {

164 
	`lua_as£π
(
	`G
(
L
)->
nblocks
 =(
lua_Sèã
Ë+ (
globÆ_Sèã
));

165 
	`luaM_‰ìÀm
(
NULL
, 
	`G
(
L
));

167 
	`‰ì°©e
(
NULL
, 
L
);

168 
	}
}

170 
lua_Sèã
 *

171 
	$luaE_√wthªad
(
lua_Sèã
 * 
L
)

173 
lua_Sèã
 *
L1
 = 
	`mÆloc°©e
(
L
);

174 
	`luaC_lök
(
L
, 
	`vÆtogco
(
L1
), 
LUA_TTHREAD
);

175 
	`¥eöô_°©e
(
L1
);

176 
L1
->
l_G
 = 
L
->l_G;

177 
	`°ack_öô
(
L1
, 
L
);

178 
	`£tobj2n
(
	`gt
(
L1
), gt(
L
));

179  
L1
;

180 
	}
}

183 
	$luaE_‰ìthªad
(
lua_Sèã
 * 
L
,Üua_Sèã * 
L1
)

185 
	`luaF_˛o£
(
L1
, L1->
°ack
);

186 
	`lua_as£π
(
L1
->
›íupvÆ
 =
NULL
);

187 
	`‰ì°ack
(
L
, 
L1
);

188 
	`‰ì°©e
(
L
, 
L1
);

189 
	}
}

191 
LUA_API
 
lua_Sèã
 *

192 
	$lua_›í
()

194 
lua_Sèã
 *
L
 = 
	`mÆloc°©e
(
NULL
);

195 i‡(
L
) {

196 
L
->
â
 = 
LUA_TTHREAD
;

197 
L
->
m¨ked
 = 0;

198 
L
->
√xt
 = L->
g˛i°
 = 
NULL
;

199 
	`¥eöô_°©e
(
L
);

200 
L
->
l_G
 = 
NULL
;

201 i‡(
	`luaD_øwru≈rŸe˘ed
(
L
, 
f_lua›í
, 
NULL
) != 0) {

203 
	`˛o£_°©e
(
L
);

204 
L
 = 
NULL
;

207 
	`lua_u£r°©e›í
(
L
);

208  
L
;

209 
	}
}

212 
	$ˇŒÆlgcTM
(
lua_Sèã
 * 
L
, *
ud
)

214 
	`UNUSED
(
ud
);

215 
	`luaC_ˇŒGCTM
(
L
);

216 
	}
}

218 
LUA_API
 

219 
	$lua_˛o£
(
lua_Sèã
 * 
L
)

221 
	`lua_lock
(
L
);

222 
L
 = 
	`G
(L)->
maöthªad
;

223 
	`luaF_˛o£
(
L
, L->
°ack
);

224 
	`luaC_£∑øãud©a
(
L
);

225 
L
->
îrfunc
 = 0;

227 
L
->
ci
 = L->
ba£_ci
;

228 
L
->
ba£
 = L->
t›
 = L->
ci
->base;

229 
L
->
nCˇŒs
 = 0;

231 
	`luaD_øwru≈rŸe˘ed
(
L
, 
ˇŒÆlgcTM
, 
NULL
) != 0);

232 
	`lua_as£π
(
	`G
(
L
)->
tmud©a
 =
NULL
);

233 
	`˛o£_°©e
(
L
);

234 
	}
}

	@lib/tas/src/lua/lstate.h

7 #i‚de‡
l°©e_h


8 
	#l°©e_h


	)

10 
	~"lua.h
"

12 
	~"lobje˘.h
"

13 
	~"…m.h
"

14 
	~"lzio.h
"

26 #i‚de‡
lua_lock


27 
	#lua_lock
(
L
Ë((Ë0)

	)

30 #i‚de‡
lua_u∆ock


31 
	#lua_u∆ock
(
L
Ë((Ë0)

	)

34 #i‚de‡
lua_u£r°©e›í


35 
	#lua_u£r°©e›í
(
l
)

	)

38 
	glua_l⁄gjmp
;

41 
	#deÁu…mëa
(
L
Ë(&
	`G
(L)->
_deÁu…mëa
)

	)

44 
	#gt
(
L
Ë(&L->
_gt
)

	)

47 
	#ªgi°ry
(
L
Ë(&
	`G
(L)->
_ªgi°ry
)

	)

50 
	#EXTRA_STACK
 5

	)

52 
	#BASIC_CI_SIZE
 8

	)

54 
	#BASIC_STACK_SIZE
 (2*
LUA_MINSTACK
)

	)

56 
	s°rögèbÀ
 {

57 
GCObje˘
 **
	mhash
;

58 
ls_n°r
 
	mnu£
;

59 
	msize
;

60 } 
	t°rögèbÀ
;

65 
	sCÆlInfo
 {

66 
StkId
 
	mba£
;

67 
StkId
 
	mt›
;

68 
	m°©e
;

71 c⁄° 
In°ru˘i⁄
 *
	mßvedpc
;

72 c⁄° 
In°ru˘i⁄
 **
	mpc
;

73 
	mèûˇŒs
;

74 } 
	ml
;

76 
	mdummy
;

77 } 
	mc
;

78 } 
	mu
;

79 } 
	tCÆlInfo
;

84 
	#CI_C
 (1<<0Ë

	)

87 
	#CI_HASFRAME
 (1<<1)

	)

91 
	#CI_CALLING
 (1<<2)

	)

92 
	#CI_SAVEDPC
 (1<<3Ë

	)

93 
	#CI_YIELD
 (1<<4Ë

	)

95 
	#ci_func
(
ci
Ë(
	`˛vÆue
((ci)->
ba£
 - 1))

	)

100 
	sglobÆ_Sèã
 {

101 
°rögèbÀ
 
	m°π
;

102 
GCObje˘
 *
	mroŸgc
;

103 
GCObje˘
 *
	mroŸud©a
;

104 
GCObje˘
 *
	mtmud©a
;

105 
Mbuf„r
 
	mbuff
;

106 
lu_mem
 
	mGCthªshﬁd
;

107 
lu_mem
 
	mnblocks
;

108 
lua_CFun˘i⁄
 
	m∑nic
;

109 
TObje˘
 
	m_ªgi°ry
;

110 
TObje˘
 
	m_deÁu…mëa
;

111 
lua_Sèã
 *
	mmaöthªad
;

112 
Node
 
	mdummynode
[1];

113 
TSåög
 *
	mtm«me
[
TM_N
];

114 } 
	tglobÆ_Sèã
;

119 
	slua_Sèã
 {

120 
	mComm⁄Hódî
;

121 
StkId
 
	mt›
;

122 
StkId
 
	mba£
;

123 
globÆ_Sèã
 *
	ml_G
;

124 
CÆlInfo
 *
	mci
;

125 
StkId
 
	m°ack_œ°
;

126 
StkId
 
	m°ack
;

127 
	m°acksize
;

128 
CÆlInfo
 *
	míd_ci
;

129 
CÆlInfo
 *
	mba£_ci
;

130 
	msize_ci
;

131 
	mnCˇŒs
;

132 
lu_byã
 
	mhookmask
;

133 
lu_byã
 
	mÆlowhook
;

134 
lu_byã
 
	mhooköô
;

135 
	mba£hookcou¡
;

136 
	mhookcou¡
;

137 
lua_Hook
 
	mhook
;

138 
TObje˘
 
	m_gt
;

139 
GCObje˘
 *
	m›íupvÆ
;

140 
GCObje˘
 *
	mg˛i°
;

141 
lua_l⁄gjmp
 *
	mîr‹Jmp
;

142 
±rdiff_t
 
	mîrfunc
;

145 
	#G
(
L
Ë(L->
l_G
)

	)

150 
	uGCObje˘
 {

151 
GChódî
 
	mgch
;

152 
TSåög
 
	mts
;

153 
Ud©a
 
	mu
;

154 
Closuª
 
	m˛
;

155 
TabÀ
 
	mh
;

156 
PrŸo
 
	mp
;

157 
UpVÆ
 
	muv
;

158 
lua_Sèã
 
	mth
;

162 
	#gcŸŸs
(
o
Ë
	`check_exp
((o)->
gch
.
â
 =
LUA_TSTRING
, &((o)->
ts
))

	)

163 
	#gcŸou
(
o
Ë
	`check_exp
((o)->
gch
.
â
 =
LUA_TUSERDATA
, &((o)->
u
))

	)

164 
	#gcŸo˛
(
o
Ë
	`check_exp
((o)->
gch
.
â
 =
LUA_TFUNCTION
, &((o)->
˛
))

	)

165 
	#gcŸoh
(
o
Ë
	`check_exp
((o)->
gch
.
â
 =
LUA_TTABLE
, &((o)->
h
))

	)

166 
	#gcŸ›
(
o
Ë
	`check_exp
((o)->
gch
.
â
 =
LUA_TPROTO
, &((o)->
p
))

	)

167 
	#gcŸouv
(
o
Ë
	`check_exp
((o)->
gch
.
â
 =
LUA_TUPVAL
, &((o)->
uv
))

	)

168 
	#ngcŸouv
(
o
) \

169 
	`check_exp
((
o
Ë=
NULL
 || (o)->
gch
.
â
 =
LUA_TUPVAL
, &((o)->
uv
))

	)

170 
	#gcŸŸh
(
o
Ë
	`check_exp
((o)->
gch
.
â
 =
LUA_TTHREAD
, &((o)->
th
))

	)

173 
	#vÆtogco
(
v
Ë(
	`ˇ°_Æign
(
GCObje˘
 *, (v)))

	)

175 
lua_Sèã
 *
luaE_√wthªad
÷ua_Sèã * 
L
);

176 
luaE_‰ìthªad
(
lua_Sèã
 * 
L
,Üua_Sèã * 
L1
);

	@lib/tas/src/lua/lstring.c

7 
	~<°rög.h
>

9 
	#l°rög_c


	)

11 
	~"lua.h
"

13 
	~"lmem.h
"

14 
	~"lobje˘.h
"

15 
	~"l°©e.h
"

16 
	~"l°rög.h
"

19 
	$luaS_‰ìÆl
(
lua_Sèã
 * 
L
)

21 
	`lua_as£π
(
	`G
(
L
)->
°π
.
nu£
 == 0);

22 
	`luaM_‰ì¨øy
(
L
, 
	`G
(L)->
°π
.
hash
, G(L)->°π.
size
, 
TSåög
 *);

23 
	}
}

26 
	$luaS_ªsize
(
lua_Sèã
 * 
L
, 
√wsize
)

28 
GCObje˘
 **
√whash
 = 
	`luaM_√wve˘‹
(
L
, 
√wsize
, GCObject *);

29 
°rögèbÀ
 *
tb
 = &
	`G
(
L
)->
°π
;

30 
i
;

31 
i
 = 0; i < 
√wsize
; i++)

32 
√whash
[
i
] = 
NULL
;

34 
i
 = 0; i < 
tb
->
size
; i++) {

35 
GCObje˘
 *
p
 = 
tb
->
hash
[
i
];

36 
p
) {

37 
GCObje˘
 *
√xt
 = 
p
->
gch
.next;

38 
lu_hash
 
h
 = 
	`gcŸŸs
(
p
)->
tsv
.
hash
;

39 
h1
 = 
	`lmod
(
h
, 
√wsize
);

40 
	`lua_as£π
(
	`ˇ°
(, 
h
 % 
√wsize
Ë=
	`lmod
(h,Çewsize));

41 
p
->
gch
.
√xt
 = 
√whash
[
h1
];

42 
√whash
[
h1
] = 
p
;

43 
p
 = 
√xt
;

46 
	`luaM_‰ì¨øy
(
L
, 
tb
->
hash
,Åb->
size
, 
TSåög
 *);

47 
tb
->
size
 = 
√wsize
;

48 
tb
->
hash
 = 
√whash
;

49 
	}
}

51 
TSåög
 *

52 
	$√wl°r
(
lua_Sèã
 * 
L
, c⁄° *
°r
, 
size_t
 
l
, 
lu_hash
 
h
)

54 
TSåög
 *
ts
 = 
	`ˇ°
(TSåög *, 
	`luaM_mÆloc
(
L
, 
	`size°rög
(
l
)));

55 
°rögèbÀ
 *
tb
;

56 
ts
->
tsv
.
Àn
 = 
l
;

57 
ts
->
tsv
.
hash
 = 
h
;

58 
ts
->
tsv
.
m¨ked
 = 0;

59 
ts
->
tsv
.
â
 = 
LUA_TSTRING
;

60 
ts
->
tsv
.
ª£rved
 = 0;

61 
	`mem˝y
(
ts
 + 1, 
°r
, 
l
 * ());

62 ((*)(
ts
 + 1))[
l
] = '\0';

63 
tb
 = &
	`G
(
L
)->
°π
;

64 
h
 = 
	`lmod
(h, 
tb
->
size
);

65 
ts
->
tsv
.
√xt
 = 
tb
->
hash
[
h
];

66 
tb
->
hash
[
h
] = 
	`vÆtogco
(
ts
);

67 
tb
->
nu£
++;

68 i‡(
tb
->
nu£
 > 
	`ˇ°
(
ls_n°r
,Åb->
size
Ë&&Åb->sizê<
MAX_INT
 / 2)

69 
	`luaS_ªsize
(
L
, 
tb
->
size
 * 2);

70  
ts
;

71 
	}
}

73 
TSåög
 *

74 
	$luaS_√wl°r
(
lua_Sèã
 * 
L
, c⁄° *
°r
, 
size_t
 
l
)

76 
GCObje˘
 *
o
;

77 
lu_hash
 
h
 = (lu_hashË
l
;

78 
size_t
 
°ï
 = (
l
 >> 5) + 1;

79 
size_t
 
l1
;

80 
l1
 = 
l
;Ü1 >
°ï
;Ü1 -= step)

81 
h
 = h ^ ((h << 5Ë+ (h >> 2Ë+ ()(
°r
[
l1
 - 1]));

82 
o
 = 
	`G
(
L
)->
°π
.
hash
[
	`lmod
(
h
, G(L)->°π.
size
)]; o !
NULL
; o = o->
gch
.
√xt
) {

83 
TSåög
 *
ts
 = 
	`gcŸŸs
(
o
);

84 i‡(
ts
->
tsv
.
Àn
 =
l
 && (
	`memcmp
(
°r
, 
	`gë°r
(ts),Ü) == 0))

85  
ts
;

87  
	`√wl°r
(
L
, 
°r
, 
l
, 
h
);

88 
	}
}

90 
Ud©a
 *

91 
	$luaS_√wud©a
(
lua_Sèã
 * 
L
, 
size_t
 
s
)

93 
Ud©a
 *
u
;

94 
u
 = 
	`ˇ°
(
Ud©a
 *, 
	`luaM_mÆloc
(
L
, 
	`sizeud©a
(
s
)));

95 
u
->
uv
.
m¨ked
 = (1 << 1);

96 
u
->
uv
.
â
 = 
LUA_TUSERDATA
;

97 
u
->
uv
.
Àn
 = 
s
;

98 
u
->
uv
.
më©abÀ
 = 
	`hvÆue
(
	`deÁu…mëa
(
L
));

100 
u
->
uv
.
√xt
 = 
	`G
(
L
)->
roŸud©a
;

101 
	`G
(
L
)->
roŸud©a
 = 
	`vÆtogco
(
u
);

102  
u
;

103 
	}
}

	@lib/tas/src/lua/lstring.h

7 #i‚de‡
l°rög_h


8 
	#l°rög_h


	)

10 
	~"lobje˘.h
"

11 
	~"l°©e.h
"

13 
	#size°rög
(
l
Ë(
	`ˇ°
(
lu_mem
, (
TSåög
))+ \

14 (
	`ˇ°
(
lu_mem
, 
l
)+1)*())

	)

16 
	#sizeud©a
(
l
Ë(
	`ˇ°
(
lu_mem
, (
Ud©a
))+÷))

	)

18 
	#luaS_√w
(
L
, 
s
Ë(
	`luaS_√wl°r
(L, s, 
	`°æí
(s)))

	)

19 
	#luaS_√wlôîÆ
(
L
, 
s
Ë(
	`luaS_√wl°r
(L, "" s, \

20 ((
s
)/())-1))

	)

22 
	#luaS_fix
(
s
Ë((s)->
tsv
.
m¨ked
 |(1<<4))

	)

24 
luaS_ªsize
(
lua_Sèã
 * 
L
, 
√wsize
);

25 
Ud©a
 *
luaS_√wud©a
(
lua_Sèã
 * 
L
, 
size_t
 
s
);

26 
luaS_‰ìÆl
(
lua_Sèã
 * 
L
);

27 
TSåög
 *
luaS_√wl°r
(
lua_Sèã
 * 
L
, c⁄° *
°r
, 
size_t
 
l
);

	@lib/tas/src/lua/lstrlib.c

7 
	~<˘y≥.h
>

8 
	~<°ddef.h
>

9 
	~<°dio.h
>

10 
	~<°dlib.h
>

11 
	~<°rög.h
>

13 
	#l°æib_c


	)

15 
	~"lua.h
"

17 
	~"œuxlib.h
"

18 
	~"luÆib.h
"

21 #i‚de‡
uch¨


22 
	#uch¨
(
c
Ë(()(c))

	)

25 
	tsöt32
;

28 
	$°r_Àn
(
lua_Sèã
 * 
L
)

30 
size_t
 
l
;

31 
	`luaL_checkl°rög
(
L
, 1, &
l
);

32 
	`lua_pushnumbî
(
L
, (
lua_Numbî
Ë
l
);

34 
	}
}

36 
söt32


37 
	$po§ñ©
(
söt32
 
pos
, 
size_t
 
Àn
)

40  (
pos
 >0Ë?Öo†: (
söt32
Ë
Àn
 +Öos + 1;

41 
	}
}

44 
	$°r_sub
(
lua_Sèã
 * 
L
)

46 
size_t
 
l
;

47 c⁄° *
s
 = 
	`luaL_checkl°rög
(
L
, 1, &
l
);

48 
söt32
 
°¨t
 = 
	`po§ñ©
(
	`luaL_checkl⁄g
(
L
, 2), 
l
);

49 
söt32
 
íd
 = 
	`po§ñ©
(
	`luaL_›é⁄g
(
L
, 3, -1), 
l
);

50 i‡(
°¨t
 < 1)

51 
°¨t
 = 1;

52 i‡(
íd
 > (
söt32
Ë
l
)

53 
íd
 = (
söt32
Ë
l
;

54 i‡(
°¨t
 <
íd
)

55 
	`lua_pushl°rög
(
L
, 
s
 + 
°¨t
 - 1, 
íd
 - start + 1);

57 
	`lua_pushlôîÆ
(
L
, "");

59 
	}
}

62 
	$°r_lowî
(
lua_Sèã
 * 
L
)

64 
size_t
 
l
;

65 
size_t
 
i
;

66 
luaL_Buf„r
 
b
;

67 c⁄° *
s
 = 
	`luaL_checkl°rög
(
L
, 1, &
l
);

68 
	`luaL_bufföô
(
L
, &
b
);

69 
i
 = 0; i < 
l
; i++)

70 
	`luaL_putch¨
(&
b
, 
	`tﬁowî
(
	`uch¨
(
s
[
i
])));

71 
	`luaL_pushªsu…
(&
b
);

73 
	}
}

76 
	$°r_uµî
(
lua_Sèã
 * 
L
)

78 
size_t
 
l
;

79 
size_t
 
i
;

80 
luaL_Buf„r
 
b
;

81 c⁄° *
s
 = 
	`luaL_checkl°rög
(
L
, 1, &
l
);

82 
	`luaL_bufföô
(
L
, &
b
);

83 
i
 = 0; i < 
l
; i++)

84 
	`luaL_putch¨
(&
b
, 
	`touµî
(
	`uch¨
(
s
[
i
])));

85 
	`luaL_pushªsu…
(&
b
);

87 
	}
}

90 
	$°r_ªp
(
lua_Sèã
 * 
L
)

92 
size_t
 
l
;

93 
luaL_Buf„r
 
b
;

94 c⁄° *
s
 = 
	`luaL_checkl°rög
(
L
, 1, &
l
);

95 
n
 = 
	`luaL_checköt
(
L
, 2);

96 
	`luaL_bufföô
(
L
, &
b
);

97 
n
-- > 0)

98 
	`luaL_addl°rög
(&
b
, 
s
, 
l
);

99 
	`luaL_pushªsu…
(&
b
);

101 
	}
}

104 
	$°r_byã
(
lua_Sèã
 * 
L
)

106 
size_t
 
l
;

107 c⁄° *
s
 = 
	`luaL_checkl°rög
(
L
, 1, &
l
);

108 
söt32
 
pos
 = 
	`po§ñ©
(
	`luaL_›é⁄g
(
L
, 2, 1), 
l
);

109 i‡(
pos
 <0 || (
size_t
Ë’osË> 
l
)

111 
	`lua_pushnumbî
(
L
, 
	`uch¨
(
s
[
pos
 - 1]));

113 
	}
}

116 
	$°r_ch¨
(
lua_Sèã
 * 
L
)

118 
n
 = 
	`lua_gët›
(
L
);

119 
i
;

120 
luaL_Buf„r
 
b
;

121 
	`luaL_bufföô
(
L
, &
b
);

122 
i
 = 1; i <
n
; i++) {

123 
c
 = 
	`luaL_checköt
(
L
, 
i
);

124 
	`luaL_¨gcheck
(
L
, 
	`uch¨
(
c
Ë=c, 
i
, "invalid value");

125 
	`luaL_putch¨
(&
b
, 
	`uch¨
(
c
));

127 
	`luaL_pushªsu…
(&
b
);

129 
	}
}

132 
	$wrôî
(
lua_Sèã
 * 
L
, c⁄° *
b
, 
size_t
 
size
, *
B
)

134 ()
L
;

135 
	`luaL_addl°rög
((
luaL_Buf„r
 *Ë
B
, (c⁄° *)
b
, 
size
);

137 
	}
}

140 
	$°r_dump
(
lua_Sèã
 * 
L
)

142 
luaL_Buf„r
 
b
;

143 
	`luaL_checkty≥
(
L
, 1, 
LUA_TFUNCTION
);

144 
	`luaL_bufföô
(
L
, &
b
);

145 i‡(!
	`lua_dump
(
L
, 
wrôî
, &
b
))

146 
	`luaL_îr‹
(
L
, "unableÅo dump given function");

147 
	`luaL_pushªsu…
(&
b
);

149 
	}
}

157 #i‚de‡
MAX_CAPTURES


158 
	#MAX_CAPTURES
 32

	)

161 
	#CAP_UNFINISHED
 (-1)

	)

162 
	#CAP_POSITION
 (-2)

	)

164 
	sM©chSèã
 {

165 c⁄° *
	m§c_öô
;

166 c⁄° *
	m§c_íd
;

167 
lua_Sèã
 *
	mL
;

168 
	mÀvñ
;

170 c⁄° *
	möô
;

171 
söt32
 
	mÀn
;

172 } 
	mˇ±uª
[
MAX_CAPTURES
];

173 } 
	tM©chSèã
;

175 
	#ESC
 '%'

	)

176 
	#SPECIALS
 "^$*+?.([%-"

	)

179 
	$check_ˇ±uª
(
M©chSèã
 * 
ms
, 
l
)

181 
l
 -= '1';

182 i‡(
l
 < 0 ||Ü >
ms
->
Àvñ
 || ms->
ˇ±uª
[l].
Àn
 =
CAP_UNFINISHED
)

183  
	`luaL_îr‹
(
ms
->
L
, "invalid capture index");

184  
l
;

185 
	}
}

188 
	$ˇ±uª_to_˛o£
(
M©chSèã
 * 
ms
)

190 
Àvñ
 = 
ms
->level;

191 
Àvñ
--;Üevel >= 0;Üevel--)

192 i‡(
ms
->
ˇ±uª
[
Àvñ
].
Àn
 =
CAP_UNFINISHED
)

193  
Àvñ
;

194  
	`luaL_îr‹
(
ms
->
L
, "invalidÖattern capture");

195 
	}
}

198 
	$luaI_˛as£nd
(
M©chSèã
 * 
ms
, c⁄° *
p
)

200 *
p
++) {

201 
ESC
:

203 i‡(*
p
 == '\0')

204 
	`luaL_îr‹
(
ms
->
L
, "malformedÖattern (ends with `%')");

205  
p
 + 1;

209 i‡(*
p
 == '^')

210 
p
++;

212 i‡(*
p
 == '\0')

213 
	`luaL_îr‹
(
ms
->
L
, "malformedÖattern (missing `]')");

214 i‡(*(
p
++Ë=
ESC
 && *p != '\0')

215 
p
++;

217 *
p
 != ']');

218  
p
 + 1;

222  
p
;

225 
	}
}

228 
	$m©ch_˛ass
(
c
, 
˛
)

230 
ªs
;

231 
	`tﬁowî
(
˛
)) {

233 
ªs
 = 
	`ißÕha
(
c
);

236 
ªs
 = 
	`is˙ål
(
c
);

239 
ªs
 = 
	`isdigô
(
c
);

242 
ªs
 = 
	`i¶owî
(
c
);

245 
ªs
 = 
	`i•un˘
(
c
);

248 
ªs
 = 
	`is•a˚
(
c
);

251 
ªs
 = 
	`isuµî
(
c
);

254 
ªs
 = 
	`iß um
(
c
);

257 
ªs
 = 
	`isxdigô
(
c
);

260 
ªs
 = (
c
 == 0);

263  (
˛
 =
c
);

265  (
	`i¶owî
(
˛
Ë? 
ªs
 : !res);

266 
	}
}

269 
	$m©chbøckë˛ass
(
c
, c⁄° *
p
, c⁄° *
ec
)

271 
sig
 = 1;

272 i‡(*(
p
 + 1) == '^') {

273 
sig
 = 0;

274 
p
++;

276 ++
p
 < 
ec
) {

277 i‡(*
p
 =
ESC
) {

278 
p
++;

279 i‡(
	`m©ch_˛ass
(
c
, *
p
))

280  
sig
;

281 } i‡((*(
p
 + 1Ë='-'Ë&& (∞+ 2 < 
ec
)) {

282 
p
 += 2;

283 i‡(
	`uch¨
(*(
p
 - 2)Ë<
c
 && c <= uchar(*p))

284  
sig
;

285 } i‡(
	`uch¨
(*
p
Ë=
c
)

286  
sig
;

288  !
sig
;

289 
	}
}

292 
	$luaI_sögÀm©ch
(
c
, c⁄° *
p
, c⁄° *
ï
)

294 *
p
) {

297 
ESC
:

298  
	`m©ch_˛ass
(
c
, *(
p
 + 1));

300  
	`m©chbøckë˛ass
(
c
, 
p
, 
ï
 - 1);

302  (
	`uch¨
(*
p
Ë=
c
);

304 
	}
}

306 c⁄° *
m©ch
(
M©chSèã
 * 
ms
, c⁄° *
s
, c⁄° *
p
);

309 
	$m©chbÆ™˚
(
M©chSèã
 * 
ms
, c⁄° *
s
, c⁄° *
p
)

311 i‡(*
p
 == 0 || *(p + 1) == 0)

312 
	`luaL_îr‹
(
ms
->
L
, "unbalancedÖattern");

313 i‡(*
s
 !*
p
)

314  
NULL
;

316 
b
 = *
p
;

317 
e
 = *(
p
 + 1);

318 
c⁄t
 = 1;

319 ++
s
 < 
ms
->
§c_íd
) {

320 i‡(*
s
 =
e
) {

321 i‡(--
c⁄t
 == 0)

322  
s
 + 1;

323 } i‡(*
s
 =
b
)

324 
c⁄t
++;

327  
NULL
;

328 
	}
}

331 
	$max_ex∑nd
(
M©chSèã
 * 
ms
, c⁄° *
s
, c⁄° *
p
, c⁄° *
ï
)

333 
söt32
 
i
 = 0;

334 (
s
 + 
i
Ë< 
ms
->
§c_íd
 && 
	`luaI_sögÀm©ch
(
	`uch¨
(*(†+ i)), 
p
, 
ï
))

335 
i
++;

337 
i
 >= 0) {

338 c⁄° *
ªs
 = 
	`m©ch
(
ms
, (
s
 + 
i
), 
ï
 + 1);

339 i‡(
ªs
)

340  
ªs
;

341 
i
--;

343  
NULL
;

344 
	}
}

347 
	$mö_ex∑nd
(
M©chSèã
 * 
ms
, c⁄° *
s
, c⁄° *
p
, c⁄° *
ï
)

350 c⁄° *
ªs
 = 
	`m©ch
(
ms
, 
s
, 
ï
 + 1);

351 i‡(
ªs
 !
NULL
)

352  
ªs
;

353 i‡(
s
 < 
ms
->
§c_íd
 && 
	`luaI_sögÀm©ch
(
	`uch¨
(*s), 
p
, 
ï
))

354 
s
++;

356  
NULL
;

358 
	}
}

361 
	$°¨t_ˇ±uª
(
M©chSèã
 * 
ms
, c⁄° *
s
, c⁄° *
p
, 
wh©
)

363 c⁄° *
ªs
;

364 
Àvñ
 = 
ms
->level;

365 i‡(
Àvñ
 >
MAX_CAPTURES
)

366 
	`luaL_îr‹
(
ms
->
L
, "too many captures");

367 
ms
->
ˇ±uª
[
Àvñ
].
öô
 = 
s
;

368 
ms
->
ˇ±uª
[
Àvñ
].
Àn
 = 
wh©
;

369 
ms
->
Àvñ
 =Üevel + 1;

370 i‡((
ªs
 = 
	`m©ch
(
ms
, 
s
, 
p
)Ë=
NULL
)

371 
ms
->
Àvñ
--;

372  
ªs
;

373 
	}
}

376 
	$íd_ˇ±uª
(
M©chSèã
 * 
ms
, c⁄° *
s
, c⁄° *
p
)

378 
l
 = 
	`ˇ±uª_to_˛o£
(
ms
);

379 c⁄° *
ªs
;

380 
ms
->
ˇ±uª
[
l
].
Àn
 = 
s
 - ms->ˇ±uª[l].
öô
;

381 i‡((
ªs
 = 
	`m©ch
(
ms
, 
s
, 
p
)Ë=
NULL
)

382 
ms
->
ˇ±uª
[
l
].
Àn
 = 
CAP_UNFINISHED
;

383  
ªs
;

384 
	}
}

387 
	$m©ch_ˇ±uª
(
M©chSèã
 * 
ms
, c⁄° *
s
, 
l
)

389 
size_t
 
Àn
;

390 
l
 = 
	`check_ˇ±uª
(
ms
,Ü);

391 
Àn
 = 
ms
->
ˇ±uª
[
l
].len;

392 i‡((
size_t
Ë(
ms
->
§c_íd
 - 
s
Ë>
Àn
 && 
	`memcmp
(ms->
ˇ±uª
[
l
].
öô
, s,Üen) == 0)

393  
s
 + 
Àn
;

395  
NULL
;

396 
	}
}

399 
	$m©ch
(
M©chSèã
 * 
ms
, c⁄° *
s
, c⁄° *
p
)

401 
öô
:

402 *
p
) {

405 i‡(*(
p
 + 1) == ')')

406  
	`°¨t_ˇ±uª
(
ms
, 
s
, 
p
 + 2, 
CAP_POSITION
);

408  
	`°¨t_ˇ±uª
(
ms
, 
s
, 
p
 + 1, 
CAP_UNFINISHED
);

412  
	`íd_ˇ±uª
(
ms
, 
s
, 
p
 + 1);

414 
ESC
:

416 *(
p
 + 1)) {

419 
s
 = 
	`m©chbÆ™˚
(
ms
, s, 
p
 + 2);

420 i‡(
s
 =
NULL
)

421  
NULL
;

422 
p
 += 4;

423 
öô
;

427 c⁄° *
ï
;

428 
¥evious
;

429 
p
 += 2;

430 i‡(*
p
 != '[')

431 
	`luaL_îr‹
(
ms
->
L
, "missing `['áfter `%%f' inÖattern");

432 
ï
 = 
	`luaI_˛as£nd
(
ms
, 
p
);

433 
¥evious
 = (
s
 =
ms
->
§c_öô
) ? '\0' : *(s - 1);

434 i‡(
	`m©chbøckë˛ass
(
	`uch¨
(
¥evious
), 
p
, 
ï
 - 1Ë|| !m©chbøckë˛ass(uch¨(*
s
),Ö,Ép - 1))

435  
NULL
;

436 
p
 = 
ï
;

437 
öô
;

441 i‡(
	`isdigô
(
	`uch¨
(*(
p
 + 1)))) {

442 
s
 = 
	`m©ch_ˇ±uª
(
ms
, s, *(
p
 + 1));

443 i‡(
s
 =
NULL
)

444  
NULL
;

445 
p
 += 2;

446 
öô
;

448 
dÊt
;

454  
s
;

458 i‡(*(
p
 + 1) == '\0')

459  (
s
 =
ms
->
§c_íd
Ë? s : 
NULL
;

461 
dÊt
;

464 
dÊt
:{

465 c⁄° *
ï
 = 
	`luaI_˛as£nd
(
ms
, 
p
);

466 
m
 = 
s
 < 
ms
->
§c_íd
 && 
	`luaI_sögÀm©ch
(
	`uch¨
(*s), 
p
, 
ï
);

467 *
ï
) {

470 c⁄° *
ªs
;

471 i‡(
m
 && ((
ªs
 = 
	`m©ch
(
ms
, 
s
 + 1, 
ï
 + 1)Ë!
NULL
))

472  
ªs
;

473 
p
 = 
ï
 + 1;

474 
öô
;

478  
	`max_ex∑nd
(
ms
, 
s
, 
p
, 
ï
);

482  (
m
 ? 
	`max_ex∑nd
(
ms
, 
s
 + 1, 
p
, 
ï
Ë: 
NULL
);

486  
	`mö_ex∑nd
(
ms
, 
s
, 
p
, 
ï
);

490 i‡(!
m
)

491  
NULL
;

492 
s
++;

493 
p
 = 
ï
;

494 
öô
;

499 
	}
}

502 
	$lmemföd
(c⁄° *
s1
, 
size_t
 
l1
, c⁄° *
s2
, size_à
l2
)

504 i‡(
l2
 == 0)

505  
s1
;

506 i‡(
l2
 > 
l1
)

507  
NULL
;

509 c⁄° *
öô
;

510 
l2
--;

511 
l1
 =Ü1 - 
l2
;

512 
l1
 > 0 && (
öô
 = (c⁄° *)
	`memchr
(
s1
, *
s2
,Ü1)Ë!
NULL
) {

513 
öô
++;

514 i‡(
	`memcmp
(
öô
, 
s2
 + 1, 
l2
) == 0)

515  
öô
 - 1;

517 
l1
 -
öô
 - 
s1
;

518 
s1
 = 
öô
;

521  
NULL
;

523 
	}
}

526 
	$push_⁄eˇ±uª
(
M©chSèã
 * 
ms
, 
i
)

528 
l
 = 
ms
->
ˇ±uª
[
i
].
Àn
;

529 i‡(
l
 =
CAP_UNFINISHED
)

530 
	`luaL_îr‹
(
ms
->
L
, "unfinished capture");

531 i‡(
l
 =
CAP_POSITION
)

532 
	`lua_pushnumbî
(
ms
->
L
, (
lua_Numbî
Ë(ms->
ˇ±uª
[
i
].
öô
 - ms->
§c_öô
 + 1));

534 
	`lua_pushl°rög
(
ms
->
L
, ms->
ˇ±uª
[
i
].
öô
, 
l
);

535 
	}
}

538 
	$push_ˇ±uªs
(
M©chSèã
 * 
ms
, c⁄° *
s
, c⁄° *
e
)

540 
i
;

541 
	`luaL_check°ack
(
ms
->
L
, ms->
Àvñ
, "too many captures");

542 i‡(
ms
->
Àvñ
 =0 && 
s
) {

543 
	`lua_pushl°rög
(
ms
->
L
, 
s
, 
e
 - s);

546 
i
 = 0; i < 
ms
->
Àvñ
; i++)

547 
	`push_⁄eˇ±uª
(
ms
, 
i
);

548  
ms
->
Àvñ
;

550 
	}
}

553 
	$°r_föd
(
lua_Sèã
 * 
L
)

555 
size_t
 
l1
, 
l2
;

556 c⁄° *
s
 = 
	`luaL_checkl°rög
(
L
, 1, &
l1
);

557 c⁄° *
p
 = 
	`luaL_checkl°rög
(
L
, 2, &
l2
);

558 
söt32
 
öô
 = 
	`po§ñ©
(
	`luaL_›é⁄g
(
L
, 3, 1), 
l1
) - 1;

559 i‡(
öô
 < 0)

560 
öô
 = 0;

561 i‡((
size_t
Ë(
öô
Ë> 
l1
)

562 
öô
 = (
söt32
Ë
l1
;

563 i‡(
	`lua_toboﬁón
(
L
, 4) ||

564 
	`°Ωbrk
(
p
, 
SPECIALS
Ë=
NULL
) {

566 c⁄° *
s2
 = 
	`lmemföd
(
s
 + 
öô
, 
l1
 - inô, 
p
, 
l2
);

567 i‡(
s2
) {

568 
	`lua_pushnumbî
(
L
, (
lua_Numbî
Ë(
s2
 - 
s
 + 1));

569 
	`lua_pushnumbî
(
L
, (
lua_Numbî
Ë(
s2
 - 
s
 + 
l2
));

573 
M©chSèã
 
ms
;

574 
™ch‹
 = (*
p
 == '^') ? (p++, 1) : 0;

575 c⁄° *
s1
 = 
s
 + 
öô
;

576 
ms
.
L
 = L;

577 
ms
.
§c_öô
 = 
s
;

578 
ms
.
§c_íd
 = 
s
 + 
l1
;

580 c⁄° *
ªs
;

581 
ms
.
Àvñ
 = 0;

582 i‡((
ªs
 = 
	`m©ch
(&
ms
, 
s1
, 
p
)Ë!
NULL
) {

583 
	`lua_pushnumbî
(
L
, (
lua_Numbî
Ë(
s1
 - 
s
 + 1));

584 
	`lua_pushnumbî
(
L
, (
lua_Numbî
Ë(
ªs
 - 
s
));

585  
	`push_ˇ±uªs
(&
ms
, 
NULL
, 0) + 2;

588 
s1
++ < 
ms
.
§c_íd
 && !
™ch‹
);

590 
	`lua_pushnû
(
L
);

592 
	}
}

595 
	$gföd_aux
(
lua_Sèã
 * 
L
)

597 
M©chSèã
 
ms
;

598 c⁄° *
s
 = 
	`lua_to°rög
(
L
, 
	`lua_upvÆueödex
(1));

599 
size_t
 
ls
 = 
	`lua_°æí
(
L
, 
	`lua_upvÆueödex
(1));

600 c⁄° *
p
 = 
	`lua_to°rög
(
L
, 
	`lua_upvÆueödex
(2));

601 
idx3
 = 
	`lua_t⁄umbî
(
L
, 
	`lua_upvÆueödex
(3));

602 c⁄° *
§c
;

603 
ms
.
L
 = L;

604 
ms
.
§c_öô
 = 
s
;

605 
ms
.
§c_íd
 = 
s
 + 
ls
;

606 
§c
 = 
s
 + 
idx3
; sr¯<
ms
.
§c_íd
; src++) {

607 c⁄° *
e
;

608 
ms
.
Àvñ
 = 0;

609 i‡((
e
 = 
	`m©ch
(&
ms
, 
§c
, 
p
)Ë!
NULL
) {

610 
√w°¨t
 = 
e
 - 
s
;

611 i‡(
e
 =
§c
)

612 
√w°¨t
++;

613 
	`lua_pushnumbî
(
L
, (
lua_Numbî
Ë
√w°¨t
);

614 
	`lua_ª∂a˚
(
L
, 
	`lua_upvÆueödex
(3));

615  
	`push_ˇ±uªs
(&
ms
, 
§c
, 
e
);

619 
	}
}

622 
	$gföd
(
lua_Sèã
 * 
L
)

624 
	`luaL_check°rög
(
L
, 1);

625 
	`luaL_check°rög
(
L
, 2);

626 
	`lua_£â›
(
L
, 2);

627 
	`lua_pushnumbî
(
L
, 0);

628 
	`lua_pushc˛osuª
(
L
, 
gföd_aux
, 3);

630 
	}
}

633 
	$add_s
(
M©chSèã
 * 
ms
, 
luaL_Buf„r
 * 
b
, c⁄° *
s
, c⁄° *
e
)

635 
lua_Sèã
 *
L
 = 
ms
->L;

636 i‡(
	`lua_is°rög
(
L
, 3)) {

637 c⁄° *
√ws
 = 
	`lua_to°rög
(
L
, 3);

638 
size_t
 
l
 = 
	`lua_°æí
(
L
, 3);

639 
size_t
 
i
;

640 
i
 = 0; i < 
l
; i++) {

641 i‡(
√ws
[
i
] !
ESC
)

642 
	`luaL_putch¨
(
b
, 
√ws
[
i
]);

644 
i
++;

645 i‡(!
	`isdigô
(
	`uch¨
(
√ws
[
i
])))

646 
	`luaL_putch¨
(
b
, 
√ws
[
i
]);

648 
Àvñ
 = 
	`check_ˇ±uª
(
ms
, 
√ws
[
i
]);

649 
	`push_⁄eˇ±uª
(
ms
, 
Àvñ
);

650 
	`luaL_addvÆue
(
b
);

655 
n
;

656 
	`lua_pushvÆue
(
L
, 3);

657 
n
 = 
	`push_ˇ±uªs
(
ms
, 
s
, 
e
);

658 
	`lua_ˇŒ
(
L
, 
n
, 1);

659 i‡(
	`lua_is°rög
(
L
, -1))

660 
	`luaL_addvÆue
(
b
);

662 
	`lua_p›
(
L
, 1);

664 
	}
}

667 
	$°r_gsub
(
lua_Sèã
 * 
L
)

669 
size_t
 
§˛
;

670 c⁄° *
§c
 = 
	`luaL_checkl°rög
(
L
, 1, &
§˛
);

671 c⁄° *
p
 = 
	`luaL_check°rög
(
L
, 2);

672 
max_s
 = 
	`luaL_›töt
(
L
, 4, 
§˛
 + 1);

673 
™ch‹
 = (*
p
 == '^') ? (p++, 1) : 0;

674 
n
 = 0;

675 
M©chSèã
 
ms
;

676 
luaL_Buf„r
 
b
;

677 
	`luaL_¨gcheck
(
L
, 
	`lua_gët›
(LË>3 && (
	`lua_is°rög
(L, 3Ë|| 
	`lua_isfun˘i⁄
(L, 3)), 3, "string or functionÉxpected");

678 
	`luaL_bufföô
(
L
, &
b
);

679 
ms
.
L
 = L;

680 
ms
.
§c_öô
 = 
§c
;

681 
ms
.
§c_íd
 = 
§c
 + 
§˛
;

682 
n
 < 
max_s
) {

683 c⁄° *
e
;

684 
ms
.
Àvñ
 = 0;

685 
e
 = 
	`m©ch
(&
ms
, 
§c
, 
p
);

686 i‡(
e
) {

687 
n
++;

688 
	`add_s
(&
ms
, &
b
, 
§c
, 
e
);

690 i‡(
e
 &&É > 
§c
)

691 
§c
 = 
e
;

692 i‡(
§c
 < 
ms
.
§c_íd
)

693 
	`luaL_putch¨
(&
b
, *
§c
++);

696 i‡(
™ch‹
)

699 
	`luaL_addl°rög
(&
b
, 
§c
, 
ms
.
§c_íd
 - src);

700 
	`luaL_pushªsu…
(&
b
);

701 
	`lua_pushnumbî
(
L
, (
lua_Numbî
Ë
n
);

703 
	}
}

708 
	#MAX_ITEM
 512

	)

711 
	#MAX_FORMAT
 20

	)

714 
	$luaI_addquŸed
(
lua_Sèã
 * 
L
, 
luaL_Buf„r
 * 
b
, 
¨g
)

716 
size_t
 
l
;

717 c⁄° *
s
 = 
	`luaL_checkl°rög
(
L
, 
¨g
, &
l
);

718 
	`luaL_putch¨
(
b
, '"');

719 
l
--) {

720 *
s
) {

725 
	`luaL_putch¨
(
b
, '\\');

726 
	`luaL_putch¨
(
b
, *
s
);

731 
	`luaL_addl°rög
(
b
, "\\000", 4);

736 
	`luaL_putch¨
(
b
, *
s
);

740 
s
++;

742 
	`luaL_putch¨
(
b
, '"');

743 
	}
}

746 
	$sˇnf‹m©
(
lua_Sèã
 * 
L
, c⁄° *
°r‰mt
, *
f‹m
, *
ha•ªcisi⁄
)

748 c⁄° *
p
 = 
°r‰mt
;

749 
	`°rchr
("-+ #0", *
p
))

750 
p
++;

751 i‡(
	`isdigô
(
	`uch¨
(*
p
)))

752 
p
++;

753 i‡(
	`isdigô
(
	`uch¨
(*
p
)))

754 
p
++;

755 i‡(*
p
 == '.') {

756 
p
++;

757 *
ha•ªcisi⁄
 = 1;

758 i‡(
	`isdigô
(
	`uch¨
(*
p
)))

759 
p
++;

760 i‡(
	`isdigô
(
	`uch¨
(*
p
)))

761 
p
++;

763 i‡(
	`isdigô
(
	`uch¨
(*
p
)))

764 
	`luaL_îr‹
(
L
, "invalid format (width orÖrecisionÅooÜong)");

765 i‡(
p
 - 
°r‰mt
 + 2 > 
MAX_FORMAT
)

766 
	`luaL_îr‹
(
L
, "invalid format (tooÜong)");

767 
f‹m
[0] = '%';

768 
	`°∫˝y
(
f‹m
 + 1, 
°r‰mt
, 
p
 - strfrmt + 1);

769 
f‹m
[
p
 - 
°r‰mt
 + 2] = 0;

770  
p
;

771 
	}
}

774 
	$°r_f‹m©
(
lua_Sèã
 * 
L
)

776 
¨g
 = 1;

777 
size_t
 
sÊ
;

778 c⁄° *
°r‰mt
 = 
	`luaL_checkl°rög
(
L
, 
¨g
, &
sÊ
);

779 c⁄° *
°r‰mt_íd
 = 
°r‰mt
 + 
sÊ
;

780 
luaL_Buf„r
 
b
;

781 
	`luaL_bufföô
(
L
, &
b
);

782 
°r‰mt
 < 
°r‰mt_íd
) {

783 i‡(*
°r‰mt
 != '%')

784 
	`luaL_putch¨
(&
b
, *
°r‰mt
++);

785 i‡(*++
°r‰mt
 == '%')

786 
	`luaL_putch¨
(&
b
, *
°r‰mt
++);

788 
f‹m
[
MAX_FORMAT
];

789 
buff
[
MAX_ITEM
];

790 
ha•ªcisi⁄
 = 0;

791 i‡(
	`isdigô
(
	`uch¨
(*
°r‰mt
)) && *(strfrmt + 1) == '$')

792  
	`luaL_îr‹
(
L
, "obsolete option (d$)Åo `format'");

793 
¨g
++;

794 
°r‰mt
 = 
	`sˇnf‹m©
(
L
, så‰mt, 
f‹m
, &
ha•ªcisi⁄
);

795 *
°r‰mt
++) {

800 
	`•rötf
(
buff
, 
f‹m
, 
	`luaL_checköt
(
L
, 
¨g
));

808 c⁄° 
n
 = 
	`luaL_checknumbî
(
L
, 
¨g
);

809 
	`•rötf
(
buff
, 
f‹m
, 
n
);

818 
	`•rötf
(
buff
, 
f‹m
, 
	`luaL_checknumbî
(
L
, 
¨g
));

823 
	`luaI_addquŸed
(
L
, &
b
, 
¨g
);

828 
size_t
 
l
;

829 c⁄° *
s
 = 
	`luaL_checkl°rög
(
L
, 
¨g
, &
l
);

830 i‡(!
ha•ªcisi⁄
 && 
l
 >= 100) {

833 
	`lua_pushvÆue
(
L
, 
¨g
);

834 
	`luaL_addvÆue
(&
b
);

837 
	`•rötf
(
buff
, 
f‹m
, 
s
);

843  
	`luaL_îr‹
(
L
, "invalid optionÅo `format'");

846 
	`luaL_addl°rög
(&
b
, 
buff
, 
	`°æí
(buff));

849 
	`luaL_pushªsu…
(&
b
);

851 
	}
}

853 c⁄° 
luaL_ªg
 
	g°æib
[] = {

854 {"Àn", 
°r_Àn
},

855 {"sub", 
°r_sub
},

856 {"lowî", 
°r_lowî
},

857 {"uµî", 
°r_uµî
},

858 {"ch¨", 
°r_ch¨
},

859 {"ªp", 
°r_ªp
},

860 {"byã", 
°r_byã
},

861 {"f‹m©", 
°r_f‹m©
},

862 {"dump", 
°r_dump
},

863 {"föd", 
°r_föd
},

864 {"gföd", 
gföd
},

865 {"gsub", 
°r_gsub
},

866 {
NULL
, NULL}

872 
LUALIB_API
 

873 
	$lua›í_°rög
(
lua_Sèã
 * 
L
)

875 
	`luaL_›ílib
(
L
, 
LUA_STRLIBNAME
, 
°æib
, 0);

877 
	}
}

	@lib/tas/src/lua/ltable.c

23 
	~<°rög.h
>

25 
	#…abÀ_c


	)

27 
	~"lua.h
"

29 
	~"ldebug.h
"

30 
	~"ldo.h
"

31 
	~"lgc.h
"

32 
	~"lmem.h
"

33 
	~"lobje˘.h
"

34 
	~"l°©e.h
"

35 
	~"…abÀ.h
"

40 #i‡
BITS_INT
 > 26

41 
	#MAXBITS
 24

	)

43 
	#MAXBITS
 (
BITS_INT
-2)

	)

47 
	#toobig
(
x
Ë((((x)-1Ë>> 
MAXBITS
Ë!0)

	)

50 #i‚de‡
lua_numbî2öt


51 
	#lua_numbî2öt
(
i
,
n
Ë((i)=()“))

	)

54 
	#hashpow2
(
t
,
n
Ë(
	`gnode
—, 
	`lmod
(“), 
	`sizíode
—))))

	)

56 
	#hash°r
(
t
,
°r
Ë
	`hashpow2
—, (°r)->
tsv
.
hash
)

	)

57 
	#hashboﬁón
(
t
,
p
Ë
	`hashpow2
—,Ö)

	)

63 
	#hashmod
(
t
,
n
Ë(
	`gnode
—, (“Ë% ((
	`sizíode
—)-1)|1))))

	)

65 
	#hashpoöãr
(
t
,
p
Ë
	`hashmod
—, 
	`I¡Poöt
’))

	)

70 
	#numöts
 
	`ˇ°
(, (
lua_Numbî
)/())

	)

75 
Node
 *

76 
	$hashnum
(c⁄° 
TabÀ
 * 
t
, 
lua_Numbî
 
n
)

78 
a
[
numöts
];

79 
i
;

80 
n
 += 1;

81 
	`lua_as£π
((
a
Ë<(
n
));

82 
	`mem˝y
(
a
, &
n
, (a));

83 
i
 = 1; i < 
numöts
; i++)

84 
a
[0] +a[
i
];

85  
	`hashmod
(
t
, 
	`ˇ°
(
lu_hash
, 
a
[0]));

86 
	}
}

92 
Node
 *

93 
	$luaH_maöposôi⁄
(c⁄° 
TabÀ
 * 
t
, c⁄° 
TObje˘
 * 
key
)

95 
	`ây≥
(
key
)) {

96 
LUA_TNUMBER
:

97  
	`hashnum
(
t
, 
	`nvÆue
(
key
));

98 
LUA_TSTRING
:

99  
	`hash°r
(
t
, 
	`tsvÆue
(
key
));

100 
LUA_TBOOLEAN
:

101  
	`hashboﬁón
(
t
, 
	`bvÆue
(
key
));

102 
LUA_TLIGHTUSERDATA
:

103  
	`hashpoöãr
(
t
, 
	`pvÆue
(
key
));

105  
	`hashpoöãr
(
t
, 
	`gcvÆue
(
key
));

107 
	}
}

114 
	$¨øyödex
(c⁄° 
TObje˘
 * 
key
)

116 i‡(
	`âi¢umbî
(
key
)) {

117 
k
;

118 
	`lua_numbî2öt
(
k
, (
	`nvÆue
(
key
)));

119 i‡(
	`ˇ°
(
lua_Numbî
, 
k
Ë=
	`nvÆue
(
key
Ë&& k >1 && !
	`toobig
(k))

120  
k
;

123 
	}
}

131 
	$luaH_ödex
(
lua_Sèã
 * 
L
, 
TabÀ
 * 
t
, 
StkId
 
key
)

133 
i
;

134 i‡(
	`âi¢û
(
key
))

136 
i
 = 
	`¨øyödex
(
key
);

137 i‡(0 <
i
 && i <
t
->
sizóºay
) {

138  
i
 - 1;

140 c⁄° 
TObje˘
 *
v
 = 
	`luaH_gë
(
t
, 
key
);

141 i‡(
v
 =&
luaO_nûobje˘
)

142 
	`luaG_ru√º‹
(
L
, "invalid key for `next'");

143 
i
 = 
	`ˇ°
(, (ˇ°(c⁄° 
lu_byã
 *, 
v
Ë- ca°(c⁄°Üu_byã *, 
	`gvÆ
(
	`gnode
(
t
, 0)))Ë/ (
Node
));

144  
i
 + 
t
->
sizóºay
;

146 
	}
}

149 
	$luaH_√xt
(
lua_Sèã
 * 
L
, 
TabÀ
 * 
t
, 
StkId
 
key
)

151 
i
 = 
	`luaH_ödex
(
L
, 
t
, 
key
);

152 
i
++; i < 
t
->
sizóºay
; i++) {

153 i‡(!
	`âi¢û
(&
t
->
¨øy
[
i
])) {

154 
	`£ävÆue
(
key
, 
	`ˇ°
(
lua_Numbî
, 
i
 + 1));

155 
	`£tobj2s
(
key
 + 1, &
t
->
¨øy
[
i
]);

159 
i
 -
t
->
sizóºay
; i < 
	`sizíode
(t); i++) {

160 i‡(!
	`âi¢û
(
	`gvÆ
(
	`gnode
(
t
, 
i
)))) {

161 
	`£tobj2s
(
key
, 
	`gkey
(
	`gnode
(
t
, 
i
)));

162 
	`£tobj2s
(
key
 + 1, 
	`gvÆ
(
	`gnode
(
t
, 
i
)));

167 
	}
}

176 
	$compuãsizes
(
nums
[], 
¡ŸÆ
, *
«ºay
, *
nhash
)

178 
i
;

179 
a
 = 
nums
[0];

180 
«
 = 
a
;

181 
n
 = (
«
 == 0) ? -1 : 0;

182 
i
 = 1; 
a
 < *
«ºay
 && *«ºay >
	`twŸo
(i - 1); i++) {

183 i‡(
nums
[
i
] > 0) {

184 
a
 +
nums
[
i
];

185 i‡(
a
 >
	`twŸo
(
i
 - 1)) {

186 
n
 = 
i
;

187 
«
 = 
a
;

191 
	`lua_as£π
(
«
 <*
«ºay
 && *«ºay <
¡ŸÆ
);

192 *
nhash
 = 
¡ŸÆ
 - 
«
;

193 *
«ºay
 = (
n
 =-1Ë? 0 : 
	`twŸo
(n);

194 
	`lua_as£π
(
«
 <*
«ºay
 &&Ça >= *narray / 2);

195 
	}
}

198 
	$numu£
(c⁄° 
TabÀ
 * 
t
, *
«ºay
, *
nhash
)

200 
nums
[
MAXBITS
 + 1];

201 
i
, 
lg
;

202 
tŸÆu£
 = 0;

204 
i
 = 0, 
lg
 = 0;Üg <
MAXBITS
;Üg++) {

205 
âlg
 = 
	`twŸo
(
lg
);

206 i‡(
âlg
 > 
t
->
sizóºay
) {

207 
âlg
 = 
t
->
sizóºay
;

208 i‡(
i
 >
âlg
)

211 
nums
[
lg
] = 0;

212 ; 
i
 < 
âlg
; i++) {

213 i‡(!
	`âi¢û
(&
t
->
¨øy
[
i
])) {

214 
nums
[
lg
]++;

215 
tŸÆu£
++;

219 ; 
lg
 <
MAXBITS
;Üg++)

220 
nums
[
lg
] = 0;

221 *
«ºay
 = 
tŸÆu£
;

223 
i
 = 
	`sizíode
(
t
);

224 
i
--) {

225 
Node
 *
n
 = &
t
->
node
[
i
];

226 i‡(!
	`âi¢û
(
	`gvÆ
(
n
))) {

227 
k
 = 
	`¨øyödex
(
	`gkey
(
n
));

228 i‡(
k
 >= 0) {

229 
nums
[
	`luaO_log2
(
k
 - 1) + 1]++;

230 (*
«ºay
)++;

232 
tŸÆu£
++;

235 
	`compuãsizes
(
nums
, 
tŸÆu£
, 
«ºay
, 
nhash
);

236 
	}
}

239 
	$£èºayve˘‹
(
lua_Sèã
 * 
L
, 
TabÀ
 * 
t
, 
size
)

241 
i
;

242 
	`luaM_ªÆlocve˘‹
(
L
, 
t
->
¨øy
,Å->
sizóºay
, 
size
, 
TObje˘
);

243 
i
 = 
t
->
sizóºay
; i < 
size
; i++)

244 
	`£äûvÆue
(&
t
->
¨øy
[
i
]);

245 
t
->
sizóºay
 = 
size
;

246 
	}
}

249 
	$£äodeve˘‹
(
lua_Sèã
 * 
L
, 
TabÀ
 * 
t
, 
lsize
)

251 
i
;

252 
size
 = 
	`twŸo
(
lsize
);

253 i‡(
lsize
 > 
MAXBITS
)

254 
	`luaG_ru√º‹
(
L
, "table overflow");

255 i‡(
lsize
 == 0) {

256 
t
->
node
 = 
	`G
(
L
)->
dummynode
;

257 
	`lua_as£π
(
	`âi¢û
(
	`gkey
(
t
->
node
)));

258 
	`lua_as£π
(
	`âi¢û
(
	`gvÆ
(
t
->
node
)));

259 
	`lua_as£π
(
t
->
node
->
√xt
 =
NULL
);

261 
t
->
node
 = 
	`luaM_√wve˘‹
(
L
, 
size
, 
Node
);

262 
i
 = 0; i < 
size
; i++) {

263 
t
->
node
[
i
].
√xt
 = 
NULL
;

264 
	`£äûvÆue
(
	`gkey
(
	`gnode
(
t
, 
i
)));

265 
	`£äûvÆue
(
	`gvÆ
(
	`gnode
(
t
, 
i
)));

268 
t
->
lsizíode
 = 
	`ˇ°
(
lu_byã
, 
lsize
);

269 
t
->
fú°‰ì
 = 
	`gnode
—, 
size
 - 1);

270 
	}
}

273 
	$ªsize
(
lua_Sèã
 * 
L
, 
TabÀ
 * 
t
, 
«size
, 
nhsize
)

275 
i
;

276 
ﬁdasize
 = 
t
->
sizóºay
;

277 
ﬁdhsize
 = 
t
->
lsizíode
;

278 
Node
 *
nﬁd
;

279 
Node
 
ãmp
[1];

280 i‡(
ﬁdhsize
)

281 
nﬁd
 = 
t
->
node
;

283 
	`lua_as£π
(
t
->
node
 =
	`G
(
L
)->
dummynode
);

284 
ãmp
[0] = 
t
->
node
[0];

285 
nﬁd
 = 
ãmp
;

286 
	`£äûvÆue
(
	`gkey
(
	`G
(
L
)->
dummynode
));

287 
	`£äûvÆue
(
	`gvÆ
(
	`G
(
L
)->
dummynode
));

288 
	`lua_as£π
(
	`G
(
L
)->
dummynode
->
√xt
 =
NULL
);

290 i‡(
«size
 > 
ﬁdasize
)

291 
	`£èºayve˘‹
(
L
, 
t
, 
«size
);

293 
	`£äodeve˘‹
(
L
, 
t
, 
nhsize
);

295 i‡(
«size
 < 
ﬁdasize
) {

296 
t
->
sizóºay
 = 
«size
;

298 
i
 = 
«size
; i < 
ﬁdasize
; i++) {

299 i‡(!
	`âi¢û
(&
t
->
¨øy
[
i
]))

300 
	`£tobjt2t
(
	`luaH_£äum
(
L
, 
t
, 
i
 + 1), &t->
¨øy
[i]);

303 
	`luaM_ªÆlocve˘‹
(
L
, 
t
->
¨øy
, 
ﬁdasize
, 
«size
, 
TObje˘
);

306 
i
 = 
	`twŸo
(
ﬁdhsize
) - 1; i >= 0; i--) {

307 
Node
 *
ﬁd
 = 
nﬁd
 + 
i
;

308 i‡(!
	`âi¢û
(
	`gvÆ
(
ﬁd
)))

309 
	`£tobjt2t
(
	`luaH_£t
(
L
, 
t
, 
	`gkey
(
ﬁd
)), 
	`gvÆ
(old));

311 i‡(
ﬁdhsize
)

312 
	`luaM_‰ì¨øy
(
L
, 
nﬁd
, 
	`twŸo
(
ﬁdhsize
), 
Node
);

313 
	}
}

316 
	$ªhash
(
lua_Sèã
 * 
L
, 
TabÀ
 * 
t
)

318 
«size
, 
nhsize
;

319 
	`numu£
(
t
, &
«size
, &
nhsize
);

320 
	`ªsize
(
L
, 
t
, 
«size
, 
	`luaO_log2
(
nhsize
) + 1);

321 
	}
}

327 
TabÀ
 *

328 
	$luaH_√w
(
lua_Sèã
 * 
L
, 
«ºay
, 
 hash
)

330 
TabÀ
 *
t
 = 
	`luaM_√w
(
L
, Table);

331 
	`luaC_lök
(
L
, 
	`vÆtogco
(
t
), 
LUA_TTABLE
);

332 
t
->
më©abÀ
 = 
	`hvÆue
(
	`deÁu…mëa
(
L
));

333 
t
->
Êags
 = 
	`ˇ°
(
lu_byã
, ~0);

335 
t
->
¨øy
 = 
NULL
;

336 
t
->
sizóºay
 = 0;

337 
t
->
lsizíode
 = 0;

338 
t
->
node
 = 
NULL
;

339 
	`£èºayve˘‹
(
L
, 
t
, 
«ºay
);

340 
	`£äodeve˘‹
(
L
, 
t
, 
 hash
);

341  
t
;

342 
	}
}

345 
	$luaH_‰ì
(
lua_Sèã
 * 
L
, 
TabÀ
 * 
t
)

347 i‡(
t
->
lsizíode
)

348 
	`luaM_‰ì¨øy
(
L
, 
t
->
node
, 
	`sizíode
—), 
Node
);

349 
	`luaM_‰ì¨øy
(
L
, 
t
->
¨øy
,Å->
sizóºay
, 
TObje˘
);

350 
	`luaM_‰ìÀm
(
L
, 
t
);

351 
	}
}

360 
	$luaH_ªmove
(
TabÀ
 * 
t
, 
Node
 * 
e
)

362 
Node
 *
mp
 = 
	`luaH_maöposôi⁄
(
t
, 
	`gkey
(
e
));

363 i‡(
e
 !
mp
) {

364 
mp
->
√xt
 !
e
)

365 
mp
 = mp->
√xt
;

366 
mp
->
√xt
 = 
e
->next;

368 #îr‹ 
The
 
fﬁlowög
 
löe
 
has
 
™
 
îr‹
 
ö
 
the
 
‹igöÆ
 
sour˚
.

371 
	`lua_as£π
(
	`âi¢û
(
	`gvÆ
(
node
)));

372 
	`£äûvÆue
(
	`gkey
(
e
));

373 
e
->
√xt
 = 
NULL
;

374 
	}
}

384 
TObje˘
 *

385 
	$√wkey
(
lua_Sèã
 * 
L
, 
TabÀ
 * 
t
, c⁄° 
TObje˘
 * 
key
)

387 
TObje˘
 *
vÆ
;

388 
Node
 *
mp
 = 
	`luaH_maöposôi⁄
(
t
, 
key
);

389 i‡(!
	`âi¢û
(
	`gvÆ
(
mp
))) {

390 
Node
 *
Ÿhîn
 = 
	`luaH_maöposôi⁄
(
t
, 
	`gkey
(
mp
));

391 
Node
 *
n
 = 
t
->
fú°‰ì
;

392 i‡(
Ÿhîn
 !
mp
) {

394 
Ÿhîn
->
√xt
 !
mp
)

395 
Ÿhîn
 = othîn->
√xt
;

396 
Ÿhîn
->
√xt
 = 
n
;

397 *
n
 = *
mp
;

398 
mp
->
√xt
 = 
NULL
;

399 
	`£äûvÆue
(
	`gvÆ
(
mp
));

402 
n
->
√xt
 = 
mp
->next;

403 
mp
->
√xt
 = 
n
;

404 
mp
 = 
n
;

407 
	`£tobj2t
(
	`gkey
(
mp
), 
key
);

408 
	`lua_as£π
(
	`âi¢û
(
	`gvÆ
(
mp
)));

410 i‡(
	`âi¢û
(
	`gkey
(
t
->
fú°‰ì
)))

411  
	`gvÆ
(
mp
);

412 i‡(
t
->
fú°‰ì
 =t->
node
)

415 (
t
->
fú°‰ì
)--;

418 
	`£tbvÆue
(
	`gvÆ
(
mp
), 0);

419 
	`ªhash
(
L
, 
t
);

420 
vÆ
 = 
	`ˇ°
(
TObje˘
 *, 
	`luaH_gë
(
t
, 
key
));

421 
	`lua_as£π
(
	`âisboﬁón
(
vÆ
));

422 
	`£äûvÆue
(
vÆ
);

423  
vÆ
;

424 
	}
}

429 c⁄° 
TObje˘
 *

430 
	$luaH_gë™y
(
TabÀ
 * 
t
, c⁄° 
TObje˘
 * 
key
)

432 i‡(
	`âi¢û
(
key
))

433  &
luaO_nûobje˘
;

435 
Node
 *
n
 = 
	`luaH_maöposôi⁄
(
t
, 
key
);

437 i‡(
	`luaO_øwequÆObj
(
	`gkey
(
n
), 
key
))

438  
	`gvÆ
(
n
);

440 
n
 =Ç->
√xt
;

442 
n
);

443  &
luaO_nûobje˘
;

445 
	}
}

450 c⁄° 
TObje˘
 *

451 
	$luaH_gënum
(
TabÀ
 * 
t
, 
key
)

453 i‡(1 <
key
 && key <
t
->
sizóºay
)

454  &
t
->
¨øy
[
key
 - 1];

456 
lua_Numbî
 
nk
 = 
	`ˇ°
÷ua_Numbî, 
key
);

457 
Node
 *
n
 = 
	`hashnum
(
t
, 
nk
);

459 i‡(
	`âi¢umbî
(
	`gkey
(
n
)Ë&& 
	`nvÆue
(gkey“)Ë=
nk
)

460  
	`gvÆ
(
n
);

462 
n
 =Ç->
√xt
;

464 
n
);

465  &
luaO_nûobje˘
;

467 
	}
}

472 c⁄° 
TObje˘
 *

473 
	$luaH_gë°r
(
TabÀ
 * 
t
, 
TSåög
 * 
key
)

475 
Node
 *
n
 = 
	`hash°r
(
t
, 
key
);

477 i‡(
	`âis°rög
(
	`gkey
(
n
)Ë&& 
	`tsvÆue
(gkey“)Ë=
key
)

478  
	`gvÆ
(
n
);

480 
n
 =Ç->
√xt
;

482 
n
);

483  &
luaO_nûobje˘
;

484 
	}
}

489 c⁄° 
TObje˘
 *

490 
	$luaH_gë
(
TabÀ
 * 
t
, c⁄° 
TObje˘
 * 
key
)

492 
	`ây≥
(
key
)) {

493 
LUA_TSTRING
:

494  
	`luaH_gë°r
(
t
, 
	`tsvÆue
(
key
));

495 
LUA_TNUMBER
:

497 
k
;

498 
	`lua_numbî2öt
(
k
, (
	`nvÆue
(
key
)));

499 i‡(
	`ˇ°
(
lua_Numbî
, 
k
Ë=
	`nvÆue
(
key
))

500  
	`luaH_gënum
(
t
, 
k
);

504  
	`luaH_gë™y
(
t
, 
key
);

506 
	}
}

508 
TObje˘
 *

509 
	$luaH_£t
(
lua_Sèã
 * 
L
, 
TabÀ
 * 
t
, c⁄° 
TObje˘
 * 
key
)

511 c⁄° 
TObje˘
 *
p
 = 
	`luaH_gë
(
t
, 
key
);

512 
t
->
Êags
 = 0;

513 i‡(
p
 !&
luaO_nûobje˘
)

514  
	`ˇ°
(
TObje˘
 *, 
p
);

516 i‡(
	`âi¢û
(
key
))

517 
	`luaG_ru√º‹
(
L
, "table index isÇil");

518 i‡(
	`âi¢umbî
(
key
Ë&& 
	`nvÆue
(key) !=Çvalue(key))

519 
	`luaG_ru√º‹
(
L
, "table index is NaN");

520  
	`√wkey
(
L
, 
t
, 
key
);

522 
	}
}

524 
TObje˘
 *

525 
	$luaH_£äum
(
lua_Sèã
 * 
L
, 
TabÀ
 * 
t
, 
key
)

527 c⁄° 
TObje˘
 *
p
 = 
	`luaH_gënum
(
t
, 
key
);

528 i‡(
p
 !&
luaO_nûobje˘
)

529  
	`ˇ°
(
TObje˘
 *, 
p
);

531 
TObje˘
 
k
;

532 
	`£ävÆue
(&
k
, 
	`ˇ°
(
lua_Numbî
, 
key
));

533  
	`√wkey
(
L
, 
t
, &
k
);

535 
	}
}

	@lib/tas/src/lua/ltable.h

7 #i‚de‡
…abÀ_h


8 
	#…abÀ_h


	)

10 
	~"lobje˘.h
"

12 
	#gnode
(
t
,
i
Ë(&—)->
node
[i])

	)

13 
	#gkey
(
n
Ë(&“)->
i_key
)

	)

14 
	#gvÆ
(
n
Ë(&“)->
i_vÆ
)

	)

16 c⁄° 
TObje˘
 *
luaH_gënum
(
TabÀ
 * 
t
, 
key
);

17 
TObje˘
 *
luaH_£äum
(
lua_Sèã
 * 
L
, 
TabÀ
 * 
t
, 
key
);

18 c⁄° 
TObje˘
 *
luaH_gë°r
(
TabÀ
 * 
t
, 
TSåög
 * 
key
);

19 c⁄° 
TObje˘
 *
luaH_gë
(
TabÀ
 * 
t
, c⁄° TObje˘ * 
key
);

20 
TObje˘
 *
luaH_£t
(
lua_Sèã
 * 
L
, 
TabÀ
 * 
t
, c⁄° TObje˘ * 
key
);

21 
TabÀ
 *
luaH_√w
(
lua_Sèã
 * 
L
, 
«ºay
, 
 hash
);

22 
luaH_‰ì
(
lua_Sèã
 * 
L
, 
TabÀ
 * 
t
);

23 
luaH_√xt
(
lua_Sèã
 * 
L
, 
TabÀ
 * 
t
, 
StkId
 
key
);

26 
Node
 *
luaH_maöposôi⁄
(c⁄° 
TabÀ
 * 
t
, c⁄° 
TObje˘
 * 
key
);

	@lib/tas/src/lua/ltablib.c

7 
	~<°ddef.h
>

9 
	#…ablib_c


	)

11 
	~"lua.h
"

13 
	~"œuxlib.h
"

14 
	~"luÆib.h
"

16 
	#aux_gën
(
L
,
n
Ë(
	`luaL_checkty≥
(L,Ç, 
LUA_TTABLE
), 
	`luaL_gën
(L,Ç))

	)

19 
	$luaB_f‹óchi
(
lua_Sèã
 * 
L
)

21 
i
;

22 
n
 = 
	`aux_gën
(
L
, 1);

23 
	`luaL_checkty≥
(
L
, 2, 
LUA_TFUNCTION
);

24 
i
 = 1; i <
n
; i++) {

25 
	`lua_pushvÆue
(
L
, 2);

26 
	`lua_pushnumbî
(
L
, (
lua_Numbî
Ë
i
);

27 
	`lua_øwgëi
(
L
, 1, 
i
);

28 
	`lua_ˇŒ
(
L
, 2, 1);

29 i‡(!
	`lua_i¢û
(
L
, -1))

31 
	`lua_p›
(
L
, 1);

34 
	}
}

37 
	$luaB_f‹óch
(
lua_Sèã
 * 
L
)

39 
	`luaL_checkty≥
(
L
, 1, 
LUA_TTABLE
);

40 
	`luaL_checkty≥
(
L
, 2, 
LUA_TFUNCTION
);

41 
	`lua_pushnû
(
L
);

43 i‡(
	`lua_√xt
(
L
, 1) == 0)

45 
	`lua_pushvÆue
(
L
, 2);

46 
	`lua_pushvÆue
(
L
, -3);

47 
	`lua_pushvÆue
(
L
, -3);

48 
	`lua_ˇŒ
(
L
, 2, 1);

49 i‡(!
	`lua_i¢û
(
L
, -1))

51 
	`lua_p›
(
L
, 2);

53 
	}
}

56 
	$luaB_gën
(
lua_Sèã
 * 
L
)

58 
	`lua_pushnumbî
(
L
, (
lua_Numbî
Ë
	`aux_gën
(L, 1));

60 
	}
}

63 
	$luaB_£ä
(
lua_Sèã
 * 
L
)

65 
	`luaL_checkty≥
(
L
, 1, 
LUA_TTABLE
);

66 
	`luaL_£ä
(
L
, 1, 
	`luaL_checköt
(L, 2));

68 
	}
}

71 
	$luaB_tö£π
(
lua_Sèã
 * 
L
)

73 
v
 = 
	`lua_gët›
(
L
);

74 
n
 = 
	`aux_gën
(
L
, 1) + 1;

75 
pos
;

76 i‡(
v
 == 2)

77 
pos
 = 
n
;

79 
pos
 = 
	`luaL_checköt
(
L
, 2);

80 i‡(
pos
 > 
n
)

81 
n
 = 
pos
;

82 
v
 = 3;

84 
	`luaL_£ä
(
L
, 1, 
n
);

85 --
n
 >
pos
) {

86 
	`lua_øwgëi
(
L
, 1, 
n
);

87 
	`lua_øw£ti
(
L
, 1, 
n
 + 1);

89 
	`lua_pushvÆue
(
L
, 
v
);

90 
	`lua_øw£ti
(
L
, 1, 
pos
);

92 
	}
}

95 
	$luaB_åemove
(
lua_Sèã
 * 
L
)

97 
n
 = 
	`aux_gën
(
L
, 1);

98 
pos
 = 
	`luaL_›töt
(
L
, 2, 
n
);

99 i‡(
n
 <= 0)

101 
	`luaL_£ä
(
L
, 1, 
n
 - 1);

102 
	`lua_øwgëi
(
L
, 1, 
pos
);

103 ; 
pos
 < 
n
;Öos++) {

104 
	`lua_øwgëi
(
L
, 1, 
pos
 + 1);

105 
	`lua_øw£ti
(
L
, 1, 
pos
);

107 
	`lua_pushnû
(
L
);

108 
	`lua_øw£ti
(
L
, 1, 
n
);

110 
	}
}

113 
	$°r_c⁄ˇt
(
lua_Sèã
 * 
L
)

115 
luaL_Buf„r
 
b
;

116 
size_t
 
l£p
;

117 c⁄° *
£p
 = 
	`luaL_›é°rög
(
L
, 2, "", &
l£p
);

118 
i
 = 
	`luaL_›töt
(
L
, 3, 1);

119 
n
 = 
	`luaL_›töt
(
L
, 4, 0);

120 
	`luaL_checkty≥
(
L
, 1, 
LUA_TTABLE
);

121 i‡(
n
 == 0)

122 
n
 = 
	`luaL_gën
(
L
, 1);

123 
	`luaL_bufföô
(
L
, &
b
);

124 ; 
i
 <
n
; i++) {

125 
	`lua_øwgëi
(
L
, 1, 
i
);

126 
	`luaL_¨gcheck
(
L
, 
	`lua_is°rög
(L, -1), 1, "table containsÇon-strings");

127 
	`luaL_addvÆue
(&
b
);

128 i‡(
i
 !
n
)

129 
	`luaL_addl°rög
(&
b
, 
£p
, 
l£p
);

131 
	`luaL_pushªsu…
(&
b
);

133 
	}
}

143 
	$£t2
(
lua_Sèã
 * 
L
, 
i
, 
j
)

145 
	`lua_øw£ti
(
L
, 1, 
i
);

146 
	`lua_øw£ti
(
L
, 1, 
j
);

147 
	}
}

150 
	$s‹t_comp
(
lua_Sèã
 * 
L
, 
a
, 
b
)

152 i‡(!
	`lua_i¢û
(
L
, 2)) {

153 
ªs
;

154 
	`lua_pushvÆue
(
L
, 2);

155 
	`lua_pushvÆue
(
L
, 
a
 - 1);

156 
	`lua_pushvÆue
(
L
, 
b
 - 2);

157 
	`lua_ˇŒ
(
L
, 2, 1);

158 
ªs
 = 
	`lua_toboﬁón
(
L
, -1);

159 
	`lua_p›
(
L
, 1);

160  
ªs
;

162  
	`lua_Às°h™
(
L
, 
a
, 
b
);

163 
	}
}

166 
	$auxs‹t
(
lua_Sèã
 * 
L
, 
l
, 
u
)

168 
l
 < 
u
) {

169 
i
, 
j
;

171 
	`lua_øwgëi
(
L
, 1, 
l
);

172 
	`lua_øwgëi
(
L
, 1, 
u
);

173 i‡(
	`s‹t_comp
(
L
, -1, -2))

174 
	`£t2
(
L
, 
l
, 
u
);

176 
	`lua_p›
(
L
, 2);

177 i‡(
u
 - 
l
 == 1)

179 
i
 = (
l
 + 
u
) / 2;

180 
	`lua_øwgëi
(
L
, 1, 
i
);

181 
	`lua_øwgëi
(
L
, 1, 
l
);

182 i‡(
	`s‹t_comp
(
L
, -2, -1))

183 
	`£t2
(
L
, 
i
, 
l
);

185 
	`lua_p›
(
L
, 1);

186 
	`lua_øwgëi
(
L
, 1, 
u
);

187 i‡(
	`s‹t_comp
(
L
, -1, -2))

188 
	`£t2
(
L
, 
i
, 
u
);

190 
	`lua_p›
(
L
, 2);

192 i‡(
u
 - 
l
 == 2)

194 
	`lua_øwgëi
(
L
, 1, 
i
);

195 
	`lua_pushvÆue
(
L
, -1);

196 
	`lua_øwgëi
(
L
, 1, 
u
 - 1);

197 
	`£t2
(
L
, 
i
, 
u
 - 1);

199 
i
 = 
l
;

200 
j
 = 
u
 - 1;

203 
	`lua_øwgëi
(
L
, 1, ++
i
), 
	`s‹t_comp
(L, -1, -2)) {

204 i‡(
i
 > 
u
)

205 
	`luaL_îr‹
(
L
, "invalid order function for sorting");

206 
	`lua_p›
(
L
, 1);

209 
	`lua_øwgëi
(
L
, 1, --
j
), 
	`s‹t_comp
(L, -3, -1)) {

210 i‡(
j
 < 
l
)

211 
	`luaL_îr‹
(
L
, "invalid order function for sorting");

212 
	`lua_p›
(
L
, 1);

214 i‡(
j
 < 
i
) {

215 
	`lua_p›
(
L
, 3);

218 
	`£t2
(
L
, 
i
, 
j
);

220 
	`lua_øwgëi
(
L
, 1, 
u
 - 1);

221 
	`lua_øwgëi
(
L
, 1, 
i
);

222 
	`£t2
(
L
, 
u
 - 1, 
i
);

225 i‡(
i
 - 
l
 < 
u
 - i) {

226 
j
 = 
l
;

227 
i
 = i - 1;

228 
l
 = 
i
 + 2;

230 
j
 = 
i
 + 1;

231 
i
 = 
u
;

232 
u
 = 
j
 - 2;

234 
	`auxs‹t
(
L
, 
j
, 
i
);

236 
	}
}

239 
	$luaB_s‹t
(
lua_Sèã
 * 
L
)

241 
n
 = 
	`aux_gën
(
L
, 1);

242 
	`luaL_check°ack
(
L
, 40, "");

243 i‡(!
	`lua_i¢⁄e‹nû
(
L
, 2))

244 
	`luaL_checkty≥
(
L
, 2, 
LUA_TFUNCTION
);

245 
	`lua_£â›
(
L
, 2);

246 
	`auxs‹t
(
L
, 1, 
n
);

248 
	}
}

252 c⁄° 
luaL_ªg
 
	gèb_funcs
[] = {

253 {"c⁄ˇt", 
°r_c⁄ˇt
},

254 {"f‹óch", 
luaB_f‹óch
},

255 {"f‹óchi", 
luaB_f‹óchi
},

256 {"gën", 
luaB_gën
},

257 {"£ä", 
luaB_£ä
},

258 {"s‹t", 
luaB_s‹t
},

259 {"ö£π", 
luaB_tö£π
},

260 {"ªmove", 
luaB_åemove
},

261 {
NULL
, NULL}

264 
LUALIB_API
 

265 
	$lua›í_èbÀ
(
lua_Sèã
 * 
L
)

267 
	`luaL_›ílib
(
L
, 
LUA_TABLIBNAME
, 
èb_funcs
, 0);

269 
	}
}

	@lib/tas/src/lua/ltests.c

7 
	~<˘y≥.h
>

8 
	~<limôs.h
>

9 
	~<°dio.h
>

10 
	~<°dlib.h
>

11 
	~<°rög.h
>

13 
	#…e°s_c


	)

15 
	~"lua.h
"

17 
	~"œpi.h
"

18 
	~"œuxlib.h
"

19 
	~"lcode.h
"

20 
	~"ldebug.h
"

21 
	~"ldo.h
"

22 
	~"lfunc.h
"

23 
	~"lmem.h
"

24 
	~"l›codes.h
"

25 
	~"l°©e.h
"

26 
	~"l°rög.h
"

27 
	~"…abÀ.h
"

28 
	~"luÆib.h
"

33 #ifde‡
LUA_DEBUG


35 
	#lua_pushöãgøl
(
L
,
i
Ë
	`lua_pushnumbî
(L, 
	`ˇ°
(
lua_Numbî
, (i)))

	)

37 
lua_Sèã
 *
	glua_°©e
 = 
NULL
;

39 
	gi¶ocked
 = 0;

41 
	#func_©
(
L
,
k
Ë(L->
ci
->
ba£
+(kË- 1)

	)

44 
	$£äamevÆ
(
lua_Sèã
 * 
L
, c⁄° *
«me
, 
vÆ
)

46 
	`lua_push°rög
(
L
, 
«me
);

47 
	`lua_pushöãgøl
(
L
, 
vÆ
);

48 
	`lua_£âabÀ
(
L
, -3);

49 
	}
}

57 
	#MARK
 0x55

	)

59 #i‚de‡
EXTERNMEMCHECK


62 
	#HEADER
 ((
L_UmaxÆign
)Ë

	)

63 
	#MARKSIZE
 16

	)

64 
	#blockhód
(
b
Ë(
	`ˇ°
(*, bË- 
HEADER
)

	)

65 
	#£tsize
(
√wblock
, 
size
Ë(*
	`ˇ°
(
size_t
 *,ÇewblockËsize)

	)

66 
	#checkblocksize
(
b
, 
size
Ë(sizê=(*
	`ˇ°
(
size_t
 *, 
	`blockhód
(b))))

	)

67 
	#fûlmem
(
mem
,
size
Ë
	`mem£t
(mem, -
MARK
, size)

	)

71 
	#HEADER
 0

	)

72 
	#MARKSIZE
 0

	)

73 
	#blockhód
(
b
Ë(b)

	)

74 
	#£tsize
(
√wblock
, 
size
Ë

	)

75 
	#checkblocksize
(
b
,
size
Ë(1)

	)

76 
	#fûlmem
(
mem
,
size
Ë

	)

79 
	gmemdebug_numblocks
 = 0;

80 
	gmemdebug_tŸÆ
 = 0;

81 
	gmemdebug_maxmem
 = 0;

82 
	gmemdebug_memlimô
 = 
ULONG_MAX
;

85 
	$checkblock
(*
block
, 
size_t
 
size
)

87 *
b
 = 
	`blockhód
(
block
);

88 
i
;

89 
i
 = 0; i < 
MARKSIZE
; i++)

90 
	`lua_as£π
(*(
	`ˇ°
(*, 
b
Ë+ 
HEADER
 + 
size
 + 
i
Ë=
MARK
 + i);

91  
b
;

92 
	}
}

95 
	$‰ìblock
(*
block
, 
size_t
 
size
)

97 i‡(
block
) {

98 
	`lua_as£π
(
	`checkblocksize
(
block
, 
size
));

99 
block
 = 
	`checkblock
(block, 
size
);

100 
	`fûlmem
(
block
, 
size
 + 
HEADER
 + 
MARKSIZE
);

101 
	`‰ì
(
block
);

102 
memdebug_numblocks
--;

103 
memdebug_tŸÆ
 -
size
;

105 
	}
}

108 
	$debug_ªÆloc
(*
block
, 
size_t
 
ﬁdsize
, size_à
size
)

110 
	`lua_as£π
(
ﬁdsize
 =0 || 
	`checkblocksize
(
block
, oldsize));

112 
	`lua_as£π
(
block
 !
NULL
 || 
size
 > 0);

113 i‡(
size
 == 0) {

114 
	`‰ìblock
(
block
, 
ﬁdsize
);

115  
NULL
;

116 } i‡(
size
 > 
ﬁdsize
 && 
memdebug_tŸÆ
 + sizê- oldsizê> 
memdebug_memlimô
)

117  
NULL
;

119 *
√wblock
;

120 
i
;

121 
size_t
 
ªÆsize
 = 
HEADER
 + 
size
 + 
MARKSIZE
;

122 
size_t
 
comm⁄size
 = (
ﬁdsize
 < 
size
) ? oldsize : size;

123 i‡(
ªÆsize
 < 
size
)

124  
NULL
;

125 
√wblock
 = 
	`mÆloc
(
ªÆsize
);

126 i‡(
√wblock
 =
NULL
)

127  
NULL
;

128 i‡(
block
) {

129 
	`mem˝y
(
	`ˇ°
(*, 
√wblock
Ë+ 
HEADER
, 
block
, 
comm⁄size
);

130 
	`‰ìblock
(
block
, 
ﬁdsize
);

133 
	`fûlmem
(
	`ˇ°
(*, 
√wblock
Ë+ 
HEADER
 + 
comm⁄size
, 
size
 - commonsize);

134 
memdebug_tŸÆ
 +
size
;

135 i‡(
memdebug_tŸÆ
 > 
memdebug_maxmem
)

136 
memdebug_maxmem
 = 
memdebug_tŸÆ
;

137 
memdebug_numblocks
++;

138 
	`£tsize
(
√wblock
, 
size
);

139 
i
 = 0; i < 
MARKSIZE
; i++)

140 *(
	`ˇ°
(*, 
√wblock
Ë+ 
HEADER
 + 
size
 + 
i
Ëˇ°(, 
MARK
 + i);

141  
	`ˇ°
(*, 
√wblock
)+
HEADER
;

143 
	}
}

154 
	$buûd›
(
PrŸo
 * 
p
, 
pc
, *
buff
)

156 
In°ru˘i⁄
 
i
 = 
p
->
code
[
pc
];

157 
OpCode
 
o
 = 
	`GET_OPCODE
(
i
);

158 c⁄° *
«me
 = 
luaP_›«mes
[
o
];

159 
löe
 = 
	`gëlöe
(
p
, 
pc
);

160 
	`•rötf
(
buff
, "(%4dË%4d - ", 
löe
, 
pc
);

161 
	`gëOpMode
(
o
)) {

162 
iABC
:

163 
	`•rötf
(
buff
 + 
	`°æí
(buff), "%-12s%4d %4d %4d", 
«me
, 
	`GETARG_A
(
i
), 
	`GETARG_B
(i), 
	`GETARG_C
(i));

165 
iABx
:

166 
	`•rötf
(
buff
 + 
	`°æí
(buff), "%-12s%4d %4d", 
«me
, 
	`GETARG_A
(
i
), 
	`GETARG_Bx
(i));

168 
iAsBx
:

169 
	`•rötf
(
buff
 + 
	`°æí
(buff), "%-12s%4d %4d", 
«me
, 
	`GETARG_A
(
i
), 
	`GETARG_sBx
(i));

172  
buff
;

173 
	}
}

177 
	$luaI_¥ötcode
(
PrŸo
 * 
±
, 
size
)

179 
pc
;

180 
pc
 = 0;Ö¯< 
size
;Öc++) {

181 
buff
[100];

182 
	`¥ötf
("%s\n", 
	`buûd›
(
±
, 
pc
, 
buff
));

184 
	`¥ötf
("-------\n");

185 
	}
}

189 
	$li°code
(
lua_Sèã
 * 
L
)

191 
pc
;

192 
PrŸo
 *
p
;

193 
	`luaL_¨gcheck
(
L
, 
	`lua_isfun˘i⁄
(L, 1Ë&& !
	`lua_iscfun˘i⁄
(L, 1), 1, "Lua functionÉxpected");

194 
p
 = 
	`˛vÆue
(
	`func_©
(
L
, 1))->
l
.p;

195 
	`lua_√wèbÀ
(
L
);

196 
	`£äamevÆ
(
L
, "max°ack", 
p
->
max°acksize
);

197 
	`£äamevÆ
(
L
, "num∑øms", 
p
->
num∑øms
);

198 
pc
 = 0;Ö¯< 
p
->
sizecode
;Öc++) {

199 
buff
[100];

200 
	`lua_pushöãgøl
(
L
, 
pc
 + 1);

201 
	`lua_push°rög
(
L
, 
	`buûd›
(
p
, 
pc
, 
buff
));

202 
	`lua_£âabÀ
(
L
, -3);

205 
	}
}

208 
	$li°k
(
lua_Sèã
 * 
L
)

210 
PrŸo
 *
p
;

211 
i
;

212 
	`luaL_¨gcheck
(
L
, 
	`lua_isfun˘i⁄
(L, 1Ë&& !
	`lua_iscfun˘i⁄
(L, 1), 1, "Lua functionÉxpected");

213 
p
 = 
	`˛vÆue
(
	`func_©
(
L
, 1))->
l
.p;

214 
	`lua_√wèbÀ
(
L
);

215 
i
 = 0; i < 
p
->
sizek
; i++) {

216 
	`lua_pushöãgøl
(
L
, 
i
 + 1);

217 
	`luaA_pushobje˘
(
L
, 
p
->
k
 + 
i
);

218 
	`lua_£âabÀ
(
L
, -3);

221 
	}
}

224 
	$li°loˇls
(
lua_Sèã
 * 
L
)

226 
PrŸo
 *
p
;

227 
pc
 = 
	`luaL_checköt
(
L
, 2) - 1;

228 
i
 = 0;

229 c⁄° *
«me
;

230 
	`luaL_¨gcheck
(
L
, 
	`lua_isfun˘i⁄
(L, 1Ë&& !
	`lua_iscfun˘i⁄
(L, 1), 1, "Lua functionÉxpected");

231 
p
 = 
	`˛vÆue
(
	`func_©
(
L
, 1))->
l
.p;

232 (
«me
 = 
	`luaF_gëloˇ ame
(
p
, ++
i
, 
pc
)Ë!
NULL
)

233 
	`lua_push°rög
(
L
, 
«me
);

234  
i
 - 1;

235 
	}
}

240 
	$gë_limôs
(
lua_Sèã
 * 
L
)

242 
	`lua_√wèbÀ
(
L
);

243 
	`£äamevÆ
(
L
, "BITS_INT", 
BITS_INT
);

244 
	`£äamevÆ
(
L
, "LFPF", 
LFIELDS_PER_FLUSH
);

245 
	`£äamevÆ
(
L
, "MAXVARS", 
MAXVARS
);

246 
	`£äamevÆ
(
L
, "MAXPARAMS", 
MAXPARAMS
);

247 
	`£äamevÆ
(
L
, "MAXSTACK", 
MAXSTACK
);

248 
	`£äamevÆ
(
L
, "MAXUPVALUES", 
MAXUPVALUES
);

250 
	}
}

253 
	$mem_quîy
(
lua_Sèã
 * 
L
)

255 i‡(
	`lua_i¢⁄e
(
L
, 1)) {

256 
	`lua_pushöãgøl
(
L
, 
memdebug_tŸÆ
);

257 
	`lua_pushöãgøl
(
L
, 
memdebug_numblocks
);

258 
	`lua_pushöãgøl
(
L
, 
memdebug_maxmem
);

261 
memdebug_memlimô
 = 
	`luaL_checköt
(
L
, 1);

264 
	}
}

267 
	$hash_quîy
(
lua_Sèã
 * 
L
)

269 i‡(
	`lua_i¢⁄e
(
L
, 2)) {

270 
	`luaL_¨gcheck
(
L
, 
	`lua_ty≥
(L, 1Ë=
LUA_TSTRING
, 1, "stringÉxpected");

271 
	`lua_pushöãgøl
(
L
, 
	`tsvÆue
(
	`func_©
(L, 1))->
tsv
.
hash
);

273 
TObje˘
 *
o
 = 
	`func_©
(
L
, 1);

274 
TabÀ
 *
t
;

275 
	`luaL_checkty≥
(
L
, 2, 
LUA_TTABLE
);

276 
t
 = 
	`hvÆue
(
	`func_©
(
L
, 2));

277 
	`lua_pushöãgøl
(
L
, 
	`luaH_maöposôi⁄
(
t
, 
o
Ë-Å->
node
);

280 
	}
}

283 
	$°ackÀvñ
(
lua_Sèã
 * 
L
)

285 
a
 = 0;

286 
	`lua_pushöãgøl
(
L
, ()(L->
t›
 - L->
°ack
));

287 
	`lua_pushöãgøl
(
L
, ()(L->
°ack_œ°
 - L->
°ack
));

288 
	`lua_pushöãgøl
(
L
, ()(L->
ci
 - L->
ba£_ci
));

289 
	`lua_pushöãgøl
(
L
, ()(L->
íd_ci
 - L->
ba£_ci
));

290 
	`lua_pushöãgøl
(
L
, ()&
a
);

292 
	}
}

295 
	$èbÀ_quîy
(
lua_Sèã
 * 
L
)

297 c⁄° 
TabÀ
 *
t
;

298 
i
 = 
	`luaL_›töt
(
L
, 2, -1);

299 
	`luaL_checkty≥
(
L
, 1, 
LUA_TTABLE
);

300 
t
 = 
	`hvÆue
(
	`func_©
(
L
, 1));

301 i‡(
i
 == -1) {

302 
	`lua_pushöãgøl
(
L
, 
t
->
sizóºay
);

303 
	`lua_pushöãgøl
(
L
, 
	`sizíode
(
t
));

304 
	`lua_pushöãgøl
(
L
, 
t
->
fú°‰ì
 -Å->
node
);

305 } i‡(
i
 < 
t
->
sizóºay
) {

306 
	`lua_pushöãgøl
(
L
, 
i
);

307 
	`luaA_pushobje˘
(
L
, &
t
->
¨øy
[
i
]);

308 
	`lua_pushnû
(
L
);

309 } i‡((
i
 -
t
->
sizóºay
Ë< 
	`sizíode
(t)) {

310 i‡(!
	`âi¢û
(
	`gvÆ
(
	`gnode
(
t
, 
i
))Ë||Åti¢û(
	`gkey
(gnode—, i))Ë|| 
	`âi¢umbî
(gkey(gnode(t, i)))) {

311 
	`luaA_pushobje˘
(
L
, 
	`gkey
(
	`gnode
(
t
, 
i
)));

313 
	`lua_push°rög
(
L
, "<undef>");

314 
	`luaA_pushobje˘
(
L
, 
	`gvÆ
(
	`gnode
(
t
, 
i
)));

315 i‡(
t
->
node
[
i
].
√xt
)

316 
	`lua_pushöãgøl
(
L
, 
t
->
node
[
i
].
√xt
 -Å->node);

318 
	`lua_pushnû
(
L
);

321 
	}
}

324 
	$°rög_quîy
(
lua_Sèã
 * 
L
)

326 
°rögèbÀ
 *
tb
 = &
	`G
(
L
)->
°π
;

327 
s
 = 
	`luaL_›töt
(
L
, 2, 0) - 1;

328 i‡(
s
 == -1) {

329 
	`lua_pushöãgøl
(
L
, 
tb
->
nu£
);

330 
	`lua_pushöãgøl
(
L
, 
tb
->
size
);

332 } i‡(
s
 < 
tb
->
size
) {

333 
GCObje˘
 *
ts
;

334 
n
 = 0;

335 
ts
 = 
tb
->
hash
[
s
];Ås;Å†ts->
gch
.
√xt
) {

336 
	`£tsvÆue2s
(
L
->
t›
, 
	`gcŸŸs
(
ts
));

337 
	`ö¸_t›
(
L
);

338 
n
++;

340  
n
;

343 
	}
}

346 
	$åef
(
lua_Sèã
 * 
L
)

348 
Àvñ
 = 
	`lua_gët›
(
L
);

349 
lock
 = 
	`luaL_›töt
(
L
, 2, 1);

350 
	`luaL_check™y
(
L
, 1);

351 
	`lua_pushvÆue
(
L
, 1);

352 
	`lua_pushöãgøl
(
L
, 
	`lua_ªf
(L, 
lock
));

353 
	`as£π
(
	`lua_gët›
(
L
Ë=
Àvñ
 + 1);

355 
	}
}

358 
	$gëªf
(
lua_Sèã
 * 
L
)

360 
Àvñ
 = 
	`lua_gët›
(
L
);

361 
	`lua_gëªf
(
L
, 
	`luaL_checköt
(L, 1));

362 
	`as£π
(
	`lua_gët›
(
L
Ë=
Àvñ
 + 1);

364 
	}
}

367 
	$uƒef
(
lua_Sèã
 * 
L
)

369 
Àvñ
 = 
	`lua_gët›
(
L
);

370 
	`lua_uƒef
(
L
, 
	`luaL_checköt
(L, 1));

371 
	`as£π
(
	`lua_gët›
(
L
Ë=
Àvñ
);

373 
	}
}

376 
	$më©abÀ
(
lua_Sèã
 * 
L
)

378 
	`luaL_check™y
(
L
, 1);

379 i‡(
	`lua_i¢⁄e
(
L
, 2)) {

380 i‡(
	`lua_gëmë©abÀ
(
L
, 1) == 0)

381 
	`lua_pushnû
(
L
);

383 
	`lua_£â›
(
L
, 2);

384 
	`luaL_checkty≥
(
L
, 2, 
LUA_TTABLE
);

385 
	`lua_£tmë©abÀ
(
L
, 1);

388 
	}
}

391 
	$upvÆue
(
lua_Sèã
 * 
L
)

393 
n
 = 
	`luaL_checköt
(
L
, 2);

394 
	`luaL_checkty≥
(
L
, 1, 
LUA_TFUNCTION
);

395 i‡(
	`lua_i¢⁄e
(
L
, 3)) {

396 c⁄° *
«me
 = 
	`lua_gëupvÆue
(
L
, 1, 
n
);

397 i‡(
«me
 =
NULL
)

399 
	`lua_push°rög
(
L
, 
«me
);

402 c⁄° *
«me
 = 
	`lua_£tupvÆue
(
L
, 1, 
n
);

403 
	`lua_push°rög
(
L
, 
«me
);

406 
	}
}

409 
	$√wu£rd©a
(
lua_Sèã
 * 
L
)

411 
size_t
 
size
 = 
	`luaL_checköt
(
L
, 1);

412 *
p
 = 
	`ˇ°
(*, 
	`lua_√wu£rd©a
(
L
, 
size
));

413 
size
--)

414 *
p
++ = '\0';

416 
	}
}

419 
	$pushu£rd©a
(
lua_Sèã
 * 
L
)

421 
	`lua_pushlightu£rd©a
(
L
, 
	`ˇ°
(*, 
	`luaL_checköt
(L, 1)));

423 
	}
}

426 
	$ud©avÆ
(
lua_Sèã
 * 
L
)

428 
	`lua_pushöãgøl
(
L
, 
	`ˇ°
(, 
	`lua_tou£rd©a
(L, 1)));

430 
	}
}

433 
	$do⁄√w°ack
(
lua_Sèã
 * 
L
)

435 
lua_Sèã
 *
L1
 = 
	`lua_√wthªad
(
L
);

436 
size_t
 
l
;

437 c⁄° *
s
 = 
	`luaL_checkl°rög
(
L
, 1, &
l
);

438 
°©us
 = 
	`luaL_lﬂdbuf„r
(
L1
, 
s
, 
l
, s);

439 i‡(
°©us
 == 0)

440 
°©us
 = 
	`lua_pˇŒ
(
L1
, 0, 0, 0);

441 
	`lua_pushöãgøl
(
L
, 
°©us
);

443 
	}
}

446 
	$s2d
(
lua_Sèã
 * 
L
)

448 
	`lua_pushnumbî
(
L
, *
	`ˇ°
(c⁄° *, 
	`luaL_check°rög
(L, 1)));

450 
	}
}

453 
	$d2s
(
lua_Sèã
 * 
L
)

455 
d
 = 
	`luaL_checknumbî
(
L
, 1);

456 
	`lua_pushl°rög
(
L
, 
	`ˇ°
(*, &
d
), (d));

458 
	}
}

461 
	$√w°©e
(
lua_Sèã
 * 
L
)

463 
lua_Sèã
 *
L1
 = 
	`lua_›í
();

464 i‡(
L1
) {

465 
	`lua_u£r°©e›í
(
L1
);

466 
	`lua_pushöãgøl
(
L
, ()
L1
);

468 
	`lua_pushnû
(
L
);

470 
	}
}

473 
	$lﬂdlib
(
lua_Sèã
 * 
L
)

475 c⁄° 
luaL_ªg
 
libs
[] = {

476 {"m©hlib›í", 
lua›í_m©h
},

477 {"°æib›í", 
lua›í_°rög
},

478 {"iﬁib›í", 
lua›í_io
},

479 {"èblib›í", 
lua›í_èbÀ
},

480 {"dblib›í", 
lua›í_debug
},

481 {"ba£lib›í", 
lua›í_ba£
},

482 {
NULL
, NULL}

484 
lua_Sèã
 *
L1
 = 
	`ˇ°
(lua_State *,

485 
	`ˇ°
(, 
	`luaL_checknumbî
(
L
, 1)));

486 
	`lua_pushvÆue
(
L1
, 
LUA_GLOBALSINDEX
);

487 
	`luaL_›ílib
(
L1
, 
NULL
, 
libs
, 0);

489 
	}
}

492 
	$˛o£°©e
(
lua_Sèã
 * 
L
)

494 
lua_Sèã
 *
L1
 = 
	`ˇ°
÷ua_Sèã *, ca°(, 
	`luaL_checknumbî
(
L
, 1)));

495 
	`lua_˛o£
(
L1
);

496 
	`lua_u∆ock
(
L
);

498 
	}
}

501 
	$d‹emŸe
(
lua_Sèã
 * 
L
)

503 
lua_Sèã
 *
L1
 = 
	`ˇ°
÷ua_Sèã *, ca°(, 
	`luaL_checknumbî
(
L
, 1)));

504 
size_t
 
lcode
;

505 c⁄° *
code
 = 
	`luaL_checkl°rög
(
L
, 2, &
lcode
);

506 
°©us
;

507 
	`lua_£â›
(
L1
, 0);

508 
°©us
 = 
	`luaL_lﬂdbuf„r
(
L1
, 
code
, 
lcode
, code);

509 i‡(
°©us
 == 0)

510 
°©us
 = 
	`lua_pˇŒ
(
L1
, 0, 
LUA_MULTRET
, 0);

511 i‡(
°©us
 != 0) {

512 
	`lua_pushnû
(
L
);

513 
	`lua_pushöãgøl
(
L
, 
°©us
);

514 
	`lua_push°rög
(
L
, 
	`lua_to°rög
(
L1
, -1));

517 
i
 = 0;

518 !
	`lua_i¢⁄e
(
L1
, ++
i
))

519 
	`lua_push°rög
(
L
, 
	`lua_to°rög
(
L1
, 
i
));

520 
	`lua_p›
(
L1
, 
i
 - 1);

521  
i
 - 1;

523 
	}
}

526 
	$log2_aux
(
lua_Sèã
 * 
L
)

528 
	`lua_pushöãgøl
(
L
, 
	`luaO_log2
(
	`luaL_checköt
(L, 1)));

530 
	}
}

533 
	$öt2fb_aux
(
lua_Sèã
 * 
L
)

535 
b
 = 
	`luaO_öt2fb
(
	`luaL_checköt
(
L
, 1));

536 
	`lua_pushöãgøl
(
L
, 
b
);

537 
	`lua_pushöãgøl
(
L
, 
	`fb2öt
(
b
));

539 
	}
}

542 
	$ã°_do
(
lua_Sèã
 * 
L
)

544 c⁄° *
p
 = 
	`luaL_check°rög
(
L
, 1);

545 i‡(*
p
 == '@')

546 
	`lua_dofûe
(
L
, 
p
 + 1);

548 
	`lua_do°rög
(
L
, 
p
);

549  
	`lua_gët›
(
L
);

550 
	}
}

559 c⁄° *c⁄° 
	gdñimôs
 = " \t\n,;";

562 
	$skù
(c⁄° **
pc
)

564 **
pc
 !'\0' && 
	`°rchr
(
dñimôs
, **pc))

565 (*
pc
)++;

566 
	}
}

569 
	$gënum_aux
(
lua_Sèã
 * 
L
, c⁄° **
pc
)

571 
ªs
 = 0;

572 
sig
 = 1;

573 
	`skù
(
pc
);

574 i‡(**
pc
 == '.') {

575 
ªs
 = 
	`ˇ°
(, 
	`lua_t⁄umbî
(
L
, -1));

576 
	`lua_p›
(
L
, 1);

577 (*
pc
)++;

578  
ªs
;

579 } i‡(**
pc
 == '-') {

580 
sig
 = -1;

581 (*
pc
)++;

583 
	`isdigô
(
	`ˇ°
(, **
pc
)))

584 
ªs
 =Ñe†* 10 + (*(*
pc
)++) - '0';

585  
sig
 * 
ªs
;

586 
	}
}

589 
	$gë«me_aux
(*
buff
, c⁄° **
pc
)

591 
i
 = 0;

592 
	`skù
(
pc
);

593 **
pc
 !'\0' && !
	`°rchr
(
dñimôs
, **pc))

594 
buff
[
i
++] = *(*
pc
)++;

595 
buff
[
i
] = '\0';

596  
buff
;

597 
	}
}

599 
	#EQ
(
s1
Ë(
	`°rcmp
(s1, 
ö°
Ë=0)

	)

601 
	#gënum
 (
	`gënum_aux
(
L
, &
pc
))

	)

602 
	#gë«me
 (
	`gë«me_aux
(
buff
, &
pc
))

	)

605 
	$ã°C
(
lua_Sèã
 * 
L
)

607 
buff
[30];

608 c⁄° *
pc
 = 
	`luaL_check°rög
(
L
, 1);

610 c⁄° *
ö°
 = 
gë«me
;

611 
EQ


613 
EQ


615 
	`lua_pushöãgøl
(
L
, 
	`lua_i¢umbî
(L, 
gënum
));

616 } 
EQ


618 
	`lua_pushöãgøl
(
L
, 
	`lua_is°rög
(L, 
gënum
));

619 } 
EQ


621 
	`lua_pushöãgøl
(
L
, 
	`lua_i°abÀ
(L, 
gënum
));

622 } 
EQ


624 
	`lua_pushöãgøl
(
L
, 
	`lua_iscfun˘i⁄
(L, 
gënum
));

625 } 
EQ


627 
	`lua_pushöãgøl
(
L
, 
	`lua_isfun˘i⁄
(L, 
gënum
));

628 } 
EQ


630 
	`lua_pushöãgøl
(
L
, 
	`lua_isu£rd©a
(L, 
gënum
));

631 } 
EQ


633 
	`lua_pushöãgøl
(
L
, 
	`lua_i¶ightu£rd©a
(L, 
gënum
));

634 } 
EQ


636 
	`lua_pushöãgøl
(
L
, 
	`lua_i¢û
(L, 
gënum
));

637 } 
EQ


639 
	`lua_pushöãgøl
(
L
, 
	`lua_i¢⁄e
(L, 
gënum
));

640 } 
EQ


642 
	`lua_pushnumbî
(
L
, 
	`lua_t⁄umbî
(L, 
gënum
));

643 } 
EQ


645 c⁄° *
s
 = 
	`lua_to°rög
(
L
, 
gënum
);

646 
	`lua_push°rög
(
L
, 
s
);

647 } 
EQ


649 
	`lua_pushöãgøl
(
L
, 
	`lua_°æí
(L, 
gënum
));

650 } 
EQ


652 
	`lua_pushcfun˘i⁄
(
L
, 
	`lua_tocfun˘i⁄
(L, 
gënum
));

653 } 
EQ


655  
gënum
;

656 } 
EQ


658 
	`lua_pushöãgøl
(
L
, 
	`lua_gët›
(L));

659 } 
EQ


661 
	`lua_£â›
(
L
, 
gënum
);

662 } 
EQ


664 
	`lua_p›
(
L
, 
gënum
);

665 } 
EQ


667 
	`lua_pushöãgøl
(
L
, 
gënum
);

668 } 
EQ


670 
	`lua_pushnû
(
L
);

671 } 
EQ


673 
	`lua_pushboﬁón
(
L
, 
gënum
);

674 } 
EQ


676 
	`lua_pushöãgøl
(
L
, 
	`lua_toboﬁón
(L, 
gënum
));

677 } 
EQ


679 
	`lua_pushvÆue
(
L
, 
gënum
);

680 } 
EQ


682 
	`lua_pushc˛osuª
(
L
, 
ã°C
, 
gënum
);

683 } 
EQ


685 
	`lua_pushupvÆues
(
L
);

686 } 
EQ


688 
	`lua_ªmove
(
L
, 
gënum
);

689 } 
EQ


691 
	`lua_ö£π
(
L
, 
gënum
);

692 } 
EQ


694 
	`lua_ª∂a˚
(
L
, 
gënum
);

695 } 
EQ


697 
	`lua_gëèbÀ
(
L
, 
gënum
);

698 } 
EQ


700 
	`lua_£âabÀ
(
L
, 
gënum
);

701 } 
EQ


703 
	`lua_√xt
(
L
, -2);

704 } 
EQ


706 
	`lua_c⁄ˇt
(
L
, 
gënum
);

707 } 
EQ


709 
a
 = 
gënum
;

710 
	`lua_pushboﬁón
(
L
, 
	`lua_Às°h™
(L, 
a
, 
gënum
));

711 } 
EQ


713 
a
 = 
gënum
;

714 
	`lua_pushboﬁón
(
L
, 
	`lua_equÆ
(L, 
a
, 
gënum
));

715 } 
EQ


717 
«rg
 = 
gënum
;

718 
ƒes
 = 
gënum
;

719 
	`lua_ˇŒ
(
L
, 
«rg
, 
ƒes
);

720 } 
EQ


722 
«rg
 = 
gënum
;

723 
ƒes
 = 
gënum
;

724 
	`lua_pˇŒ
(
L
, 
«rg
, 
ƒes
, 0);

725 } 
EQ


727 
size_t
 
¶
;

728 c⁄° *
s
 = 
	`luaL_checkl°rög
(
L
, 
gënum
, &
¶
);

729 
	`luaL_lﬂdbuf„r
(
L
, 
s
, 
¶
, s);

730 } 
EQ


732 
	`luaL_lﬂdfûe
(
L
, 
	`luaL_check°rög
(L, 
gënum
));

733 } 
EQ


735 
	`lua_£tmë©abÀ
(
L
, 
gënum
);

736 } 
EQ


738 i‡(
	`lua_gëmë©abÀ
(
L
, 
gënum
) == 0)

739 
	`lua_pushnû
(
L
);

740 } 
EQ


742 
	`lua_push°rög
(
L
, 
	`lua_ty≥«me
(L, 
	`lua_ty≥
(L, 
gënum
)));

743 } 
EQ


745 
i
 = 
gënum
;

746 
	`lua_pushöãgøl
(
L
, 
	`luaL_gën
(L, 
i
));

747 } 
EQ


749 
i
 = 
gënum
;

750 
n
 = 
	`ˇ°
(, 
	`lua_t⁄umbî
(
L
, -1));

751 
	`luaL_£ä
(
L
, 
i
, 
n
);

752 
	`lua_p›
(
L
, 1);

754 
	`luaL_îr‹
(
L
, "unknow¿ö°ru˘i⁄ %s", 
buff
);

757 
	}
}

768 
	$yõldf
(
lua_Sèã
 * 
L
, 
lua_Debug
 * 
¨
)

770 
	`lua_yõld
(
L
, 0);

771 
	}
}

774 
	$£tyhook
(
lua_Sèã
 * 
L
)

776 i‡(
	`lua_i¢⁄e‹nû
(
L
, 1))

777 
	`lua_£thook
(
L
, 
NULL
, 0, 0);

779 c⁄° *
smask
 = 
	`luaL_check°rög
(
L
, 1);

780 
cou¡
 = 
	`luaL_›töt
(
L
, 2, 0);

781 
mask
 = 0;

782 i‡(
	`°rchr
(
smask
, 'l'))

783 
mask
 |
LUA_MASKLINE
;

784 i‡(
cou¡
 > 0)

785 
mask
 |
LUA_MASKCOUNT
;

786 
	`lua_£thook
(
L
, 
yõldf
, 
mask
, 
cou¡
);

789 
	}
}

792 
	$c‹esume
(
lua_Sèã
 * 
L
)

794 
°©us
;

795 
lua_Sèã
 *
co
 = 
	`lua_tŸhªad
(
L
, 1);

796 
	`luaL_¨gcheck
(
L
, 
co
, 1, "coroutineÉxpected");

797 
°©us
 = 
	`lua_ªsume
(
co
, 0);

798 i‡(
°©us
 != 0) {

799 
	`lua_pushboﬁón
(
L
, 0);

800 
	`lua_ö£π
(
L
, -2);

803 
	`lua_pushboﬁón
(
L
, 1);

806 
	}
}

810 c⁄° 
luaL_ªg
 
	gã°s_funcs
[] = {

811 {"hash", 
hash_quîy
},

812 {"limôs", 
gë_limôs
},

813 {"li°code", 
li°code
},

814 {"li°k", 
li°k
},

815 {"li°loˇls", 
li°loˇls
},

816 {"lﬂdlib", 
lﬂdlib
},

817 {"°ackÀvñ", 
°ackÀvñ
},

818 {"quîy°r", 
°rög_quîy
},

819 {"quîyèb", 
èbÀ_quîy
},

820 {"doô", 
ã°_do
},

821 {"ã°C", 
ã°C
},

822 {"ªf", 
åef
},

823 {"gëªf", 
gëªf
},

824 {"uƒef", 
uƒef
},

825 {"d2s", 
d2s
},

826 {"s2d", 
s2d
},

827 {"më©abÀ", 
më©abÀ
},

828 {"upvÆue", 
upvÆue
},

829 {"√wu£rd©a", 
√wu£rd©a
},

830 {"pushu£rd©a", 
pushu£rd©a
},

831 {"ud©avÆ", 
ud©avÆ
},

832 {"do⁄√w°ack", 
do⁄√w°ack
},

833 {"√w°©e", 
√w°©e
},

834 {"˛o£°©e", 
˛o£°©e
},

835 {"d‹emŸe", 
d‹emŸe
},

836 {"log2", 
log2_aux
},

837 {"öt2fb", 
öt2fb_aux
},

838 {"tŸÆmem", 
mem_quîy
},

839 {"ªsume", 
c‹esume
},

840 {"£tyhook", 
£tyhook
},

841 {
NULL
, NULL}

845 
	$fim
()

847 i‡(!
i¶ocked
)

848 
	`lua_˛o£
(
lua_°©e
);

849 
	`lua_as£π
(
memdebug_numblocks
 == 0);

850 
	`lua_as£π
(
memdebug_tŸÆ
 == 0);

851 
	}
}

854 
	$l_∑nic
(
lua_Sèã
 * 
L
)

856 
	`UNUSED
(
L
);

857 
	`Ârötf
(
°dîr
, "unableÅoÑecover;Éxiting\n");

859 
	}
}

862 
	$luaB_›íã°s
(
lua_Sèã
 * 
L
)

864 
	`lua_©∑nic
(
L
, 
l_∑nic
);

865 
	`lua_u£r°©e›í
(
L
);

866 
lua_°©e
 = 
L
;

867 
	`luaL_›ílib
(
L
, "T", 
ã°s_funcs
, 0);

868 
	`©exô
(
fim
);

870 
	}
}

872 #unde‡
maö


874 
	$maö
(
¨gc
, *
¨gv
[])

876 *
limô
 = 
	`gëív
("MEMLIMIT");

877 i‡(
limô
)

878 
memdebug_memlimô
 = 
	`°πoul
(
limô
, 
NULL
, 10);

879 
	`l_maö
(
¨gc
, 
¨gv
);

881 
	}
}

	@lib/tas/src/lua/ltm.c

7 
	~<°rög.h
>

9 
	#…m_c


	)

11 
	~"lua.h
"

13 
	~"lobje˘.h
"

14 
	~"l°©e.h
"

15 
	~"l°rög.h
"

16 
	~"…abÀ.h
"

17 
	~"…m.h
"

19 c⁄° *c⁄° 
	gluaT_ty≥«mes
[] = {

25 
	$luaT_öô
(
lua_Sèã
 * 
L
)

27 c⁄° *c⁄° 
luaT_evíäame
[] = {

34 
i
;

35 
i
 = 0; i < 
TM_N
; i++) {

36 
	`G
(
L
)->
tm«me
[
i
] = 
	`luaS_√w
(L, 
luaT_evíäame
[i]);

37 
	`luaS_fix
(
	`G
(
L
)->
tm«me
[
i
]);

39 
	}
}

45 c⁄° 
TObje˘
 *

46 
	$luaT_gëtm
(
TabÀ
 * 
evíts
, 
TMS
 
evít
, 
TSåög
 * 
íame
)

48 c⁄° 
TObje˘
 *
tm
 = 
	`luaH_gë°r
(
evíts
, 
íame
);

49 
	`lua_as£π
(
evít
 <
TM_EQ
);

50 i‡(
	`âi¢û
(
tm
)) {

51 
evíts
->
Êags
 |
	`ˇ°
(
lu_byã
, 1u << 
evít
);

52  
NULL
;

54  
tm
;

55 
	}
}

57 c⁄° 
TObje˘
 *

58 
	$luaT_gëtmbyobj
(
lua_Sèã
 * 
L
, c⁄° 
TObje˘
 * 
o
, 
TMS
 
evít
)

60 
TSåög
 *
íame
 = 
	`G
(
L
)->
tm«me
[
evít
];

61 
	`ây≥
(
o
)) {

62 
LUA_TTABLE
:

63  
	`luaH_gë°r
(
	`hvÆue
(
o
)->
më©abÀ
, 
íame
);

64 
LUA_TUSERDATA
:

65  
	`luaH_gë°r
(
	`uvÆue
(
o
)->
uv
.
më©abÀ
, 
íame
);

67  &
luaO_nûobje˘
;

69 
	}
}

	@lib/tas/src/lua/ltm.h

7 #i‚de‡
…m_h


8 
	#…m_h


	)

10 
	~"lobje˘.h
"

17 
	mTM_INDEX
,

18 
	mTM_NEWINDEX
,

19 
	mTM_GC
,

20 
	mTM_MODE
,

21 
	mTM_EQ
,

22 
	mTM_ADD
,

23 
	mTM_SUB
,

24 
	mTM_MUL
,

25 
	mTM_DIV
,

26 
	mTM_POW
,

27 
	mTM_UNM
,

28 
	mTM_LT
,

29 
	mTM_LE
,

30 
	mTM_CONCAT
,

31 
	mTM_CALL
,

32 
	mTM_N


33 } 
	tTMS
;

35 
	#gÁ°tm
(
g
,
ë
,
e
) \

36 (((
ë
)->
Êags
 & (1u<<(
e
))Ë? 
NULL
 : 
	`luaT_gëtm
”t,É, (
g
)->
tm«me
[e]))

	)

38 
	#Á°tm
(
l
,
ë
,
e
Ë
	`gÁ°tm
(
	`G
÷),Ét,É)

	)

40 c⁄° 
TObje˘
 *
luaT_gëtm
(
TabÀ
 * 
evíts
, 
TMS
 
evít
, 
TSåög
 * 
íame
);

41 c⁄° 
TObje˘
 *
luaT_gëtmbyobj
(
lua_Sèã
 * 
L
, c⁄° TObje˘ * 
o
, 
TMS
 
evít
);

42 
luaT_öô
(
lua_Sèã
 * 
L
);

44 c⁄° *c⁄° 
luaT_ty≥«mes
[];

	@lib/tas/src/lua/lua.h

9 #i‚de‡
lua_h


10 
	#lua_h


	)

12 
	~<°d¨g.h
>

13 
	~<°ddef.h
>

15 
	#LUA_VERSION
 "Lu®5.0.2"

	)

16 
	#LUA_COPYRIGHT
 "C›yrighà(CË1994-2004 Tecgøf, PUC-Rio"

	)

17 
	#LUA_AUTHORS
 "R. Iîußlimschy, L. H. dêFigueúedÿ& W. Cñes"

	)

20 
	#LUA_MULTRET
 (-1)

	)

25 
	#LUA_REGISTRYINDEX
 (-10000)

	)

26 
	#LUA_GLOBALSINDEX
 (-10001)

	)

27 
	#lua_upvÆueödex
(
i
Ë(
LUA_GLOBALSINDEX
-(i))

	)

30 
	#LUA_ERRRUN
 1

	)

31 
	#LUA_ERRFILE
 2

	)

32 
	#LUA_ERRSYNTAX
 3

	)

33 
	#LUA_ERRMEM
 4

	)

34 
	#LUA_ERRERR
 5

	)

36 
lua_Sèã
 
	tlua_Sèã
;

38 (*
	tlua_CFun˘i⁄
Ë(
	tlua_Sèã
 * 
	tL
);

43 c⁄° *(*
	tlua_Chunkªadî
Ë(
	tlua_Sèã
 * 
	tL
, *
	tud
, 
	tsize_t
 * 
	tsz
);

45 (*
	tlua_Chunkwrôî
Ë(
	tlua_Sèã
 * 
	tL
, c⁄° *
	tp
, 
	tsize_t
 
	tsz
, *
	tud
);

50 
	#LUA_TNONE
 (-1)

	)

52 
	#LUA_TNIL
 0

	)

53 
	#LUA_TBOOLEAN
 1

	)

54 
	#LUA_TLIGHTUSERDATA
 2

	)

55 
	#LUA_TNUMBER
 3

	)

56 
	#LUA_TSTRING
 4

	)

57 
	#LUA_TTABLE
 5

	)

58 
	#LUA_TFUNCTION
 6

	)

59 
	#LUA_TUSERDATA
 7

	)

60 
	#LUA_TTHREAD
 8

	)

63 
	#LUA_MINSTACK
 20

	)

68 #ifde‡
LUA_USER_H


69 #ö˛udê
LUA_USER_H


73 #i‚de‡
LUA_NUMBER


74 
	tlua_Numbî
;

76 
LUA_NUMBER
 
	tlua_Numbî
;

80 #i‚de‡
LUA_API


81 
	#LUA_API
 

	)

87 
LUA_API
 
lua_Sèã
 *
	`lua_›í
();

88 
LUA_API
 
	`lua_˛o£
(
lua_Sèã
 * 
L
);

89 
LUA_API
 
lua_Sèã
 *
	`lua_√wthªad
÷ua_Sèã * 
L
);

91 
LUA_API
 
lua_CFun˘i⁄
 
	`lua_©∑nic
(
lua_Sèã
 * 
L
,Üua_CFun˘i⁄ 
∑nicf
);

96 
LUA_API
 
	`lua_gët›
(
lua_Sèã
 * 
L
);

97 
LUA_API
 
	`lua_£â›
(
lua_Sèã
 * 
L
, 
idx
);

98 
LUA_API
 
	`lua_pushvÆue
(
lua_Sèã
 * 
L
, 
idx
);

99 
LUA_API
 
	`lua_ªmove
(
lua_Sèã
 * 
L
, 
idx
);

100 
LUA_API
 
	`lua_ö£π
(
lua_Sèã
 * 
L
, 
idx
);

101 
LUA_API
 
	`lua_ª∂a˚
(
lua_Sèã
 * 
L
, 
idx
);

102 
LUA_API
 
	`lua_check°ack
(
lua_Sèã
 * 
L
, 
sz
);

104 
LUA_API
 
	`lua_xmove
(
lua_Sèã
 * 
‰om
,Üua_Sèã * 
to
, 
n
);

110 
LUA_API
 
	`lua_i¢umbî
(
lua_Sèã
 * 
L
, 
idx
);

111 
LUA_API
 
	`lua_is°rög
(
lua_Sèã
 * 
L
, 
idx
);

112 
LUA_API
 
	`lua_iscfun˘i⁄
(
lua_Sèã
 * 
L
, 
idx
);

113 
LUA_API
 
	`lua_isu£rd©a
(
lua_Sèã
 * 
L
, 
idx
);

114 
LUA_API
 
	`lua_ty≥
(
lua_Sèã
 * 
L
, 
idx
);

115 
LUA_API
 c⁄° *
	`lua_ty≥«me
(
lua_Sèã
 * 
L
, 
ç
);

117 
LUA_API
 
	`lua_equÆ
(
lua_Sèã
 * 
L
, 
idx1
, 
idx2
);

118 
LUA_API
 
	`lua_øwequÆ
(
lua_Sèã
 * 
L
, 
idx1
, 
idx2
);

119 
LUA_API
 
	`lua_Às°h™
(
lua_Sèã
 * 
L
, 
idx1
, 
idx2
);

121 
LUA_API
 
lua_Numbî
 
	`lua_t⁄umbî
(
lua_Sèã
 * 
L
, 
idx
);

122 
LUA_API
 
	`lua_toboﬁón
(
lua_Sèã
 * 
L
, 
idx
);

123 
LUA_API
 c⁄° *
	`lua_to°rög
(
lua_Sèã
 * 
L
, 
idx
);

124 
LUA_API
 
size_t
 
	`lua_°æí
(
lua_Sèã
 * 
L
, 
idx
);

125 
LUA_API
 
lua_CFun˘i⁄
 
	`lua_tocfun˘i⁄
(
lua_Sèã
 * 
L
, 
idx
);

126 
LUA_API
 *
	`lua_tou£rd©a
(
lua_Sèã
 * 
L
, 
idx
);

127 
LUA_API
 
lua_Sèã
 *
	`lua_tŸhªad
÷ua_Sèã * 
L
, 
idx
);

128 
LUA_API
 c⁄° *
	`lua_t›oöãr
(
lua_Sèã
 * 
L
, 
idx
);

133 
LUA_API
 
	`lua_pushnû
(
lua_Sèã
 * 
L
);

134 
LUA_API
 
	`lua_pushnumbî
(
lua_Sèã
 * 
L
, 
lua_Numbî
 
n
);

135 
LUA_API
 
	`lua_pushl°rög
(
lua_Sèã
 * 
L
, c⁄° *
s
, 
size_t
 
l
);

136 
LUA_API
 
	`lua_push°rög
(
lua_Sèã
 * 
L
, c⁄° *
s
);

137 
LUA_API
 c⁄° *
	`lua_pushvf°rög
(
lua_Sèã
 * 
L
, c⁄° *
fmt
, 
va_li°
 
¨gp
);

138 
LUA_API
 c⁄° *
	`lua_pushf°rög
(
lua_Sèã
 * 
L
, c⁄° *
fmt
, ...);

139 
LUA_API
 
	`lua_pushc˛osuª
(
lua_Sèã
 * 
L
, 
lua_CFun˘i⁄
 
‚
, 
n
);

140 
LUA_API
 
	`lua_pushboﬁón
(
lua_Sèã
 * 
L
, 
b
);

141 
LUA_API
 
	`lua_pushlightu£rd©a
(
lua_Sèã
 * 
L
, c⁄° *
p
);

146 
LUA_API
 
	`lua_gëèbÀ
(
lua_Sèã
 * 
L
, 
idx
);

147 
LUA_API
 
	`lua_øwgë
(
lua_Sèã
 * 
L
, 
idx
);

148 
LUA_API
 
	`lua_øwgëi
(
lua_Sèã
 * 
L
, 
idx
, 
n
);

149 
LUA_API
 
	`lua_√wèbÀ
(
lua_Sèã
 * 
L
);

150 
LUA_API
 *
	`lua_√wu£rd©a
(
lua_Sèã
 * 
L
, 
size_t
 
sz
);

151 
LUA_API
 
	`lua_gëmë©abÀ
(
lua_Sèã
 * 
L
, 
objödex
);

152 
LUA_API
 
	`lua_gë„nv
(
lua_Sèã
 * 
L
, 
idx
);

157 
LUA_API
 
	`lua_£âabÀ
(
lua_Sèã
 * 
L
, 
idx
);

158 
LUA_API
 
	`lua_øw£t
(
lua_Sèã
 * 
L
, 
idx
);

159 
LUA_API
 
	`lua_øw£ti
(
lua_Sèã
 * 
L
, 
idx
, 
n
);

160 
LUA_API
 
	`lua_£tmë©abÀ
(
lua_Sèã
 * 
L
, 
objödex
);

161 
LUA_API
 
	`lua_£t„nv
(
lua_Sèã
 * 
L
, 
idx
);

166 
LUA_API
 
	`lua_ˇŒ
(
lua_Sèã
 * 
L
, 
«rgs
, 
ƒesu…s
);

167 
LUA_API
 
	`lua_pˇŒ
(
lua_Sèã
 * 
L
, 
«rgs
, 
ƒesu…s
, 
îrfunc
);

168 
LUA_API
 
	`lua_˝ˇŒ
(
lua_Sèã
 * 
L
, 
lua_CFun˘i⁄
 
func
, *
ud
);

169 
LUA_API
 
	`lua_lﬂd
(
lua_Sèã
 * 
L
, 
lua_Chunkªadî
 
ªadî
, *
dt
, c⁄° *
chunk«me
);

171 
LUA_API
 
	`lua_dump
(
lua_Sèã
 * 
L
, 
lua_Chunkwrôî
 
wrôî
, *
d©a
);

176 
LUA_API
 
	`lua_yõld
(
lua_Sèã
 * 
L
, 
ƒesu…s
);

177 
LUA_API
 
	`lua_ªsume
(
lua_Sèã
 * 
L
, 
«rg
);

182 
LUA_API
 
	`lua_gëg˘hªshﬁd
(
lua_Sèã
 * 
L
);

183 
LUA_API
 
	`lua_gëgccou¡
(
lua_Sèã
 * 
L
);

184 
LUA_API
 
	`lua_£tg˘hªshﬁd
(
lua_Sèã
 * 
L
, 
√wthªshﬁd
);

190 
LUA_API
 c⁄° *
	`lua_vîsi⁄
();

192 
LUA_API
 
	$lua_îr‹
(
lua_Sèã
 * 
L
Ë
	`__©åibuã__
 ((
n‹ëu∫
));

194 
LUA_API
 
	`lua_√xt
(
lua_Sèã
 * 
L
, 
idx
);

196 
LUA_API
 
	`lua_c⁄ˇt
(
lua_Sèã
 * 
L
, 
n
);

204 
	#lua_boxpoöãr
(
L
,
u
) \

205 (*(**)(
	`lua_√wu£rd©a
(
L
, (*))Ë(
u
))

	)

207 
	#lua_unboxpoöãr
(
L
,
i
Ë(*(**)(
	`lua_tou£rd©a
(L, i)))

	)

209 
	#lua_p›
(
L
,
n
Ë
	`lua_£â›
(L, -“)-1)

	)

211 
	#lua_ªgi°î
(
L
,
n
,
f
) \

212 (
	`lua_push°rög
(
L
, 
n
), \

213 
	`lua_pushcfun˘i⁄
(
L
, 
f
), \

214 
	`lua_£âabÀ
(
L
, 
LUA_GLOBALSINDEX
))

	)

216 
	#lua_pushcfun˘i⁄
(
L
,
f
Ë
	`lua_pushc˛osuª
(L, f, 0)

	)

218 
	#lua_isfun˘i⁄
(
L
,
n
Ë(
	`lua_ty≥
(L,nË=
LUA_TFUNCTION
)

	)

219 
	#lua_i°abÀ
(
L
,
n
Ë(
	`lua_ty≥
(L,nË=
LUA_TTABLE
)

	)

220 
	#lua_i¶ightu£rd©a
(
L
,
n
Ë(
	`lua_ty≥
(L,nË=
LUA_TLIGHTUSERDATA
)

	)

221 
	#lua_i¢û
(
L
,
n
Ë(
	`lua_ty≥
(L,nË=
LUA_TNIL
)

	)

222 
	#lua_isboﬁón
(
L
,
n
Ë(
	`lua_ty≥
(L,nË=
LUA_TBOOLEAN
)

	)

223 
	#lua_i¢⁄e
(
L
,
n
Ë(
	`lua_ty≥
(L,nË=
LUA_TNONE
)

	)

224 
	#lua_i¢⁄e‹nû
(
L
, 
n
Ë(
	`lua_ty≥
(L,nË<0)

	)

226 
	#lua_pushlôîÆ
(
L
, 
s
) \

227 
	`lua_pushl°rög
(
L
, "" 
s
, ((s)/())-1)

	)

233 
LUA_API
 
	`lua_pushupvÆues
(
lua_Sèã
 * 
L
);

235 
	#lua_gëªgi°ry
(
L
Ë
	`lua_pushvÆue
(L, 
LUA_REGISTRYINDEX
)

	)

236 
	#lua_£tglobÆ
(
L
,
s
) \

237 (
	`lua_push°rög
(
L
, 
s
), 
	`lua_ö£π
(L, -2), 
	`lua_£âabÀ
(L, 
LUA_GLOBALSINDEX
))

	)

239 
	#lua_gëglobÆ
(
L
,
s
) \

240 (
	`lua_push°rög
(
L
, 
s
), 
	`lua_gëèbÀ
(L, 
LUA_GLOBALSINDEX
))

	)

245 
	#LUA_NOREF
 (-2)

	)

246 
	#LUA_REFNIL
 (-1)

	)

248 
	#lua_ªf
(
L
,
lock
Ë(÷ockË? 
	`luaL_ªf
(L, 
LUA_REGISTRYINDEX
) : \

249 (
	`lua_push°rög
(
L
, "u∆ockedÑe„ªn˚†¨êobsﬁëe"), 
	`lua_îr‹
(L), 0))

	)

251 
	#lua_uƒef
(
L
,
ªf
Ë
	`luaL_uƒef
(L, 
LUA_REGISTRYINDEX
, (ªf))

	)

253 
	#lua_gëªf
(
L
,
ªf
Ë
	`lua_øwgëi
(L, 
LUA_REGISTRYINDEX
,Ñef)

	)

262 #i‚de‡
LUA_NUMBER_SCAN


263 
	#LUA_NUMBER_SCAN
 "%lf"

	)

266 #i‚de‡
LUA_NUMBER_FMT


267 
	#LUA_NUMBER_FMT
 "%.14g"

	)

281 
	#LUA_HOOKCALL
 0

	)

282 
	#LUA_HOOKRET
 1

	)

283 
	#LUA_HOOKLINE
 2

	)

284 
	#LUA_HOOKCOUNT
 3

	)

285 
	#LUA_HOOKTAILRET
 4

	)

290 
	#LUA_MASKCALL
 (1 << 
LUA_HOOKCALL
)

	)

291 
	#LUA_MASKRET
 (1 << 
LUA_HOOKRET
)

	)

292 
	#LUA_MASKLINE
 (1 << 
LUA_HOOKLINE
)

	)

293 
	#LUA_MASKCOUNT
 (1 << 
LUA_HOOKCOUNT
)

	)

295 
lua_Debug
 
	tlua_Debug
;

297 (*
	tlua_Hook
Ë(
	tlua_Sèã
 * 
	tL
, 
	tlua_Debug
 * 
	t¨
);

299 
LUA_API
 
	`lua_gë°ack
(
lua_Sèã
 * 
L
, 
Àvñ
, 
lua_Debug
 * 
¨
);

300 
LUA_API
 
	`lua_gëöfo
(
lua_Sèã
 * 
L
, c⁄° *
wh©
, 
lua_Debug
 * 
¨
);

301 
LUA_API
 c⁄° *
	`lua_gëloˇl
(
lua_Sèã
 * 
L
, c⁄° 
lua_Debug
 * 
¨
, 
n
);

302 
LUA_API
 c⁄° *
	`lua_£éoˇl
(
lua_Sèã
 * 
L
, c⁄° 
lua_Debug
 * 
¨
, 
n
);

303 
LUA_API
 c⁄° *
	`lua_gëupvÆue
(
lua_Sèã
 * 
L
, 
funcödex
, 
n
);

304 
LUA_API
 c⁄° *
	`lua_£tupvÆue
(
lua_Sèã
 * 
L
, 
funcödex
, 
n
);

306 
LUA_API
 
	`lua_£thook
(
lua_Sèã
 * 
L
, 
lua_Hook
 
func
, 
mask
, 
cou¡
);

307 
LUA_API
 
lua_Hook
 
	`lua_gëhook
(
lua_Sèã
 * 
L
);

308 
LUA_API
 
	`lua_gëhookmask
(
lua_Sèã
 * 
L
);

309 
LUA_API
 
	`lua_gëhookcou¡
(
lua_Sèã
 * 
L
);

311 
	#LUA_IDSIZE
 60

	)

313 
	slua_Debug
 {

314 
evít
;

315 c⁄° *
«me
;

316 c⁄° *
«mewh©
;

317 c⁄° *
wh©
;

318 c⁄° *
sour˚
;

319 
cuºíéöe
;

320 
nups
;

321 
löedeföed
;

322 
sh‹t_§c
[
LUA_IDSIZE
];

324 
i_ci
;

	@lib/tas/src/lua/lualib.h

7 #i‚de‡
luÆib_h


8 
	#luÆib_h


	)

10 
	~"lua.h
"

12 #i‚de‡
LUALIB_API


13 
	#LUALIB_API
 
LUA_API


	)

16 
	#LUA_COLIBNAME
 "c‹outöe"

	)

17 
LUALIB_API
 
lua›í_ba£
(
lua_Sèã
 * 
L
);

19 
	#LUA_TABLIBNAME
 "èbÀ"

	)

20 
LUALIB_API
 
lua›í_èbÀ
(
lua_Sèã
 * 
L
);

22 
	#LUA_IOLIBNAME
 "io"

	)

23 
	#LUA_OSLIBNAME
 "os"

	)

24 
LUALIB_API
 
lua›í_io
(
lua_Sèã
 * 
L
);

26 
	#LUA_STRLIBNAME
 "°rög"

	)

27 
LUALIB_API
 
lua›í_°rög
(
lua_Sèã
 * 
L
);

29 
	#LUA_MATHLIBNAME
 "m©h"

	)

30 
LUALIB_API
 
lua›í_m©h
(
lua_Sèã
 * 
L
);

32 
	#LUA_DBLIBNAME
 "debug"

	)

33 
LUALIB_API
 
lua›í_debug
(
lua_Sèã
 * 
L
);

35 
LUALIB_API
 
lua›í_lﬂdlib
(
lua_Sèã
 * 
L
);

38 #i‚de‡
lua_as£π


39 
	#lua_as£π
(
c
Ë

	)

43 
	#lua_ba£lib›í
 
lua›í_ba£


	)

44 
	#lua_èblib›í
 
lua›í_èbÀ


	)

45 
	#lua_iﬁib›í
 
lua›í_io


	)

46 
	#lua_°æib›í
 
lua›í_°rög


	)

47 
	#lua_m©hlib›í
 
lua›í_m©h


	)

48 
	#lua_dblib›í
 
lua›í_debug


	)

	@lib/tas/src/lua/lundump.c

7 
	#lundump_c


	)

9 
	~"lua.h
"

11 
	~"ldebug.h
"

12 
	~"lfunc.h
"

13 
	~"lmem.h
"

14 
	~"l›codes.h
"

15 
	~"l°rög.h
"

16 
	~"lundump.h
"

17 
	~"lzio.h
"

19 
	#LﬂdByã
 (
lu_byã
Ë
ezgëc


	)

22 
lua_Sèã
 *
	mL
;

23 
ZIO
 *
	mZ
;

24 
Mbuf„r
 *
	mb
;

25 
	msw≠
;

26 c⁄° *
	m«me
;

27 } 
	tLﬂdSèã
;

29 
	$u√x≥˘edEOZ
(
LﬂdSèã
 * 
S
Ë
	`__©åibuã__
 ((
n‹ëu∫
));

32 
	$u√x≥˘edEOZ
(
LﬂdSèã
 * 
S
)

34 
	`luaG_ru√º‹
(
S
->
L
, "u√x≥˘edÉnd o‡fûêö %s", S->
«me
);

35 
	}
}

38 
	$ezgëc
(
LﬂdSèã
 * 
S
)

40 
c
 = 
	`zgëc
(
S
->
Z
);

41 i‡(
c
 =
EOZ
)

42 
	`u√x≥˘edEOZ
(
S
);

43  
c
;

44 
	}
}

47 
	$ezªad
(
LﬂdSèã
 * 
S
, *
b
, 
n
)

49 
r
 = 
	`luaZ_ªad
(
S
->
Z
, 
b
, 
n
);

50 i‡(
r
 != 0)

51 
	`u√x≥˘edEOZ
(
S
);

52 
	}
}

55 
	$LﬂdBlock
(
LﬂdSèã
 * 
S
, *
b
, 
size_t
 
size
)

57 i‡(
S
->
sw≠
) {

58 *
p
 = (*)
b
 + 
size
 - 1;

59 
n
 = 
size
;

60 
n
--)

61 *
p
-- = ()
	`ezgëc
(
S
);

63 
	`ezªad
(
S
, 
b
, 
size
);

64 
	}
}

67 
	$LﬂdVe˘‹
(
LﬂdSèã
 * 
S
, *
b
, 
m
, 
size_t
 
size
)

69 i‡(
S
->
sw≠
) {

70 *
q
 = (*)
b
;

71 
m
--) {

72 *
p
 = 
q
 + 
size
 - 1;

73 
n
 = 
size
;

74 
n
--)

75 *
p
-- = ()
	`ezgëc
(
S
);

76 
q
 +
size
;

79 
	`ezªad
(
S
, 
b
, 
m
 * 
size
);

80 
	}
}

83 
	$LﬂdI¡
(
LﬂdSèã
 * 
S
)

85 
x
;

86 
	`LﬂdBlock
(
S
, &
x
, (x));

87 i‡(
x
 < 0)

88 
	`luaG_ru√º‹
(
S
->
L
, "bad i¡egî i¿%s", S->
«me
);

89  
x
;

90 
	}
}

92 
size_t


93 
	$LﬂdSize
(
LﬂdSèã
 * 
S
)

95 
size_t
 
x
;

96 
	`LﬂdBlock
(
S
, &
x
, (x));

97  
x
;

98 
	}
}

100 
lua_Numbî


101 
	$LﬂdNumbî
(
LﬂdSèã
 * 
S
)

103 
lua_Numbî
 
x
;

104 
	`LﬂdBlock
(
S
, &
x
, (x));

105  
x
;

106 
	}
}

108 
TSåög
 *

109 
	$LﬂdSåög
(
LﬂdSèã
 * 
S
)

111 
size_t
 
size
 = 
	`LﬂdSize
(
S
);

112 i‡(
size
 == 0)

113  
NULL
;

115 *
s
 = 
	`luaZ_›í•a˚
(
S
->
L
, S->
b
, 
size
);

116 
	`ezªad
(
S
, 
s
, 
size
);

117  
	`luaS_√wl°r
(
S
->
L
, 
s
, 
size
 - 1);

119 
	}
}

122 
	$LﬂdCode
(
LﬂdSèã
 * 
S
, 
PrŸo
 * 
f
)

124 
size
 = 
	`LﬂdI¡
(
S
);

125 
f
->
code
 = 
	`luaM_√wve˘‹
(
S
->
L
, 
size
, 
In°ru˘i⁄
);

126 
f
->
sizecode
 = 
size
;

127 
	`LﬂdVe˘‹
(
S
, 
f
->
code
, 
size
, (*f->code));

128 
	}
}

131 
	$LﬂdLoˇls
(
LﬂdSèã
 * 
S
, 
PrŸo
 * 
f
)

133 
i
, 
n
;

134 
n
 = 
	`LﬂdI¡
(
S
);

135 
f
->
locv¨s
 = 
	`luaM_√wve˘‹
(
S
->
L
, 
n
, 
LocV¨
);

136 
f
->
sizñocv¨s
 = 
n
;

137 
i
 = 0; i < 
n
; i++) {

138 
f
->
locv¨s
[
i
].
v¨«me
 = 
	`LﬂdSåög
(
S
);

139 
f
->
locv¨s
[
i
].
°¨çc
 = 
	`LﬂdI¡
(
S
);

140 
f
->
locv¨s
[
i
].
ídpc
 = 
	`LﬂdI¡
(
S
);

142 
	}
}

145 
	$LﬂdLöes
(
LﬂdSèã
 * 
S
, 
PrŸo
 * 
f
)

147 
size
 = 
	`LﬂdI¡
(
S
);

148 
f
->
löeöfo
 = 
	`luaM_√wve˘‹
(
S
->
L
, 
size
, );

149 
f
->
sizñöeöfo
 = 
size
;

150 
	`LﬂdVe˘‹
(
S
, 
f
->
löeöfo
, 
size
, (*f->lineinfo));

151 
	}
}

154 
	$LﬂdUpvÆues
(
LﬂdSèã
 * 
S
, 
PrŸo
 * 
f
)

156 
i
, 
n
;

157 
n
 = 
	`LﬂdI¡
(
S
);

158 i‡(
n
 !0 &&Ç !
f
->
nups
)

159 
	`luaG_ru√º‹
(
S
->
L
, "badÇupvÆue†ö %s:Ñód %d;Éx≥˘ed %d", S->
«me
, 
n
, 
f
->
nups
);

160 
f
->
upvÆues
 = 
	`luaM_√wve˘‹
(
S
->
L
, 
n
, 
TSåög
 *);

161 
f
->
sizeupvÆues
 = 
n
;

162 
i
 = 0; i < 
n
; i++)

163 
f
->
upvÆues
[
i
] = 
	`LﬂdSåög
(
S
);

164 
	}
}

166 
PrŸo
 *
LﬂdFun˘i⁄
(
LﬂdSèã
 * 
S
, 
TSåög
 * 
p
);

169 
	$LﬂdC⁄°™ts
(
LﬂdSèã
 * 
S
, 
PrŸo
 * 
f
)

171 
i
, 
n
;

172 
n
 = 
	`LﬂdI¡
(
S
);

173 
f
->
k
 = 
	`luaM_√wve˘‹
(
S
->
L
, 
n
, 
TObje˘
);

174 
f
->
sizek
 = 
n
;

175 
i
 = 0; i < 
n
; i++) {

176 
TObje˘
 *
o
 = &
f
->
k
[
i
];

177 
t
 = 
	`LﬂdByã
(
S
);

178 
t
) {

179 
LUA_TNUMBER
:

180 
	`£ävÆue
(
o
, 
	`LﬂdNumbî
(
S
));

182 
LUA_TSTRING
:

183 
	`£tsvÆue2n
(
o
, 
	`LﬂdSåög
(
S
));

185 
LUA_TNIL
:

186 
	`£äûvÆue
(
o
);

189 
	`luaG_ru√º‹
(
S
->
L
, "bad c⁄°™àty≥ (%dËö %s", 
t
, S->
«me
);

193 
n
 = 
	`LﬂdI¡
(
S
);

194 
f
->
p
 = 
	`luaM_√wve˘‹
(
S
->
L
, 
n
, 
PrŸo
 *);

195 
f
->
sizï
 = 
n
;

196 
i
 = 0; i < 
n
; i++)

197 
f
->
p
[
i
] = 
	`LﬂdFun˘i⁄
(
S
, f->
sour˚
);

198 
	}
}

200 
PrŸo
 *

201 
	$LﬂdFun˘i⁄
(
LﬂdSèã
 * 
S
, 
TSåög
 * 
p
)

203 
PrŸo
 *
f
 = 
	`luaF_√w¥Ÿo
(
S
->
L
);

204 
f
->
sour˚
 = 
	`LﬂdSåög
(
S
);

205 i‡(
f
->
sour˚
 =
NULL
)

206 
f
->
sour˚
 = 
p
;

207 
f
->
löeDeföed
 = 
	`LﬂdI¡
(
S
);

208 
f
->
nups
 = 
	`LﬂdByã
(
S
);

209 
f
->
num∑øms
 = 
	`LﬂdByã
(
S
);

210 
f
->
is_v¨¨g
 = 
	`LﬂdByã
(
S
);

211 
f
->
max°acksize
 = 
	`LﬂdByã
(
S
);

212 
	`LﬂdLöes
(
S
, 
f
);

213 
	`LﬂdLoˇls
(
S
, 
f
);

214 
	`LﬂdUpvÆues
(
S
, 
f
);

215 
	`LﬂdC⁄°™ts
(
S
, 
f
);

216 
	`LﬂdCode
(
S
, 
f
);

217 #i‚de‡
TRUST_BINARIES


218 i‡(!
	`luaG_checkcode
(
f
))

219 
	`luaG_ru√º‹
(
S
->
L
, "bad codêö %s", S->
«me
);

221  
f
;

222 
	}
}

225 
	$LﬂdSig«tuª
(
LﬂdSèã
 * 
S
)

227 c⁄° *
s
 = 
LUA_SIGNATURE
;

228 *
s
 !0 && 
	`ezgëc
(
S
) == *s)

229 ++
s
;

230 i‡(*
s
 != 0)

231 
	`luaG_ru√º‹
(
S
->
L
, "bad sig«tuª i¿%s", S->
«me
);

232 
	}
}

235 
	$Te°Size
(
LﬂdSèã
 * 
S
, 
s
, c⁄° *
wh©
)

237 
r
 = 
	`LﬂdByã
(
S
);

238 i‡(
r
 !
s
)

239 
	`luaG_ru√º‹
(
S
->
L
, "vútuÆ machöêmism©ch i¿%s: " "sizêo‡%†i†%d buàªad %d", S->
«me
, 
wh©
, 
s
, 
r
);

240 
	}
}

242 
	#TESTSIZE
(
s
,
w
Ë
	`Te°Size
(
S
,s,w)

	)

243 
	#V
(
v
Ëv/16,v%16

	)

246 
	$LﬂdHódî
(
LﬂdSèã
 * 
S
)

248 
vîsi⁄
;

249 
lua_Numbî
 
x
, 
tx
 = 
TEST_NUMBER
;

250 
	`LﬂdSig«tuª
(
S
);

251 
vîsi⁄
 = 
	`LﬂdByã
(
S
);

252 i‡(
vîsi⁄
 > 
VERSION
)

253 
	`luaG_ru√º‹
(
S
->
L
, "%†toÿ√w: " "ªad vîsi⁄ %d.%d;Éx≥˘edáàmo° %d.%d", S->
«me
, 
	`V
(
vîsi⁄
), V(
VERSION
));

254 i‡(
vîsi⁄
 < 
VERSION0
)

255 
	`luaG_ru√º‹
(
S
->
L
, "%†toÿﬁd: " "ªad vîsi⁄ %d.%d;Éx≥˘edáàÀa° %d.%d", S->
«me
, 
	`V
(
vîsi⁄
), V(
VERSION0
));

256 
S
->
sw≠
 = (
	`luaU_ídü¬ess
(Ë!
	`LﬂdByã
(S));

257 
	`TESTSIZE
((), "int");

258 
	`TESTSIZE
((
size_t
), "size_t");

259 
	`TESTSIZE
((
In°ru˘i⁄
), "Instruction");

260 
	`TESTSIZE
(
SIZE_OP
, "OP");

261 
	`TESTSIZE
(
SIZE_A
, "A");

262 
	`TESTSIZE
(
SIZE_B
, "B");

263 
	`TESTSIZE
(
SIZE_C
, "C");

264 
	`TESTSIZE
((
lua_Numbî
), "number");

265 
x
 = 
	`LﬂdNumbî
(
S
);

266 i‡(()
x
 !()
tx
)

267 
	`luaG_ru√º‹
(
S
->
L
, "unknow¿numbî f‹m© i¿%s", S->
«me
);

268 
	}
}

270 
PrŸo
 *

271 
	$LﬂdChunk
(
LﬂdSèã
 * 
S
)

273 
	`LﬂdHódî
(
S
);

274  
	`LﬂdFun˘i⁄
(
S
, 
NULL
);

275 
	}
}

280 
PrŸo
 *

281 
	$luaU_undump
(
lua_Sèã
 * 
L
, 
ZIO
 * 
Z
, 
Mbuf„r
 * 
buff
)

283 
LﬂdSèã
 
S
;

284 c⁄° *
s
 = 
	`z«me
(
Z
);

285 i‡(*
s
 == '@' || *s == '=')

286 
S
.
«me
 = 
s
 + 1;

287 i‡(*
s
 =
LUA_SIGNATURE
[0])

288 
S
.
«me
 = "binary string";

290 
S
.
«me
 = 
s
;

291 
S
.
L
 = L;

292 
S
.
Z
 = Z;

293 
S
.
b
 = 
buff
;

294  
	`LﬂdChunk
(&
S
);

295 
	}
}

301 
	$luaU_ídü¬ess
()

303 
x
 = 1;

304  *(*)&
x
;

305 
	}
}

	@lib/tas/src/lua/lundump.h

7 #i‚de‡
lundump_h


8 
	#lundump_h


	)

10 
	~"lobje˘.h
"

11 
	~"lzio.h
"

14 
PrŸo
 *
luaU_undump
(
lua_Sèã
 * 
L
, 
ZIO
 * 
Z
, 
Mbuf„r
 * 
buff
);

17 
luaU_ídü¬ess
();

20 
luaU_dump
(
lua_Sèã
 * 
L
, c⁄° 
PrŸo
 * 
Maö
, 
lua_Chunkwrôî
 
w
, *
d©a
);

23 
luaU_¥öt
(c⁄° 
PrŸo
 * 
Maö
);

26 
	#LUA_SIGNATURE
 "\033Lua"

	)

27 
	#VERSION
 0x50

	)

28 
	#VERSION0
 0x50

	)

33 
	#TEST_NUMBER
 ((
lua_Numbî
)3.14159265358979323846E7)

	)

	@lib/tas/src/lua/lvm.c

7 
	~<°d¨g.h
>

8 
	~<°dlib.h
>

9 
	~<°rög.h
>

12 
	~<°dio.h
>

14 
	#lvm_c


	)

16 
	~"lua.h
"

18 
	~"ldebug.h
"

19 
	~"ldo.h
"

20 
	~"lfunc.h
"

21 
	~"lgc.h
"

22 
	~"lobje˘.h
"

23 
	~"l›codes.h
"

24 
	~"l°©e.h
"

25 
	~"l°rög.h
"

26 
	~"…abÀ.h
"

27 
	~"…m.h
"

28 
	~"lvm.h
"

31 #i‚de‡
lua_numbî2°r


32 
	#lua_numbî2°r
(
s
,
n
Ë
	`•rötf
((s), 
LUA_NUMBER_FMT
, (n))

	)

36 
	#MAXTAGLOOP
 100

	)

38 c⁄° 
TObje˘
 *

39 
	$luaV_t⁄umbî
(c⁄° 
TObje˘
 * 
obj
, TObje˘ * 
n
)

41 
lua_Numbî
 
num
;

42 i‡(
	`âi¢umbî
(
obj
))

43  
obj
;

44 i‡(
	`âis°rög
(
obj
Ë&& 
	`luaO_°r2d
(
	`svÆue
(obj), &
num
)) {

45 
	`£ävÆue
(
n
, 
num
);

46  
n
;

48  
NULL
;

49 
	}
}

52 
	$luaV_to°rög
(
lua_Sèã
 * 
L
, 
StkId
 
obj
)

54 i‡(!
	`âi¢umbî
(
obj
))

57 
s
[32];

58 
	`lua_numbî2°r
(
s
, 
	`nvÆue
(
obj
));

59 
	`£tsvÆue2s
(
obj
, 
	`luaS_√w
(
L
, 
s
));

62 
	}
}

65 
	$åa˚exec
(
lua_Sèã
 * 
L
)

67 
lu_byã
 
mask
 = 
L
->
hookmask
;

68 i‡(
mask
 & 
LUA_MASKCOUNT
) {

69 i‡(
L
->
hookcou¡
 == 0) {

70 
	`ª£thookcou¡
(
L
);

71 
	`luaD_ˇŒhook
(
L
, 
LUA_HOOKCOUNT
, -1);

75 i‡(
mask
 & 
LUA_MASKLINE
) {

76 
CÆlInfo
 *
ci
 = 
L
->ci;

77 
PrŸo
 *
p
 = 
	`ci_func
(
ci
)->
l
.p;

78 
√wlöe
 = 
	`gëlöe
(
p
, 
	`pcRñ
(*
ci
->
u
.
l
.
pc
,Ö));

79 i‡(!
L
->
hooköô
) {

80 
	`luaG_öôhooks
(
L
);

83 
	`lua_as£π
(
ci
->
°©e
 & 
CI_HASFRAME
);

84 i‡(
	`pcRñ
(*
ci
->
u
.
l
.
pc
, 
p
) == 0)

85 
ci
->
u
.
l
.
ßvedpc
 = *ci->u.l.
pc
;

87 i‡(*
ci
->
u
.
l
.
pc
 <ci->u.l.
ßvedpc
 || 
√wlöe
 !
	`gëlöe
(
p
, 
	`pcRñ
(ci->u.l.savedpc,Ö))) {

88 
	`luaD_ˇŒhook
(
L
, 
LUA_HOOKLINE
, 
√wlöe
);

89 
ci
 = 
L
->ci;

91 
ci
->
u
.
l
.
ßvedpc
 = *ci->u.l.
pc
;

93 
	}
}

96 
	$ˇŒTMªs
(
lua_Sèã
 * 
L
, c⁄° 
TObje˘
 * 
f
, c⁄° TObje˘ * 
p1
, c⁄° TObje˘ * 
p2
)

98 
	`£tobj2s
(
L
->
t›
, 
f
);

99 
	`£tobj2s
(
L
->
t›
 + 1, 
p1
);

100 
	`£tobj2s
(
L
->
t›
 + 2, 
p2
);

101 
	`luaD_check°ack
(
L
, 3);

102 
L
->
t›
 += 3;

103 
	`luaD_ˇŒ
(
L
, L->
t›
 - 3, 1);

104 
L
->
t›
--;

105 
	}
}

108 
	$ˇŒTM
(
lua_Sèã
 * 
L
, c⁄° 
TObje˘
 * 
f
, c⁄° TObje˘ * 
p1
, c⁄° TObje˘ * 
p2
, c⁄° TObje˘ * 
p3
)

110 
	`£tobj2s
(
L
->
t›
, 
f
);

111 
	`£tobj2s
(
L
->
t›
 + 1, 
p1
);

112 
	`£tobj2s
(
L
->
t›
 + 2, 
p2
);

113 
	`£tobj2s
(
L
->
t›
 + 3, 
p3
);

114 
	`luaD_check°ack
(
L
, 4);

115 
L
->
t›
 += 4;

116 
	`luaD_ˇŒ
(
L
, L->
t›
 - 4, 0);

117 
	}
}

119 c⁄° 
TObje˘
 *

120 
	$luaV_ödex
(
lua_Sèã
 * 
L
, c⁄° 
TObje˘
 * 
t
, TObje˘ * 
key
, 
lo›
)

122 c⁄° 
TObje˘
 *
tm
 = 
	`Á°tm
(
L
, 
	`hvÆue
(
t
)->
më©abÀ
, 
TM_INDEX
);

123 i‡(
tm
 =
NULL
)

124  &
luaO_nûobje˘
;

125 i‡(
	`âisfun˘i⁄
(
tm
)) {

126 
	`ˇŒTMªs
(
L
, 
tm
, 
t
, 
key
);

127  
L
->
t›
;

129  
	`luaV_gëèbÀ
(
L
, 
tm
, 
key
, 
lo›
);

130 
	}
}

132 c⁄° 
TObje˘
 *

133 
	$luaV_gënŸabÀ
(
lua_Sèã
 * 
L
, c⁄° 
TObje˘
 * 
t
, TObje˘ * 
key
, 
lo›
)

135 c⁄° 
TObje˘
 *
tm
 = 
	`luaT_gëtmbyobj
(
L
, 
t
, 
TM_INDEX
);

136 i‡(
	`âi¢û
(
tm
))

137 
	`luaG_ty≥îr‹
(
L
, 
t
, "index");

138 i‡(
	`âisfun˘i⁄
(
tm
)) {

139 
	`ˇŒTMªs
(
L
, 
tm
, 
t
, 
key
);

140  
L
->
t›
;

142  
	`luaV_gëèbÀ
(
L
, 
tm
, 
key
, 
lo›
);

143 
	}
}

150 c⁄° 
TObje˘
 *

151 
	$luaV_gëèbÀ
(
lua_Sèã
 * 
L
, c⁄° 
TObje˘
 * 
t
, TObje˘ * 
key
, 
lo›
)

153 i‡(
lo›
 > 
MAXTAGLOOP
)

154 
	`luaG_ru√º‹
(
L
, "loop in gettable");

155 i‡(
	`âi°abÀ
(
t
)) {

156 
TabÀ
 *
h
 = 
	`hvÆue
(
t
);

157 c⁄° 
TObje˘
 *
v
 = 
	`luaH_gë
(
h
, 
key
);

158 i‡(!
	`âi¢û
(
v
))

159  
v
;

161  
	`luaV_ödex
(
L
, 
t
, 
key
, 
lo›
 + 1);

163  
	`luaV_gënŸabÀ
(
L
, 
t
, 
key
, 
lo›
 + 1);

164 
	}
}

170 
	$luaV_£âabÀ
(
lua_Sèã
 * 
L
, c⁄° 
TObje˘
 * 
t
, TObje˘ * 
key
, 
StkId
 
vÆ
)

172 c⁄° 
TObje˘
 *
tm
;

173 
lo›
 = 0;

175 i‡(
	`âi°abÀ
(
t
)) {

176 
TabÀ
 *
h
 = 
	`hvÆue
(
t
);

177 
TObje˘
 *
ﬁdvÆ
 = 
	`luaH_£t
(
L
, 
h
, 
key
);

178 i‡(!
	`âi¢û
(
ﬁdvÆ
) ||

179 (
tm
 = 
	`Á°tm
(
L
, 
h
->
më©abÀ
, 
TM_NEWINDEX
)Ë=
NULL
) {

180 
	`£tobj2t
(
ﬁdvÆ
, 
vÆ
);

184 } i‡(
	`âi¢û
(
tm
 = 
	`luaT_gëtmbyobj
(
L
, 
t
, 
TM_NEWINDEX
)))

185 
	`luaG_ty≥îr‹
(
L
, 
t
, "index");

186 i‡(
	`âisfun˘i⁄
(
tm
)) {

187 
	`ˇŒTM
(
L
, 
tm
, 
t
, 
key
, 
vÆ
);

190 
t
 = 
tm
;

192 ++
lo›
 <
MAXTAGLOOP
);

193 
	`luaG_ru√º‹
(
L
, "loop in settable");

194 
	}
}

197 
	$ˇŒ_böTM
(
lua_Sèã
 * 
L
, c⁄° 
TObje˘
 * 
p1
, c⁄° TObje˘ * 
p2
, 
StkId
 
ªs
, 
TMS
 
evít
)

199 
±rdiff_t
 
ªsu…
 = 
	`ßve°ack
(
L
, 
ªs
);

200 c⁄° 
TObje˘
 *
tm
 = 
	`luaT_gëtmbyobj
(
L
, 
p1
, 
evít
);

201 i‡(
	`âi¢û
(
tm
))

202 
tm
 = 
	`luaT_gëtmbyobj
(
L
, 
p2
, 
evít
);

203 i‡(!
	`âisfun˘i⁄
(
tm
))

205 
	`ˇŒTMªs
(
L
, 
tm
, 
p1
, 
p2
);

206 
ªs
 = 
	`ª°‹e°ack
(
L
, 
ªsu…
);

207 
	`£tobjs2s
(
ªs
, 
L
->
t›
);

209 
	}
}

211 c⁄° 
TObje˘
 *

212 
	$gë_compTM
(
lua_Sèã
 * 
L
, 
TabÀ
 * 
mt1
, TabÀ * 
mt2
, 
TMS
 
evít
)

214 c⁄° 
TObje˘
 *
tm1
 = 
	`Á°tm
(
L
, 
mt1
, 
evít
);

215 c⁄° 
TObje˘
 *
tm2
;

216 i‡(
tm1
 =
NULL
)

217  
NULL
;

218 i‡(
mt1
 =
mt2
)

219  
tm1
;

220 
tm2
 = 
	`Á°tm
(
L
, 
mt2
, 
evít
);

221 i‡(
tm2
 =
NULL
)

222  
NULL
;

223 i‡(
	`luaO_øwequÆObj
(
tm1
, 
tm2
))

224  
tm1
;

225  
NULL
;

226 
	}
}

229 
	$ˇŒ_‹dîTM
(
lua_Sèã
 * 
L
, c⁄° 
TObje˘
 * 
p1
, c⁄° TObje˘ * 
p2
, 
TMS
 
evít
)

231 c⁄° 
TObje˘
 *
tm1
 = 
	`luaT_gëtmbyobj
(
L
, 
p1
, 
evít
);

232 c⁄° 
TObje˘
 *
tm2
;

233 i‡(
	`âi¢û
(
tm1
))

235 
tm2
 = 
	`luaT_gëtmbyobj
(
L
, 
p2
, 
evít
);

236 i‡(!
	`luaO_øwequÆObj
(
tm1
, 
tm2
))

238 
	`ˇŒTMªs
(
L
, 
tm1
, 
p1
, 
p2
);

239  !
	`l_isÁl£
(
L
->
t›
);

240 
	}
}

243 
	$luaV_°rcmp
(c⁄° 
TSåög
 * 
ls
, c⁄° TSåög * 
rs
)

245 c⁄° *
l
 = 
	`gë°r
(
ls
);

246 
size_t
 
Œ
 = 
ls
->
tsv
.
Àn
;

247 c⁄° *
r
 = 
	`gë°r
(
rs
);

248 
size_t
 
Ã
 = 
rs
->
tsv
.
Àn
;

250 
ãmp
 = 
	`°rcﬁl
(
l
, 
r
);

251 i‡(
ãmp
 != 0)

252  
ãmp
;

254 
size_t
 
Àn
 = 
	`°æí
(
l
);

255 i‡(
Àn
 =
Ã
)

256  (
Àn
 =
Œ
) ? 0 : 1;

257 i‡(
Àn
 =
Œ
)

260 
Àn
++;

261 
l
 +
Àn
;

262 
Œ
 -
Àn
;

263 
r
 +
Àn
;

264 
Ã
 -
Àn
;

267 
	}
}

270 
	$luaV_Às°h™
(
lua_Sèã
 * 
L
, c⁄° 
TObje˘
 * 
l
, c⁄° TObje˘ * 
r
)

272 
ªs
;

273 i‡(
	`ây≥
(
l
Ë!ây≥(
r
))

274  
	`luaG_‹dîîr‹
(
L
, 
l
, 
r
);

275 i‡(
	`âi¢umbî
(
l
))

276  
	`nvÆue
(
l
Ë<ÇvÆue(
r
);

277 i‡(
	`âis°rög
(
l
))

278  
	`luaV_°rcmp
(
	`tsvÆue
(
l
),ÅsvÆue(
r
)) < 0;

279 i‡((
ªs
 = 
	`ˇŒ_‹dîTM
(
L
, 
l
, 
r
, 
TM_LT
)) != -1)

280  
ªs
;

281  
	`luaG_‹dîîr‹
(
L
, 
l
, 
r
);

282 
	}
}

285 
	$luaV_Às£quÆ
(
lua_Sèã
 * 
L
, c⁄° 
TObje˘
 * 
l
, c⁄° TObje˘ * 
r
)

287 
ªs
;

288 i‡(
	`ây≥
(
l
Ë!ây≥(
r
))

289  
	`luaG_‹dîîr‹
(
L
, 
l
, 
r
);

290 i‡(
	`âi¢umbî
(
l
))

291  
	`nvÆue
(
l
Ë<nvÆue(
r
);

292 i‡(
	`âis°rög
(
l
))

293  
	`luaV_°rcmp
(
	`tsvÆue
(
l
),ÅsvÆue(
r
)) <= 0;

294 i‡((
ªs
 = 
	`ˇŒ_‹dîTM
(
L
, 
l
, 
r
, 
TM_LE
)) != -1)

295  
ªs
;

296 i‡((
ªs
 = 
	`ˇŒ_‹dîTM
(
L
, 
r
, 
l
, 
TM_LT
)) != -1)

297  !
ªs
;

298  
	`luaG_‹dîîr‹
(
L
, 
l
, 
r
);

299 
	}
}

302 
	$luaV_equÆvÆ
(
lua_Sèã
 * 
L
, c⁄° 
TObje˘
 * 
t1
, c⁄° TObje˘ * 
t2
)

304 c⁄° 
TObje˘
 *
tm
;

305 
	`lua_as£π
(
	`ây≥
(
t1
Ë=ây≥(
t2
));

306 
	`ây≥
(
t1
)) {

307 
LUA_TNIL
:

309 
LUA_TNUMBER
:

310  
	`nvÆue
(
t1
Ë=nvÆue(
t2
);

311 
LUA_TBOOLEAN
:

312  
	`bvÆue
(
t1
Ë=bvÆue(
t2
);

313 
LUA_TLIGHTUSERDATA
:

314  
	`pvÆue
(
t1
Ë=pvÆue(
t2
);

315 
LUA_TUSERDATA
:

317 i‡(
	`uvÆue
(
t1
Ë=uvÆue(
t2
))

319 
tm
 = 
	`gë_compTM
(
L
, 
	`uvÆue
(
t1
)->
uv
.
më©abÀ
, uvÆue(
t2
)->uv.më©abÀ, 
TM_EQ
);

322 
LUA_TTABLE
:

324 i‡(
	`hvÆue
(
t1
Ë=hvÆue(
t2
))

326 
tm
 = 
	`gë_compTM
(
L
, 
	`hvÆue
(
t1
)->
më©abÀ
, hvÆue(
t2
)->më©abÀ, 
TM_EQ
);

330  
	`gcvÆue
(
t1
Ë=gcvÆue(
t2
);

332 i‡(
tm
 =
NULL
)

334 
	`ˇŒTMªs
(
L
, 
tm
, 
t1
, 
t2
);

335  !
	`l_isÁl£
(
L
->
t›
);

336 
	}
}

339 
	$luaV_c⁄ˇt
(
lua_Sèã
 * 
L
, 
tŸÆ
, 
œ°
)

342 
StkId
 
t›
 = 
L
->
ba£
 + 
œ°
 + 1;

343 
n
 = 2;

344 i‡(!
	`to°rög
(
L
, 
t›
 - 2) || !tostring(L,Åop - 1)) {

345 i‡(!
	`ˇŒ_böTM
(
L
, 
t›
 - 2,Å› - 1,Å› - 2, 
TM_CONCAT
))

346 
	`luaG_c⁄ˇãº‹
(
L
, 
t›
 - 2,Åop - 1);

347 } i‡(
	`tsvÆue
(
t›
 - 1)->
tsv
.
Àn
 > 0) {

349 
lu_mem
 
é
 = 
	`ˇ°
÷u_mem, 
	`tsvÆue
(
t›
 - 1)->
tsv
.
Àn
) + cast(lu_mem,

350 
	`tsvÆue
(
t›
 - 2)->
tsv
.
Àn
);

351 *
buf„r
;

352 
i
;

353 
n
 < 
tŸÆ
 && 
	`to°rög
(
L
, 
t›
 -Ç - 1)) {

354 
é
 +
	`tsvÆue
(
t›
 - 
n
 - 1)->
tsv
.
Àn
;

355 
n
++;

357 i‡(
é
 > 
MAX_SIZET
)

358 
	`luaG_ru√º‹
(
L
, "string size overflow");

359 
buf„r
 = 
	`luaZ_›í•a˚
(
L
, &
	`G
(L)->
buff
, 
é
);

360 
é
 = 0;

361 
i
 = 
n
; i > 0; i--) {

362 
size_t
 
l
 = 
	`tsvÆue
(
t›
 - 
i
)->
tsv
.
Àn
;

363 
	`mem˝y
(
buf„r
 + 
é
, 
	`svÆue
(
t›
 - 
i
), 
l
);

364 
é
 +
l
;

366 
	`£tsvÆue2s
(
t›
 - 
n
, 
	`luaS_√wl°r
(
L
, 
buf„r
, 
é
));

368 
tŸÆ
 -
n
 - 1;

369 
œ°
 -
n
 - 1;

371 
tŸÆ
 > 1);

372 
	}
}

375 
	$Arôh
(
lua_Sèã
 * 
L
, 
StkId
 
ø
, c⁄° 
TObje˘
 * 
rb
, c⁄° TObje˘ * 
rc
, 
TMS
 
›
)

377 
TObje˘
 
ãmpb
, 
ãmpc
;

378 c⁄° 
TObje˘
 *
b
, *
c
;

379 i‡((
b
 = 
	`luaV_t⁄umbî
(
rb
, &
ãmpb
)Ë!
NULL
 && (
c
 =ÜuaV_t⁄umbî(
rc
, &
ãmpc
)) != NULL) {

380 
›
) {

381 
TM_ADD
:

382 
	`£ävÆue
(
ø
, 
	`nvÆue
(
b
Ë+ÇvÆue(
c
));

384 
TM_SUB
:

385 
	`£ävÆue
(
ø
, 
	`nvÆue
(
b
Ë-ÇvÆue(
c
));

387 
TM_MUL
:

388 
	`£ävÆue
(
ø
, 
	`nvÆue
(
b
Ë*ÇvÆue(
c
));

390 
TM_DIV
:

391 
	`£ävÆue
(
ø
, 
	`nvÆue
(
b
Ë/ÇvÆue(
c
));

393 
TM_POW
:

395 c⁄° 
TObje˘
 *
f
 = 
	`luaH_gë°r
(
	`hvÆue
(
	`gt
(
L
)), 
	`G
(L)->
tm«me
[
TM_POW
]);

396 
±rdiff_t
 
ªs
 = 
	`ßve°ack
(
L
, 
ø
);

397 i‡(!
	`âisfun˘i⁄
(
f
))

398 
	`luaG_ru√º‹
(
L
, "`__pow' (`^' operator) isÇotá function");

399 
	`ˇŒTMªs
(
L
, 
f
, 
b
, 
c
);

400 
ø
 = 
	`ª°‹e°ack
(
L
, 
ªs
);

401 
	`£tobjs2s
(
ø
, 
L
->
t›
);

405 
	`lua_as£π
(0);

408 } i‡(!
	`ˇŒ_böTM
(
L
, 
rb
, 
rc
, 
ø
, 
›
))

409 
	`luaG_¨ôhîr‹
(
L
, 
rb
, 
rc
);

410 
	}
}

416 
	#ru¡ime_check
(
L
, 
c
Ë{ i‡(!(c)Ë 0; }

	)

418 
	#RA
(
i
Ë(
ba£
+
	`GETARG_A
(i))

	)

421 
	#XRA
(
i
Ë(
L
->
ba£
+
	`GETARG_A
(i))

	)

422 
	#RB
(
i
Ë(
ba£
+
	`GETARG_B
(i))

	)

423 
	#RKB
(
i
Ë((
	`GETARG_B
(iË< 
MAXSTACK
Ë? 
	`RB
(iË: 
k
+GETARG_B(i)-MAXSTACK)

	)

424 
	#RC
(
i
Ë(
ba£
+
	`GETARG_C
(i))

	)

425 
	#RKC
(
i
Ë((
	`GETARG_C
(iË< 
MAXSTACK
Ë? 
	`RC
(iË: 
k
+GETARG_C(i)-MAXSTACK)

	)

426 
	#KBx
(
i
Ë(
k
+
	`GETARG_Bx
(i))

	)

428 
	#dojump
(
pc
, 
i
Ë(’cË+(i))

	)

430 
StkId


431 
	$luaV_execuã
(
lua_Sèã
 * 
L
)

433 
LClosuª
 *
˛
;

434 
TObje˘
 *
k
;

435 c⁄° 
In°ru˘i⁄
 *
pc
;

436 
ˇŒíåy
:

437 i‡(
L
->
hookmask
 & 
LUA_MASKCALL
) {

438 
L
->
ci
->
u
.
l
.
pc
 = &pc;

439 
	`luaD_ˇŒhook
(
L
, 
LUA_HOOKCALL
, -1);

441 
ªã¡ry
:

442 
L
->
ci
->
u
.
l
.
pc
 = &pc;

443 
	`lua_as£π
(
L
->
ci
->
°©e
 =
CI_SAVEDPC
 || L->ci->°©ê=(CI_SAVEDPC | 
CI_CALLING
));

444 
L
->
ci
->
°©e
 = 
CI_HASFRAME
;

445 
pc
 = 
L
->
ci
->
u
.
l
.
ßvedpc
;

446 
˛
 = &
	`˛vÆue
(
L
->
ba£
 - 1)->
l
;

447 
k
 = 
˛
->
p
->k;

450 c⁄° 
In°ru˘i⁄
 
i
 = *
pc
++;

451 
StkId
 
ba£
, 
ø
;

452 i‡((
L
->
hookmask
 & (
LUA_MASKLINE
 | 
LUA_MASKCOUNT
)Ë&& (--L->
hookcou¡
 == 0 || L->hookmask & LUA_MASKLINE)) {

453 
	`åa˚exec
(
L
);

454 i‡(
L
->
ci
->
°©e
 & 
CI_YIELD
) {

455 
L
->
ci
->
u
.
l
.
ßvedpc
 = 
pc
 - 1;

456 
L
->
ci
->
°©e
 = 
CI_YIELD
 | 
CI_SAVEDPC
;

457  
NULL
;

461 
ba£
 = 
L
->base;

462 
ø
 = 
	`RA
(
i
);

463 
	`lua_as£π
(
L
->
ci
->
°©e
 & 
CI_HASFRAME
);

464 
	`lua_as£π
(
ba£
 =
L
->
ci
->base);

465 
	`lua_as£π
(
L
->
t›
 <L->
°ack
 + L->
°acksize
 && L->t› >
ba£
);

466 
	`lua_as£π
(
L
->
t›
 =L->
ci
->t› || 
	`GET_OPCODE
(
i
Ë=
OP_CALL
 || GET_OPCODE(iË=
OP_TAILCALL
 || GET_OPCODE(iË=
OP_RETURN


467 || 
	`GET_OPCODE
(
i
Ë=
OP_SETLISTO
);

468 
	`GET_OPCODE
(
i
)) {

469 
OP_MOVE
:

471 
	`£tobjs2s
(
ø
, 
	`RB
(
i
));

474 
OP_LOADK
:

476 
	`£tobj2s
(
ø
, 
	`KBx
(
i
));

479 
OP_LOADBOOL
:

481 
	`£tbvÆue
(
ø
, 
	`GETARG_B
(
i
));

482 i‡(
	`GETARG_C
(
i
))

483 
pc
++;

486 
OP_LOADNIL
:

488 
TObje˘
 *
rb
 = 
	`RB
(
i
);

490 
	`£äûvÆue
(
rb
--);

492 
rb
 >
ø
);

495 
OP_GETUPVAL
:

497 
b
 = 
	`GETARG_B
(
i
);

498 
	`£tobj2s
(
ø
, 
˛
->
upvÆs
[
b
]->
v
);

501 
OP_GETGLOBAL
:

503 
TObje˘
 *
rb
 = 
	`KBx
(
i
);

504 c⁄° 
TObje˘
 *
v
;

505 
	`lua_as£π
(
	`âis°rög
(
rb
Ë&& 
	`âi°abÀ
(&
˛
->
g
));

506 
v
 = 
	`luaH_gë°r
(
	`hvÆue
(&
˛
->
g
), 
	`tsvÆue
(
rb
));

507 i‡(!
	`âi¢û
(
v
)) {

508 
	`£tobj2s
(
ø
, 
v
);

510 
	`£tobj2s
(
	`XRA
(
i
), 
	`luaV_ödex
(
L
, &
˛
->
g
, 
rb
, 0));

513 
OP_GETTABLE
:

515 
StkId
 
rb
 = 
	`RB
(
i
);

516 
TObje˘
 *
rc
 = 
	`RKC
(
i
);

517 i‡(
	`âi°abÀ
(
rb
)) {

518 c⁄° 
TObje˘
 *
v
 = 
	`luaH_gë
(
	`hvÆue
(
rb
), 
rc
);

519 i‡(!
	`âi¢û
(
v
)) {

520 
	`£tobj2s
(
ø
, 
v
);

522 
	`£tobj2s
(
	`XRA
(
i
), 
	`luaV_ödex
(
L
, 
rb
, 
rc
, 0));

524 
	`£tobj2s
(
	`XRA
(
i
), 
	`luaV_gënŸabÀ
(
L
, 
rb
, 
rc
, 0));

527 
OP_SETGLOBAL
:

529 
	`lua_as£π
(
	`âis°rög
(
	`KBx
(
i
)Ë&& 
	`âi°abÀ
(&
˛
->
g
));

530 
	`luaV_£âabÀ
(
L
, &
˛
->
g
, 
	`KBx
(
i
), 
ø
);

533 
OP_SETUPVAL
:

535 
b
 = 
	`GETARG_B
(
i
);

536 
	`£tobj
(
˛
->
upvÆs
[
b
]->
v
, 
ø
);

539 
OP_SETTABLE
:

541 
	`luaV_£âabÀ
(
L
, 
ø
, 
	`RKB
(
i
), 
	`RKC
(i));

544 
OP_NEWTABLE
:

546 
b
 = 
	`GETARG_B
(
i
);

547 
b
 = 
	`fb2öt
(b);

548 
	`£thvÆue
(
ø
, 
	`luaH_√w
(
L
, 
b
, 
	`GETARG_C
(
i
)));

549 
	`luaC_checkGC
(
L
);

552 
OP_SELF
:

554 
StkId
 
rb
 = 
	`RB
(
i
);

555 
TObje˘
 *
rc
 = 
	`RKC
(
i
);

556 
	`ru¡ime_check
(
L
, 
	`âis°rög
(
rc
));

557 
	`£tobjs2s
(
ø
 + 1, 
rb
);

558 i‡(
	`âi°abÀ
(
rb
)) {

559 c⁄° 
TObje˘
 *
v
 = 
	`luaH_gë°r
(
	`hvÆue
(
rb
), 
	`tsvÆue
(
rc
));

560 i‡(!
	`âi¢û
(
v
)) {

561 
	`£tobj2s
(
ø
, 
v
);

563 
	`£tobj2s
(
	`XRA
(
i
), 
	`luaV_ödex
(
L
, 
rb
, 
rc
, 0));

565 
	`£tobj2s
(
	`XRA
(
i
), 
	`luaV_gënŸabÀ
(
L
, 
rb
, 
rc
, 0));

568 
OP_ADD
:

570 
TObje˘
 *
rb
 = 
	`RKB
(
i
);

571 
TObje˘
 *
rc
 = 
	`RKC
(
i
);

572 i‡(
	`âi¢umbî
(
rb
Ë&&Åti¢umbî(
rc
)) {

573 
	`£ävÆue
(
ø
, 
	`nvÆue
(
rb
Ë+ÇvÆue(
rc
));

575 
	`Arôh
(
L
, 
ø
, 
rb
, 
rc
, 
TM_ADD
);

578 
OP_SUB
:

580 
TObje˘
 *
rb
 = 
	`RKB
(
i
);

581 
TObje˘
 *
rc
 = 
	`RKC
(
i
);

582 i‡(
	`âi¢umbî
(
rb
Ë&&Åti¢umbî(
rc
)) {

583 
	`£ävÆue
(
ø
, 
	`nvÆue
(
rb
Ë-ÇvÆue(
rc
));

585 
	`Arôh
(
L
, 
ø
, 
rb
, 
rc
, 
TM_SUB
);

588 
OP_MUL
:

590 
TObje˘
 *
rb
 = 
	`RKB
(
i
);

591 
TObje˘
 *
rc
 = 
	`RKC
(
i
);

592 i‡(
	`âi¢umbî
(
rb
Ë&&Åti¢umbî(
rc
)) {

593 
	`£ävÆue
(
ø
, 
	`nvÆue
(
rb
Ë*ÇvÆue(
rc
));

595 
	`Arôh
(
L
, 
ø
, 
rb
, 
rc
, 
TM_MUL
);

598 
OP_DIV
:

600 
TObje˘
 *
rb
 = 
	`RKB
(
i
);

601 
TObje˘
 *
rc
 = 
	`RKC
(
i
);

602 i‡(
	`âi¢umbî
(
rb
Ë&&Åti¢umbî(
rc
)) {

603 
	`£ävÆue
(
ø
, 
	`nvÆue
(
rb
Ë/ÇvÆue(
rc
));

605 
	`Arôh
(
L
, 
ø
, 
rb
, 
rc
, 
TM_DIV
);

608 
OP_POW
:

610 
	`Arôh
(
L
, 
ø
, 
	`RKB
(
i
), 
	`RKC
(i), 
TM_POW
);

613 
OP_UNM
:

615 c⁄° 
TObje˘
 *
rb
 = 
	`RB
(
i
);

616 
TObje˘
 
ãmp
;

617 i‡(
	`t⁄umbî
(
rb
, &
ãmp
)) {

618 
	`£ävÆue
(
ø
, -
	`nvÆue
(
rb
));

620 
	`£äûvÆue
(&
ãmp
);

621 i‡(!
	`ˇŒ_böTM
(
L
, 
	`RB
(
i
), &
ãmp
, 
ø
, 
TM_UNM
))

622 
	`luaG_¨ôhîr‹
(
L
, 
	`RB
(
i
), &
ãmp
);

626 
OP_NOT
:

628 
ªs
 = 
	`l_isÁl£
(
	`RB
(
i
));

629 
	`£tbvÆue
(
ø
, 
ªs
);

632 
OP_CONCAT
:

634 
b
 = 
	`GETARG_B
(
i
);

635 
c
 = 
	`GETARG_C
(
i
);

636 
	`luaV_c⁄ˇt
(
L
, 
c
 - 
b
 + 1, c);

637 
ba£
 = 
L
->base;

638 
	`£tobjs2s
(
	`RA
(
i
), 
ba£
 + 
b
);

639 
	`luaC_checkGC
(
L
);

642 
OP_JMP
:

644 
	`dojump
(
pc
, 
	`GETARG_sBx
(
i
));

647 
OP_EQ
:

649 i‡(
	`equÆobj
(
L
, 
	`RKB
(
i
), 
	`RKC
(i)Ë!
	`GETARG_A
(i))

650 
pc
++;

652 
	`dojump
(
pc
, 
	`GETARG_sBx
(*pc) + 1);

655 
OP_LT
:

657 i‡(
	`luaV_Às°h™
(
L
, 
	`RKB
(
i
), 
	`RKC
(i)Ë!
	`GETARG_A
(i))

658 
pc
++;

660 
	`dojump
(
pc
, 
	`GETARG_sBx
(*pc) + 1);

663 
OP_LE
:

665 i‡(
	`luaV_Às£quÆ
(
L
, 
	`RKB
(
i
), 
	`RKC
(i)Ë!
	`GETARG_A
(i))

666 
pc
++;

668 
	`dojump
(
pc
, 
	`GETARG_sBx
(*pc) + 1);

671 
OP_TEST
:

673 
TObje˘
 *
rb
 = 
	`RB
(
i
);

674 i‡(
	`l_isÁl£
(
rb
Ë=
	`GETARG_C
(
i
))

675 
pc
++;

677 
	`£tobjs2s
(
ø
, 
rb
);

678 
	`dojump
(
pc
, 
	`GETARG_sBx
(*pc) + 1);

682 
OP_CALL
:

683 
OP_TAILCALL
:

685 
StkId
 
fú°Resu…
;

686 
b
 = 
	`GETARG_B
(
i
);

687 
ƒesu…s
;

688 i‡(
b
 != 0)

689 
L
->
t›
 = 
ø
 + 
b
;

690 
ƒesu…s
 = 
	`GETARG_C
(
i
) - 1;

691 
fú°Resu…
 = 
	`luaD_¥eˇŒ
(
L
, 
ø
);

692 i‡(
fú°Resu…
) {

693 i‡(
fú°Resu…
 > 
L
->
t›
) {

694 
	`lua_as£π
(
L
->
ci
->
°©e
 =(
CI_C
 | 
CI_YIELD
));

695 (
L
->
ci
 - 1)->
u
.
l
.
ßvedpc
 = 
pc
;

696 (
L
->
ci
 - 1)->
°©e
 = 
CI_SAVEDPC
;

697  
NULL
;

700 
	`luaD_posˇŒ
(
L
, 
ƒesu…s
, 
fú°Resu…
);

701 i‡(
ƒesu…s
 >= 0)

702 
L
->
t›
 = L->
ci
->top;

704 i‡(
	`GET_OPCODE
(
i
Ë=
OP_CALL
) {

705 (
L
->
ci
 - 1)->
u
.
l
.
ßvedpc
 = 
pc
;

706 (
L
->
ci
 - 1)->
°©e
 = (
CI_SAVEDPC
 | 
CI_CALLING
);

708 
aux
;

709 
ba£
 = (
L
->
ci
 - 1)->base;

710 
ø
 = 
	`RA
(
i
);

711 i‡(
L
->
›íupvÆ
)

712 
	`luaF_˛o£
(
L
, 
ba£
);

713 
aux
 = 0; 
ø
 +áux < 
L
->
t›
;áux++)

714 
	`£tobjs2s
(
ba£
 + 
aux
 - 1, 
ø
 +áux);

715 (
L
->
ci
 - 1)->
t›
 = L->t› = 
ba£
 + 
aux
;

716 
	`lua_as£π
(
L
->
ci
->
°©e
 & 
CI_SAVEDPC
);

717 (
L
->
ci
 - 1)->
u
.
l
.
ßvedpc
 = L->ci->u.l.savedpc;

718 (
L
->
ci
 - 1)->
u
.
l
.
èûˇŒs
++;

719 (
L
->
ci
 - 1)->
°©e
 = 
CI_SAVEDPC
;

720 
L
->
ci
--;

721 
L
->
ba£
 = L->
ci
->base;

723 
ˇŒíåy
;

727 
OP_RETURN
:

729 
CÆlInfo
 *
ci
 = 
L
->ci - 1;

730 
b
 = 
	`GETARG_B
(
i
);

731 i‡(
b
 != 0)

732 
L
->
t›
 = 
ø
 + 
b
 - 1;

733 
	`lua_as£π
(
L
->
ci
->
°©e
 & 
CI_HASFRAME
);

734 i‡(
L
->
›íupvÆ
)

735 
	`luaF_˛o£
(
L
, 
ba£
);

736 
L
->
ci
->
°©e
 = 
CI_SAVEDPC
;

737 
L
->
ci
->
u
.
l
.
ßvedpc
 = 
pc
;

739 i‡(!(
ci
->
°©e
 & 
CI_CALLING
)) {

740 
	`lua_as£π
((
ci
->
°©e
 & 
CI_C
Ë|| ci->
u
.
l
.
pc
 != &pc);

741  
ø
;

743 
ƒesu…s
;

744 
	`lua_as£π
(
	`âisfun˘i⁄
(
ci
->
ba£
 - 1Ë&& (ci->
°©e
 & 
CI_SAVEDPC
));

745 
	`lua_as£π
(
	`GET_OPCODE
(*(
ci
->
u
.
l
.
ßvedpc
 - 1)Ë=
OP_CALL
);

746 
ƒesu…s
 = 
	`GETARG_C
(*(
ci
->
u
.
l
.
ßvedpc
 - 1)) - 1;

747 
	`luaD_posˇŒ
(
L
, 
ƒesu…s
, 
ø
);

748 i‡(
ƒesu…s
 >= 0)

749 
L
->
t›
 = L->
ci
->top;

750 
ªã¡ry
;

753 
OP_FORLOOP
:

755 
lua_Numbî
 
°ï
, 
idx
, 
limô
;

756 c⁄° 
TObje˘
 *
∂imô
 = 
ø
 + 1;

757 c⁄° 
TObje˘
 *
p°ï
 = 
ø
 + 2;

758 i‡(!
	`âi¢umbî
(
ø
))

759 
	`luaG_ru√º‹
(
L
, "`for' initial value must beáÇumber");

760 i‡(!
	`t⁄umbî
(
∂imô
, 
ø
 + 1))

761 
	`luaG_ru√º‹
(
L
, "`for'Üimit must beáÇumber");

762 i‡(!
	`t⁄umbî
(
p°ï
, 
ø
 + 2))

763 
	`luaG_ru√º‹
(
L
, "`for' step must beáÇumber");

764 
°ï
 = 
	`nvÆue
(
p°ï
);

765 
idx
 = 
	`nvÆue
(
ø
Ë+ 
°ï
;

766 
limô
 = 
	`nvÆue
(
∂imô
);

767 i‡(
°ï
 > 0 ? 
idx
 <
limô
 : idx >=Üimit) {

768 
	`dojump
(
pc
, 
	`GETARG_sBx
(
i
));

769 
	`chgnvÆue
(
ø
, 
idx
);

773 
OP_TFORLOOP
:

775 
nv¨
 = 
	`GETARG_C
(
i
) + 1;

776 
StkId
 
cb
 = 
ø
 + 
nv¨
 + 2;

777 
	`£tobjs2s
(
cb
, 
ø
);

778 
	`£tobjs2s
(
cb
 + 1, 
ø
 + 1);

779 
	`£tobjs2s
(
cb
 + 2, 
ø
 + 2);

780 
L
->
t›
 = 
cb
 + 3;

781 
	`luaD_ˇŒ
(
L
, 
cb
, 
nv¨
);

782 
L
->
t›
 = L->
ci
->top;

783 
ø
 = 
	`XRA
(
i
) + 2;

784 
cb
 = 
ø
 + 
nv¨
;

786 
nv¨
--;

787 
	`£tobjs2s
(
ø
 + 
nv¨
, 
cb
 +Çvar);

789 
nv¨
 > 0);

790 i‡(
	`âi¢û
(
ø
))

791 
pc
++;

793 
	`dojump
(
pc
, 
	`GETARG_sBx
(*pc) + 1);

796 
OP_TFORPREP
:

798 i‡(
	`âi°abÀ
(
ø
)) {

799 
	`£tobjs2s
(
ø
 + 1,Ña);

800 
	`£tobj2s
(
ø
, 
	`luaH_gë°r
(
	`hvÆue
(
	`gt
(
L
)), 
	`luaS_√w
(L, "next")));

802 
	`dojump
(
pc
, 
	`GETARG_sBx
(
i
));

805 
OP_SETLIST
:

806 
OP_SETLISTO
:

808 
bc
;

809 
n
;

810 
TabÀ
 *
h
;

811 
	`ru¡ime_check
(
L
, 
	`âi°abÀ
(
ø
));

812 
h
 = 
	`hvÆue
(
ø
);

813 
bc
 = 
	`GETARG_Bx
(
i
);

814 i‡(
	`GET_OPCODE
(
i
Ë=
OP_SETLIST
)

815 
n
 = (
bc
 & (
LFIELDS_PER_FLUSH
 - 1)) + 1;

817 
n
 = 
L
->
t›
 - 
ø
 - 1;

818 
L
->
t›
 = L->
ci
->top;

820 
bc
 &~(
LFIELDS_PER_FLUSH
 - 1);

821 ; 
n
 > 0;Ç--)

822 
	`£tobj2t
(
	`luaH_£äum
(
L
, 
h
, 
bc
 + 
n
), 
ø
 +Ç);

825 
OP_CLOSE
:

827 
	`luaF_˛o£
(
L
, 
ø
);

830 
OP_CLOSURE
:

832 
PrŸo
 *
p
;

833 
Closuª
 *
n˛
;

834 
nup
, 
j
;

835 
p
 = 
˛
->p->p[
	`GETARG_Bx
(
i
)];

836 
nup
 = 
p
->
nups
;

837 
n˛
 = 
	`luaF_√wL˛osuª
(
L
, 
nup
, &
˛
->
g
);

838 
n˛
->
l
.
p
 =Ö;

839 
j
 = 0; j < 
nup
; j++, 
pc
++) {

840 i‡(
	`GET_OPCODE
(*
pc
Ë=
OP_GETUPVAL
)

841 
n˛
->
l
.
upvÆs
[
j
] = 
˛
->upvÆs[
	`GETARG_B
(*
pc
)];

843 
	`lua_as£π
(
	`GET_OPCODE
(*
pc
Ë=
OP_MOVE
);

844 
n˛
->
l
.
upvÆs
[
j
] = 
	`luaF_födupvÆ
(
L
, 
ba£
 + 
	`GETARG_B
(*
pc
));

847 
	`£t˛vÆue
(
ø
, 
n˛
);

848 
	`luaC_checkGC
(
L
);

853 
	}
}

	@lib/tas/src/lua/lvm.h

7 #i‚de‡
lvm_h


8 
	#lvm_h


	)

10 
	~"ldo.h
"

11 
	~"lobje˘.h
"

12 
	~"…m.h
"

14 
	#to°rög
(
L
,
o
Ë((
	`ây≥
(oË=
LUA_TSTRING
Ë|| (
	`luaV_to°rög
(L, o)))

	)

16 
	#t⁄umbî
(
o
,
n
Ë(
	`ây≥
(oË=
LUA_TNUMBER
 || \

17 (((
o
Ë
	`luaV_t⁄umbî
(o,
n
)Ë!
NULL
))

	)

19 
	#equÆobj
(
L
,
o1
,
o2
) \

20 (
	`ây≥
(
o1
Ë=ây≥(
o2
Ë&& 
	`luaV_equÆvÆ
(
L
, o1, o2))

	)

22 
luaV_Às°h™
(
lua_Sèã
 * 
L
, c⁄° 
TObje˘
 * 
l
, c⁄° TObje˘ * 
r
);

23 
luaV_equÆvÆ
(
lua_Sèã
 * 
L
, c⁄° 
TObje˘
 * 
t1
, c⁄° TObje˘ * 
t2
);

24 c⁄° 
TObje˘
 *
luaV_t⁄umbî
(c⁄° TObje˘ * 
obj
, TObje˘ * 
n
);

25 
luaV_to°rög
(
lua_Sèã
 * 
L
, 
StkId
 
obj
);

26 c⁄° 
TObje˘
 *
luaV_gëèbÀ
(
lua_Sèã
 * 
L
, c⁄° TObje˘ * 
t
, TObje˘ * 
key
, 
lo›
);

27 
luaV_£âabÀ
(
lua_Sèã
 * 
L
, c⁄° 
TObje˘
 * 
t
, TObje˘ * 
key
, 
StkId
 
vÆ
);

28 
StkId
 
luaV_execuã
(
lua_Sèã
 * 
L
);

29 
luaV_c⁄ˇt
(
lua_Sèã
 * 
L
, 
tŸÆ
, 
œ°
);

	@lib/tas/src/lua/lzio.c

7 
	~<°rög.h
>

9 
	#lzio_c


	)

11 
	~"lua.h
"

13 
	~"Œimôs.h
"

14 
	~"lmem.h
"

15 
	~"lzio.h
"

18 
	$luaZ_fûl
(
ZIO
 * 
z
)

20 
size_t
 
size
;

21 c⁄° *
buff
 = 
z
->
	`ªadî
(
NULL
, z->
d©a
, &
size
);

22 i‡(
buff
 =
NULL
 || 
size
 == 0)

23  
EOZ
;

24 
z
->
n
 = 
size
 - 1;

25 
z
->
p
 = 
buff
;

26  
	`ch¨2öt
(*(
z
->
p
++));

27 
	}
}

30 
	$luaZ_lookahód
(
ZIO
 * 
z
)

32 i‡(
z
->
n
 == 0) {

33 
c
 = 
	`luaZ_fûl
(
z
);

34 i‡(
c
 =
EOZ
)

35  
c
;

36 
z
->
n
++;

37 
z
->
p
--;

39  
	`ch¨2öt
(*
z
->
p
);

40 
	}
}

43 
	$luaZ_öô
(
ZIO
 * 
z
, 
lua_Chunkªadî
 
ªadî
, *
d©a
, c⁄° *
«me
)

45 
z
->
ªadî
 =Ñeader;

46 
z
->
d©a
 = data;

47 
z
->
«me
 =Çame;

48 
z
->
n
 = 0;

49 
z
->
p
 = 
NULL
;

50 
	}
}

53 
size_t


54 
	$luaZ_ªad
(
ZIO
 * 
z
, *
b
, 
size_t
 
n
)

56 
n
) {

57 
size_t
 
m
;

58 i‡(
z
->
n
 == 0) {

59 i‡(
	`luaZ_fûl
(
z
Ë=
EOZ
)

60  
n
;

62 ++
z
->
n
;

63 --
z
->
p
;

66 
m
 = (
n
 <
z
->n) ?Ç : z->n;

67 
	`mem˝y
(
b
, 
z
->
p
, 
m
);

68 
z
->
n
 -
m
;

69 
z
->
p
 +
m
;

70 
b
 = (*)b + 
m
;

71 
n
 -
m
;

74 
	}
}

78 
	$luaZ_›í•a˚
(
lua_Sèã
 * 
L
, 
Mbuf„r
 * 
buff
, 
size_t
 
n
)

80 i‡(
n
 > 
buff
->
buffsize
) {

81 i‡(
n
 < 
LUA_MINBUFFER
)

82 
n
 = 
LUA_MINBUFFER
;

83 
	`luaM_ªÆlocve˘‹
(
L
, 
buff
->
buf„r
, buff->
buffsize
, 
n
, );

84 
buff
->
buffsize
 = 
n
;

86  
buff
->
buf„r
;

87 
	}
}

	@lib/tas/src/lua/lzio.h

7 #i‚de‡
lzio_h


8 
	#lzio_h


	)

10 
	~"lua.h
"

12 
	#EOZ
 (-1Ë

	)

14 
Zio
 
	tZIO
;

16 
	#ch¨2öt
(
c
Ë
	`ˇ°
(, ca°(, (c)))

	)

18 
	#zgëc
(
z
Ë(((z)->
n
--)>0 ? 
	`ch¨2öt
(*(z)->
p
++Ë: 
	`luaZ_fûl
(z))

	)

20 
	#z«me
(
z
Ë((z)->
«me
)

	)

22 
luaZ_öô
(
ZIO
 * 
z
, 
lua_Chunkªadî
 
ªadî
, *
d©a
, c⁄° *
«me
);

23 
size_t
 
luaZ_ªad
(
ZIO
 * 
z
, *
b
, size_à
n
);

24 
luaZ_lookahód
(
ZIO
 * 
z
);

26 
	sMbuf„r
 {

27 *
	mbuf„r
;

28 
size_t
 
	mbuffsize
;

29 } 
	tMbuf„r
;

31 *
luaZ_›í•a˚
(
lua_Sèã
 * 
L
, 
Mbuf„r
 * 
buff
, 
size_t
 
n
);

33 
	#luaZ_öôbuf„r
(
L
, 
buff
Ë((buff)->
buf„r
 = 
NULL
, (buff)->
buffsize
 = 0)

	)

35 
	#luaZ_sizebuf„r
(
buff
Ë((buff)->
buffsize
)

	)

36 
	#luaZ_buf„r
(
buff
Ë((buff)->
buf„r
)

	)

38 
	#luaZ_ªsizebuf„r
(
L
, 
buff
, 
size
) \

39 (
	`luaM_ªÆlocve˘‹
(
L
, (
buff
)->
buf„r
, (buff)->
buffsize
, 
size
, ), \

40 (
buff
)->
buffsize
 = 
size
)

	)

42 
	#luaZ_‰ìbuf„r
(
L
, 
buff
Ë
	`luaZ_ªsizebuf„r
(L, buff, 0)

	)

46 
	sZio
 {

47 
size_t
 
	mn
;

48 c⁄° *
	mp
;

49 
lua_Chunkªadî
 
	mªadî
;

50 *
	md©a
;

51 c⁄° *
	m«me
;

54 
luaZ_fûl
(
ZIO
 * 
z
);

	@lib/tas/src/os_unix.c

43 #i‡
deföed
 
löux


45 
	~"lök.h
"

46 
	~"∂ugö.h
"

47 
	~"lib.h
"

48 
	~"os_unix.h
"

49 
	~"hâp.h
"

50 
	~"glua.h
"

51 
	~"glua_ext.h
"

52 
	~"defs.h
"

54 
	~<sys/ty≥s.h
>

55 
	~<sys/sockë.h
>

56 
	~<¨∑/öë.h
>

57 
	~<uni°d.h
>

58 
	~<°dio.h
>

59 
	~<î∫o.h
>

60 
	~<°rög.h
>

61 
	~<f˙é.h
>

62 
	~<°dlib.h
>

63 
	~<sys/£À˘.h
>

64 
	~<sys/°©.h
>

65 
	~<sys/time.h
>

66 
	~<time.h
>

68 
	gmaöSockë
;

71 
	$gëR™domByãs
(*
buff
, 
Àn
)

73 
fûe
;

74 
ªadLí
;

76 
	`mem£t
(
buff
, 0, 
Àn
);

78 
fûe
 = 
	`›í
("/dev/øndom", 
O_RDONLY
);

80 i‡(
fûe
 < 0) {

81 
	`Ârötf
(
°dîr
, "warning: cannot open /dev/random\n");

85 
Àn
 > 0) {

86 
ªadLí
 = 
	`ªad
(
fûe
, 
buff
, 
Àn
);

88 i‡(
ªadLí
 < 0) {

89 
	`Ârötf
(
°dîr
, "warning: cannotÑead from /dev/random\n");

90 
	`˛o£
(
fûe
);

94 
buff
 +
ªadLí
;

95 
Àn
 -
ªadLí
;

98 
	`˛o£
(
fûe
);

99 
	}
}

102 
	$addrLí
(
Ámûy
)

104  (
Ámûy
 =
AF_INET
Ë? (
ö_addr
Ë: (
ö6_addr
);

105 
	}
}

108 
	$os_now
(
timeSèmp
 *timeStamp)

110 
timeSèmp
->
time
 = 
	`time
(
NULL
);

111 
	}
}

114 
	$timedOut
(
timeSèmp
 *timeSèmp, 
£c
)

116 
time_t
 
now
;

118 
	`time
(&
now
);

120 i‡((
time_t
Ë(
timeSèmp
->
time
 + 
£c
Ë> 
now
)

124 
	}
}

127 
	$gëMi¸o
()

129 
timevÆ
 
timeVÆ
;

130 
timevÆ
 
timeVÆPªv
;

131 
fú°Time
 = 1;

133 
	`gëtimeofday
(&
timeVÆ
, 
NULL
);

135 i‡(
fú°Time
 =0 && 
timeVÆPªv
.
tv_£c
 =
timeVÆ
.tv_£¯&&ÅimeVÆPªv.
tv_u£c
 >=ÅimeVal.tv_usec)

136  
timeVÆPªv
.
tv_£c
 * 1000000 +ÅimeVÆPªv.
tv_u£c
;

138 
fú°Time
 = 0;

140 
timeVÆPªv
.
tv_£c
 = 
timeVÆ
.tv_sec;

141 
timeVÆPªv
.
tv_u£c
 = 
timeVÆ
.tv_usec;

143  
timeVÆ
.
tv_£c
 * 1000000 +ÅimeVÆ.
tv_u£c
;

144 
	}
}

147 
	$ÆlocMem
(
Àn
)

149 *
ªs
;

151 
ªs
 = 
	`mÆloc
(
Àn
);

153 i‡(
ªs
 =
NULL
) {

154 
	`Ârötf
(
°dîr
, "ˇ¬ŸáŒoˇã %d byãs\n", 
Àn
);

155 
	`exô
(0);

158 
	`mem£t
(
ªs
, 0, 
Àn
);

160  
ªs
;

161 
	}
}

164 
	$‰ìMem
(*
mem
)

166 
	`‰ì
(
mem
);

167 
	}
}

170 
	$wrôeFûeOs
(c⁄° 
fûeId
 *fûeId, c⁄° *
d©a
, 
Àn
)

172 
wrôeLí
;

174 i‡(
Àn
 == 0)

178 
wrôeLí
 = 
	`wrôe
(
fûeId
->
fûeDesc
, 
d©a
, 
Àn
);

179 
wrôeLí
 < 0 && 
î∫o
 =
EINTR
);

181 i‡(
wrôeLí
 < 0) {

182 i‡(
î∫o
 =
EAGAIN
)

185 
	`îr‹
("ˇ¬Ÿ wrôêtÿfûêdes¸ùt‹: %s\n", 
	`°ªº‹
(
î∫o
));

189  
wrôeLí
;

190 
	}
}

193 
	$ªadFûeOs
(c⁄° 
fûeId
 *fûeId, *
d©a
, 
Àn
)

195 
ªadLí
;

197 i‡(
Àn
 == 0)

201 
ªadLí
 = 
	`ªad
(
fûeId
->
fûeDesc
, 
d©a
, 
Àn
);

202 
ªadLí
 < 0 && 
î∫o
 =
EINTR
);

204 i‡(
ªadLí
 < 0) {

205 i‡(
î∫o
 =
EAGAIN
)

208 
	`îr‹
("ˇ¬ŸÑód from fûêdes¸ùt‹: %s\n", 
	`°ªº‹
(
î∫o
));

212 i‡(
ªadLí
 == 0)

215  
ªadLí
;

216 
	}
}

219 
	$checkAbsP©h
(c⁄° *
∑th
)

221 i‡(
∑th
[0] != '/')

225 
	}
}

228 
	$fuŒP©h
(c⁄° *
dú
, c⁄° *
∑th
)

230 
dúLí
 = 
	`°æí
(
dú
);

231 
∑thLí
 = 
	`°æí
(
∑th
);

232 *
buff
 = 
	`ÆlocMem
(
dúLí
 + 
∑thLí
 + 2);

234 
	`mem˝y
(
buff
, 
dú
, 
dúLí
);

236 i‡(
dúLí
 =0 || 
buff
[dirLen - 1] == '/')

237 
dúLí
--;

240 
buff
[
dúLí
] = '/';

242 
	`mem˝y
(
buff
 + 
dúLí
 + 1, 
∑th
, 
∑thLí
 + 1);

244  
buff
;

245 
	}
}

248 
	$£tExãnsi⁄
(*
ªs
, c⁄° *
∑th
, c⁄° *
ext
)

250 
i
;

251 
Àn
 = 
	`°æí
(
∑th
);

253 
i
 = 
Àn
 - 1; i >0 && 
∑th
[i] != '.' &&Öath[i] != '/'; i--);

255 i‡(
∑th
[
i
] == '.')

256 
Àn
 = 
i
;

258 
	`mem˝y
(
ªs
, 
∑th
, 
Àn
);

259 
	`mem˝y
(
ªs
 + 
Àn
, 
ext
, 
	`°æí
(ext) + 1);

260 
	}
}

263 
	$isDúe˘‹y
(c⁄° *
roŸDú
, c⁄° *
∑th
)

265 *
fuŒ
 = 
	`fuŒP©h
(
roŸDú
, 
∑th
);

266 
°©
 
°©Buff
;

267 
ªs
;

269 
ªs
 = 
	`°©
(
fuŒ
, &
°©Buff
);

271 
	`‰ìMem
(
fuŒ
);

273 i‡(
ªs
 < 0)

276  
	`S_ISDIR
(
°©Buff
.
°_mode
);

277 
	}
}

280 
	$›íFûe
(
fûeId
 *fûeId, c⁄° *
roŸDú
, c⁄° *
∑th
)

282 
fûeDesc
;

283 *
fuŒ
 = 
	`fuŒP©h
(
roŸDú
, 
∑th
);

285 
fûeDesc
 = 
	`›í
(
fuŒ
, 
O_RDONLY
 | 
O_NONBLOCK
);

287 i‡(
fûeDesc
 < 0) {

288 
	`îr‹
("ˇ¬Ÿ o≥¿fûê%s: %s\n", 
fuŒ
, 
	`°ªº‹
(
î∫o
));

289 
	`‰ìMem
(
fuŒ
);

293 
fûeId
->
fûeDesc
 = fileDesc;

295 
	`‰ìMem
(
fuŒ
);

297 
	}
}

300 
	$˛o£Fûe
(c⁄° 
fûeId
 *fileId)

302 
	`˛o£
(
fûeId
->
fûeDesc
);

303 
	}
}

306 
	$fûeIsNewî
(c⁄° *
fûeName1
, c⁄° *
fûeName2
)

308 
°©
 
°©1
, 
°©2
;

310 i‡(
	`°©
(
fûeName1
, &
°©1
) < 0) {

311 
	`îr‹
("ˇ¬Ÿ sèà%s: %s\n", 
fûeName1
, 
	`°ªº‹
(
î∫o
));

315 i‡(
	`°©
(
fûeName2
, &
°©2
) < 0) {

316 i‡(
î∫o
 !
ENOENT
)

317 
	`îr‹
("ˇ¬Ÿ sèà%s: %s\n", 
fûeName2
, 
	`°ªº‹
(
î∫o
));

322  
°©1
.
°_mtime
 > 
°©2
.st_mtime;

323 
	}
}

326 
	$¸óãAŒDús
(*
∑th
)

328 
i
;

329 
Áû
;

331 
i
 = 0; 
∑th
[i] != 0; i++) {

332 i‡(
∑th
[
i
] == '/' && i > 0) {

333 
∑th
[
i
] = 0;

335 
Áû
 = (
	`mkdú
(
∑th
, 0755Ë< 0 && 
î∫o
 !
EEXIST
);

337 
∑th
[
i
] = '/';

339 i‡(
Áû
)

345 
	}
}

348 
	$∑r£IpAddr
(
ùAddr
 *
addr
, c⁄° *
addrSå
)

350 
	`mem£t
(
addr
, 0, (
ùAddr
));

352 i‡(
	`öë_±⁄
(
AF_INET
, 
addrSå
, &
addr
->addr.
v4
) > 0) {

353 
addr
->
domaö
 = 
PF_INET
;

357 i‡(
	`öë_±⁄
(
AF_INET6
, 
addrSå
, &
addr
->addr.
v6
) > 0) {

358 
addr
->
domaö
 = 
PF_INET6
;

362 
	`Ârötf
(
°dîr
, "cannotÖarse IPáddress\n");

364 
	}
}

367 
	$ùAddrToSåög
(
ùAddr
 *
addr
)

369 
buff
[8][40];

370 
i
 = 0;

371 *
ªs
;

373 
ªs
 = 
buff
[
i
];

375 i‡(
addr
->
domaö
 =
PF_INET
)

376 
	`öë_¡›
(
AF_INET
, &
addr
->addr.
v4
, 
ªs
, 40);

379 
	`öë_¡›
(
AF_INET6
, &
addr
->addr.
v6
, 
ªs
, 40);

381 
i
 = (i + 1) & 7;

383  
ªs
;

384 
	}
}

387 
	$øwIpAddrToSåög
(*
øwAddr
, 
Àn
)

389 
ùAddr
 
addr
;

391 i‡(
Àn
 == 4) {

392 
	`mem˝y
(&
addr
.addr.
v4
, 
øwAddr
, 4);

393 
addr
.
domaö
 = 
PF_INET
;

397 
	`mem˝y
(&
addr
.addr.
v6
, 
øwAddr
, 16);

398 
addr
.
domaö
 = 
PF_INET6
;

401  
	`ùAddrToSåög
(&
addr
);

402 
	}
}

405 
	$¸óãSockAddr
(
sockaddr_°‹age
 *
sockAddr
, c⁄° 
ùAddr
 *
addr
, 
p‹t
)

407 
	`mem£t
(
sockAddr
, 0, (
sockaddr_°‹age
));

409 i‡(
addr
->
domaö
 =
PF_INET
) {

410 
sockaddr_ö
 
sö
;

411 
	`mem£t
(&
sö
, 0, (sin));

413 
sö
.
sö_Ámûy
 = 
AF_INET
;

414 
sö
.
sö_p‹t
 = 
	`ht⁄s
(()
p‹t
);

415 
sö
.
sö_addr
.
s_addr
 = 
addr
->addr.
v4
.s_addr;

417 
	`mem˝y
(
sockAddr
, &
sö
, (sin));

421 i‡(
addr
->
domaö
 =
PF_INET6
) {

422 
sockaddr_ö6
 
sö6
;

423 
	`mem£t
(&
sö6
, 0, (sin6));

425 
sö6
.
sö6_Ámûy
 = 
AF_INET6
;

426 
sö6
.
sö6_p‹t
 = 
	`ht⁄s
(()
p‹t
);

427 
sö6
.
sö6_addr
 = 
addr
->addr.
v6
;

428 
	`mem˝y
(
sockAddr
, &
sö6
, (sin6));

433 
	`Ârötf
(
°dîr
, "övÆidÖrŸocﬁ famûy: %d\n", 
addr
->
domaö
);

435 
	}
}

438 
	$addrFromSockAddr
(
ùAddr
 *
addr
, c⁄° 
ﬁ§_sockaddr
 *
sockAddr
)

440 
	`mem£t
(
addr
, 0, (
ùAddr
));

442 i‡(
sockAddr
->
ö
.
ß_Ámûy
 =
AF_INET
) {

443 
addr
->
domaö
 = 
PF_INET
;

444 
addr
->addr.
v4
.
s_addr
 = 
sockAddr
->
ö4
.
sö_addr
.s_addr;

448 i‡(
sockAddr
->
ö
.
ß_Ámûy
 =
AF_INET6
) {

449 
addr
->
domaö
 = 
PF_INET6
;

450 
	`mem˝y
(&
addr
->addr.
v6
, &
sockAddr
->
ö6
.
sö6_addr
, (
ö6_addr
));

454 
	`Ârötf
(
°dîr
, "övÆidáddªs†Ámûy: %d\n", 
sockAddr
->
ö
.
ß_Ámûy
);

456 
	}
}

459 
	$¸óãMaöSockë
(c⁄° 
ùAddr
 *
addr
, 
p‹t
)

461 
sockaddr_°‹age
 
sockAddr
;

462 
åueP¨a
 = 1;

463 
Êags
;

465 i‡(
	`¸óãSockAddr
(&
sockAddr
, 
addr
, 
p‹t
) < 0) {

466 
	`Ârötf
(
°dîr
, "cannot create socketáddress\n");

470 
maöSockë
 = 
	`sockë
(
addr
->
domaö
, 
SOCK_STREAM
, 
IPPROTO_TCP
);

472 i‡(
maöSockë
 < 0) {

473 
	`îr‹
("ˇ¬Ÿ cª©êmaö sockë: %s\n", 
	`°ªº‹
(
î∫o
));

477 i‡(
	`£tsock›t
(
maöSockë
, 
SOL_SOCKET
, 
SO_REUSEADDR
, &
åueP¨a
, (truePara)) < 0) {

478 
	`îr‹
("ˇ¬Ÿ së SO_REUSEADDR sockë o±i⁄: %s\n", 
	`°ªº‹
(
î∫o
));

479 
	`˛o£
(
maöSockë
);

483 
Êags
 = 
	`f˙é
(
maöSockë
, 
F_GETFL
);

485 i‡(
Êags
 < 0) {

486 
	`îr‹
("ˇ¬Ÿ gë fœg†: %s\n", 
	`°ªº‹
(
î∫o
));

487 
	`˛o£
(
maöSockë
);

491 i‡(
	`f˙é
(
maöSockë
, 
F_SETFL
, 
Êags
 | 
O_NONBLOCK
) < 0) {

492 
	`îr‹
("ˇ¬Ÿ së fœgs: %s\n", 
	`°ªº‹
(
î∫o
));

493 
	`˛o£
(
maöSockë
);

497 i‡(
	`böd
(
maöSockë
, (
sockaddr
 *)&
sockAddr
, (sockaddr)) < 0) {

498 
	`îr‹
("ˇ¬Ÿ böd maö sockë: %s\n", 
	`°ªº‹
(
î∫o
));

499 
	`˛o£
(
maöSockë
);

503 i‡(
	`li°í
(
maöSockë
, 10) < 0) {

504 
	`îr‹
("ˇ¬ŸÜi°í o¿maö sockë: %s\n", 
	`°ªº‹
(
î∫o
));

505 
	`˛o£
(
maöSockë
);

510 
	}
}

513 
	$ac˚±C⁄n
(
fûeId
 **
sockId
, 
ùAddr
 **
addr
)

515 
ﬁ§_sockaddr
 
sockAddr
;

516 
sockÀn_t
 
Àn
;

517 
sock
;

518 
Êags
;

521 
Àn
 = (
sockaddr_°‹age
);

523 
sock
 = 
	`ac˚±
(
maöSockë
, &
sockAddr
.
ö
, &
Àn
);

525 
sock
 < 0 && 
î∫o
 =
EINTR
);

527 i‡(
sock
 < 0) {

528 i‡(
î∫o
 !
EAGAIN
)

529 
	`îr‹
("ac˚± faûed: %s\n", 
	`°ªº‹
(
î∫o
));

534 
Êags
 = 
	`f˙é
(
sock
, 
F_GETFL
);

536 i‡(
Êags
 < 0) {

537 
	`îr‹
("ˇ¬Ÿ gë fœg†: %s\n", 
	`°ªº‹
(
î∫o
));

538 
	`˛o£
(
sock
);

542 i‡(
	`f˙é
(
sock
, 
F_SETFL
, 
Êags
 | 
O_NONBLOCK
) < 0) {

543 
	`îr‹
("ˇ¬Ÿ së fœgs: %s\n", 
	`°ªº‹
(
î∫o
));

544 
	`˛o£
(
sock
);

548 *
addr
 = 
	`ÆlocMem
((
ùAddr
));

550 i‡(
	`addrFromSockAddr
(*
addr
, &
sockAddr
) < 0) {

551 
	`îr‹
("cannot convert socketáddress\n");

552 
	`‰ìMem
(
addr
);

553 
	`˛o£
(
sock
);

557 *
sockId
 = 
	`ÆlocMem
((
fûeId
));

559 (*
sockId
)->
fûeDesc
 = 
sock
;

562 
	}
}

565 
	$˛o£MaöSockë
()

567 
	`˛o£
(
maöSockë
);

568 
	}
}

571 
	$waôF‹Sockës
(
fûeId
 *
sockIds
[], *
Êags
[], 
num
)

573 
fd_£t
 
ªadSë
, 
wrôeSë
;

574 
i
;

575 
fûeDesc
;

576 
max
;

577 
ªs
;

579 
	`FD_ZERO
(&
ªadSë
);

580 
	`FD_ZERO
(&
wrôeSë
);

582 
	`FD_SET
(
maöSockë
, &
ªadSë
);

584 
max
 = 
maöSockë
;

586 
i
 = 0; i < 
num
; i++) {

587 
fûeDesc
 = 
sockIds
[
i
]->fileDesc;

589 i‡(
fûeDesc
 > 
max
)

590 
max
 = 
fûeDesc
;

592 i‡((*
Êags
[
i
] & 
FLAG_READ
) != 0)

593 
	`FD_SET
(
fûeDesc
, &
ªadSë
);

595 i‡((*
Êags
[
i
] & 
FLAG_WRITE
) != 0)

596 
	`FD_SET
(
fûeDesc
, &
wrôeSë
);

600 
ªs
 = 
	`£À˘
(
max
 + 1, &
ªadSë
, &
wrôeSë
, 
NULL
, NULL);

601 
ªs
 < 0 && 
î∫o
 =
EINTR
);

603 i‡(
ªs
 < 0) {

604 
	`îr‹
("ˇ¬Ÿ sñe˘: %s\n", 
	`°ªº‹
(
î∫o
));

608 
i
 = 0; i < 
num
; i++) {

609 *
Êags
[
i
] = 0;

611 
fûeDesc
 = 
sockIds
[
i
]->fileDesc;

613 i‡(
	`FD_ISSET
(
fûeDesc
, &
ªadSë
))

614 *
Êags
[
i
] |
FLAG_READ
;

616 i‡(
	`FD_ISSET
(
fûeDesc
, &
wrôeSë
))

617 *
Êags
[
i
] |
FLAG_WRITE
;

621 
	}
}

	@lib/tas/src/os_unix.h

43 #i‡
deföed
 
löux


45 
	~<√töë/ö.h
>

47 
	sùAddr
 {

48 
	mdomaö
;

51 
ö_addr
 
	mv4
;

52 
ö6_addr
 
	mv6
;

53 } 
	maddr
;

56 
	sfûeId
 {

57 
	mfûeDesc
;

60 
	stimeSèmp
 {

61 
	mtime
;

64 
gëR™domByãs
(*
buff
, 
Àn
);

66 
addrLí
(
Ámûy
);

68 
os_now
(
timeSèmp
 *timeStamp);

69 
timedOut
(
timeSèmp
 *timeSèmp, 
£c
);

71 
gëMi¸o
();

73 *
ÆlocMem
(
Àn
);

74 
‰ìMem
(*
mem
);

76 
wrôeFûeOs
(c⁄° 
fûeId
 *
sockId
, c⁄° *
d©a
, 
Àn
);

77 
ªadFûeOs
(c⁄° 
fûeId
 *
sockId
, *
d©a
, 
Àn
);

78 
checkAbsP©h
(c⁄° *
∑th
);

79 *
fuŒP©h
(c⁄° *
dú
, c⁄° *
∑th
);

80 
£tExãnsi⁄
(*
ªs
, c⁄° *
∑th
, c⁄° *
ext
);

81 
isDúe˘‹y
(c⁄° *
roŸDú
, c⁄° *
∑th
);

82 
›íFûe
(
fûeId
 *fûeId, c⁄° *
roŸDú
, c⁄° *
∑th
);

83 
˛o£Fûe
(c⁄° 
fûeId
 *
sockId
);

84 
fûeIsNewî
(c⁄° *
fûeName1
, c⁄° *
fûeName2
);

85 
¸óãAŒDús
(*
∑th
);

87 
∑r£IpAddr
(
ùAddr
 *
addr
, c⁄° *
addrSå
);

88 *
ùAddrToSåög
(
ùAddr
 *
addr
);

89 *
øwIpAddrToSåög
(*
øwAddr
, 
Àn
);

90 
¸óãMaöSockë
(c⁄° 
ùAddr
 *
addr
, 
p‹t
);

91 
ac˚±C⁄n
(
fûeId
 **
sockId
, 
ùAddr
 **
addr
);

92 
˛o£MaöSockë
();

93 
waôF‹Sockës
(
fûeId
 *
sockIds
[], *
Êags
[], 
num
);

	@lib/tas/src/plugin.c

43 
	~<°rög.h
>

44 
	~<time.h
>

46 
	~"lök.h
"

47 
	~"∂ugö.h
"

48 
	~"lib.h
"

49 
	~"os_unix.h
"

50 
	~"hâp.h
"

51 
	~"glua.h
"

52 
	~"glua_ext.h
"

53 
	~"ﬁ§d_∂ugö.h
"

54 
	~"√t_ﬁ§.h
"

56 
	~<defs.h
>

57 
	~<ﬁ§.h
>

58 
	~<scheduÀr.h
>

59 
	~<∑r£r.h
>

60 
	~<lök_£t.h
>

61 
	~<√ighb‹_èbÀ.h
>

62 
	~<two_h›_√ighb‹_èbÀ.h
>

63 
	~<mid_£t.h
>

64 
	~<tc_£t.h
>

65 
	~<h«_£t.h
>

66 
	~<routög_èbÀ.h
>

67 
	~<ﬁ§_¥Ÿocﬁ.h
>

68 
	~<m¥_£À˘‹_£t.h
>

69 
	~<du∂iˇã_£t.h
>

70 
	~<lq_∂ugö.h
>

72 
	#PLUGIN_INTERFACE_VERSION
 5

	)

74 
	#MESSAGE_TYPE
 129

	)

76 
ﬁ§d_∂ugö_öãrÁ˚_vîsi⁄
();

77 
ﬁ§d_∂ugö_öô
();

79 
	gùAddrLí
;

80 
ﬁ§_ù_addr
 *
	gmaöAddr
;

82 
öãrÁ˚
 *
	götTab
 = 
NULL
;

83 
√ighb‹_íåy
 *
	g√ighTab
 = 
NULL
;

84 
mid_íåy
 *
	gmidTab
 = 
NULL
;

85 
h«_íåy
 *
	gh«Tab
 = 
NULL
;

86 
ﬁ§d_c⁄fig
 *
	gc⁄fig
 = 
NULL
;

88 
	gôîIndex
;

92 
öãrÁ˚
 *
	gôîI¡Tab
 = 
NULL
;

93 
mid_íåy
 *
	gôîMidTab
 = 
NULL
;

94 
h«_íåy
 *
	gôîH«Tab
 = 
NULL
;

97 
lök_íåy
 *
	gôîLökTab
 = 
NULL
;

98 
√ighb‹_íåy
 *
	gôîNeighTab
 = 
NULL
;

99 
tc_íåy
 *
	gôîTcTab
 = 
NULL
;

100 
π_íåy
 *
	gôîRouãTab
 = 
NULL
;

102 
__©åibuã__
 ((
c⁄°ru˘‹
)Ë
	$b™√r
()

104 
	`¥ötf
("Tiny Application Server 0.1 by olsr.org\n");

105 
	}
}

108 
	$ôîLökTabNext
(*
buff
, 
Àn
)

110 
li°_node
 *
lök_node
;

111 
lqãxtbuf„r
 
lqbuf„r
;

113 i‡(
ôîLökTab
 =
NULL
)

116 
	`¢¥ötf
(
buff
, 
Àn
, "local~%s~remote~%s~main~%s~hysteresis~%f~cost~%s~",

117 
	`øwIpAddrToSåög
(&
ôîLökTab
->
loˇl_iÁ˚_addr
, 
ùAddrLí
),ÑawIpAddrToSåög(&ôîLökTab->
√ighb‹_iÁ˚_addr
,

118 
ùAddrLí
),

119 
	`øwIpAddrToSåög
(&
ôîLökTab
->
√ighb‹
->
√ighb‹_maö_addr
, 
ùAddrLí
), iãrLökTab->
L_lök_quÆôy
,

120 
	`gë_lökco°_ãxt
(
ôîLökTab
->
lökco°
, 
Ál£
, &
lqbuf„r
));

122 
lök_node
 = 
ôîLökTab
->
lök_li°
.
√xt
;

123 i‡(
lök_node
 !&
lök_íåy_hód
) {

124 
ôîLökTab
 = 
	`li°2lök
(
lök_node
);

126 
ôîLökTab
 = 
NULL
;

130 
	}
}

133 
	$ôîLökTabInô
()

135 
li°_node
 *
lök_node
;

137 
lök_node
 = 
lök_íåy_hód
.
√xt
;

138 i‡(
lök_node
 !&
lök_íåy_hód
) {

139 
ôîLökTab
 = 
	`li°2lök
(
lök_node
);

141 
ôîLökTab
 = 
NULL
;

143 
	}
}

146 
	$ôîNeighTabNext
(*
buff
, 
Àn
)

148 
ªs
;

149 
i
;

150 
√ighb‹_2_li°_íåy
 *
√igh2
;

152 i‡(
ôîNeighTab
 =
NULL
)

155 
ªs
 =

156 
	`¢¥ötf
(
buff
, 
Àn
, "main~%s~symmetric~%s~mpr~%s~mprs~%s~willingness~%d~[~neighbors2~",

157 
	`øwIpAddrToSåög
(&
ôîNeighTab
->
√ighb‹_maö_addr
, 
ùAddrLí
), iãrNeighTab->
°©us
 =
SYM
 ? "true" : "false",

158 
ôîNeighTab
->
is_m¥
 != 0 ? "true" : "false",

159 
	`ﬁ§_lookup_m¥s_£t
(&
ôîNeighTab
->
√ighb‹_maö_addr
Ë!
NULL
 ? "åue" : "Ál£", iãrNeighTab->
wûlög√ss
);

161 
i
 = 0;

163 
Àn
 -
ªs
;

164 
buff
 +
ªs
;

166 
Àn
 -= 2;

168 
√igh2
 = 
ôîNeighTab
->
√ighb‹_2_li°
.
√xt
;Çeigh2 != &iterNeighTab->neighbor_2_list;Çeigh2 =Çeigh2->next) {

169 
ªs
 = 
	`¢¥ötf
(
buff
, 
Àn
, "%d~%s~", 
i
, 
	`øwIpAddrToSåög
(&
√igh2
->
√ighb‹_2
->
√ighb‹_2_addr
, 
ùAddrLí
));

171 i‡(
ªs
 < 
Àn
)

172 
buff
 +
ªs
;

174 
Àn
 -
ªs
;

176 i‡(
Àn
 <= 0)

179 
i
++;

182 
	`°r˝y
(
buff
, "]~");

184 
ôîNeighTab
 = iãrNeighTab->
√xt
;

186 i‡(
ôîNeighTab
 =&
√ighTab
[
ôîIndex
]) {

187 
ôîNeighTab
 = 
NULL
;

189 ++
ôîIndex
 < 
HASHSIZE
)

190 i‡(
√ighTab
[
ôîIndex
].
√xt
 != &neighTab[iterIndex]) {

191 
ôîNeighTab
 = 
√ighTab
[
ôîIndex
].
√xt
;

197 
	}
}

200 
	$ôîNeighTabInô
()

202 
ôîNeighTab
 = 
NULL
;

204 i‡(
√ighTab
 =
NULL
)

207 
ôîIndex
 = 0; iãrIndex < 
HASHSIZE
; iterIndex++)

208 i‡(
√ighTab
[
ôîIndex
].
√xt
 != &neighTab[iterIndex]) {

209 
ôîNeighTab
 = 
√ighTab
[
ôîIndex
].
√xt
;

212 
	}
}

215 
	$ôîRouãTabNext
(*
buff
, 
Àn
)

217 
avl_node
 *
π_åì_node
;

219 i‡(
ôîRouãTab
 =
NULL
)

222 
	`¢¥ötf
(
buff
, 
Àn
, "destination~%s~gateway~%s~interface~%s~metric~%d~",

223 
	`øwIpAddrToSåög
(&
ôîRouãTab
->
π_d°
.
¥efix
, 
ùAddrLí
),

224 
	`øwIpAddrToSåög
(&
ôîRouãTab
->
π_be°
->
πp_√xth›
.
g©eway
, 
ùAddrLí
),

225 
	`if_ifwôhödex_«me
(
ôîRouãTab
->
π_be°
->
πp_√xth›
.
iif_ödex
), iãrRouãTab->π_be°->
πp_mëric
.
h›s
);

227 
π_åì_node
 = 
	`avl_wÆk_√xt
(&
ôîRouãTab
->rt_tree_node);

228 i‡(
π_åì_node
) {

229 
ôîRouãTab
 = 
	`π_åì2π
(
π_åì_node
);

231 
ôîRouãTab
 = 
NULL
;

235 
	}
}

238 
	$ôîRouãTabInô
()

240 
avl_node
 *
node
;

242 
	`avl_öô
(&
routögåì
, 
avl_comp_¥efix_deÁu…
);

243 
routögåì_vîsi⁄
 = 0;

245 
node
 = 
	`avl_wÆk_fú°
(&
routögåì
);

246 
ôîRouãTab
 = 
node
 ? 
	`π_åì2π
“odeË: 
NULL
;

248 
	}
}

256 
tc_íåy
 *

257 
	$ès_gë√xt_tc_íåy
(
tc_íåy
 *
tc
)

259 
avl_node
 *
node
 = 
	`avl_wÆk_√xt
(&
tc
->
vîãx_node
);

261  (
node
 ? 
	`vîãx_åì2tc
“odeË: 
NULL
);

262 
	}
}

265 
	$ôîTcTabNext
(*
buff
, 
Àn
)

267 
ªs
;

268 
i
;

269 
tc_edge_íåy
 *
tc_edge
;

270 
lqãxtbuf„r
 
lqbuf„r
;

272 i‡(
ôîTcTab
 =
NULL
)

275 
ªs
 = 
	`¢¥ötf
(
buff
, 
Àn
, "maö~%s~[~de°ö©i⁄s~", 
	`øwIpAddrToSåög
(&
ôîTcTab
->
addr
, 
ùAddrLí
));

277 
Àn
 -
ªs
;

278 
buff
 +
ªs
;

280 
Àn
 -= 2;

281 
i
 = 0;

283 
	`OLSR_FOR_ALL_TC_EDGE_ENTRIES
(
ôîTcTab
, 
tc_edge
) {

285 
ªs
 =

286 
	`¢¥ötf
(
buff
, 
Àn
, "[~%d~addªss~%s~co°~%s~]~", 
i
, 
	`øwIpAddrToSåög
(&
tc_edge
->
T_de°_addr
, 
ùAddrLí
),

287 
	`gë_lökco°_ãxt
(
tc_edge
->
co°
, 
Ál£
, &
lqbuf„r
));

289 i‡(
ªs
 < 
Àn
)

290 
buff
 +
ªs
;

292 
Àn
 -
ªs
;

294 i‡(
Àn
 <= 0)

297 
i
++;

299 
	`OLSR_FOR_ALL_TC_EDGE_ENTRIES_END
(
ôîTcTab
, 
tc_edge
);

301 
	`°r˝y
(
buff
, "]~");

303 
ôîTcTab
 = 
	`ès_gë√xt_tc_íåy
(iterTcTab);

306 
	}
}

309 
	$ôîTcTabInô
()

311 
avl_node
 *
node
;

313 
	`avl_öô
(&
tc_åì
, 
avl_comp_deÁu…
);

315 
node
 = 
	`avl_wÆk_fú°
(&
tc_åì
);

316 
ôîTcTab
 = (
node
 ? 
	`vîãx_åì2tc
“odeË: 
NULL
);

317 
	}
}

319 
boﬁ


320 
∑r£rFunc
(
ﬁ§_mesßge
 *
msg
, 
öãrÁ˚
 *
öI¡
 
__©åibuã__
 ((
unu£d
)), 
ﬁ§_ù_addr
 *
√ighI¡Addr
)

322 *
	gmess
 = (*)
msg
;

323 
ﬁ§_ù_addr
 *
	g‹ig
 = (ﬁ§_ù_add∏*)
ARM_NOWARN_ALIGN
(
mess
 + 4);

324 
	gÀn
 = (
mess
[2] << 8) | mess[3];

325 *
	g£rvi˚
, *
	g°rög
;

326 
	gi
;

328 i‡(
memcmp
(
‹ig
, 
maöAddr
, 
ùAddrLí
) == 0)

329  
Ál£
;

331 i‡(
check_√ighb‹_lök
(
√ighI¡Addr
Ë!
SYM_LINK
) {

332 
îr‹
("TAS messageÇot from symmetricÇeighbour\n");

333  
	gÁl£
;

336 i‡(
	gÀn
 < 
	gùAddrLí
 + 8 + 2) {

337 
îr‹
("sh‹àTAS mesßgêª˚ived (%d byãs)\n", 
Àn
);

338  
	gÁl£
;

341 
	gÀn
 -
ùAddrLí
 + 8;

342 
	g£rvi˚
 = 
mess
 + 
ùAddrLí
 + 8;

344 
	gi
 = 0; i < 
	gÀn
 && 
	g£rvi˚
[
i
] != 0; i++);

346 i‡(
	gi
++ =
Àn
) {

347 
îr‹
("TAS message has unterminated service string\n");

348  
	gÁl£
;

351 i‡(
	gi
 =
Àn
) {

352 
îr‹
("TAS messageÜacksÖayload string\n");

353  
	gÁl£
;

356 
	g°rög
 = 
£rvi˚
 + 
i
;

357 
	gÀn
 -
i
;

359 
	gi
 = 0; i < 
	gÀn
 && 
	g°rög
[
i
] != 0; i++);

361 i‡(
	gi
 =
Àn
) {

362 
îr‹
("TAS message has unterminatedÖayload string\n");

363  
	gÁl£
;

366 
hâpAddTasMesßge
(
£rvi˚
, 
°rög
, 
øwIpAddrToSåög
(
‹ig
, 
ùAddrLí
));

369  
	gåue
;

373 
	$£ndMesßge
(c⁄° *
£rvi˚
, c⁄° *
°rög
)

375 *
mess
, *
wÆkî
;

376 
Àn
, 
∑d
;

377 
£qNo
;

378 
öãrÁ˚
 *
öãr
;

380 
∑d
 = 
Àn
 = 
ùAddrLí
 + 8 + 
	`°æí
(
£rvi˚
Ë+ 1 + såÀn(
°rög
) + 1;

382 
Àn
 = 1 + ((len - 1) | 3);

384 
∑d
 = 
Àn
 -Öad;

386 
wÆkî
 = 
mess
 = 
	`ÆlocMem
(
Àn
);

388 
£qNo
 = 
	`gë_msg_£qno
();

390 *
wÆkî
++ = 
MESSAGE_TYPE
;

391 *
wÆkî
++ = 0;

392 *
wÆkî
++ = ()(
Àn
 >> 8);

393 *
wÆkî
++ = ()
Àn
;

395 
	`mem˝y
(
wÆkî
, 
maöAddr
, 
ùAddrLí
);

396 
wÆkî
 +
ùAddrLí
;

398 *
wÆkî
++ = 255;

399 *
wÆkî
++ = 0;

400 *
wÆkî
++ = ()(
£qNo
 >> 8);

401 *
wÆkî
++ = ()
£qNo
;

403 *
£rvi˚
 != 0)

404 *
wÆkî
++ = *
£rvi˚
++;

406 *
wÆkî
++ = 0;

408 *
°rög
 != 0)

409 *
wÆkî
++ = *
°rög
++;

411 *
wÆkî
++ = 0;

413 
∑d
-- > 0)

414 *
wÆkî
++ = 0;

416 
öãr
 = 
ötTab
; i¡î !
NULL
; i¡î = i¡î->
öt_√xt
) {

417 i‡(
	`√t_outbuf„r_push
(
öãr
, 
mess
, 
Àn
) !=Üen) {

418 
	`√t_ouçut
(
öãr
);

419 
	`√t_outbuf„r_push
(
öãr
, 
mess
, 
Àn
);

422 
	}
}

425 
£rvi˚Func
(*
c⁄ãxt
 
__©åibuã__
 ((
unu£d
)))

427 
	gup
 = 0;

429 i‡(
	gup
 == 0) {

430 i‡(
hâpSëup
() < 0)

433 
	gup
 = 1;

436 i‡(
	gup
 != 0)

437 
hâpSîvi˚
(()(1.0 / 
c⁄fig
->
pﬁÃ©e
));

441 
	$ﬁ§d_∂ugö_öãrÁ˚_vîsi⁄
()

443  
PLUGIN_INTERFACE_VERSION
;

444 
	}
}

447 
	$ﬁ§d_∂ugö_öô
()

449 
ùAddrLí
 = 
ﬁ§_˙f
->
ùsize
;

450 
maöAddr
 = &
ﬁ§_˙f
->
maö_addr
;

452 
ötTab
 = 
i‚ë
;

453 
√ighTab
 = 
√ighb‹èbÀ
;

454 
midTab
 = 
mid_£t
;

455 
h«Tab
 = 
h«_£t
;

456 
c⁄fig
 = 
ﬁ§_˙f
;

458 
	`hâpInô
();

460 
	`ﬁ§_°¨t_timî
(
OLSR_TAS_SERVICE_INT
, 0, 
OLSR_TIMER_PERIODIC
, &
£rvi˚Func
, 
NULL
, 0);

462 
	`ﬁ§_∑r£r_add_fun˘i⁄
(
∑r£rFunc
, 
MESSAGE_TYPE
);

465 
	}
}

467 c⁄° 
ﬁ§d_∂ugö_∑ømëîs
 
	g∂ugö_∑ømëîs
[] = {

468 {.
«me
 = "addªss",.
	g£t_∂ugö_∑ømëî
 = &
hâpSëAddªss
,.
	gd©a
 = 
NULL
},

469 {.
	g«me
 = "p‹t",.
	g£t_∂ugö_∑ømëî
 = &
hâpSëP‹t
,.
	gd©a
 = 
NULL
},

470 {.
	g«me
 = "roŸdú",.
	g£t_∂ugö_∑ømëî
 = &
hâpSëRoŸDú
,.
	gd©a
 = 
NULL
},

471 {.
	g«me
 = "w‹kdú",.
	g£t_∂ugö_∑ømëî
 = &
hâpSëW‹kDú
,.
	gd©a
 = 
NULL
},

472 {.
	g«me
 = "ödexfûe",.
	g£t_∂ugö_∑ømëî
 = &
hâpSëIndexFûe
,.
	gd©a
 = 
NULL
},

473 {.
	g«me
 = "u£r",.
	g£t_∂ugö_∑ømëî
 = &
hâpSëU£r
,.
	gd©a
 = 
NULL
},

474 {.
	g«me
 = "∑ssw‹d",.
	g£t_∂ugö_∑ømëî
 = &
hâpSëPassw‹d
,.
	gd©a
 = 
NULL
},

475 {.
	g«me
 = "£s°ime",.
	g£t_∂ugö_∑ømëî
 = &
hâpSëSessTime
,.
	gd©a
 = 
NULL
},

476 {.
	g«me
 = "pubdú",.
	g£t_∂ugö_∑ømëî
 = &
hâpSëPubDú
,.
	gd©a
 = 
NULL
},

477 {.
	g«me
 = "qu™tum",.
	g£t_∂ugö_∑ømëî
 = &
hâpSëQu™tum
,.
	gd©a
 = 
NULL
},

478 {.
	g«me
 = "mes°ime",.
	g£t_∂ugö_∑ømëî
 = &
hâpSëMessTime
,.
	gd©a
 = 
NULL
},

479 {.
	g«me
 = "mes¶imô",.
	g£t_∂ugö_∑ømëî
 = &
hâpSëMessLimô
,.
	gd©a
 = 
NULL
},

483 
	$ﬁ§d_gë_∂ugö_∑ømëîs
(c⁄° 
ﬁ§d_∂ugö_∑ømëîs
 **
∑øms
, *
size
)

485 *
∑øms
 = 
∂ugö_∑ømëîs
;

486 *
size
 = (
∂ugö_∑ømëîs
) / (*plugin_parameters);

487 
	}
}

	@lib/tas/src/plugin.h

43 
	#OLSR_TAS_SERVICE_INT
 100

	)

45 
£ndMesßge
(c⁄° *
£rvi˚
, c⁄° *
°rög
);

46 
ôîLökTabInô
();

47 
ôîLökTabNext
(*
buff
, 
Àn
);

48 
ôîRouãTabInô
();

49 
ôîRouãTabNext
(*
buff
, 
Àn
);

50 
ôîNeighTabInô
();

51 
ôîNeighTabNext
(*
buff
, 
Àn
);

52 
ôîTcTabInô
();

53 
ôîTcTabNext
(*
buff
, 
Àn
);

	@lib/tas/test.c

43 
	~"§c/lök.h
"

44 
	~"§c/∂ugö.h
"

45 
	~"§c/lib.h
"

46 
	~"§c/os_unix.h
"

47 
	~"§c/hâp.h
"

48 
	~"§c/glua.h
"

49 
	~"§c/glua_ext.h
"

51 
	~<°dio.h
>

52 
	~<uni°d.h
>

53 
	~<sig«l.h
>

54 
	~<°dlib.h
>

55 
	~<°rög.h
>

57 
	$sigH™d
(
sig
Ë
	`__©åibuã__
 ((
n‹ëu∫
));

59 
	`sigH™d
(
sig
 
	`__©åibuã__
 ((
unu£d
)))

61 
	`hâpShutdown
();

62 
	`exô
(0);

63 
	}
}

66 
	$ußge
()

68 
	`Ârötf
(
°dîr
, "usage:Åas [--address ip-address] [--portÖort-number]\n");

69 
	`Ârötf
(
°dîr
, " [--work-dir work-directory] [--root-dirÑoot-directory]\n");

70 
	`Ârötf
(
°dîr
, " [--passwordÖassword] [--user user] [--sess-time session-timeout]\n");

71 
	`Ârötf
(
°dîr
, " [--index-file index-file] [--pub-dirÖublic-directory]\n");

72 
	`Ârötf
(
°dîr
, " [--quantum quantum] [--mess-time message-timeout]\n");

73 
	`Ârötf
(
°dîr
, " [--mess-limit message-queue-limit]\n");

74 
	}
}

77 
	$maö
(
ac
, *
av
[])

79 
i
;

81 
	`hâpInô
();

83 
i
 = 1; i < 
ac
; i++) {

84 i‡(
	`°rcmp
(
av
[
i
], "--address") == 0) {

85 i‡(++
i
 =
ac
) {

86 
	`Ârötf
(
°dîr
, "missingáddressÖarameter\n");

87 
	`ußge
();

91 i‡(
	`hâpSëAddªss
(
av
[
i
], 
NULL
, (
£t_∂ugö_∑ømëî_add⁄
) {

94 
	`Ârötf
(
°dîr
, "cannot setáddress\n");

99 i‡(
	`°rcmp
(
av
[
i
], "--port") == 0) {

100 i‡(++
i
 =
ac
) {

101 
	`Ârötf
(
°dîr
, "missingÖortÖarameter\n");

102 
	`ußge
();

106 i‡(
	`hâpSëP‹t
(
av
[
i
], 
NULL
, (
£t_∂ugö_∑ømëî_add⁄
) {

109 
	`Ârötf
(
°dîr
, "cannot setÖort\n");

114 i‡(
	`°rcmp
(
av
[
i
], "--work-dir") == 0) {

115 i‡(++
i
 =
ac
) {

116 
	`Ârötf
(
°dîr
, "missing work directoryÖarameter\n");

117 
	`ußge
();

121 i‡(
	`hâpSëW‹kDú
(
av
[
i
], 
NULL
, (
£t_∂ugö_∑ømëî_add⁄
) {

124 
	`Ârötf
(
°dîr
, "cannot set work directory\n");

129 i‡(
	`°rcmp
(
av
[
i
], "--root-dir") == 0) {

130 i‡(++
i
 =
ac
) {

131 
	`Ârötf
(
°dîr
, "missingÑoot directoryÖarameter\n");

132 
	`ußge
();

136 i‡(
	`hâpSëRoŸDú
(
av
[
i
], 
NULL
, (
£t_∂ugö_∑ømëî_add⁄
) {

139 
	`Ârötf
(
°dîr
, "cannot setÑoot directory\n");

144 i‡(
	`°rcmp
(
av
[
i
], "--index-file") == 0) {

145 i‡(++
i
 =
ac
) {

146 
	`Ârötf
(
°dîr
, "missing index fileÖarameter\n");

147 
	`ußge
();

151 
	`hâpSëIndexFûe
(
av
[
i
], 
NULL
, (
£t_∂ugö_∑ømëî_add⁄
) {

156 i‡(
	`°rcmp
(
av
[
i
], "--user") == 0) {

157 i‡(++
i
 =
ac
) {

158 
	`Ârötf
(
°dîr
, "missing userÖarameter\n");

159 
	`ußge
();

163 
	`hâpSëU£r
(
av
[
i
], 
NULL
, (
£t_∂ugö_∑ømëî_add⁄
) {

168 i‡(
	`°rcmp
(
av
[
i
], "--password") == 0) {

169 i‡(++
i
 =
ac
) {

170 
	`Ârötf
(
°dîr
, "missingÖasswordÖarameter\n");

171 
	`ußge
();

175 
	`hâpSëPassw‹d
(
av
[
i
], 
NULL
, (
£t_∂ugö_∑ømëî_add⁄
) {

180 i‡(
	`°rcmp
(
av
[
i
], "--sess-time") == 0) {

181 i‡(++
i
 =
ac
) {

182 
	`Ârötf
(
°dîr
, "missingÅimeoutÖarameter\n");

183 
	`ußge
();

187 i‡(
	`hâpSëSessTime
(
av
[
i
], 
NULL
, (
£t_∂ugö_∑ømëî_add⁄
) {

190 
	`Ârötf
(
°dîr
, "cannot set sessionÅimeout\n");

195 i‡(
	`°rcmp
(
av
[
i
], "--pub-dir") == 0) {

196 i‡(++
i
 =
ac
) {

197 
	`Ârötf
(
°dîr
, "missingÖublic directoryÖarameter\n");

198 
	`ußge
();

202 
	`hâpSëPubDú
(
av
[
i
], 
NULL
, (
£t_∂ugö_∑ømëî_add⁄
) {

207 i‡(
	`°rcmp
(
av
[
i
], "--quantum") == 0) {

208 i‡(++
i
 =
ac
) {

209 
	`Ârötf
(
°dîr
, "missing quantumÖarameter\n");

210 
	`ußge
();

214 i‡(
	`hâpSëQu™tum
(
av
[
i
], 
NULL
, (
£t_∂ugö_∑ømëî_add⁄
) {

217 
	`Ârötf
(
°dîr
, "cannot set quantum\n");

222 i‡(
	`°rcmp
(
av
[
i
], "--mess-time") == 0) {

223 i‡(++
i
 =
ac
) {

224 
	`Ârötf
(
°dîr
, "missingÅimeoutÖarameter\n");

225 
	`ußge
();

229 i‡(
	`hâpSëMessTime
(
av
[
i
], 
NULL
, (
£t_∂ugö_∑ømëî_add⁄
) {

232 
	`Ârötf
(
°dîr
, "cannot set messageÅimeout\n");

237 i‡(
	`°rcmp
(
av
[
i
], "--mess-limit") == 0) {

238 i‡(++
i
 =
ac
) {

239 
	`Ârötf
(
°dîr
, "missingÜimitÖarameter\n");

240 
	`ußge
();

244 i‡(
	`hâpSëMessLimô
(
av
[
i
], 
NULL
, (
£t_∂ugö_∑ømëî_add⁄
) {

247 
	`Ârötf
(
°dîr
, "cannot set message queueÜimit\n");

253 
	`Ârötf
(
°dîr
, "övÆidárgumít: %s\n", 
av
[
i
]);

254 
	`ußge
();

259 
	`sig«l
(
SIGINT
, 
sigH™d
);

260 
	`sig«l
(
SIGTERM
, 
sigH™d
);

262 i‡(
	`hâpSëup
() < 0) {

263 
	`Ârötf
(
°dîr
, "cannot set up HTTP server\n");

268 i‡(
	`hâpSîvi˚
(10) < 0) {

269 
	`Ârötf
(
°dîr
, "cannotÑun HTTP server\n");

273 
	`u¶ìp
(100000);

277 
	}
}

	@lib/txtinfo/src/olsrd_plugin.c

46 
	~<°dio.h
>

47 
	~<°rög.h
>

48 
	~<°dlib.h
>

49 
	~<¨∑/öë.h
>

50 
	~<sys/ty≥s.h
>

51 
	~<√töë/ö.h
>

53 
	~"ﬁ§d_∂ugö.h
"

54 
	~"ﬁ§d_txtöfo.h
"

55 
	~"defs.h
"

57 
	#PLUGIN_NAME
 "OLSRDÅxtöfÿ∂ugö"

	)

58 
	#PLUGIN_VERSION
 "0.1"

	)

59 
	#PLUGIN_AUTHOR
 "L‹íz Sch‹i"

	)

60 
	#MOD_DESC
 
PLUGIN_NAME
 " " 
PLUGIN_VERSION
 " by " 
PLUGIN_AUTHOR


	)

61 
	#PLUGIN_INTERFACE_VERSION
 5

	)

63 
ﬁ§_ù_addr
 
	gtxtöfo_ac˚±_ù
;

64 
ﬁ§_ù_addr
 
	gtxtöfo_li°í_ù
;

65 
	gùc_p‹t
;

66 
	gnom¥
;

68 
	$my_öô
(Ë
	`__©åibuã__
 ((
c⁄°ru˘‹
));

69 
	$my_föi
(Ë
	`__©åibuã__
 ((
de°ru˘‹
));

75 
	$my_öô
()

78 
	`¥ötf
("%s\n", 
MOD_DESC
);

81 
ùc_p‹t
 = 2006;

82 i‡(
ﬁ§_˙f
->
ù_vîsi⁄
 =
AF_INET
) {

83 
txtöfo_ac˚±_ù
.
v4
.
s_addr
 = 
	`ht⁄l
(
INADDR_LOOPBACK
);

84 
txtöfo_li°í_ù
.
v4
.
s_addr
 = 
	`ht⁄l
(
INADDR_ANY
);

86 
txtöfo_ac˚±_ù
.
v6
 = 
ö6addr_lo›back
;

87 
txtöfo_li°í_ù
.
v6
 = 
ö6addr_™y
;

91 
nom¥
 = 0;

92 
	}
}

98 
	$my_föi
()

106 
	`ﬁ§_∂ugö_exô
();

107 
	}
}

110 
	$ﬁ§d_∂ugö_öãrÁ˚_vîsi⁄
()

112  
PLUGIN_INTERFACE_VERSION
;

113 
	}
}

115 c⁄° 
ﬁ§d_∂ugö_∑ømëîs
 
	g∂ugö_∑ømëîs
[] = {

116 {.
«me
 = "p‹t",.
	g£t_∂ugö_∑ømëî
 = &
£t_∂ugö_p‹t
,.
	gd©a
 = &
ùc_p‹t
},

117 {.
	g«me
 = "ac˚±",.
	g£t_∂ugö_∑ømëî
 = &
£t_∂ugö_ùaddªss
,.
	gd©a
 = &
txtöfo_ac˚±_ù
},

118 {.
	g«me
 = "li°í",.
	g£t_∂ugö_∑ømëî
 = &
£t_∂ugö_ùaddªss
,.
	gd©a
 = &
txtöfo_li°í_ù
},

122 
	$ﬁ§d_gë_∂ugö_∑ømëîs
(c⁄° 
ﬁ§d_∂ugö_∑ømëîs
 **
∑øms
, *
size
)

124 *
∑øms
 = 
∂ugö_∑ømëîs
;

125 *
size
 = (
∂ugö_∑ømëîs
) / (*plugin_parameters);

126 
	}
}

	@lib/txtinfo/src/olsrd_txtinfo.c

52 
	~<sys/ty≥s.h
>

53 
	~<sys/sockë.h
>

54 #i‡!
deföed
 
WIN32


55 
	~<sys/£À˘.h
>

57 
	~<√töë/ö.h
>

58 
	~<¨∑/öë.h
>

59 
	~<sys/time.h
>

60 
	~<time.h
>

61 
	~<m©h.h
>

62 
	~<°dio.h
>

63 
	~<°rög.h
>

64 
	~<°dlib.h
>

65 
	~<uni°d.h
>

66 
	~<î∫o.h
>

68 
	~"ùˇlc.h
"

69 
	~"ﬁ§.h
"

70 
	~"ﬁ§_ty≥s.h
"

71 
	~"√ighb‹_èbÀ.h
"

72 
	~"two_h›_√ighb‹_èbÀ.h
"

73 
	~"m¥_£À˘‹_£t.h
"

74 
	~"tc_£t.h
"

75 
	~"h«_£t.h
"

76 
	~"mid_£t.h
"

77 
	~"lök_£t.h
"

78 
	~"√t_ﬁ§.h
"

79 
	~"lq_∂ugö.h
"

80 
	~"comm⁄/autobuf.h
"

81 
	~"g©eway.h
"

83 
	~"ﬁ§d_txtöfo.h
"

84 
	~"ﬁ§d_∂ugö.h
"

86 #ifde‡
WIN32


87 
	#˛o£
(
x
Ë
	`˛o£sockë
(x)

	)

90 
	gùc_sockë
;

93 
∂ugö_ùc_öô
();

95 
£nd_öfo
(, );

97 
ùc_a˘i⁄
(, *, );

99 
ùc_¥öt_√igh
(
autobuf
 *, 
boﬁ
);

101 
ùc_¥öt_lök
(
autobuf
 *);

103 
ùc_¥öt_rouãs
(
autobuf
 *);

105 
ùc_¥öt_t›ﬁogy
(
autobuf
 *);

107 
ùc_¥öt_h«
(
autobuf
 *);

109 
ùc_¥öt_mid
(
autobuf
 *);

111 
ùc_¥öt_g©eway
(
autobuf
 *);

113 
ùc_¥öt_c⁄fig
(
autobuf
 *);

115 
ùc_¥öt_öãrÁ˚
(
autobuf
 *);

117 
	#TXT_IPC_BUFSIZE
 256

	)

119 
	#SIW_NEIGH
 0x0001

	)

120 
	#SIW_LINK
 0x0002

	)

121 
	#SIW_ROUTE
 0x0004

	)

122 
	#SIW_HNA
 0x0008

	)

123 
	#SIW_MID
 0x0010

	)

124 
	#SIW_TOPO
 0x0020

	)

125 
	#SIW_GATEWAY
 0x0040

	)

126 
	#SIW_INTERFACE
 0x0080

	)

127 
	#SIW_CONFIG
 0x0100

	)

128 
	#SIW_2HOP
 0x0200

	)

131 
	#SIW_ALL
 0x003F

	)

133 
	#MAX_CLIENTS
 3

	)

135 *
	goutbuf„r
[
MAX_CLIENTS
];

136 
size_t
 
	goutbuf„r_size
[
MAX_CLIENTS
];

137 
size_t
 
	goutbuf„r_wrôãn
[
MAX_CLIENTS
];

138 
	goutbuf„r_sockë
[
MAX_CLIENTS
];

139 
	goutbuf„r_cou¡
;

141 
timî_íåy
 *
	gwrôëimî_íåy
;

150 
	$ﬁ§d_∂ugö_öô
()

153 
ùc_sockë
 = -1;

155 
	`∂ugö_ùc_öô
();

157 
	}
}

163 
	$ﬁ§_∂ugö_exô
()

165 i‡(
ùc_sockë
 != -1)

166 
	`˛o£
(
ùc_sockë
);

167 
	}
}

170 
	$∂ugö_ùc_öô
()

172 
ﬁ§_sockaddr
 
s°
;

173 
uöt32_t
 
yes
 = 1;

174 
sockÀn_t
 
addæí
;

177 i‡((
ùc_sockë
 = 
	`sockë
(
ﬁ§_˙f
->
ù_vîsi⁄
, 
SOCK_STREAM
, 0)) == -1) {

178 #i‚de‡
NODEBUG


179 
	`ﬁ§_¥ötf
(1, "(TXTINFOËsockë()=%s\n", 
	`°ªº‹
(
î∫o
));

183 i‡(
	`£tsock›t
(
ùc_sockë
, 
SOL_SOCKET
, 
SO_REUSEADDR
, (*)&
yes
, (yes)) < 0) {

184 #i‚de‡
NODEBUG


185 
	`ﬁ§_¥ötf
(1, "(TXTINFOË£tsock›t()=%s\n", 
	`°ªº‹
(
î∫o
));

189 #i‡(
deföed
 
__FªeBSD__
 || deföed 
__FªeBSD_kî√l__
Ë&& deföed 
SO_NOSIGPIPE


190 i‡(
	`£tsock›t
(
ùc_sockë
, 
SOL_SOCKET
, 
SO_NOSIGPIPE
, (*)&
yes
, (yes)) < 0) {

191 
	`≥º‹
("SO_REUSEADDR failed");

198 
	`mem£t
(&
s°
, 0, (sst));

199 i‡(
ﬁ§_˙f
->
ù_vîsi⁄
 =
AF_INET
) {

200 
s°
.
ö4
.
sö_Ámûy
 = 
AF_INET
;

201 
addæí
 = (
sockaddr_ö
);

202 #ifde‡
SIN6_LEN


203 
s°
.
ö4
.
sö_Àn
 = 
addæí
;

205 
s°
.
ö4
.
sö_addr
.
s_addr
 = 
txtöfo_li°í_ù
.
v4
.s_addr;

206 
s°
.
ö4
.
sö_p‹t
 = 
	`ht⁄s
(
ùc_p‹t
);

208 
s°
.
ö6
.
sö6_Ámûy
 = 
AF_INET6
;

209 
addæí
 = (
sockaddr_ö6
);

210 #ifde‡
SIN6_LEN


211 
s°
.
ö6
.
sö6_Àn
 = 
addæí
;

213 
s°
.
ö6
.
sö6_addr
 = 
txtöfo_li°í_ù
.
v6
;

214 
s°
.
ö6
.
sö6_p‹t
 = 
	`ht⁄s
(
ùc_p‹t
);

218 i‡(
	`böd
(
ùc_sockë
, &
s°
.
ö
, 
addæí
) == -1) {

219 #i‚de‡
NODEBUG


220 
	`ﬁ§_¥ötf
(1, "(TXTINFOËböd()=%s\n", 
	`°ªº‹
(
î∫o
));

226 i‡(
	`li°í
(
ùc_sockë
, 1) == -1) {

227 #i‚de‡
NODEBUG


228 
	`ﬁ§_¥ötf
(1, "(TXTINFOËli°í()=%s\n", 
	`°ªº‹
(
î∫o
));

234 
	`add_ﬁ§_sockë
(
ùc_sockë
, &
ùc_a˘i⁄
, 
NULL
, NULL, 
SP_PR_READ
);

236 #i‚de‡
NODEBUG


237 
	`ﬁ§_¥ötf
(2, "(TXTINFOËli°íög o¿p‹à%d\n", 
ùc_p‹t
);

241 
	}
}

244 
ùc_a˘i⁄
(
fd
, *
d©a
 
__©åibuã__
 ((
unu£d
)), 
Êags
 __attribute__ ((unused)))

246 
ﬁ§_sockaddr
 
	gpö
;

248 
	gaddr
[
INET6_ADDRSTRLEN
];

249 
fd_£t
 
	grfds
;

250 
timevÆ
 
	gtv
;

251 
	g£nd_wh©
 = 0;

252 
	gùc_c⁄√˘i⁄
;

254 
sockÀn_t
 
	gaddæí
 = (
pö
);

256 i‡((
	gùc_c⁄√˘i⁄
 = 
ac˚±
(
fd
, &
pö
.
ö
, &
addæí
)) == -1) {

257 #i‚de‡
NODEBUG


258 
ﬁ§_¥ötf
(1, "(TXTINFOËac˚±()=%s\n", 
°ªº‹
(
î∫o
));

263 
	gtv
.
	gtv_£c
 = 
tv
.
tv_u£c
 = 0;

264 i‡(
	gﬁ§_˙f
->
	gù_vîsi⁄
 =
AF_INET
) {

265 i‡(
öë_¡›
(
ﬁ§_˙f
->
ù_vîsi⁄
, &
pö
.
ö4
.
sö_addr
, 
addr
, 
INET6_ADDRSTRLEN
Ë=
NULL
)

266 
addr
[0] = '\0';

267 i‡(!
ù4equÆ
(&
pö
.
ö4
.
sö_addr
, &
txtöfo_ac˚±_ù
.
v4
Ë&& 
	gtxtöfo_ac˚±_ù
.
	gv4
.
	gs_addr
 !
INADDR_ANY
) {

268 #ifde‡
TXTINFO_ALLOW_LOCALHOST


269 i‡(
pö
.
ö4
.
sö_addr
.
s_addr
 !
INADDR_LOOPBACK
) {

271 
ﬁ§_¥ötf
(1, "(TXTINFOËFrom ho°(%sËnŸáŒowed!\n", 
addr
);

272 
˛o£
(
ùc_c⁄√˘i⁄
);

274 #ifde‡
TXTINFO_ALLOW_LOCALHOST


279 i‡(
öë_¡›
(
ﬁ§_˙f
->
ù_vîsi⁄
, &
pö
.
ö6
.
sö6_addr
, 
addr
, 
INET6_ADDRSTRLEN
Ë=
NULL
)

280 
addr
[0] = '\0';

282 i‡(!
ù6equÆ
(&
ö6addr_™y
, &
txtöfo_ac˚±_ù
.
v6
Ë&& !ù6equÆ(&
pö
.
ö6
.
sö6_addr
, &txtinfo_accept_ip.v6)) {

283 
ﬁ§_¥ötf
(1, "(TXTINFOËFrom ho°(%sËnŸáŒowed!\n", 
addr
);

284 
˛o£
(
ùc_c⁄√˘i⁄
);

289 #i‚de‡
NODEBUG


290 
ﬁ§_¥ötf
(2, "(TXTINFOËC⁄√˘ from %s\n", 
addr
);

294 
FD_ZERO
(&
rfds
);

295 
FD_SET
(()
ùc_c⁄√˘i⁄
, &
rfds
);

296 i‡(0 <
£À˘
(
ùc_c⁄√˘i⁄
 + 1, &
rfds
, 
NULL
, NULL, &
tv
)) {

297 
	gªqu
[128];

298 
ssize_t
 
	gs
 = 
ªcv
(
ùc_c⁄√˘i⁄
, (*)&
ªqu
, (requ), 0);

299 i‡(0 < 
	gs
) {

300 
	gªqu
[
s
] = 0;

305 i‡(0 !
°r°r
(
ªqu
, "/√ighbours")Ë
	g£nd_wh©
 = 
SIW_NEIGH
 | 
SIW_LINK
;

309 i‡(0 !
°r°r
(
ªqu
, "/Æl")Ë
	g£nd_wh©
 = 
SIW_ALL
;

311 i‡(0 !
°r°r
(
ªqu
, "/√i")Ë
	g£nd_wh©
 |
SIW_NEIGH
;

312 i‡(0 !
°r°r
(
ªqu
, "/lö")Ë
	g£nd_wh©
 |
SIW_LINK
;

313 i‡(0 !
°r°r
(
ªqu
, "/rou")Ë
	g£nd_wh©
 |
SIW_ROUTE
;

314 i‡(0 !
°r°r
(
ªqu
, "/h«")Ë
	g£nd_wh©
 |
SIW_HNA
;

315 i‡(0 !
°r°r
(
ªqu
, "/mid")Ë
	g£nd_wh©
 |
SIW_MID
;

316 i‡(0 !
°r°r
(
ªqu
, "/t›")Ë
	g£nd_wh©
 |
SIW_TOPO
;

318 i‡(0 !
°r°r
(
ªqu
, "/g©")Ë
	g£nd_wh©
 |
SIW_GATEWAY
;

319 i‡(0 !
°r°r
(
ªqu
, "/c⁄")Ë
	g£nd_wh©
 |
SIW_CONFIG
;

320 i‡(0 !
°r°r
(
ªqu
, "/öt")Ë
	g£nd_wh©
 |
SIW_INTERFACE
;

321 i‡(0 !
°r°r
(
ªqu
, "/2ho")Ë
	g£nd_wh©
 |
SIW_2HOP
;

324 i‡–
	g£nd_wh©
 =0 ) 
£nd_wh©
 = 
SIW_ALL
;

327 
£nd_öfo
(
£nd_wh©
, 
ùc_c⁄√˘i⁄
);

331 
	$ùc_¥öt_√igh
(
autobuf
 *
abuf
, 
boﬁ
 
li°_2h›
)

333 
ùaddr_°r
 
buf1
;

334 
√ighb‹_íåy
 *
√igh
;

335 
√ighb‹_2_li°_íåy
 *
li°_2
;

336 
th›_˙t
;

338 
	`abuf_puts
(
abuf
, "Table: Neighbors\nIPáddress\tSYM\tMPR\tMPRS\tWill.");

339 i‡(
li°_2h›
Ë
	`abuf_puts
(
abuf
,"\n\t2hop interfaceádrress\n");

340 
	`abuf_puts
(
abuf
, "\t2 Hop Neighbors\n");

343 
	`OLSR_FOR_ALL_NBR_ENTRIES
(
√igh
) {

344 
	`abuf_≠≥ndf
(
abuf
, "%s\t%s\t%s\t%s\t%d\t", 
	`ﬁ§_ù_to_°rög
(&
buf1
, &
√igh
->
√ighb‹_maö_addr
), (√igh->
°©us
 =
SYM
) ? "YES" : "NO",

345 
√igh
->
is_m¥
 ? "YES" : "NO", 
	`ﬁ§_lookup_m¥s_£t
(&√igh->
√ighb‹_maö_addr
Ë? "YES" : "NO",Çeigh->
wûlög√ss
);

346 
th›_˙t
 = 0;

348 
li°_2
 = 
√igh
->
√ighb‹_2_li°
.
√xt
;Üist_2 != &neigh->neighbor_2_list;Üist_2 =Üist_2->next) {

349 i‡(
li°_2h›
Ë
	`abuf_≠≥ndf
(
abuf
, "\t%s\n", 
	`ﬁ§_ù_to_°rög
(&
buf1
, &
li°_2
->
√ighb‹_2
->
√ighb‹_2_addr
));

350 
th›_˙t
++;

352 i‡(!
li°_2h›
) {

353 
	`abuf_≠≥ndf
(
abuf
, "%d\n", 
th›_˙t
);

356 
	`OLSR_FOR_ALL_NBR_ENTRIES_END
(
√igh
);

357 
	`abuf_puts
(
abuf
, "\n");

358 
	}
}

361 
	$ùc_¥öt_lök
(
autobuf
 *
abuf
)

363 
ùaddr_°r
 
buf1
, 
buf2
;

364 
lqãxtbuf„r
 
lqbuf„r1
, 
lqbuf„r2
;

366 
lök_íåy
 *
my_lök
 = 
NULL
;

368 #ifde‡
ACTIVATE_VTIME_TXTINFO


369 
	`abuf_puts
(
abuf
, "Table: Links\nLocal IP\tRemote IP\tVTime\tLQ\tNLQ\tCost\n");

371 
	`abuf_puts
(
abuf
, "Table: Links\nLocal IP\tRemote IP\tHyst.\tLQ\tNLQ\tCost\n");

375 
	`OLSR_FOR_ALL_LINK_ENTRIES
(
my_lök
) {

376 #ifde‡
ACTIVATE_VTIME_TXTINFO


377 
diff
 = ()(
my_lök
->
lök_timî
->
timî_˛ock
 - 
now_times
);

379 
	`abuf_≠≥ndf
(
abuf
, "%s\t%s\t%d.%03d\t%s\t%s\t\n", 
	`ﬁ§_ù_to_°rög
(&
buf1
, &
my_lök
->
loˇl_iÁ˚_addr
),

380 
	`ﬁ§_ù_to_°rög
(&
buf2
, &
my_lök
->
√ighb‹_iÁ˚_addr
),

381 
diff
/1000, 
	`abs
(diff%1000),

382 
	`gë_lök_íåy_ãxt
(
my_lök
, '\t', &
lqbuf„r1
),

383 
	`gë_lökco°_ãxt
(
my_lök
->
lökco°
, 
Ál£
, &
lqbuf„r2
));

385 
	`abuf_≠≥ndf
(
abuf
, "%s\t%s\t0.00\t%s\t%s\t\n", 
	`ﬁ§_ù_to_°rög
(&
buf1
, &
my_lök
->
loˇl_iÁ˚_addr
),

386 
	`ﬁ§_ù_to_°rög
(&
buf2
, &
my_lök
->
√ighb‹_iÁ˚_addr
),

387 
	`gë_lök_íåy_ãxt
(
my_lök
, '\t', &
lqbuf„r1
),

388 
	`gë_lökco°_ãxt
(
my_lök
->
lökco°
, 
Ál£
, &
lqbuf„r2
));

390 } 
	`OLSR_FOR_ALL_LINK_ENTRIES_END
(
my_lök
);

392 
	`abuf_puts
(
abuf
, "\n");

393 
	}
}

396 
	$ùc_¥öt_rouãs
(
autobuf
 *
abuf
)

398 
ùaddr_°r
 
buf1
, 
buf2
;

399 
π_íåy
 *
π
;

400 
lqãxtbuf„r
 
lqbuf„r
;

402 
	`abuf_puts
(
abuf
, "Table: Routes\nDestination\tGateway IP\tMetric\tETX\tInterface\n");

405 
	`OLSR_FOR_ALL_RT_ENTRIES
(
π
) {

406 
	`abuf_≠≥ndf
(
abuf
, "%s/%d\t%s\t%d\t%s\t%s\t\n", 
	`ﬁ§_ù_to_°rög
(&
buf1
, &
π
->
π_d°
.
¥efix
),Ñt->π_d°.
¥efix_Àn
,

407 
	`ﬁ§_ù_to_°rög
(&
buf2
, &
π
->
π_be°
->
πp_√xth›
.
g©eway
),Ñt->π_be°->
πp_mëric
.
h›s
,

408 
	`gë_lökco°_ãxt
(
π
->
π_be°
->
πp_mëric
.
co°
, 
åue
, &
lqbuf„r
),

409 
	`if_ifwôhödex_«me
(
π
->
π_be°
->
πp_√xth›
.
iif_ödex
));

410 } 
	`OLSR_FOR_ALL_RT_ENTRIES_END
(
π
);

412 
	`abuf_puts
(
abuf
, "\n");

414 
	}
}

417 
	$ùc_¥öt_t›ﬁogy
(
autobuf
 *
abuf
)

419 
tc_íåy
 *
tc
;

421 #ifde‡
ACTIVATE_VTIME_TXTINFO


422 
	`abuf_puts
(
abuf
, "Table: Topology\nDest. IP\tLast hop IP\tLQ\tNLQ\tCost\tVTime\n");

424 
	`abuf_puts
(
abuf
, "Table: Topology\nDest. IP\tLast hop IP\tLQ\tNLQ\tCost\n");

428 
	`OLSR_FOR_ALL_TC_ENTRIES
(
tc
) {

429 
tc_edge_íåy
 *
tc_edge
;

430 
	`OLSR_FOR_ALL_TC_EDGE_ENTRIES
(
tc
, 
tc_edge
) {

431 i‡(
tc_edge
->
edge_öv
) {

432 
ùaddr_°r
 
d°buf
, 
addrbuf
;

433 
lqãxtbuf„r
 
lqbuf„r1
, 
lqbuf„r2
;

434 #ifde‡
ACTIVATE_VTIME_TXTINFO


435 
uöt32_t
 
vt
 = 
tc
->
vÆidôy_timî
 !
NULL
 ? (tc->vÆidôy_timî->
timî_˛ock
 - 
now_times
) : 0;

436 
diff
 = ()(
vt
);

437 
	`abuf_≠≥ndf
(
abuf
, "%s\t%s\t%s\t%s\t%d.%03d\n", 
	`ﬁ§_ù_to_°rög
(&
d°buf
, &
tc_edge
->
T_de°_addr
),

438 
	`ﬁ§_ù_to_°rög
(&
addrbuf
, &
tc
->
addr
),

439 
	`gë_tc_edge_íåy_ãxt
(
tc_edge
, '\t', &
lqbuf„r1
),

440 
	`gë_lökco°_ãxt
(
tc_edge
->
co°
, 
Ál£
, &
lqbuf„r2
),

441 
diff
/1000, diff%1000);

443 
	`abuf_≠≥ndf
(
abuf
, "%s\t%s\t%s\t%s\n", 
	`ﬁ§_ù_to_°rög
(&
d°buf
, &
tc_edge
->
T_de°_addr
), ol§_ù_to_°rög(&
addrbuf
, &
tc
->
addr
),

444 
	`gë_tc_edge_íåy_ãxt
(
tc_edge
, '\t', &
lqbuf„r1
), 
	`gë_lökco°_ãxt
—c_edge->
co°
, 
Ál£
, &
lqbuf„r2
));

447 } 
	`OLSR_FOR_ALL_TC_EDGE_ENTRIES_END
(
tc
, 
tc_edge
);

448 } 
	`OLSR_FOR_ALL_TC_ENTRIES_END
(
tc
);

450 
	`abuf_puts
(
abuf
, "\n");

451 
	}
}

454 
	$ùc_¥öt_h«
(
autobuf
 *
abuf
)

456 
ù_¥efix_li°
 *
h«
;

457 
h«_íåy
 *
tmp_h«
;

458 
h«_√t
 *
tmp_√t
;

459 
ùaddr_°r
 
buf
, 
maöaddrbuf
;

461 #ifde‡
ACTIVATE_VTIME_TXTINFO


462 
	`abuf_puts
(
abuf
, "Table: HNA\nDestination\tGateway\tVTime\n");

464 
	`abuf_puts
(
abuf
, "Table: HNA\nDestination\tGateway\n");

468 i‡(
ﬁ§_˙f
->
ù_vîsi⁄
 =
AF_INET
) {

469 
h«
 = 
ﬁ§_˙f
->
h«_íåõs
; h« !
NULL
; h« = h«->
√xt
) {

470 
	`abuf_≠≥ndf
(
abuf
, "%s/%d\t%s\n", 
	`ﬁ§_ù_to_°rög
(&
buf
, &
h«
->
√t
.
¥efix
), h«->√t.
¥efix_Àn
,

471 
	`ﬁ§_ù_to_°rög
(&
maöaddrbuf
, &
ﬁ§_˙f
->
maö_addr
));

474 
h«
 = 
ﬁ§_˙f
->
h«_íåõs
; h« !
NULL
; h« = h«->
√xt
) {

475 
	`abuf_≠≥ndf
(
abuf
, "%s/%d\t%s\n", 
	`ﬁ§_ù_to_°rög
(&
buf
, &
h«
->
√t
.
¥efix
), h«->√t.
¥efix_Àn
,

476 
	`ﬁ§_ù_to_°rög
(&
maöaddrbuf
, &
ﬁ§_˙f
->
maö_addr
));

481 
	`OLSR_FOR_ALL_HNA_ENTRIES
(
tmp_h«
) {

484 
tmp_√t
 = 
tmp_h«
->
√tw‹ks
.
√xt
;Åmp_net != &tmp_hna->networks;Åmp_net =Åmp_net->next) {

485 #ifde‡
ACTIVATE_VTIME_TXTINFO


486 
uöt32_t
 
vt
 = 
tmp_√t
->
h«_√t_timî
 !
NULL
 ? (tmp_√t->h«_√t_timî->
timî_˛ock
 - 
now_times
) : 0;

487 
diff
 = ()(
vt
);

488 
	`abuf_≠≥ndf
(
abuf
, "%s/%d\t%s\t\%d.%03d\n", 
	`ﬁ§_ù_to_°rög
(&
buf
, &
tmp_√t
->
h«_¥efix
.
¥efix
),

489 
tmp_√t
->
h«_¥efix
.
¥efix_Àn
, 
	`ﬁ§_ù_to_°rög
(&
maöaddrbuf
, &
tmp_h«
->
A_g©eway_addr
),

490 
diff
/1000, 
	`abs
(diff%1000));

492 
	`abuf_≠≥ndf
(
abuf
, "%s/%d\t%s\n", 
	`ﬁ§_ù_to_°rög
(&
buf
, &
tmp_√t
->
h«_¥efix
.
¥efix
),

493 
tmp_√t
->
h«_¥efix
.
¥efix_Àn
, 
	`ﬁ§_ù_to_°rög
(&
maöaddrbuf
, &
tmp_h«
->
A_g©eway_addr
));

497 
	`OLSR_FOR_ALL_HNA_ENTRIES_END
(
tmp_h«
);

499 
	`abuf_puts
(
abuf
, "\n");

500 
	}
}

503 
	$ùc_¥öt_mid
(
autobuf
 *
abuf
)

505 
idx
;

506 
is_fú°
;

507 
mid_íåy
 *
íåy
;

508 
mid_addªss
 *
Æüs
;

509 #ifde‡
ACTIVATE_VTIME_TXTINFO


510 
	`abuf_puts
(
abuf
, "Table: MID\nIPáddress\tAlias\tVTime\n");

512 
	`abuf_puts
(
abuf
, "Table: MID\nIPáddress\tAliases\n");

516 
idx
 = 0; idx < 
HASHSIZE
; idx++) {

517 
íåy
 = 
mid_£t
[
idx
].
√xt
;

519 
íåy
 !&
mid_£t
[
idx
]) {

520 #ifde‡
ACTIVATE_VTIME_TXTINFO


521 
ùaddr_°r
 
buf
, 
buf2
;

523 
ùaddr_°r
 
buf
;

524 
	`abuf_puts
(
abuf
, 
	`ﬁ§_ù_to_°rög
(&
buf
, &
íåy
->
maö_addr
));

526 
Æüs
 = 
íåy
->
Æü£s
;

527 
is_fú°
 = 1;

529 
Æüs
) {

530 #ifde‡
ACTIVATE_VTIME_TXTINFO


531 
uöt32_t
 
vt
 = 
Æüs
->
vtime
 - 
now_times
;

532 
diff
 = ()(
vt
);

534 
	`abuf_≠≥ndf
(
abuf
, "%s\t%s\t%d.%03d\n",

535 
	`ﬁ§_ù_to_°rög
(&
buf
, &
íåy
->
maö_addr
),

536 
	`ﬁ§_ù_to_°rög
(&
buf2
, &
Æüs
->alias),

537 
diff
/1000, 
	`abs
(diff%1000));

539 
	`abuf_≠≥ndf
(
abuf
, "%s%s", (
is_fú°
 ? "\t" : ";"), 
	`ﬁ§_ù_to_°rög
(&
buf
, &
Æüs
->alias));

541 
Æüs
 =álüs->
√xt_Æüs
;

542 
is_fú°
 = 0;

544 
íåy
 =É¡ry->
√xt
;

545 #i‚de‡
ACTIVATE_VTIME_TXTINFO


546 
	`abuf_puts
(
abuf
,"\n");

550 
	`abuf_puts
(
abuf
, "\n");

551 
	}
}

554 
	$ùc_¥öt_g©eway
(
autobuf
 *
abuf
)

556 #i‚de‡
löux


557 
	`abuf_puts
(
abuf
, "Gateway mode is only supported inÜinux\n");

559 c⁄° 
IPV4
[] = "ipv4";

560 c⁄° 
IPV4_NAT
[] = "ipv4(n)";

561 c⁄° 
IPV6
[] = "ipv6";

562 c⁄° 
NONE
[] = "-";

564 
ùaddr_°r
 
buf
;

565 
g©eway_íåy
 *
gw
;

566 
lqãxtbuf„r
 
lqbuf
;

569 
	`abuf_puts
(
abuf
, "Table: Gateways\nStatus\tGateway IP\tETX\tHopcnt\tUplink\tDownlnk\tIPv4\tIPv6\tPrefix\n");

570 
	`OLSR_FOR_ALL_GATEWAY_ENTRIES
(
gw
) {

571 
v4
 = '-', 
v6
 = '-';

572 
boﬁ
 
autoV4
 = 
Ál£
, 
autoV6
 = false;

573 c⁄° *
v4ty≥
 = 
NONE
, *
v6ty≥
 = NONE;

574 
tc_íåy
 *
tc
;

576 i‡((
tc
 = 
	`ﬁ§_lookup_tc_íåy
(&
gw
->
‹igö©‹
)Ë=
NULL
) {

580 i‡(
gw
 =
	`ﬁ§_gë_ùv4_öë_g©eway
(&
autoV4
)) {

581 
v4
 = 
autoV4
 ? 'a' : 's';

583 i‡(
gw
->
ùv4
 && (
ﬁ§_˙f
->
ù_vîsi⁄
 =
AF_INET
 || ol§_˙f->
u£_niô
)

584 && (
ﬁ§_˙f
->
sm¨t_gw_Ælow_«t
 || !
gw
->
ùv4«t
)) {

585 
v4
 = 'u';

588 i‡(
gw
 =
	`ﬁ§_gë_ùv6_öë_g©eway
(&
autoV6
)) {

589 
v6
 = 
autoV6
 ? 'a' : 's';

591 i‡(
gw
->
ùv6
 && 
ﬁ§_˙f
->
ù_vîsi⁄
 =
AF_INET6
) {

592 
v6
 = 'u';

595 i‡(
gw
->
ùv4
) {

596 
v4ty≥
 = 
gw
->
ùv4«t
 ? 
IPV4_NAT
 : 
IPV4
;

598 i‡(
gw
->
ùv6
) {

599 
v6ty≥
 = 
IPV6
;

602 
	`abuf_≠≥ndf
(
abuf
, "%c%c\t%s\t%s\t%d\t%u\t%u\t%s\t%s\t%s\n",

603 
v4
, 
v6
, 
	`ﬁ§_ù_to_°rög
(&
buf
, &
gw
->
‹igö©‹
),

604 
	`gë_lökco°_ãxt
(
tc
->
∑th_co°
, 
åue
, &
lqbuf
),Åc->
h›s
,

605 
gw
->
u∂ök
, gw->
dow∆ök
, 
v4ty≥
, 
v6ty≥
,

606 
gw
->
exã∫Æ_¥efix
.
¥efix_Àn
 =0 ? 
NONE
 : 
	`ﬁ§_ù_¥efix_to_°rög
(&gw->external_prefix));

607 } 
	`OLSR_FOR_ALL_GATEWAY_ENTRIES_END
(
gw
)

609 
	}
}

612 
	$ùc_¥öt_c⁄fig
(
autobuf
 *
abuf
)

614 
	`ﬁ§d_wrôe_˙f_autobuf
(
abuf
, 
ﬁ§_˙f
);

615 
	}
}

618 
	$ùc_¥öt_öãrÁ˚
(
autobuf
 *
abuf
)

620 c⁄° 
ﬁ§_if
 *
ifs
;

621 
	`abuf_puts
(
abuf
, "Table: Interfaces\nName\tState\tMTU\tWLAN\tSrc-Adress\tMask\tDst-Adress\n");

622 
ifs
 = 
ﬁ§_˙f
->
öãrÁ˚s
; if†!
NULL
; if†ifs->
√xt
) {

623 c⁄° 
öãrÁ˚
 *c⁄° 
rifs
 = 
ifs
->
öãrf
;

624 
	`abuf_≠≥ndf
(
abuf
, "%s\t", 
ifs
->
«me
);

625 i‡(!
rifs
) {

626 
	`abuf_puts
(
abuf
, "DOWN\n");

629 
	`abuf_≠≥ndf
(
abuf
, "UP\t%d\t%s\t",

630 
rifs
->
öt_mtu
,Ñifs->
is_wúñess
 ? "Yes" : "No");

632 i‡(
ﬁ§_˙f
->
ù_vîsi⁄
 =
AF_INET
) {

633 
ùaddr_°r
 
addrbuf
, 
maskbuf
, 
bˇ°buf
;

634 
	`abuf_≠≥ndf
(
abuf
, "%s\t%s\t%s\n",

635 
	`ù4_to_°rög
(&
addrbuf
, 
rifs
->
öt_addr
.
sö_addr
), ip4_to_°rög(&
maskbuf
,Ñifs->
öt_√tmask
.sin_addr),

636 
	`ù4_to_°rög
(&
bˇ°buf
, 
rifs
->
öt_brﬂdaddr
.
sö_addr
));

638 
ùaddr_°r
 
addrbuf
, 
maskbuf
;

639 
	`abuf_≠≥ndf
(
abuf
, "%s\t\t%s\n",

640 
	`ù6_to_°rög
(&
addrbuf
, &
rifs
->
öt6_addr
.
sö6_addr
), ip6_to_°rög(&
maskbuf
, &rifs->
öt6_mu…addr
.sin6_addr));

643 
	`abuf_puts
(
abuf
, "\n");

644 
	}
}

648 
txtöfo_wrôe_d©a
(*
foo
 
__©åibuã__
 ((
unu£d
))) {

649 
fd_£t
 
	g£t
;

650 
	gªsu…
, 
	gi
, 
	gj
, 
	gmax
;

651 
timevÆ
 
	gtv
;

653 
FD_ZERO
(&
£t
);

654 
	gmax
 = 0;

655 
	gi
=0; i<
	goutbuf„r_cou¡
; i++) {

657 
FD_SET
(()(
outbuf„r_sockë
[
i
]), &
£t
);

659 i‡(
	goutbuf„r_sockë
[
i
] > 
	gmax
) {

660 
	gmax
 = 
outbuf„r_sockë
[
i
];

664 
	gtv
.
	gtv_£c
 = 0;

665 
	gtv
.
	gtv_u£c
 = 0;

667 
	gªsu…
 = 
£À˘
(
max
 + 1, 
NULL
, &
£t
, NULL, &
tv
);

668 i‡(
	gªsu…
 <= 0) {

672 
	gi
=0; i<
	goutbuf„r_cou¡
; i++) {

673 i‡(
FD_ISSET
(
outbuf„r_sockë
[
i
], &
£t
)) {

674 
	gªsu…
 = 
£nd
(
outbuf„r_sockë
[
i
], 
outbuf„r
[i] + 
outbuf„r_wrôãn
[i], 
outbuf„r_size
[i] - outbuffer_written[i], 0);

675 i‡(
	gªsu…
 > 0) {

676 
	goutbuf„r_wrôãn
[
i
] +
ªsu…
;

679 i‡(
	gªsu…
 <0 || 
outbuf„r_wrôãn
[
i
] =
outbuf„r_size
[i]) {

681 
˛o£
(
outbuf„r_sockë
[
i
]);

682 
‰ì
 (
outbuf„r
[
i
]);

684 
	gj
=
i
+1; j<
	goutbuf„r_cou¡
; j++) {

685 
	goutbuf„r
[
j
-1] = 
outbuf„r
[j];

686 
	goutbuf„r_size
[
j
-1] = 
outbuf„r_size
[j];

687 
	goutbuf„r_sockë
[
j
-1] = 
outbuf„r_sockë
[j];

688 
	goutbuf„r_wrôãn
[
j
-1] = 
outbuf„r_wrôãn
[j];

690 
	goutbuf„r_cou¡
--;

694 i‡(
	goutbuf„r_cou¡
 == 0) {

695 
ﬁ§_°›_timî
(
wrôëimî_íåy
);

700 
	$£nd_öfo
(
£nd_wh©
, 
the_sockë
)

702 
autobuf
 
abuf
;

704 
	`abuf_öô
(&
abuf
, 4096);

707 
	`abuf_puts
(&
abuf
, "HTTP/1.0 200 OK\n");

708 
	`abuf_puts
(&
abuf
, "Content-type:Åext/plain\n\n");

713 i‡((
£nd_wh©
 & 
SIW_LINK
Ë=SIW_LINKË
	`ùc_¥öt_lök
(&
abuf
);

715 i‡((
£nd_wh©
 & 
SIW_NEIGH
Ë=SIW_NEIGHË
	`ùc_¥öt_√igh
(&
abuf
,
Ál£
);

717 i‡((
£nd_wh©
 & 
SIW_TOPO
Ë=SIW_TOPOË
	`ùc_¥öt_t›ﬁogy
(&
abuf
);

719 i‡((
£nd_wh©
 & 
SIW_HNA
Ë=SIW_HNAË
	`ùc_¥öt_h«
(&
abuf
);

721 i‡((
£nd_wh©
 & 
SIW_MID
Ë=SIW_MIDË
	`ùc_¥öt_mid
(&
abuf
);

723 i‡((
£nd_wh©
 & 
SIW_ROUTE
Ë=SIW_ROUTEË
	`ùc_¥öt_rouãs
(&
abuf
);

725 i‡((
£nd_wh©
 & 
SIW_GATEWAY
Ë=SIW_GATEWAYË
	`ùc_¥öt_g©eway
(&
abuf
);

727 i‡((
£nd_wh©
 & 
SIW_CONFIG
Ë=SIW_CONFIGË
	`ùc_¥öt_c⁄fig
(&
abuf
);

729 i‡((
£nd_wh©
 & 
SIW_INTERFACE
Ë=SIW_INTERFACEË
	`ùc_¥öt_öãrÁ˚
(&
abuf
);

731 i‡((
£nd_wh©
 & 
SIW_2HOP
Ë=SIW_2HOPË
	`ùc_¥öt_√igh
(&
abuf
,
åue
);

733 
outbuf„r
[
outbuf„r_cou¡
] = 
	`ﬁ§_mÆloc
(
abuf
.
Àn
, "txt output buffer");

734 
outbuf„r_size
[
outbuf„r_cou¡
] = 
abuf
.
Àn
;

735 
outbuf„r_wrôãn
[
outbuf„r_cou¡
] = 0;

736 
outbuf„r_sockë
[
outbuf„r_cou¡
] = 
the_sockë
;

738 
	`mem˝y
(
outbuf„r
[
outbuf„r_cou¡
], 
abuf
.
buf
,ábuf.
Àn
);

739 
outbuf„r_cou¡
++;

741 i‡(
outbuf„r_cou¡
 == 1) {

742 
wrôëimî_íåy
 = 
	`ﬁ§_°¨t_timî
(100, 0, 
OLSR_TIMER_PERIODIC
, &
txtöfo_wrôe_d©a
, 
NULL
, 0);

745 
	`abuf_‰ì
(&
abuf
);

746 
	}
}

	@lib/txtinfo/src/olsrd_txtinfo.h

47 #i‚de‡
_OLSRD_TXTINFO


48 
	#_OLSRD_TXTINFO


	)

50 
	~"ﬁ§_ty≥s.h
"

51 
	~"ﬁ§d_∂ugö.h
"

52 
	~"∂ugö_utû.h
"

60 
ﬁ§_ù_addr
 
txtöfo_ac˚±_ù
;

61 
ﬁ§_ù_addr
 
txtöfo_li°í_ù
;

62 
ùc_p‹t
;

63 
nom¥
;

65 
ﬁ§d_∂ugö_öãrÁ˚_vîsi⁄
();

66 
ﬁ§d_∂ugö_öô
();

67 
ﬁ§_∂ugö_exô
();

68 
ﬁ§d_gë_∂ugö_∑ømëîs
(c⁄° 
ﬁ§d_∂ugö_∑ømëîs
 **
∑øms
, *
size
);

	@lib/watchdog/src/olsrd_plugin.c

49 
	~"ﬁ§d_∂ugö.h
"

50 
	~"∂ugö_utû.h
"

51 
	~"ﬁ§.h
"

52 
	~"defs.h
"

53 
	~"scheduÀr.h
"

54 
	~"ﬁ§_cookõ.h
"

57 
	~<°dio.h
>

58 
	~<°rög.h
>

59 
	~<°dlib.h
>

60 
	~<time.h
>

61 
	#PLUGIN_INTERFACE_VERSION
 5

	)

63 
ﬁ§_cookõ_öfo
 *
	gw©chdog_timî_cookõ
;

65 
	gw©chdog_fûíame
[
FILENAME_MAX
 + 1] = "/tmp/olsr.watchdog";

66 
	gw©chdog_öãrvÆ
 = 5;

73 
	$ﬁ§d_∂ugö_öãrÁ˚_vîsi⁄
()

75  
PLUGIN_INTERFACE_VERSION
;

76 
	}
}

80 
£t_w©chdog_fûe
(c⁄° *
vÆue
, *
d©a
 
__©åibuã__
 ((
unu£d
)), 
£t_∂ugö_∑ømëî_add⁄
 
add⁄
 __attribute__ ((unused)))

82 
°∫˝y
(
w©chdog_fûíame
, 
vÆue
, 
FILENAME_MAX
);

87 
£t_w©chdog_öãrvÆ
(c⁄° *
vÆue
, *
d©a
 
__©åibuã__
 ((
unu£d
)), 
£t_∂ugö_∑ømëî_add⁄
 
add⁄


88 
__©åibuã__
 ((
unu£d
)))

90 
	gw©chdog_öãrvÆ
 = 
©oi
(
vÆue
);

98 c⁄° 
ﬁ§d_∂ugö_∑ømëîs
 
	g∂ugö_∑ømëîs
[] = {

99 {.
«me
 = "fûe",.
	g£t_∂ugö_∑ømëî
 = &
£t_w©chdog_fûe
,.
	gd©a
 = 
NULL
},

100 {.
	g«me
 = "öãrvÆ",.
	g£t_∂ugö_∑ømëî
 = &
£t_w©chdog_öãrvÆ
,.
	gd©a
 = 
NULL
},

104 
	$ﬁ§d_gë_∂ugö_∑ømëîs
(c⁄° 
ﬁ§d_∂ugö_∑ømëîs
 **
∑øms
, *
size
)

106 *
∑øms
 = 
∂ugö_∑ømëîs
;

107 *
size
 = 
	`ARRAYSIZE
(
∂ugö_∑ømëîs
);

108 
	}
}

111 
ﬁ§_w©chdog_wrôe_Æivefûe
(*
foo
 
__©åibuã__
 ((
unu£d
)))

113 
FILE
 *
	gfûe
 = 
f›í
(
w©chdog_fûíame
, "w");

114 i‡(
	gfûe
 =
NULL
) {

115 
OLSR_PRINTF
(3, "Error, cannot write watchdogálivefile");

117 
Ârötf
(
fûe
, "%ld\n", ()
time
(
NULL
));

118 
fÊush
(
fûe
);

119 
f˛o£
(
fûe
);

128 
	$ﬁ§d_∂ugö_öô
()

131 
w©chdog_timî_cookõ
 = 
	`ﬁ§_Æloc_cookõ
("W©chdog: wrôêÆive-fûe", 
OLSR_COOKIE_TYPE_TIMER
);

134 
	`ﬁ§_°¨t_timî
(
w©chdog_öãrvÆ
 * 
MSEC_PER_SEC
, 0, 
OLSR_TIMER_PERIODIC
,

135 &
ﬁ§_w©chdog_wrôe_Æivefûe
, 
NULL
, 
w©chdog_timî_cookõ
);

138 
	}
}

	@lib/watchdog/src/olsrd_plugin.h

46 #i‚de‡
_OLSRD_PLUGIN_MINI


47 
	#_OLSRD_PLUGIN_MINI


	)

57 
ﬁ§d_∂ugö_öô
();

60 
ﬁ§d_∂ugö_öãrÁ˚_vîsi⁄
();

	@src/apm.h

42 #i‚de‡
_OLSR_APM


43 
	#_OLSR_APM


	)

49 
	#OLSR_BATTERY_POWERED
 0

	)

50 
	#OLSR_AC_POWERED
 1

	)

52 
	sﬁ§_≠m_öfo
 {

53 
	mac_löe_°©us
;

54 
	mb©ãry_≥r˚¡age
;

55 
	mb©ãry_time_À·
;

58 
≠m_öô
();

60 
≠m_¥ötöfo
(
ﬁ§_≠m_öfo
 *);

69 
≠m_ªad
(
ﬁ§_≠m_öfo
 *);

	@src/bsd/apm.c

42 
	~"≠m.h
"

43 
	~"defs.h
"

44 
	~<°dio.h
>

45 
	~<°rög.h
>

48 
	$≠m_öô
()

51 
	}
}

54 
≠m_¥ötöfo
(
ﬁ§_≠m_öfo
 *
ApmInfo
 
__©åibuã__
 ((
unu£d
)))

59 
≠m_ªad
(
ﬁ§_≠m_öfo
 *
ApmInfo
 
__©åibuã__
 ((
unu£d
)))

	@src/bsd/dummy.c

8 
	~"../defs.h
"

9 
	~"../kî√l_rouãs.h
"

10 
	~"../kî√l_tu¬ñ.h
"

11 
	~"../√t_os.h
"

14 
ﬁ§_if_£tù
(c⁄° *
dev
 
__©åibuã__
 ((
unu£d
)), 
ﬁ§_ù_addr
 *
ù
 __©åibuã__ ((unu£d)), 
ùvîsi⁄
 __attribute__ ((unused)));

18 
	$ﬁ§_os_öô_ùtu¬ñ
() {

20 
	}
}

22 
	$ﬁ§_os_˛ónup_ùtu¬ñ
() {

23 
	}
}

25 
ﬁ§_ùtu¬ñ_íåy
 *
ﬁ§_os_add_ùù_tu¬ñ
(
ﬁ§_ù_addr
 *
èrgë
 
__©åibuã__
 ((
unu£d
)),

26 
boﬁ
 
å™•‹tV4
 
__©åibuã__
 ((
unu£d
))) {

27  
	gNULL
;

30 
ﬁ§_os_dñ_ùù_tu¬ñ
(
ﬁ§_ùtu¬ñ_íåy
 *
t
 
__©åibuã__
 ((
unu£d
))) {

34 
boﬁ
 
ﬁ§_if_isup
(c⁄° * 
dev
 
__©åibuã__
 ((
unu£d
))) {

35  
	gÁl£
;

38 
ﬁ§_if_£tù
(c⁄° *
dev
 
__©åibuã__
 ((
unu£d
)),

39 
ﬁ§_ù_addr
 *
ù
 
__©åibuã__
 ((
unu£d
)),

40 
ùvîsi⁄
 
__©åibuã__
 ((
unu£d
))) {

44 
ﬁ§_os_niô_4to6_rouã
(c⁄° 
ﬁ§_ù_¥efix
 *
d°_v4
 
__©åibuã__
 ((
unu£d
)),

45 
boﬁ
 
£t
 
__©åibuã__
 ((
unu£d
))) {

47 
ﬁ§_os_niô_6to4_rouã
(c⁄° 
ﬁ§_ù_¥efix
 *
d°_v6
 
__©åibuã__
 ((
unu£d
)),

48 
boﬁ
 
£t
 
__©åibuã__
 ((
unu£d
))) {

50 
ﬁ§_os_öëgw_tu¬ñ_rouã
(
uöt32_t
 
if_idx
 
__©åibuã__
 ((
unu£d
)),

51 
boﬁ
 
ùv4
 
__©åibuã__
 ((
unu£d
)),

52 
boﬁ
 
£t
 
__©åibuã__
 ((
unu£d
))) {

55 
ﬁ§_os_pﬁicy_ruÀ
(
Ámûy
 
__©åibuã__
 ((
unu£d
)),

56 
πèbÀ
 
__©åibuã__
 ((
unu£d
)),

57 
uöt32_t
 
¥i‹ôy
 
__©åibuã__
 ((
unu£d
)),

58 c⁄° *
if_«me
 
__©åibuã__
 ((
unu£d
)),

59 
boﬁ
 
£t
 
__©åibuã__
 ((
unu£d
))) {

63 
ﬁ§_os_loˇlho°_if
(
ﬁ§_ù_addr
 *
ù
 
__©åibuã__
 ((
unu£d
)),

64 
boﬁ
 
¸óã
 
__©åibuã__
 ((
unu£d
))) {

68 
ﬁ§_os_ifù
(
ifödex
 
__©åibuã__
 ((
unu£d
)),

69 
ﬁ§_ù_addr
 *
ù
 
__©åibuã__
 ((
unu£d
)), 
boﬁ
 
¸óã
 __attribute__ ((unused))) {

	@src/bsd/kernel_routes.c

42 
	~"kî√l_rouãs.h
"

43 
	~"ﬁ§.h
"

44 
	~"defs.h
"

45 
	~"¥o˚ss_rouãs.h
"

46 
	~"√t_ﬁ§.h
"

47 
	~"ùˇlc.h
"

49 
	~<î∫o.h
>

50 
	~<uni°d.h
>

51 
	~<√t/if_dl.h
>

53 #ifde‡
_WRS_KERNEL


54 
	~<√t/iÁddrs.h
>

55 
	~<w∫/c‹eù/√t/rouã.h
>

56 
	~<m2Lib.h
>

57 
	#OLSR_PID
 
	`èskIdSñf
 ()

	)

59 
	~<iÁddrs.h
>

60 
	#OLSR_PID
 
	`gëpid
 ()

	)

63 
	g£q
 = 0;

72 
	$add_dñ_rouã
(c⁄° 
π_íåy
 *
π
, 
add
)

74 
π_msghdr
 *
πm
;

75 
buff
[512];

76 *
wÆkî
;

77 
sockaddr_ö
 
sö4
;

78 
sockaddr_dl
 *
sdl
;

79 
iÁddrs
 *
addrs
;

80 
iÁddrs
 *
awÆkî
;

81 c⁄° 
π_√xth›
 *
√xth›
;

82 
ﬁ§_ù_addr
 
mask
;

83 
sö_size
, 
sdl_size
;

84 
Àn
;

86 i‡(
add
) {

87 
	`OLSR_PRINTF
(2, "KERN: Addög %s\n", 
	`ﬁ§_πp_to_°rög
(
π
->
π_be°
));

89 
	`OLSR_PRINTF
(2, "KERN: Dñëög %s\n", 
	`ﬁ§_π_to_°rög
(
π
));

92 
	`mem£t
(
buff
, 0, (buff));

93 
	`mem£t
(&
sö4
, 0, (sin4));

95 
sö4
.
sö_Àn
 = (sin4);

96 
sö4
.
sö_Ámûy
 = 
AF_INET
;

98 
sö_size
 = 1 + (((
sockaddr_ö
) - 1) | (() - 1));

99 
sdl_size
 = 1 + (((
sockaddr_dl
) - 1) | (() - 1));

106 
πm
 = (
π_msghdr
 *)
buff
;

108 
πm
->
πm_vîsi⁄
 = 
RTM_VERSION
;

109 
πm
->
πm_ty≥
 = 
add
 ? 
RTM_ADD
 : 
RTM_DELETE
;

110 
πm
->
πm_ödex
 = 0;

111 
πm
->
πm_Êags
 = 
	`ﬁ§_π_Êags
(
π
, 
add
);

112 
πm
->
πm_pid
 = 
OLSR_PID
;

113 
πm
->
πm_£q
 = ++
£q
;

116 
wÆkî
 = 
buff
 + (
π_msghdr
);

122 #ifde‡
_WRS_KERNEL


126 
	`OLSR_PRINTF
(8, "\t- Setting Protocol: 0\n");

127 ((
sockaddr_π
 *)(&
sö4
))->
§t_¥Ÿo
 = 0;

128 
	`OLSR_PRINTF
(8, "\t- Setting TOS: 0\n");

129 ((
sockaddr_π
 *)(&
sö4
))->
§t_tos
 = 0;

132 
sö4
.
sö_addr
 = 
π
->
π_d°
.
¥efix
.
v4
;

133 
	`mem˝y
(
wÆkî
, &
sö4
, (sin4));

134 
wÆkî
 +
sö_size
;

135 
πm
->
πm_addrs
 = 
RTA_DST
;

141 #ifde‡
_WRS_KERNEL


145 i‡(
add
) {

147 
√xth›
 = 
	`ﬁ§_gë_nh
(
π
);

148 i‡(0 !(
πm
->
πm_Êags
 & 
RTF_GATEWAY
)) {

149 
sö4
.
sö_addr
 = 
√xth›
->
g©eway
.
v4
;

150 
	`mem˝y
(
wÆkî
, &
sö4
, (sin4));

151 
wÆkî
 +
sö_size
;

152 
πm
->
πm_addrs
 |
RTA_GATEWAY
;

159 i‡(
	`gëiÁddrs
(&
addrs
)) {

160 
	`Ârötf
(
°dîr
, "\ngetifaddrs() failed\n");

164 
awÆkî
 = 
addrs
;áwÆkî !
NULL
;áwÆkî =áwÆkî->
iÁ_√xt
)

165 i‡(
awÆkî
->
iÁ_addr
->
ß_Ámûy
 =
AF_LINK
 && 
	`°rcmp
◊wÆkî->
iÁ_«me
, 
	`if_ifwôhödex_«me
(
√xth›
->
iif_ödex
)) == 0)

168 i‡(
awÆkî
 =
NULL
) {

169 
	`Ârötf
(
°dîr
, "\nI¡îÁ˚ %†nŸ found\n", 
	`if_ifwôhödex_«me
(
√xth›
->
iif_ödex
));

170 
	`‰ìiÁddrs
(
addrs
);

175 
sdl
 = (
sockaddr_dl
 *)
awÆkî
->
iÁ_addr
;

176 
	`mem˝y
(
wÆkî
, 
sdl
, sdl->
sdl_Àn
);

177 
wÆkî
 +
sdl_size
;

178 
πm
->
πm_addrs
 |
RTA_GATEWAY
;

179 #ifde‡
RTF_CLONING


180 
πm
->
πm_Êags
 |
RTF_CLONING
;

182 #i‚de‡
_WRS_KERNEL


183 
πm
->
πm_Êags
 &~
RTF_HOST
;

185 
	`‰ìiÁddrs
(
addrs
);

187 #ifde‡
_WRS_KERNEL


195 i‡(0 =(
πm
->
πm_Êags
 & 
RTF_HOST
)) {

196 
	`ﬁ§_¥efix_to_√tmask
(&
mask
, 
π
->
π_d°
.
¥efix_Àn
);

197 
sö4
.
sö_addr
 = 
mask
.
v4
;

198 
	`mem˝y
(
wÆkî
, &
sö4
, (sin4));

199 
wÆkî
 +
sö_size
;

200 
πm
->
πm_addrs
 |
RTA_NETMASK
;

207 
πm
->
πm_msgÀn
 = ()(
wÆkî
 - 
buff
);

208 
Àn
 = 
	`wrôe
(
ﬁ§_˙f
->
πs
, 
buff
, 
πm
->
πm_msgÀn
);

209 i‡(0 !
πm
->
πm_î∫o
 || 
Àn
 <Ñtm->
πm_msgÀn
) {

210 
	`Ârötf
(
°dîr
, "\nCannot writeÅoÑouting socket: (rtm_errno= 0x%x) (lastÉrror message: %s)\n",

211 
πm
->
πm_î∫o
,
	`°ªº‹
(
î∫o
));

212 i‡(
add
) {

213 
	`Ârötf
(
°dîr
, " Faûed o¿Addög %s\n", 
	`ﬁ§_πp_to_°rög
(
π
->
π_be°
));

215 
	`Ârötf
(
°dîr
, " Faûed o¿Dñëög %s\n",
	`ﬁ§_π_to_°rög
(
π
));

219 
	}
}

222 
	$ﬁ§_io˘l_add_rouã
(c⁄° 
π_íåy
 *
π
)

224  
	`add_dñ_rouã
(
π
, 1);

225 
	}
}

228 
	$ﬁ§_io˘l_dñ_rouã
(c⁄° 
π_íåy
 *
π
)

230  
	`add_dñ_rouã
(
π
, 0);

231 
	}
}

234 
	$add_dñ_rouã6
(c⁄° 
π_íåy
 *
π
, 
add
)

236 
π_msghdr
 *
πm
;

237 
buff
[512];

238 *
wÆkî
;

239 
sockaddr_ö6
 
sö6
;

240 
sockaddr_dl
 
sdl
;

241 c⁄° 
π_√xth›
 *
√xth›
;

242 
sö_size
, 
sdl_size
;

243 
Àn
;

245 i‡(
add
) {

246 
	`OLSR_PRINTF
(2, "KERN: Addög %s\n", 
	`ﬁ§_πp_to_°rög
(
π
->
π_be°
));

248 
	`OLSR_PRINTF
(2, "KERN: Dñëög %s\n", 
	`ﬁ§_π_to_°rög
(
π
));

251 
	`mem£t
(
buff
, 0, (buff));

252 
	`mem£t
(&
sö6
, 0, (sin6));

253 
	`mem£t
(&
sdl
, 0, (sdl));

255 
sö6
.
sö6_Àn
 = (sin6);

256 
sö6
.
sö6_Ámûy
 = 
AF_INET6
;

257 
sdl
.
sdl_Àn
 = (sdl);

258 
sdl
.
sdl_Ámûy
 = 
AF_LINK
;

260 
sö_size
 = 1 + (((
sockaddr_ö6
) - 1) | (() - 1));

261 
sdl_size
 = 1 + (((
sockaddr_dl
) - 1) | (() - 1));

268 
πm
 = (
π_msghdr
 *)
buff
;

269 
πm
->
πm_vîsi⁄
 = 
RTM_VERSION
;

270 
πm
->
πm_ty≥
 = (
add
 !0Ë? 
RTM_ADD
 : 
RTM_DELETE
;

271 
πm
->
πm_ödex
 = 0;

272 
πm
->
πm_Êags
 = 
	`ﬁ§_π_Êags
(
π
, 
add
);

273 
πm
->
πm_pid
 = 
OLSR_PID
;

274 
πm
->
πm_£q
 = ++
£q
;

277 
wÆkî
 = 
buff
 + (
π_msghdr
);

283 
	`mem˝y
(&
sö6
.
sö6_addr
.
s6_addr
, &
π
->
π_d°
.
¥efix
.
v6
, (
ö6_addr
));

284 
	`mem˝y
(
wÆkî
, &
sö6
, (sin6));

285 
wÆkî
 +
sö_size
;

286 
πm
->
πm_addrs
 = 
RTA_DST
;

292 
√xth›
 = 
	`ﬁ§_gë_nh
(
π
);

293 i‡(0 !(
πm
->
πm_Êags
 & 
RTF_GATEWAY
)) {

294 
	`mem˝y
(&
sö6
.
sö6_addr
.
s6_addr
, &
√xth›
->
g©eway
.
v6
, (
ö6_addr
));

295 
	`mem£t
(&
sö6
.
sö6_addr
.
s6_addr
, 0, 8);

296 
sö6
.
sö6_addr
.
s6_addr
[0] = 0xfe;

297 
sö6
.
sö6_addr
.
s6_addr
[1] = 0x80;

298 
sö6
.
sö6_sc›e_id
 = 
√xth›
->
iif_ödex
;

299 #ifde‡
__KAME__


300 *(
u_öt16_t
 *Ë& 
sö6
.
sö6_addr
.
s6_addr
[2] = 
	`ht⁄s
(sö6.
sö6_sc›e_id
);

301 
sö6
.
sö6_sc›e_id
 = 0;

303 
	`mem˝y
(
wÆkî
, &
sö6
, (sin6));

304 
wÆkî
 +
sö_size
;

305 
πm
->
πm_addrs
 |
RTA_GATEWAY
;

312 
	`mem˝y
(&
sö6
.
sö6_addr
.
s6_addr
, &
π
->
π_d°
.
¥efix
.
v6
, (
ö6_addr
));

313 
	`mem£t
(&
sö6
.
sö6_addr
.
s6_addr
, 0, 8);

314 
sö6
.
sö6_addr
.
s6_addr
[0] = 0xfe;

315 
sö6
.
sö6_addr
.
s6_addr
[1] = 0x80;

316 
sö6
.
sö6_sc›e_id
 = 
√xth›
->
iif_ödex
;

317 #ifde‡
__KAME__


318 *(
u_öt16_t
 *Ë& 
sö6
.
sö6_addr
.
s6_addr
[2] = 
	`ht⁄s
(sö6.
sö6_sc›e_id
);

319 
sö6
.
sö6_sc›e_id
 = 0;

321 
	`mem˝y
(
wÆkî
, &
sö6
, (sin6));

322 
wÆkî
 +
sö_size
;

323 
πm
->
πm_addrs
 |
RTA_GATEWAY
;

324 
πm
->
πm_Êags
 |
RTF_GATEWAY
;

331 i‡(0 =(
πm
->
πm_Êags
 & 
RTF_HOST
)) {

332 
	`ﬁ§_¥efix_to_√tmask
((
ﬁ§_ù_addr
 *)&
sö6
.
sö6_addr
, 
π
->
π_d°
.
¥efix_Àn
);

333 
	`mem˝y
(
wÆkî
, &
sö6
, (sin6));

334 
wÆkî
 +
sö_size
;

335 
πm
->
πm_addrs
 |
RTA_NETMASK
;

342 
πm
->
πm_msgÀn
 = ()(
wÆkî
 - 
buff
);

343 
Àn
 = 
	`wrôe
(
ﬁ§_˙f
->
πs
, 
buff
, 
πm
->
πm_msgÀn
);

344 i‡(
Àn
 < 0 && !(
î∫o
 =
EEXIST
 ||Éºnÿ=
ESRCH
)) {

345 
	`Ârötf
(
°dîr
, "ˇ¬Ÿ wrôêtÿroutög sockë: %s\n", 
	`°ªº‹
(
î∫o
));

351 i‡(
Àn
 < 0 && 
î∫o
 =
EEXIST
 && 
πm
->
πm_ty≥
 =
RTM_ADD
) {

352 
π_msghdr
 *
dπm
;

353 
dbuff
[512];

355 
	`mem£t
(
dbuff
, 0, (dbuff));

356 
dπm
 = (
π_msghdr
 *)
dbuff
;

357 
dπm
->
πm_vîsi⁄
 = 
RTM_VERSION
;

358 
dπm
->
πm_ty≥
 = 
RTM_DELETE
;

359 
dπm
->
πm_ödex
 = 0;

360 
dπm
->
πm_Êags
 = 
	`ﬁ§_π_Êags
(
π
, 
add
);

361 
dπm
->
πm_£q
 = ++
£q
;

363 
wÆkî
 = 
dbuff
 + (
π_msghdr
);

364 
	`mem˝y
(&
sö6
.
sö6_addr
.
s6_addr
, &
π
->
π_d°
.
¥efix
.
v6
, (
ö6_addr
));

365 
	`mem˝y
(
wÆkî
, &
sö6
, (sin6));

366 
wÆkî
 +
sö_size
;

367 
dπm
->
πm_addrs
 = 
RTA_DST
;

368 
dπm
->
πm_msgÀn
 = ()(
wÆkî
 - 
dbuff
);

369 
Àn
 = 
	`wrôe
(
ﬁ§_˙f
->
πs
, 
dbuff
, 
dπm
->
πm_msgÀn
);

370 i‡(
Àn
 < 0) {

371 
	`Ârötf
(
°dîr
, "ˇ¬Ÿ dñëêrouã: %s\n", 
	`°ªº‹
(
î∫o
));

373 
πm
->
πm_£q
 = ++
£q
;

374 
Àn
 = 
	`wrôe
(
ﬁ§_˙f
->
πs
, 
buff
, 
πm
->
πm_msgÀn
);

375 i‡(
Àn
 < 0) {

376 
	`Ârötf
(
°dîr
, "°û»ˇ¬ŸáddÑouã: %s\n", 
	`°ªº‹
(
î∫o
));

380 
	}
}

383 
	$ﬁ§_io˘l_add_rouã6
(c⁄° 
π_íåy
 *
π
)

385  
	`add_dñ_rouã6
(
π
, 1);

386 
	}
}

389 
	$ﬁ§_io˘l_dñ_rouã6
(c⁄° 
π_íåy
 *
π
)

391  
	`add_dñ_rouã6
(
π
, 0);

392 
	}
}

	@src/bsd/net.c

42 #i‡
deföed
 
__FªeBSD_kî√l__


43 
	#_GNU_SOURCE
 1

	)

46 
	~"../defs.h
"

47 
	~"../√t_os.h
"

48 
	~"../ùˇlc.h
"

49 
	~"../∑r£r.h
"

50 
	~"../ﬁ§_¥Ÿocﬁ.h
"

51 
	~"../ﬁ§_cfg.h
"

52 
	~"../ﬁ§.h
"

54 
	~<sys/ty≥s.h
>

55 
	~<sys/sockë.h
>

56 
	~<°dio.h
>

57 
	~<°rög.h
>

58 
	~<uni°d.h
>

59 
	~<√t/if.h
>

60 
	~<sys/io˘l.h
>

61 
	~<f˙é.h
>

62 
	~<sy¶og.h
>

63 
	~<√töë/ö.h
>

64 
	~<√t/if.h
>

66 #ifde‡
_WRS_KERNEL


67 
	~<vxW‹ks.h
>

68 
	~"w∫/c‹eù/√töë6/ö6_v¨.h
"

69 
	~<sockLib.h
>

70 
	~<sys/sockë.h
>

71 
	~"w∫/c‹eù/√t/iÁddrs.h
"

72 
	~<£À˘Lib.h
>

73 
	~<logLib.h
>

74 
	#sy¶og
(
a
, 
b
Ë
	`fd¥ötf
◊, b);

	)

76 
	~<sys/∑øm.h
>

79 #ifde‡
__NëBSD__


80 
	~<√t/if_ëhî.h
>

81 
	~<√töë6/ö6_v¨.h
>

82 
	~<√t80211/õì80211_io˘l.h
>

83 
	~<iÁddrs.h
>

86 #ifde‡
__O≥nBSD__


87 
	~<√töë/if_ëhî.h
>

88 
	~<√töë/ö_sy°m.h
>

89 
	~<√töë/ù.h
>

90 
	~<√töë/ù_icmp.h
>

91 
	~<√töë/icmp_v¨.h
>

92 
	~<√töë/icmp6.h
>

93 
	~<√töë6/ö6_v¨.h
>

94 
	~<iÁddrs.h
>

95 
	~<sys/uio.h
>

96 
	~<√t80211/õì80211.h
>

97 
	~<√t80211/õì80211_io˘l.h
>

100 #i‡
deföed
 
__FªeBSD__
 || 
__FªeBSD_kî√l__


101 
	~<√t/if_v¨.h
>

102 
	~<√t/ëhî√t.h
>

103 
	~<√töë/ö_v¨.h
>

104 
	~<iÁddrs.h
>

105 #i‚de‡
FBSD_NO_80211


106 
	~<√t80211/õì80211.h
>

107 
	~<√t80211/õì80211_io˘l.h
>

111 #ifde‡
__MacOSX__


112 
	~<iÁddrs.h
>

113 
	~<√t/if_v¨.h
>

114 
	~<√t/ëhî√t.h
>

115 
	~<√töë/ö_v¨.h
>

118 
	~<√t/if_dl.h
>

119 #ifde‡
SPOOF


120 
	~<lib√t.h
>

124 
	#SIOCGIFGENERIC
 
	`_IOWR
('i', 58, 
i‰eq
Ë

	)

125 
	#SIOCGWAVELAN
 
SIOCGIFGENERIC


	)

128 
	~<sys/sys˘l.h
>

130 
	gign‹e_ªdú
;

131 
	g£nd_ªdú
;

132 
	gg©eway
;

135 
	$£t_sys˘l_öt
(c⁄° *
«me
, 
√w
)

137 
ﬁd
;

138 #i‡
	`deföed
(
__FªeBSD__
Ë|| deföed(
__FªeBSD_kî√l__
Ë|| deföed(
__MacOSX__
Ë|| deföed(
__O≥nBSD__
Ë|| deföed(
__NëBSD__
)

139 
size_t
 
Àn
 = (
ﬁd
);

141 
Àn
 = (
ﬁd
);

144 #ifde‡
__O≥nBSD__


145 
mib
[4];

148 
mib
[0] = 
CTL_NET
;

149 
mib
[1] = 
PF_INET
;

150 
mib
[2] = 
IPPROTO_IP
;

151 
mib
[3] = 
IPCTL_FORWARDING
;

153 i‡(!
	`°rcmp
(
«me
, "net.inet6.ip6.forwarding")) {

154 
mib
[1] = 
PF_INET6
;

155 
mib
[2] = 
IPPROTO_IPV6
;

156 } i‡(!
	`°rcmp
(
«me
, "net.inet.icmp.rediraccept")) {

157 
mib
[2] = 
IPPROTO_ICMP
;

158 
mib
[3] = 
ICMPCTL_REDIRACCEPT
;

159 } i‡(!
	`°rcmp
(
«me
, "net.inet6.icmp6.rediraccept")) {

160 
mib
[2] = 
IPPROTO_ICMPV6
;

161 
mib
[3] = 
ICMPV6CTL_REDIRACCEPT
;

162 } i‡(!
	`°rcmp
(
«me
, "net.inet.ip.redirect")) {

163 
mib
[3] = 
IPCTL_SENDREDIRECTS
;

164 } i‡(!
	`°rcmp
(
«me
, "net.inet6.ip6.redirect")) {

165 
mib
[1] = 
PF_INET6
;

166 
mib
[2] = 
IPPROTO_IPV6
;

167 
mib
[3] = 
IPCTL_SENDREDIRECTS
;

170 i‡(
	`sys˘l
(
mib
, 4, &
ﬁd
, &
Àn
, &
√w
, (new)) < 0)

174 i‡(
	`sys˘lby«me
((c⁄° *)
«me
, &
ﬁd
, &
Àn
, &
√w
, (new)) < 0)

178  
ﬁd
;

179 
	}
}

182 
	$√t_os_£t_globÆ_if›ti⁄s
() {

183 c⁄° *
«me
 = 
ﬁ§_˙f
->
ù_vîsi⁄
 =
AF_INET
 ? "net.inet.ip.forwarding" : "net.inet6.ip6.forwarding";

185 
g©eway
 = 
	`£t_sys˘l_öt
(
«me
, 1);

186 i‡(
g©eway
 < 0) {

187 
	`Ârötf
(
°dîr
, "CannotÉnable IP forwarding. PleaseÉnable IP forwarding manually." " Continuing in 3 seconds...\n");

188 
	`ﬁ§_°¨tup_¶ìp
(3);

193 #i‡
	`deföed
(
__O≥nBSD__
Ë|| deföed(
__NëBSD__
)

194 i‡(
ﬁ§_˙f
->
ù_vîsi⁄
 =
AF_INET
)

195 
«me
 = "net.inet.icmp.rediraccept";

197 
«me
 = "net.inet6.icmp6.rediraccept";

199 
ign‹e_ªdú
 = 
	`£t_sys˘l_öt
(
«me
, 0);

200 #ñi‡
deföed
 
__FªeBSD__
 || deföed 
__FªeBSD_kî√l__
 || deföed 
__MacOSX__


201 i‡(
ﬁ§_˙f
->
ù_vîsi⁄
 =
AF_INET
) {

202 
«me
 = "net.inet.icmp.drop_redirect";

203 
ign‹e_ªdú
 = 
	`£t_sys˘l_öt
(
«me
, 1);

205 
«me
 = "net.inet6.icmp6.rediraccept";

206 
ign‹e_ªdú
 = 
	`£t_sys˘l_öt
(
«me
, 0);

209 i‡(
ﬁ§_˙f
->
ù_vîsi⁄
 =
AF_INET
)

210 
«me
 = "net.inet.icmp.drop_redirect";

212 
«me
 = "net.inet6.icmp6.drop_redirect";

214 
ign‹e_ªdú
 = 
	`£t_sys˘l_öt
(
«me
, 1);

217 i‡(
ign‹e_ªdú
 < 0) {

218 
	`Ârötf
(
°dîr
,

220 
	`ﬁ§_°¨tup_¶ìp
(3);

225 i‡(
ﬁ§_˙f
->
ù_vîsi⁄
 =
AF_INET
)

226 
«me
 = "net.inet.ip.redirect";

228 
«me
 = "net.inet6.ip6.redirect";

230 
£nd_ªdú
 = 
	`£t_sys˘l_öt
(
«me
, 0);

231 i‡(
£nd_ªdú
 < 0) {

232 
	`Ârötf
(
°dîr
,

234 
	`ﬁ§_°¨tup_¶ìp
(3);

236 
	}
}

238 
√t_os_£t_if›ti⁄s
(c⁄° *
if_«me
 
__©åibuã__
 ((
unu£d
)), 
öãrÁ˚
 *
iÁ˚
 __attribute__ ((unused))) {

243 
	$√t_os_ª°‹e_if›ti⁄s
() {

245 c⁄° *
«me
 = 
ﬁ§_˙f
->
ù_vîsi⁄
 =
AF_INET
 ? "net.inet.ip.forwarding" : "net.inet6.ip6.forwarding";

247 
	`£t_sys˘l_öt
(
«me
, 
g©eway
);

251 #ifde‡
__O≥nBSD__


252 
«me
 = 
ﬁ§_˙f
->
ù_vîsi⁄
 =
AF_INET
 ? "net.inet.icmp.rediraccept" : "net.inet6.icmp6.rediraccept";

253 #ñi‡
deföed
 
__FªeBSD__
 || deföed 
__FªeBSD_kî√l__
 || deföed 
__MacOSX__


254 
«me
 = 
ﬁ§_˙f
->
ù_vîsi⁄
 =
AF_INET
 ? "net.inet.icmp.drop_redirect" : "net.inet6.icmp6.rediraccept";

256 
«me
 = 
ﬁ§_˙f
->
ù_vîsi⁄
 =
AF_INET
 ? "net.inet.icmp.drop_redirect" : "net.inet6.icmp6.drop_redirect";

258 
	`£t_sys˘l_öt
(
«me
, 
ign‹e_ªdú
);

261 
«me
 = 
ﬁ§_˙f
->
ù_vîsi⁄
 =
AF_INET
 ? "net.inet.ip.redirect" : "net.inet6.ip6.redirect";

262 
	`£t_sys˘l_öt
(
«me
, 
£nd_ªdú
);

264 
	}
}

272 
	$gëhemusockë
(
sockaddr_ö
 *
pö
)

274 
sock
, 
⁄
 = 1;

276 
	`OLSR_PRINTF
(1, " ConnectingÅo switch daemonÖort 10150...");

278 i‡((
sock
 = 
	`sockë
(
AF_INET
, 
SOCK_STREAM
, 0)) < 0) {

279 
	`≥º‹
("hcsocket");

280 
	`sy¶og
(
LOG_ERR
, "hcsocket: %m");

284 i‡(
	`£tsock›t
(
sock
, 
SOL_SOCKET
, 
SO_REUSEADDR
, (*)&
⁄
, (on)) < 0) {

285 
	`≥º‹
("SO_REUSEADDR failed");

286 
	`˛o£
(
sock
);

290 i‡(
	`c⁄√˘
(
sock
, (
sockaddr
 *)
pö
, (*pin)) < 0) {

291 
	`¥ötf
("FAILED\n");

292 
	`Ârötf
(
°dîr
, "Eº‹ c⁄√˘ög %d - %s\n", 
î∫o
, 
	`°ªº‹
(errno));

293 
	`¥ötf
("connectionÑefused\n");

294 
	`˛o£
(
sock
);

298 
	`¥ötf
("OK\n");

301  (
sock
);

302 
	}
}

305 
gësockë
(
buf•a˚
, 
öãrÁ˚
 *
iÂ
 
__©åibuã__
 ((
unu£d
)))

307 
sockaddr_ö
 
	gsö
;

308 
	g⁄
;

309 
	gsock
 = 
sockë
(
AF_INET
, 
SOCK_DGRAM
, 0);

310 i‡(
	gsock
 < 0) {

311 
≥º‹
("socket");

312 
sy¶og
(
LOG_ERR
, "socket: %m");

316 
	g⁄
 = 1;

317 i‡(
£tsock›t
(
sock
, 
SOL_SOCKET
, 
SO_BROADCAST
, (*)&
⁄
, (on)) < 0) {

318 
≥º‹
("setsockopt");

319 
sy¶og
(
LOG_ERR
, "setsockopt SO_BROADCAST: %m");

320 
˛o£
(
sock
);

324 i‡(
£tsock›t
(
sock
, 
SOL_SOCKET
, 
SO_REUSEADDR
, (*)&
⁄
, (on)) < 0) {

325 
≥º‹
("SO_REUSEADDR failed");

326 
˛o£
(
sock
);

330 i‡(
£tsock›t
(
sock
, 
SOL_SOCKET
, 
SO_REUSEPORT
, (*)&
⁄
, (on)) < 0) {

331 
≥º‹
("SO_REUSEPORT failed");

332 
˛o£
(
sock
);

336 i‡(
£tsock›t
(
sock
, 
IPPROTO_IP
, 
IP_RECVIF
, (*)&
⁄
, (on)) < 0) {

337 
≥º‹
("IP_RECVIF failed");

338 
˛o£
(
sock
);

342 if(
	gbuf•a˚
 > 0) {

343 
	g⁄
 = 
buf•a˚
;; on -= 1024) {

344 i‡(
£tsock›t
(
sock
, 
SOL_SOCKET
, 
SO_RCVBUF
, (*)&
⁄
, (on)) == 0)

346 i‡(
	g⁄
 <= 8 * 1024) {

347 
≥º‹
("setsockopt");

348 
sy¶og
(
LOG_ERR
, "setsockopt SO_RCVBUF: %m");

354 
mem£t
(&
sö
, 0, (sin));

355 
	gsö
.
	gsö_Ámûy
 = 
AF_INET
;

356 
	gsö
.
	gsö_p‹t
 = 
ht⁄s
(
ﬁ§_˙f
->
ﬁ§p‹t
);

358 if(
	gbuf•a˚
 <= 0) {

359 
sö
.
sö_addr
.
s_addr
 = 
iÂ
->
öt_addr
.sin_addr.s_addr;

362 i‡(
böd
(
sock
, (
sockaddr
 *)&
sö
, (sin)) < 0) {

363 
≥º‹
("bind");

364 
sy¶og
(
LOG_ERR
, "bind: %m");

365 
˛o£
(
sock
);

369 
	g⁄
 = 
f˙é
(
sock
, 
F_GETFL
);

370 i‡(
	g⁄
 == -1) {

371 
sy¶og
(
LOG_ERR
, "fcntl (F_GETFL): %m\n");

373 i‡(
f˙é
(
sock
, 
F_SETFL
, 
⁄
 | 
O_NONBLOCK
) == -1) {

374 
sy¶og
(
LOG_ERR
, "fcntl O_NONBLOCK: %m\n");

377  (
	gsock
);

381 
gësockë6
(
buf•a˚
, 
öãrÁ˚
 *
iÂ
 
__©åibuã__
 ((
unu£d
)))

383 
sockaddr_ö6
 
	gsö
;

384 
	g⁄
;

385 
	gsock
 = 
sockë
(
AF_INET6
, 
SOCK_DGRAM
, 0);

387 i‡(
	gsock
 < 0) {

388 
≥º‹
("socket");

389 
sy¶og
(
LOG_ERR
, "socket: %m");

393 if(
	gbuf•a˚
 > 0) {

394 
	g⁄
 = 
buf•a˚
;; on -= 1024) {

395 i‡(
£tsock›t
(
sock
, 
SOL_SOCKET
, 
SO_RCVBUF
, (*)&
⁄
, (on)) == 0)

397 i‡(
	g⁄
 <= 8 * 1024) {

398 
≥º‹
("setsockopt");

399 
sy¶og
(
LOG_ERR
, "setsockopt SO_RCVBUF: %m");

405 i‡(
£tsock›t
(
sock
, 
SOL_SOCKET
, 
SO_REUSEADDR
, (*)&
⁄
, (on)) < 0) {

406 
≥º‹
("SO_REUSEADDR failed");

407 
˛o£
(
sock
);

411 i‡(
£tsock›t
(
sock
, 
SOL_SOCKET
, 
SO_REUSEPORT
, (*)&
⁄
, (on)) < 0) {

412 
≥º‹
("SO_REUSEPORT failed");

413 
˛o£
(
sock
);

416 #ifde‡
IPV6_RECVPKTINFO


417 i‡(
£tsock›t
(
sock
, 
IPPROTO_IPV6
, 
IPV6_RECVPKTINFO
, (*)&
⁄
, (on)) < 0) {

418 
≥º‹
("IPV6_RECVPKTINFO failed");

419 
˛o£
(
sock
);

422 #ñi‡
deföed
 
IPV6_PKTINFO


423 i‡(
£tsock›t
(
sock
, 
IPPROTO_IPV6
, 
IPV6_PKTINFO
, (*)&
⁄
, (on)) < 0) {

424 
≥º‹
("IPV6_PKTINFO failed");

425 
˛o£
(
sock
);

430 
mem£t
(&
sö
, 0, (sin));

431 
	gsö
.
	gsö6_Ámûy
 = 
AF_INET6
;

432 
	gsö
.
	gsö6_p‹t
 = 
ht⁄s
(
ﬁ§_˙f
->
ﬁ§p‹t
);

434 if(
	gbuf•a˚
 <= 0) {

435 
mem˝y
(&
sö
.
sö6_addr
, &
iÂ
->
öt6_addr
.sö6_addr, (
ö6_addr
));

438 i‡(
böd
(
sock
, (
sockaddr
 *)&
sö
, (sin)) < 0) {

439 
≥º‹
("bind");

440 
sy¶og
(
LOG_ERR
, "bind: %m");

441 
˛o£
(
sock
);

445 
	g⁄
 = 
f˙é
(
sock
, 
F_GETFL
);

446 i‡(
	g⁄
 == -1) {

447 
sy¶og
(
LOG_ERR
, "fcntl (F_GETFL): %m\n");

449 i‡(
f˙é
(
sock
, 
F_SETFL
, 
⁄
 | 
O_NONBLOCK
) == -1) {

450 
sy¶og
(
LOG_ERR
, "fcntl O_NONBLOCK: %m\n");

453  
	gsock
;

457 
	$joö_mˇ°
(
öãrÁ˚
 *
ifs
, 
sock
)

460 
ùaddr_°r
 
addr°r
;

461 
ùv6_mªq
 
mˇ°ªq
;

462 #ifde‡
IPV6_USE_MIN_MTU


463 
⁄
;

466 
mˇ°ªq
.
ùv6mr_mu…üddr
 = 
ifs
->
öt6_mu…addr
.
sö6_addr
;

467 
mˇ°ªq
.
ùv6mr_öãrÁ˚
 = 
ifs
->
if_ödex
;

469 i‡(
ifs
->
ﬁ§_sockë
 =
sock
) {

471 
	`OLSR_PRINTF
(3, "I¡îÁ˚ %†joöög mu…iˇ° %s...", 
ifs
->
öt_«me
,

472 
	`ﬁ§_ù_to_°rög
(&
addr°r
, (
ﬁ§_ù_addr
 *)&
ifs
->
öt6_mu…addr
.
sö6_addr
));

475 #ifde‡
IPV6_JOIN_GROUP


477 i‡(
	`£tsock›t
(
sock
, 
IPPROTO_IPV6
, 
IPV6_JOIN_GROUP
, (*)&
mˇ°ªq
, (
ùv6_mªq
)) < 0)

480 i‡(
	`£tsock›t
(
sock
, 
IPPROTO_IPV6
, 
IPV6_ADD_MEMBERSHIP
, (*)&
mˇ°ªq
, (
ùv6_mªq
)) < 0)

483 
	`≥º‹
("Join multicast send");

488 i‡(
	`£tsock›t
(
sock
, 
IPPROTO_IPV6
, 
IPV6_MULTICAST_IF
, (*)&
mˇ°ªq
.
ùv6mr_öãrÁ˚
, (mcastreq.ipv6mr_interface)) < 0) {

489 
	`≥º‹
("Set multicast if");

493 #ifde‡
IPV6_USE_MIN_MTU


498 
⁄
 = 0;

499 i‡(
	`£tsock›t
(
sock
, 
IPPROTO_IPV6
, 
IPV6_USE_MIN_MTU
, (*)&
⁄
, (on)) < 0) {

500 
	`≥º‹
("IPV6_USE_MIN_MTU failed");

501 
	`˛o£
(
sock
);

506 
	`OLSR_PRINTF
(3, "OK\n");

508 
	}
}

511 
	$gë_ùv6_addªss
(*
i‚ame
, 
sockaddr_ö6
 *
ßddr6
, 
ﬁ§_ù_¥efix
 *
¥efix
)

513 
iÁddrs
 *
iÁp
, *
iÁ
;

514 c⁄° 
sockaddr_ö6
 *
sö6
 = 
NULL
;

515 c⁄° 
ﬁ§_ù_addr
 *
tmp_ù
;

516 
ö6_i‰eq
 
i‰6
;

517 
found
 = 0;

518 
s6
;

519 
u_öt32_t
 
Êags6
;

521 i‡(
	`gëiÁddrs
(&
iÁp
) != 0) {

522 
	`OLSR_PRINTF
(3, "get_ipv6_address: getifaddrs() failed.\n");

526 
iÁ
 = 
iÁp
; iÁ; iÁ = iÁ->
iÁ_√xt
) {

527 i‡((
iÁ
->
iÁ_addr
->
ß_Ámûy
 =
AF_INET6
Ë&& (
	`°rcmp
(iÁ->
iÁ_«me
, 
i‚ame
) == 0)) {

528 
sö6
 = (c⁄° 
sockaddr_ö6
 *)(
iÁ
->
iÁ_addr
);

529 i‡(
	`IN6_IS_ADDR_LINKLOCAL
(&
sö6
->
sö6_addr
))

531 
	`°rs˝y
(
i‰6
.
i‰_«me
, 
i‚ame
, (ifr6.ifr_name));

532 i‡((
s6
 = 
	`sockë
(
AF_INET6
, 
SOCK_DGRAM
, 0)) < 0) {

533 
	`OLSR_PRINTF
(3, "socket(AF_INET6,SOCK_DGRAM)");

536 
i‰6
.
i‰_addr
 = *
sö6
;

537 i‡(
	`io˘l
(
s6
, 
SIOCGIFAFLAG_IN6
, &
i‰6
) < 0) {

538 
	`OLSR_PRINTF
(3, "ioctl(SIOCGIFAFLAG_IN6)");

539 
	`˛o£
(
s6
);

542 
	`˛o£
(
s6
);

543 
Êags6
 = 
i‰6
.
i‰_i‰u
.
i‰u_Êags6
;

544 i‡((
Êags6
 & 
IN6_IFF_ANYCAST
) != 0)

547 
tmp_ù
 = (c⁄° 
ﬁ§_ù_addr
 *Ë&
sö6
->
sö6_addr
;

548 i‡((
¥efix
 =
NULL
 && !
	`IN6_IS_ADDR_LINKLOCAL
(&
sö6
->
sö6_addr
))

549 || (
¥efix
 !
NULL
 && 
	`ù_ö_√t
(
tmp_ù
,Örefix))) {

550 
	`mem˝y
(&
ßddr6
->
sö6_addr
, &
sö6
->sö6_addr, (
ö6_addr
));

551 
found
 = 1;

556 
	`‰ìiÁddrs
(
iÁp
);

557 i‡(
found
)

561 
	}
}

567 #ifde‡
SPOOF


568 
u_öt16_t
 
	gù_id
 = 0;

571 
ssize_t


572 
ﬁ§_£ndto
(
s
, c⁄° *
buf
, 
size_t
 
Àn
, 
Êags
 
__©åibuã__
 ((
unu£d
)), c⁄° 
sockaddr
 *
to
, 
sockÀn_t
 
tﬁí
)

574 #ifde‡
SPOOF


577 
lib√t_t
 *
	gc⁄ãxt
;

578 
	gîrbuf
[
LIBNET_ERRBUF_SIZE
];

579 
lib√t_±ag_t
 
	gudp_èg
, 
	gù_èg
, 
	gëhî_èg
;

580 
	gíë_brﬂdˇ°
[6] = { 0xff, 0xff, 0xff, 0xff, 0xff, 0xff };

581 
	g°©us
;

582 
sockaddr_ö
 *
	gto_ö
 = (sockaddr_ö *)
to
;

583 
u_öt32_t
 
	gde°ù
;

584 
öãrÁ˚
 *
	giÁ˚
;

586 
	gudp_èg
 = 
ù_èg
 = 
ëhî_èg
 = 0;

587 
	gde°ù
 = 
to_ö
->
sö_addr
.
s_addr
;

588 
	giÁ˚
 = 
if_ifwôhsock
(
s
);

591 
	gc⁄ãxt
 = 
lib√t_öô
(
LIBNET_LINK
, 
iÁ˚
->
öt_«me
, 
îrbuf
);

592 i‡(
	gc⁄ãxt
 =
NULL
) {

593 
OLSR_PRINTF
(1, "lib√àöô: %s\n", 
lib√t_gëîr‹
(
c⁄ãxt
));

598 i‡(
	gù_id
 == 0) {

599 
ù_id
 = (
u_öt16_t
Ë(
¨c4øndom
() & 0xffff);

602 
	gudp_èg
 = 
lib√t_buûd_udp
(
ﬁ§_˙f
->
ﬁ§p‹t
,

603 
ﬁ§_˙f
->
ﬁ§p‹t
,

604 
LIBNET_UDP_H
 + 
Àn
,

606 
buf
,

607 
Àn
,

608 
c⁄ãxt
,

609 
udp_èg
);

610 i‡(
	gudp_èg
 == -1) {

611 
OLSR_PRINTF
(1, "lib√àUDP hódî: %s\n", 
lib√t_gëîr‹
(
c⁄ãxt
));

615 
	gù_èg
 = 
lib√t_buûd_ùv4
(
LIBNET_IPV4_H
 + 
LIBNET_UDP_H
 + 
Àn
,

617 
ù_id
++,

620 
IPPROTO_UDP
,

622 
lib√t_gë_ùaddr4
(
c⁄ãxt
),

623 
de°ù
,

624 
NULL
,

626 
c⁄ãxt
,

627 
ù_èg
);

628 i‡(
	gù_èg
 == -1) {

629 
OLSR_PRINTF
(1, "lib√àIP hódî: %s\n", 
lib√t_gëîr‹
(
c⁄ãxt
));

633 
	gëhî_èg
 = 
lib√t_buûd_ëhî√t
(
íë_brﬂdˇ°
,

634 
lib√t_gë_hwaddr
(
c⁄ãxt
),

635 
ETHERTYPE_IP
,

636 
NULL
,

638 
c⁄ãxt
,

639 
ëhî_èg
);

640 i‡(
	gëhî_èg
 == -1) {

641 
OLSR_PRINTF
(1, "lib√àëhî√àhódî: %s\n", 
lib√t_gëîr‹
(
c⁄ãxt
));

645 
	g°©us
 = 
lib√t_wrôe
(
c⁄ãxt
);

646 i‡(
	g°©us
 == -1) {

647 
OLSR_PRINTF
(1, "lib√à∑ckë wrôe: %s\n", 
lib√t_gëîr‹
(
c⁄ãxt
));

651 
lib√t_de°roy
(
c⁄ãxt
);

653  (
	gÀn
);

656  
£ndto
(
s
, 
buf
, 
Àn
, 
Êags
, (c⁄° 
sockaddr
 *)
to
, 
tﬁí
);

664 
ssize_t


665 
ﬁ§_ªcv‰om
(
s
, *
buf
, 
size_t
 
Àn
, 
Êags
 
__©åibuã__
 ((
unu£d
)), 
sockaddr
 *
‰om
, 
sockÀn_t
 * 
‰omÀn
)

667 
msghdr
 
	gmhdr
;

668 
iovec
 
	giov
;

670 
cmsghdr
 
	gcmsg
;

671 
	gchdr
[4096];

672 } 
	gcmu
;

673 
cmsghdr
 *
	gcm
;

674 
sockaddr_dl
 *
	gsdl
;

675 
sockaddr_ö
 *
	gsö
 = (sockaddr_ö *)
‰om
;

676 
sockaddr_ö6
 *
	gsö6
;

677 
ö6_addr
 *
	güddr6
;

678 
ö6_pktöfo
 *
	gpkti
;

679 
öãrÁ˚
 *
	gifc
;

680 
	gaddr°r
[
INET6_ADDRSTRLEN
];

681 
	göame
[
IFNAMSIZ
];

682 
	gcou¡
;

684 
mem£t
(&
mhdr
, 0, (mhdr));

685 
mem£t
(&
iov
, 0, (iov));

687 
	gmhdr
.
	gmsg_«me
 = (
ˇddr_t
Ë
‰om
;

688 
	gmhdr
.
	gmsg_«mñí
 = *
‰omÀn
;

689 
	gmhdr
.
	gmsg_iov
 = &
iov
;

690 
	gmhdr
.
	gmsg_iovÀn
 = 1;

691 
	gmhdr
.
	gmsg_c⁄åﬁ
 = (
ˇddr_t
Ë& 
cmu
;

692 
	gmhdr
.
	gmsg_c⁄åﬁÀn
 = (
cmu
);

694 
	giov
.
	giov_Àn
 = 
Àn
;

695 
	giov
.
	giov_ba£
 = 
buf
;

697 
	gcou¡
 = 
ªcvmsg
(
s
, &
mhdr
, 
MSG_DONTWAIT
);

698 i‡(
	gcou¡
 <= 0) {

699  (
cou¡
);

703 *
	g‰omÀn
 = 
mhdr
.
msg_«mñí
;

704 i‡(
	gﬁ§_˙f
->
	gù_vîsi⁄
 =
AF_INET6
) {

705 
cm
 = (
cmsghdr
 *)
CMSG_FIRSTHDR
(&
mhdr
); 
	gcm
; cm = (cmsghd∏*)
CMSG_NXTHDR
(&mhdr, cm)) {

706 i‡(
	gcm
->
	gcmsg_Àvñ
 =
IPPROTO_IPV6
 && 
cm
->
cmsg_ty≥
 =
IPV6_PKTINFO
) {

707 
pkti
 = (
ö6_pktöfo
 *)
CMSG_DATA
(
cm
);

708 
	güddr6
 = &
pkti
->
ùi6_addr
;

709 
if_ödext⁄ame
(
pkti
->
ùi6_ifödex
, 
öame
);

713 
	gcm
 = &
cmu
.
cmsg
;

714 
	gsdl
 = (
sockaddr_dl
 *)
CMSG_DATA
(
cm
);

715 
mem£t
(
öame
, 0, (iname));

716 
mem˝y
(
öame
, 
sdl
->
sdl_d©a
, sdl->
sdl_∆í
);

719 
	gifc
 = 
if_ifwôhsock
(
s
);

721 
	gsö6
 = (
sockaddr_ö6
 *)
‰om
;

722 
OLSR_PRINTF
(4, "%d byã†‰om %s, sockëássocüãd %†ªÆlyÑe˚ived o¿%s\n", 
cou¡
,

723 
öë_¡›
(
ﬁ§_˙f
->
ù_vîsi⁄
, ol§_˙f->ù_vîsi⁄ =
AF_INET6
 ? (*)&
sö6
->
sö6_addr
 : (*)&
sö
->
sö_addr
,

724 
addr°r
, ◊ddr°r)), 
ifc
->
öt_«me
, 
öame
);

726 #i‚de‡
__NëBSD__


727 i‡(
°rcmp
(
ifc
->
öt_«me
, 
öame
) != 0) {

732  (
	gcou¡
);

740 
	$ﬁ§_£À˘
(
nfds
, 
fd_£t
 * 
ªadfds
, fd_£à* 
wrôefds
, fd_£à* 
ex˚±fds
, 
timevÆ
 *
timeout
)

742  
	`£À˘
(
nfds
, 
ªadfds
, 
wrôefds
, 
ex˚±fds
, 
timeout
);

743 
	}
}

746 
	$check_wúñess_öãrÁ˚
(*
i‚ame
)

748 #i‡(
deföed
 
__FªeBSD__
 || deföed 
__FªeBSD_kî√l__
 ) && !deföed 
FBSD_NO_80211


751 
õì80211ªq
 
úeq
;

752 
u_öt8_t
 
d©a
[32];

754 
	`mem£t
(&
úeq
, 0, (ireq));

755 
	`°rs˝y
(
úeq
.
i_«me
, 
i‚ame
, (ireq.i_name));

756 
úeq
.
i_d©a
 = &
d©a
;

757 
úeq
.
i_ty≥
 = 
IEEE80211_IOC_SSID
;

758 
úeq
.
i_vÆ
 = -1;

759  (
	`io˘l
(
ﬁ§_˙f
->
io˘l_s
, 
SIOCG80211
, &
úeq
) >= 0) ? 1 : 0;

760 #ñi‡
deföed
 
__O≥nBSD__


761 
õì80211_nodîeq
 
ƒ
;

762 
	`bzîo
(&
ƒ
, (nr));

763 
	`°rs˝y
(
ƒ
.
ƒ_i‚ame
, 
i‚ame
, (nr.nr_ifname));

764  (
	`io˘l
(
ﬁ§_˙f
->
io˘l_s
, 
SIOCG80211FLAGS
, &
ƒ
) >= 0) ? 1 : 0;

765 #ñi‡
deföed
 
__NëBSD__


766 
i‰eq
 
úeq
;

767 
õì80211_nwid
 
d©a
;

768 
ªt
;

770 
	`mem£t
(&
úeq
, 0, (ireq));

771 
	`°rs˝y
(
úeq
.
i‰_«me
, 
i‚ame
, (ireq.ifr_name));

772 
úeq
.
i‰_d©a
 = &
d©a
;

773 
ªt
 = 
	`io˘l
(
ﬁ§_˙f
->
io˘l_s
, 
SIOCG80211NWID
, &
úeq
);

774 if(
ªt
 == 0)

778 
i‚ame
 = 
NULL
;

781 
	}
}

783 
	~<sys/sockio.h
>

786 
	$ˇlcuœã_if_mëric
(*
i‚ame
)

788 i‡(
	`check_wúñess_öãrÁ˚
(
i‚ame
)) {

795 
ifmedüªq
 
ifm
;

797 
	`mem£t
(&
ifm
, 0, (ifm));

798 
	`°rs˝y
(
ifm
.
ifm_«me
, 
i‚ame
, (ifm.ifm_name));

800 i‡(
	`io˘l
(
ﬁ§_˙f
->
io˘l_s
, 
SIOCGIFMEDIA
, &
ifm
) < 0) {

801 
	`OLSR_PRINTF
(1, "Eº‹ SIOCGIFMEDIA(%s)\n", 
ifm
.
ifm_«me
);

802  
WEIGHT_ETHERNET_DEFAULT
;

805 
	`OLSR_PRINTF
(1, "%s: STATUS 0x%08x\n", 
ifm
.
ifm_«me
, ifm.
ifm_°©us
);

807  
WEIGHT_ETHERNET_DEFAULT
;

809 
	}
}

	@src/build_msg.c

42 
	~"buûd_msg.h
"

43 
	~"ùˇlc.h
"

44 
	~"ﬁ§.h
"

45 
	~"log.h
"

46 
	~"m™tisß.h
"

47 
	~"√t_ﬁ§.h
"

48 
	~"g©eway.h
"

50 
	#BMSG_DBGLVL
 5

	)

52 
	#OLSR_IPV4_HDRSIZE
 12

	)

53 
	#OLSR_IPV6_HDRSIZE
 24

	)

55 
	#OLSR_HELLO_IPV4_HDRSIZE
 (
OLSR_IPV4_HDRSIZE
 + 4)

	)

56 
	#OLSR_HELLO_IPV6_HDRSIZE
 (
OLSR_IPV6_HDRSIZE
 + 4)

	)

57 
	#OLSR_TC_IPV4_HDRSIZE
 (
OLSR_IPV4_HDRSIZE
 + 4)

	)

58 
	#OLSR_TC_IPV6_HDRSIZE
 (
OLSR_IPV6_HDRSIZE
 + 4)

	)

59 
	#OLSR_MID_IPV4_HDRSIZE
 
OLSR_IPV4_HDRSIZE


	)

60 
	#OLSR_MID_IPV6_HDRSIZE
 
OLSR_IPV6_HDRSIZE


	)

61 
	#OLSR_HNA_IPV4_HDRSIZE
 
OLSR_IPV4_HDRSIZE


	)

62 
	#OLSR_HNA_IPV6_HDRSIZE
 
OLSR_IPV6_HDRSIZE


	)

64 
check_buff•a˚
(
msgsize
, 
buffsize
, c⁄° *
ty≥
);

68 
uöt32_t
 
	gmsg_buf„r_Æign
[(
MAXMESSAGESIZE
 - 
OLSR_HEADERSIZE
)/(uint32_t) + 1];

69 
uöt8_t
 *
	gmsg_buf„r
 = (uöt8_à*)
msg_buf„r_Æign
;

71 
uöt32_t
 
	g£nd_em±y_tc
;

77 
boﬁ
 
£rülize_hñlo4
(
hñlo_mesßge
 *, 
öãrÁ˚
 *);

79 
boﬁ
 
£rülize_tc4
(
tc_mesßge
 *, 
öãrÁ˚
 *);

81 
boﬁ
 
£rülize_mid4
(
öãrÁ˚
 *);

83 
boﬁ
 
£rülize_h«4
(
öãrÁ˚
 *);

87 
boﬁ
 
£rülize_hñlo6
(
hñlo_mesßge
 *, 
öãrÁ˚
 *);

89 
boﬁ
 
£rülize_tc6
(
tc_mesßge
 *, 
öãrÁ˚
 *);

91 
boﬁ
 
£rülize_mid6
(
öãrÁ˚
 *);

93 
boﬁ
 
£rülize_h«6
(
öãrÁ˚
 *);

100 
	$£t_em±y_tc_timî
(
uöt32_t
 
em±y_tc_√w
)

102 
£nd_em±y_tc
 = 
em±y_tc_√w
;

103 
	}
}

109 
uöt32_t


110 
	$gë_em±y_tc_timî
()

112  
£nd_em±y_tc
;

113 
	}
}

130 
boﬁ


131 
	$queue_hñlo
(
hñlo_mesßge
 * 
mesßge
, 
öãrÁ˚
 * 
iÂ
)

133 #ifde‡
DEBUG


134 
	`OLSR_PRINTF
(
BMSG_DBGLVL
, "Buûdög HELLO o¿%s\n-------------------\n", 
iÂ
->
öt_«me
);

137 
ﬁ§_˙f
->
ù_vîsi⁄
) {

138 (
AF_INET
):

139  
	`£rülize_hñlo4
(
mesßge
, 
iÂ
);

140 (
AF_INET6
):

141  
	`£rülize_hñlo6
(
mesßge
, 
iÂ
);

143  
Ál£
;

144 
	}
}

159 
boﬁ


160 
	$queue_tc
(
tc_mesßge
 * 
mesßge
, 
öãrÁ˚
 * 
iÂ
)

162 #ifde‡
DEBUG


163 
	`OLSR_PRINTF
(
BMSG_DBGLVL
, "Buûdög TC o¿%s\n-------------------\n", 
iÂ
->
öt_«me
);

166 
ﬁ§_˙f
->
ù_vîsi⁄
) {

167 (
AF_INET
):

168  
	`£rülize_tc4
(
mesßge
, 
iÂ
);

169 (
AF_INET6
):

170  
	`£rülize_tc6
(
mesßge
, 
iÂ
);

172  
Ál£
;

173 
	}
}

183 
boﬁ


184 
	$queue_mid
(
öãrÁ˚
 * 
iÂ
)

186 #ifde‡
DEBUG


187 
	`OLSR_PRINTF
(
BMSG_DBGLVL
, "Buûdög MID o¿%s\n-------------------\n", 
iÂ
->
öt_«me
);

190 
ﬁ§_˙f
->
ù_vîsi⁄
) {

191 (
AF_INET
):

192  
	`£rülize_mid4
(
iÂ
);

193 (
AF_INET6
):

194  
	`£rülize_mid6
(
iÂ
);

196  
Ál£
;

197 
	}
}

206 
boﬁ


207 
	$queue_h«
(
öãrÁ˚
 * 
iÂ
)

209 #ifde‡
DEBUG


210 
	`OLSR_PRINTF
(
BMSG_DBGLVL
, "Buûdög HNA o¿%s\n-------------------\n", 
iÂ
->
öt_«me
);

213 
ﬁ§_˙f
->
ù_vîsi⁄
) {

214 (
AF_INET
):

215  
	`£rülize_h«4
(
iÂ
);

216 (
AF_INET6
):

217  
	`£rülize_h«6
(
iÂ
);

219  
Ál£
;

220 
	}
}

227 
	$check_buff•a˚
(
msgsize
, 
buffsize
, c⁄° *
ty≥
)

229 i‡(
msgsize
 > 
buffsize
) {

230 
	`OLSR_PRINTF
(1, "%†buûd, ouçutbuf„∏tÿsmÆl(%d/%u)!\n", 
ty≥
, 
msgsize
, 
buffsize
);

231 
	`ﬁ§_sy¶og
(
OLSR_LOG_ERR
, "%†buûd, ouçutbuf„∏tÿsmÆl(%d/%u)!\n", 
ty≥
, 
msgsize
, 
buffsize
);

232 
	`ﬁ§_exô
(
__func__
, 
EXIT_FAILURE
);

234 
	}
}

246 
boﬁ


247 
	$£rülize_hñlo4
(
hñlo_mesßge
 *
mesßge
, 
öãrÁ˚
 *
iÂ
)

249 
uöt16_t
 
ªmaösize
, 
cuº_size
;

250 
hñlo_√ighb‹
 *
nb
;

251 
ﬁ§_mesßge
 *
m
;

252 
hñlomsg
 *
h
;

253 
hñlöfo
 *
höfo
;

254 *
haddr
;

255 
i
, 
j
;

256 
boﬁ
 
fú°_íåy
;

258 i‡((!
mesßge
Ë|| (!
iÂ
Ë|| (
ﬁ§_˙f
->
ù_vîsi⁄
 !
AF_INET
))

259  
Ál£
;

261 
ªmaösize
 = 
	`√t_outbuf„r_byãs_À·
(
iÂ
);

263 
m
 = (
ﬁ§_mesßge
 *)
msg_buf„r
;

265 
cuº_size
 = 
OLSR_HELLO_IPV4_HDRSIZE
;

268 i‡(
cuº_size
 > 
ªmaösize
) {

269 
	`√t_ouçut
(
iÂ
);

270 
ªmaösize
 = 
	`√t_outbuf„r_byãs_À·
(
iÂ
);

273 
	`check_buff•a˚
(
cuº_size
, 
ªmaösize
, "HELLO");

275 
h
 = &
m
->
v4
.
mesßge
.
hñlo
;

276 
höfo
 = 
h
->
hñl_öfo
;

277 
haddr
 = (*)
höfo
->
√igh_addr
;

280 
m
->
v4
.
âl
 = 
mesßge
->ttl;

281 
m
->
v4
.
h›˙t
 = 0;

282 
m
->
v4
.
ﬁ§_msgty≥
 = 
HELLO_MESSAGE
;

284 
m
->
v4
.
‹igö©‹
 = 
ﬁ§_˙f
->
maö_addr
.v4.
s_addr
;

286 
m
->
v4
.
ﬁ§_vtime
 = 
iÂ
->
vÆtimes
.
hñlo
;

289 
h
->
wûlög√ss
 = 
mesßge
->willingness;

290 
h
->
htime
 = 
	`ª…ime_to_me
(
iÂ
->
hñlo_ëime
);

292 
	`mem£t
(&
h
->
ª£rved
, 0, (
uöt16_t
));

300 
i
 = 0; i <
MAX_NEIGH
; i++) {

302 
j
 = 0; j <
MAX_LINK
; j++) {

303 #ifde‡
DEBUG


304 
ùaddr_°r
 
buf
;

309 i‡(
j
 =
HIDE_LINK
)

312 
fú°_íåy
 = 
åue
;

315 
nb
 = 
mesßge
->
√ighb‹s
;Çb !
NULL
;Çb =Çb->
√xt
) {

316 i‡((
nb
->
°©us
 !
i
Ë|| (nb->
lök
 !
j
))

320 #ifde‡
DEBUG


321 
	`OLSR_PRINTF
(
BMSG_DBGLVL
, "\t%†- ", 
	`ﬁ§_ù_to_°rög
(&
buf
, &
nb
->
addªss
));

322 
	`OLSR_PRINTF
(
BMSG_DBGLVL
, "L:%d N:%d\n", 
j
, 
i
);

335 i‡((
cuº_size
 + 
ﬁ§_˙f
->
ùsize
 + (
fú°_íåy
 ? 4 : 0)Ë> 
ªmaösize
) {

337 i‡(
cuº_size
 > 
OLSR_HELLO_IPV4_HDRSIZE
) {

338 #ifde‡
DEBUG


339 
	`OLSR_PRINTF
(
BMSG_DBGLVL
, "SídögÖ¨tül(size: %d, buf‡À·:%d)\n", 
cuº_size
, 
ªmaösize
);

342 
m
->
v4
.
£qno
 = 
	`ht⁄s
(
	`gë_msg_£qno
());

343 
m
->
v4
.
ﬁ§_msgsize
 = 
	`ht⁄s
(
cuº_size
);

345 
höfo
->
size
 = 
	`ht⁄s
((*)
haddr
 - (*)hinfo);

348 
	`√t_outbuf„r_push
(
iÂ
, 
msg_buf„r
, 
cuº_size
);

350 
cuº_size
 = 
OLSR_HELLO_IPV4_HDRSIZE
;

352 
h
 = &
m
->
v4
.
mesßge
.
hñlo
;

353 
höfo
 = 
h
->
hñl_öfo
;

354 
haddr
 = (*)
höfo
->
√igh_addr
;

356 
fú°_íåy
 = 
åue
;

359 
	`√t_ouçut
(
iÂ
);

361 
ªmaösize
 = 
	`√t_outbuf„r_byãs_À·
(
iÂ
);

364 
	`check_buff•a˚
(
cuº_size
 + 
ﬁ§_˙f
->
ùsize
 + 4, 
ªmaösize
, "HELLO2");

367 i‡(
fú°_íåy
) {

368 
	`mem£t
(&
höfo
->
ª£rved
, 0, (
uöt8_t
));

370 
höfo
->
lök_code
 = 
	`CREATE_LINK_CODE
(
i
, 
j
);

371 
cuº_size
 += 4;

374 
	`mem˝y
(
haddr
, &
nb
->
addªss
, (
ﬁ§_ù_addr
));

377 
haddr
 +
ﬁ§_˙f
->
ùsize
;

378 
cuº_size
 +
ﬁ§_˙f
->
ùsize
;

380 
fú°_íåy
 = 
Ál£
;

383 i‡(!
fú°_íåy
) {

384 
höfo
->
size
 = 
	`ht⁄s
((*)
haddr
 - (*)hinfo);

386 
höfo
 = (
hñlöfo
 *)((*)
haddr
);

387 
haddr
 = (*)
höfo
->
√igh_addr
;

393 
m
->
v4
.
£qno
 = 
	`ht⁄s
(
	`gë_msg_£qno
());

394 
m
->
v4
.
ﬁ§_msgsize
 = 
	`ht⁄s
(
cuº_size
);

396 
	`√t_outbuf„r_push
(
iÂ
, 
msg_buf„r
, 
cuº_size
);

399  
åue
;

400 
	}
}

412 
boﬁ


413 
	$£rülize_hñlo6
(
hñlo_mesßge
 *
mesßge
, 
öãrÁ˚
 *
iÂ
)

415 
uöt16_t
 
ªmaösize
, 
cuº_size
;

416 
hñlo_√ighb‹
 *
nb
;

417 
ﬁ§_mesßge
 *
m
;

418 
hñlomsg6
 *
h6
;

419 
hñlöfo6
 *
höfo6
;

420 
ﬁ§_ù_addr
 *
haddr
;

421 
i
, 
j
;

422 
boﬁ
 
fú°_íåy
;

424 i‡((!
mesßge
Ë|| (!
iÂ
Ë|| (
ﬁ§_˙f
->
ù_vîsi⁄
 !
AF_INET6
))

425  
Ál£
;

427 
ªmaösize
 = 
	`√t_outbuf„r_byãs_À·
(
iÂ
);

428 
m
 = (
ﬁ§_mesßge
 *)
msg_buf„r
;

430 
cuº_size
 = 
OLSR_HELLO_IPV6_HDRSIZE
;

433 i‡(
cuº_size
 > 
ªmaösize
) {

434 
	`√t_ouçut
(
iÂ
);

435 
ªmaösize
 = 
	`√t_outbuf„r_byãs_À·
(
iÂ
);

437 
	`check_buff•a˚
(
cuº_size
 + 
ﬁ§_˙f
->
ùsize
 + 4, 
ªmaösize
, "HELLO");

439 
h6
 = &
m
->
v6
.
mesßge
.
hñlo
;

440 
höfo6
 = 
h6
->
hñl_öfo
;

441 
haddr
 = (
ﬁ§_ù_addr
 *)
höfo6
->
√igh_addr
;

444 
m
->
v6
.
âl
 = 
mesßge
->ttl;

445 
m
->
v6
.
h›˙t
 = 0;

447 
m
->
v6
.
‹igö©‹
 = 
ﬁ§_˙f
->
maö_addr
.v6;

448 
m
->
v6
.
ﬁ§_msgty≥
 = 
HELLO_MESSAGE
;

450 
m
->
v6
.
ﬁ§_vtime
 = 
iÂ
->
vÆtimes
.
hñlo
;

453 
h6
->
wûlög√ss
 = 
mesßge
->willingness;

454 
h6
->
htime
 = 
	`ª…ime_to_me
(
iÂ
->
hñlo_ëime
);

455 
	`mem£t
(&
h6
->
ª£rved
, 0, (
uöt16_t
));

462 
i
 = 0; i <
MAX_NEIGH
; i++) {

463 
j
 = 0; j <
MAX_LINK
; j++) {

464 #ifde‡
DEBUG


465 
ùaddr_°r
 
buf
;

467 
fú°_íåy
 = 
åue
;

472 
nb
 = 
mesßge
->
√ighb‹s
;Çb !
NULL
;Çb =Çb->
√xt
) {

473 i‡((
nb
->
°©us
 !
i
Ë|| (nb->
lök
 !
j
))

476 #ifde‡
DEBUG


477 
	`OLSR_PRINTF
(
BMSG_DBGLVL
, "\t%†- ", 
	`ﬁ§_ù_to_°rög
(&
buf
, &
nb
->
addªss
));

478 
	`OLSR_PRINTF
(
BMSG_DBGLVL
, "L:%d N:%d\n", 
j
, 
i
);

492 i‡((
cuº_size
 + 
ﬁ§_˙f
->
ùsize
 + (
fú°_íåy
 ? 4 : 0)Ë> 
ªmaösize
) {

494 i‡(
cuº_size
 > 
OLSR_HELLO_IPV6_HDRSIZE
) {

495 #ifde‡
DEBUG


496 
	`OLSR_PRINTF
(
BMSG_DBGLVL
, "SídögÖ¨tül(size: %d, buf‡À·:%d)\n", 
cuº_size
, 
ªmaösize
);

499 
m
->
v6
.
£qno
 = 
	`ht⁄s
(
	`gë_msg_£qno
());

500 
m
->
v6
.
ﬁ§_msgsize
 = 
	`ht⁄s
(
cuº_size
);

502 
höfo6
->
size
 = (*)
haddr
 - (*)hinfo6;

503 
höfo6
->
size
 = 
	`ht⁄s
(hinfo6->size);

506 
	`√t_outbuf„r_push
(
iÂ
, 
msg_buf„r
, 
cuº_size
);

507 
cuº_size
 = 
OLSR_HELLO_IPV6_HDRSIZE
;

509 
h6
 = &
m
->
v6
.
mesßge
.
hñlo
;

510 
höfo6
 = 
h6
->
hñl_öfo
;

511 
haddr
 = (
ﬁ§_ù_addr
 *)
höfo6
->
√igh_addr
;

513 
fú°_íåy
 = 
åue
;

515 
	`√t_ouçut
(
iÂ
);

517 
ªmaösize
 = 
	`√t_outbuf„r_byãs_À·
(
iÂ
);

519 
	`check_buff•a˚
(
cuº_size
 + 
ﬁ§_˙f
->
ùsize
 + 4, 
ªmaösize
, "HELLO2");

523 i‡(
fú°_íåy
) {

524 
	`mem£t
(&
höfo6
->
ª£rved
, 0, (
uöt8_t
));

526 
höfo6
->
lök_code
 = 
	`CREATE_LINK_CODE
(
i
, 
j
);

527 
cuº_size
 += 4;

530 *
haddr
 = 
nb
->
addªss
;

533 
haddr
++;

534 
cuº_size
 +
ﬁ§_˙f
->
ùsize
;

536 
fú°_íåy
 = 
Ál£
;

539 i‡(!
fú°_íåy
) {

540 
höfo6
->
size
 = 
	`ht⁄s
((*)
haddr
 - (*)hinfo6);

541 
höfo6
 = (
hñlöfo6
 *)((*)
haddr
);

542 
haddr
 = (
ﬁ§_ù_addr
 *)&
höfo6
->
√igh_addr
;

548 
m
->
v6
.
£qno
 = 
	`ht⁄s
(
	`gë_msg_£qno
());

549 
m
->
v6
.
ﬁ§_msgsize
 = 
	`ht⁄s
(
cuº_size
);

551 
	`√t_outbuf„r_push
(
iÂ
, 
msg_buf„r
, 
cuº_size
);

554  
åue
;

555 
	}
}

567 
boﬁ


568 
	$£rülize_tc4
(
tc_mesßge
 *
mesßge
, 
öãrÁ˚
 *
iÂ
)

570 #ifde‡
DEBUG


571 
ùaddr_°r
 
buf
;

573 
uöt16_t
 
ªmaösize
, 
cuº_size
;

574 
tc_m¥_addr
 *
m¥s
;

575 
ﬁ§_mesßge
 *
m
;

576 
ﬁ§_tcmsg
 *
tc
;

577 
√igh_öfo
 *
m¥ßddr
;

578 
boﬁ
 
found
 = 
Ál£
, 
∑πül_£¡
 = false;

580 i‡((!
mesßge
Ë|| (!
iÂ
Ë|| (
ﬁ§_˙f
->
ù_vîsi⁄
 !
AF_INET
))

581  
Ál£
;

583 
ªmaösize
 = 
	`√t_outbuf„r_byãs_À·
(
iÂ
);

585 
m
 = (
ﬁ§_mesßge
 *)
msg_buf„r
;

587 
tc
 = &
m
->
v4
.
mesßge
.tc;

589 
m¥ßddr
 = 
tc
->
√igh
;

590 
cuº_size
 = 
OLSR_TC_IPV4_HDRSIZE
;

593 i‡(
cuº_size
 > 
ªmaösize
) {

594 
	`√t_ouçut
(
iÂ
);

595 
ªmaösize
 = 
	`√t_outbuf„r_byãs_À·
(
iÂ
);

597 
	`check_buff•a˚
(
cuº_size
, 
ªmaösize
, "TC");

600 
m
->
v4
.
ﬁ§_vtime
 = 
iÂ
->
vÆtimes
.
tc
;

601 
m
->
v4
.
ﬁ§_msgty≥
 = 
TC_MESSAGE
;

602 
m
->
v4
.
h›˙t
 = 
mesßge
->
h›_cou¡
;

603 
m
->
v4
.
âl
 = 
mesßge
->ttl;

604 
m
->
v4
.
‹igö©‹
 = 
mesßge
->‹igö©‹.v4.
s_addr
;

607 
tc
->
™¢
 = 
	`ht⁄s
(
mesßge
->ansn);

608 
tc
->
ª£rved
 = 0;

611 
m¥s
 = 
mesßge
->
mu…ùoöt_ªœy_£À˘‹_addªss
; m¥†!
NULL
; m¥†m¥s->
√xt
) {

613 i‡((
cuº_size
 + 
ﬁ§_˙f
->
ùsize
Ë> 
ªmaösize
) {

616 i‡(
cuº_size
 > 
OLSR_TC_IPV4_HDRSIZE
) {

617 #ifde‡
DEBUG


618 
	`OLSR_PRINTF
(
BMSG_DBGLVL
, "SídögÖ¨tül(size: %d, buf‡À·:%d)\n", 
cuº_size
, 
ªmaösize
);

621 
m
->
v4
.
ﬁ§_msgsize
 = 
	`ht⁄s
(
cuº_size
);

622 
m
->
v4
.
£qno
 = 
	`ht⁄s
(
	`gë_msg_£qno
());

624 
	`√t_outbuf„r_push
(
iÂ
, 
msg_buf„r
, 
cuº_size
);

627 
m¥ßddr
 = 
tc
->
√igh
;

628 
cuº_size
 = 
OLSR_TC_IPV4_HDRSIZE
;

629 
found
 = 
Ál£
;

630 
∑πül_£¡
 = 
åue
;

633 
	`√t_ouçut
(
iÂ
);

634 
ªmaösize
 = 
	`√t_outbuf„r_byãs_À·
(
iÂ
);

635 
	`check_buff•a˚
(
cuº_size
 + 
ﬁ§_˙f
->
ùsize
, 
ªmaösize
, "TC2");

638 
found
 = 
åue
;

639 #ifde‡
DEBUG


640 
	`OLSR_PRINTF
(
BMSG_DBGLVL
, "\t%s\n", 
	`ﬁ§_ù_to_°rög
(&
buf
, &
m¥s
->
addªss
));

642 
m¥ßddr
->
addr
 = 
m¥s
->
addªss
.
v4
.
s_addr
;

643 
cuº_size
 +
ﬁ§_˙f
->
ùsize
;

644 
m¥ßddr
++;

647 i‡(
found
) {

649 
m
->
v4
.
ﬁ§_msgsize
 = 
	`ht⁄s
(
cuº_size
);

650 
m
->
v4
.
£qno
 = 
	`ht⁄s
(
	`gë_msg_£qno
());

652 
	`√t_outbuf„r_push
(
iÂ
, 
msg_buf„r
, 
cuº_size
);

655 i‡((!
∑πül_£¡
Ë&& (!
	`TIMED_OUT
(
£nd_em±y_tc
))) {

656 i‡(!
	`TIMED_OUT
(
£nd_em±y_tc
))

657 
	`OLSR_PRINTF
(1, "TC: SídögÉm±yÖackagê- (%d/%d/%d/%d)\n", 
∑πül_£¡
, ()
£nd_em±y_tc
, ()
now_times
,

658 ()((
£nd_em±y_tc
Ë- 
now_times
));

660 
m
->
v4
.
ﬁ§_msgsize
 = 
	`ht⁄s
(
cuº_size
);

661 
m
->
v4
.
£qno
 = 
	`ht⁄s
(
	`gë_msg_£qno
());

663 
	`√t_outbuf„r_push
(
iÂ
, 
msg_buf„r
, 
cuº_size
);

665 
found
 = 
åue
;

669  
found
;

670 
	}
}

682 
boﬁ


683 
	$£rülize_tc6
(
tc_mesßge
 *
mesßge
, 
öãrÁ˚
 *
iÂ
)

685 #ifde‡
DEBUG


686 
ùaddr_°r
 
buf
;

688 
uöt16_t
 
ªmaösize
, 
cuº_size
;

689 
tc_m¥_addr
 *
m¥s
;

690 
ﬁ§_mesßge
 *
m
;

691 
ﬁ§_tcmsg6
 *
tc6
;

692 
√igh_öfo6
 *
m¥ßddr6
;

693 
boﬁ
 
found
 = 
Ál£
, 
∑πül_£¡
 = false;

695 i‡((!
mesßge
Ë|| (!
iÂ
Ë|| (
ﬁ§_˙f
->
ù_vîsi⁄
 !
AF_INET6
))

696  
Ál£
;

698 
ªmaösize
 = 
	`√t_outbuf„r_byãs_À·
(
iÂ
);

700 
m
 = (
ﬁ§_mesßge
 *)
msg_buf„r
;

702 
tc6
 = &
m
->
v6
.
mesßge
.
tc
;

704 
m¥ßddr6
 = 
tc6
->
√igh
;

705 
cuº_size
 = 
OLSR_TC_IPV6_HDRSIZE
;

708 i‡(
cuº_size
 > 
ªmaösize
) {

709 
	`√t_ouçut
(
iÂ
);

710 
ªmaösize
 = 
	`√t_outbuf„r_byãs_À·
(
iÂ
);

712 
	`check_buff•a˚
(
cuº_size
, 
ªmaösize
, "TC");

715 
m
->
v6
.
ﬁ§_vtime
 = 
iÂ
->
vÆtimes
.
tc
;

716 
m
->
v6
.
ﬁ§_msgty≥
 = 
TC_MESSAGE
;

717 
m
->
v6
.
h›˙t
 = 
mesßge
->
h›_cou¡
;

718 
m
->
v6
.
âl
 = 
mesßge
->ttl;

719 
m
->
v6
.
‹igö©‹
 = 
mesßge
->originator.v6;

722 
tc6
->
™¢
 = 
	`ht⁄s
(
mesßge
->ansn);

723 
tc6
->
ª£rved
 = 0;

726 
m¥s
 = 
mesßge
->
mu…ùoöt_ªœy_£À˘‹_addªss
; m¥†!
NULL
; m¥†m¥s->
√xt
) {

729 i‡((
cuº_size
 + 
ﬁ§_˙f
->
ùsize
Ë> 
ªmaösize
) {

731 i‡(
cuº_size
 > 
OLSR_TC_IPV6_HDRSIZE
) {

732 #ifde‡
DEBUG


733 
	`OLSR_PRINTF
(
BMSG_DBGLVL
, "SídögÖ¨tül(size: %d, buf‡À·:%d)\n", 
cuº_size
, 
ªmaösize
);

735 
m
->
v6
.
ﬁ§_msgsize
 = 
	`ht⁄s
(
cuº_size
);

736 
m
->
v6
.
£qno
 = 
	`ht⁄s
(
	`gë_msg_£qno
());

738 
	`√t_outbuf„r_push
(
iÂ
, 
msg_buf„r
, 
cuº_size
);

739 
m¥ßddr6
 = 
tc6
->
√igh
;

740 
cuº_size
 = 
OLSR_TC_IPV6_HDRSIZE
;

741 
found
 = 
Ál£
;

742 
∑πül_£¡
 = 
åue
;

744 
	`√t_ouçut
(
iÂ
);

745 
ªmaösize
 = 
	`√t_outbuf„r_byãs_À·
(
iÂ
);

746 
	`check_buff•a˚
(
cuº_size
 + 
ﬁ§_˙f
->
ùsize
, 
ªmaösize
, "TC2");

749 
found
 = 
åue
;

750 #ifde‡
DEBUG


751 
	`OLSR_PRINTF
(
BMSG_DBGLVL
, "\t%s\n", 
	`ﬁ§_ù_to_°rög
(&
buf
, &
m¥s
->
addªss
));

753 
m¥ßddr6
->
addr
 = 
m¥s
->
addªss
.
v6
;

754 
cuº_size
 +
ﬁ§_˙f
->
ùsize
;

756 
m¥ßddr6
++;

759 i‡(
found
) {

760 
m
->
v6
.
ﬁ§_msgsize
 = 
	`ht⁄s
(
cuº_size
);

761 
m
->
v6
.
£qno
 = 
	`ht⁄s
(
	`gë_msg_£qno
());

763 
	`√t_outbuf„r_push
(
iÂ
, 
msg_buf„r
, 
cuº_size
);

766 i‡((!
∑πül_£¡
Ë&& (!
	`TIMED_OUT
(
£nd_em±y_tc
))) {

767 
	`OLSR_PRINTF
(1, "TC: SendingÉmptyÖackage\n");

769 
m
->
v6
.
ﬁ§_msgsize
 = 
	`ht⁄s
(
cuº_size
);

770 
m
->
v6
.
£qno
 = 
	`ht⁄s
(
	`gë_msg_£qno
());

772 
	`√t_outbuf„r_push
(
iÂ
, 
msg_buf„r
, 
cuº_size
);

774 
found
 = 
åue
;

778  
found
;

779 
	}
}

789 
boﬁ


790 
	$£rülize_mid4
(
öãrÁ˚
 *
iÂ
)

792 
uöt16_t
 
ªmaösize
, 
cuº_size
, 
√edsize
;

794 
ﬁ§_mesßge
 *
m
;

795 
midaddr
 *
addrs
;

796 
öãrÁ˚
 *
ifs
;

798 i‡((
ﬁ§_˙f
->
ù_vîsi⁄
 !
AF_INET
Ë|| (!
iÂ
Ë|| (
i‚ë
 =
NULL
Ë|| ((i‚ë->
öt_√xt
 =NULLË&& (
	`ùequÆ
(&ﬁ§_˙f->
maö_addr
, &i‚ë->
ù_addr
))))

799  
Ál£
;

801 
ªmaösize
 = 
	`√t_outbuf„r_byãs_À·
(
iÂ
);

803 
m
 = (
ﬁ§_mesßge
 *)
msg_buf„r
;

805 
cuº_size
 = 
OLSR_MID_IPV4_HDRSIZE
;

808 
√edsize
 = 
cuº_size
;

809 
ifs
 = 
i‚ë
; if†!
NULL
; if†ifs->
öt_√xt
) {

810 
√edsize
 +
ﬁ§_˙f
->
ùsize
*2;

814 i‡(
√edsize
 > 
ªmaösize
) {

815 
	`√t_ouçut
(
iÂ
);

816 
ªmaösize
 = 
	`√t_outbuf„r_byãs_À·
(
iÂ
);

818 
	`check_buff•a˚
(
cuº_size
, 
ªmaösize
, "MID");

821 
m
->
v4
.
h›˙t
 = 0;

822 
m
->
v4
.
âl
 = 
MAX_TTL
;

824 
m
->
v4
.
‹igö©‹
 = 
ﬁ§_˙f
->
maö_addr
.v4.
s_addr
;

825 
m
->
v4
.
ﬁ§_msgty≥
 = 
MID_MESSAGE
;

826 
m
->
v4
.
ﬁ§_vtime
 = 
iÂ
->
vÆtimes
.
mid
;

828 
addrs
 = 
m
->
v4
.
mesßge
.
mid
.
mid_addr
;

831 
ifs
 = 
i‚ë
; if†!
NULL
; if†ifs->
öt_√xt
) {

832 i‡(!
	`ùequÆ
(&
ﬁ§_˙f
->
maö_addr
, &
ifs
->
ù_addr
)) {

833 #ifde‡
DEBUG


834 
ùaddr_°r
 
buf
;

837 i‡((
cuº_size
 + 
ﬁ§_˙f
->
ùsize
Ë> 
ªmaösize
) {

839 i‡(
cuº_size
 > 
OLSR_MID_IPV4_HDRSIZE
) {

840 #ifde‡
DEBUG


841 
	`OLSR_PRINTF
(
BMSG_DBGLVL
, "SídögÖ¨tül(size: %d, buf‡À·:%d)\n", 
cuº_size
, 
ªmaösize
);

844 
m
->
v4
.
ﬁ§_msgsize
 = 
	`ht⁄s
(
cuº_size
);

845 
m
->
v4
.
£qno
 = 
	`ht⁄s
(
	`gë_msg_£qno
());

847 
	`√t_outbuf„r_push
(
iÂ
, 
msg_buf„r
, 
cuº_size
);

848 
cuº_size
 = 
OLSR_MID_IPV4_HDRSIZE
;

849 
addrs
 = 
m
->
v4
.
mesßge
.
mid
.
mid_addr
;

851 
	`√t_ouçut
(
iÂ
);

852 
ªmaösize
 = 
	`√t_outbuf„r_byãs_À·
(
iÂ
);

853 
	`check_buff•a˚
(
cuº_size
, 
ªmaösize
, "MID2");

855 #ifde‡
DEBUG


856 
	`OLSR_PRINTF
(
BMSG_DBGLVL
, "\t%s(%s)\n", 
	`ﬁ§_ù_to_°rög
(&
buf
, &
ifs
->
ù_addr
), ifs->
öt_«me
);

859 
addrs
->
addr
 = 
ifs
->
ù_addr
.
v4
.
s_addr
;

860 
addrs
++;

861 
cuº_size
 +
ﬁ§_˙f
->
ùsize
;

865 
m
->
v4
.
£qno
 = 
	`ht⁄s
(
	`gë_msg_£qno
());

866 
m
->
v4
.
ﬁ§_msgsize
 = 
	`ht⁄s
(
cuº_size
);

869 i‡(
cuº_size
 > 
OLSR_MID_IPV4_HDRSIZE
)

870 
	`√t_outbuf„r_push
(
iÂ
, 
msg_buf„r
, 
cuº_size
);

872  
åue
;

873 
	}
}

883 
boﬁ


884 
	$£rülize_mid6
(
öãrÁ˚
 *
iÂ
)

886 
uöt16_t
 
ªmaösize
, 
cuº_size
, 
√edsize
;

888 
ﬁ§_mesßge
 *
m
;

889 
midaddr6
 *
addrs6
;

890 
öãrÁ˚
 *
ifs
;

894 i‡((
ﬁ§_˙f
->
ù_vîsi⁄
 !
AF_INET6
Ë|| (!
iÂ
Ë|| (
i‚ë
 =
NULL
Ë|| ((i‚ë->
öt_√xt
 =NULLË&& (
	`ùequÆ
(&ﬁ§_˙f->
maö_addr
, &i‚ë->
ù_addr
))))

895  
Ál£
;

897 
ªmaösize
 = 
	`√t_outbuf„r_byãs_À·
(
iÂ
);

899 
cuº_size
 = 
OLSR_MID_IPV6_HDRSIZE
;

902 
√edsize
 = 
cuº_size
;

903 
ifs
 = 
i‚ë
; if†!
NULL
; if†ifs->
öt_√xt
) {

904 
√edsize
 +
ﬁ§_˙f
->
ùsize
*2;

908 i‡(
√edsize
 > 
ªmaösize
) {

909 
	`√t_ouçut
(
iÂ
);

910 
ªmaösize
 = 
	`√t_outbuf„r_byãs_À·
(
iÂ
);

912 
	`check_buff•a˚
(
cuº_size
, 
ªmaösize
, "MID");

914 
m
 = (
ﬁ§_mesßge
 *)
msg_buf„r
;

917 
m
->
v6
.
h›˙t
 = 0;

918 
m
->
v6
.
âl
 = 
MAX_TTL
;

919 
m
->
v6
.
ﬁ§_msgty≥
 = 
MID_MESSAGE
;

920 
m
->
v6
.
ﬁ§_vtime
 = 
iÂ
->
vÆtimes
.
mid
;

922 
m
->
v6
.
‹igö©‹
 = 
ﬁ§_˙f
->
maö_addr
.v6;

924 
addrs6
 = 
m
->
v6
.
mesßge
.
mid
.
mid_addr
;

927 
ifs
 = 
i‚ë
; if†!
NULL
; if†ifs->
öt_√xt
) {

928 i‡(!
	`ùequÆ
(&
ﬁ§_˙f
->
maö_addr
, &
ifs
->
ù_addr
)) {

929 #ifde‡
DEBUG


930 
ùaddr_°r
 
buf
;

932 i‡((
cuº_size
 + 
ﬁ§_˙f
->
ùsize
Ë> 
ªmaösize
) {

934 i‡(
cuº_size
 > 
OLSR_MID_IPV6_HDRSIZE
) {

935 #ifde‡
DEBUG


936 
	`OLSR_PRINTF
(
BMSG_DBGLVL
, "SídögÖ¨tül(size: %d, buf‡À·:%d)\n", 
cuº_size
, 
ªmaösize
);

939 
m
->
v6
.
ﬁ§_msgsize
 = 
	`ht⁄s
(
cuº_size
);

940 
m
->
v6
.
£qno
 = 
	`ht⁄s
(
	`gë_msg_£qno
());

942 
	`√t_outbuf„r_push
(
iÂ
, 
msg_buf„r
, 
cuº_size
);

943 
cuº_size
 = 
OLSR_MID_IPV6_HDRSIZE
;

944 
addrs6
 = 
m
->
v6
.
mesßge
.
mid
.
mid_addr
;

946 
	`√t_ouçut
(
iÂ
);

947 
ªmaösize
 = 
	`√t_outbuf„r_byãs_À·
(
iÂ
);

948 
	`check_buff•a˚
(
cuº_size
 + 
ﬁ§_˙f
->
ùsize
, 
ªmaösize
, "MID2");

950 #ifde‡
DEBUG


951 
	`OLSR_PRINTF
(
BMSG_DBGLVL
, "\t%s(%s)\n", 
	`ﬁ§_ù_to_°rög
(&
buf
, &
ifs
->
ù_addr
), ifs->
öt_«me
);

954 
addrs6
->
addr
 = 
ifs
->
ù_addr
.
v6
;

955 
addrs6
++;

956 
cuº_size
 +
ﬁ§_˙f
->
ùsize
;

960 
m
->
v6
.
ﬁ§_msgsize
 = 
	`ht⁄s
(
cuº_size
);

961 
m
->
v6
.
£qno
 = 
	`ht⁄s
(
	`gë_msg_£qno
());

964 i‡(
cuº_size
 > 
OLSR_MID_IPV6_HDRSIZE
)

965 
	`√t_outbuf„r_push
(
iÂ
, 
msg_buf„r
, 
cuº_size
);

967  
åue
;

968 
	}
}

976 
boﬁ


977 
	$£rülize_h«4
(
öãrÁ˚
 *
iÂ
)

979 
uöt16_t
 
ªmaösize
, 
cuº_size
, 
√edsize
;

981 
ﬁ§_mesßge
 *
m
;

982 
h«∑ú
 *
∑ú
;

983 
ù_¥efix_li°
 *
h
;

986 i‡(
iÂ
 =
NULL
) {

987  
Ál£
;

989 i‡(
ﬁ§_˙f
->
ù_vîsi⁄
 !
AF_INET
) {

990  
Ál£
;

992 
h
 = 
ﬁ§_˙f
->
h«_íåõs
;

993 i‡(
h
 =
NULL
) {

994  
Ál£
;

997 
ªmaösize
 = 
	`√t_outbuf„r_byãs_À·
(
iÂ
);

999 
cuº_size
 = 
OLSR_HNA_IPV4_HDRSIZE
;

1002 
√edsize
 = 
cuº_size
;

1003 
h
) {

1004 
√edsize
 +
ﬁ§_˙f
->
ùsize
*2;

1005 
h
 = h->
√xt
;

1008 
h
 = 
ﬁ§_˙f
->
h«_íåõs
;

1011 i‡(
√edsize
 > 
ªmaösize
) {

1012 
	`√t_ouçut
(
iÂ
);

1013 
ªmaösize
 = 
	`√t_outbuf„r_byãs_À·
(
iÂ
);

1015 
	`check_buff•a˚
(
cuº_size
, 
ªmaösize
, "HNA");

1017 
m
 = (
ﬁ§_mesßge
 *)
msg_buf„r
;

1020 
m
->
v4
.
‹igö©‹
 = 
ﬁ§_˙f
->
maö_addr
.v4.
s_addr
;

1021 
m
->
v4
.
h›˙t
 = 0;

1022 
m
->
v4
.
âl
 = 
MAX_TTL
;

1023 
m
->
v4
.
ﬁ§_msgty≥
 = 
HNA_MESSAGE
;

1024 
m
->
v4
.
ﬁ§_vtime
 = 
iÂ
->
vÆtimes
.
h«
;

1026 
∑ú
 = 
m
->
v4
.
mesßge
.
h«
.
h«_√t
;

1028 ; 
h
 !
NULL
; h = h->
√xt
) {

1029 
ﬁ§_ù_addr
 
ù_addr
;

1030 i‡((
cuº_size
 + (2 * 
ﬁ§_˙f
->
ùsize
)Ë> 
ªmaösize
) {

1032 i‡(
cuº_size
 > 
OLSR_HNA_IPV4_HDRSIZE
) {

1033 #ifde‡
DEBUG


1034 
	`OLSR_PRINTF
(
BMSG_DBGLVL
, "SídögÖ¨tül(size: %d, buf‡À·:%d)\n", 
cuº_size
, 
ªmaösize
);

1036 
m
->
v4
.
£qno
 = 
	`ht⁄s
(
	`gë_msg_£qno
());

1037 
m
->
v4
.
ﬁ§_msgsize
 = 
	`ht⁄s
(
cuº_size
);

1038 
	`√t_outbuf„r_push
(
iÂ
, 
msg_buf„r
, 
cuº_size
);

1039 
cuº_size
 = 
OLSR_HNA_IPV4_HDRSIZE
;

1040 
∑ú
 = 
m
->
v4
.
mesßge
.
h«
.
h«_√t
;

1042 
	`√t_ouçut
(
iÂ
);

1043 
ªmaösize
 = 
	`√t_outbuf„r_byãs_À·
(
iÂ
);

1044 
	`check_buff•a˚
(
cuº_size
 + (2 * 
ﬁ§_˙f
->
ùsize
), 
ªmaösize
, "HNA2");

1046 #ifde‡
DEBUG


1047 
	`OLSR_PRINTF
(
BMSG_DBGLVL
, "\tNë: %s\n", 
	`ﬁ§_ù_¥efix_to_°rög
(&
h
->
√t
));

1050 
	`ﬁ§_¥efix_to_√tmask
(&
ù_addr
, 
h
->
√t
.
¥efix_Àn
);

1051 #ifde‡
LINUX_NETLINK_ROUTING


1052 i‡(
ﬁ§_˙f
->
sm¨t_gw_a˘ive
 && 
	`is_¥efix_öëgw
(&
h
->
√t
)) {

1054 
	`ﬁ§_modifiy_öëgw_√tmask
(&
ù_addr
, 
h
->
√t
.
¥efix_Àn
);

1057 
∑ú
->
addr
 = 
h
->
√t
.
¥efix
.
v4
.
s_addr
;

1058 
∑ú
->
√tmask
 = 
ù_addr
.
v4
.
s_addr
;

1059 
∑ú
++;

1060 
cuº_size
 +(2 * 
ﬁ§_˙f
->
ùsize
);

1063 
m
->
v4
.
£qno
 = 
	`ht⁄s
(
	`gë_msg_£qno
());

1064 
m
->
v4
.
ﬁ§_msgsize
 = 
	`ht⁄s
(
cuº_size
);

1066 
	`√t_outbuf„r_push
(
iÂ
, 
msg_buf„r
, 
cuº_size
);

1069  
Ál£
;

1070 
	}
}

1078 
boﬁ


1079 
	$£rülize_h«6
(
öãrÁ˚
 *
iÂ
)

1081 
uöt16_t
 
ªmaösize
, 
cuº_size
, 
√edsize
;

1083 
ﬁ§_mesßge
 *
m
;

1084 
h«∑ú6
 *
∑ú6
;

1085 
ﬁ§_ù_addr
 
tmp_√tmask
;

1086 
ù_¥efix_li°
 *
h
 = 
ﬁ§_˙f
->
h«_íåõs
;

1089 i‡((
ﬁ§_˙f
->
ù_vîsi⁄
 !
AF_INET6
Ë|| (!
iÂ
Ë|| 
h
 =
NULL
)

1090  
Ál£
;

1092 
ªmaösize
 = 
	`√t_outbuf„r_byãs_À·
(
iÂ
);

1094 
cuº_size
 = 
OLSR_HNA_IPV6_HDRSIZE
;

1097 
√edsize
 = 
cuº_size
;

1098 
h
) {

1099 
√edsize
 +
ﬁ§_˙f
->
ùsize
*2;

1100 
h
 = h->
√xt
;

1103 
h
 = 
ﬁ§_˙f
->
h«_íåõs
;

1106 i‡(
√edsize
 > 
ªmaösize
) {

1107 
	`√t_ouçut
(
iÂ
);

1108 
ªmaösize
 = 
	`√t_outbuf„r_byãs_À·
(
iÂ
);

1110 
	`check_buff•a˚
(
cuº_size
, 
ªmaösize
, "HNA");

1112 
m
 = (
ﬁ§_mesßge
 *)
msg_buf„r
;

1115 
m
->
v6
.
‹igö©‹
 = 
ﬁ§_˙f
->
maö_addr
.v6;

1116 
m
->
v6
.
h›˙t
 = 0;

1117 
m
->
v6
.
âl
 = 
MAX_TTL
;

1118 
m
->
v6
.
ﬁ§_msgty≥
 = 
HNA_MESSAGE
;

1119 
m
->
v6
.
ﬁ§_vtime
 = 
iÂ
->
vÆtimes
.
h«
;

1121 
∑ú6
 = 
m
->
v6
.
mesßge
.
h«
.
h«_√t
;

1123 
h
) {

1124 i‡((
cuº_size
 + (2 * 
ﬁ§_˙f
->
ùsize
)Ë> 
ªmaösize
) {

1126 i‡(
cuº_size
 > 
OLSR_HNA_IPV6_HDRSIZE
) {

1127 #ifde‡
DEBUG


1128 
	`OLSR_PRINTF
(
BMSG_DBGLVL
, "SídögÖ¨tül(size: %d, buf‡À·:%d)\n", 
cuº_size
, 
ªmaösize
);

1130 
m
->
v6
.
£qno
 = 
	`ht⁄s
(
	`gë_msg_£qno
());

1131 
m
->
v6
.
ﬁ§_msgsize
 = 
	`ht⁄s
(
cuº_size
);

1132 
	`√t_outbuf„r_push
(
iÂ
, 
msg_buf„r
, 
cuº_size
);

1133 
cuº_size
 = 
OLSR_HNA_IPV6_HDRSIZE
;

1134 
∑ú6
 = 
m
->
v6
.
mesßge
.
h«
.
h«_√t
;

1136 
	`√t_ouçut
(
iÂ
);

1137 
ªmaösize
 = 
	`√t_outbuf„r_byãs_À·
(
iÂ
);

1138 
	`check_buff•a˚
(
cuº_size
 + (2 * 
ﬁ§_˙f
->
ùsize
), 
ªmaösize
, "HNA2");

1140 #ifde‡
DEBUG


1141 
	`OLSR_PRINTF
(
BMSG_DBGLVL
, "\tNë: %s\n", 
	`ﬁ§_ù_¥efix_to_°rög
(&
h
->
√t
));

1143 
	`ﬁ§_¥efix_to_√tmask
(&
tmp_√tmask
, 
h
->
√t
.
¥efix_Àn
);

1144 #ifde‡
LINUX_NETLINK_ROUTING


1145 i‡(
ﬁ§_˙f
->
sm¨t_gw_a˘ive
 && 
	`is_¥efix_öëgw
(&
h
->
√t
)) {

1147 
	`ﬁ§_modifiy_öëgw_√tmask
(&
tmp_√tmask
, 
h
->
√t
.
¥efix_Àn
);

1150 
∑ú6
->
addr
 = 
h
->
√t
.
¥efix
.
v6
;

1151 
∑ú6
->
√tmask
 = 
tmp_√tmask
.
v6
;

1152 
∑ú6
++;

1153 
cuº_size
 +(2 * 
ﬁ§_˙f
->
ùsize
);

1154 
h
 = h->
√xt
;

1157 
m
->
v6
.
ﬁ§_msgsize
 = 
	`ht⁄s
(
cuº_size
);

1158 
m
->
v6
.
£qno
 = 
	`ht⁄s
(
	`gë_msg_£qno
());

1160 
	`√t_outbuf„r_push
(
iÂ
, 
msg_buf„r
, 
cuº_size
);

1162 
	`¥ötf
("Sídög HNA (%d byãs)...\n", 
ouçutsize
);

1164  
Ál£
;

1166 
	}
}

	@src/build_msg.h

42 #i‚de‡
_BUILD_MSG_H


43 
	#_BUILD_MSG_H


	)

45 
	~"∑ckë.h
"

46 
	~"ﬁ§_¥Ÿocﬁ.h
"

47 
	~<time.h
>

49 
£t_em±y_tc_timî
(
uöt32_t
);

51 
uöt32_t
 
gë_em±y_tc_timî
();

53 
boﬁ
 
queue_hñlo
(
hñlo_mesßge
 *, 
öãrÁ˚
 *);

55 
boﬁ
 
queue_tc
(
tc_mesßge
 *, 
öãrÁ˚
 *);

57 
boﬁ
 
queue_mid
(
öãrÁ˚
 *);

59 
boﬁ
 
queue_h«
(
öãrÁ˚
 *);

	@src/builddata.c

1 
	~"defs.h
"

2 c⁄° 
	gﬁ§d_vîsi⁄
[] = "olsr.org -Öre-0.6.3-git_e000717-hash_815ee07772f8d8464c1bd96ae01da8aa -";

3 c⁄° 
	gbuûd_d©e
[] = "2012-05-07 18:45:50";

4 c⁄° 
	gbuûd_ho°
[] = "HAL-P";

	@src/cfgparser/cfgfile_gen.c

41 
	~"ﬁ§d_c⁄f.h
"

42 
	~"../ùˇlc.h
"

43 
	~"../√t_ﬁ§.h
"

44 
	~"../comm⁄/autobuf.h
"

46 
	~<°d¨g.h
>

47 
	~<°dio.h
>

48 
	~<°rög.h
>

49 
	~<î∫o.h
>

50 
	~<sys/ty≥s.h
>

51 
	~<√töë/ö.h
>

52 
	~<¨∑/öë.h
>

54 
	$ﬁ§d_wrôe_˙f
(
ﬁ§d_c⁄fig
 *
˙f
, c⁄° *
‚ame
) {

55 
FILE
 *
fd
;

56 
autobuf
 
abuf
;

58 
fd
 = 
	`f›í
(
‚ame
, "w");

60 i‡(
fd
 =
NULL
) {

61 
	`Ârötf
(
°dîr
, "CouldÇŸ o≥¿fûê%†f‹ wrôög\n%s\n", 
‚ame
, 
	`°ªº‹
(
î∫o
));

65 
	`¥ötf
("Wrôög c⁄figÅÿfûê\"%s\".... ", 
‚ame
);

66 
	`abuf_öô
(&
abuf
, 1024);

67 
	`ﬁ§d_wrôe_˙f_autobuf
(&
abuf
, 
˙f
);

68 i‡(
	`fwrôe
(
abuf
.
buf
,ábuf.
Àn
, 1, 
fd
Ë< (
size_t
)abuf.len) {

69 
	`Ârötf
(
°dîr
, "Error, couldÇot writeÅhe complete config file.\n");

71 
	`abuf_‰ì
(&
abuf
);

72 
	`f˛o£
(
fd
);

74 
	`¥ötf
("DONE\n");

77 
	}
}

80 
	$if_≠≥ndf
(
autobuf
 *autobuf, 
boﬁ
 
commíts
, c⁄° *
fmt
, ...Ë
	`__©åibuã__
 ((
	`f‹m©
(
¥ötf
, 3, 4)));

83 
	$if_≠≥ndf
(
autobuf
 *autobuf, 
boﬁ
 
commíts
, c⁄° *
fmt
, ...)

85 
rv
;

86 
va_li°
 
≠
;

87 *
fú°
;

89 i‡(!
commíts
) {

90 
	`va_°¨t
(
≠
, 
fmt
);

91 
fú°
 = 
	`va_¨g
(
≠
, *);

92 
	`va_íd
(
≠
);

93 i‡(*
fú°
) {

98 
	`va_°¨t
(
≠
, 
fmt
);

99 
rv
 = 
	`abuf_v≠≥ndf
(
autobuf
, 
fmt
, 
≠
);

100 
	`va_íd
(
≠
);

101  
rv
;

102 
	}
}

104 
	$ﬁ§d_wrôe_if_autobuf
(
autobuf
 *
out
, 
if_c⁄fig_›ti⁄s
 *
˙fi
, 
boﬁ
 
commíts
) {

105 
ùaddr_°r
 
ùbuf
;

106 
ﬁ§_lq_mu…
 *
mu…
;

108 
	`abuf_puts
(
out
, "{\n");

109 i‡(
commíts
Ë
	`abuf_puts
(
out
,

115 
	`if_≠≥ndf
(
out
, 
commíts
, " %sMode \"%s\"\n",

116 
˙fi
->
mode
 =
DEF_IF_MODE
 ? "# " : "",

117 
OLSR_IF_MODE
[
˙fi
->
mode
]);

118 i‡(
commíts
Ë
	`abuf_puts
(
out
,

128 
	`if_≠≥ndf
(
out
, 
commíts
, " %sIp4Broadcast %s\n",

129 
˙fi
->
ùv4_mu…iˇ°
.
v4
.
s_addr
 == 0 ? "# " : "",

130 
	`öë_¡›
(
AF_INET
, &
˙fi
->
ùv4_mu…iˇ°
, 
ùbuf
.
buf
, (ipbuf)));

131 i‡(
commíts
Ë
	`abuf_puts
(
out
,

136 
	`if_≠≥ndf
(
out
, 
commíts
, " %sIPv6Multicast %s\n",

137 
	`memcmp
(&
˙fi
->
ùv6_mu…iˇ°
, &
ùv6_def_mu…iˇ°
, (ipv6_def_multicast)) == 0 ? "# " : "",

138 
	`öë_¡›
(
AF_INET6
, &
˙fi
->
ùv6_mu…iˇ°
, 
ùbuf
.
buf
, (ipbuf)));

139 i‡(
commíts
Ë
	`abuf_puts
(
out
,

144 
	`if_≠≥ndf
(
out
, 
commíts
, " %sIPv4Src %s\n",

145 
˙fi
->
ùv4_§c
.
v4
.
s_addr
 == 0 ? "# " : "",

146 
	`öë_¡›
(
AF_INET
, &
˙fi
->
ùv4_§c
, 
ùbuf
.
buf
, (ipbuf)));

147 i‡(
commíts
Ë
	`abuf_puts
(
out
,

154 
	`if_≠≥ndf
(
out
, 
commíts
, " %sIPv6Src %s\n",

155 
˙fi
->
ùv6_§c
.
¥efix_Àn
 == 0 ? "# " : "",

156 
	`öë_¡›
(
AF_INET6
, &
˙fi
->
ùv6_§c
, 
ùbuf
.
buf
, (ipbuf)));

157 i‡(
commíts
Ë
	`abuf_puts
(
out
,

163 
	`if_≠≥ndf
(
out
, 
commíts
, " %sHelloInterval %3.1f\n",

164 
˙fi
->
hñlo_∑øms
.
emissi⁄_öãrvÆ
 =
HELLO_INTERVAL
 ? "# " : "",

165 
˙fi
->
hñlo_∑øms
.
emissi⁄_öãrvÆ
);

166 
	`if_≠≥ndf
(
out
, 
commíts
, " %sHelloValidityTime %3.1f\n",

167 
˙fi
->
hñlo_∑øms
.
vÆidôy_time
 =
NEIGHB_HOLD_TIME
 ? "# " : "",

168 
˙fi
->
hñlo_∑øms
.
vÆidôy_time
);

169 
	`if_≠≥ndf
(
out
, 
commíts
, " %sTcInterval %3.1f\n",

170 
˙fi
->
tc_∑øms
.
emissi⁄_öãrvÆ
 =
TC_INTERVAL
 ? "# " : "",

171 
˙fi
->
tc_∑øms
.
emissi⁄_öãrvÆ
);

172 
	`if_≠≥ndf
(
out
, 
commíts
, " %sTcValidityTime %3.1f\n",

173 
˙fi
->
tc_∑øms
.
vÆidôy_time
 =
TOP_HOLD_TIME
 ? "# " : "",

174 
˙fi
->
tc_∑øms
.
vÆidôy_time
);

175 
	`if_≠≥ndf
(
out
, 
commíts
, " %sMidInterval %3.1f\n",

176 
˙fi
->
mid_∑øms
.
emissi⁄_öãrvÆ
 =
MID_INTERVAL
 ? "# " : "",

177 
˙fi
->
mid_∑øms
.
emissi⁄_öãrvÆ
);

178 
	`if_≠≥ndf
(
out
, 
commíts
, " %sMidValidityTime %3.1f\n",

179 
˙fi
->
mid_∑øms
.
vÆidôy_time
 =
MID_HOLD_TIME
 ? "# " : "",

180 
˙fi
->
mid_∑øms
.
vÆidôy_time
);

181 
	`if_≠≥ndf
(
out
, 
commíts
, " %sHnaInterval %3.1f\n",

182 
˙fi
->
h«_∑øms
.
emissi⁄_öãrvÆ
 =
HNA_INTERVAL
 ? "# " : "",

183 
˙fi
->
h«_∑øms
.
emissi⁄_öãrvÆ
);

184 
	`if_≠≥ndf
(
out
, 
commíts
, " %sHnaValidityTime %3.1f\n",

185 
˙fi
->
h«_∑øms
.
vÆidôy_time
 =
HNA_HOLD_TIME
 ? "# " : "",

186 
˙fi
->
h«_∑øms
.
vÆidôy_time
);

187 i‡(
commíts
Ë
	`abuf_puts
(
out
,

200 
	`if_≠≥ndf
(
out
, 
commíts
, " %sWeight %d\n",

201 !
˙fi
->
weight
.
fixed
 ? "# " : "",

202 
˙fi
->
weight
.
vÆue
);

203 i‡(
commíts
Ë
	`abuf_puts
(
out
,

217 
mu…
 = 
˙fi
->
lq_mu…
;

219 i‡(
mu…
 =
NULL
) {

220 i‡(
commíts
Ë
	`abuf_puts
(
out
, " # LinkQualityMult 192.168.0.1 0.5\n");

222 
mu…
 !
NULL
) {

223 
	`if_≠≥ndf
(
out
, 
commíts
, " LinkQualityMult %s %0.2f\n",

224 
	`ﬁ§_ù_to_°rög
(&
ùbuf
, &
mu…
->
addr
),

225 ()(
mu…
->
vÆue
) / 65536.0);

226 
mu…
 = mu…->
√xt
;

229 
	`abuf_puts
(
out
, "}\n");

230 
	}
}

232 
	$ﬁ§d_wrôe_˙f_autobuf
(
autobuf
 *
out
, 
ﬁ§d_c⁄fig
 *
˙f
) {

233 
ù_¥efix_li°
 *
h«
 = 
˙f
->
h«_íåõs
;

234 
ﬁ§_if
 *
öãrf
 = 
˙f
->
öãrÁ˚s
;

235 
∂ugö_íåy
 *
∂ugös
 = 
˙f
->plugins;

236 
∂ugö_∑øm
 *
∂_∑øm
;

237 
ù_¥efix_li°
 *
ùc_√ts
 = 
˙f
->ipc_nets;

239 
ùaddr_°r
 
ùbuf
;

240 
boﬁ
 
fú°
;

242 
	`abuf_≠≥ndf
(
out
, "#\n"

247 
ﬁ§d_vîsi⁄
, 
PARSER_VERSION
);

248 
	`abuf_puts
(
out
,

268 
	`abuf_≠≥ndf
(
out
, "%sDebugLevel %d\n",

269 
˙f
->
debug_Àvñ
 =
DEF_DEBUGLVL
 ? "# " : "",

270 
˙f
->
debug_Àvñ
);

271 
	`abuf_puts
(
out
,

276 
	`abuf_≠≥ndf
(
out
, "%sIpVersion %d\n",

277 
˙f
->
ù_vîsi⁄
 =
DEF_IP_VERSION
 ? "# " : "",

278 
˙f
->
ù_vîsi⁄
 =
AF_INET
 ? 4 : 6);

279 
	`abuf_puts
(
out
,

290 
	`abuf_≠≥ndf
(
out
, "%sClearScreen %s\n",

291 
˙f
->
˛ór_s¸ìn
 =
DEF_CLEAR_SCREEN
 ? "# " : "",

292 
˙f
->
˛ór_s¸ìn
 ? "yes" : "no");

293 
	`abuf_puts
(
out
,

300 
	`abuf_≠≥ndf
(
out
, "%sAllowNoInt %s\n",

301 
˙f
->
Ælow_no_öãrÁ˚s
 =
DEF_ALLOW_NO_INTS
 ? "# " : "",

302 
˙f
->
Ælow_no_öãrÁ˚s
 ? "yes" : "no");

303 
	`abuf_puts
(
out
,

311 
	`abuf_≠≥ndf
(
out
, "%sLockFile \"%s\"\n",

312 
˙f
->
lock_fûe
 =
NULL
 ? "# " : "",

313 
˙f
->
lock_fûe
 ? cnf->lock_file : "lockfile");

314 
	`abuf_puts
(
out
,

319 
	`abuf_≠≥ndf
(
out
, "%sPollrate %.2f\n",

320 
˙f
->
pﬁÃ©e
 =
DEF_POLLRATE
 ? "# " : "",

321 
˙f
->
pﬁÃ©e
);

322 
	`abuf_puts
(
out
,

328 
	`abuf_≠≥ndf
(
out
, "%sNicChgsPollInt %.1f\n",

329 
˙f
->
nic_chgs_pﬁÃ©e
 =
DEF_NICCHGPOLLRT
 ? "# " : "",

330 
˙f
->
nic_chgs_pﬁÃ©e
);

331 
	`abuf_puts
(
out
,

336 
	`abuf_≠≥ndf
(
out
, "%sTosValue %u\n",

337 
˙f
->
tos
 =
DEF_TOS
 ? "# " : "",

338 
˙f
->
tos
);

339 
	`abuf_puts
(
out
,

349 
	`abuf_≠≥ndf
(
out
, "%sFIBMetric \"%s\"\n",

350 
˙f
->
fib_mëric
 =
DEF_FIB_METRIC
 ? "# " : "",

351 
FIB_METRIC_TXT
[
˙f
->
fib_mëric
]);

352 
	`abuf_puts
(
out
,

365 
	`abuf_≠≥ndf
(
out
, "%sSrcIpRoutes %s\n",

366 
˙f
->
u£_§c_ù_rouãs
 =
DEF_USE_SRCIP_ROUTES
 ? "# " : "",

367 
˙f
->
u£_§c_ù_rouãs
 ? "yes" : "no");

368 
	`abuf_puts
(
out
,

381 
	`abuf_≠≥ndf
(
out
, "%sRtProto %u\n",

382 
˙f
->
π_¥Ÿo
 =
DEF_RTPROTO
 ? "# " : "",

383 
˙f
->
π_¥Ÿo
);

384 
	`abuf_puts
(
out
,

394 
	`abuf_≠≥ndf
(
out
, "RtTable %u\n",

395 
˙f
->
π_èbÀ
);

396 
	`abuf_≠≥ndf
(
out
, "RtTableDefault %u\n",

397 
˙f
->
π_èbÀ_deÁu…
);

398 
	`abuf_≠≥ndf
(
out
, "RtTableTunnel %u\n",

399 
˙f
->
π_èbÀ_tu¬ñ
);

400 
	`abuf_puts
(
out
,

413 
	`abuf_≠≥ndf
(
out
, "RtTablePriority %u\n",

414 
˙f
->
π_èbÀ_¥i
);

415 
	`abuf_≠≥ndf
(
out
, "RtTableDefaultOlsrPriority %u\n",

416 
˙f
->
π_èbÀ_deÁu…_¥i
);

417 
	`abuf_≠≥ndf
(
out
, "RtTableTunnelPriority %u\n",

418 
˙f
->
π_èbÀ_tu¬ñ_¥i
);

419 
	`abuf_≠≥ndf
(
out
, "RtTableDefaultPriority %u\n",

420 
˙f
->
π_èbÀ_deÁu…ﬁ§_¥i
);

421 
	`abuf_puts
(
out
,

427 
	`abuf_≠≥ndf
(
out
, "%sUseNiit %s\n",

428 
˙f
->
u£_niô
 =
DEF_USE_NIIT
 ? "# " : "",

429 
˙f
->
u£_niô
 ? "yes" : "no");

430 
	`abuf_puts
(
out
,

436 
	`abuf_≠≥ndf
(
out
, "%sSmartGateway %s\n",

437 
˙f
->
sm¨t_gw_a˘ive
 =
DEF_SMART_GW
 ? "# " : "",

438 
˙f
->
sm¨t_gw_a˘ive
 ? "yes" : "no");

439 
	`abuf_puts
(
out
,

444 
	`abuf_≠≥ndf
(
out
, "%sSmartGatewayAllowNAT %s\n",

445 
˙f
->
sm¨t_gw_Ælow_«t
 =
DEF_GW_ALLOW_NAT
 ? "# " : "",

446 
˙f
->
sm¨t_gw_Ælow_«t
 ? "yes" : "no");

447 
	`abuf_puts
(
out
,

453 
	`abuf_≠≥ndf
(
out
, "%sSmartGatewayPeriod %d\n",

454 
˙f
->
sm¨t_gw_≥riod
 =
DEF_GW_PERIOD
 ? "# " : "",

455 
˙f
->
sm¨t_gw_≥riod
);

456 
	`abuf_puts
(
out
,

462 
	`abuf_≠≥ndf
(
out
, "%sSmartGatewayStableCount %d\n",

463 
˙f
->
sm¨t_gw_°abÀcou¡
 =
DEF_GW_STABLE_COUNT
 ? "# " : "",

464 
˙f
->
sm¨t_gw_°abÀcou¡
);

465 
	`abuf_puts
(
out
,

472 
	`abuf_≠≥ndf
(
out
, "%sSmartGatewayThreshold %d\n",

473 
˙f
->
sm¨t_gw_thªsh
 =
DEF_GW_THRESH
 ? "# " : "",

474 
˙f
->
sm¨t_gw_thªsh
);

475 
	`abuf_puts
(
out
,

483 
	`abuf_≠≥ndf
(
out
, "%sSmartGatewayUplink \"%s\"\n",

484 
˙f
->
sm¨t_gw_ty≥
 =
DEF_GW_TYPE
 ? "# " : "",

485 
GW_UPLINK_TXT
[
˙f
->
sm¨t_gw_ty≥
]);

486 
	`abuf_puts
(
out
,

491 
	`abuf_≠≥ndf
(
out
, "%sSmartGatewayUplinkNAT %s\n",

492 
˙f
->
sm¨t_gw_u∂ök_«t
 =
DEF_GW_UPLINK_NAT
 ? "# " : "",

493 
˙f
->
sm¨t_gw_u∂ök_«t
 ? "yes" : "no");

494 
	`abuf_puts
(
out
,

500 
	`abuf_≠≥ndf
(
out
, "%sSmartGatewaySpeed %d %d\n",

501 
˙f
->
sm¨t_gw_u∂ök
 =
DEF_UPLINK_SPEED
 && cnf->
sm¨t_gw_dow∆ök
 =
DEF_DOWNLINK_SPEED
 ? "# " : "",

502 
˙f
->
sm¨t_gw_u∂ök
, cnf->
sm¨t_gw_dow∆ök
);

503 
	`abuf_puts
(
out
,

509 
	`abuf_≠≥ndf
(
out
, "%sSmartGatewayPrefix %s\n",

510 
˙f
->
sm¨t_gw_¥efix
.
¥efix_Àn
 == 0 ? "# " : "",

511 
	`ﬁ§_ù_¥efix_to_°rög
(&
˙f
->
sm¨t_gw_¥efix
));

512 
	`abuf_puts
(
out
,

525 
	`abuf_≠≥ndf
(
out
, "%sOlsrPort %u\n",

526 
˙f
->
ﬁ§p‹t
 =
DEF_OLSRPORT
 ? "# " : "",

527 
˙f
->
ﬁ§p‹t
);

528 
	`abuf_puts
(
out
,

534 
	`abuf_≠≥ndf
(
out
, "MainIp %s\n",

535 
	`ﬁ§_ù_to_°rög
(&
ùbuf
, &
˙f
->
maö_addr
));

536 
	`abuf_puts
(
out
,

543 
	`abuf_≠≥ndf
(
out
, "%sWillingness %u\n",

544 
˙f
->
wûlög√ss
 =
DEF_WILLINGNESS
 ? "# " : "",

545 
˙f
->
wûlög√ss
);

546 
	`abuf_puts
(
out
,

554 
	`abuf_≠≥ndf
(
out
, "Hna%u\n"

556 
˙f
->
ù_vîsi⁄
 =
AF_INET
 ? 4 : 6);

557 
h«
) {

558 
ùaddr_°r
 
°rbuf
;

559 
	`abuf_≠≥ndf
(
out
, " %s\n", 
	`ﬁ§_ù_¥efix_to_°rög
(&
h«
->
√t
));

560 
h«
 = h«->
√xt
;

562 
	`abuf_puts
(
out
,

570 
	`abuf_≠≥ndf
(
out
, "%sUseHysteresis %s\n",

571 
˙f
->
u£_hy°îesis
 =
DEF_USE_HYST
 ? "# " : "",

572 
˙f
->
u£_hy°îesis
 ? "yes" : "no");

573 
	`abuf_puts
(
out
,

582 
	`abuf_≠≥ndf
(
out
, "%sHystScaling %.2f\n",

583 
˙f
->
hy°îesis_∑øm
.
sˇlög
 =
HYST_SCALING
 ? "# " : "",

584 
˙f
->
hy°îesis_∑øm
.
sˇlög
);

585 
	`abuf_≠≥ndf
(
out
, "%sHystThrHigh %.2f\n",

586 
˙f
->
hy°îesis_∑øm
.
thr_high
 =
HYST_THRESHOLD_HIGH
 ? "# " : "",

587 
˙f
->
hy°îesis_∑øm
.
thr_high
);

588 
	`abuf_≠≥ndf
(
out
, "%sHystThrLow %.2f\n",

589 
˙f
->
hy°îesis_∑øm
.
thr_low
 =
HYST_THRESHOLD_LOW
 ? "# " : "",

590 
˙f
->
hy°îesis_∑øm
.
thr_low
);

591 
	`abuf_puts
(
out
,

600 
	`abuf_≠≥ndf
(
out
, "%sTcRedundancy %d\n",

601 
˙f
->
tc_ªdund™cy
 =
TC_REDUNDANCY
 ? "# " : "",

602 
˙f
->
tc_ªdund™cy
);

603 
	`abuf_puts
(
out
,

611 
	`abuf_≠≥ndf
(
out
, "%sMprCoverage %d\n",

612 
˙f
->
m¥_covîage
 =
MPR_COVERAGE
 ? "# " : "",

613 
˙f
->
m¥_covîage
);

614 
	`abuf_puts
(
out
,

628 
	`abuf_≠≥ndf
(
out
, "%sLinkQualityLevel %d\n",

629 
˙f
->
lq_Àvñ
 =
DEF_LQ_LEVEL
 ? "# " : "",

630 
˙f
->
lq_Àvñ
);

631 
	`abuf_puts
(
out
,

643 
	`abuf_≠≥ndf
(
out
, "%sLinkQualityAlgorithm \"%s\"\n",

644 
˙f
->
lq_Æg‹ôhm
 =
NULL
 ? "# " : "",

645 
˙f
->
lq_Æg‹ôhm
 =
NULL
 ? 
DEF_LQ_ALGORITHM
 : cnf->lq_algorithm);

646 
	`abuf_puts
(
out
,

654 
	`abuf_≠≥ndf
(
out
, "%sLinkQualityAging %.2f\n",

655 
˙f
->
lq_agög
 =
DEF_LQ_AGING
 ? "# " : "",

656 
˙f
->
lq_agög
);

657 
	`abuf_puts
(
out
,

662 
	`abuf_≠≥ndf
(
out
, "%sLinkQualityFishEye %d\n",

663 
˙f
->
lq_fish
 =
DEF_LQ_FISH
 ? "# " : "",

664 
˙f
->
lq_fish
);

665 
	`abuf_puts
(
out
,

681 
	`abuf_≠≥ndf
(
out
, "%sNatThreshold %.1f\n",

682 
˙f
->
lq_«t_thªsh
 =
DEF_LQ_NAT_THRESH
 ? "# " : "",

683 
˙f
->
lq_«t_thªsh
);

685 
	`abuf_puts
(
out
,

697 
	`abuf_≠≥ndf
(
out
, " %sMaxConnections %d\n",

698 
˙f
->
ùc_c⁄√˘i⁄s
 =
DEF_IPC_CONNECTIONS
 ? "# " : "",

699 
˙f
->
ùc_c⁄√˘i⁄s
);

700 
	`abuf_puts
(
out
,

707 
ùc_√ts
) {

708 i‡(
ùc_√ts
->
√t
.
¥efix_Àn
 =
ﬁ§_˙f
->
max∂í
) {

709 
	`abuf_≠≥ndf
(
out
, " Ho° %s\n", 
	`ﬁ§_ù_to_°rög
(&
ùbuf
, &
ùc_√ts
->
√t
.
¥efix
));

711 
	`abuf_≠≥ndf
(
out
, " Në %s\n", 
	`ﬁ§_ù_¥efix_to_°rög
(&
ùc_√ts
->
√t
));

713 
ùc_√ts
 = ipc_√ts->
√xt
;

715 
	`abuf_puts
(
out
,

730 
∂ugös
) {

731 
	`abuf_≠≥ndf
(
out
, "LﬂdPlugö \"%s\" {\n", 
∂ugös
->
«me
);

732 
∂_∑øm
 = 
∂ugös
->
∑øms
;

733 
∂_∑øm
) {

734 
	`abuf_≠≥ndf
(
out
, " PlP¨am \"%s\"\t\"%s\"\n", 
∂_∑øm
->
key
,Öl_∑øm->
vÆue
);

735 
∂_∑øm
 =Öl_∑øm->
√xt
;

737 
	`abuf_puts
(
out
, "}\n"

739 
∂ugös
 =Ölugös->
√xt
;

742 
	`abuf_puts
(
out
,

751 
	`ﬁ§d_wrôe_if_autobuf
(
out
, 
˙f
->
öãrÁ˚_deÁu…s
, 
Ál£
);

752 
	`abuf_puts
(
out
,

760 
fú°
 = 
åue
;

761 
öãrf
) {

762 
	`abuf_≠≥ndf
(
out
, "I¡îÁ˚ \"%s\"\n", 
öãrf
->
«me
);

763 
	`ﬁ§d_wrôe_if_autobuf
(
out
, 
öãrf
->
˙f
, 
fú°
);

765 
fú°
 = 
Ál£
;

766 
öãrf
 = i¡îf->
√xt
;

769 
	`abuf_puts
(
out
,

772 
	}
}

	@src/cfgparser/olsrd_conf.c

42 
	~"ﬁ§d_c⁄f.h
"

43 
	~"ùˇlc.h
"

44 
	~"ﬁ§_cfg.h
"

45 
	~"defs.h
"

46 
	~"√t_ﬁ§.h
"

47 
	~"ﬁ§.h
"

49 
	~<as£π.h
>

50 
	~<°dio.h
>

51 
	~<°rög.h
>

52 
	~<î∫o.h
>

53 
	~<°dlib.h
>

54 
	~<sys/ty≥s.h
>

55 
	~<sys/sockë.h
>

56 
	~<√töë/ö.h
>

57 
	~<¨∑/öë.h
>

58 #ifde‡
löux


59 
	~<löux/ty≥s.h
>

60 
	~<löux/π√éök.h
>

61 
	~<löux/vîsi⁄.h
>

64 
FILE
 *
yyö
;

65 
yy∑r£
();

67 
	göãrÁ˚_deÁu…s_«me
[] = "[InterfaceDefaults]";

69 c⁄° *
	gFIB_METRIC_TXT
[] = {

75 c⁄° *
	gGW_UPLINK_TXT
[] = {

82 c⁄° *
	gOLSR_IF_MODE
[] = {

87 
	gc›yright_°rög
[] 
__©åibuã__
 ((
unu£d
)) =

90 
	gcuºít_löe
;

93 
FILE
 *
	gdebug_h™dÀ
;

94 
ﬁ§d_c⁄fig
 *
	gﬁ§_˙f
;

96 #ifde‡
MAKEBIN


100 
	$maö
(
¨gc
, *
¨gv
[])

102 
ﬁ§d_c⁄fig
 *
˙f
;

104 i‡(
¨gc
 == 1) {

105 
	`Ârötf
(
°dîr
, "Usage: olsrd_cfgparser [filename] -print\n\n");

106 
	`exô
(
EXIT_FAILURE
);

109 i‡((
˙f
 = 
	`ﬁ§d_∑r£_˙f
(
¨gv
[1])) == 0) {

110 i‡((
¨gc
 > 2Ë&& (!
	`°rcmp
(
¨gv
[2], "-print"))) {

111 
	`ﬁ§d_¥öt_˙f
(
˙f
);

112 
	`ﬁ§d_wrôe_˙f
(
˙f
, "./out.conf");

114 
	`¥ötf
("Use -printÅo viewÖarsed values\n");

115 
	`¥ötf
("ConfigfileÖarsed OK\n");

117 
	`¥ötf
("FaûedÖ¨sög \"%s\"\n", 
¨gv
[1]);

121 
	}
}

130 
	$ﬁ§d_∑r£_˙f
(c⁄° *
fûíame
)

132 
ﬁ§_if
 *
ö
, *
√w_ifqueue
;

133 
rc
;

135 
	`Ârötf
(
°dîr
, "P¨sög fûe: \"%s\"\n", 
fûíame
);

137 
yyö
 = 
	`f›í
(
fûíame
, "r");

138 i‡(
yyö
 =
NULL
) {

139 
	`Ârötf
(
°dîr
, "C™nŸ o≥¿c⁄figuøti⁄ fûê'%s': %s.\n", 
fûíame
, 
	`°ªº‹
(
î∫o
));

143 
cuºít_löe
 = 1;

144 
rc
 = 
	`yy∑r£
();

145 
	`f˛o£
(
yyö
);

146 i‡(
rc
 != 0) {

151 
ö
 = 
ﬁ§_˙f
->
öãrÁ˚s
;

152 
√w_ifqueue
 = 
NULL
;

154 
ö
) {

155 
ﬁ§_if
 *
ö_tmp
 = 
ö
;

156 
ö
 = in->
√xt
;

158 
ö_tmp
->
√xt
 = 
√w_ifqueue
;

159 
√w_ifqueue
 = 
ö_tmp
;

162 
ﬁ§_˙f
->
öãrÁ˚s
 = 
√w_ifqueue
;

164 
ö
 = 
ﬁ§_˙f
->
öãrÁ˚s
; i¿!
NULL
; i¿ö->
√xt
) {

166 
ö
->
c⁄figuªd
 = 
Ál£
;

167 
ö
->
öãrf
 = 
NULL
;

168 
ö
->
ho°_emul
 = 
Ál£
;

171 
	}
}

175 
	$ﬁ§d_¥öt_öãrÁ˚_˙f
(
if_c⁄fig_›ti⁄s
 *
˙f
, if_c⁄fig_›ti⁄†*
˙fi
, 
boﬁ
 
def˙f
)

177 
ﬁ§_lq_mu…
 *
mu…
;

178 
lq_mu…_˙t
 = 0;

179 
ùv6_buf
[
INET6_ADDRSTRLEN
];

181 i‡(
˙f
->
ùv4_mu…iˇ°
.
v4
.
s_addr
) {

182 
	`¥ötf
("\tIPv4 brﬂdˇ°/mu…iˇ° : %s%s\n", 
	`öë_¡ﬂ
(
˙f
->
ùv4_mu…iˇ°
.
v4
),
	`DEFAULT_STR
(ùv4_mu…iˇ°.v4.
s_addr
));

184 
	`¥ötf
("\tIPv4 brﬂdˇ°/mu…iˇ° : AUTO%s\n",
	`DEFAULT_STR
(
ùv4_mu…iˇ°
.
v4
.
s_addr
));

187 i‡(
˙f
->
mode
==
IF_MODE_ETHER
){

188 
	`¥ötf
("\tModê :Éthî%s\n",
	`DEFAULT_STR
(
mode
));

190 
	`¥ötf
("\tModê : mesh%s\n",
	`DEFAULT_STR
(
mode
));

193 
	`¥ötf
("\tIPv6 mu…iˇ° : %s%s\n", 
	`öë_¡›
(
AF_INET6
, &
˙f
->
ùv6_mu…iˇ°
.
v6
, 
ùv6_buf
, (ùv6_buf)),
	`DEFAULT_STR
(ipv6_multicast.v6));

195 
	`¥ötf
("\tHELLOÉmissi⁄/vÆidôy : %0.2f%s/%0.2f%s\n", 
˙f
->
hñlo_∑øms
.
emissi⁄_öãrvÆ
, 
	`DEFAULT_STR
(hello_params.emission_interval),

196 
˙f
->
hñlo_∑øms
.
vÆidôy_time
,
	`DEFAULT_STR
(hello_params.validity_time));

197 
	`¥ötf
("\tTCÉmissi⁄/vÆidôy : %0.2f%s/%0.2f%s\n", 
˙f
->
tc_∑øms
.
emissi⁄_öãrvÆ
, 
	`DEFAULT_STR
(tc_params.emission_interval),

198 
˙f
->
tc_∑øms
.
vÆidôy_time
,
	`DEFAULT_STR
(tc_params.validity_time));

199 
	`¥ötf
("\tMIDÉmissi⁄/vÆidôy : %0.2f%s/%0.2f%s\n", 
˙f
->
mid_∑øms
.
emissi⁄_öãrvÆ
, 
	`DEFAULT_STR
(mid_params.emission_interval),

200 
˙f
->
mid_∑øms
.
vÆidôy_time
,
	`DEFAULT_STR
(mid_params.validity_time));

201 
	`¥ötf
("\tHNAÉmissi⁄/vÆidôy : %0.2f%s/%0.2f%s\n", 
˙f
->
h«_∑øms
.
emissi⁄_öãrvÆ
, 
	`DEFAULT_STR
(hna_params.emission_interval),

202 
˙f
->
h«_∑øms
.
vÆidôy_time
,
	`DEFAULT_STR
(hna_params.validity_time));

204 
mu…
 = 
˙f
->
lq_mu…
; mu… !
NULL
; mu… = mu…->
√xt
) {

205 
lq_mu…_˙t
++;

206 
	`¥ötf
("\tLökQuÆôyMu… : %†%0.2‡%s\n", 
	`öë_¡›
(
ﬁ§_˙f
->
ù_vîsi⁄
, &
mu…
->
addr
, 
ùv6_buf
, (ipv6_buf)),

207 ()(
mu…
->
vÆue
Ë/ 65536.0, ((
lq_mu…_˙t
 > 
˙f
->
‹ig_lq_mu…_˙t
)?" (d)":""));

210 
	`¥ötf
("\tAutodëe˘ ch™ge† : %s%s\n", 
˙f
->
autodëe˘_chg
 ? "yes" : "no",
	`DEFAULT_STR
(autodetect_chg));

211 
	}
}

213 #ifde‡
löux


214 
	$ﬁ§d_ßnôy_check_πpﬁicy
(
ﬁ§d_c⁄fig
 *
˙f
) {

215 
¥io
;

218 i‡(!
˙f
->
sm¨t_gw_a˘ive
) {

220 i‡(
˙f
->
π_èbÀ
 =
DEF_RT_AUTO
) {

221 
˙f
->
π_èbÀ
 = 254;

223 i‡(
˙f
->
π_èbÀ_deÁu…
 =
DEF_RT_AUTO
) {

224 
˙f
->
π_èbÀ_deÁu…
 = cnf->
π_èbÀ
;

226 i‡(
˙f
->
π_èbÀ_tu¬ñ
 !
DEF_RT_AUTO
) {

227 
	`Ârötf
(
°dîr
, "Warning, settingáÅable forÅunnels without SmartGW doesÇot make sense.\n");

229 
˙f
->
π_èbÀ_tu¬ñ
 = cnf->
π_èbÀ_deÁu…
;

232 i‡(
˙f
->
π_èbÀ_¥i
 =
DEF_RT_AUTO
) {

233 
˙f
->
π_èbÀ_¥i
 = 
DEF_RT_NONE
;

235 i‡(
˙f
->
π_èbÀ_deÁu…ﬁ§_¥i
 =
DEF_RT_AUTO
) {

236 
˙f
->
π_èbÀ_deÁu…ﬁ§_¥i
 = 
DEF_RT_NONE
;

238 i‡(
˙f
->
π_èbÀ_tu¬ñ_¥i
 =
DEF_RT_AUTO
) {

239 
˙f
->
π_èbÀ_tu¬ñ_¥i
 = 
DEF_RT_NONE
;

241 i‡(
˙f
->
π_èbÀ_deÁu…_¥i
 =
DEF_RT_AUTO
) {

242 
˙f
->
π_èbÀ_deÁu…_¥i
 = 
DEF_RT_NONE
;

247 i‡(
˙f
->
π_èbÀ
 =
DEF_RT_AUTO
) {

248 
˙f
->
π_èbÀ
 = 254;

250 i‡(
˙f
->
π_èbÀ_deÁu…
 =
DEF_RT_AUTO
) {

251 
˙f
->
π_èbÀ_deÁu…
 = 223;

253 i‡(
˙f
->
π_èbÀ_tu¬ñ
 =
DEF_RT_AUTO
) {

254 
˙f
->
π_èbÀ_tu¬ñ
 = 224;

258 
¥io
 = 32766;

259 i‡(
˙f
->
π_èbÀ_¥i
 > 0) {

260 
¥io
 = 
˙f
->
π_èbÀ_¥i
;

262 i‡(
˙f
->
π_èbÀ_¥i
 =
DEF_RT_AUTO
) {

264 
ﬁ§_˙f
->
π_èbÀ_¥i
 = 
DEF_RT_NONE
;

265 
	`Ârötf
(
°dîr
, "NoÖolicyÑule forÑt_table_pri\n");

269 
¥io
 += 10;

270 i‡(
˙f
->
π_èbÀ_deÁu…ﬁ§_¥i
 > 0) {

271 
¥io
 = 
˙f
->
π_èbÀ_deÁu…ﬁ§_¥i
;

273 i‡(
˙f
->
π_èbÀ_deÁu…ﬁ§_¥i
 =
DEF_RT_AUTO
) {

274 
ﬁ§_˙f
->
π_èbÀ_deÁu…ﬁ§_¥i
 = 
¥io
;

275 
	`Ârötf
(
°dîr
, "Choo£Öri‹ôy %u f‹Ñt_èbÀ_deÁu…ﬁ§_¥i\n", 
¥io
);

278 
¥io
 += 10;

279 i‡(
˙f
->
π_èbÀ_tu¬ñ_¥i
 > 0) {

280 
¥io
 = 
˙f
->
π_èbÀ_tu¬ñ_¥i
;

282 i‡(
˙f
->
π_èbÀ_tu¬ñ_¥i
 =
DEF_RT_AUTO
) {

283 
ﬁ§_˙f
->
π_èbÀ_tu¬ñ_¥i
 = 
¥io
;

284 
	`Ârötf
(
°dîr
, "Choo£Öri‹ôy %u f‹Ñt_èbÀ_tu¬ñ_¥i\n", 
¥io
);

287 
¥io
 += 10;

288 i‡(
˙f
->
π_èbÀ_deÁu…_¥i
 =
DEF_RT_AUTO
) {

289 
ﬁ§_˙f
->
π_èbÀ_deÁu…_¥i
 = 
¥io
;

290 
	`Ârötf
(
°dîr
, "Choo£Öri‹ôy %u f‹Ñt_èbÀ_deÁu…_¥i\n", 
¥io
);

295 i‡(
˙f
->
π_èbÀ_¥i
 > 0) {

296 i‡(
˙f
->
π_èbÀ
 >= 253) {

297 
	`Ârötf
(
°dîr
, "πèbÀ %d d€†nŸÇìdÖﬁicyÑuÀ†‰om OLSRd\n", 
˙f
->
π_èbÀ
);

302 
¥io
 = 
˙f
->
π_èbÀ_¥i
;

303 i‡(
˙f
->
π_èbÀ_deÁu…ﬁ§_¥i
 > 0) {

304 i‡(
¥io
 >
˙f
->
π_èbÀ_deÁu…ﬁ§_¥i
) {

305 
	`Ârötf
(
°dîr
, "πèbÀ_deÁu…ﬁ§Öri‹ôy mu° bêgª©îÅh™ %d\n", 
¥io
);

308 i‡(
˙f
->
π_èbÀ_deÁu…
 >= 253) {

309 
	`Ârötf
(
°dîr
, "πèbÀ %d d€†nŸÇìdÖﬁicyÑuÀ†‰om OLSRd\n", 
˙f
->
π_èbÀ_deÁu…
);

312 
¥io
 = 
ﬁ§_˙f
->
π_èbÀ_deÁu…ﬁ§_¥i
;

315 i‡(
˙f
->
π_èbÀ_tu¬ñ_¥i
 > 0 ) {

316 i‡(
¥io
 >
˙f
->
π_èbÀ_tu¬ñ_¥i
) {

317 
	`Ârötf
(
°dîr
, "πèbÀ_tu¬ñÖri‹ôy mu° bêgª©îÅh™ %d\n", 
¥io
);

320 i‡(
˙f
->
π_èbÀ_tu¬ñ
 >= 253) {

321 
	`Ârötf
(
°dîr
, "πèbÀ %d d€†nŸÇìdÖﬁicyÑuÀ†‰om OLSRd\n", 
˙f
->
π_èbÀ_tu¬ñ
);

324 
¥io
 = 
˙f
->
π_èbÀ_tu¬ñ_¥i
;

327 i‡(
˙f
->
π_èbÀ_deÁu…_¥i
 > 0) {

328 i‡(
¥io
 >
˙f
->
π_èbÀ_deÁu…_¥i
) {

329 
	`Ârötf
(
°dîr
, "πèbÀ_deÁu…Öri‹ôy mu° bêgª©îÅh™ %d\n", 
¥io
);

332 i‡(
˙f
->
π_èbÀ_deÁu…
 >= 253) {

333 
	`Ârötf
(
°dîr
, "πèbÀ %d d€†nŸÇìdÖﬁicyÑuÀ†‰om OLSRd\n", 
˙f
->
π_èbÀ_deÁu…
);

339 i‡(
˙f
->
π_¥Ÿo
 == 1) {

341 
˙f
->
π_¥Ÿo
 = 0;

343 i‡(
˙f
->
π_¥Ÿo
 == 0) {

344 
˙f
->
π_¥Ÿo
 = 
RTPROT_BOOT
;

347 
	}
}

353 
	$ﬁ§d_ßnôy_check_öãrÁ˚_˙f
(
if_c⁄fig_›ti⁄s
 * 
io
, 
ﬁ§d_c⁄fig
 * 
˙f
, * 
«me
) {

354 
ﬁ§_lq_mu…
 *
mu…
;

358 i‡(
io
->
hñlo_∑øms
.
vÆidôy_time
 < 0.0) {

359 i‡(
˙f
->
lq_Àvñ
 == 0)

360 
io
->
hñlo_∑øms
.
vÆidôy_time
 = 
NEIGHB_HOLD_TIME
;

363 
io
->
hñlo_∑øms
.
vÆidôy_time
 = ()(
REFRESH_INTERVAL
 / 
˙f
->
lq_agög
);

366 i‡(
io
->
hñlo_∑øms
.
emissi⁄_öãrvÆ
 < 
˙f
->
pﬁÃ©e
 || io->hñlo_∑øms.emissi⁄_öãrvÆ > io->hñlo_∑øms.
vÆidôy_time
) {

367 
	`Ârötf
(
°dîr
, "Bad HELLOÖ¨amëîs! (em: %0.2f, vt: %0.2fËf‹ dev %s\n", 
io
->
hñlo_∑øms
.
emissi⁄_öãrvÆ
,

368 
io
->
hñlo_∑øms
.
vÆidôy_time
, 
«me
);

373 i‡(
io
->
tc_∑øms
.
emissi⁄_öãrvÆ
 < 
˙f
->
pﬁÃ©e
 || io->tc_∑øms.emissi⁄_öãrvÆ > io->tc_∑øms.
vÆidôy_time
) {

374 
	`Ârötf
(
°dîr
, "Bad TCÖ¨amëîs! (em: %0.2f, vt: %0.2fËf‹ dev %s\n", 
io
->
tc_∑øms
.
emissi⁄_öãrvÆ
,

375 
io
->
tc_∑øms
.
vÆidôy_time
, 
«me
);

379 i‡(
˙f
->
mö_tc_vtime
 > 0.0 && (
io
->
tc_∑øms
.
vÆidôy_time
 / io->tc_∑øms.
emissi⁄_öãrvÆ
) < 128) {

380 
	`Ârötf
(
°dîr
, "Please useáÅc vtimeátÜeast 128ÅimesÅheÉmission interval while usingÅhe min_tc_vtime hack.\n");

384 i‡(
io
->
mid_∑øms
.
emissi⁄_öãrvÆ
 < 
˙f
->
pﬁÃ©e
 || io->mid_∑øms.emissi⁄_öãrvÆ > io->mid_∑øms.
vÆidôy_time
) {

385 
	`Ârötf
(
°dîr
, "Bad MIDÖ¨amëîs! (em: %0.2f, vt: %0.2fËf‹ dev %s\n", 
io
->
mid_∑øms
.
emissi⁄_öãrvÆ
,

386 
io
->
mid_∑øms
.
vÆidôy_time
, 
«me
);

391 i‡(
io
->
h«_∑øms
.
emissi⁄_öãrvÆ
 < 
˙f
->
pﬁÃ©e
 || io->h«_∑øms.emissi⁄_öãrvÆ > io->h«_∑øms.
vÆidôy_time
) {

392 
	`Ârötf
(
°dîr
, "Bad HNAÖ¨amëîs! (em: %0.2f, vt: %0.2fËf‹ dev %s\n", 
io
->
h«_∑øms
.
emissi⁄_öãrvÆ
,

393 
io
->
h«_∑øms
.
vÆidôy_time
, 
«me
);

397 
mu…
 = 
io
->
lq_mu…
; mu…; mu…=mu…->
√xt
) {

398 i‡(
mu…
->
vÆue
 > 
LINK_LOSS_MULTIPLIER
) {

399 
ùaddr_°r
 
buf
;

401 
	`Ârötf
(
°dîr
, "Bad Linkquality multiplier ('%s' on IP %s: %0.2f)\n",

402 
«me
, 
	`ﬁ§_ù_to_°rög
(&
buf
, &
mu…
->
addr
), ()mu…->
vÆue
 / ()
LINK_LOSS_MULTIPLIER
);

407 
	}
}

411 
	$ﬁ§d_ßnôy_check_˙f
(
ﬁ§d_c⁄fig
 *
˙f
)

413 
ﬁ§_if
 *
ö
 = 
˙f
->
öãrÁ˚s
;

414 
if_c⁄fig_›ti⁄s
 *
io
;

417 i‡(
˙f
->
debug_Àvñ
 < 
MIN_DEBUGLVL
 || cnf->debug_Àvñ > 
MAX_DEBUGLVL
) {

418 
	`Ârötf
(
°dîr
, "DebugÀvñ %d i†nŸáŒowed\n", 
˙f
->
debug_Àvñ
);

423 i‡(
˙f
->
ù_vîsi⁄
 !
AF_INET
 && cnf->ù_vîsi⁄ !
AF_INET6
) {

424 
	`Ârötf
(
°dîr
, "Ipvîsi⁄ %dÇŸáŒowed!\n", 
˙f
->
ù_vîsi⁄
);

429 i‡(
˙f
->
tos
 > 
MAX_TOS
) {

430 
	`Ârötf
(
°dîr
, "TOS %d i†nŸáŒowed\n", 
˙f
->
tos
);

435 i‡(
˙f
->
tos
 & 0x03) {

436 
	`Ârötf
(
°dîr
, "TOS %d ha†£àECN bôs,ÇŸáŒowed\n", 
˙f
->
tos
);

440 i‡(
˙f
->
wûlög√ss_auto
 =
Ál£
 && (˙f->
wûlög√ss
 > 
MAX_WILLINGNESS
)) {

441 
	`Ârötf
(
°dîr
, "Wûlög√s†%d i†nŸáŒowed\n", 
˙f
->
wûlög√ss
);

446 i‡(
˙f
->
u£_hy°îesis
 =
åue
) {

447 i‡(
˙f
->
hy°îesis_∑øm
.
sˇlög
 < 
MIN_HYST_PARAM
 || cnf->hy°îesis_∑øm.sˇlög > 
MAX_HYST_PARAM
) {

448 
	`Ârötf
(
°dîr
, "Hy° sˇlög %0.2‡i†nŸáŒowed\n", 
˙f
->
hy°îesis_∑øm
.
sˇlög
);

452 i‡(
˙f
->
hy°îesis_∑øm
.
thr_high
 <˙f->hy°îesis_∑øm.
thr_low
) {

453 
	`Ârötf
(
°dîr
, "Hy° uµî(%0.2fËth∏mu° bêbiggîÅh™Üowî(%0.2fËthªshﬁd!\n", 
˙f
->
hy°îesis_∑øm
.
thr_high
,

454 
˙f
->
hy°îesis_∑øm
.
thr_low
);

458 i‡(
˙f
->
hy°îesis_∑øm
.
thr_high
 < 
MIN_HYST_PARAM
 || cnf->hy°îesis_∑øm.thr_high > 
MAX_HYST_PARAM
) {

459 
	`Ârötf
(
°dîr
, "Hy° uµîÅh∏%0.2‡i†nŸáŒowed\n", 
˙f
->
hy°îesis_∑øm
.
thr_high
);

463 i‡(
˙f
->
hy°îesis_∑øm
.
thr_low
 < 
MIN_HYST_PARAM
 || cnf->hy°îesis_∑øm.thr_low > 
MAX_HYST_PARAM
) {

464 
	`Ârötf
(
°dîr
, "Hy°ÜowîÅh∏%0.2‡i†nŸáŒowed\n", 
˙f
->
hy°îesis_∑øm
.
thr_low
);

470 i‡(
˙f
->
pﬁÃ©e
 < 
MIN_POLLRATE
 || cnf->pﬁÃ©ê> 
MAX_POLLRATE
) {

471 
	`Ârötf
(
°dîr
, "PﬁÃ©ê%0.2‡i†nŸáŒowed\n", 
˙f
->
pﬁÃ©e
);

477 i‡(
˙f
->
nic_chgs_pﬁÃ©e
 < 
MIN_NICCHGPOLLRT
 || cnf->nic_chgs_pﬁÃ©ê> 
MAX_NICCHGPOLLRT
) {

478 
	`Ârötf
(
°dîr
, "NIC Ch™ge†PﬁÃ©ê%0.2‡i†nŸáŒowed\n", 
˙f
->
nic_chgs_pﬁÃ©e
);

483 i‡(
˙f
->
tc_ªdund™cy
 != 2) {

484 
	`Ârötf
(
°dîr
, "Sorry,Åc-redundancy 0/1áreÇot working on 0.5.6. "

495 i‡(
˙f
->
m¥_covîage
 < 
MIN_MPR_COVERAGE
 || cnf->m¥_covîagê> 
MAX_MPR_COVERAGE
) {

496 
	`Ârötf
(
°dîr
, "MPR covîagê%d i†nŸáŒowed\n", 
˙f
->
m¥_covîage
);

501 i‡(
˙f
->
u£_hy°îesis
 =
åue
 && cnf->
lq_Àvñ
) {

502 
	`Ârötf
(
°dîr
, "Hysteresisánd LinkQuality cannot both beáctive! Deactivate one ofÅhem.\n");

507 i‡(
˙f
->
lq_Àvñ
 != 0 && cnf->lq_level != 2) {

508 
	`Ârötf
(
°dîr
, "LQÜevñ %d i†nŸáŒowed\n", 
˙f
->
lq_Àvñ
);

513 i‡(
˙f
->
lq_Àvñ
 && (˙f->
lq_agög
 < 
MIN_LQ_AGING
 || cnf->lq_agög > 
MAX_LQ_AGING
)) {

514 
	`Ârötf
(
°dîr
, "LQágög fa˘‹ %‡i†nŸáŒowed\n", 
˙f
->
lq_agög
);

519 i‡(
˙f
->
lq_Àvñ
 && (˙f->
lq_«t_thªsh
 < 0.1 || cnf->lq_nat_thresh > 1.0)) {

520 
	`Ârötf
(
°dîr
, "NATÅhªshﬁd %‡i†nŸáŒowed\n", 
˙f
->
lq_«t_thªsh
);

524 #i‡
deföed
 
löux


525 #i‡
LINUX_VERSION_CODE
 < 
	`KERNEL_VERSION
(2,6,24)

526 i‡(
˙f
->
ù_vîsi⁄
 =
AF_INET6
 && cnf->
sm¨t_gw_a˘ive
) {

527 
	`Ârötf
(
°dîr
, "Smart gatewaysáreÇot supported forÜinux kernel 2.4ánd ipv6\n");

533 i‡(
	`ﬁ§d_ßnôy_check_πpﬁicy
(
˙f
)) {

539 i‡(
ö
 =
NULL
) {

540 
	`Ârötf
(
°dîr
, "No interfaces configured!\n");

544 i‡(
˙f
->
mö_tc_vtime
 < 0.0) {

545 
	`Ârötf
(
°dîr
, "Error,Çegative minimalÅcÅimeÇotállowed.\n");

548 i‡(
˙f
->
mö_tc_vtime
 > 0.0) {

549 
	`Ârötf
(
°dîr
, "Warning, youáre usingÅhe min_tc_vtime hack. We hope you know what youáre doing... contact olsr.org otherwise.\n");

552 i‡(
˙f
->
sm¨t_gw_≥riod
 < 
MIN_SMARTGW_PERIOD
 || cnf->sm¨t_gw_≥riod > 
MAX_SMARTGW_PERIOD
) {

553 
	`Ârötf
(
°dîr
, "Error, bad gatewayÖeriod: %d msec (should be %d-%d)\n",

554 
˙f
->
sm¨t_gw_≥riod
, 
MIN_SMARTGW_PERIOD
, 
MAX_SMARTGW_PERIOD
);

557 i‡(
˙f
->
sm¨t_gw_°abÀcou¡
 < 
MIN_SMARTGW_STABLE
 || cnf->sm¨t_gw_°abÀcou¡ > 
MAX_SMARTGW_STABLE
) {

558 
	`Ârötf
(
°dîr
, "Error, bad gateway stable count: %d (should be %d-%d)\n",

559 
˙f
->
sm¨t_gw_°abÀcou¡
, 
MIN_SMARTGW_STABLE
, 
MAX_SMARTGW_STABLE
);

562 i‡(((
˙f
->
sm¨t_gw_thªsh
 < 
MIN_SMARTGW_THRES
Ë|| (˙f->sm¨t_gw_thªsh > 
MAX_SMARTGW_THRES
)) && (cnf->smart_gw_thresh != 0)) {

563 
	`Ârötf
(
°dîr
, "Sm¨àg©ewayÅhªshﬁd %d i†nŸáŒowed (should bê%d-%d)\n", 
˙f
->
sm¨t_gw_thªsh
,

564 
MIN_SMARTGW_THRES
, 
MAX_SMARTGW_THRES
);

568 i‡(
˙f
->
sm¨t_gw_ty≥
 >
GW_UPLINK_CNT
) {

569 
	`Ârötf
(
°dîr
, "Eº‹, iŒegÆ g©eway u∂ökÅy≥: %d\n", 
˙f
->
sm¨t_gw_ty≥
);

572 i‡(
˙f
->
sm¨t_gw_dow∆ök
 < 
MIN_SMARTGW_SPEED
 || cnf->sm¨t_gw_dow∆ök > 
MAX_SMARTGW_SPEED
) {

573 
	`Ârötf
(
°dîr
, "Error, bad gateway downlink speed: %d kbit/s (should be %d-%d)\n",

574 
˙f
->
sm¨t_gw_dow∆ök
, 
MIN_SMARTGW_SPEED
, 
MAX_SMARTGW_SPEED
);

577 i‡(
˙f
->
sm¨t_gw_u∂ök
 < 
MIN_SMARTGW_SPEED
 || cnf->sm¨t_gw_u∂ök > 
MAX_SMARTGW_SPEED
) {

578 
	`Ârötf
(
°dîr
, "Error, bad gateway uplink speed: %d kbit/s (should be %d-%d)\n",

579 
˙f
->
sm¨t_gw_u∂ök
, 
MIN_SMARTGW_SPEED
, 
MAX_SMARTGW_SPEED
);

583 i‡(
˙f
->
öãrÁ˚_deÁu…s
 =
NULL
) {

585 
˙f
->
öãrÁ˚_deÁu…s
 = 
	`gë_deÁu…_if_c⁄fig
();

587 
	`ﬁ§d_¥öt_öãrÁ˚_˙f
(
˙f
->
öãrÁ˚_deÁu…s
, cnf->öãrÁ˚_deÁu…s, 
Ál£
);

588 
	`ﬁ§d_ßnôy_check_öãrÁ˚_˙f
(
˙f
->
öãrÁ˚_deÁu…s
, cnf, 
öãrÁ˚_deÁu…s_«me
);

592 
ö
) {

593 
ﬁ§_lq_mu…
 *
mu…
, *
mu…_‹ig
;

595 
io
 = 
ö
->
˙f
;

597 
	`ﬁ§d_¥öt_öãrÁ˚_˙f
(
ö
->
˙f
, in->
˙fi
, 
Ál£
);

601 
size_t
 
pos
;

602 
ﬁ§_lq_mu…
 *
mu…_ãmp
, *
mu…_‹ig_wÆk
;

603 
uöt8_t
 *
˙Âå
 = (uöt8_t*)
ö
->
˙f
;

604 
uöt8_t
 *
˙fùå
 = (uöt8_t*)
ö
->
˙fi
;

605 
uöt8_t
 *
deÂå
 = (uöt8_t*)
˙f
->
öãrÁ˚_deÁu…s
;

608 
mu…_‹ig
 = 
io
->
lq_mu…
;

610 
	`as£π
(
ö
->
˙f
);

611 
	`as£π
(
ö
->
˙fi
);

612 
pos
 = 0;Öo†< (*
ö
->
˙f
);Öos++) {

613 i‡(
˙Âå
[
pos
] !
˙fùå
[pos]) {

614 
˙Âå
[
pos
] = 
deÂå
[pos]; 
˙fùå
[pos]=0x00;

616 
˙fùå
[
pos
]=0xFF;

619 
io
->
lq_mu…
=
NULL
;

621 
mu…
 = 
˙f
->
öãrÁ˚_deÁu…s
->
lq_mu…
; mu…; mu…=mu…->
√xt
) {

623 
mu…_‹ig_wÆk
 = 
mu…_‹ig
; mu…_‹ig_wÆk; mu…_‹ig_wÆk=mu…_‹ig_wÆk->
√xt
) {

624 i‡(
	`ùequÆ
(&
mu…_‹ig_wÆk
->
addr
,&
mu…
->addr)) {

628 i‡(
mu…_‹ig_wÆk
 =
NULL
) {

629 
mu…_ãmp
=
	`mÆloc
((
ﬁ§_lq_mu…
));

630 
	`mem˝y
(
mu…_ãmp
,
mu…
,(
ﬁ§_lq_mu…
));

631 
mu…_ãmp
->
√xt
=
io
->
lq_mu…
;

632 
io
->
lq_mu…
=
mu…_ãmp
;

637 i‡(
ö
->
«me
 =
NULL
 || !
	`°æí
(in->name)) {

638 
	`Ârötf
(
°dîr
, "Interface hasÇoÇame!\n");

642 i‡(
io
 =
NULL
) {

643 
	`Ârötf
(
°dîr
, "I¡îÁ˚ %†ha†nÿc⁄figuøti⁄!\n", 
ö
->
«me
);

648 i‡(
mu…_‹ig
!=
NULL
) {

649 
io
->
‹ig_lq_mu…_˙t
=1;

651 
mu…
 = 
mu…_‹ig
;

652 
mu…
->
√xt
!=
NULL
) {

653 
mu…
=mu…->
√xt
;

656 
mu…
->
√xt
=
io
->
lq_mu…
;

657 
io
->
lq_mu…
=
mu…_‹ig
;

660 i‡(
	`ﬁ§d_ßnôy_check_öãrÁ˚_˙f
(
io
, 
˙f
, 
ö
->
«me
))  -1;

662 
ö
 = in->
√xt
;

666 
	}
}

669 
	$ﬁ§d_‰ì_˙f
(
ﬁ§d_c⁄fig
 *
˙f
)

671 
ù_¥efix_li°
 *
hd
, *
h
 = 
˙f
->
h«_íåõs
;

672 
ﬁ§_if
 *
öd
, *
ö
 = 
˙f
->
öãrÁ˚s
;

673 
∂ugö_íåy
 *
≥d
, *
≥
 = 
˙f
->
∂ugös
;

674 
ﬁ§_lq_mu…
 *
mu…
, *
√xt_mu…
;

676 
h
) {

677 
hd
 = 
h
;

678 
h
 = h->
√xt
;

679 
	`‰ì
(
hd
);

682 
ö
) {

683 
mu…
 = 
ö
->
˙f
->
lq_mu…
; mu… !
NULL
; mu… = 
√xt_mu…
) {

684 
√xt_mu…
 = 
mu…
->
√xt
;

685 
	`‰ì
(
mu…
);

688 
	`‰ì
(
ö
->
˙f
);

689 
	`‰ì
(
ö
->
˙fi
);

691 
öd
 = 
ö
;

692 
ö
 = in->
√xt
;

694 
	`‰ì
(
öd
);

697 
≥
) {

698 
≥d
 = 
≥
;

699 
≥
 =Öe->
√xt
;

700 
	`‰ì
(
≥d
->
«me
);

701 
	`‰ì
(
≥d
);

705 
	}
}

707 
ﬁ§d_c⁄fig
 *

708 
	$ﬁ§d_gë_deÁu…_˙f
()

710 
ﬁ§d_c⁄fig
 *
c
 = 
	`mÆloc
((olsrd_config));

711 i‡(
c
 =
NULL
) {

712 
	`Ârötf
(
°dîr
, "Ouào‡mem‹y %s\n", 
__func__
);

713  
NULL
;

716 
	`£t_deÁu…_˙f
(
c
);

717  
c
;

718 
	}
}

721 
	$£t_deÁu…_˙f
(
ﬁ§d_c⁄fig
 *
˙f
)

723 
	`mem£t
(
˙f
, 0, (*cnf));

725 
˙f
->
debug_Àvñ
 = 
DEF_DEBUGLVL
;

726 
˙f
->
no_f‹k
 = 
Ál£
;

727 
˙f
->
ho°_emul
 = 
Ál£
;

728 
˙f
->
ù_vîsi⁄
 = 
AF_INET
;

729 
˙f
->
ùsize
 = (
ö_addr
);

730 
˙f
->
max∂í
 = 32;

731 
˙f
->
Ælow_no_öãrÁ˚s
 = 
DEF_ALLOW_NO_INTS
;

732 
˙f
->
tos
 = 
DEF_TOS
;

733 
˙f
->
ﬁ§p‹t
 = 
DEF_OLSRPORT
;

734 
˙f
->
π_¥Ÿo
 = 
DEF_RTPROTO
;

735 
˙f
->
π_èbÀ
 = 
DEF_RT_AUTO
;

736 
˙f
->
π_èbÀ_deÁu…
 = 
DEF_RT_AUTO
;

737 
˙f
->
π_èbÀ_tu¬ñ
 = 
DEF_RT_AUTO
;

738 
˙f
->
π_èbÀ_¥i
 = 
DEF_RT_AUTO
;

739 
˙f
->
π_èbÀ_deÁu…_¥i
 = 
DEF_RT_AUTO
;

740 
˙f
->
π_èbÀ_deÁu…ﬁ§_¥i
 = 
DEF_RT_AUTO
;

741 
˙f
->
π_èbÀ_tu¬ñ_¥i
 = 
DEF_RT_AUTO
;

743 
˙f
->
wûlög√ss_auto
 = 
DEF_WILL_AUTO
;

744 
˙f
->
wûlög√ss
 = 
DEF_WILLINGNESS
;

745 
˙f
->
ùc_c⁄√˘i⁄s
 = 
DEF_IPC_CONNECTIONS
;

746 
˙f
->
fib_mëric
 = 
DEF_FIB_METRIC
;

748 
˙f
->
u£_hy°îesis
 = 
DEF_USE_HYST
;

749 
˙f
->
hy°îesis_∑øm
.
sˇlög
 = 
HYST_SCALING
;

750 
˙f
->
hy°îesis_∑øm
.
thr_high
 = 
HYST_THRESHOLD_HIGH
;

751 
˙f
->
hy°îesis_∑øm
.
thr_low
 = 
HYST_THRESHOLD_LOW
;

753 
˙f
->
pﬁÃ©e
 = 
DEF_POLLRATE
;

754 
˙f
->
nic_chgs_pﬁÃ©e
 = 
DEF_NICCHGPOLLRT
;

756 
˙f
->
tc_ªdund™cy
 = 
TC_REDUNDANCY
;

757 
˙f
->
m¥_covîage
 = 
MPR_COVERAGE
;

758 
˙f
->
lq_Àvñ
 = 
DEF_LQ_LEVEL
;

759 
˙f
->
lq_fish
 = 
DEF_LQ_FISH
;

760 
˙f
->
lq_agög
 = 
DEF_LQ_AGING
;

761 
˙f
->
lq_Æg‹ôhm
 = 
NULL
;

762 
˙f
->
lq_«t_thªsh
 = 
DEF_LQ_NAT_THRESH
;

763 
˙f
->
˛ór_s¸ìn
 = 
DEF_CLEAR_SCREEN
;

765 
˙f
->
dñ_gws
 = 
Ál£
;

766 
˙f
->
wûl_öt
 = 10 * 
HELLO_INTERVAL
;

767 
˙f
->
max_jôãr
 = 0.0;

768 
˙f
->
exô_vÆue
 = 
EXIT_SUCCESS
;

769 
˙f
->
max_tc_vtime
 = 0.0;

770 
˙f
->
io˘l_s
 = 0;

771 
˙f
->
u£_niô
 = 
DEF_USE_NIIT
;

772 
˙f
->
niô4to6_if_ödex
 = 0;

773 
˙f
->
niô6to4_if_ödex
 = 0;

775 
˙f
->
sm¨t_gw_a˘ive
 = 
DEF_SMART_GW
;

776 
˙f
->
sm¨t_gw_Ælow_«t
 = 
DEF_GW_ALLOW_NAT
;

777 
˙f
->
sm¨t_gw_≥riod
 = 
DEF_GW_PERIOD
;

778 
˙f
->
sm¨t_gw_°abÀcou¡
 = 
DEF_GW_STABLE_COUNT
;

779 
˙f
->
sm¨t_gw_thªsh
 = 
DEF_GW_THRESH
;

780 
˙f
->
sm¨t_gw_ty≥
 = 
DEF_GW_TYPE
;

781 
˙f
->
sm¨t_gw_u∂ök
 = 
DEF_UPLINK_SPEED
;

782 
˙f
->
sm¨t_gw_u∂ök_«t
 = 
DEF_GW_UPLINK_NAT
;

783 
˙f
->
sm¨t_gw_dow∆ök
 = 
DEF_DOWNLINK_SPEED
;

785 
˙f
->
u£_§c_ù_rouãs
 = 
DEF_USE_SRCIP_ROUTES
;

786 
˙f
->
£t_ù_f‹w¨d
 = 
åue
;

788 #ifde‡
LINUX_NETLINK_ROUTING


789 
˙f
->
π∆_s
 = 0;

792 #i‡
deföed
 
__FªeBSD__
 || deföed 
__FªeBSD_kî√l__
 || deföed 
__MacOSX__
 || deföed 
__NëBSD__
 || deföed 
__O≥nBSD__


793 
˙f
->
πs
 = 0;

795 
	}
}

797 
if_c⁄fig_›ti⁄s
 *

798 
	$gë_deÁu…_if_c⁄fig
()

800 
if_c⁄fig_›ti⁄s
 *
io
 = 
	`mÆloc
((*io));

802 i‡(
io
 =
NULL
) {

803 
	`Ârötf
(
°dîr
, "Ouào‡mem‹y %s\n", 
__func__
);

804  
NULL
;

807 
	`mem£t
(
io
, 0, (*io));

809 
io
->
mode
 = 
DEF_IF_MODE
;

811 
io
->
ùv6_mu…iˇ°
 = 
ùv6_def_mu…iˇ°
;

813 
io
->
lq_mu…
 = 
NULL
;

815 
io
->
weight
.
fixed
 = 
Ál£
;

816 
io
->
weight
.
vÆue
 = 0;

818 
io
->
hñlo_∑øms
.
emissi⁄_öãrvÆ
 = 
HELLO_INTERVAL
;

819 
io
->
hñlo_∑øms
.
vÆidôy_time
 = 
NEIGHB_HOLD_TIME
;

820 
io
->
tc_∑øms
.
emissi⁄_öãrvÆ
 = 
TC_INTERVAL
;

821 
io
->
tc_∑øms
.
vÆidôy_time
 = 
TOP_HOLD_TIME
;

822 
io
->
mid_∑øms
.
emissi⁄_öãrvÆ
 = 
MID_INTERVAL
;

823 
io
->
mid_∑øms
.
vÆidôy_time
 = 
MID_HOLD_TIME
;

824 
io
->
h«_∑øms
.
emissi⁄_öãrvÆ
 = 
HNA_INTERVAL
;

825 
io
->
h«_∑øms
.
vÆidôy_time
 = 
HNA_HOLD_TIME
;

826 
io
->
autodëe˘_chg
 = 
åue
;

828  
io
;

830 
	}
}

833 
	$ﬁ§d_¥öt_˙f
(
ﬁ§d_c⁄fig
 *
˙f
)

835 
ù_¥efix_li°
 *
h
 = 
˙f
->
h«_íåõs
;

836 
ﬁ§_if
 *
ö
 = 
˙f
->
öãrÁ˚s
;

837 
∂ugö_íåy
 *
≥
 = 
˙f
->
∂ugös
;

838 
ù_¥efix_li°
 *
õ
 = 
˙f
->
ùc_√ts
;

840 
	`¥ötf
(" *** olsrd configuration ***\n");

842 
	`¥ötf
("Debug Levñ : %d\n", 
˙f
->
debug_Àvñ
);

843 i‡(
˙f
->
ù_vîsi⁄
 =
AF_INET6
)

844 
	`¥ötf
("IpVersion : 6\n");

846 
	`¥ötf
("IpVersion : 4\n");

847 i‡(
˙f
->
Ælow_no_öãrÁ˚s
)

848 
	`¥ötf
("No interfaces : ALLOWED\n");

850 
	`¥ötf
("No interfaces : NOT ALLOWED\n");

851 
	`¥ötf
("TOS : 0x%02x\n", 
˙f
->
tos
);

852 
	`¥ötf
("Ol§P‹à : %d\n", 
˙f
->
ﬁ§p‹t
);

853 
	`¥ötf
("RtTabÀ : %u\n", 
˙f
->
π_èbÀ
);

854 
	`¥ötf
("RtTabÀDeÁu… : %u\n", 
˙f
->
π_èbÀ_deÁu…
);

855 
	`¥ötf
("RtTabÀTu¬ñ : %u\n", 
˙f
->
π_èbÀ_tu¬ñ
);

856 i‡(
˙f
->
wûlög√ss_auto
)

857 
	`¥ötf
("Willingness : AUTO\n");

859 
	`¥ötf
("Wûlög√s† : %d\n", 
˙f
->
wûlög√ss
);

861 
	`¥ötf
("IPC c⁄√˘i⁄† : %d\n", 
˙f
->
ùc_c⁄√˘i⁄s
);

862 
õ
) {

863 
ùaddr_°r
 
°rbuf
;

864 i‡(
õ
->
√t
.
¥efix_Àn
 =
ﬁ§_˙f
->
max∂í
) {

865 
	`¥ötf
("\tHo° %s\n", 
	`ﬁ§_ù_to_°rög
(&
°rbuf
, &
õ
->
√t
.
¥efix
));

867 
	`¥ötf
("\tNë %s/%d\n", 
	`ﬁ§_ù_to_°rög
(&
°rbuf
, &
õ
->
√t
.
¥efix
), ie->√t.
¥efix_Àn
);

869 
õ
 = ie->
√xt
;

872 
	`¥ötf
("PﬁÃ©ê : %0.2f\n", 
˙f
->
pﬁÃ©e
);

874 
	`¥ötf
("NIC Ch™gPﬁÃ©e: %0.2f\n", 
˙f
->
nic_chgs_pﬁÃ©e
);

876 
	`¥ötf
("TCÑedund™cy : %d\n", 
˙f
->
tc_ªdund™cy
);

878 
	`¥ötf
("MPR covîagê : %d\n", 
˙f
->
m¥_covîage
);

880 
	`¥ötf
("LQÜevñ : %d\n", 
˙f
->
lq_Àvñ
);

882 
	`¥ötf
("LQ fishÉyê : %d\n", 
˙f
->
lq_fish
);

884 
	`¥ötf
("LQágög fa˘‹ : %f\n", 
˙f
->
lq_agög
);

886 
	`¥ötf
("LQálg‹ôhmÇame: %s\n", 
˙f
->
lq_Æg‹ôhm
 ? cnf->lq_algorithm : "default");

888 
	`¥ötf
("NATÅhªshﬁd : %f\n", 
˙f
->
lq_«t_thªsh
);

890 
	`¥ötf
("CÀ¨ s¸ì¿ : %s\n", 
˙f
->
˛ór_s¸ìn
 ? "yes" : "no");

892 
	`¥ötf
("U£Çiô : %s\n", 
˙f
->
u£_niô
 ? "yes" : "no");

894 
	`¥ötf
("Sm¨àG©eway : %s\n", 
˙f
->
sm¨t_gw_a˘ive
 ? "yes" : "no");

896 
	`¥ötf
("SmGw. AŒow NAT : %s\n", 
˙f
->
sm¨t_gw_Ælow_«t
 ? "yes" : "no");

898 
	`¥ötf
("SmGw.Öîiod : %d\n", 
˙f
->
sm¨t_gw_≥riod
);

900 
	`¥ötf
("SmGw. sèbÀcou¡: %d\n", 
˙f
->
sm¨t_gw_°abÀcou¡
);

902 
	`¥ötf
("SmGw.Åhªshﬁd : %d%%\n", 
˙f
->
sm¨t_gw_thªsh
);

904 
	`¥ötf
("Sm¨àGw. U∂ök : %s\n", 
GW_UPLINK_TXT
[
˙f
->
sm¨t_gw_ty≥
]);

906 
	`¥ötf
("SmGw. U∂ök NAT : %s\n", 
˙f
->
sm¨t_gw_u∂ök_«t
 ? "yes" : "no");

908 
	`¥ötf
("Smart Gw. speed : %d kbit/s up, %d kbit/s down\n",

909 
˙f
->
sm¨t_gw_u∂ök
, cnf->
sm¨t_gw_dow∆ök
);

911 i‡(
ﬁ§_˙f
->
sm¨t_gw_¥efix
.
¥efix_Àn
 == 0) {

912 
	`¥ötf
("# Smart Gw.Örefix : ::/0\n");

915 
	`¥ötf
("Sm¨àGw.Öªfix : %s\n", 
	`ﬁ§_ù_¥efix_to_°rög
(&
˙f
->
sm¨t_gw_¥efix
));

919 i‡(
ö
) {

921 
	`¥ötf
(" InterfaceDefaults: \n");

922 
	`ﬁ§d_¥öt_öãrÁ˚_˙f
(
˙f
->
öãrÁ˚_deÁu…s
, cnf->öãrÁ˚_deÁu…s, 
åue
);

924 
ö
)

926 i‡(
˙f
->
öãrÁ˚_deÁu…s
!=
ö
->cnf)

928 
	`¥ötf
(" dev: \"%s\"\n", 
ö
->
«me
);

930 
	`ﬁ§d_¥öt_öãrÁ˚_˙f
(
ö
->
˙f
, in->
˙fi
, 
Ál£
);

932 
ö
 = in->
√xt
;

937 i‡(
≥
) {

938 
	`¥ötf
("Plugins:\n");

940 
≥
) {

941 
	`¥ötf
("\tName: \"%s\"\n", 
≥
->
«me
);

942 
≥
 =Öe->
√xt
;

947 i‡(
˙f
->
u£_hy°îesis
) {

948 
	`¥ötf
("Using hysteresis:\n");

949 
	`¥ötf
("\tSˇlög : %0.2f\n", 
˙f
->
hy°îesis_∑øm
.
sˇlög
);

950 
	`¥ötf
("\tTh∏high/low : %0.2f/%0.2f\n", 
˙f
->
hy°îesis_∑øm
.
thr_high
, cnf->hy°îesis_∑øm.
thr_low
);

952 
	`¥ötf
("Not using hysteresis\n");

956 i‡(
h
) {

957 
	`¥ötf
("HNA%dÉ¡rõs:\n", 
˙f
->
ù_vîsi⁄
 =
AF_INET
 ? 4 : 6);

958 
h
) {

959 
ùaddr_°r
 
buf
;

960 
	`¥ötf
("\t%s/", 
	`ﬁ§_ù_to_°rög
(&
buf
, &
h
->
√t
.
¥efix
));

961 i‡(
˙f
->
ù_vîsi⁄
 =
AF_INET
) {

962 
ﬁ§_ù_addr
 
ù
;

963 
	`ﬁ§_¥efix_to_√tmask
(&
ù
, 
h
->
√t
.
¥efix_Àn
);

964 
	`¥ötf
("%s\n", 
	`ﬁ§_ù_to_°rög
(&
buf
, &
ù
));

966 
	`¥ötf
("%d\n", 
h
->
√t
.
¥efix_Àn
);

968 
h
 = h->
√xt
;

971 
	}
}

973 #i‡
deföed
 
WIN32


974 
	sioöfo
 {

975 
	mh™dÀ
;

976 
	m©å
;

977 
	mbuff
;

978 
	mÊag
;

979 
CRITICAL_SECTION
 
	mlock
;

983 
	$wö32_°dio_hack
(
h™dÀ
)

985 
HMODULE
 
lib
;

986 
ioöfo
 **
öfo
;

988 
lib
 = 
	`LﬂdLibøry
("msvcrt.dll");

990 
öfo
 = (
ioöfo
 **)
	`GëProcAddªss
(
lib
, "__pioinfo");

995 (*
öfo
)[2].
h™dÀ
 = handle;

996 (*
öfo
)[2].
©å
 = 0x89;

999 
°dîr
->
_fûe
 = 2;

1002 
	`£tbuf
(
°dîr
, 
NULL
);

1003 
	}
}

1006 
	$wö32_ﬁ§d_mÆloc
(
size_t
 
size
)

1008  
	`mÆloc
(
size
);

1009 
	}
}

1012 
	$wö32_ﬁ§d_‰ì
(*
±r
)

1014 
	`‰ì
(
±r
);

1015 
	}
}

1018 
	$upd©e_has_g©eway_fõlds
() {

1019 
ù_¥efix_li°
 *
h
;

1021 
ﬁ§_˙f
->
has_ùv4_g©eway
 = 
Ál£
;

1022 
ﬁ§_˙f
->
has_ùv6_g©eway
 = 
Ál£
;

1024 
h
 = 
ﬁ§_˙f
->
h«_íåõs
; h !
NULL
; h = h->
√xt
) {

1025 
ﬁ§_˙f
->
has_ùv4_g©eway
 |
	`ù_¥efix_is_v4_öëgw
(&
h
->
√t
Ë|| 
	`ù_¥efix_is_m≠≥dv4_öëgw
(&h->net);

1026 
ﬁ§_˙f
->
has_ùv6_g©eway
 |
	`ù_¥efix_is_v6_öëgw
(&
h
->
√t
);

1028 
	}
}

1031 
	$ù_¥efix_li°_add
(
ù_¥efix_li°
 **
li°
, c⁄° 
ﬁ§_ù_addr
 *
√t
, 
uöt8_t
 
¥efix_Àn
)

1033 
ù_¥efix_li°
 *
√w_íåy
 = 
	`mÆloc
((*new_entry));

1035 
√w_íåy
->
√t
.
¥efix
 = *net;

1036 
√w_íåy
->
√t
.
¥efix_Àn
 =Örefix_len;

1039 
√w_íåy
->
√xt
 = *
li°
;

1040 *
li°
 = 
√w_íåy
;

1043 
	`upd©e_has_g©eway_fõlds
();

1044 
	}
}

1047 
	$ù_¥efix_li°_ªmove
(
ù_¥efix_li°
 **
li°
, c⁄° 
ﬁ§_ù_addr
 *
√t
, 
uöt8_t
 
¥efix_Àn
)

1049 
ù_¥efix_li°
 *
h
 = *
li°
, *
¥ev
 = 
NULL
;

1051 
h
 !
NULL
) {

1052 i‡(
	`ùequÆ
(
√t
, &
h
->√t.
¥efix
Ë&& h->√t.
¥efix_Àn
 ==Örefix_len) {

1054 i‡(
¥ev
 =
NULL
) {

1055 *
li°
 = 
h
->
√xt
;

1057 
¥ev
->
√xt
 = 
h
->next;

1059 
	`‰ì
(
h
);

1062 
	`upd©e_has_g©eway_fõlds
();

1065 
¥ev
 = 
h
;

1066 
h
 = h->
√xt
;

1069 
	}
}

1071 
ù_¥efix_li°
 *

1072 
	$ù_¥efix_li°_föd
(
ù_¥efix_li°
 *
li°
, c⁄° 
ﬁ§_ù_addr
 *
√t
, 
uöt8_t
 
¥efix_Àn
)

1074 
ù_¥efix_li°
 *
h
;

1075 
h
 = 
li°
; h !
NULL
; h = h->
√xt
) {

1076 i‡(
¥efix_Àn
 =
h
->
√t
.¥efix_À¿&& 
	`ùequÆ
“ë, &h->√t.
¥efix
)) {

1077  
h
;

1080  
NULL
;

1081 
	}
}

	@src/cfgparser/olsrd_conf.h

42 #i‚de‡
_OLSRD_CONF_H


43 
	#_OLSRD_CONF_H


	)

45 
	~"ﬁ§_¥Ÿocﬁ.h
"

46 
	~"ﬁ§_cfg.h
"

48 
	#PARSER_VERSION
 "0.1.2"

	)

50 
cuºít_löe
;

52 
	sc⁄f_tokí
 {

53 
uöt32_t
 
	möãgî
;

54 
	mÊﬂtög
;

55 
boﬁ
 
	mboﬁón
;

56 *
	m°rög
;

59 
	#DEFAULT_STR
(
vÆ
) \

60 (((!
def˙f
Ë&& ((*((
uöt8_t
 *)(&
˙fi
->
vÆ
)))==0))?" (d)":"")

	)

62 
£t_deÁu…_˙f
(
ﬁ§d_c⁄fig
 *);

	@src/cfgparser/oparse.c

44 
	#YYBISON
 1

	)

47 
	#YYBISON_VERSION
 "2.5"

	)

50 
	#YYSKELETON_NAME
 "yacc.c"

	)

53 
	#YYPURE
 0

	)

56 
	#YYPUSH
 0

	)

59 
	#YYPULL
 1

	)

62 
	#YYLSP_NEEDED
 0

	)

113 
	~"ﬁ§d_c⁄f.h
"

114 
	~"../defs.h
"

115 
	~"../ùˇlc.h
"

116 
	~"../√t_ﬁ§.h
"

117 
	~"../lök_£t.h
"

118 
	~"../ﬁ§.h
"

120 
	~<°ddef.h
>

121 
	~<°dio.h
>

122 
	~<°dlib.h
>

123 
	~<sys/ty≥s.h
>

124 
	~<sys/sockë.h
>

125 
	~<√töë/ö.h
>

126 
	~<¨∑/öë.h
>

127 
	~<°rög.h
>

129 
	#PARSER_DEBUG
 1

	)

131 #i‡
PARSER_DEBUG


132 
	#PARSER_DEBUG_PRINTF
(
x
, 
¨gs
...Ë
	`¥ötf
(x, ##¨gs)

	)

134 
	#PARSER_DEBUG_PRINTF
(
x
, 
¨gs
...Ëdÿ{ } 0)

	)

137 
	#SET_IFS_CONF
(
ifs
, 
if˙t
, 
fõld
, 
vÆue
) do { \

138 ; 
if˙t
>0; 
ifs
=ifs->
√xt
, ifcnt--) { \

139 
ifs
->
˙fi
->
fõld
 = (
vÆue
); \

140 
ifs
->
˙f
->
fõld
 = (
vÆue
); \

142 } 0)

	)

144 
	#YYSTYPE
 
c⁄f_tokí
 *

	)

146 
yyîr‹
(const *);

147 
yyÀx
();

149 
	gifs_ö_cuº_cfg
 = 0;

151 
add_ùv6_addr
(
YYSTYPE
 
ùaddr_¨g
, YYSTYPE 
¥efixÀn_¨g
);

153 
	$lq_mu…_hñ≥r
(
YYSTYPE
 
ù_addr_¨g
, YYSTYPE 
mu…_¨g
)

155 
ﬁ§_ù_addr
 
addr
;

156 
i
;

157 
ﬁ§_if
 *
wÆkî
;

159 #i‡
PARSER_DEBUG
 > 0

160 
	`¥ötf
("\tLinkQualityMult %s %0.2f\n",

161 (
ù_addr_¨g
 !
NULL
Ë? ip_addr_¨g->
°rög
 : "any",

162 
mu…_¨g
->
Êﬂtög
);

165 
	`mem£t
(&
addr
, 0, (addr));

167 i‡(
ù_addr_¨g
 !
NULL
 &&

168 
	`öë_±⁄
(
ﬁ§_˙f
->
ù_vîsi⁄
, 
ù_addr_¨g
->
°rög
, &
addr
) <= 0) {

169 
	`Ârötf
(
°dîr
, "C™nŸÖ¨£ IPáddªs†%s.\n", 
ù_addr_¨g
->
°rög
);

173 
wÆkî
 = 
ﬁ§_˙f
->
öãrÁ˚s
;

175 
i
 = 0; i < 
ifs_ö_cuº_cfg
; i++) {

176 
ﬁ§_lq_mu…
 *
mu…
 = 
	`mÆloc
((*mult));

177 i‡(
mu…
 =
NULL
) {

178 
	`Ârötf
(
°dîr
, "Out of memory (LQ multiplier).\n");

182 
mu…
->
addr
 =áddr;

183 
mu…
->
vÆue
 = (
uöt32_t
)(
mu…_¨g
->
Êﬂtög
 * 
LINK_LOSS_MULTIPLIER
);

185 
mu…
->
√xt
 = 
wÆkî
->
˙f
->
lq_mu…
;

186 
wÆkî
->
˙fi
->
lq_mu…
 = wÆkî->
˙f
->lq_mu… = 
mu…
;

187 
wÆkî
->
˙f
->
‹ig_lq_mu…_˙t
++;

188 
wÆkî
->
˙fi
->
‹ig_lq_mu…_˙t
=wÆkî->
˙f
->orig_lq_mult_cnt;

190 
wÆkî
 = wÆkî->
√xt
;

193 i‡(
ù_addr_¨g
 !
NULL
) {

194 
	`‰ì
(
ù_addr_¨g
->
°rög
);

195 
	`‰ì
(
ù_addr_¨g
);

198 
	`‰ì
(
mu…_¨g
);

201 
	}
}

203 
	$add_ùv6_addr
(
YYSTYPE
 
ùaddr_¨g
, YYSTYPE 
¥efixÀn_¨g
)

205 
ﬁ§_ù_addr
 
ùaddr
;

206 
	`PARSER_DEBUG_PRINTF
("HNA IPv6É¡ry: %s/%d\n", 
ùaddr_¨g
->
°rög
, 
¥efixÀn_¨g
->
öãgî
);

208 i‡(
ﬁ§_˙f
->
ù_vîsi⁄
 !
AF_INET6
) {

209 
	`Ârötf
(
°dîr
, "IPv6áddresses can only be used if \"IpVersion\" == 6, skipping HNA6.\n");

210 
	`ﬁ§_°¨tup_¶ìp
(3);

213 if(
	`öë_±⁄
(
AF_INET6
, 
ùaddr_¨g
->
°rög
, &
ùaddr
) <= 0) {

214 
	`Ârötf
(
°dîr
, "ih«6íåy: Faûed c⁄vîtög IPáddªs†%s\n", 
ùaddr_¨g
->
°rög
);

218 i‡(
¥efixÀn_¨g
->
öãgî
 > 128) {

219 
	`Ârötf
(
°dîr
, "ih«6íåy: IŒegÆ IPv6ÖªfixÜígth %d\n", 
¥efixÀn_¨g
->
öãgî
);

224 
	`ù_¥efix_li°_add
(&
ﬁ§_˙f
->
h«_íåõs
, &
ùaddr
, 
¥efixÀn_¨g
->
öãgî
);

226 
	`‰ì
(
ùaddr_¨g
->
°rög
);

227 
	`‰ì
(
ùaddr_¨g
);

228 
	`‰ì
(
¥efixÀn_¨g
);

231 
	}
}

239 #i‚de‡
YYDEBUG


240 
	#YYDEBUG
 0

	)

244 #ifde‡
YYERROR_VERBOSE


245 #unde‡
YYERROR_VERBOSE


246 
	#YYERROR_VERBOSE
 1

	)

248 
	#YYERROR_VERBOSE
 0

	)

252 #i‚de‡
YYTOKEN_TABLE


253 
	#YYTOKEN_TABLE
 0

	)

258 #i‚de‡
YYTOKENTYPE


259 
	#YYTOKENTYPE


	)

262 
	eyytokíty≥
 {

263 
	mTOK_SLASH
 = 258,

264 
	mTOK_OPEN
 = 259,

265 
	mTOK_CLOSE
 = 260,

266 
	mTOK_STRING
 = 261,

267 
	mTOK_INTEGER
 = 262,

268 
	mTOK_FLOAT
 = 263,

269 
	mTOK_BOOLEAN
 = 264,

270 
	mTOK_IPV6TYPE
 = 265,

271 
	mTOK_DEBUGLEVEL
 = 266,

272 
	mTOK_IPVERSION
 = 267,

273 
	mTOK_HNA4
 = 268,

274 
	mTOK_HNA6
 = 269,

275 
	mTOK_PLUGIN
 = 270,

276 
	mTOK_INTERFACE_DEFAULTS
 = 271,

277 
	mTOK_INTERFACE
 = 272,

278 
	mTOK_NOINT
 = 273,

279 
	mTOK_TOS
 = 274,

280 
	mTOK_OLSRPORT
 = 275,

281 
	mTOK_RTPROTO
 = 276,

282 
	mTOK_RTTABLE
 = 277,

283 
	mTOK_RTTABLE_DEFAULT
 = 278,

284 
	mTOK_RTTABLE_TUNNEL
 = 279,

285 
	mTOK_RTTABLE_PRIORITY
 = 280,

286 
	mTOK_RTTABLE_DEFAULTOLSR_PRIORITY
 = 281,

287 
	mTOK_RTTABLE_TUNNEL_PRIORITY
 = 282,

288 
	mTOK_RTTABLE_DEFAULT_PRIORITY
 = 283,

289 
	mTOK_WILLINGNESS
 = 284,

290 
	mTOK_IPCCON
 = 285,

291 
	mTOK_FIBMETRIC
 = 286,

292 
	mTOK_USEHYST
 = 287,

293 
	mTOK_HYSTSCALE
 = 288,

294 
	mTOK_HYSTUPPER
 = 289,

295 
	mTOK_HYSTLOWER
 = 290,

296 
	mTOK_POLLRATE
 = 291,

297 
	mTOK_NICCHGSPOLLRT
 = 292,

298 
	mTOK_TCREDUNDANCY
 = 293,

299 
	mTOK_MPRCOVERAGE
 = 294,

300 
	mTOK_LQ_LEVEL
 = 295,

301 
	mTOK_LQ_FISH
 = 296,

302 
	mTOK_LQ_AGING
 = 297,

303 
	mTOK_LQ_PLUGIN
 = 298,

304 
	mTOK_LQ_NAT_THRESH
 = 299,

305 
	mTOK_LQ_MULT
 = 300,

306 
	mTOK_CLEAR_SCREEN
 = 301,

307 
	mTOK_PLPARAM
 = 302,

308 
	mTOK_MIN_TC_VTIME
 = 303,

309 
	mTOK_LOCK_FILE
 = 304,

310 
	mTOK_USE_NIIT
 = 305,

311 
	mTOK_SMART_GW
 = 306,

312 
	mTOK_SMART_GW_ALLOW_NAT
 = 307,

313 
	mTOK_SMART_GW_PERIOD
 = 308,

314 
	mTOK_SMART_GW_STABLECOUNT
 = 309,

315 
	mTOK_SMART_GW_THRESH
 = 310,

316 
	mTOK_SMART_GW_UPLINK
 = 311,

317 
	mTOK_SMART_GW_UPLINK_NAT
 = 312,

318 
	mTOK_SMART_GW_SPEED
 = 313,

319 
	mTOK_SMART_GW_PREFIX
 = 314,

320 
	mTOK_SRC_IP_ROUTES
 = 315,

321 
	mTOK_MAIN_IP
 = 316,

322 
	mTOK_SET_IPFORWARD
 = 317,

323 
	mTOK_HOSTLABEL
 = 318,

324 
	mTOK_NETLABEL
 = 319,

325 
	mTOK_MAXIPC
 = 320,

326 
	mTOK_IFMODE
 = 321,

327 
	mTOK_IPV4MULTICAST
 = 322,

328 
	mTOK_IP4BROADCAST
 = 323,

329 
	mTOK_IPV4BROADCAST
 = 324,

330 
	mTOK_IPV6MULTICAST
 = 325,

331 
	mTOK_IPV4SRC
 = 326,

332 
	mTOK_IPV6SRC
 = 327,

333 
	mTOK_IFWEIGHT
 = 328,

334 
	mTOK_HELLOINT
 = 329,

335 
	mTOK_HELLOVAL
 = 330,

336 
	mTOK_TCINT
 = 331,

337 
	mTOK_TCVAL
 = 332,

338 
	mTOK_MIDINT
 = 333,

339 
	mTOK_MIDVAL
 = 334,

340 
	mTOK_HNAINT
 = 335,

341 
	mTOK_HNAVAL
 = 336,

342 
	mTOK_AUTODETCHG
 = 337,

343 
	mTOK_IPV4_ADDR
 = 338,

344 
	mTOK_IPV6_ADDR
 = 339,

345 
	mTOK_DEFAULT
 = 340,

346 
	mTOK_AUTO
 = 341,

347 
	mTOK_NONE
 = 342,

348 
	mTOK_COMMENT
 = 343

354 #i‡! 
deföed
 
YYSTYPE
 && ! deföed 
YYSTYPE_IS_DECLARED


355 
	tYYSTYPE
;

356 
	#YYSTYPE_IS_TRIVIAL
 1

	)

357 
	#yy°y≥
 
YYSTYPE


	)

358 
	#YYSTYPE_IS_DECLARED
 1

	)

372 #ifde‡
YYTYPE_UINT8


373 
YYTYPE_UINT8
 
	tyyty≥_uöt8
;

375 
	tyyty≥_uöt8
;

378 #ifde‡
YYTYPE_INT8


379 
YYTYPE_INT8
 
	tyyty≥_öt8
;

380 #ñi‡(
deföed
 
__STDC__
 || deföed 
__C99__FUNC__
 \

381 || 
deföed
 
	g__˝lu•lus
 || deföed 
	g_MSC_VER
)

382 sig√d 
	tyyty≥_öt8
;

384 
	tyyty≥_öt8
;

387 #ifde‡
YYTYPE_UINT16


388 
YYTYPE_UINT16
 
	tyyty≥_uöt16
;

390 
	tyyty≥_uöt16
;

393 #ifde‡
YYTYPE_INT16


394 
YYTYPE_INT16
 
	tyyty≥_öt16
;

396 
	tyyty≥_öt16
;

399 #i‚de‡
YYSIZE_T


400 #ifde‡
__SIZE_TYPE__


401 
	#YYSIZE_T
 
__SIZE_TYPE__


	)

402 #ñi‡
deföed
 
size_t


403 
	#YYSIZE_T
 
size_t


	)

404 #ñi‡! 
deföed
 
YYSIZE_T
 && (deföed 
__STDC__
 || deföed 
__C99__FUNC__
 \

405 || 
deföed
 
	g__˝lu•lus
 || deföed 
	g_MSC_VER
)

406 
	~<°ddef.h
>

407 
	#YYSIZE_T
 
size_t


	)

409 
	#YYSIZE_T
 

	)

413 
	#YYSIZE_MAXIMUM
 ((
YYSIZE_T
Ë-1)

	)

415 #i‚de‡
YY_


416 #i‡
deföed
 
YYENABLE_NLS
 && YYENABLE_NLS

417 #i‡
ENABLE_NLS


418 
	~<liböé.h
>

419 
	#YY_
(
msgid
Ë
	`dgëãxt
 ("bis⁄-ru¡ime", msgid)

	)

422 #i‚de‡
YY_


423 
	#YY_
(
msgid
Ë
	)
msgid

428 #i‡! 
deföed
 
löt
 || deföed 
__GNUC__


429 
	#YYUSE
(
e
Ë((Ë”))

	)

431 
	#YYUSE
(
e
Ë

	)

435 #i‚de‡
löt


436 
	#YYID
(
n
Ë“)

	)

438 #i‡(
deföed
 
__STDC__
 || deföed 
__C99__FUNC__
 \

439 || 
deföed
 
	g__˝lu•lus
 || deföed 
	g_MSC_VER
)

441 
	$YYID
 (
yyi
)

444 
	$YYID
 (
yyi
)

445 
yyi
;

448  
yyi
;

449 
	}
}

452 #i‡! 
deföed
 
yyovîÊow
 || 
YYERROR_VERBOSE


456 #ifde‡
YYSTACK_USE_ALLOCA


457 #i‡
YYSTACK_USE_ALLOCA


458 #ifde‡
__GNUC__


459 
	#YYSTACK_ALLOC
 
__buûtö_Æloˇ


	)

460 #ñi‡
deföed
 
__BUILTIN_VA_ARG_INCR


461 
	~<Æloˇ.h
>

462 #ñi‡
deföed
 
_AIX


463 
	#YYSTACK_ALLOC
 
__Æloˇ


	)

464 #ñi‡
deföed
 
_MSC_VER


465 
	~<mÆloc.h
>

466 
	#Æloˇ
 
_Æloˇ


	)

468 
	#YYSTACK_ALLOC
 
Æloˇ


	)

469 #i‡! 
deföed
 
_ALLOCA_H
 && ! deföed 
EXIT_SUCCESS
 && (deföed 
__STDC__
 || deföed 
__C99__FUNC__
 \

470 || 
deföed
 
	g__˝lu•lus
 || deföed 
	g_MSC_VER
)

471 
	~<°dlib.h
>

472 #i‚de‡
EXIT_SUCCESS


473 
	#EXIT_SUCCESS
 0

	)

480 #ifde‡
YYSTACK_ALLOC


482 
	#YYSTACK_FREE
(
På
Ëdÿ{ ; } 
	`YYID
 (0))

	)

483 #i‚de‡
YYSTACK_ALLOC_MAXIMUM


488 
	#YYSTACK_ALLOC_MAXIMUM
 4032

	)

491 
	#YYSTACK_ALLOC
 
YYMALLOC


	)

492 
	#YYSTACK_FREE
 
YYFREE


	)

493 #i‚de‡
YYSTACK_ALLOC_MAXIMUM


494 
	#YYSTACK_ALLOC_MAXIMUM
 
YYSIZE_MAXIMUM


	)

496 #i‡(
deföed
 
__˝lu•lus
 && ! deföed 
EXIT_SUCCESS
 \

497 && ! ((
deföed
 
	gYYMALLOC
 || deföed 
	gmÆloc
) \

498 && (
deföed
 
	gYYFREE
 || deföed 
	g‰ì
)))

499 
	~<°dlib.h
>

500 #i‚de‡
EXIT_SUCCESS


501 
	#EXIT_SUCCESS
 0

	)

504 #i‚de‡
YYMALLOC


505 
	#YYMALLOC
 
mÆloc


	)

506 #i‡! 
deföed
 
mÆloc
 && ! deföed 
EXIT_SUCCESS
 && (deföed 
__STDC__
 || deföed 
__C99__FUNC__
 \

507 || 
deföed
 
	g__˝lu•lus
 || deföed 
	g_MSC_VER
)

508 *
mÆloc
 (
YYSIZE_T
);

511 #i‚de‡
YYFREE


512 
	#YYFREE
 
‰ì


	)

513 #i‡! 
deföed
 
‰ì
 && ! deföed 
EXIT_SUCCESS
 && (deföed 
__STDC__
 || deföed 
__C99__FUNC__
 \

514 || 
deföed
 
	g__˝lu•lus
 || deföed 
	g_MSC_VER
)

515 
‰ì
 (*);

522 #i‡(! 
deföed
 
yyovîÊow
 \

523 && (! 
deföed
 
	g__˝lu•lus
 \

524 || (
deföed
 
	gYYSTYPE_IS_TRIVIAL
 && YYSTYPE_IS_TRIVIAL)))

527 
	uyyÆloc


529 
yyty≥_öt16
 
	myyss_Æloc
;

530 
YYSTYPE
 
	myyvs_Æloc
;

534 
	#YYSTACK_GAP_MAXIMUM
 ( (
yyÆloc
Ë- 1)

	)

538 
	#YYSTACK_BYTES
(
N
) \

539 ((
N
Ë* ( (
yyty≥_öt16
Ë+  (
YYSTYPE
)) \

540 + 
YYSTACK_GAP_MAXIMUM
)

	)

542 
	#YYCOPY_NEEDED
 1

	)

549 
	#YYSTACK_RELOCATE
(
Sèck_Æloc
, 
Sèck
) \

552 
YYSIZE_T
 
yy√wbyãs
; \

553 
	`YYCOPY
 (&
yy±r
->
Sèck_Æloc
, 
Sèck
, 
yysize
); \

554 
Sèck
 = &
yy±r
->
Sèck_Æloc
; \

555 
yy√wbyãs
 = 
yy°acksize
 *  (*
Sèck
Ë+ 
YYSTACK_GAP_MAXIMUM
; \

556 
yy±r
 +
yy√wbyãs
 /  (*yyptr); \

558 
	`YYID
 (0))

	)

562 #i‡
deföed
 
YYCOPY_NEEDED
 && YYCOPY_NEEDED

565 #i‚de‡
YYCOPY


566 #i‡
deföed
 
__GNUC__
 && 1 < __GNUC__

567 
	#YYCOPY
(
To
, 
From
, 
Cou¡
) \

568 
	`__buûtö_mem˝y
 (
To
, 
From
, (
Cou¡
Ë*  (*(From)))

	)

570 
	#YYCOPY
(
To
, 
From
, 
Cou¡
) \

573 
YYSIZE_T
 
yyi
; \

574 
yyi
 = 0; yyò< (
Cou¡
); yyi++) \

575 (
To
)[
yyi
] = (
From
)[yyi]; \

577 
	`YYID
 (0))

	)

583 
	#YYFINAL
 2

	)

585 
	#YYLAST
 218

	)

588 
	#YYNTOKENS
 89

	)

590 
	#YYNNTS
 93

	)

592 
	#YYNRULES
 193

	)

594 
	#YYNSTATES
 288

	)

597 
	#YYUNDEFTOK
 2

	)

598 
	#YYMAXUTOK
 343

	)

600 
	#YYTRANSLATE
(
YYX
) \

601 ((Ë(
YYX
Ë<
YYMAXUTOK
 ? 
yyå™¶©e
[YYX] : 
YYUNDEFTOK
)

	)

604 c⁄° 
yyty≥_uöt8
 
	gyyå™¶©e
[] =

643 #i‡
YYDEBUG


646 c⁄° 
yyty≥_uöt16
 
	gyy¥hs
[] =

671 c⁄° 
yyty≥_öt16
 
	gyyrhs
[] =

727 c⁄° 
yyty≥_uöt16
 
	gyyæöe
[] =

752 #i‡
YYDEBUG
 || 
YYERROR_VERBOSE
 || 
YYTOKEN_TABLE


755 c⁄° *c⁄° 
	gyyäame
[] =

803 #ifde‡
YYPRINT


806 c⁄° 
yyty≥_uöt16
 
	gyytoknum
[] =

821 c⁄° 
yyty≥_uöt8
 
	gyyr1
[] =

846 c⁄° 
yyty≥_uöt8
 
	gyyr2
[] =

873 c⁄° 
yyty≥_uöt8
 
	gyydeÁ˘
[] =

907 c⁄° 
yyty≥_öt16
 
	gyydefgŸo
[] =

923 
	#YYPACT_NINF
 -201

	)

924 c⁄° 
yyty≥_öt16
 
	gyy∑˘
[] =

958 c⁄° 
yyty≥_öt16
 
	gyypgŸo
[] =

975 
	#YYTABLE_NINF
 -1

	)

976 c⁄° 
yyty≥_uöt16
 
	gyyèbÀ
[] =

1002 
	#yy∑˘_vÆue_is_deÁu…
(
yy°©e
) \

1003 ((
yy°©e
Ë=(-201))

	)

1005 
	#yyèbÀ_vÆue_is_îr‹
(
yyèbÀ_vÆue
) \

1006 
	`YYID
 (0)

	)

1008 c⁄° 
yyty≥_uöt8
 
	gyycheck
[] =

1036 c⁄° 
yyty≥_uöt8
 
	gyy°os
[] =

1069 
	#yyîrok
 (
yyîr°©us
 = 0)

	)

1070 
	#yy˛órö
 (
yych¨
 = 
YYEMPTY
)

	)

1071 
	#YYEMPTY
 (-2)

	)

1072 
	#YYEOF
 0

	)

1074 
	#YYACCEPT
 
yyac˚±œb


	)

1075 
	#YYABORT
 
yyab‹éab


	)

1076 
	#YYERROR
 
yyîr‹œb


	)

1086 
	#YYFAIL
 
yyîæab


	)

1087 #i‡
deföed
 
YYFAIL


1094 
	#YYRECOVERING
(Ë(!!
yyîr°©us
)

	)

1096 
	#YYBACKUP
(
Tokí
, 
VÆue
) \

1098 i‡(
yych¨
 =
YYEMPTY
 && 
yyÀn
 == 1) \

1100 
yych¨
 = (
Tokí
); \

1101 
yylvÆ
 = (
VÆue
); \

1102 
	`YYPOPSTACK
 (1); \

1103 
yybackup
; \

1107 
	`yyîr‹
 (
	`YY_
("syntaxÉrror: cannot back up")); \

1108 
YYERROR
; \

1110 
	`YYID
 (0))

	)

1113 
	#YYTERROR
 1

	)

1114 
	#YYERRCODE
 256

	)

1121 
	#YYRHSLOC
(
Rhs
, 
K
Ë((Rhs)[K])

	)

1122 #i‚de‡
YYLLOC_DEFAULT


1123 
	#YYLLOC_DEFAULT
(
Cuºít
, 
Rhs
, 
N
) \

1125 i‡(
	`YYID
 (
N
)) \

1127 (
Cuºít
).
fú°_löe
 = 
	`YYRHSLOC
 (
Rhs
, 1).first_line; \

1128 (
Cuºít
).
fú°_cﬁumn
 = 
	`YYRHSLOC
 (
Rhs
, 1).first_column; \

1129 (
Cuºít
).
œ°_löe
 = 
	`YYRHSLOC
 (
Rhs
, 
N
).last_line; \

1130 (
Cuºít
).
œ°_cﬁumn
 = 
	`YYRHSLOC
 (
Rhs
, 
N
).last_column; \

1134 (
Cuºít
).
fú°_löe
 = (Cuºít).
œ°_löe
 = \

1135 
	`YYRHSLOC
 (
Rhs
, 0).
œ°_löe
; \

1136 (
Cuºít
).
fú°_cﬁumn
 = (Cuºít).
œ°_cﬁumn
 = \

1137 
	`YYRHSLOC
 (
Rhs
, 0).
œ°_cﬁumn
; \

1139 
	`YYID
 (0))

	)

1145 #i‚de‡
YY_LOCATION_PRINT


1146 
	#YY_LOCATION_PRINT
(
Fûe
, 
Loc
Ë((Ë0)

	)

1152 #ifde‡
YYLEX_PARAM


1153 
	#YYLEX
 
	`yyÀx
 (
YYLEX_PARAM
)

	)

1155 
	#YYLEX
 
	`yyÀx
 ()

	)

1159 #i‡
YYDEBUG


1161 #i‚de‡
YYFPRINTF


1162 
	~<°dio.h
>

1163 
	#YYFPRINTF
 
Ârötf


	)

1166 
	#YYDPRINTF
(
Args
) \

1168 i‡(
yydebug
) \

1169 
YYFPRINTF
 
Args
; \

1170 } 
	`YYID
 (0))

	)

1172 
	#YY_SYMBOL_PRINT
(
TôÀ
, 
Ty≥
, 
VÆue
, 
Loˇti⁄
) \

1174 i‡(
yydebug
) \

1176 
	`YYFPRINTF
 (
°dîr
, "%†", 
TôÀ
); \

1177 
	`yy_symbﬁ_¥öt
 (
°dîr
, \

1178 
Ty≥
, 
VÆue
); \

1179 
	`YYFPRINTF
 (
°dîr
, "\n"); \

1181 } 
	`YYID
 (0))

	)

1189 #i‡(
deföed
 
__STDC__
 || deföed 
__C99__FUNC__
 \

1190 || 
deföed
 
	g__˝lu•lus
 || deföed 
	g_MSC_VER
)

1192 
	$yy_symbﬁ_vÆue_¥öt
 (
FILE
 *
yyouçut
, 
yyty≥
, 
YYSTYPE
 c⁄° * c⁄° 
yyvÆuï
)

1195 
	$yy_symbﬁ_vÆue_¥öt
 (
yyouçut
, 
yyty≥
, 
yyvÆuï
)

1196 
FILE
 *
yyouçut
;

1197 
yyty≥
;

1198 
YYSTYPE
 c⁄° * c⁄° 
yyvÆuï
;

1201 i‡(!
yyvÆuï
)

1203 #ifde‡
YYPRINT


1204 i‡(
yyty≥
 < 
YYNTOKENS
)

1205 
	`YYPRINT
 (
yyouçut
, 
yytoknum
[
yyty≥
], *
yyvÆuï
);

1207 
	`YYUSE
 (
yyouçut
);

1209 
yyty≥
)

1214 
	}
}

1221 #i‡(
deföed
 
__STDC__
 || deföed 
__C99__FUNC__
 \

1222 || 
deföed
 
	g__˝lu•lus
 || deföed 
	g_MSC_VER
)

1224 
	$yy_symbﬁ_¥öt
 (
FILE
 *
yyouçut
, 
yyty≥
, 
YYSTYPE
 c⁄° * c⁄° 
yyvÆuï
)

1227 
	$yy_symbﬁ_¥öt
 (
yyouçut
, 
yyty≥
, 
yyvÆuï
)

1228 
FILE
 *
yyouçut
;

1229 
yyty≥
;

1230 
YYSTYPE
 c⁄° * c⁄° 
yyvÆuï
;

1233 i‡(
yyty≥
 < 
YYNTOKENS
)

1234 
	`YYFPRINTF
 (
yyouçut
, "tokí %†(", 
yyäame
[
yyty≥
]);

1236 
	`YYFPRINTF
 (
yyouçut
, "¡îm %†(", 
yyäame
[
yyty≥
]);

1238 
	`yy_symbﬁ_vÆue_¥öt
 (
yyouçut
, 
yyty≥
, 
yyvÆuï
);

1239 
	`YYFPRINTF
 (
yyouçut
, ")");

1240 
	}
}

1247 #i‡(
deföed
 
__STDC__
 || deföed 
__C99__FUNC__
 \

1248 || 
deföed
 
	g__˝lu•lus
 || deföed 
	g_MSC_VER
)

1250 
	$yy_°ack_¥öt
 (
yyty≥_öt16
 *
yybŸtom
, yyty≥_öt16 *
yyt›
)

1253 
	$yy_°ack_¥öt
 (
yybŸtom
, 
yyt›
)

1254 
yyty≥_öt16
 *
yybŸtom
;

1255 
yyty≥_öt16
 *
yyt›
;

1258 
	`YYFPRINTF
 (
°dîr
, "StackÇow");

1259 ; 
yybŸtom
 <
yyt›
; yybottom++)

1261 
yybŸ
 = *
yybŸtom
;

1262 
	`YYFPRINTF
 (
°dîr
, " %d", 
yybŸ
);

1264 
	`YYFPRINTF
 (
°dîr
, "\n");

1265 
	}
}

1267 
	#YY_STACK_PRINT
(
BŸtom
, 
T›
) \

1269 i‡(
yydebug
) \

1270 
	`yy_°ack_¥öt
 ((
BŸtom
), (
T›
)); \

1271 } 
	`YYID
 (0))

	)

1278 #i‡(
deföed
 
__STDC__
 || deföed 
__C99__FUNC__
 \

1279 || 
deföed
 
	g__˝lu•lus
 || deföed 
	g_MSC_VER
)

1281 
	$yy_ªdu˚_¥öt
 (
YYSTYPE
 *
yyv•
, 
yyruÀ
)

1284 
	$yy_ªdu˚_¥öt
 (
yyv•
, 
yyruÀ
)

1285 
YYSTYPE
 *
yyv•
;

1286 
yyruÀ
;

1289 
yyƒhs
 = 
yyr2
[
yyruÀ
];

1290 
yyi
;

1291 
yy o
 = 
yyæöe
[
yyruÀ
];

1292 
	`YYFPRINTF
 (
°dîr
, "Reducing stack byÑule %d (line %lu):\n",

1293 
yyruÀ
 - 1, 
yy o
);

1295 
yyi
 = 0; yyò< 
yyƒhs
; yyi++)

1297 
	`YYFPRINTF
 (
°dîr
, " $%d = ", 
yyi
 + 1);

1298 
	`yy_symbﬁ_¥öt
 (
°dîr
, 
yyrhs
[
yy¥hs
[
yyruÀ
] + 
yyi
],

1299 &(
yyv•
[(
yyi
 + 1Ë- (
yyƒhs
)])

1301 
	`YYFPRINTF
 (
°dîr
, "\n");

1303 
	}
}

1305 
	#YY_REDUCE_PRINT
(
RuÀ
) \

1307 i‡(
yydebug
) \

1308 
	`yy_ªdu˚_¥öt
 (
yyv•
, 
RuÀ
); \

1309 } 
	`YYID
 (0))

	)

1313 
	gyydebug
;

1315 
	#YYDPRINTF
(
Args
)

	)

1316 
	#YY_SYMBOL_PRINT
(
TôÀ
, 
Ty≥
, 
VÆue
, 
Loˇti⁄
)

	)

1317 
	#YY_STACK_PRINT
(
BŸtom
, 
T›
)

	)

1318 
	#YY_REDUCE_PRINT
(
RuÀ
)

	)

1323 #i‚def 
YYINITDEPTH


1324 
	#YYINITDEPTH
 200

	)

1334 #i‚de‡
YYMAXDEPTH


1335 
	#YYMAXDEPTH
 10000

	)

1339 #i‡
YYERROR_VERBOSE


1341 #i‚de‡
yy°æí


1342 #i‡
deföed
 
__GLIBC__
 && deföed 
_STRING_H


1343 
	#yy°æí
 
°æí


	)

1346 #i‡(
deföed
 
__STDC__
 || deföed 
__C99__FUNC__
 \

1347 || 
deföed
 
	g__˝lu•lus
 || deföed 
	g_MSC_VER
)

1348 
YYSIZE_T


1349 
	$yy°æí
 (c⁄° *
yy°r
)

1351 
YYSIZE_T


1352 
	$yy°æí
 (
yy°r
)

1353 c⁄° *
yy°r
;

1356 
YYSIZE_T
 
yyÀn
;

1357 
yyÀn
 = 0; 
yy°r
[yylen]; yylen++)

1359  
yyÀn
;

1360 
	}
}

1364 #i‚de‡
yy°p˝y


1365 #i‡
deföed
 
__GLIBC__
 && deföed 
_STRING_H
 && deföed 
_GNU_SOURCE


1366 
	#yy°p˝y
 
°p˝y


	)

1370 #i‡(
deföed
 
__STDC__
 || deföed 
__C99__FUNC__
 \

1371 || 
deföed
 
	g__˝lu•lus
 || deföed 
	g_MSC_VER
)

1373 
	$yy°p˝y
 (*
yyde°
, c⁄° *
yy§c
)

1376 
	$yy°p˝y
 (
yyde°
, 
yy§c
)

1377 *
yyde°
;

1378 c⁄° *
yy§c
;

1381 *
yyd
 = 
yyde°
;

1382 c⁄° *
yys
 = 
yy§c
;

1384 (*
yyd
++ = *
yys
++) != '\0')

1387  
yyd
 - 1;

1388 
	}
}

1392 #i‚de‡
yyäamîr


1400 
YYSIZE_T


1401 
	$yyäamîr
 (*
yyªs
, c⁄° *
yy°r
)

1403 i‡(*
yy°r
 == '"')

1405 
YYSIZE_T
 
yyn
 = 0;

1406 c⁄° *
yyp
 = 
yy°r
;

1409 *++
yyp
)

1413 
do_nŸ_°rù_quŸes
;

1416 i‡(*++
yyp
 != '\\')

1417 
do_nŸ_°rù_quŸes
;

1420 i‡(
yyªs
)

1421 
yyªs
[
yyn
] = *
yyp
;

1422 
yyn
++;

1426 i‡(
yyªs
)

1427 
yyªs
[
yyn
] = '\0';

1428  
yyn
;

1430 
do_nŸ_°rù_quŸes
: ;

1433 i‡(! 
yyªs
)

1434  
	`yy°æí
 (
yy°r
);

1436  
	`yy°p˝y
 (
yyªs
, 
yy°r
) - yyres;

1437 
	}
}

1449 
	$yysy¡ax_îr‹
 (
YYSIZE_T
 *
yymsg_Æloc
, **
yymsg
,

1450 
yyty≥_öt16
 *
yys•
, 
yytokí
)

1452 
YYSIZE_T
 
yysize0
 = 
	`yyäamîr
 (0, 
yyäame
[
yytokí
]);

1453 
YYSIZE_T
 
yysize
 = 
yysize0
;

1454 
YYSIZE_T
 
yysize1
;

1455 íum { 
YYERROR_VERBOSE_ARGS_MAXIMUM
 = 5 };

1457 c⁄° *
yyf‹m©
 = 0;

1459 c⁄° *
yy¨g
[
YYERROR_VERBOSE_ARGS_MAXIMUM
];

1462 
yycou¡
 = 0;

1491 i‡(
yytokí
 !
YYEMPTY
)

1493 
yyn
 = 
yy∑˘
[*
yys•
];

1494 
yy¨g
[
yycou¡
++] = 
yyäame
[
yytokí
];

1495 i‡(!
	`yy∑˘_vÆue_is_deÁu…
 (
yyn
))

1500 
yyxbegö
 = 
yyn
 < 0 ? -yyn : 0;

1502 
yychecklim
 = 
YYLAST
 - 
yyn
 + 1;

1503 
yyxíd
 = 
yychecklim
 < 
YYNTOKENS
 ? yychecklim : YYNTOKENS;

1504 
yyx
;

1506 
yyx
 = 
yyxbegö
; yyx < 
yyxíd
; ++yyx)

1507 i‡(
yycheck
[
yyx
 + 
yyn
] =yyx && yyx !
YYTERROR


1508 && !
	`yyèbÀ_vÆue_is_îr‹
 (
yyèbÀ
[
yyx
 + 
yyn
]))

1510 i‡(
yycou¡
 =
YYERROR_VERBOSE_ARGS_MAXIMUM
)

1512 
yycou¡
 = 1;

1513 
yysize
 = 
yysize0
;

1516 
yy¨g
[
yycou¡
++] = 
yyäame
[
yyx
];

1517 
yysize1
 = 
yysize
 + 
	`yyäamîr
 (0, 
yyäame
[
yyx
]);

1518 i‡(! (
yysize
 <
yysize1


1519 && 
yysize1
 <
YYSTACK_ALLOC_MAXIMUM
))

1521 
yysize
 = 
yysize1
;

1526 
yycou¡
)

1528 
	#YYCASE_
(
N
, 
S
) \

1529 
N
: \

1530 
yyf‹m©
 = 
S
; \

1531 

	)

1532 
	`YYCASE_
(0, 
	`YY_
("syntaxÉrror"));

1533 
	`YYCASE_
(1, 
	`YY_
("syntaxÉrror, unexpected %s"));

1534 
	`YYCASE_
(2, 
	`YY_
("syntaxÉrror, unexpected %s,Éxpecting %s"));

1535 
	`YYCASE_
(3, 
	`YY_
("syntaxÉrror, unexpected %s,Éxpecting %s or %s"));

1536 
	`YYCASE_
(4, 
	`YY_
("syntaxÉrror, unexpected %s,Éxpecting %s or %s or %s"));

1537 
	`YYCASE_
(5, 
	`YY_
("syntaxÉrror, unexpected %s,Éxpecting %s or %s or %s or %s"));

1538 #unde‡
YYCASE_


1541 
yysize1
 = 
yysize
 + 
	`yy°æí
 (
yyf‹m©
);

1542 i‡(! (
yysize
 <
yysize1
 && yysize1 <
YYSTACK_ALLOC_MAXIMUM
))

1544 
yysize
 = 
yysize1
;

1546 i‡(*
yymsg_Æloc
 < 
yysize
)

1548 *
yymsg_Æloc
 = 2 * 
yysize
;

1549 i‡(! (
yysize
 <*
yymsg_Æloc


1550 && *
yymsg_Æloc
 <
YYSTACK_ALLOC_MAXIMUM
))

1551 *
yymsg_Æloc
 = 
YYSTACK_ALLOC_MAXIMUM
;

1559 *
yyp
 = *
yymsg
;

1560 
yyi
 = 0;

1561 (*
yyp
 = *
yyf‹m©
) != '\0')

1562 i‡(*
yyp
 ='%' && 
yyf‹m©
[1] ='s' && 
yyi
 < 
yycou¡
)

1564 
yyp
 +
	`yyäamîr
 (yyp, 
yy¨g
[
yyi
++]);

1565 
yyf‹m©
 += 2;

1569 
yyp
++;

1570 
yyf‹m©
++;

1574 
	}
}

1582 #i‡(
deföed
 
__STDC__
 || deföed 
__C99__FUNC__
 \

1583 || 
deföed
 
	g__˝lu•lus
 || deföed 
	g_MSC_VER
)

1585 
	$yyde°ru˘
 (c⁄° *
yymsg
, 
yyty≥
, 
YYSTYPE
 *
yyvÆuï
)

1588 
	$yyde°ru˘
 (
yymsg
, 
yyty≥
, 
yyvÆuï
)

1589 c⁄° *
yymsg
;

1590 
yyty≥
;

1591 
YYSTYPE
 *
yyvÆuï
;

1594 
	`YYUSE
 (
yyvÆuï
);

1596 i‡(!
yymsg
)

1597 
yymsg
 = "Deleting";

1598 
	`YY_SYMBOL_PRINT
 (
yymsg
, 
yyty≥
, 
yyvÆuï
, 
yyloˇti⁄p
);

1600 
yyty≥
)

1606 
	}
}

1610 #ifde‡
YYPARSE_PARAM


1611 #i‡
deföed
 
__STDC__
 || deföed 
__˝lu•lus


1612 
yy∑r£
 (*
YYPARSE_PARAM
);

1614 
yy∑r£
 ();

1617 #i‡
deföed
 
__STDC__
 || deföed 
__˝lu•lus


1618 
yy∑r£
 ();

1620 
yy∑r£
 ();

1626 
	gyych¨
;

1629 
YYSTYPE
 
	gyylvÆ
;

1632 
	gyy√ºs
;

1639 #ifde‡
YYPARSE_PARAM


1640 #i‡(
deföed
 
__STDC__
 || deföed 
__C99__FUNC__
 \

1641 || 
deföed
 
	g__˝lu•lus
 || deföed 
	g_MSC_VER
)

1643 
	$yy∑r£
 (*
YYPARSE_PARAM
)

1646 
	$yy∑r£
 (
YYPARSE_PARAM
)

1647 *
YYPARSE_PARAM
;

1650 #i‡(
deföed
 
__STDC__
 || deföed 
__C99__FUNC__
 \

1651 || 
deföed
 
__˝lu•lus
 || deföed 
_MSC_VER
)

1653 
	$yy∑r£
 ()

1656 
	$yy∑r£
 ()

1661 
yy°©e
;

1663 
yyîr°©us
;

1673 
yyty≥_öt16
 
yysß
[
YYINITDEPTH
];

1674 
yyty≥_öt16
 *
yyss
;

1675 
yyty≥_öt16
 *
yys•
;

1678 
YYSTYPE
 
yyvß
[
YYINITDEPTH
];

1679 
YYSTYPE
 *
yyvs
;

1680 
YYSTYPE
 *
yyv•
;

1682 
YYSIZE_T
 
yy°acksize
;

1684 
yyn
;

1685 
yyªsu…
;

1687 
yytokí
;

1690 
YYSTYPE
 
yyvÆ
;

1692 #i‡
YYERROR_VERBOSE


1694 
yymsgbuf
[128];

1695 *
yymsg
 = 
yymsgbuf
;

1696 
YYSIZE_T
 
yymsg_Æloc
 =  
yymsgbuf
;

1699 
	#YYPOPSTACK
(
N
Ë(
yyv•
 -(N), 
yys•
 -(N))

	)

1703 
yyÀn
 = 0;

1705 
yytokí
 = 0;

1706 
yyss
 = 
yysß
;

1707 
yyvs
 = 
yyvß
;

1708 
yy°acksize
 = 
YYINITDEPTH
;

1710 
	`YYDPRINTF
 ((
°dîr
, "StartingÖarse\n"));

1712 
yy°©e
 = 0;

1713 
yyîr°©us
 = 0;

1714 
yy√ºs
 = 0;

1715 
yych¨
 = 
YYEMPTY
;

1721 
yys•
 = 
yyss
;

1722 
yyv•
 = 
yyvs
;

1724 
yy£t°©e
;

1729 
yy√w°©e
:

1732 
yys•
++;

1734 
yy£t°©e
:

1735 *
yys•
 = 
yy°©e
;

1737 i‡(
yyss
 + 
yy°acksize
 - 1 <
yys•
)

1740 
YYSIZE_T
 
yysize
 = 
yys•
 - 
yyss
 + 1;

1742 #ifde‡
yyovîÊow


1747 
YYSTYPE
 *
yyvs1
 = 
yyvs
;

1748 
yyty≥_öt16
 *
yyss1
 = 
yyss
;

1754 
	`yyovîÊow
 (
	`YY_
("memoryÉxhausted"),

1755 &
yyss1
, 
yysize
 *  (*
yys•
),

1756 &
yyvs1
, 
yysize
 *  (*
yyv•
),

1757 &
yy°acksize
);

1759 
yyss
 = 
yyss1
;

1760 
yyvs
 = 
yyvs1
;

1763 #i‚de‡
YYSTACK_RELOCATE


1764 
yyexhau°edœb
;

1767 i‡(
YYMAXDEPTH
 <
yy°acksize
)

1768 
yyexhau°edœb
;

1769 
yy°acksize
 *= 2;

1770 i‡(
YYMAXDEPTH
 < 
yy°acksize
)

1771 
yy°acksize
 = 
YYMAXDEPTH
;

1774 
yyty≥_öt16
 *
yyss1
 = 
yyss
;

1775 
yyÆloc
 *
yy±r
 =

1776 (
yyÆloc
 *Ë
	`YYSTACK_ALLOC
 (
	`YYSTACK_BYTES
 (
yy°acksize
));

1777 i‡(! 
yy±r
)

1778 
yyexhau°edœb
;

1779 
	`YYSTACK_RELOCATE
 (
yyss_Æloc
, 
yyss
);

1780 
	`YYSTACK_RELOCATE
 (
yyvs_Æloc
, 
yyvs
);

1781 #unde‡
YYSTACK_RELOCATE


1782 i‡(
yyss1
 !
yysß
)

1783 
	`YYSTACK_FREE
 (
yyss1
);

1788 
yys•
 = 
yyss
 + 
yysize
 - 1;

1789 
yyv•
 = 
yyvs
 + 
yysize
 - 1;

1791 
	`YYDPRINTF
 ((
°dîr
, "Stack size increasedÅo %lu\n",

1792 (Ë
yy°acksize
));

1794 i‡(
yyss
 + 
yy°acksize
 - 1 <
yys•
)

1795 
YYABORT
;

1798 
	`YYDPRINTF
 ((
°dîr
, "E¡îög sèã %d\n", 
yy°©e
));

1800 i‡(
yy°©e
 =
YYFINAL
)

1801 
YYACCEPT
;

1803 
yybackup
;

1808 
yybackup
:

1814 
yyn
 = 
yy∑˘
[
yy°©e
];

1815 i‡(
	`yy∑˘_vÆue_is_deÁu…
 (
yyn
))

1816 
yydeÁu…
;

1821 i‡(
yych¨
 =
YYEMPTY
)

1823 
	`YYDPRINTF
 ((
°dîr
, "ReadingáÅoken: "));

1824 
yych¨
 = 
YYLEX
;

1827 i‡(
yych¨
 <
YYEOF
)

1829 
yych¨
 = 
yytokí
 = 
YYEOF
;

1830 
	`YYDPRINTF
 ((
°dîr
, "NowátÉnd of input.\n"));

1834 
yytokí
 = 
	`YYTRANSLATE
 (
yych¨
);

1835 
	`YY_SYMBOL_PRINT
 ("Nexàtokí is", 
yytokí
, &
yylvÆ
, &
yyŒoc
);

1840 
yyn
 +
yytokí
;

1841 i‡(
yyn
 < 0 || 
YYLAST
 < yy¿|| 
yycheck
[yyn] !
yytokí
)

1842 
yydeÁu…
;

1843 
yyn
 = 
yyèbÀ
[yyn];

1844 i‡(
yyn
 <= 0)

1846 i‡(
	`yyèbÀ_vÆue_is_îr‹
 (
yyn
))

1847 
yyîæab
;

1848 
yyn
 = -yyn;

1849 
yyªdu˚
;

1854 i‡(
yyîr°©us
)

1855 
yyîr°©us
--;

1858 
	`YY_SYMBOL_PRINT
 ("Shi·ög", 
yytokí
, &
yylvÆ
, &
yyŒoc
);

1861 
yych¨
 = 
YYEMPTY
;

1863 
yy°©e
 = 
yyn
;

1864 *++
yyv•
 = 
yylvÆ
;

1866 
yy√w°©e
;

1872 
yydeÁu…
:

1873 
yyn
 = 
yydeÁ˘
[
yy°©e
];

1874 i‡(
yyn
 == 0)

1875 
yyîæab
;

1876 
yyªdu˚
;

1882 
yyªdu˚
:

1884 
yyÀn
 = 
yyr2
[
yyn
];

1894 
yyvÆ
 = 
yyv•
[1-
yyÀn
];

1897 
	`YY_REDUCE_PRINT
 (
yyn
);

1898 
yyn
)

1905 
ﬁ§_if
 *
ö
 = 
ﬁ§_˙f
->
öãrÁ˚s
;

1906 
	`¥ötf
("\nInterface Defaults");

1908 
ﬁ§_˙f
->
öãrÁ˚s
 = 
ö
->
√xt
;

1909 
ifs_ö_cuº_cfg
=0;

1911 
	`‰ì
(
ö
->
˙fi
);

1912 
	`‰ì
(
ö
);

1922 
ﬁ§_if
 *
ö
 = 
	`mÆloc
((*in));

1924 i‡(
ö
 =
NULL
) {

1925 
	`Ârötf
(
°dîr
, "Out of memory(ADD IF)\n");

1926 
YYABORT
;

1929 
ö
->
˙f
 = 
	`gë_deÁu…_if_c⁄fig
();

1930 
ö
->
˙fi
 = 
	`gë_deÁu…_if_c⁄fig
();

1932 i‡(
ö
->
˙f
 =
NULL
 || in->
˙fi
 == NULL) {

1933 
	`Ârötf
(
°dîr
, "Out of memory(ADD DEFIFRULE)\n");

1934 
YYABORT
;

1940 
ﬁ§_˙f
->
öãrÁ˚_deÁu…s
 = 
ö
->
˙f
;

1943 
ö
->
√xt
 = 
ﬁ§_˙f
->
öãrÁ˚s
;

1944 
ﬁ§_˙f
->
öãrÁ˚s
 = 
ö
;

1945 
ifs_ö_cuº_cfg
=1;

1947 
	`fÊush
(
°dout
);

1956 
ﬁ§_˙f
->
ùc_c⁄√˘i⁄s
 = (
yyv•
[(2Ë- (2)])->
öãgî
;

1957 
	`‰ì
((
yyv•
[(2) - (2)]));

1966 
ﬁ§_ù_addr
 
ùaddr
;

1967 
	`PARSER_DEBUG_PRINTF
("\tIPC ho°: %s\n", (
yyv•
[(2Ë- (2)])->
°rög
);

1969 i‡(
	`öë_©⁄
((
yyv•
[(2Ë- (2)])->
°rög
, &
ùaddr
.
v4
) == 0) {

1970 
	`Ârötf
(
°dîr
, "Faûed c⁄vîtög IPáddªs†IPC %s\n", (
yyv•
[(2Ë- (2)])->
°rög
);

1971 
YYABORT
;

1974 
	`ù_¥efix_li°_add
(&
ﬁ§_˙f
->
ùc_√ts
, &
ùaddr
, ol§_˙f->
max∂í
);

1976 
	`‰ì
((
yyv•
[(2Ë- (2)])->
°rög
);

1977 
	`‰ì
((
yyv•
[(2) - (2)]));

1986 
ﬁ§_ù_addr
 
ùaddr
, 
√tmask
;

1988 
	`PARSER_DEBUG_PRINTF
("\tIPCÇë: %s/%s\n", (
yyv•
[(2Ë- (3)])->
°rög
, (yyvsp[(3) - (3)])->string);

1990 i‡(
	`öë_±⁄
(
AF_INET
, (
yyv•
[(2Ë- (3)])->
°rög
, &
ùaddr
.
v4
) == 0) {

1991 
	`Ârötf
(
°dîr
, "Faûed c⁄vîtög IPÇë IPC %s\n", (
yyv•
[(2Ë- (3)])->
°rög
);

1992 
YYABORT
;

1995 i‡(
	`öë_±⁄
(
AF_INET
, (
yyv•
[(3Ë- (3)])->
°rög
, &
√tmask
.
v4
) == 0) {

1996 
	`Ârötf
(
°dîr
, "Faûed c⁄vîtög IP mask IPC %s\n", (
yyv•
[(3Ë- (3)])->
°rög
);

1997 
YYABORT
;

2000 
	`ù_¥efix_li°_add
(&
ﬁ§_˙f
->
ùc_√ts
, &
ùaddr
, 
	`ﬁ§_√tmask_to_¥efix
(&
√tmask
));

2002 
	`‰ì
((
yyv•
[(2Ë- (3)])->
°rög
);

2003 
	`‰ì
((
yyv•
[(2) - (3)]));

2004 
	`‰ì
((
yyv•
[(3Ë- (3)])->
°rög
);

2005 
	`‰ì
((
yyv•
[(3) - (3)]));

2014 
ﬁ§_ù_addr
 
ùaddr
;

2016 
	`PARSER_DEBUG_PRINTF
("\tIPCÇë: %s/%s\n", (
yyv•
[(2Ë- (4)])->
°rög
, (yyvsp[(3) - (4)])->string);

2018 i‡(
	`öë_±⁄
(
AF_INET
, (
yyv•
[(2Ë- (4)])->
°rög
, &
ùaddr
.
v4
) == 0) {

2019 
	`Ârötf
(
°dîr
, "Faûed c⁄vîtög IPÇë IPC %s\n", (
yyv•
[(2Ë- (4)])->
°rög
);

2020 
YYABORT
;

2023 i‡((
yyv•
[(4Ë- (4)])->
öãgî
 > 
ﬁ§_˙f
->
max∂í
) {

2024 
	`Ârötf
(
°dîr
, "ù˙ë: PªfixÜí %u > %d i†nŸáŒowed!\n", (
yyv•
[(4Ë- (4)])->
öãgî
, 
ﬁ§_˙f
->
max∂í
);

2025 
YYABORT
;

2028 
	`ù_¥efix_li°_add
(&
ﬁ§_˙f
->
ùc_√ts
, &
ùaddr
, (
yyv•
[(4Ë- (4)])->
öãgî
);

2030 
	`‰ì
((
yyv•
[(2Ë- (4)])->
°rög
);

2031 
	`‰ì
((
yyv•
[(2) - (4)]));

2032 
	`‰ì
((
yyv•
[(4) - (4)]));

2041 
if˙t
 = 
ifs_ö_cuº_cfg
;

2042 
ﬁ§_if
 *
ifs
 = 
ﬁ§_˙f
->
öãrÁ˚s
;

2044 
	`PARSER_DEBUG_PRINTF
("Fixed wûlög√ss: %d\n", (
yyv•
[(2Ë- (2)])->
öãgî
);

2046 
if˙t
) {

2047 
ifs
->
˙f
->
weight
.
vÆue
 = (
yyv•
[(2Ë- (2)])->
öãgî
;

2048 
ifs
->
˙f
->
weight
.
fixed
 = 
åue
;

2049 
ifs
->
˙fi
->
weight
.
vÆue
 = (
yyv•
[(2Ë- (2)])->
öãgî
;

2050 
ifs
->
˙fi
->
weight
.
fixed
 = 
åue
;

2052 
ifs
 = ifs->
√xt
;

2053 
if˙t
--;

2056 
	`‰ì
((
yyv•
[(2) - (2)]));

2065 
if˙t
 = 
ifs_ö_cuº_cfg
;

2066 
ﬁ§_if
 *
ifs
 = 
ﬁ§_˙f
->
öãrÁ˚s
;

2067 
mode
 = (
	`°rcmp
((
yyv•
[(2Ë- (2)])->
°rög
, "ëhî"Ë=0)?
IF_MODE_ETHER
:
IF_MODE_MESH
;

2069 
	`PARSER_DEBUG_PRINTF
("\tMode: %s\n", (
yyv•
[(2Ë- (2)])->
°rög
);

2071 
	`SET_IFS_CONF
(
ifs
, 
if˙t
, 
mode
, mode);

2073 
	`‰ì
((
yyv•
[(2Ë- (2)])->
°rög
);

2074 
	`‰ì
((
yyv•
[(2) - (2)]));

2083 
ö_addr
 
ö
;

2084 
if˙t
 = 
ifs_ö_cuº_cfg
;

2085 
ﬁ§_if
 *
ifs
 = 
ﬁ§_˙f
->
öãrÁ˚s
;

2087 
	`PARSER_DEBUG_PRINTF
("\tIPv4 brﬂdˇ°: %s\n", (
yyv•
[(1Ë- (1)])->
°rög
);

2089 i‡(
	`öë_©⁄
((
yyv•
[(1Ë- (1)])->
°rög
, &
ö
) == 0) {

2090 
	`Ârötf
(
°dîr
, "i£tùv4br: Faûed c⁄vîtög IPáddªs†%s\n", (
yyv•
[(1Ë- (1)])->
°rög
);

2091 
YYABORT
;

2094 
	`SET_IFS_CONF
(
ifs
, 
if˙t
, 
ùv4_mu…iˇ°
.
v4
, 
ö
);

2096 
	`‰ì
((
yyv•
[(1Ë- (1)])->
°rög
);

2097 
	`‰ì
((
yyv•
[(1) - (1)]));

2106 
ö6_addr
 
ö6
;

2107 
if˙t
 = 
ifs_ö_cuº_cfg
;

2108 
ﬁ§_if
 *
ifs
 = 
ﬁ§_˙f
->
öãrÁ˚s
;

2110 
	`PARSER_DEBUG_PRINTF
("\tIPv6 mu…iˇ°: %s\n", (
yyv•
[(2Ë- (2)])->
°rög
);

2112 i‡(
	`öë_±⁄
(
AF_INET6
, (
yyv•
[(2Ë- (2)])->
°rög
, &
ö6
) <= 0) {

2113 
	`Ârötf
(
°dîr
, "i£tùv6mc: Faûed c⁄vîtög IPáddªs†%s\n", (
yyv•
[(2Ë- (2)])->
°rög
);

2114 
YYABORT
;

2117 
	`SET_IFS_CONF
(
ifs
, 
if˙t
, 
ùv6_mu…iˇ°
.
v6
, 
ö6
);

2119 
	`‰ì
((
yyv•
[(2Ë- (2)])->
°rög
);

2120 
	`‰ì
((
yyv•
[(2) - (2)]));

2129 
ö_addr
 
ö
;

2130 
if˙t
 = 
ifs_ö_cuº_cfg
;

2131 
ﬁ§_if
 *
ifs
 = 
ﬁ§_˙f
->
öãrÁ˚s
;

2133 
	`PARSER_DEBUG_PRINTF
("\tIPv4 src: %s\n", (
yyv•
[(2Ë- (2)])->
°rög
);

2135 i‡(
	`öë_©⁄
((
yyv•
[(2Ë- (2)])->
°rög
, &
ö
) == 0) {

2136 
	`Ârötf
(
°dîr
, "i£tùv4§c: Faûed c⁄vîtög IPáddªs†%s\n", (
yyv•
[(2Ë- (2)])->
°rög
);

2137 
YYABORT
;

2140 
	`SET_IFS_CONF
(
ifs
, 
if˙t
, 
ùv4_§c
.
v4
, 
ö
);

2142 
	`‰ì
((
yyv•
[(2Ë- (2)])->
°rög
);

2143 
	`‰ì
((
yyv•
[(2) - (2)]));

2152 
ﬁ§_ù_¥efix
 
¥6
;

2153 
if˙t
 = 
ifs_ö_cuº_cfg
;

2154 
ﬁ§_if
 *
ifs
 = 
ﬁ§_˙f
->
öãrÁ˚s
;

2156 
	`PARSER_DEBUG_PRINTF
("\tIPv6 sr¯¥efix: %s/%d\n", (
yyv•
[(2Ë- (4)])->
°rög
, (yyv•[(4Ë- (4)])->
öãgî
);

2158 i‡(
	`öë_±⁄
(
AF_INET6
, (
yyv•
[(2Ë- (4)])->
°rög
, &
¥6
.
¥efix
.
v6
) <= 0) {

2159 
	`Ârötf
(
°dîr
, "i£tùv6§c: Faûed c⁄vîtög IPáddªs†%s\n", (
yyv•
[(2Ë- (4)])->
°rög
);

2160 
YYABORT
;

2162 i‡((
yyv•
[(4Ë- (4)])->
öãgî
 > 128) {

2163 
	`Ârötf
(
°dîr
, "i£tùv6§c: IŒegÆ PªfixÀngth %d\n", (
yyv•
[(4Ë- (4)])->
öãgî
);

2164 
YYABORT
;

2166 
¥6
.
¥efix_Àn
 = (
yyv•
[(4Ë- (4)])->
öãgî
;

2168 
	`SET_IFS_CONF
(
ifs
, 
if˙t
, 
ùv6_§c
, 
¥6
);

2170 
	`‰ì
((
yyv•
[(2Ë- (4)])->
°rög
);

2171 
	`‰ì
((
yyv•
[(2) - (4)]));

2180 
ﬁ§_ù_¥efix
 
¥6
;

2181 
if˙t
 = 
ifs_ö_cuº_cfg
;

2182 
ﬁ§_if
 *
ifs
 = 
ﬁ§_˙f
->
öãrÁ˚s
;

2184 
	`PARSER_DEBUG_PRINTF
("\tIPv6 sr¯¥efix: %s/%d\n", (
yyv•
[(2Ë- (2)])->
°rög
, 128);

2186 i‡(
	`öë_±⁄
(
AF_INET6
, (
yyv•
[(2Ë- (2)])->
°rög
, &
¥6
.
¥efix
.
v6
) <= 0) {

2187 
	`Ârötf
(
°dîr
, "i£tùv6§c: Faûed c⁄vîtög IPáddªs†%s\n", (
yyv•
[(2Ë- (2)])->
°rög
);

2188 
YYABORT
;

2190 
¥6
.
¥efix_Àn
 = 128;

2192 
	`SET_IFS_CONF
(
ifs
, 
if˙t
, 
ùv6_§c
, 
¥6
);

2194 
	`‰ì
((
yyv•
[(2Ë- (2)])->
°rög
);

2195 
	`‰ì
((
yyv•
[(2) - (2)]));

2204 
if˙t
 = 
ifs_ö_cuº_cfg
;

2205 
ﬁ§_if
 *
ifs
 = 
ﬁ§_˙f
->
öãrÁ˚s
;

2207 
	`PARSER_DEBUG_PRINTF
("\tHELLO i¡îvÆ: %0.2f\n", (
yyv•
[(2Ë- (2)])->
Êﬂtög
);

2209 
	`SET_IFS_CONF
(
ifs
, 
if˙t
, 
hñlo_∑øms
.
emissi⁄_öãrvÆ
, (
yyv•
[(2Ë- (2)])->
Êﬂtög
);

2211 
	`‰ì
((
yyv•
[(2) - (2)]));

2220 
if˙t
 = 
ifs_ö_cuº_cfg
;

2221 
ﬁ§_if
 *
ifs
 = 
ﬁ§_˙f
->
öãrÁ˚s
;

2223 
	`PARSER_DEBUG_PRINTF
("\tHELLO vÆidôy: %0.2f\n", (
yyv•
[(2Ë- (2)])->
Êﬂtög
);

2225 
	`SET_IFS_CONF
(
ifs
, 
if˙t
, 
hñlo_∑øms
.
vÆidôy_time
, (
yyv•
[(2Ë- (2)])->
Êﬂtög
);

2227 
	`‰ì
((
yyv•
[(2) - (2)]));

2236 
if˙t
 = 
ifs_ö_cuº_cfg
;

2237 
ﬁ§_if
 *
ifs
 = 
ﬁ§_˙f
->
öãrÁ˚s
;

2239 
	`PARSER_DEBUG_PRINTF
("\tTC i¡îvÆ: %0.2f\n", (
yyv•
[(2Ë- (2)])->
Êﬂtög
);

2241 
	`SET_IFS_CONF
(
ifs
, 
if˙t
, 
tc_∑øms
.
emissi⁄_öãrvÆ
, (
yyv•
[(2Ë- (2)])->
Êﬂtög
);

2243 
	`‰ì
((
yyv•
[(2) - (2)]));

2252 
if˙t
 = 
ifs_ö_cuº_cfg
;

2253 
ﬁ§_if
 *
ifs
 = 
ﬁ§_˙f
->
öãrÁ˚s
;

2255 
	`PARSER_DEBUG_PRINTF
("\tTC vÆidôy: %0.2f\n", (
yyv•
[(2Ë- (2)])->
Êﬂtög
);

2257 
	`SET_IFS_CONF
(
ifs
, 
if˙t
, 
tc_∑øms
.
vÆidôy_time
, (
yyv•
[(2Ë- (2)])->
Êﬂtög
);

2259 
	`‰ì
((
yyv•
[(2) - (2)]));

2268 
if˙t
 = 
ifs_ö_cuº_cfg
;

2269 
ﬁ§_if
 *
ifs
 = 
ﬁ§_˙f
->
öãrÁ˚s
;

2272 
	`PARSER_DEBUG_PRINTF
("\tMID i¡îvÆ: %0.2f\n", (
yyv•
[(2Ë- (2)])->
Êﬂtög
);

2274 
	`SET_IFS_CONF
(
ifs
, 
if˙t
, 
mid_∑øms
.
emissi⁄_öãrvÆ
, (
yyv•
[(2Ë- (2)])->
Êﬂtög
);

2276 
	`‰ì
((
yyv•
[(2) - (2)]));

2285 
if˙t
 = 
ifs_ö_cuº_cfg
;

2286 
ﬁ§_if
 *
ifs
 = 
ﬁ§_˙f
->
öãrÁ˚s
;

2288 
	`PARSER_DEBUG_PRINTF
("\tMID vÆidôy: %0.2f\n", (
yyv•
[(2Ë- (2)])->
Êﬂtög
);

2290 
	`SET_IFS_CONF
(
ifs
, 
if˙t
, 
mid_∑øms
.
vÆidôy_time
, (
yyv•
[(2Ë- (2)])->
Êﬂtög
);

2292 
	`‰ì
((
yyv•
[(2) - (2)]));

2301 
if˙t
 = 
ifs_ö_cuº_cfg
;

2302 
ﬁ§_if
 *
ifs
 = 
ﬁ§_˙f
->
öãrÁ˚s
;

2304 
	`PARSER_DEBUG_PRINTF
("\tHNA i¡îvÆ: %0.2f\n", (
yyv•
[(2Ë- (2)])->
Êﬂtög
);

2306 
	`SET_IFS_CONF
(
ifs
, 
if˙t
, 
h«_∑øms
.
emissi⁄_öãrvÆ
, (
yyv•
[(2Ë- (2)])->
Êﬂtög
);

2308 
	`‰ì
((
yyv•
[(2) - (2)]));

2317 
if˙t
 = 
ifs_ö_cuº_cfg
;

2318 
ﬁ§_if
 *
ifs
 = 
ﬁ§_˙f
->
öãrÁ˚s
;

2320 
	`PARSER_DEBUG_PRINTF
("\tHNA vÆidôy: %0.2f\n", (
yyv•
[(2Ë- (2)])->
Êﬂtög
);

2322 
	`SET_IFS_CONF
(
ifs
, 
if˙t
, 
h«_∑øms
.
vÆidôy_time
, (
yyv•
[(2Ë- (2)])->
Êﬂtög
);

2324 
	`‰ì
((
yyv•
[(2) - (2)]));

2333 
if˙t
 = 
ifs_ö_cuº_cfg
;

2334 
ﬁ§_if
 *
ifs
 = 
ﬁ§_˙f
->
öãrÁ˚s
;

2336 
	`PARSER_DEBUG_PRINTF
("\tAutodëe˘ ch™ges: %s\n", (
yyv•
[(2Ë- (2)])->
boﬁón
 ? "YES" : "NO");

2338 
	`SET_IFS_CONF
(
ifs
, 
if˙t
, 
autodëe˘_chg
, (
yyv•
[(2Ë- (2)])->
boﬁón
);

2340 
	`‰ì
((
yyv•
[(2) - (2)]));

2349 i‡(
	`lq_mu…_hñ≥r
((
yyv•
[(2) - (3)]), (yyvsp[(3) - (3)])) < 0) {

2350 
YYABORT
;

2360 i‡(
	`lq_mu…_hñ≥r
((
yyv•
[(2) - (3)]), (yyvsp[(3) - (3)])) < 0) {

2361 
YYABORT
;

2371 i‡(
	`lq_mu…_hñ≥r
((
yyv•
[(2) - (3)]), (yyvsp[(3) - (3)])) < 0) {

2372 
YYABORT
;

2382 
ﬁ§_˙f
->
debug_Àvñ
 = (
yyv•
[(2Ë- (2)])->
öãgî
;

2383 
	`PARSER_DEBUG_PRINTF
("DebugÜevñ: %d\n", 
ﬁ§_˙f
->
debug_Àvñ
);

2384 
	`‰ì
((
yyv•
[(2) - (2)]));

2393 i‡((
yyv•
[(2Ë- (2)])->
öãgî
 == 4) {

2394 
ﬁ§_˙f
->
ù_vîsi⁄
 = 
AF_INET
;

2395 
ﬁ§_˙f
->
ùsize
 = (
ö_addr
);

2396 
ﬁ§_˙f
->
max∂í
 = 32;

2397 } i‡((
yyv•
[(2Ë- (2)])->
öãgî
 == 6) {

2398 
ﬁ§_˙f
->
ù_vîsi⁄
 = 
AF_INET6
;

2399 
ﬁ§_˙f
->
ùsize
 = (
ö6_addr
);

2400 
ﬁ§_˙f
->
max∂í
 = 128;

2402 
	`Ârötf
(
°dîr
, "IPversion must be 4 or 6!\n");

2403 
YYABORT
;

2406 
	`PARSER_DEBUG_PRINTF
("IpVîsi⁄: %d\n", (
yyv•
[(2Ë- (2)])->
öãgî
);

2407 
	`‰ì
((
yyv•
[(2) - (2)]));

2416 
i
;

2417 
	`PARSER_DEBUG_PRINTF
("FIBMëric: %s\n", (
yyv•
[(2Ë- (2)])->
°rög
);

2418 
i
=0; i<
FIBM_CNT
; i++) {

2419 i‡(
	`°rcmp
((
yyv•
[(2Ë- (2)])->
°rög
, 
FIB_METRIC_TXT
[
i
]) == 0) {

2420 
ﬁ§_˙f
->
fib_mëric
 = 
i
;

2424 i‡(
i
 =
FIBM_CNT
) {

2425 
	`Ârötf
(
°dîr
, "Bad FIBMëri¯vÆue: %s\n", (
yyv•
[(2Ë- (2)])->
°rög
);

2426 
YYABORT
;

2428 
	`‰ì
((
yyv•
[(1) - (2)]));

2429 
	`‰ì
((
yyv•
[(2Ë- (2)])->
°rög
);

2430 
	`‰ì
((
yyv•
[(2) - (2)]));

2439 
ﬁ§_ù_addr
 
ùaddr
, 
√tmask
;

2441 i‡(
ﬁ§_˙f
->
ù_vîsi⁄
 =
AF_INET6
) {

2442 
	`Ârötf
(
°dîr
, "IPv4áddresses can only be used if \"IpVersion\" == 4, skipping HNA.\n");

2443 
	`ﬁ§_°¨tup_¶ìp
(3);

2446 
	`PARSER_DEBUG_PRINTF
("HNA IPv4É¡ry: %s/%s\n", (
yyv•
[(1Ë- (2)])->
°rög
, (yyvsp[(2) - (2)])->string);

2448 i‡(
	`öë_±⁄
(
AF_INET
, (
yyv•
[(1Ë- (2)])->
°rög
, &
ùaddr
.
v4
) <= 0) {

2449 
	`Ârötf
(
°dîr
, "ih«4íåy: Faûed c⁄vîtög IPáddªs†%s\n", (
yyv•
[(1Ë- (2)])->
°rög
);

2450 
YYABORT
;

2452 i‡(
	`öë_±⁄
(
AF_INET
, (
yyv•
[(2Ë- (2)])->
°rög
, &
√tmask
.
v4
) <= 0) {

2453 
	`Ârötf
(
°dîr
, "ih«4íåy: Faûed c⁄vîtög IPáddªs†%s\n", (
yyv•
[(1Ë- (2)])->
°rög
);

2454 
YYABORT
;

2458 i‡((
ùaddr
.
v4
.
s_addr
 & ~
√tmask
.v4.s_addr) != 0) {

2459 
	`Ârötf
(
°dîr
, "ih«4íåy: Thêùaddªs†\"%s\" i†nŸáÇëw‹káddªss!\n", (
yyv•
[(1Ë- (2)])->
°rög
);

2460 
YYABORT
;

2464 
	`ù_¥efix_li°_add
(&
ﬁ§_˙f
->
h«_íåõs
, &
ùaddr
, 
	`ﬁ§_√tmask_to_¥efix
(&
√tmask
));

2466 
	`‰ì
((
yyv•
[(1Ë- (2)])->
°rög
);

2467 
	`‰ì
((
yyv•
[(1) - (2)]));

2468 
	`‰ì
((
yyv•
[(2Ë- (2)])->
°rög
);

2469 
	`‰ì
((
yyv•
[(2) - (2)]));

2478 
ﬁ§_ù_addr
 
ùaddr
, 
√tmask
;

2480 i‡(
ﬁ§_˙f
->
ù_vîsi⁄
 =
AF_INET6
) {

2481 
	`Ârötf
(
°dîr
, "IPv4áddresses can only be used if \"IpVersion\" == 4, skipping HNA.\n");

2482 
	`ﬁ§_°¨tup_¶ìp
(3);

2485 
	`PARSER_DEBUG_PRINTF
("HNA IPv4É¡ry: %s/%d\n", (
yyv•
[(1Ë- (3)])->
°rög
, (yyv•[(3Ë- (3)])->
öãgî
);

2487 i‡(
	`öë_±⁄
(
AF_INET
, (
yyv•
[(1Ë- (3)])->
°rög
, &
ùaddr
.
v4
) <= 0) {

2488 
	`Ârötf
(
°dîr
, "ih«4íåy: Faûed c⁄vîtög IPáddªs†%s\n", (
yyv•
[(1Ë- (3)])->
°rög
);

2489 
YYABORT
;

2491 i‡((
yyv•
[(3Ë- (3)])->
öãgî
 > 
ﬁ§_˙f
->
max∂í
) {

2492 
	`Ârötf
(
°dîr
, "ih«4íåy: PªfixÜí %u > %d i†nŸáŒowed!\n", (
yyv•
[(3Ë- (3)])->
öãgî
, 
ﬁ§_˙f
->
max∂í
);

2493 
YYABORT
;

2497 
	`ﬁ§_¥efix_to_√tmask
(&
√tmask
, (
yyv•
[(3Ë- (3)])->
öãgî
);

2498 i‡((
ùaddr
.
v4
.
s_addr
 & ~
√tmask
.v4.s_addr) != 0) {

2499 
	`Ârötf
(
°dîr
, "ih«4íåy: Thêùaddªs†\"%s\" i†nŸáÇëw‹káddªss!\n", (
yyv•
[(1Ë- (3)])->
°rög
);

2500 
YYABORT
;

2504 
	`ù_¥efix_li°_add
(&
ﬁ§_˙f
->
h«_íåõs
, &
ùaddr
, (
yyv•
[(3Ë- (3)])->
öãgî
);

2506 
	`‰ì
((
yyv•
[(1Ë- (3)])->
°rög
);

2507 
	`‰ì
((
yyv•
[(1) - (3)]));

2508 
	`‰ì
((
yyv•
[(3) - (3)]));

2517 i‡(
	`add_ùv6_addr
((
yyv•
[(1) - (2)]), (yyvsp[(2) - (2)]))) {

2518 
YYABORT
;

2528 i‡(
	`add_ùv6_addr
((
yyv•
[(1) - (3)]), (yyvsp[(3) - (3)]))) {

2529 
YYABORT
;

2539 
	`PARSER_DEBUG_PRINTF
("setting ifs_in_curr_cfg = 0\n");

2540 
ifs_ö_cuº_cfg
 = 0;

2549 
ﬁ§_if
 *
ö
, *
œ°
;

2550 
ö
 = 
ﬁ§_˙f
->
öãrÁ˚s
;

2551 
œ°
 = 
NULL
;

2552 
ö
 !
NULL
) {

2553 i‡(
	`°rcmp
(
ö
->
«me
, (
yyv•
[(1Ë- (1)])->
°rög
) == 0) {

2554 
	`‰ì
 ((
yyv•
[(1Ë- (1)])->
°rög
);

2557 
œ°
 = 
ö
;

2558 
ö
 = in->
√xt
;

2561 i‡(
ö
 !
NULL
) {

2563 i‡(
œ°
) {

2564 
œ°
->
√xt
 = 
ö
->next;

2567 
ﬁ§_˙f
->
öãrÁ˚s
 = 
ö
->
√xt
;

2571 
ö
 = 
	`mÆloc
((*in));

2572 i‡(
ö
 =
NULL
) {

2573 
	`Ârötf
(
°dîr
, "Out of memory(ADD IF)\n");

2574 
YYABORT
;

2576 
	`mem£t
(
ö
, 0, (*in));

2578 
ö
->
˙f
 = 
	`mÆloc
((*in->cnf));

2579 i‡(
ö
->
˙f
 =
NULL
) {

2580 
	`Ârötf
(
°dîr
, "Out of memory(ADD IFRULE)\n");

2581 
YYABORT
;

2583 
	`mem£t
(
ö
->
˙f
, 0x00, (*in->cnf));

2585 
ö
->
˙fi
 = 
	`mÆloc
((*in->cnfi));

2586 i‡(
ö
->
˙f
 =
NULL
) {

2587 
	`Ârötf
(
°dîr
, "Out of memory(ADD IFRULE)\n");

2588 
YYABORT
;

2590 
	`mem£t
(
ö
->
˙fi
, 0xFF, (*in->cnfi));

2591 
ö
->
˙fi
->
‹ig_lq_mu…_˙t
=0;

2593 
ö
->
«me
 = (
yyv•
[(1Ë- (1)])->
°rög
;

2596 
ö
->
√xt
 = 
ﬁ§_˙f
->
öãrÁ˚s
;

2597 
ﬁ§_˙f
->
öãrÁ˚s
 = 
ö
;

2598 
ifs_ö_cuº_cfg
++;

2599 
	`‰ì
((
yyv•
[(1) - (1)]));

2608 
	`PARSER_DEBUG_PRINTF
("Noöà£àtÿ%d\n", (
yyv•
[(2Ë- (2)])->
boﬁón
);

2609 
ﬁ§_˙f
->
Ælow_no_öãrÁ˚s
 = (
yyv•
[(2Ë- (2)])->
boﬁón
;

2610 
	`‰ì
((
yyv•
[(2) - (2)]));

2619 
	`PARSER_DEBUG_PRINTF
("TOS: %d\n", (
yyv•
[(2Ë- (2)])->
öãgî
);

2620 
ﬁ§_˙f
->
tos
 = (
yyv•
[(2Ë- (2)])->
öãgî
;

2621 
	`‰ì
((
yyv•
[(2) - (2)]));

2631 
	`PARSER_DEBUG_PRINTF
("Ol§P‹t: %d\n", (
yyv•
[(2Ë- (2)])->
öãgî
);

2632 
ﬁ§_˙f
->
ﬁ§p‹t
 = (
yyv•
[(2Ë- (2)])->
öãgî
;

2633 
	`‰ì
((
yyv•
[(2) - (2)]));

2642 
	`PARSER_DEBUG_PRINTF
("RtPrŸo: %d\n", (
yyv•
[(2Ë- (2)])->
öãgî
);

2643 
ﬁ§_˙f
->
π_¥Ÿo
 = (
yyv•
[(2Ë- (2)])->
öãgî
;

2644 
	`‰ì
((
yyv•
[(2) - (2)]));

2653 
	`PARSER_DEBUG_PRINTF
("RtTabÀ: %d\n", (
yyv•
[(2Ë- (2)])->
öãgî
);

2654 
ﬁ§_˙f
->
π_èbÀ
 = (
yyv•
[(2Ë- (2)])->
öãgî
;

2655 
	`‰ì
((
yyv•
[(2) - (2)]));

2664 
	`PARSER_DEBUG_PRINTF
("RtTable:áuto\n");

2665 
ﬁ§_˙f
->
π_èbÀ
 = 
DEF_RT_AUTO
;

2666 
	`‰ì
((
yyv•
[(2) - (2)]));

2675 
	`PARSER_DEBUG_PRINTF
("RtTabÀDeÁu…: %d\n", (
yyv•
[(2Ë- (2)])->
öãgî
);

2676 
ﬁ§_˙f
->
π_èbÀ_deÁu…
 = (
yyv•
[(2Ë- (2)])->
öãgî
;

2677 
	`‰ì
((
yyv•
[(2) - (2)]));

2686 
	`PARSER_DEBUG_PRINTF
("RtTableDefault:áuto\n");

2687 
ﬁ§_˙f
->
π_èbÀ_deÁu…
 = 
DEF_RT_AUTO
;

2688 
	`‰ì
((
yyv•
[(2) - (2)]));

2697 
	`PARSER_DEBUG_PRINTF
("RtTabÀTu¬ñ: %d\n", (
yyv•
[(2Ë- (2)])->
öãgî
);

2698 
ﬁ§_˙f
->
π_èbÀ_tu¬ñ
 = (
yyv•
[(2Ë- (2)])->
öãgî
;

2699 
	`‰ì
((
yyv•
[(2) - (2)]));

2708 
	`PARSER_DEBUG_PRINTF
("RtTableTunnel:áuto\n");

2709 
ﬁ§_˙f
->
π_èbÀ_tu¬ñ
 = 
DEF_RT_AUTO
;

2710 
	`‰ì
((
yyv•
[(2) - (2)]));

2719 
	`PARSER_DEBUG_PRINTF
("RtTabÀPri‹ôy: %d\n", (
yyv•
[(2Ë- (2)])->
öãgî
);

2720 
ﬁ§_˙f
->
π_èbÀ_¥i
 = (
yyv•
[(2Ë- (2)])->
öãgî
;

2721 
	`‰ì
((
yyv•
[(2) - (2)]));

2730 
	`PARSER_DEBUG_PRINTF
("RtTablePriority:áuto\n");

2731 
ﬁ§_˙f
->
π_èbÀ_¥i
 = 
DEF_RT_AUTO
;

2732 
	`‰ì
((
yyv•
[(2) - (2)]));

2741 
	`PARSER_DEBUG_PRINTF
("RtTablePriority:Çone\n");

2742 
ﬁ§_˙f
->
π_èbÀ_¥i
 = 
DEF_RT_NONE
;

2743 
	`‰ì
((
yyv•
[(2) - (2)]));

2752 
	`PARSER_DEBUG_PRINTF
("RtTabÀDeÁu…Pri‹ôy: %d\n", (
yyv•
[(2Ë- (2)])->
öãgî
);

2753 
ﬁ§_˙f
->
π_èbÀ_deÁu…_¥i
 = (
yyv•
[(2Ë- (2)])->
öãgî
;

2754 
	`‰ì
((
yyv•
[(2) - (2)]));

2763 
	`PARSER_DEBUG_PRINTF
("RtTableDefaultPriority:áuto\n");

2764 
ﬁ§_˙f
->
π_èbÀ_deÁu…_¥i
 = 
DEF_RT_AUTO
;

2765 
	`‰ì
((
yyv•
[(2) - (2)]));

2774 
	`PARSER_DEBUG_PRINTF
("RtTableDefaultPriority:Çone\n");

2775 
ﬁ§_˙f
->
π_èbÀ_deÁu…_¥i
 = 
DEF_RT_NONE
;

2776 
	`‰ì
((
yyv•
[(2) - (2)]));

2785 
	`PARSER_DEBUG_PRINTF
("RtTabÀTu¬ñPri‹ôy: %d\n", (
yyv•
[(2Ë- (2)])->
öãgî
);

2786 
ﬁ§_˙f
->
π_èbÀ_tu¬ñ_¥i
 = (
yyv•
[(2Ë- (2)])->
öãgî
;

2787 
	`‰ì
((
yyv•
[(2) - (2)]));

2796 
	`PARSER_DEBUG_PRINTF
("RtTableTunnelPriority:áuto\n");

2797 
ﬁ§_˙f
->
π_èbÀ_tu¬ñ_¥i
 = 
DEF_RT_AUTO
;

2798 
	`‰ì
((
yyv•
[(2) - (2)]));

2807 
	`PARSER_DEBUG_PRINTF
("RtTableTunnelPriority:Çone\n");

2808 
ﬁ§_˙f
->
π_èbÀ_tu¬ñ_¥i
 = 
DEF_RT_NONE
;

2809 
	`‰ì
((
yyv•
[(2) - (2)]));

2818 
	`PARSER_DEBUG_PRINTF
("RtTabÀDeÁu…Ol§Pri‹ôy: %d\n", (
yyv•
[(2Ë- (2)])->
öãgî
);

2819 
ﬁ§_˙f
->
π_èbÀ_deÁu…ﬁ§_¥i
 = (
yyv•
[(2Ë- (2)])->
öãgî
;

2820 
	`‰ì
((
yyv•
[(2) - (2)]));

2829 
	`PARSER_DEBUG_PRINTF
("RtTableDefaultOlsrPriority:áuto\n");

2830 
ﬁ§_˙f
->
π_èbÀ_deÁu…ﬁ§_¥i
 = 
DEF_RT_AUTO
;

2831 
	`‰ì
((
yyv•
[(2) - (2)]));

2840 
	`PARSER_DEBUG_PRINTF
("RtTableDefaultOlsrPriority:Çone\n");

2841 
ﬁ§_˙f
->
π_èbÀ_deÁu…ﬁ§_¥i
 = 
DEF_RT_NONE
;

2842 
	`‰ì
((
yyv•
[(2) - (2)]));

2851 
	`PARSER_DEBUG_PRINTF
("Wûlög√ss: %d\n", (
yyv•
[(2Ë- (2)])->
öãgî
);

2852 
ﬁ§_˙f
->
wûlög√ss_auto
 = 
Ál£
;

2853 
ﬁ§_˙f
->
wûlög√ss
 = (
yyv•
[(2Ë- (2)])->
öãgî
;

2854 
	`‰ì
((
yyv•
[(2) - (2)]));

2863 
ﬁ§_˙f
->
u£_hy°îesis
 = (
yyv•
[(2Ë- (2)])->
boﬁón
;

2864 
	`PARSER_DEBUG_PRINTF
("Hy°îesi†%s\n", 
ﬁ§_˙f
->
u£_hy°îesis
 ? "enabled" : "disabled");

2865 
	`‰ì
((
yyv•
[(2) - (2)]));

2874 
ﬁ§_˙f
->
hy°îesis_∑øm
.
sˇlög
 = (
yyv•
[(2Ë- (2)])->
Êﬂtög
;

2875 
	`PARSER_DEBUG_PRINTF
("Hy°îesi†Sˇlög: %0.2f\n", (
yyv•
[(2Ë- (2)])->
Êﬂtög
);

2876 
	`‰ì
((
yyv•
[(2) - (2)]));

2885 
ﬁ§_˙f
->
hy°îesis_∑øm
.
thr_high
 = (
yyv•
[(2Ë- (2)])->
Êﬂtög
;

2886 
	`PARSER_DEBUG_PRINTF
("Hy°îesi†UµîThr: %0.2f\n", (
yyv•
[(2Ë- (2)])->
Êﬂtög
);

2887 
	`‰ì
((
yyv•
[(2) - (2)]));

2896 
ﬁ§_˙f
->
hy°îesis_∑øm
.
thr_low
 = (
yyv•
[(2Ë- (2)])->
Êﬂtög
;

2897 
	`PARSER_DEBUG_PRINTF
("Hy°îesi†LowîThr: %0.2f\n", (
yyv•
[(2Ë- (2)])->
Êﬂtög
);

2898 
	`‰ì
((
yyv•
[(2) - (2)]));

2907 
	`PARSER_DEBUG_PRINTF
("PﬁÃ©ê%0.2f\n", (
yyv•
[(2Ë- (2)])->
Êﬂtög
);

2908 
ﬁ§_˙f
->
pﬁÃ©e
 = (
yyv•
[(2Ë- (2)])->
Êﬂtög
;

2909 
	`‰ì
((
yyv•
[(2) - (2)]));

2918 
	`PARSER_DEBUG_PRINTF
("NIC Ch™ge†PﬁÃ©ê%0.2f\n", (
yyv•
[(2Ë- (2)])->
Êﬂtög
);

2919 
ﬁ§_˙f
->
nic_chgs_pﬁÃ©e
 = (
yyv•
[(2Ë- (2)])->
Êﬂtög
;

2920 
	`‰ì
((
yyv•
[(2) - (2)]));

2929 
	`PARSER_DEBUG_PRINTF
("TCÑedund™cy %d\n", (
yyv•
[(2Ë- (2)])->
öãgî
);

2930 
ﬁ§_˙f
->
tc_ªdund™cy
 = (
yyv•
[(2Ë- (2)])->
öãgî
;

2931 
	`‰ì
((
yyv•
[(2) - (2)]));

2940 
	`PARSER_DEBUG_PRINTF
("MPR covîagê%d\n", (
yyv•
[(2Ë- (2)])->
öãgî
);

2941 
ﬁ§_˙f
->
m¥_covîage
 = (
yyv•
[(2Ë- (2)])->
öãgî
;

2942 
	`‰ì
((
yyv•
[(2) - (2)]));

2951 
	`PARSER_DEBUG_PRINTF
("Lök quÆôyÜevñ %d\n", (
yyv•
[(2Ë- (2)])->
öãgî
);

2952 
ﬁ§_˙f
->
lq_Àvñ
 = (
yyv•
[(2Ë- (2)])->
öãgî
;

2953 
	`‰ì
((
yyv•
[(2) - (2)]));

2962 
	`PARSER_DEBUG_PRINTF
("Lök quÆôy fishÉyê%d\n", (
yyv•
[(2Ë- (2)])->
öãgî
);

2963 
ﬁ§_˙f
->
lq_fish
 = (
yyv•
[(2Ë- (2)])->
öãgî
;

2964 
	`‰ì
((
yyv•
[(2) - (2)]));

2973 
	`PARSER_DEBUG_PRINTF
("Lök quÆôyágög fa˘‹ %f\n", (
yyv•
[(2Ë- (2)])->
Êﬂtög
);

2974 
ﬁ§_˙f
->
lq_agög
 = (
yyv•
[(2Ë- (2)])->
Êﬂtög
;

2975 
	`‰ì
((
yyv•
[(2) - (2)]));

2984 
	`PARSER_DEBUG_PRINTF
("Möimum TC vÆidôyÅimê%f\n", (
yyv•
[(2Ë- (2)])->
Êﬂtög
);

2985 
ﬁ§_˙f
->
mö_tc_vtime
 = (
yyv•
[(2Ë- (2)])->
Êﬂtög
;

2986 
	`‰ì
((
yyv•
[(2) - (2)]));

2995 
	`PARSER_DEBUG_PRINTF
("Lock fûê%s\n", (
yyv•
[(2Ë- (2)])->
°rög
);

2996 
ﬁ§_˙f
->
lock_fûe
 = (
yyv•
[(2Ë- (2)])->
°rög
;

2997 
	`‰ì
((
yyv•
[(2) - (2)]));

3006 
ﬁ§_˙f
->
lq_Æg‹ôhm
 = (
yyv•
[(2Ë- (2)])->
°rög
;

3007 
	`PARSER_DEBUG_PRINTF
("LQ Alg‹ôhm: %s\n", (
yyv•
[(2Ë- (2)])->
°rög
);

3008 
	`‰ì
((
yyv•
[(2) - (2)]));

3017 
	`PARSER_DEBUG_PRINTF
("NATÅhªshﬁd %0.2f\n", (
yyv•
[(2Ë- (2)])->
Êﬂtög
);

3018 
ﬁ§_˙f
->
lq_«t_thªsh
 = (
yyv•
[(2Ë- (2)])->
Êﬂtög
;

3019 
	`‰ì
((
yyv•
[(2) - (2)]));

3028 
	`PARSER_DEBUG_PRINTF
("CÀ¨ s¸ì¿%s\n", (
yyv•
[(2Ë- (2)])->
boﬁón
 ? "enabled" : "disabled");

3029 
ﬁ§_˙f
->
˛ór_s¸ìn
 = (
yyv•
[(2Ë- (2)])->
boﬁón
;

3030 
	`‰ì
((
yyv•
[(2) - (2)]));

3039 
	`PARSER_DEBUG_PRINTF
("U£ NIIT i∞å™¶©i⁄: %s\n", (
yyv•
[(2Ë- (2)])->
boﬁón
 ? "enabled" : "disabled");

3040 
ﬁ§_˙f
->
u£_niô
 = (
yyv•
[(2Ë- (2)])->
boﬁón
;

3041 
	`‰ì
((
yyv•
[(2) - (2)]));

3050 
	`PARSER_DEBUG_PRINTF
("Sm¨àg©eway sy°em: %s\n", (
yyv•
[(2Ë- (2)])->
boﬁón
 ? "enabled" : "disabled");

3051 
ﬁ§_˙f
->
sm¨t_gw_a˘ive
 = (
yyv•
[(2Ë- (2)])->
boﬁón
;

3052 
	`‰ì
((
yyv•
[(2) - (2)]));

3061 
	`PARSER_DEBUG_PRINTF
("Sm¨àg©ewayáŒow clõ¡Ç©: %s\n", (
yyv•
[(2Ë- (2)])->
boﬁón
 ? "yes" : "no");

3062 
ﬁ§_˙f
->
sm¨t_gw_Ælow_«t
 = (
yyv•
[(2Ë- (2)])->
boﬁón
;

3063 
	`‰ì
((
yyv•
[(2) - (2)]));

3072 
	`PARSER_DEBUG_PRINTF
("Sm¨àg©ewayÖîiod: %d\n", (
yyv•
[(2Ë- (2)])->
öãgî
);

3073 
ﬁ§_˙f
->
sm¨t_gw_≥riod
 = (
yyv•
[(2Ë- (2)])->
öãgî
;

3074 
	`‰ì
((
yyv•
[(2) - (2)]));

3083 
	`PARSER_DEBUG_PRINTF
("Sm¨àg©eway sèbÀcou¡: %d\n", (
yyv•
[(2Ë- (2)])->
öãgî
);

3084 
ﬁ§_˙f
->
sm¨t_gw_°abÀcou¡
 = (
yyv•
[(2Ë- (2)])->
öãgî
;

3085 
	`‰ì
((
yyv•
[(2) - (2)]));

3094 
	`PARSER_DEBUG_PRINTF
("Sm¨àg©ewayÅhªshﬁd: %d\n", (
yyv•
[(2Ë- (2)])->
öãgî
);

3095 
ﬁ§_˙f
->
sm¨t_gw_thªsh
 = (
yyv•
[(2Ë- (2)])->
öãgî
;

3096 
	`‰ì
((
yyv•
[(2) - (2)]));

3105 
	`PARSER_DEBUG_PRINTF
("Sm¨àg©eway u∂ök: %s\n", (
yyv•
[(2Ë- (2)])->
°rög
);

3106 i‡(
	`°rˇ£cmp
((
yyv•
[(2Ë- (2)])->
°rög
, 
GW_UPLINK_TXT
[
GW_UPLINK_NONE
]) == 0) {

3107 
ﬁ§_˙f
->
sm¨t_gw_ty≥
 = 
GW_UPLINK_NONE
;

3109 i‡(
	`°rˇ£cmp
((
yyv•
[(2Ë- (2)])->
°rög
, 
GW_UPLINK_TXT
[
GW_UPLINK_IPV4
]) == 0) {

3110 
ﬁ§_˙f
->
sm¨t_gw_ty≥
 = 
GW_UPLINK_IPV4
;

3112 i‡(
	`°rˇ£cmp
((
yyv•
[(2Ë- (2)])->
°rög
, 
GW_UPLINK_TXT
[
GW_UPLINK_IPV6
]) == 0) {

3113 
ﬁ§_˙f
->
sm¨t_gw_ty≥
 = 
GW_UPLINK_IPV6
;

3115 i‡(
	`°rˇ£cmp
((
yyv•
[(2Ë- (2)])->
°rög
, 
GW_UPLINK_TXT
[
GW_UPLINK_IPV46
]) == 0) {

3116 
ﬁ§_˙f
->
sm¨t_gw_ty≥
 = 
GW_UPLINK_IPV46
;

3119 
	`Ârötf
(
°dîr
, "Bad g©eway u∂ökÅy≥: %s\n", (
yyv•
[(2Ë- (2)])->
°rög
);

3120 
YYABORT
;

3122 
	`‰ì
((
yyv•
[(2) - (2)]));

3131 
	`PARSER_DEBUG_PRINTF
("Sm¨àg©eway s≥ed: %u u∂ök/%u dow∆ök kbô/s\n", (
yyv•
[(2Ë- (3)])->
öãgî
, (yyvsp[(3) - (3)])->integer);

3132 
ﬁ§_˙f
->
sm¨t_gw_u∂ök
 = (
yyv•
[(2Ë- (3)])->
öãgî
;

3133 
ﬁ§_˙f
->
sm¨t_gw_dow∆ök
 = (
yyv•
[(3Ë- (3)])->
öãgî
;

3134 
	`‰ì
((
yyv•
[(2) - (3)]));

3135 
	`‰ì
((
yyv•
[(3) - (3)]));

3144 
	`PARSER_DEBUG_PRINTF
("Sm¨àg©eway u∂ökÇ©: %s\n", (
yyv•
[(2Ë- (2)])->
boﬁón
 ? "yes" : "no");

3145 
ﬁ§_˙f
->
sm¨t_gw_u∂ök_«t
 = (
yyv•
[(2Ë- (2)])->
boﬁón
;

3146 
	`‰ì
((
yyv•
[(2) - (2)]));

3155 
	`PARSER_DEBUG_PRINTF
("Sm¨àg©ewayÖªfix: %†%u\n", (
yyv•
[(2Ë- (3)])->
°rög
, (yyv•[(3Ë- (3)])->
öãgî
);

3156 i‡(
	`öë_±⁄
(
ﬁ§_˙f
->
ù_vîsi⁄
, (
yyv•
[(2Ë- (3)])->
°rög
, &ﬁ§_˙f->
sm¨t_gw_¥efix
.
¥efix
) == 0) {

3157 
	`Ârötf
(
°dîr
, "Bad IPÖ¨ào‡g©ewayÖªfix: %s\n", (
yyv•
[(2Ë- (3)])->
°rög
);

3158 
YYABORT
;

3160 
ﬁ§_˙f
->
sm¨t_gw_¥efix
.
¥efix_Àn
 = (
uöt8_t
)(
yyv•
[(3Ë- (3)])->
öãgî
;

3162 
	`‰ì
((
yyv•
[(2) - (3)]));

3163 
	`‰ì
((
yyv•
[(3) - (3)]));

3172 
	`PARSER_DEBUG_PRINTF
("Sm¨àg©ewayÖªfix: %†%u\n", (
yyv•
[(2Ë- (4)])->
°rög
, (yyv•[(4Ë- (4)])->
öãgî
);

3173 i‡(
	`öë_±⁄
(
ﬁ§_˙f
->
ù_vîsi⁄
, (
yyv•
[(2Ë- (4)])->
°rög
, &ﬁ§_˙f->
sm¨t_gw_¥efix
.
¥efix
) == 0) {

3174 
	`Ârötf
(
°dîr
, "Bad IPÖ¨ào‡g©ewayÖªfix: %s\n", (
yyv•
[(2Ë- (4)])->
°rög
);

3175 
YYABORT
;

3177 
ﬁ§_˙f
->
sm¨t_gw_¥efix
.
¥efix_Àn
 = (
uöt8_t
)(
yyv•
[(4Ë- (4)])->
öãgî
;

3179 
	`‰ì
((
yyv•
[(2) - (4)]));

3180 
	`‰ì
((
yyv•
[(4) - (4)]));

3189 
	`PARSER_DEBUG_PRINTF
("U£ origö©‹ f‹Ñouã†§c-ù: %s\n", (
yyv•
[(2Ë- (2)])->
boﬁón
 ? "yes" : "no");

3190 i‡(
ﬁ§_˙f
->
ù_vîsi⁄
 !
AF_INET
) {

3191 
	`Ârötf
(
°dîr
, "Source ipÑoutesÇotÖossible with IPV6\n");

3192 
YYABORT
;

3194 
ﬁ§_˙f
->
u£_§c_ù_rouãs
 = (
yyv•
[(2Ë- (2)])->
boﬁón
;

3195 
	`‰ì
((
yyv•
[(2) - (2)]));

3204 
	`PARSER_DEBUG_PRINTF
("Fixed Maö IP: %s\n", (
yyv•
[(2Ë- (2)])->
°rög
);

3206 i‡(
ﬁ§_˙f
->
ù_vîsi⁄
 !
AF_INET


3207 || 
	`öë_±⁄
(
ﬁ§_˙f
->
ù_vîsi⁄
, (
yyv•
[(2Ë- (2)])->
°rög
, &ﬁ§_˙f->
maö_addr
) != 1) {

3208 
	`Ârötf
(
°dîr
, "Bad maö IP: %s\n", (
yyv•
[(2Ë- (2)])->
°rög
);

3209 
YYABORT
;

3211 
ﬁ§_˙f
->
uniˇ°_§c_ù
 = ol§_˙f->
maö_addr
;

3212 
	`‰ì
((
yyv•
[(2) - (2)]));

3221 
	`PARSER_DEBUG_PRINTF
("Fixed Maö IP: %s\n", (
yyv•
[(2Ë- (2)])->
°rög
);

3223 i‡(
ﬁ§_˙f
->
ù_vîsi⁄
 !
AF_INET6


3224 || 
	`öë_±⁄
(
ﬁ§_˙f
->
ù_vîsi⁄
, (
yyv•
[(2Ë- (2)])->
°rög
, &ﬁ§_˙f->
maö_addr
) != 1) {

3225 
	`Ârötf
(
°dîr
, "Bad maö IP: %s\n", (
yyv•
[(2Ë- (2)])->
°rög
);

3226 
YYABORT
;

3228 
	`‰ì
((
yyv•
[(2) - (2)]));

3237 
	`PARSER_DEBUG_PRINTF
("Së IP-F‹w¨dÖrocfûêv¨übÀ: %s\n", (
yyv•
[(2Ë- (2)])->
boﬁón
 ? "yes" : "no");

3238 
ﬁ§_˙f
->
£t_ù_f‹w¨d
 = (
yyv•
[(2Ë- (2)])->
boﬁón
;

3239 
	`‰ì
((
yyv•
[(2) - (2)]));

3248 
∂ugö_íåy
 *
≥
, *
œ°
;

3250 
≥
 = 
ﬁ§_˙f
->
∂ugös
;

3251 
œ°
 = 
NULL
;

3252 
≥
 !
NULL
) {

3253 i‡(
	`°rcmp
(
≥
->
«me
, (
yyv•
[(2Ë- (2)])->
°rög
) == 0) {

3254 
	`‰ì
 ((
yyv•
[(2Ë- (2)])->
°rög
);

3257 
œ°
 = 
≥
;

3258 
≥
 =Öe->
√xt
;

3261 i‡(
≥
 !
NULL
) {

3263 i‡(
œ°
) {

3264 
œ°
->
√xt
 = 
≥
->next;

3267 
ﬁ§_˙f
->
∂ugös
 = 
≥
->
√xt
;

3271 
≥
 = 
	`mÆloc
((*pe));

3273 i‡(
≥
 =
NULL
) {

3274 
	`Ârötf
(
°dîr
, "Out of memory(ADD PL)\n");

3275 
YYABORT
;

3278 
≥
->
«me
 = (
yyv•
[(2Ë- (2)])->
°rög
;

3279 
≥
->
∑øms
 = 
NULL
;

3281 
	`PARSER_DEBUG_PRINTF
("Plugö: %s\n", (
yyv•
[(2Ë- (2)])->
°rög
);

3285 
≥
->
√xt
 = 
ﬁ§_˙f
->
∂ugös
;

3286 
ﬁ§_˙f
->
∂ugös
 = 
≥
;

3288 
	`‰ì
((
yyv•
[(2) - (2)]));

3297 
∂ugö_∑øm
 *
µ
 = 
	`mÆloc
((*pp));

3299 i‡(
µ
 =
NULL
) {

3300 
	`Ârötf
(
°dîr
, "Out of memory(ADD PP)\n");

3301 
YYABORT
;

3304 
	`PARSER_DEBUG_PRINTF
("PlugöÖ¨am key:\"%s\" vÆ: \"%s\"\n", (
yyv•
[(2Ë- (3)])->
°rög
, (yyvsp[(3) - (3)])->string);

3306 
µ
->
key
 = (
yyv•
[(2Ë- (3)])->
°rög
;

3307 
µ
->
vÆue
 = (
yyv•
[(3Ë- (3)])->
°rög
;

3310 
µ
->
√xt
 = 
ﬁ§_˙f
->
∂ugös
->
∑øms
;

3311 
ﬁ§_˙f
->
∂ugös
->
∑øms
 = 
µ
;

3313 
	`‰ì
((
yyv•
[(2) - (3)]));

3314 
	`‰ì
((
yyv•
[(3) - (3)]));

3344 
	`YY_SYMBOL_PRINT
 ("-> $$ =", 
yyr1
[
yyn
], &
yyvÆ
, &
yyloc
);

3346 
	`YYPOPSTACK
 (
yyÀn
);

3347 
yyÀn
 = 0;

3348 
	`YY_STACK_PRINT
 (
yyss
, 
yys•
);

3350 *++
yyv•
 = 
yyvÆ
;

3356 
yyn
 = 
yyr1
[yyn];

3358 
yy°©e
 = 
yypgŸo
[
yyn
 - 
YYNTOKENS
] + *
yys•
;

3359 i‡(0 <
yy°©e
 && yy°©ê<
YYLAST
 && 
yycheck
[yy°©e] =*
yys•
)

3360 
yy°©e
 = 
yyèbÀ
[yystate];

3362 
yy°©e
 = 
yydefgŸo
[
yyn
 - 
YYNTOKENS
];

3364 
yy√w°©e
;

3370 
yyîæab
:

3373 
yytokí
 = 
yych¨
 =
YYEMPTY
 ? YYEMPTY : 
	`YYTRANSLATE
 (yychar);

3376 i‡(!
yyîr°©us
)

3378 ++
yy√ºs
;

3379 #i‡! 
YYERROR_VERBOSE


3380 
	`yyîr‹
 (
	`YY_
("syntaxÉrror"));

3382 
	#YYSYNTAX_ERROR
 
	`yysy¡ax_îr‹
 (&
yymsg_Æloc
, &
yymsg
, \

3383 
yys•
, 
yytokí
)

	)

3385 c⁄° *
yymsgp
 = 
	`YY_
("syntaxÉrror");

3386 
yysy¡ax_îr‹_°©us
;

3387 
yysy¡ax_îr‹_°©us
 = 
YYSYNTAX_ERROR
;

3388 i‡(
yysy¡ax_îr‹_°©us
 == 0)

3389 
yymsgp
 = 
yymsg
;

3390 i‡(
yysy¡ax_îr‹_°©us
 == 1)

3392 i‡(
yymsg
 !
yymsgbuf
)

3393 
	`YYSTACK_FREE
 (
yymsg
);

3394 
yymsg
 = (*Ë
	`YYSTACK_ALLOC
 (
yymsg_Æloc
);

3395 i‡(!
yymsg
)

3397 
yymsg
 = 
yymsgbuf
;

3398 
yymsg_Æloc
 =  
yymsgbuf
;

3399 
yysy¡ax_îr‹_°©us
 = 2;

3403 
yysy¡ax_îr‹_°©us
 = 
YYSYNTAX_ERROR
;

3404 
yymsgp
 = 
yymsg
;

3407 
	`yyîr‹
 (
yymsgp
);

3408 i‡(
yysy¡ax_îr‹_°©us
 == 2)

3409 
yyexhau°edœb
;

3411 #unde‡
YYSYNTAX_ERROR


3417 i‡(
yyîr°©us
 == 3)

3422 i‡(
yych¨
 <
YYEOF
)

3425 i‡(
yych¨
 =
YYEOF
)

3426 
YYABORT
;

3430 
	`yyde°ru˘
 ("Error: discarding",

3431 
yytokí
, &
yylvÆ
);

3432 
yych¨
 = 
YYEMPTY
;

3438 
yyîæab1
;

3444 
yyîr‹œb
:

3450 
yyîr‹œb
;

3454 
	`YYPOPSTACK
 (
yyÀn
);

3455 
yyÀn
 = 0;

3456 
	`YY_STACK_PRINT
 (
yyss
, 
yys•
);

3457 
yy°©e
 = *
yys•
;

3458 
yyîæab1
;

3464 
yyîæab1
:

3465 
yyîr°©us
 = 3;

3469 
yyn
 = 
yy∑˘
[
yy°©e
];

3470 i‡(!
	`yy∑˘_vÆue_is_deÁu…
 (
yyn
))

3472 
yyn
 +
YYTERROR
;

3473 i‡(0 <
yyn
 && yy¿<
YYLAST
 && 
yycheck
[yyn] =
YYTERROR
)

3475 
yyn
 = 
yyèbÀ
[yyn];

3476 i‡(0 < 
yyn
)

3482 i‡(
yys•
 =
yyss
)

3483 
YYABORT
;

3486 
	`yyde°ru˘
 ("Error:Öopping",

3487 
yy°os
[
yy°©e
], 
yyv•
);

3488 
	`YYPOPSTACK
 (1);

3489 
yy°©e
 = *
yys•
;

3490 
	`YY_STACK_PRINT
 (
yyss
, 
yys•
);

3493 *++
yyv•
 = 
yylvÆ
;

3497 
	`YY_SYMBOL_PRINT
 ("Shi·ög", 
yy°os
[
yyn
], 
yyv•
, 
yyl•
);

3499 
yy°©e
 = 
yyn
;

3500 
yy√w°©e
;

3506 
yyac˚±œb
:

3507 
yyªsu…
 = 0;

3508 
yyªtu∫
;

3513 
yyab‹éab
:

3514 
yyªsu…
 = 1;

3515 
yyªtu∫
;

3517 #i‡!
	`deföed
(
yyovîÊow
Ë|| 
YYERROR_VERBOSE


3521 
yyexhau°edœb
:

3522 
	`yyîr‹
 (
	`YY_
("memoryÉxhausted"));

3523 
yyªsu…
 = 2;

3527 
yyªtu∫
:

3528 i‡(
yych¨
 !
YYEMPTY
)

3532 
yytokí
 = 
	`YYTRANSLATE
 (
yych¨
);

3533 
	`yyde°ru˘
 ("Cleanup: discardingÜookahead",

3534 
yytokí
, &
yylvÆ
);

3538 
	`YYPOPSTACK
 (
yyÀn
);

3539 
	`YY_STACK_PRINT
 (
yyss
, 
yys•
);

3540 
yys•
 !
yyss
)

3542 
	`yyde°ru˘
 ("Cleanup:Öopping",

3543 
yy°os
[*
yys•
], 
yyv•
);

3544 
	`YYPOPSTACK
 (1);

3546 #i‚de‡
yyovîÊow


3547 i‡(
yyss
 !
yysß
)

3548 
	`YYSTACK_FREE
 (
yyss
);

3550 #i‡
YYERROR_VERBOSE


3551 i‡(
yymsg
 !
yymsgbuf
)

3552 
	`YYSTACK_FREE
 (
yymsg
);

3555  
	`YYID
 (
yyªsu…
);

3556 
	}
}

3564 
	$yyîr‹
 (c⁄° *
°rög
)

3566 
	`Ârötf
(
°dîr
, "C⁄figÜöê%d: %s\n", 
cuºít_löe
, 
°rög
);

3567 
	}
}

	@src/cfgparser/oparse.h

35 #i‚de‡
YYTOKENTYPE


36 
	#YYTOKENTYPE


	)

39 
	eyytokíty≥
 {

40 
	mTOK_SLASH
 = 258,

41 
	mTOK_OPEN
 = 259,

42 
	mTOK_CLOSE
 = 260,

43 
	mTOK_STRING
 = 261,

44 
	mTOK_INTEGER
 = 262,

45 
	mTOK_FLOAT
 = 263,

46 
	mTOK_BOOLEAN
 = 264,

47 
	mTOK_IPV6TYPE
 = 265,

48 
	mTOK_DEBUGLEVEL
 = 266,

49 
	mTOK_IPVERSION
 = 267,

50 
	mTOK_HNA4
 = 268,

51 
	mTOK_HNA6
 = 269,

52 
	mTOK_PLUGIN
 = 270,

53 
	mTOK_INTERFACE_DEFAULTS
 = 271,

54 
	mTOK_INTERFACE
 = 272,

55 
	mTOK_NOINT
 = 273,

56 
	mTOK_TOS
 = 274,

57 
	mTOK_OLSRPORT
 = 275,

58 
	mTOK_RTPROTO
 = 276,

59 
	mTOK_RTTABLE
 = 277,

60 
	mTOK_RTTABLE_DEFAULT
 = 278,

61 
	mTOK_RTTABLE_TUNNEL
 = 279,

62 
	mTOK_RTTABLE_PRIORITY
 = 280,

63 
	mTOK_RTTABLE_DEFAULTOLSR_PRIORITY
 = 281,

64 
	mTOK_RTTABLE_TUNNEL_PRIORITY
 = 282,

65 
	mTOK_RTTABLE_DEFAULT_PRIORITY
 = 283,

66 
	mTOK_WILLINGNESS
 = 284,

67 
	mTOK_IPCCON
 = 285,

68 
	mTOK_FIBMETRIC
 = 286,

69 
	mTOK_USEHYST
 = 287,

70 
	mTOK_HYSTSCALE
 = 288,

71 
	mTOK_HYSTUPPER
 = 289,

72 
	mTOK_HYSTLOWER
 = 290,

73 
	mTOK_POLLRATE
 = 291,

74 
	mTOK_NICCHGSPOLLRT
 = 292,

75 
	mTOK_TCREDUNDANCY
 = 293,

76 
	mTOK_MPRCOVERAGE
 = 294,

77 
	mTOK_LQ_LEVEL
 = 295,

78 
	mTOK_LQ_FISH
 = 296,

79 
	mTOK_LQ_AGING
 = 297,

80 
	mTOK_LQ_PLUGIN
 = 298,

81 
	mTOK_LQ_NAT_THRESH
 = 299,

82 
	mTOK_LQ_MULT
 = 300,

83 
	mTOK_CLEAR_SCREEN
 = 301,

84 
	mTOK_PLPARAM
 = 302,

85 
	mTOK_MIN_TC_VTIME
 = 303,

86 
	mTOK_LOCK_FILE
 = 304,

87 
	mTOK_USE_NIIT
 = 305,

88 
	mTOK_SMART_GW
 = 306,

89 
	mTOK_SMART_GW_ALLOW_NAT
 = 307,

90 
	mTOK_SMART_GW_PERIOD
 = 308,

91 
	mTOK_SMART_GW_STABLECOUNT
 = 309,

92 
	mTOK_SMART_GW_THRESH
 = 310,

93 
	mTOK_SMART_GW_UPLINK
 = 311,

94 
	mTOK_SMART_GW_UPLINK_NAT
 = 312,

95 
	mTOK_SMART_GW_SPEED
 = 313,

96 
	mTOK_SMART_GW_PREFIX
 = 314,

97 
	mTOK_SRC_IP_ROUTES
 = 315,

98 
	mTOK_MAIN_IP
 = 316,

99 
	mTOK_SET_IPFORWARD
 = 317,

100 
	mTOK_HOSTLABEL
 = 318,

101 
	mTOK_NETLABEL
 = 319,

102 
	mTOK_MAXIPC
 = 320,

103 
	mTOK_IFMODE
 = 321,

104 
	mTOK_IPV4MULTICAST
 = 322,

105 
	mTOK_IP4BROADCAST
 = 323,

106 
	mTOK_IPV4BROADCAST
 = 324,

107 
	mTOK_IPV6MULTICAST
 = 325,

108 
	mTOK_IPV4SRC
 = 326,

109 
	mTOK_IPV6SRC
 = 327,

110 
	mTOK_IFWEIGHT
 = 328,

111 
	mTOK_HELLOINT
 = 329,

112 
	mTOK_HELLOVAL
 = 330,

113 
	mTOK_TCINT
 = 331,

114 
	mTOK_TCVAL
 = 332,

115 
	mTOK_MIDINT
 = 333,

116 
	mTOK_MIDVAL
 = 334,

117 
	mTOK_HNAINT
 = 335,

118 
	mTOK_HNAVAL
 = 336,

119 
	mTOK_AUTODETCHG
 = 337,

120 
	mTOK_IPV4_ADDR
 = 338,

121 
	mTOK_IPV6_ADDR
 = 339,

122 
	mTOK_DEFAULT
 = 340,

123 
	mTOK_AUTO
 = 341,

124 
	mTOK_NONE
 = 342,

125 
	mTOK_COMMENT
 = 343

131 #i‡! 
deföed
 
YYSTYPE
 && ! deföed 
YYSTYPE_IS_DECLARED


132 
	tYYSTYPE
;

133 
	#YYSTYPE_IS_TRIVIAL
 1

	)

134 
	#yy°y≥
 
YYSTYPE


	)

135 
	#YYSTYPE_IS_DECLARED
 1

	)

138 
YYSTYPE
 
yylvÆ
;

	@src/cfgparser/oparse.y

44 
	~"ﬁ§d_c⁄f.h
"

45 
	~"../defs.h
"

46 
	~"../ùˇlc.h
"

47 
	~"../√t_ﬁ§.h
"

48 
	~"../lök_£t.h
"

49 
	~"../ﬁ§.h
"

51 
	~<°ddef.h
>

52 
	~<°dio.h
>

53 
	~<°dlib.h
>

54 
	~<sys/ty≥s.h
>

55 
	~<sys/sockë.h
>

56 
	~<√töë/ö.h
>

57 
	~<¨∑/öë.h
>

58 
	~<°rög.h
>

60 
	#PARSER_DEBUG
 1

	)

62 #i‡
PARSER_DEBUG


63 
	#PARSER_DEBUG_PRINTF
(
x
, 
¨gs
...Ë
	`¥ötf
(x, ##¨gs)

	)

65 
	#PARSER_DEBUG_PRINTF
(
x
, 
¨gs
...Ëdÿ{ } 0)

	)

68 
	#SET_IFS_CONF
(
ifs
, 
if˙t
, 
fõld
, 
vÆue
) do { \

69 ; 
if˙t
>0; 
ifs
=ifs->
√xt
, ifcnt--) { \

70 
ifs
->
˙fi
->
fõld
 = (
vÆue
); \

71 
ifs
->
˙f
->
fõld
 = (
vÆue
); \

73 } 0)

	)

75 
	#YYSTYPE
 
c⁄f_tokí
 *

	)

77 
yyîr‹
(const *);

78 
yyÀx
();

80 
	gifs_ö_cuº_cfg
 = 0;

82 
add_ùv6_addr
(
YYSTYPE
 
ùaddr_¨g
, YYSTYPE 
¥efixÀn_¨g
);

84 
	$lq_mu…_hñ≥r
(
YYSTYPE
 
ù_addr_¨g
, YYSTYPE 
mu…_¨g
)

86 
ﬁ§_ù_addr
 
addr
;

87 
i
;

88 
ﬁ§_if
 *
wÆkî
;

90 #i‡
PARSER_DEBUG
 > 0

91 
	`¥ötf
("\tLinkQualityMult %s %0.2f\n",

92 (
ù_addr_¨g
 !
NULL
Ë? ip_addr_¨g->
°rög
 : "any",

93 
mu…_¨g
->
Êﬂtög
);

96 
	`mem£t
(&
addr
, 0, (addr));

98 i‡(
ù_addr_¨g
 !
NULL
 &&

99 
	`öë_±⁄
(
ﬁ§_˙f
->
ù_vîsi⁄
, 
ù_addr_¨g
->
°rög
, &
addr
) <= 0) {

100 
	`Ârötf
(
°dîr
, "C™nŸÖ¨£ IPáddªs†%s.\n", 
ù_addr_¨g
->
°rög
);

104 
wÆkî
 = 
ﬁ§_˙f
->
öãrÁ˚s
;

106 
i
 = 0; i < 
ifs_ö_cuº_cfg
; i++) {

107 
ﬁ§_lq_mu…
 *
mu…
 = 
	`mÆloc
((*mult));

108 i‡(
mu…
 =
NULL
) {

109 
	`Ârötf
(
°dîr
, "Out of memory (LQ multiplier).\n");

113 
mu…
->
addr
 =áddr;

114 
mu…
->
vÆue
 = (
uöt32_t
)(
mu…_¨g
->
Êﬂtög
 * 
LINK_LOSS_MULTIPLIER
);

116 
mu…
->
√xt
 = 
wÆkî
->
˙f
->
lq_mu…
;

117 
wÆkî
->
˙fi
->
lq_mu…
 = wÆkî->
˙f
->lq_mu… = 
mu…
;

118 
wÆkî
->
˙f
->
‹ig_lq_mu…_˙t
++;

119 
wÆkî
->
˙fi
->
‹ig_lq_mu…_˙t
=wÆkî->
˙f
->orig_lq_mult_cnt;

121 
wÆkî
 = wÆkî->
√xt
;

124 i‡(
ù_addr_¨g
 !
NULL
) {

125 
	`‰ì
(
ù_addr_¨g
->
°rög
);

126 
	`‰ì
(
ù_addr_¨g
);

129 
	`‰ì
(
mu…_¨g
);

132 
	}
}

134 
	$add_ùv6_addr
(
YYSTYPE
 
ùaddr_¨g
, YYSTYPE 
¥efixÀn_¨g
)

136 
ﬁ§_ù_addr
 
ùaddr
;

137 
	`PARSER_DEBUG_PRINTF
("HNA IPv6É¡ry: %s/%d\n", 
ùaddr_¨g
->
°rög
, 
¥efixÀn_¨g
->
öãgî
);

139 i‡(
ﬁ§_˙f
->
ù_vîsi⁄
 !
AF_INET6
) {

140 
	`Ârötf
(
°dîr
, "IPv6áddresses can only be used if \"IpVersion\" == 6, skipping HNA6.\n");

141 
	`ﬁ§_°¨tup_¶ìp
(3);

144 if(
	`öë_±⁄
(
AF_INET6
, 
ùaddr_¨g
->
°rög
, &
ùaddr
) <= 0) {

145 
	`Ârötf
(
°dîr
, "ih«6íåy: Faûed c⁄vîtög IPáddªs†%s\n", 
ùaddr_¨g
->
°rög
);

149 i‡(
¥efixÀn_¨g
->
öãgî
 > 128) {

150 
	`Ârötf
(
°dîr
, "ih«6íåy: IŒegÆ IPv6ÖªfixÜígth %d\n", 
¥efixÀn_¨g
->
öãgî
);

155 
	`ù_¥efix_li°_add
(&
ﬁ§_˙f
->
h«_íåõs
, &
ùaddr
, 
¥efixÀn_¨g
->
öãgî
);

157 
	`‰ì
(
ùaddr_¨g
->
°rög
);

158 
	`‰ì
(
ùaddr_¨g
);

159 
	`‰ì
(
¥efixÀn_¨g
);

162 
	}
}

166 %
tokí
 
TOK_SLASH


167 %
tokí
 
TOK_OPEN


168 %
tokí
 
TOK_CLOSE


170 %
tokí
 
TOK_STRING


171 %
tokí
 
TOK_INTEGER


172 %
tokí
 
TOK_FLOAT


173 %
tokí
 
TOK_BOOLEAN


175 %
tokí
 
TOK_IPV6TYPE


177 %
tokí
 
TOK_DEBUGLEVEL


178 %
tokí
 
TOK_IPVERSION


179 %
tokí
 
TOK_HNA4


180 %
tokí
 
TOK_HNA6


181 %
tokí
 
TOK_PLUGIN


182 %
tokí
 
TOK_INTERFACE_DEFAULTS


183 %
tokí
 
TOK_INTERFACE


184 %
tokí
 
TOK_NOINT


185 %
tokí
 
TOK_TOS


186 %
tokí
 
TOK_OLSRPORT


187 %
tokí
 
TOK_RTPROTO


188 %
tokí
 
TOK_RTTABLE


189 %
tokí
 
TOK_RTTABLE_DEFAULT


190 %
tokí
 
TOK_RTTABLE_TUNNEL


191 %
tokí
 
TOK_RTTABLE_PRIORITY


192 %
tokí
 
TOK_RTTABLE_DEFAULTOLSR_PRIORITY


193 %
tokí
 
TOK_RTTABLE_TUNNEL_PRIORITY


194 %
tokí
 
TOK_RTTABLE_DEFAULT_PRIORITY


195 %
tokí
 
TOK_WILLINGNESS


196 %
tokí
 
TOK_IPCCON


197 %
tokí
 
TOK_FIBMETRIC


198 %
tokí
 
TOK_USEHYST


199 %
tokí
 
TOK_HYSTSCALE


200 %
tokí
 
TOK_HYSTUPPER


201 %
tokí
 
TOK_HYSTLOWER


202 %
tokí
 
TOK_POLLRATE


203 %
tokí
 
TOK_NICCHGSPOLLRT


204 %
tokí
 
TOK_TCREDUNDANCY


205 %
tokí
 
TOK_MPRCOVERAGE


206 %
tokí
 
TOK_LQ_LEVEL


207 %
tokí
 
TOK_LQ_FISH


208 %
tokí
 
TOK_LQ_AGING


209 %
tokí
 
TOK_LQ_PLUGIN


210 %
tokí
 
TOK_LQ_NAT_THRESH


211 %
tokí
 
TOK_LQ_MULT


212 %
tokí
 
TOK_CLEAR_SCREEN


213 %
tokí
 
TOK_PLPARAM


214 %
tokí
 
TOK_MIN_TC_VTIME


215 %
tokí
 
TOK_LOCK_FILE


216 %
tokí
 
TOK_USE_NIIT


217 %
tokí
 
TOK_SMART_GW


218 %
tokí
 
TOK_SMART_GW_ALLOW_NAT


219 %
tokí
 
TOK_SMART_GW_PERIOD


220 %
tokí
 
TOK_SMART_GW_STABLECOUNT


221 %
tokí
 
TOK_SMART_GW_THRESH


222 %
tokí
 
TOK_SMART_GW_UPLINK


223 %
tokí
 
TOK_SMART_GW_UPLINK_NAT


224 %
tokí
 
TOK_SMART_GW_SPEED


225 %
tokí
 
TOK_SMART_GW_PREFIX


226 %
tokí
 
TOK_SRC_IP_ROUTES


227 %
tokí
 
TOK_MAIN_IP


228 %
tokí
 
TOK_SET_IPFORWARD


230 %
tokí
 
TOK_HOSTLABEL


231 %
tokí
 
TOK_NETLABEL


232 %
tokí
 
TOK_MAXIPC


234 %
tokí
 
TOK_IFMODE


235 %
tokí
 
TOK_IPV4MULTICAST


236 %
tokí
 
TOK_IP4BROADCAST


237 %
tokí
 
TOK_IPV4BROADCAST


238 %
tokí
 
TOK_IPV6MULTICAST


239 %
tokí
 
TOK_IPV4SRC


240 %
tokí
 
TOK_IPV6SRC


241 %
tokí
 
TOK_IFWEIGHT


242 %
tokí
 
TOK_HELLOINT


243 %
tokí
 
TOK_HELLOVAL


244 %
tokí
 
TOK_TCINT


245 %
tokí
 
TOK_TCVAL


246 %
tokí
 
TOK_MIDINT


247 %
tokí
 
TOK_MIDVAL


248 %
tokí
 
TOK_HNAINT


249 %
tokí
 
TOK_HNAVAL


250 %
tokí
 
TOK_AUTODETCHG


252 %
tokí
 
TOK_IPV4_ADDR


253 %
tokí
 
TOK_IPV6_ADDR


254 %
tokí
 
TOK_DEFAULT


255 %
tokí
 
TOK_AUTO


256 %
tokí
 
TOK_NONE


258 %
tokí
 
TOK_COMMENT


260 %% /* 
	$yy∑r£
 */ 
	`yyÀx
()

262 
c⁄f
:

263 | 
c⁄f
 
block


264 | 
c⁄f
 
°mt


267 
°mt
: 
idebug


268 | 
iùvîsi⁄


269 | 
fibmëric


270 | 
bnoöt


271 | 
©os


272 | 
aﬁ§p‹t


273 | 
úçrŸo


274 | 
úâabÀ


275 | 
úâabÀ_deÁu…


276 | 
úâabÀ_tu¬ñ


277 | 
úâabÀ_¥i‹ôy


278 | 
úâabÀ_deÁu…ﬁ§_¥i‹ôy


279 | 
úâabÀ_tu¬ñ_¥i‹ôy


280 | 
úâabÀ_deÁu…_¥i‹ôy


281 | 
awûlög√ss


282 | 
bu£hy°


283 | 
fhy°sˇÀ


284 | 
fhy°uµî


285 | 
fhy°lowî


286 | 
ÂﬁÃ©e


287 | 
‚icchg•ﬁÃt


288 | 
©¸edund™cy


289 | 
am¥covîage


290 | 
Æq_Àvñ


291 | 
Æq_∂ugö


292 | 
Æq_fish


293 | 
™©_thªsh


294 | 
Æq_agög


295 | 
b˛ór_s¸ìn


296 | 
vcommít


297 | 
amö_tc_vtime


298 | 
Æock_fûe


299 | 
su£_niô


300 | 
bsm¨t_gw


301 | 
bsm¨t_gw_Ælow_«t


302 | 
ism¨t_gw_≥riod


303 | 
asm¨t_gw_°abÀcou¡


304 | 
asm¨t_gw_thªsh


305 | 
ssm¨t_gw_u∂ök


306 | 
bsm¨t_gw_u∂ök_«t


307 | 
ism¨t_gw_•ìd


308 | 
ism¨t_gw_¥efix


309 | 
b§c_ù_rouãs


310 | 
amaö_ù


311 | 
b£t_ùf‹w¨d


314 
block
: 
TOK_HNA4
 
h«4body


315 | 
TOK_HNA6
 
h«6body


316 | 
TOK_IPCCON
 
ùcbody


317 | 
ifdblock
 
ifdbody


318 | 
ifblock
 
ifbody


319 | 
∂block
 
∂body


322 
h«4body
: 
TOK_OPEN
 
h«4°mts
 
TOK_CLOSE


325 
h«4°mts
: | h«4°mt†
h«4°mt


328 
h«4°mt
: 
vcommít


329 | 
ih«4íåy


332 
h«6body
: 
TOK_OPEN
 
h«6°mts
 
TOK_CLOSE


335 
h«6°mts
: | h«6°mt†
h«6°mt


338 
h«6°mt
: 
vcommít


339 | 
ih«6íåy


342 
ùcbody
: 
TOK_OPEN
 
ùc°mts
 
TOK_CLOSE


345 
ùc°mts
: | ipc°mt†
ùc°mt


348 
ùc°mt
: 
vcommít


349 | 
imaxùc


350 | 
ùcho°


351 | 
ù˙ë


354 
ifblock
: 
if°¨t
 
i‚icks


357 
i‚icks
: | i‚ick†
i‚ick


360 
ifbody
: 
TOK_OPEN
 
if°mts
 
TOK_CLOSE


363 
ifdbody
: 
TOK_OPEN
 
if°mts
 
TOK_CLOSE


365 
ﬁ§_if
 *
ö
 = 
ﬁ§_˙f
->
öãrÁ˚s
;

366 
	`¥ötf
("\nInterface Defaults");

368 
ﬁ§_˙f
->
öãrÁ˚s
 = 
ö
->
√xt
;

369 
ifs_ö_cuº_cfg
=0;

371 
	`‰ì
(
ö
->
˙fi
);

372 
	`‰ì
(
ö
);

377 
if°mts
: | if°mt†
if°mt


380 
if°mt
: 
vcommít


381 | 
iifweight


382 | 
i£tifmode


383 | 
TOK_IP4BROADCAST
 
i£tùv4mc


384 | 
TOK_IPV4BROADCAST
 
i£tùv4mc


385 | 
TOK_IPV4MULTICAST
 
i£tùv4mc


386 | 
i£tùv6mc


387 | 
i£tùv4§c


388 | 
i£tùv6§c


389 | 
i£thñloöt


390 | 
i£thñlovÆ


391 | 
i£âcöt


392 | 
i£âcvÆ


393 | 
i£tmidöt


394 | 
i£tmidvÆ


395 | 
i£th«öt


396 | 
i£th«vÆ


397 | 
i£èutodëchg


398 | 
i£éqmu…


401 
∂body
: 
TOK_OPEN
 
∂°mts
 
TOK_CLOSE


404 
∂°mts
: |Öl°mt†
∂°mt


407 
∂°mt
: 
∂∑øm


408 | 
vcommít


411 
ifdblock
: 
TOK_INTERFACE_DEFAULTS


413 
ﬁ§_if
 *
ö
 = 
	`mÆloc
((*in));

415 i‡(
ö
 =
NULL
) {

416 
	`Ârötf
(
°dîr
, "Out of memory(ADD IF)\n");

417 
YYABORT
;

420 
ö
->
˙f
 = 
	`gë_deÁu…_if_c⁄fig
();

421 
ö
->
˙fi
 = 
	`gë_deÁu…_if_c⁄fig
();

423 i‡(
ö
->
˙f
 =
NULL
 || in->
˙fi
 == NULL) {

424 
	`Ârötf
(
°dîr
, "Out of memory(ADD DEFIFRULE)\n");

425 
YYABORT
;

431 
ﬁ§_˙f
->
öãrÁ˚_deÁu…s
 = 
ö
->
˙f
;

434 
ö
->
√xt
 = 
ﬁ§_˙f
->
öãrÁ˚s
;

435 
ﬁ§_˙f
->
öãrÁ˚s
 = 
ö
;

436 
ifs_ö_cuº_cfg
=1;

438 
	`fÊush
(
°dout
);

442 
imaxùc
: 
TOK_MAXIPC
 
TOK_INTEGER


444 
ﬁ§_˙f
->
ùc_c⁄√˘i⁄s
 = 
$2
->
öãgî
;

445 
	`‰ì
(
$2
);

449 
ùcho°
: 
TOK_HOSTLABEL
 
TOK_IPV4_ADDR


451 
ﬁ§_ù_addr
 
ùaddr
;

452 
	`PARSER_DEBUG_PRINTF
("\tIPC ho°: %s\n", 
$2
->
°rög
);

454 i‡(
	`öë_©⁄
(
$2
->
°rög
, &
ùaddr
.
v4
) == 0) {

455 
	`Ârötf
(
°dîr
, "Faûed c⁄vîtög IPáddªs†IPC %s\n", 
$2
->
°rög
);

456 
YYABORT
;

459 
	`ù_¥efix_li°_add
(&
ﬁ§_˙f
->
ùc_√ts
, &
ùaddr
, ol§_˙f->
max∂í
);

461 
	`‰ì
(
$2
->
°rög
);

462 
	`‰ì
(
$2
);

466 
ù˙ë
: 
TOK_NETLABEL
 
TOK_IPV4_ADDR
 TOK_IPV4_ADDR

468 
ﬁ§_ù_addr
 
ùaddr
, 
√tmask
;

470 
	`PARSER_DEBUG_PRINTF
("\tIPCÇë: %s/%s\n", 
$2
->
°rög
, 
$3
->string);

472 i‡(
	`öë_±⁄
(
AF_INET
, 
$2
->
°rög
, &
ùaddr
.
v4
) == 0) {

473 
	`Ârötf
(
°dîr
, "Faûed c⁄vîtög IPÇë IPC %s\n", 
$2
->
°rög
);

474 
YYABORT
;

477 i‡(
	`öë_±⁄
(
AF_INET
, 
$3
->
°rög
, &
√tmask
.
v4
) == 0) {

478 
	`Ârötf
(
°dîr
, "Faûed c⁄vîtög IP mask IPC %s\n", 
$3
->
°rög
);

479 
YYABORT
;

482 
	`ù_¥efix_li°_add
(&
ﬁ§_˙f
->
ùc_√ts
, &
ùaddr
, 
	`ﬁ§_√tmask_to_¥efix
(&
√tmask
));

484 
	`‰ì
(
$2
->
°rög
);

485 
	`‰ì
(
$2
);

486 
	`‰ì
(
$3
->
°rög
);

487 
	`‰ì
(
$3
);

489 | 
TOK_NETLABEL
 
TOK_IPV4_ADDR
 
TOK_SLASH
 
TOK_INTEGER


491 
ﬁ§_ù_addr
 
ùaddr
;

493 
	`PARSER_DEBUG_PRINTF
("\tIPCÇë: %s/%s\n", 
$2
->
°rög
, 
$3
->string);

495 i‡(
	`öë_±⁄
(
AF_INET
, 
$2
->
°rög
, &
ùaddr
.
v4
) == 0) {

496 
	`Ârötf
(
°dîr
, "Faûed c⁄vîtög IPÇë IPC %s\n", 
$2
->
°rög
);

497 
YYABORT
;

500 i‡(
$4
->
öãgî
 > 
ﬁ§_˙f
->
max∂í
) {

501 
	`Ârötf
(
°dîr
, "ù˙ë: PªfixÜí %u > %d i†nŸáŒowed!\n", 
$4
->
öãgî
, 
ﬁ§_˙f
->
max∂í
);

502 
YYABORT
;

505 
	`ù_¥efix_li°_add
(&
ﬁ§_˙f
->
ùc_√ts
, &
ùaddr
, 
$4
->
öãgî
);

507 
	`‰ì
(
$2
->
°rög
);

508 
	`‰ì
(
$2
);

509 
	`‰ì
(
$4
);

513 
iifweight
: 
TOK_IFWEIGHT
 
TOK_INTEGER


515 
if˙t
 = 
ifs_ö_cuº_cfg
;

516 
ﬁ§_if
 *
ifs
 = 
ﬁ§_˙f
->
öãrÁ˚s
;

518 
	`PARSER_DEBUG_PRINTF
("Fixed wûlög√ss: %d\n", 
$2
->
öãgî
);

520 
if˙t
) {

521 
ifs
->
˙f
->
weight
.
vÆue
 = 
$2
->
öãgî
;

522 
ifs
->
˙f
->
weight
.
fixed
 = 
åue
;

523 
ifs
->
˙fi
->
weight
.
vÆue
 = 
$2
->
öãgî
;

524 
ifs
->
˙fi
->
weight
.
fixed
 = 
åue
;

526 
ifs
 = ifs->
√xt
;

527 
if˙t
--;

530 
	`‰ì
(
$2
);

534 
i£tifmode
: 
TOK_IFMODE
 
TOK_STRING


536 
if˙t
 = 
ifs_ö_cuº_cfg
;

537 
ﬁ§_if
 *
ifs
 = 
ﬁ§_˙f
->
öãrÁ˚s
;

538 
mode
 = (
	`°rcmp
(
$2
->
°rög
, "ëhî"Ë=0)?
IF_MODE_ETHER
:
IF_MODE_MESH
;

540 
	`PARSER_DEBUG_PRINTF
("\tMode: %s\n", 
$2
->
°rög
);

542 
	`SET_IFS_CONF
(
ifs
, 
if˙t
, 
mode
, mode);

544 
	`‰ì
(
$2
->
°rög
);

545 
	`‰ì
(
$2
);

550 
i£tùv4mc
: 
TOK_IPV4_ADDR


552 
ö_addr
 
ö
;

553 
if˙t
 = 
ifs_ö_cuº_cfg
;

554 
ﬁ§_if
 *
ifs
 = 
ﬁ§_˙f
->
öãrÁ˚s
;

556 
	`PARSER_DEBUG_PRINTF
("\tIPv4 brﬂdˇ°: %s\n", 
$1
->
°rög
);

558 i‡(
	`öë_©⁄
(
$1
->
°rög
, &
ö
) == 0) {

559 
	`Ârötf
(
°dîr
, "i£tùv4br: Faûed c⁄vîtög IPáddªs†%s\n", 
$1
->
°rög
);

560 
YYABORT
;

563 
	`SET_IFS_CONF
(
ifs
, 
if˙t
, 
ùv4_mu…iˇ°
.
v4
, 
ö
);

565 
	`‰ì
(
$1
->
°rög
);

566 
	`‰ì
(
$1
);

570 
i£tùv6mc
: 
TOK_IPV6MULTICAST
 
TOK_IPV6_ADDR


572 
ö6_addr
 
ö6
;

573 
if˙t
 = 
ifs_ö_cuº_cfg
;

574 
ﬁ§_if
 *
ifs
 = 
ﬁ§_˙f
->
öãrÁ˚s
;

576 
	`PARSER_DEBUG_PRINTF
("\tIPv6 mu…iˇ°: %s\n", 
$2
->
°rög
);

578 i‡(
	`öë_±⁄
(
AF_INET6
, 
$2
->
°rög
, &
ö6
) <= 0) {

579 
	`Ârötf
(
°dîr
, "i£tùv6mc: Faûed c⁄vîtög IPáddªs†%s\n", 
$2
->
°rög
);

580 
YYABORT
;

583 
	`SET_IFS_CONF
(
ifs
, 
if˙t
, 
ùv6_mu…iˇ°
.
v6
, 
ö6
);

585 
	`‰ì
(
$2
->
°rög
);

586 
	`‰ì
(
$2
);

590 
i£tùv4§c
: 
TOK_IPV4SRC
 
TOK_IPV4_ADDR


592 
ö_addr
 
ö
;

593 
if˙t
 = 
ifs_ö_cuº_cfg
;

594 
ﬁ§_if
 *
ifs
 = 
ﬁ§_˙f
->
öãrÁ˚s
;

596 
	`PARSER_DEBUG_PRINTF
("\tIPv4 src: %s\n", 
$2
->
°rög
);

598 i‡(
	`öë_©⁄
(
$2
->
°rög
, &
ö
) == 0) {

599 
	`Ârötf
(
°dîr
, "i£tùv4§c: Faûed c⁄vîtög IPáddªs†%s\n", 
$2
->
°rög
);

600 
YYABORT
;

603 
	`SET_IFS_CONF
(
ifs
, 
if˙t
, 
ùv4_§c
.
v4
, 
ö
);

605 
	`‰ì
(
$2
->
°rög
);

606 
	`‰ì
(
$2
);

610 
i£tùv6§c
: 
TOK_IPV6SRC
 
TOK_IPV6_ADDR
 
TOK_SLASH
 
TOK_INTEGER


612 
ﬁ§_ù_¥efix
 
¥6
;

613 
if˙t
 = 
ifs_ö_cuº_cfg
;

614 
ﬁ§_if
 *
ifs
 = 
ﬁ§_˙f
->
öãrÁ˚s
;

616 
	`PARSER_DEBUG_PRINTF
("\tIPv6 sr¯¥efix: %s/%d\n", 
$2
->
°rög
, 
$4
->
öãgî
);

618 i‡(
	`öë_±⁄
(
AF_INET6
, 
$2
->
°rög
, &
¥6
.
¥efix
.
v6
) <= 0) {

619 
	`Ârötf
(
°dîr
, "i£tùv6§c: Faûed c⁄vîtög IPáddªs†%s\n", 
$2
->
°rög
);

620 
YYABORT
;

622 i‡(
$4
->
öãgî
 > 128) {

623 
	`Ârötf
(
°dîr
, "i£tùv6§c: IŒegÆ PªfixÀngth %d\n", 
$4
->
öãgî
);

624 
YYABORT
;

626 
¥6
.
¥efix_Àn
 = 
$4
->
öãgî
;

628 
	`SET_IFS_CONF
(
ifs
, 
if˙t
, 
ùv6_§c
, 
¥6
);

630 
	`‰ì
(
$2
->
°rög
);

631 
	`‰ì
(
$2
);

633 | 
TOK_IPV6SRC
 
TOK_IPV6_ADDR


635 
ﬁ§_ù_¥efix
 
¥6
;

636 
if˙t
 = 
ifs_ö_cuº_cfg
;

637 
ﬁ§_if
 *
ifs
 = 
ﬁ§_˙f
->
öãrÁ˚s
;

639 
	`PARSER_DEBUG_PRINTF
("\tIPv6 sr¯¥efix: %s/%d\n", 
$2
->
°rög
, 128);

641 i‡(
	`öë_±⁄
(
AF_INET6
, 
$2
->
°rög
, &
¥6
.
¥efix
.
v6
) <= 0) {

642 
	`Ârötf
(
°dîr
, "i£tùv6§c: Faûed c⁄vîtög IPáddªs†%s\n", 
$2
->
°rög
);

643 
YYABORT
;

645 
¥6
.
¥efix_Àn
 = 128;

647 
	`SET_IFS_CONF
(
ifs
, 
if˙t
, 
ùv6_§c
, 
¥6
);

649 
	`‰ì
(
$2
->
°rög
);

650 
	`‰ì
(
$2
);

654 
i£thñloöt
: 
TOK_HELLOINT
 
TOK_FLOAT


656 
if˙t
 = 
ifs_ö_cuº_cfg
;

657 
ﬁ§_if
 *
ifs
 = 
ﬁ§_˙f
->
öãrÁ˚s
;

659 
	`PARSER_DEBUG_PRINTF
("\tHELLO i¡îvÆ: %0.2f\n", 
$2
->
Êﬂtög
);

661 
	`SET_IFS_CONF
(
ifs
, 
if˙t
, 
hñlo_∑øms
.
emissi⁄_öãrvÆ
, 
$2
->
Êﬂtög
);

663 
	`‰ì
(
$2
);

666 
i£thñlovÆ
: 
TOK_HELLOVAL
 
TOK_FLOAT


668 
if˙t
 = 
ifs_ö_cuº_cfg
;

669 
ﬁ§_if
 *
ifs
 = 
ﬁ§_˙f
->
öãrÁ˚s
;

671 
	`PARSER_DEBUG_PRINTF
("\tHELLO vÆidôy: %0.2f\n", 
$2
->
Êﬂtög
);

673 
	`SET_IFS_CONF
(
ifs
, 
if˙t
, 
hñlo_∑øms
.
vÆidôy_time
, 
$2
->
Êﬂtög
);

675 
	`‰ì
(
$2
);

678 
i£âcöt
: 
TOK_TCINT
 
TOK_FLOAT


680 
if˙t
 = 
ifs_ö_cuº_cfg
;

681 
ﬁ§_if
 *
ifs
 = 
ﬁ§_˙f
->
öãrÁ˚s
;

683 
	`PARSER_DEBUG_PRINTF
("\tTC i¡îvÆ: %0.2f\n", 
$2
->
Êﬂtög
);

685 
	`SET_IFS_CONF
(
ifs
, 
if˙t
, 
tc_∑øms
.
emissi⁄_öãrvÆ
, 
$2
->
Êﬂtög
);

687 
	`‰ì
(
$2
);

690 
i£âcvÆ
: 
TOK_TCVAL
 
TOK_FLOAT


692 
if˙t
 = 
ifs_ö_cuº_cfg
;

693 
ﬁ§_if
 *
ifs
 = 
ﬁ§_˙f
->
öãrÁ˚s
;

695 
	`PARSER_DEBUG_PRINTF
("\tTC vÆidôy: %0.2f\n", 
$2
->
Êﬂtög
);

697 
	`SET_IFS_CONF
(
ifs
, 
if˙t
, 
tc_∑øms
.
vÆidôy_time
, 
$2
->
Êﬂtög
);

699 
	`‰ì
(
$2
);

702 
i£tmidöt
: 
TOK_MIDINT
 
TOK_FLOAT


704 
if˙t
 = 
ifs_ö_cuº_cfg
;

705 
ﬁ§_if
 *
ifs
 = 
ﬁ§_˙f
->
öãrÁ˚s
;

708 
	`PARSER_DEBUG_PRINTF
("\tMID i¡îvÆ: %0.2f\n", 
$2
->
Êﬂtög
);

710 
	`SET_IFS_CONF
(
ifs
, 
if˙t
, 
mid_∑øms
.
emissi⁄_öãrvÆ
, 
$2
->
Êﬂtög
);

712 
	`‰ì
(
$2
);

715 
i£tmidvÆ
: 
TOK_MIDVAL
 
TOK_FLOAT


717 
if˙t
 = 
ifs_ö_cuº_cfg
;

718 
ﬁ§_if
 *
ifs
 = 
ﬁ§_˙f
->
öãrÁ˚s
;

720 
	`PARSER_DEBUG_PRINTF
("\tMID vÆidôy: %0.2f\n", 
$2
->
Êﬂtög
);

722 
	`SET_IFS_CONF
(
ifs
, 
if˙t
, 
mid_∑øms
.
vÆidôy_time
, 
$2
->
Êﬂtög
);

724 
	`‰ì
(
$2
);

727 
i£th«öt
: 
TOK_HNAINT
 
TOK_FLOAT


729 
if˙t
 = 
ifs_ö_cuº_cfg
;

730 
ﬁ§_if
 *
ifs
 = 
ﬁ§_˙f
->
öãrÁ˚s
;

732 
	`PARSER_DEBUG_PRINTF
("\tHNA i¡îvÆ: %0.2f\n", 
$2
->
Êﬂtög
);

734 
	`SET_IFS_CONF
(
ifs
, 
if˙t
, 
h«_∑øms
.
emissi⁄_öãrvÆ
, 
$2
->
Êﬂtög
);

736 
	`‰ì
(
$2
);

739 
i£th«vÆ
: 
TOK_HNAVAL
 
TOK_FLOAT


741 
if˙t
 = 
ifs_ö_cuº_cfg
;

742 
ﬁ§_if
 *
ifs
 = 
ﬁ§_˙f
->
öãrÁ˚s
;

744 
	`PARSER_DEBUG_PRINTF
("\tHNA vÆidôy: %0.2f\n", 
$2
->
Êﬂtög
);

746 
	`SET_IFS_CONF
(
ifs
, 
if˙t
, 
h«_∑øms
.
vÆidôy_time
, 
$2
->
Êﬂtög
);

748 
	`‰ì
(
$2
);

751 
i£èutodëchg
: 
TOK_AUTODETCHG
 
TOK_BOOLEAN


753 
if˙t
 = 
ifs_ö_cuº_cfg
;

754 
ﬁ§_if
 *
ifs
 = 
ﬁ§_˙f
->
öãrÁ˚s
;

756 
	`PARSER_DEBUG_PRINTF
("\tAutodëe˘ ch™ges: %s\n", 
$2
->
boﬁón
 ? "YES" : "NO");

758 
	`SET_IFS_CONF
(
ifs
, 
if˙t
, 
autodëe˘_chg
, 
$2
->
boﬁón
);

760 
	`‰ì
(
$2
);

764 
i£éqmu…
: 
TOK_LQ_MULT
 
TOK_DEFAULT
 
TOK_FLOAT


766 i‡(
	`lq_mu…_hñ≥r
(
$2
, 
$3
) < 0) {

767 
YYABORT
;

771 | 
TOK_LQ_MULT
 
TOK_IPV4_ADDR
 
TOK_FLOAT


773 i‡(
	`lq_mu…_hñ≥r
(
$2
, 
$3
) < 0) {

774 
YYABORT
;

778 | 
TOK_LQ_MULT
 
TOK_IPV6_ADDR
 
TOK_FLOAT


780 i‡(
	`lq_mu…_hñ≥r
(
$2
, 
$3
) < 0) {

781 
YYABORT
;

786 
idebug
: 
TOK_DEBUGLEVEL
 
TOK_INTEGER


788 
ﬁ§_˙f
->
debug_Àvñ
 = 
$2
->
öãgî
;

789 
	`PARSER_DEBUG_PRINTF
("DebugÜevñ: %d\n", 
ﬁ§_˙f
->
debug_Àvñ
);

790 
	`‰ì
(
$2
);

795 
iùvîsi⁄
: 
TOK_IPVERSION
 
TOK_INTEGER


797 i‡(
$2
->
öãgî
 == 4) {

798 
ﬁ§_˙f
->
ù_vîsi⁄
 = 
AF_INET
;

799 
ﬁ§_˙f
->
ùsize
 = (
ö_addr
);

800 
ﬁ§_˙f
->
max∂í
 = 32;

801 } i‡(
$2
->
öãgî
 == 6) {

802 
ﬁ§_˙f
->
ù_vîsi⁄
 = 
AF_INET6
;

803 
ﬁ§_˙f
->
ùsize
 = (
ö6_addr
);

804 
ﬁ§_˙f
->
max∂í
 = 128;

806 
	`Ârötf
(
°dîr
, "IPversion must be 4 or 6!\n");

807 
YYABORT
;

810 
	`PARSER_DEBUG_PRINTF
("IpVîsi⁄: %d\n", 
$2
->
öãgî
);

811 
	`‰ì
(
$2
);

815 
fibmëric
: 
TOK_FIBMETRIC
 
TOK_STRING


817 
i
;

818 
	`PARSER_DEBUG_PRINTF
("FIBMëric: %s\n", 
$2
->
°rög
);

819 
i
=0; i<
FIBM_CNT
; i++) {

820 i‡(
	`°rcmp
(
$2
->
°rög
, 
FIB_METRIC_TXT
[
i
]) == 0) {

821 
ﬁ§_˙f
->
fib_mëric
 = 
i
;

825 i‡(
i
 =
FIBM_CNT
) {

826 
	`Ârötf
(
°dîr
, "Bad FIBMëri¯vÆue: %s\n", 
$2
->
°rög
);

827 
YYABORT
;

829 
	`‰ì
(
$1
);

830 
	`‰ì
(
$2
->
°rög
);

831 
	`‰ì
(
$2
);

835 
ih«4íåy
: 
TOK_IPV4_ADDR
 TOK_IPV4_ADDR

837 
ﬁ§_ù_addr
 
ùaddr
, 
√tmask
;

839 i‡(
ﬁ§_˙f
->
ù_vîsi⁄
 =
AF_INET6
) {

840 
	`Ârötf
(
°dîr
, "IPv4áddresses can only be used if \"IpVersion\" == 4, skipping HNA.\n");

841 
	`ﬁ§_°¨tup_¶ìp
(3);

844 
	`PARSER_DEBUG_PRINTF
("HNA IPv4É¡ry: %s/%s\n", 
$1
->
°rög
, 
$2
->string);

846 i‡(
	`öë_±⁄
(
AF_INET
, 
$1
->
°rög
, &
ùaddr
.
v4
) <= 0) {

847 
	`Ârötf
(
°dîr
, "ih«4íåy: Faûed c⁄vîtög IPáddªs†%s\n", 
$1
->
°rög
);

848 
YYABORT
;

850 i‡(
	`öë_±⁄
(
AF_INET
, 
$2
->
°rög
, &
√tmask
.
v4
) <= 0) {

851 
	`Ârötf
(
°dîr
, "ih«4íåy: Faûed c⁄vîtög IPáddªs†%s\n", 
$1
->
°rög
);

852 
YYABORT
;

856 i‡((
ùaddr
.
v4
.
s_addr
 & ~
√tmask
.v4.s_addr) != 0) {

857 
	`Ârötf
(
°dîr
, "ih«4íåy: Thêùaddªs†\"%s\" i†nŸáÇëw‹káddªss!\n", 
$1
->
°rög
);

858 
YYABORT
;

862 
	`ù_¥efix_li°_add
(&
ﬁ§_˙f
->
h«_íåõs
, &
ùaddr
, 
	`ﬁ§_√tmask_to_¥efix
(&
√tmask
));

864 
	`‰ì
(
$1
->
°rög
);

865 
	`‰ì
(
$1
);

866 
	`‰ì
(
$2
->
°rög
);

867 
	`‰ì
(
$2
);

869 | 
TOK_IPV4_ADDR
 
TOK_SLASH
 
TOK_INTEGER


871 
ﬁ§_ù_addr
 
ùaddr
, 
√tmask
;

873 i‡(
ﬁ§_˙f
->
ù_vîsi⁄
 =
AF_INET6
) {

874 
	`Ârötf
(
°dîr
, "IPv4áddresses can only be used if \"IpVersion\" == 4, skipping HNA.\n");

875 
	`ﬁ§_°¨tup_¶ìp
(3);

878 
	`PARSER_DEBUG_PRINTF
("HNA IPv4É¡ry: %s/%d\n", 
$1
->
°rög
, 
$3
->
öãgî
);

880 i‡(
	`öë_±⁄
(
AF_INET
, 
$1
->
°rög
, &
ùaddr
.
v4
) <= 0) {

881 
	`Ârötf
(
°dîr
, "ih«4íåy: Faûed c⁄vîtög IPáddªs†%s\n", 
$1
->
°rög
);

882 
YYABORT
;

884 i‡(
$3
->
öãgî
 > 
ﬁ§_˙f
->
max∂í
) {

885 
	`Ârötf
(
°dîr
, "ih«4íåy: PªfixÜí %u > %d i†nŸáŒowed!\n", 
$3
->
öãgî
, 
ﬁ§_˙f
->
max∂í
);

886 
YYABORT
;

890 
	`ﬁ§_¥efix_to_√tmask
(&
√tmask
, 
$3
->
öãgî
);

891 i‡((
ùaddr
.
v4
.
s_addr
 & ~
√tmask
.v4.s_addr) != 0) {

892 
	`Ârötf
(
°dîr
, "ih«4íåy: Thêùaddªs†\"%s\" i†nŸáÇëw‹káddªss!\n", 
$1
->
°rög
);

893 
YYABORT
;

897 
	`ù_¥efix_li°_add
(&
ﬁ§_˙f
->
h«_íåõs
, &
ùaddr
, 
$3
->
öãgî
);

899 
	`‰ì
(
$1
->
°rög
);

900 
	`‰ì
(
$1
);

901 
	`‰ì
(
$3
);

905 
ih«6íåy
: 
TOK_IPV6_ADDR
 
TOK_INTEGER


907 i‡(
	`add_ùv6_addr
(
$1
, 
$2
)) {

908 
YYABORT
;

911 | 
TOK_IPV6_ADDR
 
TOK_SLASH
 
TOK_INTEGER


913 i‡(
	`add_ùv6_addr
(
$1
, 
$3
)) {

914 
YYABORT
;

919 
if°¨t
: 
TOK_INTERFACE


921 
	`PARSER_DEBUG_PRINTF
("setting ifs_in_curr_cfg = 0\n");

922 
ifs_ö_cuº_cfg
 = 0;

926 
i‚ick
: 
TOK_STRING


928 
ﬁ§_if
 *
ö
, *
œ°
;

929 
ö
 = 
ﬁ§_˙f
->
öãrÁ˚s
;

930 
œ°
 = 
NULL
;

931 
ö
 !
NULL
) {

932 i‡(
	`°rcmp
(
ö
->
«me
, 
$1
->
°rög
) == 0) {

933 
	`‰ì
 (
$1
->
°rög
);

936 
œ°
 = 
ö
;

937 
ö
 = in->
√xt
;

940 i‡(
ö
 !
NULL
) {

942 i‡(
œ°
) {

943 
œ°
->
√xt
 = 
ö
->next;

946 
ﬁ§_˙f
->
öãrÁ˚s
 = 
ö
->
√xt
;

950 
ö
 = 
	`mÆloc
((*in));

951 i‡(
ö
 =
NULL
) {

952 
	`Ârötf
(
°dîr
, "Out of memory(ADD IF)\n");

953 
YYABORT
;

955 
	`mem£t
(
ö
, 0, (*in));

957 
ö
->
˙f
 = 
	`mÆloc
((*in->cnf));

958 i‡(
ö
->
˙f
 =
NULL
) {

959 
	`Ârötf
(
°dîr
, "Out of memory(ADD IFRULE)\n");

960 
YYABORT
;

962 
	`mem£t
(
ö
->
˙f
, 0x00, (*in->cnf));

964 
ö
->
˙fi
 = 
	`mÆloc
((*in->cnfi));

965 i‡(
ö
->
˙f
 =
NULL
) {

966 
	`Ârötf
(
°dîr
, "Out of memory(ADD IFRULE)\n");

967 
YYABORT
;

969 
	`mem£t
(
ö
->
˙fi
, 0xFF, (*in->cnfi));

970 
ö
->
˙fi
->
‹ig_lq_mu…_˙t
=0;

972 
ö
->
«me
 = 
$1
->
°rög
;

975 
ö
->
√xt
 = 
ﬁ§_˙f
->
öãrÁ˚s
;

976 
ﬁ§_˙f
->
öãrÁ˚s
 = 
ö
;

977 
ifs_ö_cuº_cfg
++;

978 
	`‰ì
(
$1
);

982 
bnoöt
: 
TOK_NOINT
 
TOK_BOOLEAN


984 
	`PARSER_DEBUG_PRINTF
("Noöà£àtÿ%d\n", 
$2
->
boﬁón
);

985 
ﬁ§_˙f
->
Ælow_no_öãrÁ˚s
 = 
$2
->
boﬁón
;

986 
	`‰ì
(
$2
);

990 
©os
: 
TOK_TOS
 
TOK_INTEGER


992 
	`PARSER_DEBUG_PRINTF
("TOS: %d\n", 
$2
->
öãgî
);

993 
ﬁ§_˙f
->
tos
 = 
$2
->
öãgî
;

994 
	`‰ì
(
$2
);

999 
aﬁ§p‹t
: 
TOK_OLSRPORT
 
TOK_INTEGER


1001 
	`PARSER_DEBUG_PRINTF
("Ol§P‹t: %d\n", 
$2
->
öãgî
);

1002 
ﬁ§_˙f
->
ﬁ§p‹t
 = 
$2
->
öãgî
;

1003 
	`‰ì
(
$2
);

1007 
úçrŸo
: 
TOK_RTPROTO
 
TOK_INTEGER


1009 
	`PARSER_DEBUG_PRINTF
("RtPrŸo: %d\n", 
$2
->
öãgî
);

1010 
ﬁ§_˙f
->
π_¥Ÿo
 = 
$2
->
öãgî
;

1011 
	`‰ì
(
$2
);

1015 
úâabÀ
: 
TOK_RTTABLE
 
TOK_INTEGER


1017 
	`PARSER_DEBUG_PRINTF
("RtTabÀ: %d\n", 
$2
->
öãgî
);

1018 
ﬁ§_˙f
->
π_èbÀ
 = 
$2
->
öãgî
;

1019 
	`‰ì
(
$2
);

1021 | 
TOK_RTTABLE
 
TOK_AUTO


1023 
	`PARSER_DEBUG_PRINTF
("RtTable:áuto\n");

1024 
ﬁ§_˙f
->
π_èbÀ
 = 
DEF_RT_AUTO
;

1025 
	`‰ì
(
$2
);

1029 
úâabÀ_deÁu…
: 
TOK_RTTABLE_DEFAULT
 
TOK_INTEGER


1031 
	`PARSER_DEBUG_PRINTF
("RtTabÀDeÁu…: %d\n", 
$2
->
öãgî
);

1032 
ﬁ§_˙f
->
π_èbÀ_deÁu…
 = 
$2
->
öãgî
;

1033 
	`‰ì
(
$2
);

1035 | 
TOK_RTTABLE_DEFAULT
 
TOK_AUTO


1037 
	`PARSER_DEBUG_PRINTF
("RtTableDefault:áuto\n");

1038 
ﬁ§_˙f
->
π_èbÀ_deÁu…
 = 
DEF_RT_AUTO
;

1039 
	`‰ì
(
$2
);

1043 
úâabÀ_tu¬ñ
: 
TOK_RTTABLE_TUNNEL
 
TOK_INTEGER


1045 
	`PARSER_DEBUG_PRINTF
("RtTabÀTu¬ñ: %d\n", 
$2
->
öãgî
);

1046 
ﬁ§_˙f
->
π_èbÀ_tu¬ñ
 = 
$2
->
öãgî
;

1047 
	`‰ì
(
$2
);

1049 | 
TOK_RTTABLE_TUNNEL
 
TOK_AUTO


1051 
	`PARSER_DEBUG_PRINTF
("RtTableTunnel:áuto\n");

1052 
ﬁ§_˙f
->
π_èbÀ_tu¬ñ
 = 
DEF_RT_AUTO
;

1053 
	`‰ì
(
$2
);

1057 
úâabÀ_¥i‹ôy
: 
TOK_RTTABLE_PRIORITY
 
TOK_INTEGER


1059 
	`PARSER_DEBUG_PRINTF
("RtTabÀPri‹ôy: %d\n", 
$2
->
öãgî
);

1060 
ﬁ§_˙f
->
π_èbÀ_¥i
 = 
$2
->
öãgî
;

1061 
	`‰ì
(
$2
);

1063 | 
TOK_RTTABLE_PRIORITY
 
TOK_AUTO


1065 
	`PARSER_DEBUG_PRINTF
("RtTablePriority:áuto\n");

1066 
ﬁ§_˙f
->
π_èbÀ_¥i
 = 
DEF_RT_AUTO
;

1067 
	`‰ì
(
$2
);

1069 | 
TOK_RTTABLE_PRIORITY
 
TOK_NONE


1071 
	`PARSER_DEBUG_PRINTF
("RtTablePriority:Çone\n");

1072 
ﬁ§_˙f
->
π_èbÀ_¥i
 = 
DEF_RT_NONE
;

1073 
	`‰ì
(
$2
);

1077 
úâabÀ_deÁu…_¥i‹ôy
: 
TOK_RTTABLE_DEFAULT_PRIORITY
 
TOK_INTEGER


1079 
	`PARSER_DEBUG_PRINTF
("RtTabÀDeÁu…Pri‹ôy: %d\n", 
$2
->
öãgî
);

1080 
ﬁ§_˙f
->
π_èbÀ_deÁu…_¥i
 = 
$2
->
öãgî
;

1081 
	`‰ì
(
$2
);

1083 | 
TOK_RTTABLE_DEFAULT_PRIORITY
 
TOK_AUTO


1085 
	`PARSER_DEBUG_PRINTF
("RtTableDefaultPriority:áuto\n");

1086 
ﬁ§_˙f
->
π_èbÀ_deÁu…_¥i
 = 
DEF_RT_AUTO
;

1087 
	`‰ì
(
$2
);

1089 | 
TOK_RTTABLE_DEFAULT_PRIORITY
 
TOK_NONE


1091 
	`PARSER_DEBUG_PRINTF
("RtTableDefaultPriority:Çone\n");

1092 
ﬁ§_˙f
->
π_èbÀ_deÁu…_¥i
 = 
DEF_RT_NONE
;

1093 
	`‰ì
(
$2
);

1097 
úâabÀ_tu¬ñ_¥i‹ôy
: 
TOK_RTTABLE_TUNNEL_PRIORITY
 
TOK_INTEGER


1099 
	`PARSER_DEBUG_PRINTF
("RtTabÀTu¬ñPri‹ôy: %d\n", 
$2
->
öãgî
);

1100 
ﬁ§_˙f
->
π_èbÀ_tu¬ñ_¥i
 = 
$2
->
öãgî
;

1101 
	`‰ì
(
$2
);

1103 | 
TOK_RTTABLE_TUNNEL_PRIORITY
 
TOK_AUTO


1105 
	`PARSER_DEBUG_PRINTF
("RtTableTunnelPriority:áuto\n");

1106 
ﬁ§_˙f
->
π_èbÀ_tu¬ñ_¥i
 = 
DEF_RT_AUTO
;

1107 
	`‰ì
(
$2
);

1109 | 
TOK_RTTABLE_TUNNEL_PRIORITY
 
TOK_NONE


1111 
	`PARSER_DEBUG_PRINTF
("RtTableTunnelPriority:Çone\n");

1112 
ﬁ§_˙f
->
π_èbÀ_tu¬ñ_¥i
 = 
DEF_RT_NONE
;

1113 
	`‰ì
(
$2
);

1117 
úâabÀ_deÁu…ﬁ§_¥i‹ôy
: 
TOK_RTTABLE_DEFAULTOLSR_PRIORITY
 
TOK_INTEGER


1119 
	`PARSER_DEBUG_PRINTF
("RtTabÀDeÁu…Ol§Pri‹ôy: %d\n", 
$2
->
öãgî
);

1120 
ﬁ§_˙f
->
π_èbÀ_deÁu…ﬁ§_¥i
 = 
$2
->
öãgî
;

1121 
	`‰ì
(
$2
);

1123 | 
TOK_RTTABLE_DEFAULTOLSR_PRIORITY
 
TOK_AUTO


1125 
	`PARSER_DEBUG_PRINTF
("RtTableDefaultOlsrPriority:áuto\n");

1126 
ﬁ§_˙f
->
π_èbÀ_deÁu…ﬁ§_¥i
 = 
DEF_RT_AUTO
;

1127 
	`‰ì
(
$2
);

1129 | 
TOK_RTTABLE_DEFAULTOLSR_PRIORITY
 
TOK_NONE


1131 
	`PARSER_DEBUG_PRINTF
("RtTableDefaultOlsrPriority:Çone\n");

1132 
ﬁ§_˙f
->
π_èbÀ_deÁu…ﬁ§_¥i
 = 
DEF_RT_NONE
;

1133 
	`‰ì
(
$2
);

1137 
awûlög√ss
: 
TOK_WILLINGNESS
 
TOK_INTEGER


1139 
	`PARSER_DEBUG_PRINTF
("Wûlög√ss: %d\n", 
$2
->
öãgî
);

1140 
ﬁ§_˙f
->
wûlög√ss_auto
 = 
Ál£
;

1141 
ﬁ§_˙f
->
wûlög√ss
 = 
$2
->
öãgî
;

1142 
	`‰ì
(
$2
);

1146 
bu£hy°
: 
TOK_USEHYST
 
TOK_BOOLEAN


1148 
ﬁ§_˙f
->
u£_hy°îesis
 = 
$2
->
boﬁón
;

1149 
	`PARSER_DEBUG_PRINTF
("Hy°îesi†%s\n", 
ﬁ§_˙f
->
u£_hy°îesis
 ? "enabled" : "disabled");

1150 
	`‰ì
(
$2
);

1154 
fhy°sˇÀ
: 
TOK_HYSTSCALE
 
TOK_FLOAT


1156 
ﬁ§_˙f
->
hy°îesis_∑øm
.
sˇlög
 = 
$2
->
Êﬂtög
;

1157 
	`PARSER_DEBUG_PRINTF
("Hy°îesi†Sˇlög: %0.2f\n", 
$2
->
Êﬂtög
);

1158 
	`‰ì
(
$2
);

1162 
fhy°uµî
: 
TOK_HYSTUPPER
 
TOK_FLOAT


1164 
ﬁ§_˙f
->
hy°îesis_∑øm
.
thr_high
 = 
$2
->
Êﬂtög
;

1165 
	`PARSER_DEBUG_PRINTF
("Hy°îesi†UµîThr: %0.2f\n", 
$2
->
Êﬂtög
);

1166 
	`‰ì
(
$2
);

1170 
fhy°lowî
: 
TOK_HYSTLOWER
 
TOK_FLOAT


1172 
ﬁ§_˙f
->
hy°îesis_∑øm
.
thr_low
 = 
$2
->
Êﬂtög
;

1173 
	`PARSER_DEBUG_PRINTF
("Hy°îesi†LowîThr: %0.2f\n", 
$2
->
Êﬂtög
);

1174 
	`‰ì
(
$2
);

1178 
ÂﬁÃ©e
: 
TOK_POLLRATE
 
TOK_FLOAT


1180 
	`PARSER_DEBUG_PRINTF
("PﬁÃ©ê%0.2f\n", 
$2
->
Êﬂtög
);

1181 
ﬁ§_˙f
->
pﬁÃ©e
 = 
$2
->
Êﬂtög
;

1182 
	`‰ì
(
$2
);

1186 
‚icchg•ﬁÃt
: 
TOK_NICCHGSPOLLRT
 
TOK_FLOAT


1188 
	`PARSER_DEBUG_PRINTF
("NIC Ch™ge†PﬁÃ©ê%0.2f\n", 
$2
->
Êﬂtög
);

1189 
ﬁ§_˙f
->
nic_chgs_pﬁÃ©e
 = 
$2
->
Êﬂtög
;

1190 
	`‰ì
(
$2
);

1194 
©¸edund™cy
: 
TOK_TCREDUNDANCY
 
TOK_INTEGER


1196 
	`PARSER_DEBUG_PRINTF
("TCÑedund™cy %d\n", 
$2
->
öãgî
);

1197 
ﬁ§_˙f
->
tc_ªdund™cy
 = 
$2
->
öãgî
;

1198 
	`‰ì
(
$2
);

1202 
am¥covîage
: 
TOK_MPRCOVERAGE
 
TOK_INTEGER


1204 
	`PARSER_DEBUG_PRINTF
("MPR covîagê%d\n", 
$2
->
öãgî
);

1205 
ﬁ§_˙f
->
m¥_covîage
 = 
$2
->
öãgî
;

1206 
	`‰ì
(
$2
);

1210 
Æq_Àvñ
: 
TOK_LQ_LEVEL
 
TOK_INTEGER


1212 
	`PARSER_DEBUG_PRINTF
("Lök quÆôyÜevñ %d\n", 
$2
->
öãgî
);

1213 
ﬁ§_˙f
->
lq_Àvñ
 = 
$2
->
öãgî
;

1214 
	`‰ì
(
$2
);

1218 
Æq_fish
: 
TOK_LQ_FISH
 
TOK_INTEGER


1220 
	`PARSER_DEBUG_PRINTF
("Lök quÆôy fishÉyê%d\n", 
$2
->
öãgî
);

1221 
ﬁ§_˙f
->
lq_fish
 = 
$2
->
öãgî
;

1222 
	`‰ì
(
$2
);

1226 
Æq_agög
: 
TOK_LQ_AGING
 
TOK_FLOAT


1228 
	`PARSER_DEBUG_PRINTF
("Lök quÆôyágög fa˘‹ %f\n", 
$2
->
Êﬂtög
);

1229 
ﬁ§_˙f
->
lq_agög
 = 
$2
->
Êﬂtög
;

1230 
	`‰ì
(
$2
);

1234 
amö_tc_vtime
: 
TOK_MIN_TC_VTIME
 
TOK_FLOAT


1236 
	`PARSER_DEBUG_PRINTF
("Möimum TC vÆidôyÅimê%f\n", 
$2
->
Êﬂtög
);

1237 
ﬁ§_˙f
->
mö_tc_vtime
 = 
$2
->
Êﬂtög
;

1238 
	`‰ì
(
$2
);

1242 
Æock_fûe
: 
TOK_LOCK_FILE
 
TOK_STRING


1244 
	`PARSER_DEBUG_PRINTF
("Lock fûê%s\n", 
$2
->
°rög
);

1245 
ﬁ§_˙f
->
lock_fûe
 = 
$2
->
°rög
;

1246 
	`‰ì
(
$2
);

1249 
Æq_∂ugö
: 
TOK_LQ_PLUGIN
 
TOK_STRING


1251 
ﬁ§_˙f
->
lq_Æg‹ôhm
 = 
$2
->
°rög
;

1252 
	`PARSER_DEBUG_PRINTF
("LQ Alg‹ôhm: %s\n", 
$2
->
°rög
);

1253 
	`‰ì
(
$2
);

1257 
™©_thªsh
: 
TOK_LQ_NAT_THRESH
 
TOK_FLOAT


1259 
	`PARSER_DEBUG_PRINTF
("NATÅhªshﬁd %0.2f\n", 
$2
->
Êﬂtög
);

1260 
ﬁ§_˙f
->
lq_«t_thªsh
 = 
$2
->
Êﬂtög
;

1261 
	`‰ì
(
$2
);

1265 
b˛ór_s¸ìn
: 
TOK_CLEAR_SCREEN
 
TOK_BOOLEAN


1267 
	`PARSER_DEBUG_PRINTF
("CÀ¨ s¸ì¿%s\n", 
$2
->
boﬁón
 ? "enabled" : "disabled");

1268 
ﬁ§_˙f
->
˛ór_s¸ìn
 = 
$2
->
boﬁón
;

1269 
	`‰ì
(
$2
);

1273 
su£_niô
: 
TOK_USE_NIIT
 
TOK_BOOLEAN


1275 
	`PARSER_DEBUG_PRINTF
("U£ NIIT i∞å™¶©i⁄: %s\n", 
$2
->
boﬁón
 ? "enabled" : "disabled");

1276 
ﬁ§_˙f
->
u£_niô
 = 
$2
->
boﬁón
;

1277 
	`‰ì
(
$2
);

1281 
bsm¨t_gw
: 
TOK_SMART_GW
 
TOK_BOOLEAN


1283 
	`PARSER_DEBUG_PRINTF
("Sm¨àg©eway sy°em: %s\n", 
$2
->
boﬁón
 ? "enabled" : "disabled");

1284 
ﬁ§_˙f
->
sm¨t_gw_a˘ive
 = 
$2
->
boﬁón
;

1285 
	`‰ì
(
$2
);

1289 
bsm¨t_gw_Ælow_«t
: 
TOK_SMART_GW_ALLOW_NAT
 
TOK_BOOLEAN


1291 
	`PARSER_DEBUG_PRINTF
("Sm¨àg©ewayáŒow clõ¡Ç©: %s\n", 
$2
->
boﬁón
 ? "yes" : "no");

1292 
ﬁ§_˙f
->
sm¨t_gw_Ælow_«t
 = 
$2
->
boﬁón
;

1293 
	`‰ì
(
$2
);

1297 
ism¨t_gw_≥riod
: 
TOK_SMART_GW_PERIOD
 
TOK_INTEGER


1299 
	`PARSER_DEBUG_PRINTF
("Sm¨àg©ewayÖîiod: %d\n", 
$2
->
öãgî
);

1300 
ﬁ§_˙f
->
sm¨t_gw_≥riod
 = 
$2
->
öãgî
;

1301 
	`‰ì
(
$2
);

1305 
asm¨t_gw_°abÀcou¡
: 
TOK_SMART_GW_STABLECOUNT
 
TOK_INTEGER


1307 
	`PARSER_DEBUG_PRINTF
("Sm¨àg©eway sèbÀcou¡: %d\n", 
$2
->
öãgî
);

1308 
ﬁ§_˙f
->
sm¨t_gw_°abÀcou¡
 = 
$2
->
öãgî
;

1309 
	`‰ì
(
$2
);

1313 
asm¨t_gw_thªsh
: 
TOK_SMART_GW_THRESH
 
TOK_INTEGER


1315 
	`PARSER_DEBUG_PRINTF
("Sm¨àg©ewayÅhªshﬁd: %d\n", 
$2
->
öãgî
);

1316 
ﬁ§_˙f
->
sm¨t_gw_thªsh
 = 
$2
->
öãgî
;

1317 
	`‰ì
(
$2
);

1321 
ssm¨t_gw_u∂ök
: 
TOK_SMART_GW_UPLINK
 
TOK_STRING


1323 
	`PARSER_DEBUG_PRINTF
("Sm¨àg©eway u∂ök: %s\n", 
$2
->
°rög
);

1324 i‡(
	`°rˇ£cmp
(
$2
->
°rög
, 
GW_UPLINK_TXT
[
GW_UPLINK_NONE
]) == 0) {

1325 
ﬁ§_˙f
->
sm¨t_gw_ty≥
 = 
GW_UPLINK_NONE
;

1327 i‡(
	`°rˇ£cmp
(
$2
->
°rög
, 
GW_UPLINK_TXT
[
GW_UPLINK_IPV4
]) == 0) {

1328 
ﬁ§_˙f
->
sm¨t_gw_ty≥
 = 
GW_UPLINK_IPV4
;

1330 i‡(
	`°rˇ£cmp
(
$2
->
°rög
, 
GW_UPLINK_TXT
[
GW_UPLINK_IPV6
]) == 0) {

1331 
ﬁ§_˙f
->
sm¨t_gw_ty≥
 = 
GW_UPLINK_IPV6
;

1333 i‡(
	`°rˇ£cmp
(
$2
->
°rög
, 
GW_UPLINK_TXT
[
GW_UPLINK_IPV46
]) == 0) {

1334 
ﬁ§_˙f
->
sm¨t_gw_ty≥
 = 
GW_UPLINK_IPV46
;

1337 
	`Ârötf
(
°dîr
, "Bad g©eway u∂ökÅy≥: %s\n", 
$2
->
°rög
);

1338 
YYABORT
;

1340 
	`‰ì
(
$2
);

1344 
ism¨t_gw_•ìd
: 
TOK_SMART_GW_SPEED
 
TOK_INTEGER
 TOK_INTEGER

1346 
	`PARSER_DEBUG_PRINTF
("Sm¨àg©eway s≥ed: %u u∂ök/%u dow∆ök kbô/s\n", 
$2
->
öãgî
, 
$3
->integer);

1347 
ﬁ§_˙f
->
sm¨t_gw_u∂ök
 = 
$2
->
öãgî
;

1348 
ﬁ§_˙f
->
sm¨t_gw_dow∆ök
 = 
$3
->
öãgî
;

1349 
	`‰ì
(
$2
);

1350 
	`‰ì
(
$3
);

1354 
bsm¨t_gw_u∂ök_«t
: 
TOK_SMART_GW_UPLINK_NAT
 
TOK_BOOLEAN


1356 
	`PARSER_DEBUG_PRINTF
("Sm¨àg©eway u∂ökÇ©: %s\n", 
$2
->
boﬁón
 ? "yes" : "no");

1357 
ﬁ§_˙f
->
sm¨t_gw_u∂ök_«t
 = 
$2
->
boﬁón
;

1358 
	`‰ì
(
$2
);

1362 
ism¨t_gw_¥efix
: 
TOK_SMART_GW_PREFIX
 
TOK_IPV6_ADDR
 
TOK_INTEGER


1364 
	`PARSER_DEBUG_PRINTF
("Sm¨àg©ewayÖªfix: %†%u\n", 
$2
->
°rög
, 
$3
->
öãgî
);

1365 i‡(
	`öë_±⁄
(
ﬁ§_˙f
->
ù_vîsi⁄
, 
$2
->
°rög
, &ﬁ§_˙f->
sm¨t_gw_¥efix
.
¥efix
) == 0) {

1366 
	`Ârötf
(
°dîr
, "Bad IPÖ¨ào‡g©ewayÖªfix: %s\n", 
$2
->
°rög
);

1367 
YYABORT
;

1369 
ﬁ§_˙f
->
sm¨t_gw_¥efix
.
¥efix_Àn
 = (
uöt8_t
)
$3
->
öãgî
;

1371 
	`‰ì
(
$2
);

1372 
	`‰ì
(
$3
);

1374 | 
TOK_SMART_GW_PREFIX
 
TOK_IPV6_ADDR
 
TOK_SLASH
 
TOK_INTEGER


1376 
	`PARSER_DEBUG_PRINTF
("Sm¨àg©ewayÖªfix: %†%u\n", 
$2
->
°rög
, 
$4
->
öãgî
);

1377 i‡(
	`öë_±⁄
(
ﬁ§_˙f
->
ù_vîsi⁄
, 
$2
->
°rög
, &ﬁ§_˙f->
sm¨t_gw_¥efix
.
¥efix
) == 0) {

1378 
	`Ârötf
(
°dîr
, "Bad IPÖ¨ào‡g©ewayÖªfix: %s\n", 
$2
->
°rög
);

1379 
YYABORT
;

1381 
ﬁ§_˙f
->
sm¨t_gw_¥efix
.
¥efix_Àn
 = (
uöt8_t
)
$4
->
öãgî
;

1383 
	`‰ì
(
$2
);

1384 
	`‰ì
(
$4
);

1388 
b§c_ù_rouãs
: 
TOK_SRC_IP_ROUTES
 
TOK_BOOLEAN


1390 
	`PARSER_DEBUG_PRINTF
("U£ origö©‹ f‹Ñouã†§c-ù: %s\n", 
$2
->
boﬁón
 ? "yes" : "no");

1391 i‡(
ﬁ§_˙f
->
ù_vîsi⁄
 !
AF_INET
) {

1392 
	`Ârötf
(
°dîr
, "Source ipÑoutesÇotÖossible with IPV6\n");

1393 
YYABORT
;

1395 
ﬁ§_˙f
->
u£_§c_ù_rouãs
 = 
$2
->
boﬁón
;

1396 
	`‰ì
(
$2
);

1400 
amaö_ù
: 
TOK_MAIN_IP
 
TOK_IPV4_ADDR


1402 
	`PARSER_DEBUG_PRINTF
("Fixed Maö IP: %s\n", 
$2
->
°rög
);

1404 i‡(
ﬁ§_˙f
->
ù_vîsi⁄
 !
AF_INET


1405 || 
	`öë_±⁄
(
ﬁ§_˙f
->
ù_vîsi⁄
, 
$2
->
°rög
, &ﬁ§_˙f->
maö_addr
) != 1) {

1406 
	`Ârötf
(
°dîr
, "Bad maö IP: %s\n", 
$2
->
°rög
);

1407 
YYABORT
;

1409 
ﬁ§_˙f
->
uniˇ°_§c_ù
 = ol§_˙f->
maö_addr
;

1410 
	`‰ì
(
$2
);

1412 | 
TOK_MAIN_IP
 
TOK_IPV6_ADDR


1414 
	`PARSER_DEBUG_PRINTF
("Fixed Maö IP: %s\n", 
$2
->
°rög
);

1416 i‡(
ﬁ§_˙f
->
ù_vîsi⁄
 !
AF_INET6


1417 || 
	`öë_±⁄
(
ﬁ§_˙f
->
ù_vîsi⁄
, 
$2
->
°rög
, &ﬁ§_˙f->
maö_addr
) != 1) {

1418 
	`Ârötf
(
°dîr
, "Bad maö IP: %s\n", 
$2
->
°rög
);

1419 
YYABORT
;

1421 
	`‰ì
(
$2
);

1425 
b£t_ùf‹w¨d
: 
TOK_SET_IPFORWARD
 
TOK_BOOLEAN


1427 
	`PARSER_DEBUG_PRINTF
("Së IP-F‹w¨dÖrocfûêv¨übÀ: %s\n", 
$2
->
boﬁón
 ? "yes" : "no");

1428 
ﬁ§_˙f
->
£t_ù_f‹w¨d
 = 
$2
->
boﬁón
;

1429 
	`‰ì
(
$2
);

1434 
∂block
: 
TOK_PLUGIN
 
TOK_STRING


1436 
∂ugö_íåy
 *
≥
, *
œ°
;

1438 
≥
 = 
ﬁ§_˙f
->
∂ugös
;

1439 
œ°
 = 
NULL
;

1440 
≥
 !
NULL
) {

1441 i‡(
	`°rcmp
(
≥
->
«me
, 
$2
->
°rög
) == 0) {

1442 
	`‰ì
 (
$2
->
°rög
);

1445 
œ°
 = 
≥
;

1446 
≥
 =Öe->
√xt
;

1449 i‡(
≥
 !
NULL
) {

1451 i‡(
œ°
) {

1452 
œ°
->
√xt
 = 
≥
->next;

1455 
ﬁ§_˙f
->
∂ugös
 = 
≥
->
√xt
;

1459 
≥
 = 
	`mÆloc
((*pe));

1461 i‡(
≥
 =
NULL
) {

1462 
	`Ârötf
(
°dîr
, "Out of memory(ADD PL)\n");

1463 
YYABORT
;

1466 
≥
->
«me
 = 
$2
->
°rög
;

1467 
≥
->
∑øms
 = 
NULL
;

1469 
	`PARSER_DEBUG_PRINTF
("Plugö: %s\n", 
$2
->
°rög
);

1473 
≥
->
√xt
 = 
ﬁ§_˙f
->
∂ugös
;

1474 
ﬁ§_˙f
->
∂ugös
 = 
≥
;

1476 
	`‰ì
(
$2
);

1480 
∂∑øm
: 
TOK_PLPARAM
 
TOK_STRING
 TOK_STRING

1482 
∂ugö_∑øm
 *
µ
 = 
	`mÆloc
((*pp));

1484 i‡(
µ
 =
NULL
) {

1485 
	`Ârötf
(
°dîr
, "Out of memory(ADD PP)\n");

1486 
YYABORT
;

1489 
	`PARSER_DEBUG_PRINTF
("PlugöÖ¨am key:\"%s\" vÆ: \"%s\"\n", 
$2
->
°rög
, 
$3
->string);

1491 
µ
->
key
 = 
$2
->
°rög
;

1492 
µ
->
vÆue
 = 
$3
->
°rög
;

1495 
µ
->
√xt
 = 
ﬁ§_˙f
->
∂ugös
->
∑øms
;

1496 
ﬁ§_˙f
->
∂ugös
->
∑øms
 = 
µ
;

1498 
	`‰ì
(
$2
);

1499 
	`‰ì
(
$3
);

1503 
vcommít
: 
TOK_COMMENT


1511 
	}
%%

1513 
	$yyîr‹
 (c⁄° *
°rög
)

1515 
	`Ârötf
(
°dîr
, "C⁄figÜöê%d: %s\n", 
cuºít_löe
, 
°rög
);

1516 
	}
}

	@src/cfgparser/oscan.c

5 
	#YY_INT_ALIGNED
 

	)

9 
	#FLEX_SCANNER


	)

10 
	#YY_FLEX_MAJOR_VERSION
 2

	)

11 
	#YY_FLEX_MINOR_VERSION
 5

	)

12 
	#YY_FLEX_SUBMINOR_VERSION
 35

	)

13 #i‡
YY_FLEX_SUBMINOR_VERSION
 > 0

14 
	#FLEX_BETA


	)

20 
	~<°dio.h
>

21 
	~<°rög.h
>

22 
	~<î∫o.h
>

23 
	~<°dlib.h
>

29 #i‚de‡
FLEXINT_H


30 
	#FLEXINT_H


	)

34 #i‡
deföed
 (
__STDC_VERSION__
) && __STDC_VERSION__ >= 199901L

39 #i‚de‡
__STDC_LIMIT_MACROS


40 
	#__STDC_LIMIT_MACROS
 1

	)

43 
	~<öây≥s.h
>

44 
öt8_t
 
	tÊex_öt8_t
;

45 
uöt8_t
 
	tÊex_uöt8_t
;

46 
öt16_t
 
	tÊex_öt16_t
;

47 
uöt16_t
 
	tÊex_uöt16_t
;

48 
öt32_t
 
	tÊex_öt32_t
;

49 
uöt32_t
 
	tÊex_uöt32_t
;

51 sig√d 
	tÊex_öt8_t
;

52 
	tÊex_öt16_t
;

53 
	tÊex_öt32_t
;

54 
	tÊex_uöt8_t
;

55 
	tÊex_uöt16_t
;

56 
	tÊex_uöt32_t
;

59 #i‚de‡
INT8_MIN


60 
	#INT8_MIN
 (-128)

	)

62 #i‚de‡
INT16_MIN


63 
	#INT16_MIN
 (-32767-1)

	)

65 #i‚de‡
INT32_MIN


66 
	#INT32_MIN
 (-2147483647-1)

	)

68 #i‚de‡
INT8_MAX


69 
	#INT8_MAX
 (127)

	)

71 #i‚de‡
INT16_MAX


72 
	#INT16_MAX
 (32767)

	)

74 #i‚de‡
INT32_MAX


75 
	#INT32_MAX
 (2147483647)

	)

77 #i‚de‡
UINT8_MAX


78 
	#UINT8_MAX
 (255U)

	)

80 #i‚de‡
UINT16_MAX


81 
	#UINT16_MAX
 (65535U)

	)

83 #i‚de‡
UINT32_MAX


84 
	#UINT32_MAX
 (4294967295U)

	)

91 #ifde‡
__˝lu•lus


94 
	#YY_USE_CONST


	)

99 #i‡
deföed
 (
__STDC__
)

101 
	#YY_USE_CONST


	)

106 #ifde‡
YY_USE_CONST


107 
	#yyc⁄°
 c⁄°

	)

109 
	#yyc⁄°


	)

113 
	#YY_NULL
 0

	)

120 
	#YY_SC_TO_UI
(
c
Ë((Ë(Ëc)

	)

126 
	#BEGIN
 (
yy_°¨t
Ë1 + 2 *

	)

132 
	#YY_START
 (((
yy_°¨t
Ë- 1Ë/ 2)

	)

133 
	#YYSTATE
 
YY_START


	)

136 
	#YY_STATE_EOF
(
°©e
Ë(
YY_END_OF_BUFFER
 + sèã + 1)

	)

139 
	#YY_NEW_FILE
 
	`yyª°¨t
(
yyö
 )

	)

141 
	#YY_END_OF_BUFFER_CHAR
 0

	)

144 #i‚de‡
YY_BUF_SIZE


145 #ifde‡
__ü64__


150 
	#YY_BUF_SIZE
 32768

	)

152 
	#YY_BUF_SIZE
 16384

	)

158 
	#YY_STATE_BUF_SIZE
 ((
YY_BUF_SIZE
 + 2Ë* (
yy_°©e_ty≥
))

	)

160 #i‚de‡
YY_TYPEDEF_YY_BUFFER_STATE


161 
	#YY_TYPEDEF_YY_BUFFER_STATE


	)

162 
yy_buf„r_°©e
 *
	tYY_BUFFER_STATE
;

165 
yyÀng
;

167 
FILE
 *
yyö
, *
yyout
;

169 
	#EOB_ACT_CONTINUE_SCAN
 0

	)

170 
	#EOB_ACT_END_OF_FILE
 1

	)

171 
	#EOB_ACT_LAST_MATCH
 2

	)

173 
	#YY_LESS_LINENO
(
n
)

	)

176 
	#yyÀss
(
n
) \

180 
yyÀss_ma¸o_¨g
 = (
n
); \

181 
	`YY_LESS_LINENO
(
yyÀss_ma¸o_¨g
);\

182 *
yy_˝
 = (
yy_hﬁd_ch¨
); \

183 
YY_RESTORE_YY_MORE_OFFSET
 \

184 (
yy_c_buf_p
Ë
yy_˝
 = 
yy_bp
 + 
yyÀss_ma¸o_¨g
 - 
YY_MORE_ADJ
; \

185 
YY_DO_BEFORE_ACTION
; \

187  0 )

	)

189 
	#u≈ut
(
c
Ë
	`yyu≈ut
–c, (
yyãxt_±r
Ë)

	)

191 #i‚de‡
YY_TYPEDEF_YY_SIZE_T


192 
	#YY_TYPEDEF_YY_SIZE_T


	)

193 
size_t
 
	tyy_size_t
;

196 #i‚de‡
YY_STRUCT_YY_BUFFER_STATE


197 
	#YY_STRUCT_YY_BUFFER_STATE


	)

198 
	syy_buf„r_°©e


200 
FILE
 *
	myy_öput_fûe
;

202 *
	myy_ch_buf
;

203 *
	myy_buf_pos
;

208 
yy_size_t
 
	myy_buf_size
;

213 
	myy_n_ch¨s
;

219 
	myy_is_our_buf„r
;

226 
	myy_is_öãø˘ive
;

232 
	myy_©_bﬁ
;

234 
	myy_bs_löío
;

235 
	myy_bs_cﬁumn
;

240 
	myy_fûl_buf„r
;

242 
	myy_buf„r_°©us
;

244 
	#YY_BUFFER_NEW
 0

	)

245 
	#YY_BUFFER_NORMAL
 1

	)

256 
	#YY_BUFFER_EOF_PENDING
 2

	)

262 
size_t
 
	gyy_buf„r_°ack_t›
 = 0;

263 
size_t
 
	gyy_buf„r_°ack_max
 = 0;

264 
YY_BUFFER_STATE
 * 
	gyy_buf„r_°ack
 = 0;

272 
	#YY_CURRENT_BUFFER
 ( (
yy_buf„r_°ack
) \

273 ? (
yy_buf„r_°ack
)[(
yy_buf„r_°ack_t›
)] \

274 : 
NULL
)

	)

279 
	#YY_CURRENT_BUFFER_LVALUE
 (
yy_buf„r_°ack
)[(
yy_buf„r_°ack_t›
)]

	)

282 
	gyy_hﬁd_ch¨
;

283 
	gyy_n_ch¨s
;

284 
	gyyÀng
;

287 *
	gyy_c_buf_p
 = (*) 0;

288 
	gyy_öô
 = 0;

289 
	gyy_°¨t
 = 0;

294 
	gyy_did_buf„r_swôch_⁄_eof
;

296 
yyª°¨t
 (
FILE
 *
öput_fûe
 );

297 
yy_swôch_to_buf„r
 (
YY_BUFFER_STATE
 
√w_buf„r
 );

298 
YY_BUFFER_STATE
 
yy_¸óã_buf„r
 (
FILE
 *
fûe
,
size
 );

299 
yy_dñëe_buf„r
 (
YY_BUFFER_STATE
 
b
 );

300 
yy_Êush_buf„r
 (
YY_BUFFER_STATE
 
b
 );

301 
yypush_buf„r_°©e
 (
YY_BUFFER_STATE
 
√w_buf„r
 );

302 
yyp›_buf„r_°©e
 ();

304 
yyísuª_buf„r_°ack
 ();

305 
yy_lﬂd_buf„r_°©e
 ();

306 
yy_öô_buf„r
 (
YY_BUFFER_STATE
 
b
,
FILE
 *
fûe
 );

308 
	#YY_FLUSH_BUFFER
 
	`yy_Êush_buf„r
(
YY_CURRENT_BUFFER
 )

	)

310 
YY_BUFFER_STATE
 
yy_sˇn_buf„r
 (*
ba£
,
yy_size_t
 
size
 );

311 
YY_BUFFER_STATE
 
yy_sˇn_°rög
 (
yyc⁄°
 *
yy_°r
 );

312 
YY_BUFFER_STATE
 
yy_sˇn_byãs
 (
yyc⁄°
 *
byãs
,
Àn
 );

314 *
yyÆloc
 (
yy_size_t
 );

315 *
yyªÆloc
 (*,
yy_size_t
 );

316 
yy‰ì
 (* );

318 
	#yy_√w_buf„r
 
yy_¸óã_buf„r


	)

320 
	#yy_£t_öãø˘ive
(
is_öãø˘ive
) \

322 i‡–! 
YY_CURRENT_BUFFER
 ){ \

323 
	`yyísuª_buf„r_°ack
 (); \

324 
YY_CURRENT_BUFFER_LVALUE
 = \

325 
	`yy_¸óã_buf„r
(
yyö
,
YY_BUF_SIZE
 ); \

327 
YY_CURRENT_BUFFER_LVALUE
->
yy_is_öãø˘ive
 = 
is_öãø˘ive
; \

328 }

	)

330 
	#yy_£t_bﬁ
(
©_bﬁ
) \

332 i‡–! 
YY_CURRENT_BUFFER
 ){\

333 
	`yyísuª_buf„r_°ack
 (); \

334 
YY_CURRENT_BUFFER_LVALUE
 = \

335 
	`yy_¸óã_buf„r
(
yyö
,
YY_BUF_SIZE
 ); \

337 
YY_CURRENT_BUFFER_LVALUE
->
yy_©_bﬁ
 = 
©_bﬁ
; \

338 }

	)

340 
	#YY_AT_BOL
(Ë(
YY_CURRENT_BUFFER_LVALUE
->
yy_©_bﬁ
)

	)

344 
	#yywøp
(
n
Ë1

	)

345 
	#YY_SKIP_YYWRAP


	)

347 
	tYY_CHAR
;

349 
FILE
 *
	gyyö
 = (FILE *Ë0, *
	gyyout
 = (FILE *) 0;

351 
	tyy_°©e_ty≥
;

353 
yylöío
;

355 
	gyylöío
 = 1;

357 *
yyãxt
;

358 
	#yyãxt_±r
 
yyãxt


	)

360 
yy_°©e_ty≥
 
yy_gë_¥evious_°©e
 ();

361 
yy_°©e_ty≥
 
yy_åy_NUL_å™s
 (yy_°©e_ty≥ 
cuºít_°©e
 );

362 
yy_gë_√xt_buf„r
 ();

363 
	$yy_Áèl_îr‹
 (
yyc⁄°
 
msg
[] ) 
	`__©åibuã__
((
n‹ëu∫
));

368 
	#YY_DO_BEFORE_ACTION
 \

369 (
yyãxt_±r
Ë
yy_bp
; \

370 
yyÀng
 = (
size_t
Ë(
yy_˝
 - 
yy_bp
); \

371 (
yy_hﬁd_ch¨
Ë*
yy_˝
; \

372 *
yy_˝
 = '\0'; \

373 (
yy_c_buf_p
Ë
yy_˝
;

	)

375 
	#YY_NUM_RULES
 91

	)

376 
	#YY_END_OF_BUFFER
 92

	)

379 
	syy_å™s_öfo


381 
Êex_öt32_t
 
yy_vîify
;

382 
Êex_öt32_t
 
yy_nxt
;

384 
yyc⁄°
 
Êex_öt16_t
 
yy_ac˚±
[833] =

478 
	}
} ;

480 
yyc⁄°
 
Êex_öt32_t
 
	gyy_ec
[256] =

512 
yyc⁄°
 
Êex_öt32_t
 
	gyy_mëa
[61] =

522 
yyc⁄°
 
Êex_öt16_t
 
	gyy_ba£
[979] =

633 
yyc⁄°
 
Êex_öt16_t
 
	gyy_def
[979] =

744 
yyc⁄°
 
Êex_öt16_t
 
	gyy_nxt
[1205] =

881 
yyc⁄°
 
Êex_öt16_t
 
	gyy_chk
[1205] =

1018 
yy_°©e_ty≥
 
	gyy_œ°_ac˚±ög_°©e
;

1019 *
	gyy_œ°_ac˚±ög_˝os
;

1021 
yy_Êex_debug
;

1022 
	gyy_Êex_debug
 = 0;

1027 
	#REJECT
 
ªje˘_u£d_but_nŸ_dëe˘ed


	)

1028 
	#yym‹e
(Ë
yym‹e_u£d_but_nŸ_dëe˘ed


	)

1029 
	#YY_MORE_ADJ
 0

	)

1030 
	#YY_RESTORE_YY_MORE_OFFSET


	)

1031 *
	gyyãxt
;

1076 
	#YYSTYPE
 
c⁄f_tokí
 *

	)

1078 
	~<°dio.h
>

1079 
	~<°dlib.h
>

1080 
	~<°rög.h
>

1081 
	~<sys/ty≥s.h
>

1082 
	~<sys/sockë.h
>

1083 
	~<√töë/ö.h
>

1084 
	~<¨∑/öë.h
>

1086 
	~"ﬁ§d_c⁄f.h
"

1088 
	~"›¨£.h
"

1090 
	#ECHO
 if(
	`fwrôe
–
yyãxt
, 
yyÀng
, 1, 
yyout
 )Ë{}

	)

1093 
yygë_löío
();

1094 
FILE
 * 
yygë_ö
();

1095 
FILE
* 
yygë_out
();

1096 *
yygë_ãxt
();

1097 
yy£t_löío
();

1098 
yy£t_ö
(
FILE
 *);

1099 
yy£t_out
(
FILE
 *);

1100 
yygë_debug
();

1101 
yy£t_debug
();

1102 
yyÀx_de°roy
();

1103 
yyÀx
();

1105 
c⁄f_tokí
 *
gë_c⁄f_tokí
();

1106 
c⁄f_tokí
 *
gë_°rög_tokí
(c⁄° * c⁄° 
s
, c⁄° 
size_t
 
n
);

1107 
c⁄f_tokí
 *
gë_öãgî_tokí
(c⁄° * c⁄° 
s
);

1108 
c⁄f_tokí
 *
gë_Êﬂtög_tokí
(c⁄° * c⁄° 
s
);

1109 
c⁄f_tokí
 *
gë_boﬁón_tokí
(c⁄° 
boﬁ
 
b
);

1111 
c⁄f_tokí
 *
	$gë_c⁄f_tokí
()

1113 
c⁄f_tokí
 *
t
 = 
	`ˇŒoc
(1, (conf_token));

1114 i‡(
t
 =
NULL
) {

1115 
	`Ârötf
(
°dîr
, "C™nŸáŒoˇã %d byã†f‹á¿c⁄figuøti⁄Åokí.\n", ()(
c⁄f_tokí
));

1117  
t
;

1118 
	}
}

1120 
c⁄f_tokí
 *
	$gë_°rög_tokí
(c⁄° * c⁄° 
s
, c⁄° 
size_t
 
n
)

1122 
c⁄f_tokí
 *
rv
 = 
	`gë_c⁄f_tokí
();

1123 i‡(
rv
 !
NULL
) {

1124 
rv
->
°rög
 = 
	`mÆloc
(
n
 + 1);

1125 i‡(
rv
->
°rög
 =
NULL
) {

1126 
	`Ârötf
(
°dîr
, "C™nŸáŒoˇã %lu byã†f‹ såögÅokí d©a.\n", ()(
n
+1));

1127 
	`‰ì
(
rv
);

1128  
NULL
;

1130 
	`mem˝y
(
rv
->
°rög
, 
s
, 
n
);

1131 
rv
->
°rög
[
n
] = '\0';

1133  
rv
;

1134 
	}
}

1136 
c⁄f_tokí
 *
	$gë_öãgî_tokí
(c⁄° * c⁄° 
s
)

1138 
c⁄f_tokí
 *
rv
 = 
	`gë_c⁄f_tokí
();

1139 i‡(
rv
 !
NULL
) {

1140 
rv
->
öãgî
 = 
	`°πﬁ
(
s
, 
NULL
, 0);

1142  
rv
;

1143 
	}
}

1145 
c⁄f_tokí
 *
	$gë_Êﬂtög_tokí
(c⁄° * c⁄° 
s
)

1147 
c⁄f_tokí
 *
rv
 = 
	`gë_c⁄f_tokí
();

1148 i‡(
rv
 !
NULL
) {

1149 
rv
->
Êﬂtög
 = 0.0;

1150 
	`ssˇnf
(
s
, "%f", &
rv
->
Êﬂtög
);

1152  
rv
;

1153 
	}
}

1155 
c⁄f_tokí
 *
	$gë_boﬁón_tokí
(c⁄° 
boﬁ
 
b
)

1157 
c⁄f_tokí
 *
rv
 = 
	`gë_c⁄f_tokí
();

1158 i‡(
rv
 !
NULL
) {

1159 
rv
->
boﬁón
 = 
b
;

1161  
rv
;

1162 
	}
}

1166 
	#INITIAL
 0

	)

1168 #i‚de‡
YY_NO_UNISTD_H


1173 
	~<uni°d.h
>

1176 #i‚de‡
YY_EXTRA_TYPE


1177 
	#YY_EXTRA_TYPE
 *

	)

1180 
yy_öô_globÆs
 ();

1185 
yyÀx_de°roy
 ();

1187 
yygë_debug
 ();

1189 
yy£t_debug
 (
debug_Êag
 );

1191 
YY_EXTRA_TYPE
 
yygë_exåa
 ();

1193 
yy£t_exåa
 (
YY_EXTRA_TYPE
 
u£r_deföed
 );

1195 
FILE
 *
yygë_ö
 ();

1197 
yy£t_ö
 (
FILE
 * 
ö_°r
 );

1199 
FILE
 *
yygë_out
 ();

1201 
yy£t_out
 (
FILE
 * 
out_°r
 );

1203 
yygë_Àng
 ();

1205 *
yygë_ãxt
 ();

1207 
yygë_löío
 ();

1209 
yy£t_löío
 (
löe_numbî
 );

1215 #i‚de‡
YY_SKIP_YYWRAP


1216 #ifde‡
__˝lu•lus


1217 "C" 
yywøp
 ();

1219 
yywøp
 ();

1223 
yyu≈ut
 (
c
,*
buf_±r
 );

1225 #i‚de‡
yyãxt_±r


1226 
yy_Êex_°∫˝y
 (*,
yyc⁄°
 *,);

1229 #ifde‡
YY_NEED_STRLEN


1230 
yy_Êex_°æí
 (
yyc⁄°
 * );

1233 #i‚de‡
YY_NO_INPUT


1235 #ifde‡
__˝lu•lus


1236 
yyöput
 ();

1238 
öput
 ();

1244 #i‚de‡
YY_READ_BUF_SIZE


1245 #ifde‡
__ü64__


1247 
	#YY_READ_BUF_SIZE
 16384

	)

1249 
	#YY_READ_BUF_SIZE
 8192

	)

1254 #i‚de‡
ECHO


1258 
	#ECHO
 dÿ{ i‡(
	`fwrôe
–
yyãxt
, 
yyÀng
, 1, 
yyout
 )Ë{} } 0)

	)

1264 #i‚de‡
YY_INPUT


1265 
	#YY_INPUT
(
buf
,
ªsu…
,
max_size
) \

1266 i‡–
YY_CURRENT_BUFFER_LVALUE
->
yy_is_öãø˘ive
 ) \

1268 
c
 = '*'; \

1269 
size_t
 
n
; \

1270  
n
 = 0;Ç < 
max_size
 && \

1271 (
c
 = 
	`gëc
–
yyö
 )Ë!
EOF
 && c !'\n'; ++
n
 ) \

1272 
buf
[
n
] = (Ë
c
; \

1273 i‡–
c
 == '\n' ) \

1274 
buf
[
n
++] = (Ë
c
; \

1275 i‡–
c
 =
EOF
 && 
	`„º‹
–
yyö
 ) ) \

1276 
	`YY_FATAL_ERROR
( "input in flex scanner failed" ); \

1277 
ªsu…
 = 
n
; \

1281 
î∫o
=0; \

1282  (
ªsu…
 = 
	`‰ód
(
buf
, 1, 
max_size
, 
yyö
))==0 && 
	`„º‹
(yyin)) \

1284 if–
î∫o
 !
EINTR
) \

1286 
	`YY_FATAL_ERROR
( "input in flex scanner failed" ); \

1289 
î∫o
=0; \

1290 
	`˛óªº
(
yyö
); \

1294 

	)

1301 #i‚de‡
yyãrmö©e


1302 
	#yyãrmö©e
(Ë 
YY_NULL


	)

1306 #i‚de‡
YY_START_STACK_INCR


1307 
	#YY_START_STACK_INCR
 25

	)

1311 #i‚de‡
YY_FATAL_ERROR


1312 
	#YY_FATAL_ERROR
(
msg
Ë
	`yy_Áèl_îr‹
–msg )

	)

1320 #i‚de‡
YY_DECL


1321 
	#YY_DECL_IS_OURS
 1

	)

1323 
yyÀx
 ();

1325 
	#YY_DECL
 
	`yyÀx
 ()

	)

1331 #i‚de‡
YY_USER_ACTION


1332 
	#YY_USER_ACTION


	)

1336 #i‚de‡
YY_BREAK


1337 
	#YY_BREAK
 ;

	)

1340 
	#YY_RULE_SETUP
 \

1341 
YY_USER_ACTION


	)

1345 
	gYY_DECL


1347 
yy_°©e_ty≥
 
	gyy_cuºít_°©e
;

1348 *
	gyy_˝
, *
	gyy_bp
;

1349 
	gyy_a˘
;

1356 i‡–!(
	gyy_öô
) )

1358 (
	gyy_öô
) = 1;

1360 #ifde‡
YY_USER_INIT


1361 
	gYY_USER_INIT
;

1364 i‡–! (
	gyy_°¨t
) )

1365 (
	gyy_°¨t
) = 1;

1367 i‡–! 
	gyyö
 )

1368 
	gyyö
 = 
°dö
;

1370 i‡–! 
	gyyout
 )

1371 
	gyyout
 = 
°dout
;

1373 i‡–! 
	gYY_CURRENT_BUFFER
 ) {

1374 
yyísuª_buf„r_°ack
 ();

1375 
	gYY_CURRENT_BUFFER_LVALUE
 =

1376 
yy_¸óã_buf„r
(
yyö
,
YY_BUF_SIZE
 );

1379 
yy_lﬂd_buf„r_°©e
( );

1384 
	gyy_˝
 = (
yy_c_buf_p
);

1387 *
	gyy_˝
 = (
yy_hﬁd_ch¨
);

1392 
	gyy_bp
 = 
yy_˝
;

1394 
	gyy_cuºít_°©e
 = (
yy_°¨t
);

1395 
	gyy_m©ch
:

1398 
YY_CHAR
 
yy_c
 = 
yy_ec
[
YY_SC_TO_UI
(*
yy_˝
)];

1399 i‡–
	gyy_ac˚±
[
yy_cuºít_°©e
] )

1401 (
	gyy_œ°_ac˚±ög_°©e
Ë
yy_cuºít_°©e
;

1402 (
	gyy_œ°_ac˚±ög_˝os
Ë
yy_˝
;

1404  
	gyy_chk
[
yy_ba£
[
yy_cuºít_°©e
] + 
	gyy_c
] != yy_current_state )

1406 
yy_cuºít_°©e
 = (Ë
yy_def
[yy_current_state];

1407 i‡–
	gyy_cuºít_°©e
 >= 833 )

1408 
yy_c
 = 
yy_mëa
[() yy_c];

1410 
	gyy_cuºít_°©e
 = 
yy_nxt
[
yy_ba£
[
yy_cuºít_°©e
] + (Ë
yy_c
];

1411 ++
	gyy_˝
;

1413  
	gyy_cuºít_°©e
 != 832 );

1414 
	gyy_˝
 = (
yy_œ°_ac˚±ög_˝os
);

1415 
	gyy_cuºít_°©e
 = (
yy_œ°_ac˚±ög_°©e
);

1417 
	gyy_föd_a˘i⁄
:

1418 
yy_a˘
 = 
yy_ac˚±
[
yy_cuºít_°©e
];

1420 
	gYY_DO_BEFORE_ACTION
;

1422 
	gdo_a˘i⁄
:

1424  
yy_a˘
 )

1428 *
yy_˝
 = (
yy_hﬁd_ch¨
);

1429 
	gyy_˝
 = (
yy_œ°_ac˚±ög_˝os
);

1430 
	gyy_cuºít_°©e
 = (
yy_œ°_ac˚±ög_°©e
);

1431 
	gyy_föd_a˘i⁄
;

1435 
YY_RULE_SETUP


1438 
cuºít_löe
++;

1439  
	gTOK_COMMENT
;

1441 
YY_BREAK


1443 
YY_RULE_SETUP


1446 
yylvÆ
 = 
NULL
;

1447  
	gTOK_SLASH
;

1449 
YY_BREAK


1451 
YY_RULE_SETUP


1454 
yylvÆ
 = 
NULL
;

1455  
	gTOK_OPEN
;

1457 
YY_BREAK


1459 
YY_RULE_SETUP


1462 
yylvÆ
 = 
NULL
;

1463  
	gTOK_CLOSE
;

1465 
YY_BREAK


1468 
YY_RULE_SETUP


1471 
yylvÆ
 = 
gë_°rög_tokí
(
yyãxt
 + 1, 
yyÀng
 - 2);

1472 i‡(
	gyylvÆ
 =
NULL
) {

1473 
yyãrmö©e
();

1475  
	gTOK_STRING
;

1477 
YY_BREAK


1479 
YY_RULE_SETUP


1482 
yylvÆ
 = 
gë_öãgî_tokí
(
yyãxt
);

1483  
	gTOK_INTEGER
;

1485 
YY_BREAK


1487 
YY_RULE_SETUP


1490 
yylvÆ
 = 
gë_Êﬂtög_tokí
(
yyãxt
);

1491  
	gTOK_FLOAT
;

1493 
YY_BREAK


1495 
YY_RULE_SETUP


1498 
yylvÆ
 = 
gë_°rög_tokí
(
yyãxt
, 
yyÀng
 + 1);

1499 i‡(
	gyylvÆ
 =
NULL
) {

1500 
yyãrmö©e
();

1502  
	gTOK_IPV4_ADDR
;

1504 
YY_BREAK


1506 
YY_RULE_SETUP


1509 
yylvÆ
 = 
gë_°rög_tokí
(
yyãxt
, 
yyÀng
 + 1);

1510 i‡(
	gyylvÆ
 =
NULL
) {

1511 
yyãrmö©e
();

1513  
	gTOK_IPV6_ADDR
;

1515 
YY_BREAK


1517 
YY_RULE_SETUP


1520 
yylvÆ
 = 
NULL
;

1521  
	gTOK_DEFAULT
;

1523 
YY_BREAK


1525 
YY_RULE_SETUP


1528 
yylvÆ
 = 
NULL
;

1529  
	gTOK_AUTO
;

1531 
YY_BREAK


1533 
YY_RULE_SETUP


1536 
yylvÆ
 = 
NULL
;

1537  
	gTOK_NONE
;

1539 
YY_BREAK


1541 
YY_RULE_SETUP


1544 
yylvÆ
 = 
gë_öãgî_tokí
(
yyãxt
);

1545  
	gTOK_INTEGER
;

1547 
YY_BREAK


1549 
YY_RULE_SETUP


1552 
yylvÆ
 = 
gë_boﬁón_tokí
(
åue
);

1553  
	gTOK_BOOLEAN
;

1555 
YY_BREAK


1557 
YY_RULE_SETUP


1560 
yylvÆ
 = 
gë_boﬁón_tokí
(
Ál£
);

1561  
	gTOK_BOOLEAN
;

1563 
YY_BREAK


1565 
YY_RULE_SETUP


1568 
yylvÆ
 = 
NULL
;

1569  
	gTOK_HOSTLABEL
;

1571 
YY_BREAK


1573 
YY_RULE_SETUP


1576 
yylvÆ
 = 
NULL
;

1577  
	gTOK_NETLABEL
;

1579 
YY_BREAK


1581 
YY_RULE_SETUP


1584 
yylvÆ
 = 
NULL
;

1585  
	gTOK_MAXIPC
;

1587 
YY_BREAK


1589 
YY_RULE_SETUP


1592 
yylvÆ
 = 
NULL
;

1593  
	gTOK_DEBUGLEVEL
;

1595 
YY_BREAK


1597 
YY_RULE_SETUP


1600 
yylvÆ
 = 
NULL
;

1601  
	gTOK_IPVERSION
;

1603 
YY_BREAK


1605 
YY_RULE_SETUP


1608 
yylvÆ
 = 
NULL
;

1609  
	gTOK_NICCHGSPOLLRT
;

1611 
YY_BREAK


1613 
YY_RULE_SETUP


1616 
yylvÆ
 = 
NULL
;

1617  
	gTOK_HNA4
;

1619 
YY_BREAK


1621 
YY_RULE_SETUP


1624 
yylvÆ
 = 
NULL
;

1625  
	gTOK_HNA6
;

1627 
YY_BREAK


1629 
YY_RULE_SETUP


1632 
yylvÆ
 = 
NULL
;

1633  
	gTOK_PLUGIN
;

1635 
YY_BREAK


1637 
YY_RULE_SETUP


1640 
yylvÆ
 = 
NULL
;

1641  
	gTOK_PLPARAM
;

1643 
YY_BREAK


1645 
YY_RULE_SETUP


1648 
yylvÆ
 = 
NULL
;

1649  
	gTOK_INTERFACE
;

1651 
YY_BREAK


1653 
YY_RULE_SETUP


1656 
yylvÆ
 = 
NULL
;

1657  
	gTOK_INTERFACE_DEFAULTS
;

1659 
YY_BREAK


1661 
YY_RULE_SETUP


1664 
yylvÆ
 = 
NULL
;

1665  
	gTOK_NOINT
;

1667 
YY_BREAK


1669 
YY_RULE_SETUP


1672 
yylvÆ
 = 
NULL
;

1673  
	gTOK_TOS
;

1675 
YY_BREAK


1677 
YY_RULE_SETUP


1680 
yylvÆ
 = 
NULL
;

1681  
	gTOK_OLSRPORT
;

1683 
YY_BREAK


1685 
YY_RULE_SETUP


1688 
yylvÆ
 = 
NULL
;

1689  
	gTOK_RTPROTO
;

1691 
YY_BREAK


1693 
YY_RULE_SETUP


1696 
yylvÆ
 = 
NULL
;

1697  
	gTOK_RTTABLE
;

1699 
YY_BREAK


1701 
YY_RULE_SETUP


1704 
yylvÆ
 = 
NULL
;

1705  
	gTOK_RTTABLE_DEFAULT
;

1707 
YY_BREAK


1709 
YY_RULE_SETUP


1712 
yylvÆ
 = 
NULL
;

1713  
	gTOK_RTTABLE_TUNNEL
;

1715 
YY_BREAK


1717 
YY_RULE_SETUP


1720 
yylvÆ
 = 
NULL
;

1721  
	gTOK_RTTABLE_PRIORITY
;

1723 
YY_BREAK


1725 
YY_RULE_SETUP


1728 
yylvÆ
 = 
NULL
;

1729  
	gTOK_RTTABLE_DEFAULTOLSR_PRIORITY
;

1731 
YY_BREAK


1733 
YY_RULE_SETUP


1736 
yylvÆ
 = 
NULL
;

1737  
	gTOK_RTTABLE_TUNNEL_PRIORITY
;

1739 
YY_BREAK


1741 
YY_RULE_SETUP


1744 
yylvÆ
 = 
NULL
;

1745  
	gTOK_RTTABLE_DEFAULT_PRIORITY
;

1747 
YY_BREAK


1749 
YY_RULE_SETUP


1752 
yylvÆ
 = 
NULL
;

1753  
	gTOK_WILLINGNESS
;

1755 
YY_BREAK


1757 
YY_RULE_SETUP


1760 
yylvÆ
 = 
NULL
;

1761  
	gTOK_IPCCON
;

1763 
YY_BREAK


1765 
YY_RULE_SETUP


1768 
yylvÆ
 = 
NULL
;

1769  
	gTOK_FIBMETRIC
;

1771 
YY_BREAK


1773 
YY_RULE_SETUP


1776 
yylvÆ
 = 
NULL
;

1777  
	gTOK_USEHYST
;

1779 
YY_BREAK


1781 
YY_RULE_SETUP


1784 
yylvÆ
 = 
NULL
;

1785  
	gTOK_HYSTSCALE
;

1787 
YY_BREAK


1789 
YY_RULE_SETUP


1792 
yylvÆ
 = 
NULL
;

1793  
	gTOK_HYSTUPPER
;

1795 
YY_BREAK


1797 
YY_RULE_SETUP


1800 
yylvÆ
 = 
NULL
;

1801  
	gTOK_HYSTLOWER
;

1803 
YY_BREAK


1805 
YY_RULE_SETUP


1808 
yylvÆ
 = 
NULL
;

1809  
	gTOK_POLLRATE
;

1811 
YY_BREAK


1813 
YY_RULE_SETUP


1816 
yylvÆ
 = 
NULL
;

1817  
	gTOK_TCREDUNDANCY
;

1819 
YY_BREAK


1821 
YY_RULE_SETUP


1824 
yylvÆ
 = 
NULL
;

1825  
	gTOK_MPRCOVERAGE
;

1827 
YY_BREAK


1829 
YY_RULE_SETUP


1832 
yylvÆ
 = 
NULL
;

1833  
	gTOK_LQ_LEVEL
;

1835 
YY_BREAK


1837 
YY_RULE_SETUP


1840 
yylvÆ
 = 
NULL
;

1841  
	gTOK_LQ_FISH
;

1843 
YY_BREAK


1845 
YY_RULE_SETUP


1848 
yylvÆ
 = 
NULL
;

1849  
	gTOK_LQ_AGING
;

1851 
YY_BREAK


1853 
YY_RULE_SETUP


1856 
yylvÆ
 = 
NULL
;

1857  
	gTOK_LQ_PLUGIN
;

1859 
YY_BREAK


1861 
YY_RULE_SETUP


1864 
yylvÆ
 = 
NULL
;

1865  
	gTOK_LQ_NAT_THRESH
;

1867 
YY_BREAK


1869 
YY_RULE_SETUP


1872 
yylvÆ
 = 
NULL
;

1873  
	gTOK_LQ_MULT
;

1875 
YY_BREAK


1877 
YY_RULE_SETUP


1880 
yylvÆ
 = 
NULL
;

1881  
	gTOK_MIN_TC_VTIME
;

1883 
YY_BREAK


1885 
YY_RULE_SETUP


1888 
yylvÆ
 = 
NULL
;

1889  
	gTOK_LOCK_FILE
;

1891 
YY_BREAK


1893 
YY_RULE_SETUP


1896 
yylvÆ
 = 
NULL
;

1897  
	gTOK_CLEAR_SCREEN
;

1899 
YY_BREAK


1901 
YY_RULE_SETUP


1904 
yylvÆ
 = 
NULL
;

1905  
	gTOK_USE_NIIT
;

1907 
YY_BREAK


1909 
YY_RULE_SETUP


1912 
yylvÆ
 = 
NULL
;

1913  
	gTOK_SMART_GW
;

1915 
YY_BREAK


1917 
YY_RULE_SETUP


1920 
yylvÆ
 = 
NULL
;

1921  
	gTOK_SMART_GW_ALLOW_NAT
;

1923 
YY_BREAK


1925 
YY_RULE_SETUP


1928 
yylvÆ
 = 
NULL
;

1929  
	gTOK_SMART_GW_PERIOD
;

1931 
YY_BREAK


1933 
YY_RULE_SETUP


1936 
yylvÆ
 = 
NULL
;

1937  
	gTOK_SMART_GW_STABLECOUNT
;

1939 
YY_BREAK


1941 
YY_RULE_SETUP


1944 
yylvÆ
 = 
NULL
;

1945  
	gTOK_SMART_GW_THRESH
;

1947 
YY_BREAK


1949 
YY_RULE_SETUP


1952 
yylvÆ
 = 
NULL
;

1953  
	gTOK_SMART_GW_UPLINK
;

1955 
YY_BREAK


1957 
YY_RULE_SETUP


1960 
yylvÆ
 = 
NULL
;

1961  
	gTOK_SMART_GW_UPLINK_NAT
;

1963 
YY_BREAK


1965 
YY_RULE_SETUP


1968 
yylvÆ
 = 
NULL
;

1969  
	gTOK_SMART_GW_SPEED
;

1971 
YY_BREAK


1973 
YY_RULE_SETUP


1976 
yylvÆ
 = 
NULL
;

1977  
	gTOK_SMART_GW_PREFIX
;

1979 
YY_BREAK


1981 
YY_RULE_SETUP


1984 
yylvÆ
 = 
NULL
;

1985  
	gTOK_SRC_IP_ROUTES
;

1987 
YY_BREAK


1989 
YY_RULE_SETUP


1992 
yylvÆ
 = 
NULL
;

1993  
	gTOK_IFWEIGHT
;

1995 
YY_BREAK


1997 
YY_RULE_SETUP


2000 
yylvÆ
 = 
NULL
;

2001  
	gTOK_MAIN_IP
;

2003 
YY_BREAK


2005 
YY_RULE_SETUP


2008 
yylvÆ
 = 
NULL
;

2009  
	gTOK_SET_IPFORWARD
;

2011 
YY_BREAK


2013 
YY_RULE_SETUP


2016 
yylvÆ
 = 
NULL
;

2017  
	gTOK_IP4BROADCAST
;

2019 
YY_BREAK


2021 
YY_RULE_SETUP


2024 
yylvÆ
 = 
NULL
;

2025  
	gTOK_IPV4BROADCAST
;

2027 
YY_BREAK


2029 
YY_RULE_SETUP


2032 
yylvÆ
 = 
NULL
;

2033  
	gTOK_IPV4MULTICAST
;

2035 
YY_BREAK


2037 
YY_RULE_SETUP


2040 
yylvÆ
 = 
NULL
;

2041  
	gTOK_IFMODE
;

2043 
YY_BREAK


2045 
YY_RULE_SETUP


2048 
yylvÆ
 = 
NULL
;

2049  
	gTOK_IPV6MULTICAST
;

2051 
YY_BREAK


2053 
YY_RULE_SETUP


2056 
yylvÆ
 = 
NULL
;

2057  
	gTOK_IPV4SRC
;

2059 
YY_BREAK


2061 
YY_RULE_SETUP


2064 
yylvÆ
 = 
NULL
;

2065  
	gTOK_IPV6SRC
;

2067 
YY_BREAK


2069 
YY_RULE_SETUP


2072 
yylvÆ
 = 
NULL
;

2073  
	gTOK_HELLOINT
;

2075 
YY_BREAK


2077 
YY_RULE_SETUP


2080 
yylvÆ
 = 
NULL
;

2081  
	gTOK_HELLOVAL
;

2083 
YY_BREAK


2085 
YY_RULE_SETUP


2088 
yylvÆ
 = 
NULL
;

2089  
	gTOK_TCINT
;

2091 
YY_BREAK


2093 
YY_RULE_SETUP


2096 
yylvÆ
 = 
NULL
;

2097  
	gTOK_TCVAL
;

2099 
YY_BREAK


2101 
YY_RULE_SETUP


2104 
yylvÆ
 = 
NULL
;

2105  
	gTOK_MIDINT
;

2107 
YY_BREAK


2109 
YY_RULE_SETUP


2112 
yylvÆ
 = 
NULL
;

2113  
	gTOK_MIDVAL
;

2115 
YY_BREAK


2117 
YY_RULE_SETUP


2120 
yylvÆ
 = 
NULL
;

2121  
	gTOK_HNAINT
;

2123 
YY_BREAK


2125 
YY_RULE_SETUP


2128 
yylvÆ
 = 
NULL
;

2129  
	gTOK_HNAVAL
;

2131 
YY_BREAK


2133 
YY_RULE_SETUP


2136 
yylvÆ
 = 
NULL
;

2137  
	gTOK_AUTODETCHG
;

2139 
YY_BREAK


2142 
YY_RULE_SETUP


2145 
cuºít_löe
++;

2147 
YY_BREAK


2149 
YY_RULE_SETUP


2152 
YY_BREAK


2154 
YY_RULE_SETUP


2165 
yyu≈ut
(0, 
NULL
);

2167 
YY_BREAK


2169 
YY_RULE_SETUP


2171 
ECHO
;

2172 
	gYY_BREAK


2174 
YY_STATE_EOF
(
INITIAL
):

2175 
yyãrmö©e
();

2177 
	gYY_END_OF_BUFFER
:

2180 
yy_amou¡_of_m©ched_ãxt
 = (Ë(
yy_˝
 - (
yyãxt_±r
)) - 1;

2183 *
	gyy_˝
 = (
yy_hﬁd_ch¨
);

2184 
YY_RESTORE_YY_MORE_OFFSET


2186 i‡–
	gYY_CURRENT_BUFFER_LVALUE
->
	gyy_buf„r_°©us
 =
YY_BUFFER_NEW
 )

2197 (
yy_n_ch¨s
Ë
YY_CURRENT_BUFFER_LVALUE
->yy_n_chars;

2198 
	gYY_CURRENT_BUFFER_LVALUE
->
	gyy_öput_fûe
 = 
yyö
;

2199 
	gYY_CURRENT_BUFFER_LVALUE
->
	gyy_buf„r_°©us
 = 
YY_BUFFER_NORMAL
;

2209 i‡–(
	gyy_c_buf_p
Ë<&
YY_CURRENT_BUFFER_LVALUE
->
yy_ch_buf
[(
yy_n_ch¨s
)] )

2211 
yy_°©e_ty≥
 
yy_√xt_°©e
;

2213 (
	gyy_c_buf_p
Ë(
yyãxt_±r
Ë+ 
yy_amou¡_of_m©ched_ãxt
;

2215 
	gyy_cuºít_°©e
 = 
yy_gë_¥evious_°©e
( );

2226 
	gyy_√xt_°©e
 = 
yy_åy_NUL_å™s
–
yy_cuºít_°©e
 );

2228 
	gyy_bp
 = (
yyãxt_±r
Ë+ 
YY_MORE_ADJ
;

2230 i‡–
	gyy_√xt_°©e
 )

2233 
	gyy_˝
 = ++(
yy_c_buf_p
);

2234 
	gyy_cuºít_°©e
 = 
yy_√xt_°©e
;

2235 
	gyy_m©ch
;

2240 
	gyy_˝
 = (
yy_œ°_ac˚±ög_˝os
);

2241 
	gyy_cuºít_°©e
 = (
yy_œ°_ac˚±ög_°©e
);

2242 
	gyy_föd_a˘i⁄
;

2246  
yy_gë_√xt_buf„r
( ) )

2248 
	gEOB_ACT_END_OF_FILE
:

2250 (
yy_did_buf„r_swôch_⁄_eof
) = 0;

2252 i‡–
yywøp
( ) )

2263 (
	gyy_c_buf_p
Ë(
yyãxt_±r
Ë+ 
YY_MORE_ADJ
;

2265 
	gyy_a˘
 = 
YY_STATE_EOF
(
YY_START
);

2266 
	gdo_a˘i⁄
;

2271 i‡–! (
	gyy_did_buf„r_swôch_⁄_eof
) )

2272 
	gYY_NEW_FILE
;

2277 
	gEOB_ACT_CONTINUE_SCAN
:

2278 (
yy_c_buf_p
) =

2279 (
yyãxt_±r
Ë+ 
yy_amou¡_of_m©ched_ãxt
;

2281 
	gyy_cuºít_°©e
 = 
yy_gë_¥evious_°©e
( );

2283 
	gyy_˝
 = (
yy_c_buf_p
);

2284 
	gyy_bp
 = (
yyãxt_±r
Ë+ 
YY_MORE_ADJ
;

2285 
	gyy_m©ch
;

2287 
	gEOB_ACT_LAST_MATCH
:

2288 (
yy_c_buf_p
) =

2289 &
YY_CURRENT_BUFFER_LVALUE
->
yy_ch_buf
[(
yy_n_ch¨s
)];

2291 
	gyy_cuºít_°©e
 = 
yy_gë_¥evious_°©e
( );

2293 
	gyy_˝
 = (
yy_c_buf_p
);

2294 
	gyy_bp
 = (
yyãxt_±r
Ë+ 
YY_MORE_ADJ
;

2295 
	gyy_föd_a˘i⁄
;

2301 
YY_FATAL_ERROR
(

2314 
	$yy_gë_√xt_buf„r
 ()

2316 *
de°
 = 
YY_CURRENT_BUFFER_LVALUE
->
yy_ch_buf
;

2317 *
sour˚
 = (
yyãxt_±r
);

2318 
numbî_to_move
, 
i
;

2319 
ªt_vÆ
;

2321 i‡–(
yy_c_buf_p
Ë> &
YY_CURRENT_BUFFER_LVALUE
->
yy_ch_buf
[(
yy_n_ch¨s
) + 1] )

2322 
	`YY_FATAL_ERROR
(

2325 i‡–
YY_CURRENT_BUFFER_LVALUE
->
yy_fûl_buf„r
 == 0 )

2327 i‡–(
yy_c_buf_p
Ë- (
yyãxt_±r
Ë- 
YY_MORE_ADJ
 == 1 )

2332  
EOB_ACT_END_OF_FILE
;

2340  
EOB_ACT_LAST_MATCH
;

2347 
numbî_to_move
 = (Ë((
yy_c_buf_p
Ë- (
yyãxt_±r
)) - 1;

2349  
i
 = 0; i < 
numbî_to_move
; ++i )

2350 *(
de°
++Ë*(
sour˚
++);

2352 i‡–
YY_CURRENT_BUFFER_LVALUE
->
yy_buf„r_°©us
 =
YY_BUFFER_EOF_PENDING
 )

2356 
YY_CURRENT_BUFFER_LVALUE
->
yy_n_ch¨s
 = (yy_n_chars) = 0;

2360 
num_to_ªad
 =

2361 
YY_CURRENT_BUFFER_LVALUE
->
yy_buf_size
 - 
numbî_to_move
 - 1;

2363  
num_to_ªad
 <= 0 )

2367 
YY_BUFFER_STATE
 
b
 = 
YY_CURRENT_BUFFER
;

2369 
yy_c_buf_p_off£t
 =

2370 (Ë((
yy_c_buf_p
Ë- 
b
->
yy_ch_buf
);

2372 i‡–
b
->
yy_is_our_buf„r
 )

2374 
√w_size
 = 
b
->
yy_buf_size
 * 2;

2376 i‡–
√w_size
 <= 0 )

2377 
b
->
yy_buf_size
 += b->yy_buf_size / 8;

2379 
b
->
yy_buf_size
 *= 2;

2381 
b
->
yy_ch_buf
 = (*)

2383 
	`yyªÆloc
((*Ë
b
->
yy_ch_buf
,b->
yy_buf_size
 + 2 );

2387 
b
->
yy_ch_buf
 = 0;

2389 i‡–! 
b
->
yy_ch_buf
 )

2390 
	`YY_FATAL_ERROR
(

2393 (
yy_c_buf_p
Ë&
b
->
yy_ch_buf
[
yy_c_buf_p_off£t
];

2395 
num_to_ªad
 = 
YY_CURRENT_BUFFER_LVALUE
->
yy_buf_size
 -

2396 
numbî_to_move
 - 1;

2400 i‡–
num_to_ªad
 > 
YY_READ_BUF_SIZE
 )

2401 
num_to_ªad
 = 
YY_READ_BUF_SIZE
;

2404 
	`YY_INPUT
–(&
YY_CURRENT_BUFFER_LVALUE
->
yy_ch_buf
[
numbî_to_move
]),

2405 (
yy_n_ch¨s
), (
size_t
Ë
num_to_ªad
 );

2407 
YY_CURRENT_BUFFER_LVALUE
->
yy_n_ch¨s
 = (yy_n_chars);

2410 i‡–(
yy_n_ch¨s
) == 0 )

2412 i‡–
numbî_to_move
 =
YY_MORE_ADJ
 )

2414 
ªt_vÆ
 = 
EOB_ACT_END_OF_FILE
;

2415 
	`yyª°¨t
(
yyö
 );

2420 
ªt_vÆ
 = 
EOB_ACT_LAST_MATCH
;

2421 
YY_CURRENT_BUFFER_LVALUE
->
yy_buf„r_°©us
 =

2422 
YY_BUFFER_EOF_PENDING
;

2427 
ªt_vÆ
 = 
EOB_ACT_CONTINUE_SCAN
;

2429 i‡((
yy_size_t
Ë((
yy_n_ch¨s
Ë+ 
numbî_to_move
Ë> 
YY_CURRENT_BUFFER_LVALUE
->
yy_buf_size
) {

2431 
yy_size_t
 
√w_size
 = (
yy_n_ch¨s
Ë+ 
numbî_to_move
 + ((yy_n_chars) >> 1);

2432 
YY_CURRENT_BUFFER_LVALUE
->
yy_ch_buf
 = (*Ë
	`yyªÆloc
((*ËYY_CURRENT_BUFFER_LVALUE->yy_ch_buf,
√w_size
 );

2433 i‡–! 
YY_CURRENT_BUFFER_LVALUE
->
yy_ch_buf
 )

2434 
	`YY_FATAL_ERROR
( "out of dynamic memory in yy_get_next_buffer()" );

2437 (
yy_n_ch¨s
Ë+
numbî_to_move
;

2438 
YY_CURRENT_BUFFER_LVALUE
->
yy_ch_buf
[(
yy_n_ch¨s
)] = 
YY_END_OF_BUFFER_CHAR
;

2439 
YY_CURRENT_BUFFER_LVALUE
->
yy_ch_buf
[(
yy_n_ch¨s
Ë+ 1] = 
YY_END_OF_BUFFER_CHAR
;

2441 (
yyãxt_±r
Ë&
YY_CURRENT_BUFFER_LVALUE
->
yy_ch_buf
[0];

2443  
ªt_vÆ
;

2444 
	}
}

2448 
yy_°©e_ty≥
 
	$yy_gë_¥evious_°©e
 ()

2450 
yy_°©e_ty≥
 
yy_cuºít_°©e
;

2451 *
yy_˝
;

2453 
yy_cuºít_°©e
 = (
yy_°¨t
);

2455  
yy_˝
 = (
yyãxt_±r
Ë+ 
YY_MORE_ADJ
; yy_˝ < (
yy_c_buf_p
); ++yy_cp )

2457 
YY_CHAR
 
yy_c
 = (*
yy_˝
 ? 
yy_ec
[
	`YY_SC_TO_UI
(*yy_cp)] : 1);

2458 i‡–
yy_ac˚±
[
yy_cuºít_°©e
] )

2460 (
yy_œ°_ac˚±ög_°©e
Ë
yy_cuºít_°©e
;

2461 (
yy_œ°_ac˚±ög_˝os
Ë
yy_˝
;

2463  
yy_chk
[
yy_ba£
[
yy_cuºít_°©e
] + 
yy_c
] != yy_current_state )

2465 
yy_cuºít_°©e
 = (Ë
yy_def
[yy_current_state];

2466 i‡–
yy_cuºít_°©e
 >= 833 )

2467 
yy_c
 = 
yy_mëa
[() yy_c];

2469 
yy_cuºít_°©e
 = 
yy_nxt
[
yy_ba£
[yy_cuºít_°©e] + (Ë
yy_c
];

2472  
yy_cuºít_°©e
;

2473 
	}
}

2480 
yy_°©e_ty≥
 
	$yy_åy_NUL_å™s
 (
yy_°©e_ty≥
 
yy_cuºít_°©e
 )

2482 
yy_is_jam
;

2483 *
yy_˝
 = (
yy_c_buf_p
);

2485 
YY_CHAR
 
yy_c
 = 1;

2486 i‡–
yy_ac˚±
[
yy_cuºít_°©e
] )

2488 (
yy_œ°_ac˚±ög_°©e
Ë
yy_cuºít_°©e
;

2489 (
yy_œ°_ac˚±ög_˝os
Ë
yy_˝
;

2491  
yy_chk
[
yy_ba£
[
yy_cuºít_°©e
] + 
yy_c
] != yy_current_state )

2493 
yy_cuºít_°©e
 = (Ë
yy_def
[yy_current_state];

2494 i‡–
yy_cuºít_°©e
 >= 833 )

2495 
yy_c
 = 
yy_mëa
[() yy_c];

2497 
yy_cuºít_°©e
 = 
yy_nxt
[
yy_ba£
[yy_cuºít_°©e] + (Ë
yy_c
];

2498 
yy_is_jam
 = (
yy_cuºít_°©e
 == 832);

2500  
yy_is_jam
 ? 0 : 
yy_cuºít_°©e
;

2501 
	}
}

2503 
	$yyu≈ut
 (
c
, * 
yy_bp
 )

2505 *
yy_˝
;

2507 
yy_˝
 = (
yy_c_buf_p
);

2510 *
yy_˝
 = (
yy_hﬁd_ch¨
);

2512 i‡–
yy_˝
 < 
YY_CURRENT_BUFFER_LVALUE
->
yy_ch_buf
 + 2 )

2515 
numbî_to_move
 = (
yy_n_ch¨s
) + 2;

2516 *
de°
 = &
YY_CURRENT_BUFFER_LVALUE
->
yy_ch_buf
[

2517 
YY_CURRENT_BUFFER_LVALUE
->
yy_buf_size
 + 2];

2518 *
sour˚
 =

2519 &
YY_CURRENT_BUFFER_LVALUE
->
yy_ch_buf
[
numbî_to_move
];

2521  
sour˚
 > 
YY_CURRENT_BUFFER_LVALUE
->
yy_ch_buf
 )

2522 *--
de°
 = *--
sour˚
;

2524 
yy_˝
 +(Ë(
de°
 - 
sour˚
);

2525 
yy_bp
 +(Ë(
de°
 - 
sour˚
);

2526 
YY_CURRENT_BUFFER_LVALUE
->
yy_n_ch¨s
 =

2527 (
yy_n_ch¨s
Ë
YY_CURRENT_BUFFER_LVALUE
->
yy_buf_size
;

2529 i‡–
yy_˝
 < 
YY_CURRENT_BUFFER_LVALUE
->
yy_ch_buf
 + 2 )

2530 
	`YY_FATAL_ERROR
( "flex scannerÖush-back overflow" );

2533 *--
yy_˝
 = (Ë
c
;

2535 (
yyãxt_±r
Ë
yy_bp
;

2536 (
yy_hﬁd_ch¨
Ë*
yy_˝
;

2537 (
yy_c_buf_p
Ë
yy_˝
;

2538 
	}
}

2540 #i‚de‡
YY_NO_INPUT


2541 #ifde‡
__˝lu•lus


2542 
	$yyöput
 ()

2544 
	$öput
 ()

2548 
c
;

2550 *(
yy_c_buf_p
Ë(
yy_hﬁd_ch¨
);

2552 i‡–*(
yy_c_buf_p
Ë=
YY_END_OF_BUFFER_CHAR
 )

2558 i‡–(
yy_c_buf_p
Ë< &
YY_CURRENT_BUFFER_LVALUE
->
yy_ch_buf
[(
yy_n_ch¨s
)] )

2560 *(
yy_c_buf_p
) = '\0';

2564 
off£t
 = (
yy_c_buf_p
Ë- (
yyãxt_±r
);

2565 ++(
yy_c_buf_p
);

2567  
	`yy_gë_√xt_buf„r
( ) )

2569 
EOB_ACT_LAST_MATCH
:

2581 
	`yyª°¨t
(
yyö
 );

2585 
EOB_ACT_END_OF_FILE
:

2587 i‡–
	`yywøp
( ) )

2588  
EOF
;

2590 i‡–! (
yy_did_buf„r_swôch_⁄_eof
) )

2591 
YY_NEW_FILE
;

2592 #ifde‡
__˝lu•lus


2593  
	`yyöput
();

2595  
	`öput
();

2599 
EOB_ACT_CONTINUE_SCAN
:

2600 (
yy_c_buf_p
Ë(
yyãxt_±r
Ë+ 
off£t
;

2606 
c
 = *(*Ë(
yy_c_buf_p
);

2607 *(
yy_c_buf_p
) = '\0';

2608 (
yy_hﬁd_ch¨
Ë*++(
yy_c_buf_p
);

2610  
c
;

2611 
	}
}

2619 
	$yyª°¨t
 (
FILE
 * 
öput_fûe
 )

2622 i‡–! 
YY_CURRENT_BUFFER
 ){

2623 
	`yyísuª_buf„r_°ack
 ();

2624 
YY_CURRENT_BUFFER_LVALUE
 =

2625 
	`yy_¸óã_buf„r
(
yyö
,
YY_BUF_SIZE
 );

2628 
	`yy_öô_buf„r
(
YY_CURRENT_BUFFER
,
öput_fûe
 );

2629 
	`yy_lﬂd_buf„r_°©e
( );

2630 
	}
}

2636 
	$yy_swôch_to_buf„r
 (
YY_BUFFER_STATE
 
√w_buf„r
 )

2644 
	`yyísuª_buf„r_°ack
 ();

2645 i‡–
YY_CURRENT_BUFFER
 =
√w_buf„r
 )

2648 i‡–
YY_CURRENT_BUFFER
 )

2651 *(
yy_c_buf_p
Ë(
yy_hﬁd_ch¨
);

2652 
YY_CURRENT_BUFFER_LVALUE
->
yy_buf_pos
 = (
yy_c_buf_p
);

2653 
YY_CURRENT_BUFFER_LVALUE
->
yy_n_ch¨s
 = (yy_n_chars);

2656 
YY_CURRENT_BUFFER_LVALUE
 = 
√w_buf„r
;

2657 
	`yy_lﬂd_buf„r_°©e
( );

2664 (
yy_did_buf„r_swôch_⁄_eof
) = 1;

2665 
	}
}

2667 
	$yy_lﬂd_buf„r_°©e
 ()

2669 (
yy_n_ch¨s
Ë
YY_CURRENT_BUFFER_LVALUE
->yy_n_chars;

2670 (
yyãxt_±r
Ë(
yy_c_buf_p
Ë
YY_CURRENT_BUFFER_LVALUE
->
yy_buf_pos
;

2671 
yyö
 = 
YY_CURRENT_BUFFER_LVALUE
->
yy_öput_fûe
;

2672 (
yy_hﬁd_ch¨
Ë*(
yy_c_buf_p
);

2673 
	}
}

2681 
YY_BUFFER_STATE
 
	$yy_¸óã_buf„r
 (
FILE
 * 
fûe
, 
size
 )

2683 
YY_BUFFER_STATE
 
b
;

2685 
b
 = (
YY_BUFFER_STATE
Ë
	`yyÆloc
(–
yy_buf„r_°©e
 ) );

2686 i‡–! 
b
 )

2687 
	`YY_FATAL_ERROR
( "out of dynamic memory in yy_create_buffer()" );

2689 
b
->
yy_buf_size
 = 
size
;

2694 
b
->
yy_ch_buf
 = (*Ë
	`yyÆloc
(b->
yy_buf_size
 + 2 );

2695 i‡–! 
b
->
yy_ch_buf
 )

2696 
	`YY_FATAL_ERROR
( "out of dynamic memory in yy_create_buffer()" );

2698 
b
->
yy_is_our_buf„r
 = 1;

2700 
	`yy_öô_buf„r
(
b
,
fûe
 );

2702  
b
;

2703 
	}
}

2709 
	$yy_dñëe_buf„r
 (
YY_BUFFER_STATE
 
b
 )

2712 i‡–! 
b
 )

2715 i‡–
b
 =
YY_CURRENT_BUFFER
 )

2716 
YY_CURRENT_BUFFER_LVALUE
 = (
YY_BUFFER_STATE
) 0;

2718 i‡–
b
->
yy_is_our_buf„r
 )

2719 
	`yy‰ì
((*Ë
b
->
yy_ch_buf
 );

2721 
	`yy‰ì
((*Ë
b
 );

2722 
	}
}

2728 
	$yy_öô_buf„r
 (
YY_BUFFER_STATE
 
b
, 
FILE
 * 
fûe
 )

2731 
€ºno
 = 
î∫o
;

2733 
	`yy_Êush_buf„r
(
b
 );

2735 
b
->
yy_öput_fûe
 = 
fûe
;

2736 
b
->
yy_fûl_buf„r
 = 1;

2742 i‡(
b
 !
YY_CURRENT_BUFFER
){

2743 
b
->
yy_bs_löío
 = 1;

2744 
b
->
yy_bs_cﬁumn
 = 0;

2747 
b
->
yy_is_öãø˘ive
 = 0;

2749 
î∫o
 = 
€ºno
;

2750 
	}
}

2756 
	$yy_Êush_buf„r
 (
YY_BUFFER_STATE
 
b
 )

2758 i‡–! 
b
 )

2761 
b
->
yy_n_ch¨s
 = 0;

2767 
b
->
yy_ch_buf
[0] = 
YY_END_OF_BUFFER_CHAR
;

2768 
b
->
yy_ch_buf
[1] = 
YY_END_OF_BUFFER_CHAR
;

2770 
b
->
yy_buf_pos
 = &b->
yy_ch_buf
[0];

2772 
b
->
yy_©_bﬁ
 = 1;

2773 
b
->
yy_buf„r_°©us
 = 
YY_BUFFER_NEW
;

2775 i‡–
b
 =
YY_CURRENT_BUFFER
 )

2776 
	`yy_lﬂd_buf„r_°©e
( );

2777 
	}
}

2785 
	$yypush_buf„r_°©e
 (
YY_BUFFER_STATE
 
√w_buf„r
 )

2787 i‡(
√w_buf„r
 =
NULL
)

2790 
	`yyísuª_buf„r_°ack
();

2793 i‡–
YY_CURRENT_BUFFER
 )

2796 *(
yy_c_buf_p
Ë(
yy_hﬁd_ch¨
);

2797 
YY_CURRENT_BUFFER_LVALUE
->
yy_buf_pos
 = (
yy_c_buf_p
);

2798 
YY_CURRENT_BUFFER_LVALUE
->
yy_n_ch¨s
 = (yy_n_chars);

2802 i‡(
YY_CURRENT_BUFFER
)

2803 (
yy_buf„r_°ack_t›
)++;

2804 
YY_CURRENT_BUFFER_LVALUE
 = 
√w_buf„r
;

2807 
	`yy_lﬂd_buf„r_°©e
( );

2808 (
yy_did_buf„r_swôch_⁄_eof
) = 1;

2809 
	}
}

2815 
	$yyp›_buf„r_°©e
 ()

2817 i‡(!
YY_CURRENT_BUFFER
)

2820 
	`yy_dñëe_buf„r
(
YY_CURRENT_BUFFER
 );

2821 
YY_CURRENT_BUFFER_LVALUE
 = 
NULL
;

2822 i‡((
yy_buf„r_°ack_t›
) > 0)

2823 --(
yy_buf„r_°ack_t›
);

2825 i‡(
YY_CURRENT_BUFFER
) {

2826 
	`yy_lﬂd_buf„r_°©e
( );

2827 (
yy_did_buf„r_swôch_⁄_eof
) = 1;

2829 
	}
}

2834 
	$yyísuª_buf„r_°ack
 ()

2836 
num_to_Æloc
;

2838 i‡(!(
yy_buf„r_°ack
)) {

2844 
num_to_Æloc
 = 1;

2845 (
yy_buf„r_°ack
Ë(
yy_buf„r_°©e
**)
yyÆloc


2846 (
num_to_Æloc
 * (
yy_buf„r_°©e
*)

2848 i‡–! (
yy_buf„r_°ack
) )

2849 
	`YY_FATAL_ERROR
( "out of dynamic memory in yyensure_buffer_stack()" );

2851 
	`mem£t
((
yy_buf„r_°ack
), 0, 
num_to_Æloc
 * (
yy_buf„r_°©e
*));

2853 (
yy_buf„r_°ack_max
Ë
num_to_Æloc
;

2854 (
yy_buf„r_°ack_t›
) = 0;

2858 i‡((
yy_buf„r_°ack_t›
Ë>((
yy_buf„r_°ack_max
)) - 1){

2861 
grow_size
 = 8 ;

2863 
num_to_Æloc
 = (
yy_buf„r_°ack_max
Ë+ 
grow_size
;

2864 (
yy_buf„r_°ack
Ë(
yy_buf„r_°©e
**)
yyªÆloc


2865 ((
yy_buf„r_°ack
),

2866 
num_to_Æloc
 * (
yy_buf„r_°©e
*)

2868 i‡–! (
yy_buf„r_°ack
) )

2869 
	`YY_FATAL_ERROR
( "out of dynamic memory in yyensure_buffer_stack()" );

2872 
	`mem£t
((
yy_buf„r_°ack
Ë+ (
yy_buf„r_°ack_max
), 0, 
grow_size
 * (
yy_buf„r_°©e
*));

2873 (
yy_buf„r_°ack_max
Ë
num_to_Æloc
;

2875 
	}
}

2883 
YY_BUFFER_STATE
 
	$yy_sˇn_buf„r
 (* 
ba£
, 
yy_size_t
 
size
 )

2885 
YY_BUFFER_STATE
 
b
;

2887 i‡–
size
 < 2 ||

2888 
ba£
[
size
-2] !
YY_END_OF_BUFFER_CHAR
 ||

2889 
ba£
[
size
-1] !
YY_END_OF_BUFFER_CHAR
 )

2893 
b
 = (
YY_BUFFER_STATE
Ë
	`yyÆloc
(–
yy_buf„r_°©e
 ) );

2894 i‡–! 
b
 )

2895 
	`YY_FATAL_ERROR
( "out of dynamic memory in yy_scan_buffer()" );

2897 
b
->
yy_buf_size
 = 
size
 - 2;

2898 
b
->
yy_buf_pos
 = b->
yy_ch_buf
 = 
ba£
;

2899 
b
->
yy_is_our_buf„r
 = 0;

2900 
b
->
yy_öput_fûe
 = 0;

2901 
b
->
yy_n_ch¨s
 = b->
yy_buf_size
;

2902 
b
->
yy_is_öãø˘ive
 = 0;

2903 
b
->
yy_©_bﬁ
 = 1;

2904 
b
->
yy_fûl_buf„r
 = 0;

2905 
b
->
yy_buf„r_°©us
 = 
YY_BUFFER_NEW
;

2907 
	`yy_swôch_to_buf„r
(
b
 );

2909  
b
;

2910 
	}
}

2920 
YY_BUFFER_STATE
 
	$yy_sˇn_°rög
 (
yyc⁄°
 * 
yy°r
 )

2923  
	`yy_sˇn_byãs
(
yy°r
,
	`°æí
(yystr) );

2924 
	}
}

2933 
YY_BUFFER_STATE
 
	$yy_sˇn_byãs
 (
yyc⁄°
 * 
yybyãs
, 
_yybyãs_Àn
 )

2935 
YY_BUFFER_STATE
 
b
;

2936 *
buf
;

2937 
yy_size_t
 
n
;

2938 
i
;

2941 
n
 = 
_yybyãs_Àn
 + 2;

2942 
buf
 = (*Ë
	`yyÆloc
(
n
 );

2943 i‡–! 
buf
 )

2944 
	`YY_FATAL_ERROR
( "out of dynamic memory in yy_scan_bytes()" );

2946  
i
 = 0; i < 
_yybyãs_Àn
; ++i )

2947 
buf
[
i
] = 
yybyãs
[i];

2949 
buf
[
_yybyãs_Àn
] = buf[_yybyãs_Àn+1] = 
YY_END_OF_BUFFER_CHAR
;

2951 
b
 = 
	`yy_sˇn_buf„r
(
buf
,
n
 );

2952 i‡–! 
b
 )

2953 
	`YY_FATAL_ERROR
( "bad buffer in yy_scan_bytes()" );

2958 
b
->
yy_is_our_buf„r
 = 1;

2960  
b
;

2961 
	}
}

2963 #i‚de‡
YY_EXIT_FAILURE


2964 
	#YY_EXIT_FAILURE
 2

	)

2967 
	$yy_Áèl_îr‹
 (
yyc⁄°
 * 
msg
 )

2969 (Ë
	`Ârötf
–
°dîr
, "%s\n", 
msg
 );

2970 
	`exô
–
YY_EXIT_FAILURE
 );

2971 
	}
}

2975 #unde‡
yyÀss


2976 
	#yyÀss
(
n
) \

2980 
yyÀss_ma¸o_¨g
 = (
n
); \

2981 
	`YY_LESS_LINENO
(
yyÀss_ma¸o_¨g
);\

2982 
yyãxt
[
yyÀng
] = (
yy_hﬁd_ch¨
); \

2983 (
yy_c_buf_p
Ë
yyãxt
 + 
yyÀss_ma¸o_¨g
; \

2984 (
yy_hﬁd_ch¨
Ë*(
yy_c_buf_p
); \

2985 *(
yy_c_buf_p
) = '\0'; \

2986 
yyÀng
 = 
yyÀss_ma¸o_¨g
; \

2988  0 )

	)

2995 
	$yygë_löío
 ()

2998  
yylöío
;

2999 
	}
}

3004 
FILE
 *
	$yygë_ö
 ()

3006  
yyö
;

3007 
	}
}

3012 
FILE
 *
	$yygë_out
 ()

3014  
yyout
;

3015 
	}
}

3020 
	$yygë_Àng
 ()

3022  
yyÀng
;

3023 
	}
}

3029 *
	$yygë_ãxt
 ()

3031  
yyãxt
;

3032 
	}
}

3038 
	$yy£t_löío
 (
löe_numbî
 )

3041 
yylöío
 = 
löe_numbî
;

3042 
	}
}

3050 
	$yy£t_ö
 (
FILE
 * 
ö_°r
 )

3052 
yyö
 = 
ö_°r
 ;

3053 
	}
}

3055 
	$yy£t_out
 (
FILE
 * 
out_°r
 )

3057 
yyout
 = 
out_°r
 ;

3058 
	}
}

3060 
	$yygë_debug
 ()

3062  
yy_Êex_debug
;

3063 
	}
}

3065 
	$yy£t_debug
 (
bdebug
 )

3067 
yy_Êex_debug
 = 
bdebug
 ;

3068 
	}
}

3070 
	$yy_öô_globÆs
 ()

3076 (
yy_buf„r_°ack
) = 0;

3077 (
yy_buf„r_°ack_t›
) = 0;

3078 (
yy_buf„r_°ack_max
) = 0;

3079 (
yy_c_buf_p
) = (*) 0;

3080 (
yy_öô
) = 0;

3081 (
yy_°¨t
) = 0;

3084 #ifde‡
YY_STDINIT


3085 
yyö
 = 
°dö
;

3086 
yyout
 = 
°dout
;

3088 
yyö
 = (
FILE
 *) 0;

3089 
yyout
 = (
FILE
 *) 0;

3096 
	}
}

3099 
	$yyÀx_de°roy
 ()

3103 
YY_CURRENT_BUFFER
){

3104 
	`yy_dñëe_buf„r
(
YY_CURRENT_BUFFER
 );

3105 
YY_CURRENT_BUFFER_LVALUE
 = 
NULL
;

3106 
	`yyp›_buf„r_°©e
();

3110 
	`yy‰ì
((
yy_buf„r_°ack
) );

3111 (
yy_buf„r_°ack
Ë
NULL
;

3115 
	`yy_öô_globÆs
( );

3118 
	}
}

3124 #i‚de‡
yyãxt_±r


3125 
	$yy_Êex_°∫˝y
 (* 
s1
, 
yyc⁄°
 * 
s2
, 
n
 )

3127 
i
;

3128  
i
 = 0; i < 
n
; ++i )

3129 
s1
[
i
] = 
s2
[i];

3130 
	}
}

3133 #ifde‡
YY_NEED_STRLEN


3134 
	$yy_Êex_°æí
 (
yyc⁄°
 * 
s
 )

3136 
n
;

3137  
n
 = 0; 
s
[n]; ++n )

3140  
n
;

3141 
	}
}

3144 *
	$yyÆloc
 (
yy_size_t
 
size
 )

3146  (*Ë
	`mÆloc
–
size
 );

3147 
	}
}

3149 *
	$yyªÆloc
 (* 
±r
, 
yy_size_t
 
size
 )

3158  (*Ë
	`ªÆloc
–(*Ë
±r
, 
size
 );

3159 
	}
}

3161 
	$yy‰ì
 (* 
±r
 )

3163 
	`‰ì
–(*Ë
±r
 );

3164 
	}
}

3166 
	#YYTABLES_NAME
 "yyèbÀs"

	)

	@src/common/autobuf.c

42 
	~"comm⁄/autobuf.h
"

43 
	~"defs.h
"

45 
	~<°dio.h
>

46 
	~<°rög.h
>

47 
	~<°dlib.h
>

48 
	~<î∫o.h
>

51 
autobuf_íœrge
(
autobuf
 *autobuf, 
√w_size
);

55 
	$abuf_öô
(
autobuf
 *autobuf, 
öôül_size
)

57 
autobuf
->
Àn
 = 0;

58 i‡(
öôül_size
 <= 0) {

59 
autobuf
->
size
 = 0;

60 
autobuf
->
buf
 = 
NULL
;

63 
autobuf
->
size
 = 
	`ROUND_UP_TO_POWER_OF_2
(
öôül_size
, 
AUTOBUFCHUNK
);

64 
autobuf
->
buf
 = 
	`ˇŒoc
◊utobuf->
size
, 1);

65 i‡(
autobuf
->
buf
 =
NULL
) {

66 
autobuf
->
size
 = 0;

69 *
autobuf
->
buf
 = '\0';

71 
	}
}

74 
	$abuf_‰ì
(
autobuf
 *autobuf)

76 
	`‰ì
(
autobuf
->
buf
);

77 
autobuf
->
buf
 = 
NULL
;

78 
autobuf
->
Àn
 = 0;

79 
autobuf
->
size
 = 0;

80 
	}
}

83 
	$autobuf_íœrge
(
autobuf
 *autobuf, 
√w_size
)

85 
√w_size
++;

86 i‡(
√w_size
 > 
autobuf
->
size
) {

87 *
p
;

88 
roundUpSize
 = 
	`ROUND_UP_TO_POWER_OF_2
(
√w_size
, 
AUTOBUFCHUNK
);

89 
p
 = 
	`ªÆloc
(
autobuf
->
buf
, 
roundUpSize
);

90 i‡(
p
 =
NULL
) {

91 #ifde‡
WIN32


92 
	`WSASëLa°Eº‹
(
ENOMEM
);

94 
î∫o
 = 
ENOMEM
;

98 
autobuf
->
buf
 = 
p
;

100 
	`mem£t
(&
autobuf
->
buf
[autobuf->
size
], 0, 
roundUpSize
 -áutobuf->size);

101 
autobuf
->
size
 = 
roundUpSize
;

104 
	}
}

107 
	$abuf_v≠≥ndf
(
autobuf
 *autobuf, c⁄° *
f‹m©
, 
va_li°
 
≠
)

109 
rc
;

110 
mö_size
;

111 
va_li°
 
≠2
;

112 
	`va_c›y
(
≠2
, 
≠
);

113 
rc
 = 
	`v¢¥ötf
(
autobuf
->
buf
 +áutobuf->
Àn
,áutobuf->
size
 -áutobuf->Àn, 
f‹m©
, 
≠
);

114 
	`va_íd
(
≠
);

115 
mö_size
 = 
autobuf
->
Àn
 + 
rc
;

116 i‡(
mö_size
 >
autobuf
->
size
) {

117 i‡(
	`autobuf_íœrge
(
autobuf
, 
mö_size
) < 0) {

118 
autobuf
->
buf
[autobuf->
Àn
] = '\0';

121 
	`v¢¥ötf
(
autobuf
->
buf
 +áutobuf->
Àn
,áutobuf->
size
 -áutobuf->Àn, 
f‹m©
, 
≠2
);

123 
	`va_íd
(
≠2
);

124 
autobuf
->
Àn
 = 
mö_size
;

126 
	}
}

129 
	$abuf_≠≥ndf
(
autobuf
 *autobuf, c⁄° *
fmt
, ...)

131 
rv
;

132 
va_li°
 
≠
;

133 
	`va_°¨t
(
≠
, 
fmt
);

134 
rv
 = 
	`abuf_v≠≥ndf
(
autobuf
, 
fmt
, 
≠
);

135 
	`va_íd
(
≠
);

136  
rv
;

137 
	}
}

140 
	$abuf_puts
(
autobuf
 *autobuf, c⁄° *
s
)

142 
Àn
;

144 i‡(
NULL
 =
s
)  0;

145 
Àn
 = 
	`°æí
(
s
);

146 i‡(
	`autobuf_íœrge
(
autobuf
,áutobuf->
Àn
 +Üen + 1) < 0) {

149 
	`°r˝y
(
autobuf
->
buf
 +áutobuf->
Àn
, 
s
);

150 
autobuf
->
Àn
 +=Üen;

151  
Àn
;

152 
	}
}

155 
	$abuf_°r·ime
(
autobuf
 *autobuf, c⁄° *
f‹m©
, c⁄° 
tm
 *tm)

157 
rc
 = 
	`°r·ime
(
autobuf
->
buf
 +áutobuf->
Àn
,áutobuf->
size
 -áutobuf->Àn, 
f‹m©
, 
tm
);

158 i‡(
rc
 == 0) {

160 i‡(
	`autobuf_íœrge
(
autobuf
,áutobuf->
size
 + 
AUTOBUFCHUNK
) < 0) {

161 
autobuf
->
buf
[autobuf->
Àn
] = '\0';

164 
rc
 = 
	`°r·ime
(
autobuf
->
buf
 +áutobuf->
Àn
,áutobuf->
size
 -áutobuf->Àn, 
f‹m©
, 
tm
);

166 
autobuf
->
Àn
 +
rc
;

167  
rc
;

168 
	}
}

171 
	$abuf_mem˝y
(
autobuf
 *autobuf, c⁄° *
p
, c⁄° 
Àn
)

173 i‡(
	`autobuf_íœrge
(
autobuf
,áutobuf->
Àn
 +Üen) < 0) {

176 
	`mem˝y
(
autobuf
->
buf
 +áutobuf->
Àn
, 
p
,Üen);

177 
autobuf
->
Àn
 +=Üen;

178  
Àn
;

179 
	}
}

182 
	$abuf_mem˝y_¥efix
(
autobuf
 *autobuf, c⁄° *
p
, c⁄° 
Àn
)

184 i‡(
	`autobuf_íœrge
(
autobuf
,áutobuf->
Àn
 +Üen) < 0) {

187 
	`memmove
(&
autobuf
->
buf
[
Àn
],áutobuf->buf,áutobuf->len);

188 
	`mem˝y
(
autobuf
->
buf
, 
p
, 
Àn
);

189 
autobuf
->
Àn
 +=Üen;

190  
Àn
;

191 
	}
}

194 
	$abuf_puŒ
(
autobuf
 *áutobuf, 
Àn
) {

195 *
p
;

196 
size_t
 
√wsize
;

198 i‡(
Àn
 !
autobuf
->len) {

199 
	`memmove
(
autobuf
->
buf
, &autobuf->buf[
Àn
],áutobuf->len -Üen);

201 
autobuf
->
Àn
 -=Üen;

203 
√wsize
 = 
	`ROUND_UP_TO_POWER_OF_2
(
autobuf
->
Àn
 + 1, 
AUTOBUFCHUNK
);

204 
p
 = 
	`ªÆloc
(
autobuf
->
buf
, 
√wsize
);

205 i‡(
p
 =
NULL
) {

206 #ifde‡
WIN32


207 
	`WSASëLa°Eº‹
(
ENOMEM
);

209 
î∫o
 = 
ENOMEM
;

213 
autobuf
->
buf
 = 
p
;

214 
autobuf
->
size
 = 
√wsize
;

216 
	}
}

	@src/common/autobuf.h

42 #i‚de‡
_COMMON_AUTOBUF_H


43 
	#_COMMON_AUTOBUF_H


	)

45 
	gautobuf
;

47 
	~"defs.h
"

48 
	~<°d¨g.h
>

49 
	~<time.h
>

51 
	#ROUND_UP_TO_POWER_OF_2
(
vÆ
, 
pow2
Ë(((vÆË+ (pow2Ë- 1Ë& ~(’ow2Ë- 1))

	)

53 
	#AUTOBUFCHUNK
 4096

	)

54 
	sautobuf
 {

55 
	msize
;

56 
	mÀn
;

57 *
	mbuf
;

60 
abuf_öô
 (
autobuf
 *áutobuf, 
öôül_size
);

61 
abuf_‰ì
 (
autobuf
 *áutobuf);

62 
	$abuf_v≠≥ndf
 (
autobuf
 *autobuf, c⁄° *
fmt
, 
va_li°
 
≠
Ë
	`__©åibuã__
 ((
	`f‹m©
(
¥ötf
, 2, 0)));

63 
	$abuf_≠≥ndf
 (
autobuf
 *áutobuf, c⁄° *
fmt
, ...Ë
	`__©åibuã__
 ((
	`f‹m©
(
¥ötf
, 2, 3)));

64 
	`abuf_puts
 (
autobuf
 *áutobuf, c⁄° *
s
);

65 
	`abuf_°r·ime
 (
autobuf
 *áutobuf, c⁄° *
f‹m©
, c⁄° 
tm
 *Åm);

66 
	`abuf_mem˝y
 (
autobuf
 *áutobuf, c⁄° *
p
, c⁄° 
Àn
);

67 
	`abuf_mem˝y_¥efix
 (
autobuf
 *autobuf, c⁄° *
p
, c⁄° 
Àn
);

68 
	`abuf_puŒ
 (
autobuf
 *áutobuf, 
Àn
);

	@src/common/avl.c

43 
	~<°ddef.h
>

44 
	~<time.h
>

45 
	~<°rög.h
>

47 
	~"ùˇlc.h
"

48 
	~"comm⁄/avl.h
"

49 
	~"√t_ﬁ§.h
"

57 
avl_åì_comp
 
	gavl_comp_deÁu…
 = 
NULL
;

58 
avl_åì_comp
 
	gavl_comp_¥efix_deÁu…
;

61 
	$avl_comp_ùv4
(c⁄° *
ù1
, c⁄° *
ù2
)

63  
	`ù4cmp
(
ù1
, 
ù2
);

64 
	}
}

67 
	$avl_comp_ùv6
(c⁄° *
ù1
, c⁄° *
ù2
)

69  
	`ù6cmp
(
ù1
, 
ù2
);

70 
	}
}

73 
	$avl_comp_mac
(c⁄° *
ù1
, c⁄° *
ù2
)

75  
	`memcmp
(
ù1
, 
ù2
, 6);

76 
	}
}

79 
	$avl_öô
(
avl_åì
 *
åì
, 
avl_åì_comp
 
comp
)

81 
åì
->
roŸ
 = 
NULL
;

82 
åì
->
fú°
 = 
NULL
;

83 
åì
->
œ°
 = 
NULL
;

84 
åì
->
cou¡
 = 0;

86 
åì
->
comp
 = com∞=
avl_comp_ùv4
 ? 
NULL
 : comp;

87 
	}
}

89 
avl_node
 *

90 
	$avl_föd_ªc_ùv4
(
avl_node
 *
node
, c⁄° *
key
)

92 i‡(*(c⁄° *)
key
 < *(c⁄° *)
node
->key) {

93 i‡(
node
->
À·
 !
NULL
)

94  
	`avl_föd_ªc_ùv4
(
node
->
À·
, 
key
);

97 i‡(*(c⁄° *)
key
 > *(c⁄° *)
node
->key) {

98 i‡(
node
->
right
 !
NULL
)

99  
	`avl_föd_ªc_ùv4
(
node
->
right
, 
key
);

102  
node
;

103 
	}
}

105 
avl_node
 *

106 
	$avl_föd_ªc
(
avl_node
 *
node
, c⁄° *
key
, 
avl_åì_comp
 
comp
)

108 
diff
;

110 i‡(
NULL
 =
comp
)

111  
	`avl_föd_ªc_ùv4
(
node
, 
key
);

113 
diff
 = (*
comp
Ë(
key
, 
node
->key);

115 i‡(
diff
 < 0) {

116 i‡(
node
->
À·
 !
NULL
)

117  
	`avl_föd_ªc
(
node
->
À·
, 
key
, 
comp
);

119  
node
;

122 i‡(
diff
 > 0) {

123 i‡(
node
->
right
 !
NULL
)

124  
	`avl_föd_ªc
(
node
->
right
, 
key
, 
comp
);

126  
node
;

129  
node
;

130 
	}
}

132 
avl_node
 *

133 
	$avl_föd
(
avl_åì
 *
åì
, c⁄° *
key
)

135 
avl_node
 *
node
;

137 i‡(
åì
->
roŸ
 =
NULL
)

138  
NULL
;

140 
node
 = 
	`avl_föd_ªc
(
åì
->
roŸ
, 
key
,Åªe->
comp
);

142 i‡(
NULL
 =
åì
->
comp
) {

143 i‡(0 !
	`ù4cmp
(
node
->
key
, key))

144  
NULL
;

148 i‡((*
åì
->
comp
Ë(
node
->
key
, key) != 0)

149  
NULL
;

152  
node
;

153 
	}
}

156 
	$avl_rŸ©e_right
(
avl_åì
 *
åì
, 
avl_node
 *
node
)

158 
avl_node
 *
À·
, *
∑ª¡
;

160 
À·
 = 
node
->left;

161 
∑ª¡
 = 
node
->parent;

163 
À·
->
∑ª¡
 =Öarent;

164 
node
->
∑ª¡
 = 
À·
;

166 i‡(
∑ª¡
 =
NULL
)

167 
åì
->
roŸ
 = 
À·
;

170 i‡(
∑ª¡
->
À·
 =
node
)

171 
∑ª¡
->
À·
 =Üeft;

174 
∑ª¡
->
right
 = 
À·
;

177 
node
->
À·
 =Üe·->
right
;

178 
À·
->
right
 = 
node
;

180 i‡(
node
->
À·
 !
NULL
)

181 
node
->
À·
->
∑ª¡
 =Çode;

183 
node
->
bÆ™˚
 +1 - 
	`MIN
(
À·
->balance, 0);

184 
À·
->
bÆ™˚
 +1 + 
	`MAX
(
node
->balance, 0);

185 
	}
}

188 
	$avl_rŸ©e_À·
(
avl_åì
 *
åì
, 
avl_node
 *
node
)

190 
avl_node
 *
right
, *
∑ª¡
;

192 
right
 = 
node
->right;

193 
∑ª¡
 = 
node
->parent;

195 
right
->
∑ª¡
 =Öarent;

196 
node
->
∑ª¡
 = 
right
;

198 i‡(
∑ª¡
 =
NULL
)

199 
åì
->
roŸ
 = 
right
;

202 i‡(
∑ª¡
->
À·
 =
node
)

203 
∑ª¡
->
À·
 = 
right
;

206 
∑ª¡
->
right
 =Ñight;

209 
node
->
right
 =Ñight->
À·
;

210 
right
->
À·
 = 
node
;

212 i‡(
node
->
right
 !
NULL
)

213 
node
->
right
->
∑ª¡
 =Çode;

215 
node
->
bÆ™˚
 -1 + 
	`MAX
(
right
->balance, 0);

216 
right
->
bÆ™˚
 -1 - 
	`MIN
(
node
->balance, 0);

217 
	}
}

220 
	$po°_ö£π
(
avl_åì
 *
åì
, 
avl_node
 *
node
)

222 
avl_node
 *
∑ª¡
 = 
node
->parent;

224 i‡(
∑ª¡
 =
NULL
)

227 i‡(
node
 =
∑ª¡
->
À·
) {

228 
∑ª¡
->
bÆ™˚
--;

230 i‡(
∑ª¡
->
bÆ™˚
 == 0)

233 i‡(
∑ª¡
->
bÆ™˚
 == -1) {

234 
	`po°_ö£π
(
åì
, 
∑ª¡
);

238 i‡(
node
->
bÆ™˚
 == -1) {

239 
	`avl_rŸ©e_right
(
åì
, 
∑ª¡
);

243 
	`avl_rŸ©e_À·
(
åì
, 
node
);

244 
	`avl_rŸ©e_right
(
åì
, 
node
->
∑ª¡
->parent);

248 
∑ª¡
->
bÆ™˚
++;

250 i‡(
∑ª¡
->
bÆ™˚
 == 0)

253 i‡(
∑ª¡
->
bÆ™˚
 == 1) {

254 
	`po°_ö£π
(
åì
, 
∑ª¡
);

258 i‡(
node
->
bÆ™˚
 == 1) {

259 
	`avl_rŸ©e_À·
(
åì
, 
∑ª¡
);

263 
	`avl_rŸ©e_right
(
åì
, 
node
);

264 
	`avl_rŸ©e_À·
(
åì
, 
node
->
∑ª¡
->parent);

265 
	}
}

268 
	$avl_ö£π_bef‹e
(
avl_åì
 *
åì
, 
avl_node
 *
pos_node
, avl_nodê*
node
)

270 i‡(
pos_node
->
¥ev
 !
NULL
)

271 
pos_node
->
¥ev
->
√xt
 = 
node
;

273 
åì
->
fú°
 = 
node
;

275 
node
->
¥ev
 = 
pos_node
->prev;

276 
node
->
√xt
 = 
pos_node
;

278 
pos_node
->
¥ev
 = 
node
;

280 
åì
->
cou¡
++;

281 
	}
}

284 
	$avl_ö£π_a·î
(
avl_åì
 *
åì
, 
avl_node
 *
pos_node
, avl_nodê*
node
)

286 i‡(
pos_node
->
√xt
 !
NULL
)

287 
pos_node
->
√xt
->
¥ev
 = 
node
;

289 
åì
->
œ°
 = 
node
;

291 
node
->
¥ev
 = 
pos_node
;

292 
node
->
√xt
 = 
pos_node
->next;

294 
pos_node
->
√xt
 = 
node
;

296 
åì
->
cou¡
++;

297 
	}
}

300 
	$avl_ªmove
(
avl_åì
 *
åì
, 
avl_node
 *
node
)

302 i‡(
node
->
¥ev
 !
NULL
)

303 
node
->
¥ev
->
√xt
 =Çode->next;

305 
åì
->
fú°
 = 
node
->
√xt
;

307 i‡(
node
->
√xt
 !
NULL
)

308 
node
->
√xt
->
¥ev
 =Çode->prev;

310 
åì
->
œ°
 = 
node
->
¥ev
;

312 
åì
->
cou¡
--;

313 
	}
}

316 
	$avl_ö£π
(
avl_åì
 *
åì
, 
avl_node
 *
√w
, 
Ælow_du∂iˇãs
)

318 
avl_node
 *
node
;

319 
avl_node
 *
œ°
;

320 
diff
;

322 
√w
->
∑ª¡
 = 
NULL
;

324 
√w
->
À·
 = 
NULL
;

325 
√w
->
right
 = 
NULL
;

327 
√w
->
√xt
 = 
NULL
;

328 
√w
->
¥ev
 = 
NULL
;

330 
√w
->
bÆ™˚
 = 0;

331 
√w
->
Àadî
 = 1;

333 i‡(
åì
->
roŸ
 =
NULL
) {

334 
åì
->
roŸ
 = 
√w
;

335 
åì
->
fú°
 = 
√w
;

336 
åì
->
œ°
 = 
√w
;

337 
åì
->
cou¡
 = 1;

341 
node
 = 
	`avl_föd_ªc
(
åì
->
roŸ
, 
√w
->
key
,Åªe->
comp
);

343 
œ°
 = 
node
;

345 
œ°
->
√xt
 !
NULL
 &&Üa°->√xt->
Àadî
 == 0)

346 
œ°
 =Üa°->
√xt
;

348 i‡(
NULL
 =
åì
->
comp
)

349 
diff
 = 
	`ù4cmp
(
√w
->
key
, 
node
->key);

352 
diff
 = (*
åì
->
comp
Ë(
√w
->
key
, 
node
->key);

354 i‡(
diff
 == 0) {

355 i‡(
Ælow_du∂iˇãs
 =
AVL_DUP_NO
)

358 
√w
->
Àadî
 = 0;

360 
	`avl_ö£π_a·î
(
åì
, 
œ°
, 
√w
);

364 i‡(
node
->
bÆ™˚
 == 1) {

365 
	`avl_ö£π_bef‹e
(
åì
, 
node
, 
√w
);

367 
node
->
bÆ™˚
 = 0;

368 
√w
->
∑ª¡
 = 
node
;

369 
node
->
À·
 = 
√w
;

373 i‡(
node
->
bÆ™˚
 == -1) {

374 
	`avl_ö£π_a·î
(
åì
, 
œ°
, 
√w
);

376 
node
->
bÆ™˚
 = 0;

377 
√w
->
∑ª¡
 = 
node
;

378 
node
->
right
 = 
√w
;

382 i‡(
diff
 < 0) {

383 
	`avl_ö£π_bef‹e
(
åì
, 
node
, 
√w
);

385 
node
->
bÆ™˚
 = -1;

386 
√w
->
∑ª¡
 = 
node
;

387 
node
->
À·
 = 
√w
;

388 
	`po°_ö£π
(
åì
, 
node
);

392 
	`avl_ö£π_a·î
(
åì
, 
œ°
, 
√w
);

394 
node
->
bÆ™˚
 = 1;

395 
√w
->
∑ª¡
 = 
node
;

396 
node
->
right
 = 
√w
;

397 
	`po°_ö£π
(
åì
, 
node
);

399 
	}
}

402 
	$avl_po°_dñëe
(
avl_åì
 *
åì
, 
avl_node
 *
node
)

404 
avl_node
 *
∑ª¡
;

406 i‡((
∑ª¡
 = 
node
->∑ª¡Ë=
NULL
)

409 i‡(
node
 =
∑ª¡
->
À·
) {

410 
∑ª¡
->
bÆ™˚
++;

412 i‡(
∑ª¡
->
bÆ™˚
 == 0) {

413 
	`avl_po°_dñëe
(
åì
, 
∑ª¡
);

417 i‡(
∑ª¡
->
bÆ™˚
 == 1)

420 i‡(
∑ª¡
->
right
->
bÆ™˚
 == 0) {

421 
	`avl_rŸ©e_À·
(
åì
, 
∑ª¡
);

425 i‡(
∑ª¡
->
right
->
bÆ™˚
 == 1) {

426 
	`avl_rŸ©e_À·
(
åì
, 
∑ª¡
);

427 
	`avl_po°_dñëe
(
åì
, 
∑ª¡
->parent);

431 
	`avl_rŸ©e_right
(
åì
, 
∑ª¡
->
right
);

432 
	`avl_rŸ©e_À·
(
åì
, 
∑ª¡
);

433 
	`avl_po°_dñëe
(
åì
, 
∑ª¡
->parent);

437 
∑ª¡
->
bÆ™˚
--;

439 i‡(
∑ª¡
->
bÆ™˚
 == 0) {

440 
	`avl_po°_dñëe
(
åì
, 
∑ª¡
);

444 i‡(
∑ª¡
->
bÆ™˚
 == -1)

447 i‡(
∑ª¡
->
À·
->
bÆ™˚
 == 0) {

448 
	`avl_rŸ©e_right
(
åì
, 
∑ª¡
);

452 i‡(
∑ª¡
->
À·
->
bÆ™˚
 == -1) {

453 
	`avl_rŸ©e_right
(
åì
, 
∑ª¡
);

454 
	`avl_po°_dñëe
(
åì
, 
∑ª¡
->parent);

458 
	`avl_rŸ©e_À·
(
åì
, 
∑ª¡
->
À·
);

459 
	`avl_rŸ©e_right
(
åì
, 
∑ª¡
);

460 
	`avl_po°_dñëe
(
åì
, 
∑ª¡
->parent);

461 
	}
}

463 
avl_node
 *

464 
	$avl_loˇl_mö
(
avl_node
 *
node
)

466 
node
->
À·
 !
NULL
)

467 
node
 =Çode->
À·
;

469  
node
;

470 
	}
}

473 
avl_node
 *

474 
	$avl_loˇl_max
(
avl_node
 *
node
)

476 
node
->
right
 !
NULL
)

477 
node
 =Çode->
right
;

479  
node
;

480 
	}
}

484 
	$avl_dñëe_w‹kî
(
avl_åì
 *
åì
, 
avl_node
 *
node
)

486 
avl_node
 *
∑ª¡
, *
mö
;

488 
∑ª¡
 = 
node
->parent;

490 i‡(
node
->
À·
 =
NULL
 &&Çode->
right
 == NULL) {

491 i‡(
∑ª¡
 =
NULL
) {

492 
åì
->
roŸ
 = 
NULL
;

496 i‡(
∑ª¡
->
À·
 =
node
) {

497 
∑ª¡
->
À·
 = 
NULL
;

498 
∑ª¡
->
bÆ™˚
++;

500 i‡(
∑ª¡
->
bÆ™˚
 == 1)

503 i‡(
∑ª¡
->
bÆ™˚
 == 0) {

504 
	`avl_po°_dñëe
(
åì
, 
∑ª¡
);

508 i‡(
∑ª¡
->
right
->
bÆ™˚
 == 0) {

509 
	`avl_rŸ©e_À·
(
åì
, 
∑ª¡
);

513 i‡(
∑ª¡
->
right
->
bÆ™˚
 == 1) {

514 
	`avl_rŸ©e_À·
(
åì
, 
∑ª¡
);

515 
	`avl_po°_dñëe
(
åì
, 
∑ª¡
->parent);

519 
	`avl_rŸ©e_right
(
åì
, 
∑ª¡
->
right
);

520 
	`avl_rŸ©e_À·
(
åì
, 
∑ª¡
);

521 
	`avl_po°_dñëe
(
åì
, 
∑ª¡
->parent);

525 i‡(
∑ª¡
->
right
 =
node
) {

526 
∑ª¡
->
right
 = 
NULL
;

527 
∑ª¡
->
bÆ™˚
--;

529 i‡(
∑ª¡
->
bÆ™˚
 == -1)

532 i‡(
∑ª¡
->
bÆ™˚
 == 0) {

533 
	`avl_po°_dñëe
(
åì
, 
∑ª¡
);

537 i‡(
∑ª¡
->
À·
->
bÆ™˚
 == 0) {

538 
	`avl_rŸ©e_right
(
åì
, 
∑ª¡
);

542 i‡(
∑ª¡
->
À·
->
bÆ™˚
 == -1) {

543 
	`avl_rŸ©e_right
(
åì
, 
∑ª¡
);

544 
	`avl_po°_dñëe
(
åì
, 
∑ª¡
->parent);

548 
	`avl_rŸ©e_À·
(
åì
, 
∑ª¡
->
À·
);

549 
	`avl_rŸ©e_right
(
åì
, 
∑ª¡
);

550 
	`avl_po°_dñëe
(
åì
, 
∑ª¡
->parent);

555 i‡(
node
->
À·
 =
NULL
) {

556 i‡(
∑ª¡
 =
NULL
) {

557 
åì
->
roŸ
 = 
node
->
right
;

558 
node
->
right
->
∑ª¡
 = 
NULL
;

562 
node
->
right
->
∑ª¡
 =Öarent;

564 i‡(
∑ª¡
->
À·
 =
node
)

565 
∑ª¡
->
À·
 = 
node
->
right
;

568 
∑ª¡
->
right
 = 
node
->right;

570 
	`avl_po°_dñëe
(
åì
, 
node
->
right
);

574 i‡(
node
->
right
 =
NULL
) {

575 i‡(
∑ª¡
 =
NULL
) {

576 
åì
->
roŸ
 = 
node
->
À·
;

577 
node
->
À·
->
∑ª¡
 = 
NULL
;

581 
node
->
À·
->
∑ª¡
 =Öarent;

583 i‡(
∑ª¡
->
À·
 =
node
)

584 
∑ª¡
->
À·
 = 
node
->left;

587 
∑ª¡
->
right
 = 
node
->
À·
;

589 
	`avl_po°_dñëe
(
åì
, 
node
->
À·
);

593 
mö
 = 
	`avl_loˇl_mö
(
node
->
right
);

594 
	`avl_dñëe_w‹kî
(
åì
, 
mö
);

595 
∑ª¡
 = 
node
->parent;

597 
mö
->
bÆ™˚
 = 
node
->balance;

598 
mö
->
∑ª¡
 =Öarent;

599 
mö
->
À·
 = 
node
->left;

600 
mö
->
right
 = 
node
->right;

602 i‡(
mö
->
À·
 !
NULL
)

603 
mö
->
À·
->
∑ª¡
 = min;

605 i‡(
mö
->
right
 !
NULL
)

606 
mö
->
right
->
∑ª¡
 = min;

608 i‡(
∑ª¡
 =
NULL
) {

609 
åì
->
roŸ
 = 
mö
;

613 i‡(
∑ª¡
->
À·
 =
node
) {

614 
∑ª¡
->
À·
 = 
mö
;

618 
∑ª¡
->
right
 = 
mö
;

619 
	}
}

622 
	$avl_dñëe
(
avl_åì
 *
åì
, 
avl_node
 *
node
)

624 
avl_node
 *
√xt
;

625 
avl_node
 *
∑ª¡
;

626 
avl_node
 *
À·
;

627 
avl_node
 *
right
;

629 i‡(
node
->
Àadî
 != 0) {

630 
√xt
 = 
node
->next;

632 i‡(
√xt
 !
NULL
 &&Çext->
Àadî
 == 0) {

633 
√xt
->
Àadî
 = 1;

634 
√xt
->
bÆ™˚
 = 
node
->balance;

636 
∑ª¡
 = 
node
->parent;

637 
À·
 = 
node
->left;

638 
right
 = 
node
->right;

640 
√xt
->
∑ª¡
 =Öarent;

641 
√xt
->
À·
 =Üeft;

642 
√xt
->
right
 =Ñight;

644 i‡(
∑ª¡
 =
NULL
)

645 
åì
->
roŸ
 = 
√xt
;

648 i‡(
node
 =
∑ª¡
->
À·
)

649 
∑ª¡
->
À·
 = 
√xt
;

652 
∑ª¡
->
right
 = 
√xt
;

655 i‡(
À·
 !
NULL
)

656 
À·
->
∑ª¡
 = 
√xt
;

658 i‡(
right
 !
NULL
)

659 
right
->
∑ª¡
 = 
√xt
;

663 
	`avl_dñëe_w‹kî
(
åì
, 
node
);

666 
	`avl_ªmove
(
åì
, 
node
);

667 
	}
}

	@src/common/avl.h

43 #i‚de‡
_AVL_H


44 
	#_AVL_H


	)

46 
	~<°ddef.h
>

50 
	#INLINE
 
ölöe
 
	`__©åibuã__
((
Æways_ölöe
))

	)

52 
	savl_node
 {

53 
avl_node
 *
	m∑ª¡
;

54 
avl_node
 *
	mÀ·
;

55 
avl_node
 *
	mright
;

56 
avl_node
 *
	m√xt
;

57 
avl_node
 *
	m¥ev
;

58 *
	mkey
;

59 sig√d 
	mbÆ™˚
;

60 
	mÀadî
;

63 (*
	tavl_åì_comp
) (const *, const *);

65 
	savl_åì
 {

66 
avl_node
 *
roŸ
;

67 
avl_node
 *
fú°
;

68 
avl_node
 *
œ°
;

69 
cou¡
;

70 
avl_åì_comp
 
comp
;

73 
	#AVL_DUP
 1

	)

74 
	#AVL_DUP_NO
 0

	)

76 
	`avl_öô
(
avl_åì
 *, 
avl_åì_comp
);

77 
avl_node
 *
	`avl_föd
(
avl_åì
 *, const *);

78 
	`avl_ö£π
(
avl_åì
 *, 
avl_node
 *, );

79 
	`avl_dñëe
(
avl_åì
 *, 
avl_node
 *);

81 
INLINE
 
avl_node
 *

82 
	$avl_wÆk_fú°
(
avl_åì
 *
åì
)

84  
åì
->
fú°
;

85 
	}
}

86 
INLINE
 
avl_node
 *

87 
	$avl_wÆk_œ°
(
avl_åì
 *
åì
)

89  
åì
->
œ°
;

90 
	}
}

91 
INLINE
 
avl_node
 *

92 
	$avl_wÆk_√xt
(
avl_node
 *
node
)

94  
node
->
√xt
;

95 
	}
}

96 
INLINE
 
avl_node
 *

97 
	$avl_wÆk_¥ev
(
avl_node
 *
node
)

99  
node
->
¥ev
;

100 
	}
}

103 
INLINE
 c⁄° 
avl_node
 *

104 
	$avl_wÆk_fú°_c
(c⁄° 
avl_åì
 *
åì
)

106  
åì
->
fú°
;

107 
	}
}

108 
INLINE
 c⁄° 
avl_node
 *

109 
	$avl_wÆk_œ°_c
(c⁄° 
avl_åì
 *
åì
)

111  
åì
->
œ°
;

112 
	}
}

113 
INLINE
 c⁄° 
avl_node
 *

114 
	$avl_wÆk_√xt_c
(c⁄° 
avl_node
 *
node
)

116  
node
->
√xt
;

117 
	}
}

118 
INLINE
 c⁄° 
avl_node
 *

119 
	$avl_wÆk_¥ev_c
(c⁄° 
avl_node
 *
node
)

121  
node
->
¥ev
;

122 
	}
}

124 
avl_åì_comp
 
avl_comp_deÁu…
;

125 
avl_åì_comp
 
avl_comp_¥efix_deÁu…
;

126 
avl_comp_ùv4
(const *, const *);

127 
avl_comp_ùv6
(const *, const *);

128 
avl_comp_mac
(const *, const *);

134 
	#AVLNODE2STRUCT
(
fun˙ame
, 
°ru˘«me
, 
av odíame
) \

135 
ölöe
 
°ru˘«me
 * 
	`fun˙ame
 (
avl_node
 *
±r
)\

138 
±r
 ? \

139 (
°ru˘«me
 *Ë(((
size_t
Ë
±r
Ë- 
	`off£tof
(°ru˘«me, 
av odíame
)) : \

140 
NULL
); \

141 }

	)

	@src/common/list.c

43 
	~<°dlib.h
>

44 
	~"comm⁄/li°.h
"

48 
	$li°_hód_öô
(
li°_node
 *
node
)

50 
node
->
¥ev
 =Çode;

51 
node
->
√xt
 =Çode;

52 
	}
}

55 
	$li°_node_öô
(
li°_node
 *
node
)

57 
node
->
¥ev
 = 
NULL
;

58 
node
->
√xt
 = 
NULL
;

59 
	}
}

62 
	$li°_node_⁄_li°
(
li°_node
 *
node
)

64 i‡(
node
->
¥ev
 ||Çode->
√xt
) {

69 
	}
}

72 
	$li°_is_em±y
(
li°_node
 *
node
)

74 i‡(
node
->
¥ev
 =nodê&&Çode->
√xt
 ==Çode) {

79 
	}
}

82 
	$li°_add_a·î
(
li°_node
 *
pos_node
, li°_nodê*
√w_node
)

84 
√w_node
->
√xt
 = 
pos_node
->next;

85 
√w_node
->
¥ev
 = 
pos_node
;

87 
pos_node
->
√xt
->
¥ev
 = 
√w_node
;

88 
pos_node
->
√xt
 = 
√w_node
;

89 
	}
}

92 
	$li°_add_bef‹e
(
li°_node
 *
pos_node
, li°_nodê*
√w_node
)

94 
√w_node
->
¥ev
 = 
pos_node
->prev;

95 
√w_node
->
√xt
 = 
pos_node
;

97 
pos_node
->
¥ev
->
√xt
 = 
√w_node
;

98 
pos_node
->
¥ev
 = 
√w_node
;

99 
	}
}

102 
	$li°_ªmove
(
li°_node
 *
dñ_node
)

104 
dñ_node
->
√xt
->
¥ev
 = del_node->prev;

105 
dñ_node
->
¥ev
->
√xt
 = del_node->next;

107 
	`li°_node_öô
(
dñ_node
);

108 
	}
}

	@src/common/list.h

43 #i‚de‡
_LIST_H


44 
	#_LIST_H


	)

46 
	~"°ddef.h
"

48 
	sli°_node
 {

49 
li°_node
 *
	m√xt
;

50 
li°_node
 *
	m¥ev
;

53 
li°_hód_öô
(
li°_node
 *);

54 
li°_node_öô
(
li°_node
 *);

55 
li°_node_⁄_li°
(
li°_node
 *);

56 
li°_is_em±y
(
li°_node
 *);

58 
li°_add_bef‹e
(
li°_node
 *, list_node *);

59 
li°_add_a·î
(
li°_node
 *, list_node *);

61 
li°_ªmove
(
li°_node
 *);

67 
ölöe
 

68 
	$li°_mîge
(
li°_node
 *
li°_hód1
, li°_nodê*
li°_hód2
)

70 i‡(!
	`li°_is_em±y
(
li°_hód2
)) {

71 
li°_hód1
->
√xt
->
¥ev
 = 
li°_hód2
->prev;

72 
li°_hód2
->
¥ev
->
√xt
 = 
li°_hód1
->next;

73 
li°_hód1
->
√xt
 = 
li°_hód2
->next;

74 
li°_hód2
->
√xt
->
¥ev
 = 
li°_hód1
;

75 
li°_hód2
->
√xt
 =Üi°_hód2->
¥ev
 =Üist_head2;

77 
	}
}

83 
	#LISTNODE2STRUCT
(
fun˙ame
, 
°ru˘«me
, 
li°nodíame
) \

84 
ölöe
 
°ru˘«me
 * 
	`fun˙ame
 (
li°_node
 *
±r
)\

87 
±r
 ? \

88 (
°ru˘«me
 *Ë(((
size_t
Ë
±r
Ë- 
	`off£tof
(°ru˘«me, 
li°nodíame
)) : \

89 
NULL
); \

90 }

	)

	@src/defs.h

42 #i‚de‡
_OLSR_DEFS


43 
	#_OLSR_DEFS


	)

46 
	~<sys/time.h
>

47 
	~<sys/times.h
>

48 
	~<sys/sockë.h
>

49 
	~<√töë/ö.h
>

50 
	~<°dio.h
>

51 
	~<°dlib.h
>

52 
	~<°rög.h
>

53 
	~<î∫o.h
>

54 
	~<time.h
>

56 
	~"ﬁ§_¥Ÿocﬁ.h
"

57 
	~"ﬁ§_cfg.h
"

59 c⁄° 
ﬁ§d_vîsi⁄
[];

60 c⁄° 
buûd_d©e
[];

61 c⁄° 
buûd_ho°
[];

63 #i‚de‡
OLSRD_GLOBAL_CONF_FILE


64 
	#OLSRD_CONF_FILE_NAME
 "ﬁ§d.c⁄f"

	)

65 
	#OLSRD_GLOBAL_CONF_FILE
 "/ëc/" 
OLSRD_CONF_FILE_NAME


	)

68 
	#MAXMESSAGESIZE
 1500

	)

69 
	#UDP_IPV4_HDRSIZE
 28

	)

70 
	#UDP_IPV6_HDRSIZE
 62

	)

73 #ifde‡
DEBUG


74 
	#ﬁ§_debug
(
lvl
, 
f‹m©
, 
¨gs
...) do { \

75 
	`OLSR_PRINTF
(
lvl
, "%†(%s:%d): ", 
__func__
, 
__FILE__
, 
__LINE__
); \

76 
	`OLSR_PRINTF
(
lvl
, (
f‹m©
), ##
¨gs
); \

77 } 0)

	)

80 
FILE
 *
debug_h™dÀ
;

82 #ifde‡
NODEBUG


83 
	#OLSR_PRINTF
(
lvl
, 
f‹m©
, 
¨gs
...Ëdÿ{ } 0)

	)

85 
	#OLSR_PRINTF
(
lvl
, 
f‹m©
, 
¨gs
...) do { \

86 if((
ﬁ§_˙f
->
debug_Àvñ
 >(
lvl
)Ë&& 
debug_h™dÀ
) \

87 
	`Ârötf
(
debug_h™dÀ
, (
f‹m©
), ##
¨gs
); \

88 } 0)

	)

95 
	#GET_TIMESTAMP
(
s1
Ë
	`ﬁ§_gëTime°amp
(s1)

	)

98 
	#TIME_DUE
(
s1
Ë
	`ﬁ§_gëTimeDue
(s1)

	)

101 
	#TIMED_OUT
(
s1
Ë
	`ﬁ§_isTimedOut
(s1)

	)

103 
	#ARRAYSIZE
(
x
Ë((x)/(*(x)))

	)

104 #i‚de‡
MAX


105 
	#MAX
(
x
,
y
Ë((xË> (yË? (xË: (y))

	)

107 #i‚de‡
MIN


108 
	#MIN
(
x
,
y
Ë((xË< (yË? (xË: (y))

	)

111 
	#INLINE
 
ölöe
 
	`__©åibuã__
((
Æways_ölöe
))

	)

120 
	#ARM_NOWARN_ALIGN
(
x
Ë((*)(x))

	)

121 
	#CONST_ARM_NOWARN_ALIGN
(
x
Ë((c⁄° *)(x))

	)

129 
INLINE
 *

130 
	$°rs˝y
(*
de°
, c⁄° *
§c
, 
size_t
 
size
)

132 
size_t
 
l
 = 0;

133 #i‡!
	`deföed
(
NODEBUG
Ë&& deföed(
DEBUG
)

134 i‡(
NULL
 =
de°
)

135 
	`Ârötf
(
°dîr
, "Warning: dest is NULL in strscpy!\n");

136 i‡(
NULL
 =
§c
)

137 
	`Ârötf
(
°dîr
, "Warning: src is NULL in strscpy!\n");

139 i‡(
NULL
 !
de°
 && NULL !
§c
) {

141 i‡(0 < 
size
--)

142 
l
 < 
size
 && 0 !
§c
[l])

143 
l
++;

144 
de°
[
l
] = 0;

146  
	`°∫˝y
(
de°
, 
§c
, 
l
);

147 
	}
}

149 
INLINE
 *

150 
	$°rsˇt
(*
de°
, c⁄° *
§c
, 
size_t
 
size
)

152 
size_t
 
l
 = 
	`°æí
(
de°
);

153  
	`°rs˝y
(
de°
 + 
l
, 
§c
, 
size
 >Ü ? size -Ü : 0);

154 
	}
}

162 
	#QUEUE_ELEM
(
¥e
, 
√w
) do { \

163 (
¥e
).
√xt
->
¥ev
 = (
√w
); \

164 (
√w
)->
√xt
 = (
¥e
).next; \

165 (
√w
)->
¥ev
 = &(
¥e
); \

166 (
¥e
).
√xt
 = (
√w
); \

167 } 0)

	)

169 
	#DEQUEUE_ELEM
(
ñem
) do { \

170 (
ñem
)->
¥ev
->
√xt
 = (elem)->next; \

171 (
ñem
)->
√xt
->
¥ev
 = (elem)->prev; \

172 } 0)

	)

174 
	#CLOSE
(
fd
Ëdÿ{ 
	`˛o£
(fd); (fdË-1; } 0)

	)

179 
ﬁ§d_c⁄fig
 *
ﬁ§_˙f
;

182 
uöt32_t
 
now_times
;

183 
ﬁ§_cookõ_öfo
 *
def_timî_ci
;

185 #i‡
deföed
 
WIN32


186 
boﬁ
 
ﬁ§_wö32_íd_ªque°
;

187 
boﬁ
 
ﬁ§_wö32_íd_Êag
;

196 
ùc_öô
();

199 
ùc_öput
();

202 
shutdown_ùc
();

204 
ùc_ouçut
(
ﬁ§
 *);

	@src/duplicate_handler.c

8 
	~"comm⁄/li°.h
"

9 
	~"defs.h
"

10 
	~"ùˇlc.h
"

11 
	~"log.h
"

12 
	~"ﬁ§.h
"

13 
	~"scheduÀr.h
"

14 
	~"du∂iˇã_h™dÀr.h
"

16 #i‚de‡
NO_DUPLICATE_DETECTION_HANDLER


18 
li°_node
 
	gdu∂iˇã_h™dÀr_hód
;

19 
uöt32_t
 
	g•am_‹ig_cou¡î
, 
	g•am_h«_cou¡î
, 
	g•am_mid_cou¡î
;

21 
timî_íåy
 *
	gdu∂iˇã_•am_timî
;

23 
h™dÀ_du∂iˇã_•am_timî
(
__©åibuã__
 ((
unu£d
)Ë*
no
) {

24 i‡(
	g•am_‹ig_cou¡î
 > 
	gMAX_SYSLOG_EACH_HOUR
) {

25 
ﬁ§_sy¶og
(
OLSR_LOG_INFO
, "Skù≥d %u origö©‹ du∂iˇã w¨nögs.", 
•am_‹ig_cou¡î
 - 
MAX_SYSLOG_EACH_HOUR
);

27 i‡(
	g•am_h«_cou¡î
 > 
	gMAX_SYSLOG_EACH_HOUR
) {

28 
ﬁ§_sy¶og
(
OLSR_LOG_INFO
, "Skù≥d %u h« du∂iˇã w¨nögs.", 
•am_h«_cou¡î
 - 
MAX_SYSLOG_EACH_HOUR
);

30 i‡(
	g•am_mid_cou¡î
 > 
	gMAX_SYSLOG_EACH_HOUR
) {

31 
ﬁ§_sy¶og
(
OLSR_LOG_INFO
, "Skù≥d %u mid du∂iˇã w¨nögs.", 
•am_mid_cou¡î
 - 
MAX_SYSLOG_EACH_HOUR
);

33 
	g•am_‹ig_cou¡î
 = 0;

34 
	g•am_h«_cou¡î
 = 0;

35 
	g•am_mid_cou¡î
 = 0;

39 
	$ﬁ§_du∂iˇã_h™dÀr_öô
() {

40 
	`li°_hód_öô
(&
du∂iˇã_h™dÀr_hód
);

42 
•am_‹ig_cou¡î
 = 0;

43 
•am_h«_cou¡î
 = 0;

44 
•am_mid_cou¡î
 = 0;

46 
	`ﬁ§_£t_timî
(&
du∂iˇã_•am_timî
, 3600*1000, 0, 
OLSR_TIMER_PERIODIC
,

47 &
h™dÀ_du∂iˇã_•am_timî
, 
NULL
, 0);

48 
	}
}

50 
	$ﬁ§_add_du∂iˇã_h™dÀr
(
du∂iˇã_h™dÀr
 *
h
) {

51 
	`li°_add_bef‹e
(&
du∂iˇã_h™dÀr_hód
, &
h
->
node
);

52 
	}
}

54 
	$ﬁ§_ªmove_du∂iˇã_h™dÀr
(
du∂iˇã_h™dÀr
 *
h
) {

55 
	`li°_ªmove
(&
h
->
node
);

56 
	}
}

58 
	$ﬁ§_ã°_‹igö©‹_cﬁlisi⁄
(
uöt8_t
 
msgTy≥
, 
uöt16_t
 
£qno
) {

59 
li°_node
 *
n
;

61 i‡(!
	`ﬁ§_is_bad_du∂iˇã_msg_£qno
(
£qno
)) {

65 i‡(++
•am_‹ig_cou¡î
 < 
MAX_SYSLOG_EACH_HOUR
) {

66 
ùaddr_°r
 
buf
;

68 
	`ﬁ§_sy¶og
(
OLSR_LOG_INFO
, "You might haveánotherÇode with main ip %s inÅhe mesh!",

69 
	`ﬁ§_ù_to_°rög
(&
buf
, &
ﬁ§_˙f
->
maö_addr
));

72 
n
=
du∂iˇã_h™dÀr_hód
.
√xt
;Ç != &duplicate_handler_head;Ç =Ç->next) {

73 
du∂iˇã_h™dÀr
 *
h
 = (du∂iˇã_h™dÀ∏*)
n
;

75 
h
->
	`‹igö©‹_cﬁlisi⁄
(
msgTy≥
);

77 
	}
}

79 
	$ﬁ§_h™dÀ_h«_cﬁlisi⁄
(
ﬁ§_ù_addr
 *
h«
, ﬁ§_ù_add∏*
‹ig
) {

80 
li°_node
 *
n
;

82 i‡(++
•am_h«_cou¡î
 < 
MAX_SYSLOG_EACH_HOUR
) {

83 
ùaddr_°r
 
buf1
, 
buf2
;

85 
	`ﬁ§_sy¶og
(
OLSR_LOG_INFO
, "Node %s isÖublishing your ip %sás HNA!",

86 
	`ﬁ§_ù_to_°rög
(&
buf1
, 
‹ig
), ol§_ù_to_°rög(&
buf2
, 
h«
));

89 
n
=
du∂iˇã_h™dÀr_hód
.
√xt
;Ç != &duplicate_handler_head;Ç =Ç->next) {

90 
du∂iˇã_h™dÀr
 *
h
 = (du∂iˇã_h™dÀ∏*)
n
;

92 
h
->
	`h«_cﬁlisi⁄
(
h«
, 
‹ig
);

94 
	}
}

96 
	$ﬁ§_h™dÀ_mid_cﬁlisi⁄
(
ﬁ§_ù_addr
 *
mid
, ﬁ§_ù_add∏*
‹ig
) {

97 
li°_node
 *
n
;

99 i‡(++
•am_mid_cou¡î
 < 
MAX_SYSLOG_EACH_HOUR
) {

100 
ùaddr_°r
 
buf1
, 
buf2
;

102 
	`ﬁ§_sy¶og
(
OLSR_LOG_INFO
, "Node %s isÖublishing your ip %sás MID!",

103 
	`ﬁ§_ù_to_°rög
(&
buf1
, 
‹ig
), ol§_ù_to_°rög(&
buf2
, 
mid
));

106 
n
=
du∂iˇã_h™dÀr_hód
.
√xt
;Ç != &duplicate_handler_head;Ç =Ç->next) {

107 
du∂iˇã_h™dÀr
 *
h
 = (du∂iˇã_h™dÀ∏*)
n
;

109 
h
->
	`mid_cﬁlisi⁄
(
mid
, 
‹ig
);

111 
	}
}

	@src/duplicate_handler.h

8 #i‚de‡
DUPLICATE_HANDLER_H_


9 
	#DUPLICATE_HANDLER_H_


	)

11 
	~"defs.h
"

12 
	~"ﬁ§.h
"

13 
	~"comm⁄/li°.h
"

15 #i‚de‡
NO_DUPLICATE_DETECTION_HANDLER


16 
	#MAX_SYSLOG_EACH_HOUR
 10

	)

18 
	sdu∂iˇã_h™dÀr
 {

19 
li°_node
 
	mnode
;

21 (*
	m‹igö©‹_cﬁlisi⁄
)(
uöt8_t
 
	mmsgTy≥
);

22 (*
	mh«_cﬁlisi⁄
)(
ﬁ§_ù_addr
 *
	mh«
, ﬁ§_ù_add∏*
	m‹ig
);

23 (*
	mmid_cﬁlisi⁄
)(
ﬁ§_ù_addr
 *
	mmid
, ﬁ§_ù_add∏*
	m‹ig
);

26 
ﬁ§_du∂iˇã_h™dÀr_öô
();

28 
ﬁ§_add_du∂iˇã_h™dÀr
(
du∂iˇã_h™dÀr
 *);

29 
ﬁ§_ªmove_du∂iˇã_h™dÀr
(
du∂iˇã_h™dÀr
 *);

31 
ﬁ§_ã°_‹igö©‹_cﬁlisi⁄
(
uöt8_t
 
msgTy≥
, 
uöt16_t
 
£qno
);

32 
ﬁ§_h™dÀ_h«_cﬁlisi⁄
(
ﬁ§_ù_addr
 *
h«
, ﬁ§_ù_add∏*
‹ig
);

33 
ﬁ§_h™dÀ_mid_cﬁlisi⁄
(
ﬁ§_ù_addr
 *
mid
, ﬁ§_ù_add∏*
‹ig
);

	@src/duplicate_set.c

42 
	~"du∂iˇã_£t.h
"

43 
	~"ùˇlc.h
"

44 
	~"comm⁄/avl.h
"

45 
	~"ﬁ§.h
"

46 
	~"mid_£t.h
"

47 
	~"scheduÀr.h
"

48 
	~"m™tisß.h
"

50 
ﬁ§_˛ónup_du∂iˇã_íåy
(*
unu£d
);

52 
avl_åì
 
	gdu∂iˇã_£t
;

53 
timî_íåy
 *
	gdu∂iˇã_˛ónup_timî
;

56 
	$ﬁ§_öô_du∂iˇã_£t
()

58 
	`avl_öô
(&
du∂iˇã_£t
, 
ﬁ§_˙f
->
ù_vîsi⁄
 =
AF_INET
 ? &
avl_comp_ùv4
 : &
avl_comp_ùv6
);

60 
	`ﬁ§_£t_timî
(&
du∂iˇã_˛ónup_timî
, 
DUPLICATE_CLEANUP_INTERVAL
, 
DUPLICATE_CLEANUP_JITTER
, 
OLSR_TIMER_PERIODIC
,

61 &
ﬁ§_˛ónup_du∂iˇã_íåy
, 
NULL
, 0);

62 
	}
}

64 
	$ﬁ§_˛ónup_du∂iˇãs
(
ﬁ§_ù_addr
 *
‹ig
) {

65 
dup_íåy
 *
íåy
;

67 
íåy
 = (
dup_íåy
 *)
	`avl_föd
(&
du∂iˇã_£t
, 
‹ig
);

68 i‡(
íåy
 !
NULL
) {

69 
íåy
->
too_low_cou¡î
 = 
DUP_MAX_TOO_LOW
 - 2;

71 
	}
}

73 
dup_íåy
 *

74 
	$ﬁ§_¸óã_du∂iˇã_íåy
(*
ù
, 
uöt16_t
 
£qƒ
)

76 
dup_íåy
 *
íåy
;

77 
íåy
 = 
	`ﬁ§_mÆloc
((
dup_íåy
), "New duplicateÉntry");

78 i‡(
íåy
 !
NULL
) {

79 
	`mem˝y
(&
íåy
->
ù
, ip, 
ﬁ§_˙f
->
ù_vîsi⁄
 =
AF_INET
 ? ”¡ry->ù.
v4
Ë: ”¡ry->ù.
v6
));

80 
íåy
->
£qƒ
 = seqnr;

81 
íåy
->
too_low_cou¡î
 = 0;

82 
íåy
->
avl
.
key
 = &íåy->
ù
;

83 
íåy
->
¨øy
 = 0;

85  
íåy
;

86 
	}
}

89 
ﬁ§_˛ónup_du∂iˇã_íåy
(
__©åibuã__
 ((
unu£d
)) * unused)

91 
dup_íåy
 *
	gíåy
;

93 
OLSR_FOR_ALL_DUP_ENTRIES
(
íåy
) {

94 i‡(
TIMED_OUT
(
íåy
->
vÆid_u¡û
)) {

95 
avl_dñëe
(&
du∂iˇã_£t
, &
íåy
->
avl
);

96 
‰ì
(
íåy
);

99 
OLSR_FOR_ALL_DUP_ENTRIES_END
(
íåy
);

102 
	$ﬁ§_£qno_diff
(
uöt16_t
 
£qno1
, uöt16_à
£qno2
) {

103 
diff
 = ()
£qno1
 - ()(
£qno2
);

106 i‡(
diff
 > (1 << 15)) {

107 
diff
 -= (1 << 16);

109 i‡(
diff
 < -(1 << 15)) {

110 
diff
 += (1 << 16);

112  
diff
;

113 
	}
}

116 
	$ﬁ§_mesßge_is_du∂iˇã
(
ﬁ§_mesßge
 *
m
)

118 
dup_íåy
 *
íåy
;

119 
diff
;

120 *
maöIp
;

121 
uöt32_t
 
vÆid_u¡û
;

122 
ùaddr_°r
 
buf
;

123 
uöt16_t
 
£qƒ
;

124 *
ù
;

126 i‡(
ﬁ§_˙f
->
ù_vîsi⁄
 =
AF_INET
) {

127 
£qƒ
 = 
	`¡ohs
(
m
->
v4
.
£qno
);

128 
ù
 = &
m
->
v4
.
‹igö©‹
;

130 
£qƒ
 = 
	`¡ohs
(
m
->
v6
.
£qno
);

131 
ù
 = &
m
->
v6
.
‹igö©‹
;

135 
maöIp
 = 
	`mid_lookup_maö_addr
(
ù
);

136 i‡(
maöIp
 =
NULL
) {

137 
maöIp
 = 
ù
;

140 
vÆid_u¡û
 = 
	`GET_TIMESTAMP
(
DUPLICATE_VTIME
);

142 
íåy
 = (
dup_íåy
 *)
	`avl_föd
(&
du∂iˇã_£t
, 
ù
);

143 i‡(
íåy
 =
NULL
) {

144 
íåy
 = 
	`ﬁ§_¸óã_du∂iˇã_íåy
(
ù
, 
£qƒ
);

145 i‡(
íåy
 !
NULL
) {

146 
	`avl_ö£π
(&
du∂iˇã_£t
, &
íåy
->
avl
, 0);

147 
íåy
->
vÆid_u¡û
 = valid_until;

149  
Ál£
;

154 i‡(
vÆid_u¡û
 > 
íåy
->valid_until) {

155 
íåy
->
vÆid_u¡û
 = valid_until;

158 
diff
 = 
	`ﬁ§_£qno_diff
(
£qƒ
, 
íåy
->seqnr);

159 i‡(
diff
 < -31) {

160 
íåy
->
too_low_cou¡î
++;

163 i‡(
íåy
->
too_low_cou¡î
 > 
DUP_MAX_TOO_LOW
) {

164 
íåy
->
too_low_cou¡î
 = 0;

165 
íåy
->
£qƒ
 = seqnr;

166 
íåy
->
¨øy
 = 1;

167  
Ál£
;

169 
	`OLSR_PRINTF
(9, "blocked 0x%x from %s\n", 
£qƒ
, 
	`ﬁ§_ù_to_°rög
(&
buf
, 
maöIp
));

170  
åue
;

173 
íåy
->
too_low_cou¡î
 = 0;

174 i‡(
diff
 <= 0) {

175 
uöt32_t
 
bômask
 = 1 << ((uöt32_tË(-
diff
));

177 i‡((
íåy
->
¨øy
 & 
bômask
) != 0) {

178 
	`OLSR_PRINTF
(9, "blocked 0x%x (diff=%d,mask=%08xË‰om %s\n", 
£qƒ
, 
diff
, 
íåy
->
¨øy
, 
	`ﬁ§_ù_to_°rög
(&
buf
, 
maöIp
));

179  
åue
;

181 
íåy
->
¨øy
 |
bômask
;

182 
	`OLSR_PRINTF
(9, "¥o˚s£d 0x%x from %s\n", 
£qƒ
, 
	`ﬁ§_ù_to_°rög
(&
buf
, 
maöIp
));

183  
Ál£
;

184 } i‡(
diff
 < 32) {

185 
íåy
->
¨øy
 <<(
uöt32_t
Ë
diff
;

187 
íåy
->
¨øy
 = 0;

189 
íåy
->
¨øy
 |= 1;

190 
íåy
->
£qƒ
 = seqnr;

191 
	`OLSR_PRINTF
(9, "¥o˚s£d 0x%x from %s\n", 
£qƒ
, 
	`ﬁ§_ù_to_°rög
(&
buf
, 
maöIp
));

192  
Ál£
;

193 
	}
}

196 
	$ﬁ§_¥öt_du∂iˇã_èbÀ
()

198 #i‚de‡
NODEBUG


200 
dup_íåy
 *
íåy
;

201 c⁄° 
ùwidth
 = 
ﬁ§_˙f
->
ù_vîsi⁄
 =
AF_INET
 ? 15 : 30;

202 
ùaddr_°r
 
addrbuf
;

204 
	`OLSR_PRINTF
(1, "\n--- %s ------------------------------------------------- DUPLICATE SET\n\n" "%-*s %8s %s\n",

205 
	`ﬁ§_wÆl˛ock_°rög
(), 
ùwidth
, "Node IP", "DupArray", "VTime");

207 
	`OLSR_FOR_ALL_DUP_ENTRIES
(
íåy
) {

208 
	`OLSR_PRINTF
(1, "%-*†%08x %s\n", 
ùwidth
, 
	`ﬁ§_ù_to_°rög
(&
addrbuf
, (
ﬁ§_ù_addr
 *)(
íåy
->
avl
.
key
)),

209 
íåy
->
¨øy
, 
	`ﬁ§_˛ock_°rög
”¡ry->
vÆid_u¡û
));

210 } 
	`OLSR_FOR_ALL_DUP_ENTRIES_END
(
íåy
);

212 
	}
}

	@src/duplicate_set.h

42 #i‚de‡
DUPLICATE_SET_2_H_


43 
	#DUPLICATE_SET_2_H_


	)

45 
	~"defs.h
"

46 
	~"ﬁ§.h
"

47 
	~"m™tisß.h
"

48 
	~"comm⁄/avl.h
"

50 
	#DUPLICATE_CLEANUP_INTERVAL
 15000

	)

51 
	#DUPLICATE_CLEANUP_JITTER
 25

	)

52 
	#DUPLICATE_VTIME
 120000

	)

53 
	#DUP_MAX_TOO_LOW
 16

	)

55 
	sdup_íåy
 {

56 
avl_node
 
	mavl
;

57 
ﬁ§_ù_addr
 
	mù
;

58 
uöt16_t
 
	m£qƒ
;

59 
uöt16_t
 
	mtoo_low_cou¡î
;

60 
uöt32_t
 
	m¨øy
;

61 
uöt32_t
 
	mvÆid_u¡û
;

64 
AVLNODE2STRUCT
(
du±ªe2du≥¡ry
, 
dup_íåy
, 
avl
);

66 
ﬁ§_öô_du∂iˇã_£t
();

67 
ﬁ§_˛ónup_du∂iˇãs
(
ﬁ§_ù_addr
 *
‹ig
);

68 
dup_íåy
 *
ﬁ§_¸óã_du∂iˇã_íåy
(*
ù
, 
uöt16_t
 
£qƒ
);

69 
ﬁ§_£qno_diff
(
uöt16_t
 
£qno1
, uöt16_à
£qno2
);

70 
ﬁ§_mesßge_is_du∂iˇã
(
ﬁ§_mesßge
 *
m
);

71 
ﬁ§_¥öt_du∂iˇã_èbÀ
();

73 
	#OLSR_FOR_ALL_DUP_ENTRIES
(
dup
) \

75 
avl_node
 *
dup_åì_node
, *
√xt_dup_åì_node
; \

76 
dup_åì_node
 = 
	`avl_wÆk_fú°
(&
du∂iˇã_£t
); \

77 
dup_åì_node
; dup_åì_nodê
√xt_dup_åì_node
) { \

78 
√xt_dup_åì_node
 = 
	`avl_wÆk_√xt
(
dup_åì_node
); \

79 
dup
 = 
	`du±ªe2du≥¡ry
(
dup_åì_node
);

	)

80 
	#OLSR_FOR_ALL_DUP_ENTRIES_END
(
dup
Ë}}

	)

	@src/fpm.c

42 
	~<°dio.h
>

43 
	~<as£π.h
>

44 
	~"Âm.h
"

46 #ifde‡
USE_FPM


48 #i‚de‡
NDEBUG


50 
Âm


51 
	$ôoÂm
(
sÂm
 
i
)

53 
	`as£π
(
FPM_MIN
 <
i
 && i <
FPM_MAX
);

54  
	`ôoÂm_def
(
i
);

55 
	}
}

57 
Âm


58 
	$·oÂm
(
f
)

60 
Âm
 
r
;

61 
	`as£π
(
FPM_MIN
 <(
sÂm
Ë
f
 && (sÂmË‡<
FPM_MAX
);

62 
r
 = (
Âm
Ë(
sÂm
Ë
	`·oÂm_def
(
f
);

63  
r
;

64 
	}
}

67 
	$Âmtoi
(
Âm
 
a
)

69 
r
 = 
	`Âmtoi_def
((
sÂm
Ë
a
);

70  
r
;

71 
	}
}

74 
	$Âmtof
(
Âm
 
a
)

76 
r
 = 
	`Âmtof_def
((
sÂm
Ë
a
);

77  
r
;

78 
	}
}

80 
Âm


81 
	$Âmadd
(
Âm
 
a
, fpm 
b
)

83 
Âm
 
r
;

84 
	`as£π
(0 > (
sÂm
Ë
a
 || 0 > (sÂmË
b
 || 
FPM_INT_MAX
 - (sfpm)á >= (sfpm) b);

85 
	`as£π
(0 <(
sÂm
Ë
a
 || 0 <(sÂmË
b
 || (sÂmË®>
FPM_INT_MIN
 - (sfpm) b);

86 
r
 = (
Âm
Ë
	`Âmadd_def
((
sÂm
Ë
a
, (sÂmË
b
);

87  
r
;

88 
	}
}

90 
Âm


91 
	$Âmsub
(
Âm
 
a
, fpm 
b
)

93 
Âm
 
r
;

94 
	`as£π
(0 > (
sÂm
Ë
a
 || 0 <(sÂmË
b
 || (sÂmË®< 
FPM_INT_MAX
 + (sfpm) b);

95 
	`as£π
(0 <(
sÂm
Ë
a
 || 0 > (sÂmË
b
 || (sÂmË®>
FPM_INT_MIN
 + (sfpm) b);

96 
r
 = (
Âm
Ë
	`Âmsub_def
((
sÂm
Ë
a
, (sÂmË
b
);

97  
r
;

98 
	}
}

100 
Âm


101 
	$Âmmul
(
Âm
 
a
, fpm 
b
)

103 
Âm
 
r
;

104 
	`as£π
((0 < (
sÂm
Ë
a
Ë!(0 < (sÂmË
b
Ë|| (()(sÂmËaË* (()(sÂmËbË<()
FPM_INT_MAX
);

105 
	`as£π
((0 < (
sÂm
Ë
a
Ë=(0 < (sÂmË
b
Ë|| (()(sÂmËaË* (()(sÂmËbË>()
FPM_INT_MIN
);

106 
r
 = (
Âm
Ë
	`Âmmul_def
((
sÂm
Ë
a
, (sÂmË
b
);

107  
r
;

108 
	}
}

110 
Âm


111 
	$Âmdiv
(
Âm
 
a
, fpm 
b
)

113 
Âm
 
r
;

114 
	`as£π
(
FPM_INT_MIN
 <(()(
sÂm
Ë
a
 << 
FPM_BIT
Ë&& (()(sÂmË®<< FPM_BITË<
FPM_INT_MAX
);

115 
r
 = (
Âm
Ë
	`Âmdiv_def
((
sÂm
Ë
a
, (sÂmË
b
);

116  
r
;

117 
	}
}

119 
Âm


120 
	$Âmimul
(
a
, 
Âm
 
b
)

122 
Âm
 
r
;

123 
	`as£π
((0 < 
a
Ë!(0 < (
sÂm
Ë
b
Ë|| ((Ô * ()(sÂmËbË<()
FPM_INT_MAX
);

124 
	`as£π
((0 < 
a
Ë=(0 < (
sÂm
Ë
b
Ë|| ((Ô * ()(sÂmËbË>()
FPM_INT_MIN
);

125 
r
 = (
Âm
Ë
	`Âmimul_def
(
a
, (
sÂm
Ë
b
);

126  
r
;

127 
	}
}

129 
Âm


130 
	$Âmmuli
(
Âm
 
a
, 
b
)

132 
Âm
 
r
;

133 
	`as£π
((0 < (
sÂm
Ë
a
Ë!(0 < 
b
Ë|| (()(sÂmË®* ()bË<()
FPM_INT_MAX
);

134 
	`as£π
((0 < (
sÂm
Ë
a
Ë=(0 < 
b
Ë|| (()(sÂmË®* ()bË>()
FPM_INT_MIN
);

135 
r
 = (
Âm
Ë
	`Âmmuli_def
((
sÂm
Ë
a
, 
b
);

136  
r
;

137 
	}
}

139 
Âm


140 
	$Âmidiv
(
Âm
 
a
, 
b
)

142 
Âm
 
r
;

143 
r
 = (
Âm
Ë
	`Âmidiv_def
((
sÂm
Ë
a
, 
b
);

144  
r
;

145 
	}
}

148 
Âm


149 
	$Âmlmul
(
Âm
 
a
, fpm 
b
)

151 
Âm
 
r
;

152 
	`as£π
((0 < (
sÂm
Ë
a
Ë!(0 < (sÂmË
b
Ë|| (()(sÂmË®* ()(sÂmËb / 
FPM_NUM
Ë<()
FPM_INT_MAX
);

153 
	`as£π
((0 < (
sÂm
Ë
a
Ë=(0 < (sÂmË
b
Ë|| (()(sÂmË®* ()(sÂmËb / 
FPM_NUM
Ë>()
FPM_INT_MIN
);

154 
r
 = (
Âm
Ë
	`Âmlmul_def
((
sÂm
Ë
a
, (sÂmË
b
);

155  
r
;

156 
	}
}

158 
Âm


159 
	$Âmldiv
(
Âm
 
a
, fpm 
b
)

161 
Âm
 
r
;

162 
r
 = (
Âm
Ë
	`Âmldiv_def
((
sÂm
Ë
a
, (sÂmË
b
);

163  
r
;

164 
	}
}

169 
Âm


170 
	$©oÂm
(c⁄° *
s
)

172 
r
 = 0.0;

173 
	`ssˇnf
(
s
, "%f", &
r
);

174  
	`·oÂm
(
r
);

175 
	}
}

178 
	$Âmtﬂ
(
Âm
 
a
)

180 
idx
 = 0;

181 
ªt
[4][20];

183 
idx
 = (idx + 1Ë% ((
ªt
) / (ret[0]));

184 
	`¢¥ötf
(
ªt
[
idx
], ‘ë[0]), "%ld.%03ld", (
sÂm
Ë
a
 >> 
FPM_BIT
, (1000 * ((sÂmË◊Ë& 
FPM_MSK
Ë+ (
FPM_NUM
 / 2)) >> FPM_BIT);

185  
ªt
[
idx
];

186 
	}
}

191 
	$©oÂm
(c⁄° *
s
)

193 
r
 = 0.0;

194 
	`ssˇnf
(
s
, "%f", &
r
);

195  
r
;

196 
	}
}

199 
	$Âmtﬂ
(
a
)

201 
idx
 = 0;

202 
ªt
[4][20];

204 
idx
 = (idx + 1Ë% ((
ªt
) / (ret[0]));

205 
	`¢¥ötf
(
ªt
[
idx
], ‘ë[0]), "%.3f", 
a
);

206  
ªt
[
idx
];

207 
	}
}

	@src/fpm.h

42 #i‚de‡
_FPM_H


43 
	#_FPM_H


	)

45 #ifde‡
USE_FPM


53 *
	tÂm
;

54 sig√d 
	tsÂm
;

55 
	tuÂm
;

56 
	#FPM_BIT
 12

	)

63 
	tÂm
;

64 sig√d 
	tsÂm
;

65 
	tuÂm
;

66 
	#FPM_BIT
 24

	)

73 
	tÂm
;

74 sig√d 
	tsÂm
;

75 
	tuÂm
;

76 
	#FPM_BIT
 10

	)

80 
	#FPM_NUM
 (1 << 
FPM_BIT
)

	)

81 
	#FPM_MSK
 (
FPM_NUM
 - 1)

	)

82 
	#FPM_MAX
 ((
sÂm
)(~(
uÂm
)0 >> 1Ë>> 
FPM_BIT
)

	)

83 
	#FPM_MIN
 ((
sÂm
)-1 - 
FPM_MAX
)

	)

84 
	#FPM_INT_MAX
 ((
sÂm
)(~(
uÂm
)0 >> 1))

	)

85 
	#FPM_INT_MIN
 ((
sÂm
)-1 - 
FPM_INT_MAX
)

	)

87 
	#ôoÂm_def
(
a
Ë(
Âm
)((
sÂm
)(◊Ë<< 
FPM_BIT
))

	)

88 
	#·oÂm_def
(
a
Ë(
Âm
)((
sÂm
)(◊Ë* 
FPM_NUM
))

	)

89 
	#Âmtoi_def
(
a
Ë()((
sÂm
)◊Ë>> 
FPM_BIT
)

	)

90 
	#Âmtof_def
(
a
Ë(()(
sÂm
)◊Ë/ 
FPM_NUM
)

	)

92 
	#Âmadd_def
(
a
, 
b
Ë(
Âm
)((
sÂm
)◊Ë+ (sÂm)(b))

	)

93 
	#Âmsub_def
(
a
, 
b
Ë(
Âm
)((
sÂm
)◊Ë- (sÂm)(b))

	)

94 
	#Âmmul_def
(
a
, 
b
Ë(
Âm
)(((
sÂm
)◊Ë* (sÂm)(b)Ë>> 
FPM_BIT
)

	)

95 
	#Âmdiv_def
(
a
, 
b
Ë(
Âm
)(((
sÂm
)◊Ë<< 
FPM_BIT
Ë/ (sÂm)(b))

	)

100 
	#Âmimul_def
(
a
, 
b
Ë(
Âm
)(()◊Ë* (
sÂm
)(b))

	)

101 
	#Âmmuli_def
(
a
, 
b
Ë(
Âm
)((
sÂm
)◊Ë* ()(b))

	)

106 
	#Âmidiv_def
(
a
, 
b
Ë(
Âm
)((
sÂm
)◊Ë/ ()(b))

	)

113 
	#Âmlmul_def
(
a
, 
b
Ë(
sÂm
)((()◊Ë* (b)Ë>> 
FPM_BIT
)

	)

114 
	#Âmldiv_def
(
a
, 
b
Ë(
sÂm
)((()◊Ë<< 
FPM_BIT
Ë/ (b))

	)

117 #ifde‡
NDEBUG


119 
	#ôoÂm
 
ôoÂm_def


	)

120 
	#·oÂm
 
·oÂm_def


	)

121 
	#Âmtoi
 
Âmtoi_def


	)

122 
	#Âmtof
 
Âmtof_def


	)

124 
	#Âmadd
 
Âmadd_def


	)

125 
	#Âmsub
 
Âmsub_def


	)

126 
	#Âmmul
 
Âmmul_def


	)

127 
	#Âmdiv
 
Âmdiv_def


	)

128 
	#Âmimul
 
Âmimul_def


	)

129 
	#Âmmuli
 
Âmmuli_def


	)

130 
	#Âmidiv
 
Âmidiv_def


	)

133 
	#Âmlmul
 
Âmlmul_def


	)

134 
	#Âmldiv
 
Âmldiv_def


	)

139 
Âm
 
ôoÂm
(
sÂm
 
i
);

140 
Âm
 
·oÂm
(
f
);

141 
Âmtoi
(
Âm
 
a
);

142 
Âmtof
(
Âm
 
a
);

144 
Âm
 
Âmadd
(Âm 
a
, fpm 
b
);

145 
Âm
 
Âmsub
(Âm 
a
, fpm 
b
);

146 
Âm
 
Âmmul
(Âm 
a
, fpm 
b
);

147 
Âm
 
Âmdiv
(Âm 
a
, fpm 
b
);

148 
Âm
 
Âmimul
(
a
, fpm 
b
);

149 
Âm
 
Âmmuli
(Âm 
a
, 
b
);

150 
Âm
 
Âmidiv
(Âm 
a
, 
b
);

153 
Âm
 
Âmlmul
(Âm 
a
, fpm 
b
);

154 
Âm
 
Âmldiv
(Âm 
a
, fpm 
b
);

159 
	#INFINITE_ETX
 
	`ôoÂm
(
FPM_MAX
)

	)

160 
	#MIN_LINK_QUALITY
 
	`·oÂm
(0.01)

	)

161 
	#ZERO_ETX
 
	`ôoÂm
(0)

	)

162 
	#CEIL_LQDIFF
 
	`·oÂm
(1.1)

	)

163 
	#FLOOR_LQDIFF
 
	`·oÂm
(0.9)

	)

165 
Âm
 
©oÂm
(const *);

166 c⁄° *
Âmtﬂ
(
Âm
);

170 
	#INFINITE_ETX
 (()(1 << 30))

	)

171 
	#ZERO_ETX
 0.0

	)

172 
	#MIN_LINK_QUALITY
 0.01

	)

173 
	#CEIL_LQDIFF
 1.1

	)

174 
	#FLOOR_LQDIFF
 0.9

	)

176 
©oÂm
(const *);

177 c⁄° *
Âmtﬂ
();

	@src/gateway.c

8 
	~"comm⁄/avl.h
"

9 
	~"defs.h
"

10 
	~"ùˇlc.h
"

11 
	~"ﬁ§.h
"

12 
	~"ﬁ§_cfg.h
"

13 
	~"ﬁ§_cookõ.h
"

14 
	~"scheduÀr.h
"

15 
	~"kî√l_rouãs.h
"

16 
	~"kî√l_tu¬ñ.h
"

17 
	~"√t_os.h
"

18 
	~"du∂iˇã_£t.h
"

19 
	~"log.h
"

20 
	~"g©eway_deÁu…_h™dÀr.h
"

21 
	~"g©eway.h
"

23 
	~<as£π.h
>

24 
	~<√t/if.h
>

26 #ifde‡
LINUX_NETLINK_ROUTING


27 
avl_åì
 
	gg©eway_åì
;

29 
ﬁ§_cookõ_öfo
 *
	ggw_mem_cookõ
 = 
NULL
;

30 
uöt8_t
 
	gsm¨t_g©eway_√tmask
[(
ﬁ§_ù_addr
)];

31 
g©eway_íåy
 *
	gcuºít_ùv4_gw
, *
	gcuºít_ùv6_gw
;

32 
ﬁ§_gw_h™dÀr
 *
	ggw_h™dÀr
;

34 
ﬁ§_ùtu¬ñ_íåy
 *
	gv4gw_tu¬ñ
, *
	gv6gw_tu¬ñ
;

35 
boﬁ
 
	gv4gw_choo£n_exã∫Æ
, 
	gv6gw_choo£n_exã∫Æ
;

43 
uöt32_t


44 
	$de£rülize_gw_•ìd
(
uöt8_t
 
vÆue
) {

45 
uöt32_t
 
•ìd
, 
exp
;

47 
•ìd
 = (
vÆue
 >> 3)+1;

48 
exp
 = 
vÆue
 & 7;

49 
exp
-- > 0) {

50 
•ìd
 *= 10;

52  
•ìd
;

53 
	}
}

61 
uöt8_t


62 
	$£rülize_gw_•ìd
(
uöt32_t
 
•ìd
) {

63 
uöt8_t
 
exp
 = 0;

65 i‡(
•ìd
 == 0 || speed > 320000000) {

69 
•ìd
 > 32 || (speed % 10) == 0) {

70 
•ìd
 /= 10;

71 
exp
 ++;

73  ((
•ìd
-1Ë<< 3Ë| 
exp
;

74 
	}
}

83 
sm¨tgw_tu¬ñ_m⁄ô‹
 (
if_ödex
 
__©åibuã__
 ((
unu£d
)),

84 
öãrÁ˚
 *
ifh
 
__©åibuã__
 ((
unu£d
)),

85 
ﬁ§_ifchg_Êag
 
Êag
 
__©åibuã__
 ((
unu£d
))) {

93 
	$ﬁ§_öô_g©eways
() {

94 
gw_mem_cookõ
 = 
	`ﬁ§_Æloc_cookõ
("G©eway cookõ", 
OLSR_COOKIE_TYPE_MEMORY
);

95 
	`ﬁ§_cookõ_£t_mem‹y_size
(
gw_mem_cookõ
, (
g©eway_íåy
));

97 
	`avl_öô
(&
g©eway_åì
, 
avl_comp_deÁu…
);

98 
cuºít_ùv4_gw
 = 
NULL
;

99 
cuºít_ùv6_gw
 = 
NULL
;

101 
v4gw_tu¬ñ
 = 
NULL
;

102 
v6gw_tu¬ñ
 = 
NULL
;

104 
	`ª‰esh_sm¨tgw_√tmask
();

106 i‡(
	`ﬁ§_os_öô_ùtu¬ñ
()) {

110 
	`ﬁ§_add_ifch™ge_h™dÀr
(
sm¨tgw_tu¬ñ_m⁄ô‹
);

116 
	`ﬁ§_gw_deÁu…_öô
();

118 
	}
}

120 
	$ª‰esh_sm¨tgw_√tmask
() {

121 
uöt8_t
 *
ù
;

122 
	`mem£t
(&
sm¨t_g©eway_√tmask
, 0, (smart_gateway_netmask));

124 i‡(
ﬁ§_˙f
->
sm¨t_gw_a˘ive
) {

125 
ﬁ§_ù_addr
 
gw_√t
;

126 
	`mem£t
(&
gw_√t
, 0, (gw_net));

128 
ù
 = (
uöt8_t
 *Ë&
sm¨t_g©eway_√tmask
;

130 i‡(
ﬁ§_˙f
->
sm¨t_gw_u∂ök
 > 0 || ol§_˙f->
sm¨t_gw_dow∆ök
 > 0) {

131 
ù
[
GW_HNA_FLAGS
] |
GW_HNA_FLAG_LINKSPEED
;

132 
ù
[
GW_HNA_DOWNLINK
] = 
	`£rülize_gw_•ìd
(
ﬁ§_˙f
->
sm¨t_gw_dow∆ök
);

133 
ù
[
GW_HNA_UPLINK
] = 
	`£rülize_gw_•ìd
(
ﬁ§_˙f
->
sm¨t_gw_u∂ök
);

135 i‡(
ﬁ§_˙f
->
ù_vîsi⁄
 =
AF_INET6
 && ol§_˙f->
sm¨t_gw_¥efix
.
¥efix_Àn
 > 0) {

136 
ù
[
GW_HNA_FLAGS
] |
GW_HNA_FLAG_IPV6PREFIX
;

137 
ù
[
GW_HNA_V6PREFIXLEN
] = 
ﬁ§_˙f
->
sm¨t_gw_¥efix
.
¥efix_Àn
;

138 
	`mem˝y
(&
ù
[
GW_HNA_V6PREFIX
], &
ﬁ§_˙f
->
sm¨t_gw_¥efix
.
¥efix
, 8);

141 
	}
}

146 
	$ﬁ§_˛ónup_g©eways
() {

147 i‡(
cuºít_ùv4_gw
) {

148 
	`ﬁ§_os_dñ_ùù_tu¬ñ
(
v4gw_tu¬ñ
);

150 i‡(
cuºít_ùv6_gw
) {

151 
	`ﬁ§_os_dñ_ùù_tu¬ñ
(
v6gw_tu¬ñ
);

154 
	`ﬁ§_ªmove_ifch™ge_h™dÀr
(
sm¨tgw_tu¬ñ_m⁄ô‹
);

155 
	`ﬁ§_os_˛ónup_ùtu¬ñ
();

156 
	}
}

163 
	$ﬁ§_åiggî_öëgw_°¨tup
() {

164 
gw_h™dÀr
->
	`h™dÀ_°¨tup
();

165 
	}
}

174 
	$ﬁ§_åiggî_öëgw_£À˘i⁄
(
boﬁ
 
ùv4
, boﬁ 
ùv6
) {

175 
gw_h™dÀr
->
	`£À˘_g©eway
(
ùv4
, 
ùv6
);

176  ((
ùv4
 && 
cuºít_ùv4_gw
 =
NULL
Ë|| (
ùv6
 && 
cuºít_ùv6_gw
 == NULL)) ? -1 : 0;

177 
	}
}

183 
	$ﬁ§_åiggî_g©ewayloss_check
() {

184 
tc_íåy
 *
tc
;

185 
boﬁ
 
ùv4
 = 
Ál£
, 
ùv6
 = false;

186 i‡(
cuºít_ùv4_gw
) {

187 
tc
 = 
	`ﬁ§_lookup_tc_íåy
(&
cuºít_ùv4_gw
->
‹igö©‹
);

188 i‡(
tc
 =
NULL
 ||Åc->
∑th_co°
 =
ROUTE_COST_BROKEN
) {

189 
ùv4
 = 
åue
;

192 i‡(
cuºít_ùv6_gw
) {

193 
tc
 = 
	`ﬁ§_lookup_tc_íåy
(&
cuºít_ùv6_gw
->
‹igö©‹
);

194 i‡(
tc
 =
NULL
 ||Åc->
∑th_co°
 =
ROUTE_COST_BROKEN
) {

195 
ùv6
 = 
åue
;

198 i‡(
ùv4
 || 
ùv6
) {

199 
	`ﬁ§_åiggî_öëgw_£À˘i⁄
(
ùv4
, 
ùv6
);

201 
	}
}

208 
	$ﬁ§_£t_öëgw_h™dÀr
(
ﬁ§_gw_h™dÀr
 *
h
) {

209 
gw_h™dÀr
 = 
h
;

210 
	}
}

224 
boﬁ


225 
	$ﬁ§_£t_öë_g©eway
(
ﬁ§_ù_addr
 *
‹igö©‹
, 
boﬁ
 
ùv4
, boﬁ 
ùv6
, boﬁ 
exã∫Æ
) {

226 
g©eway_íåy
 *
íåy
, *
ﬁdV4
, *
ﬁdV6
;

227 
ﬁ§_ùtu¬ñ_íåy
 *
tu¬ñV4
, *
tu¬ñV6
;

229 
ﬁdV4
 = 
cuºít_ùv4_gw
;

230 
ﬁdV6
 = 
cuºít_ùv6_gw
;

231 
tu¬ñV4
 = 
v4gw_tu¬ñ
;

232 
tu¬ñV6
 = 
v6gw_tu¬ñ
;

234 
ùv4
 = ipv4 && (
ﬁ§_˙f
->
ù_vîsi⁄
 =
AF_INET
 || ol§_˙f->
u£_niô
);

235 
ùv6
 = ipv6 && (
ﬁ§_˙f
->
ù_vîsi⁄
 =
AF_INET6
);

237 i‡(
ùv4
) {

238 
cuºít_ùv4_gw
 = 
NULL
;

240 i‡(
ùv6
) {

241 
cuºít_ùv6_gw
 = 
NULL
;

244 
íåy
 = 
	`ﬁ§_föd_g©eway_íåy
(
‹igö©‹
);

245 i‡(
íåy
 !
NULL
) {

246 i‡(
ùv4
 && 
íåy
 !
cuºít_ùv4_gw
 &&Éntry->ipv4

247 && (!
íåy
->
ùv4«t
 || 
ﬁ§_˙f
->
sm¨t_gw_Ælow_«t
)) {

249 
cuºít_ùv4_gw
 = 
íåy
;

251 i‡(
ùv6
 && 
íåy
 !
cuºít_ùv6_gw
 &&Éntry->ipv6) {

253 
cuºít_ùv6_gw
 = 
íåy
;

258 i‡(
ﬁdV4
 !
cuºít_ùv4_gw
) {

259 i‡((
v4gw_tu¬ñ
 = 
	`ﬁ§_os_add_ùù_tu¬ñ
(&
cuºít_ùv4_gw
->
‹igö©‹
, 
åue
)Ë!
NULL
) {

260 
	`ﬁ§_os_öëgw_tu¬ñ_rouã
(
v4gw_tu¬ñ
->
if_ödex
, 
åue
,Årue);

261 
v4gw_choo£n_exã∫Æ
 = 
exã∫Æ
;

265 
cuºít_ùv4_gw
 = 
NULL
;

267 i‡(
ﬁdV4
 !
NULL
) {

268 
	`ﬁ§_os_dñ_ùù_tu¬ñ
(
tu¬ñV4
);

272 i‡(
ﬁdV6
 !
cuºít_ùv6_gw
) {

273 i‡((
v6gw_tu¬ñ
 = 
	`ﬁ§_os_add_ùù_tu¬ñ
(&
cuºít_ùv6_gw
->
‹igö©‹
, 
Ál£
)Ë!
NULL
) {

274 
	`ﬁ§_os_öëgw_tu¬ñ_rouã
(
v6gw_tu¬ñ
->
if_ödex
, 
Ál£
, 
åue
);

275 
v6gw_choo£n_exã∫Æ
 = 
exã∫Æ
;

279 
cuºít_ùv6_gw
 = 
NULL
;

281 i‡(
ﬁdV6
 !
NULL
) {

282 
	`ﬁ§_os_dñ_ùù_tu¬ñ
(
tu¬ñV6
);

285  (
ùv4
 && 
cuºít_ùv4_gw
 =
NULL
Ë|| (
ùv6
 && 
cuºít_ùv6_gw
 == NULL);

286 
	}
}

292 
g©eway_íåy
 *
	$ﬁ§_gë_ùv4_öë_g©eway
(
boﬁ
 *
ext
) {

293 i‡(
ext
) {

294 *
ext
 = 
v4gw_choo£n_exã∫Æ
;

296  
cuºít_ùv4_gw
;

297 
	}
}

303 
g©eway_íåy
 *
	$ﬁ§_gë_ùv6_öë_g©eway
(
boﬁ
 *
ext
) {

304 i‡(
ext
) {

305 *
ext
 = 
v6gw_choo£n_exã∫Æ
;

307  
cuºít_ùv6_gw
;

308 
	}
}

314 
g©eway_íåy
 *

315 
	$ﬁ§_föd_g©eway_íåy
(
ﬁ§_ù_addr
 *
‹igö©‹
) {

316 
avl_node
 *
node
 = 
	`avl_föd
(&
g©eway_åì
, 
‹igö©‹
);

318  
node
 =
NULL
 ? NULL : 
	`node2g©eway
(node);

319 
	}
}

328 
	$ﬁ§_upd©e_g©eway_íåy
(
ﬁ§_ù_addr
 *
‹igö©‹
, ﬁ§_ù_add∏*
mask
, 
¥efixÀn
, 
uöt16_t
 
£qno
) {

329 
g©eway_íåy
 *
gw
;

330 
uöt8_t
 *
±r
;

332 
±r
 = ((
uöt8_t
 *)
mask
Ë+ ((
¥efixÀn
+7)/8);

334 
gw
 = 
	`ﬁ§_föd_g©eway_íåy
(
‹igö©‹
);

335 i‡(!
gw
) {

336 
ùaddr_°r
 
buf
;

337 
gw
 = 
	`ﬁ§_cookõ_mÆloc
(
gw_mem_cookõ
);

339 
gw
->
‹igö©‹
 = *originator;

340 
gw
->
node
.
key
 = &gw->
‹igö©‹
;

342 
	`avl_ö£π
(&
g©eway_åì
, &
gw
->
node
, 
AVL_DUP_NO
);

344 i‡(
	`ﬁ§_£qno_diff
(
£qno
, 
gw
->seqno) <= 0) {

350 
gw
->
£qno
 = seqno;

352 i‡((
±r
[
GW_HNA_FLAGS
] & 
GW_HNA_FLAG_LINKSPEED
) != 0) {

353 
gw
->
u∂ök
 = 
	`de£rülize_gw_•ìd
(
±r
[
GW_HNA_UPLINK
]);

354 
gw
->
dow∆ök
 = 
	`de£rülize_gw_•ìd
(
±r
[
GW_HNA_DOWNLINK
]);

357 
gw
->
u∂ök
 = 1;

358 
gw
->
dow∆ök
 = 1;

361 
gw
->
ùv4
 = (
±r
[
GW_HNA_FLAGS
] & 
GW_HNA_FLAG_IPV4
) != 0;

362 
gw
->
ùv4«t
 = (
±r
[
GW_HNA_FLAGS
] & 
GW_HNA_FLAG_IPV4_NAT
) != 0;

364 i‡(
ﬁ§_˙f
->
ù_vîsi⁄
 =
AF_INET6
) {

365 
gw
->
ùv6
 = (
±r
[
GW_HNA_FLAGS
] & 
GW_HNA_FLAG_IPV6
) != 0;

368 i‡(
¥efixÀn
 =
ùv6_öã∫ë_rouã
.
¥efix_Àn
) {

369 
	`mem£t
(&
gw
->
exã∫Æ_¥efix
, 0, (gw->external_prefix));

371 i‡((
±r
[
GW_HNA_FLAGS
] & 
GW_HNA_FLAG_IPV6PREFIX
) != 0

372 && 
	`memcmp
(
mask
->
v6
.
s6_addr
, &
ùv6_öã∫ë_rouã
.
¥efix
, 
ﬁ§_˙f
->
ùsize
) == 0) {

374 
gw
->
exã∫Æ_¥efix
.
¥efix_Àn
 = 
±r
[
GW_HNA_V6PREFIXLEN
];

375 
	`mem˝y
(&
gw
->
exã∫Æ_¥efix
.
¥efix
, &
±r
[
GW_HNA_V6PREFIX
], 8);

381 i‡(
gw
->
˛ónup_timî
) {

382 
	`ﬁ§_°›_timî
(
gw
->
˛ónup_timî
);

383 
gw
->
˛ónup_timî
 = 
NULL
;

387 
gw_h™dÀr
->
	`h™dÀ_upd©e_gw
(
gw
);

388 
	}
}

390 
	$˛ónup_g©eway_h™dÀr
(*
±r
) {

391 
g©eway_íåy
 *
gw
 = 
±r
;

393 i‡(
gw
->
ùv4
 || gw->
ùv6
) {

398 
	`avl_dñëe
(&
g©eway_åì
, &
gw
->
node
);

399 
	`ﬁ§_cookõ_‰ì
(
gw_mem_cookõ
, 
gw
);

400 
	}
}

410 
	$ﬁ§_dñëe_g©eway_íåy
(
ﬁ§_ù_addr
 *
‹igö©‹
, 
uöt8_t
 
¥efixÀn
) {

411 
g©eway_íåy
 *
gw
;

412 
boﬁ
 
ch™ge
 = 
Ál£
;

413 
gw
 = 
	`ﬁ§_föd_g©eway_íåy
(
‹igö©‹
);

414 i‡(
gw
 && (gw->
˛ónup_timî
 =
NULL
 || gw->
ùv4
 || gw->
ùv6
)) {

415 i‡(
ﬁ§_˙f
->
ù_vîsi⁄
 =
AF_INET
 && 
¥efixÀn
 == 0) {

416 
ch™ge
 = 
gw
->
ùv4
;

417 
gw
->
ùv4
 = 
Ál£
;

418 
gw
->
ùv4«t
 = 
Ál£
;

420 i‡(
ﬁ§_˙f
->
ù_vîsi⁄
 =
AF_INET6
 && 
¥efixÀn
 =
ùv6_öã∫ë_rouã
.
¥efix_Àn
) {

421 
ch™ge
 = 
gw
->
ùv6
;

422 
gw
->
ùv6
 = 
Ál£
;

424 i‡(
ﬁ§_˙f
->
ù_vîsi⁄
 =
AF_INET6
 && 
¥efixÀn
 =
ùv6_m≠≥dv4_rouã
.
¥efix_Àn
) {

425 
ch™ge
 = 
gw
->
ùv4
;

426 
gw
->
ùv4
 = 
Ál£
;

427 
gw
->
ùv4«t
 = 
Ál£
;

430 i‡(
¥efixÀn
 =
FORCE_DELETE_GW_ENTRY
 || !(
gw
->
ùv4
 || gw->
ùv6
)) {

432 
gw
->
ùv4
 = 
Ál£
;

433 
gw
->
ùv4«t
 = 
Ál£
;

434 
gw
->
ùv6
 = 
Ál£
;

437 
gw_h™dÀr
->
	`h™dÀ_dñëe_gw
(
gw
);

440 i‡(
cuºít_ùv4_gw
 =
gw
) {

441 
	`ﬁ§_os_öëgw_tu¬ñ_rouã
(
v4gw_tu¬ñ
->
if_ödex
, 
åue
, 
Ál£
);

442 
	`ﬁ§_os_dñ_ùù_tu¬ñ
(
v4gw_tu¬ñ
);

444 
cuºít_ùv4_gw
 = 
NULL
;

445 
v4gw_tu¬ñ
 = 
NULL
;

447 i‡(
cuºít_ùv6_gw
 =
gw
) {

448 
	`ﬁ§_os_öëgw_tu¬ñ_rouã
(
v6gw_tu¬ñ
->
if_ödex
, 
Ál£
, false);

449 
	`ﬁ§_os_dñ_ùù_tu¬ñ
(
v6gw_tu¬ñ
);

451 
cuºít_ùv6_gw
 = 
NULL
;

452 
v6gw_tu¬ñ
 = 
NULL
;

456 
	`ﬁ§_£t_timî
(&
gw
->
˛ónup_timî
, 
GW_CLEANUP_INTERVAL
, 0, 
Ál£
, 
˛ónup_g©eway_h™dÀr
, gw, 
NULL
);

458 i‡(
ch™ge
) {

459 
gw_h™dÀr
->
	`h™dÀ_upd©e_gw
(
gw
);

462 
	}
}

470 
boﬁ


471 
	$ﬁ§_is_sm¨t_g©eway
(
ﬁ§_ù_¥efix
 *
¥efix
, 
ﬁ§_ù_addr
 *
mask
) {

472 
uöt8_t
 *
±r
;

474 i‡(!
	`is_¥efix_öëgw
(
¥efix
)) {

475  
Ál£
;

478 
±r
 = ((
uöt8_t
 *)
mask
Ë+ ((
¥efix
->
¥efix_Àn
+7)/8);

479  
±r
[
GW_HNA_PAD
] =0 &&Öå[
GW_HNA_FLAGS
] != 0;

480 
	}
}

488 
	$ﬁ§_modifiy_öëgw_√tmask
(
ﬁ§_ù_addr
 *
mask
, 
¥efixÀn
) {

489 
uöt8_t
 *
±r
 = ((uöt8_à*)
mask
Ë+ ((
¥efixÀn
+7)/8);

491 
	`mem˝y
(
±r
, &
sm¨t_g©eway_√tmask
, (sm¨t_g©eway_√tmaskË- 
¥efixÀn
/8);

492 i‡(
ﬁ§_˙f
->
has_ùv4_g©eway
) {

493 
±r
[
GW_HNA_FLAGS
] |
GW_HNA_FLAG_IPV4
;

495 i‡(
ﬁ§_˙f
->
sm¨t_gw_u∂ök_«t
) {

496 
±r
[
GW_HNA_FLAGS
] |
GW_HNA_FLAG_IPV4_NAT
;

499 i‡(
ﬁ§_˙f
->
has_ùv6_g©eway
) {

500 
±r
[
GW_HNA_FLAGS
] |
GW_HNA_FLAG_IPV6
;

502 i‡(!
ﬁ§_˙f
->
has_ùv6_g©eway
 || 
¥efixÀn
 !
ùv6_öã∫ë_rouã
.
¥efix_Àn
){

503 
±r
[
GW_HNA_FLAGS
] &~
GW_HNA_FLAG_IPV6PREFIX
;

505 
	}
}

511 
	$ﬁ§_¥öt_g©eway_íåõs
() {

512 #i‚de‡
NODEBUG


513 
ùaddr_°r
 
buf
;

514 
g©eway_íåy
 *
gw
;

515 c⁄° 
addrsize
 = 
ﬁ§_˙f
->
ù_vîsi⁄
 =
AF_INET
 ? 15 : 39;

517 
	`OLSR_PRINTF
(0, "\n--- %s ---------------------------------------------------- GATEWAYS\n\n",

518 
	`ﬁ§_wÆl˛ock_°rög
());

519 
	`OLSR_PRINTF
(0, "%-*†%-6†%-9†%-9†%s\n", 
addrsize
, "IPáddress", "Type", "Uplink", "Downlink",

520 
ﬁ§_˙f
->
ù_vîsi⁄
 =
AF_INET
 ? "" : "External Prefix");

522 
	`OLSR_FOR_ALL_GATEWAY_ENTRIES
(
gw
) {

523 
	`OLSR_PRINTF
(0, "%-*†%s%c%s%c%¯%-9u %-9u %s\n", 
addrsize
, 
	`ﬁ§_ù_to_°rög
(&
buf
, &
gw
->
‹igö©‹
),

524 
gw
->
ùv4«t
 ? "" : " ",

525 
gw
->
ùv4
 ? '4' : ' ',

526 
gw
->
ùv4«t
 ? "(N)" : "",

527 (
gw
->
ùv4
 && gw->
ùv6
) ? ',' : ' ',

528 
gw
->
ùv6
 ? '6' : ' ',

529 
gw
->
u∂ök
, gw->
dow∆ök
,

530 
gw
->
exã∫Æ_¥efix
.
¥efix_Àn
 =0 ? "" : 
	`ﬁ§_ù_¥efix_to_°rög
(&gw->external_prefix));

531 } 
	`OLSR_FOR_ALL_GATEWAY_ENTRIES_END
(
gw
)

533 
	}
}

	@src/gateway.h

8 #i‚de‡
GATEWAY_H_


9 
	#GATEWAY_H_


	)

11 
	~"comm⁄/avl.h
"

12 
	~"comm⁄/li°.h
"

13 
	~"defs.h
"

14 
	~"ﬁ§.h
"

15 
	~"scheduÀr.h
"

17 
	#FORCE_DELETE_GW_ENTRY
 255

	)

18 
	#GW_CLEANUP_INTERVAL
 30000

	)

26 
	eg©eway_h«_Êags
 {

27 
	mGW_HNA_FLAG_LINKSPEED
 = 1<<0,

28 
	mGW_HNA_FLAG_IPV4
 = 1<<1,

29 
	mGW_HNA_FLAG_IPV4_NAT
 = 1<<2,

30 
	mGW_HNA_FLAG_IPV6
 = 1<<3,

31 
	mGW_HNA_FLAG_IPV6PREFIX
 = 1<<4

35 
	eg©eway_h«_fõlds
 {

36 
	mGW_HNA_PAD
 = 0,

37 
	mGW_HNA_FLAGS
 = 1,

38 
	mGW_HNA_UPLINK
 = 2,

39 
	mGW_HNA_DOWNLINK
 = 3,

40 
	mGW_HNA_V6PREFIXLEN
 = 4,

41 
	mGW_HNA_V6PREFIX
 = 5

44 
	sg©eway_íåy
 {

45 
avl_node
 
	mnode
;

46 
ﬁ§_ù_addr
 
	m‹igö©‹
;

47 
ﬁ§_ù_¥efix
 
	mexã∫Æ_¥efix
;

48 
uöt32_t
 
	mu∂ök
, 
	mdow∆ök
;

49 
boﬁ
 
	mùv4
, 
	mùv4«t
, 
	mùv6
;

51 
timî_íåy
 *
	m˛ónup_timî
;

52 
uöt16_t
 
	m£qno
;

55 
AVLNODE2STRUCT
(
node2g©eway
, 
g©eway_íåy
, 
node
);

57 
	#OLSR_FOR_ALL_GATEWAY_ENTRIES
(
gw
) \

59 
avl_node
 *
gw_node
, *
√xt_gw_node
; \

60 
gw_node
 = 
	`avl_wÆk_fú°
(&
g©eway_åì
); \

61 
gw_node
; gw_nodê
√xt_gw_node
) { \

62 
√xt_gw_node
 = 
	`avl_wÆk_√xt
(
gw_node
); \

63 
gw
 = 
	`node2g©eway
(
gw_node
);

	)

64 
	#OLSR_FOR_ALL_GATEWAY_ENTRIES_END
(
gw
Ë}}

	)

66 
avl_åì
 
g©eway_åì
;

68 
ﬁ§_öô_g©eways
();

69 
ﬁ§_˛ónup_g©eways
();

70 
ª‰esh_sm¨tgw_√tmask
();

71 
ﬁ§_åiggî_öëgw_°¨tup
();

72 
ﬁ§_åiggî_öëgw_£À˘i⁄
(
boﬁ
 
ùv4
, boﬁ 
ùv6
);

73 
ﬁ§_åiggî_g©ewayloss_check
();

75 
g©eway_íåy
 *
ﬁ§_föd_g©eway_íåy
(
ﬁ§_ù_addr
 *
‹igö©‹
);

76 
ﬁ§_upd©e_g©eway_íåy
(
ﬁ§_ù_addr
 *
‹igö©‹
, ﬁ§_ù_add∏*
mask
, 
¥efixÀn
, 
uöt16_t
 
£qno
);

77 
ﬁ§_dñëe_g©eway_íåy
(
ﬁ§_ù_addr
 *
‹igö©‹
, 
uöt8_t
 
¥efixÀn
);

78 
ﬁ§_¥öt_g©eway_íåõs
();

80 
boﬁ
 
ﬁ§_£t_öë_g©eway
(
ﬁ§_ù_addr
 *
‹igö©‹
, boﬁ 
ùv4
, boﬁ 
ùv6
, boﬁ 
exã∫Æ
);

81 
g©eway_íåy
 *
ﬁ§_gë_ùv4_öë_g©eway
(
boﬁ
 *);

82 
g©eway_íåy
 *
ﬁ§_gë_ùv6_öë_g©eway
(
boﬁ
 *);

83 
boﬁ
 
ﬁ§_is_sm¨t_g©eway
(
ﬁ§_ù_¥efix
 *
¥efix
, 
ﬁ§_ù_addr
 *
√t
);

84 
ﬁ§_modifiy_öëgw_√tmask
(
ﬁ§_ù_addr
 *
mask
, 
¥efixÀn
);

86 
	sﬁ§_gw_h™dÀr
 {

87 (* 
	mh™dÀ_°¨tup
)();

88 (* 
	m£À˘_g©eway
Ë(
boﬁ
 
	mùv4
, boﬁ 
	mùv6
);

89 (* 
	mh™dÀ_upd©e_gw
)(
	mg©eway_íåy
 *);

90 (* 
	mh™dÀ_dñëe_gw
)(
	mg©eway_íåy
 *);

93 
ﬁ§_£t_öëgw_h™dÀr
(
ﬁ§_gw_h™dÀr
 *
l
);

	@src/gateway_default_handler.c

8 
	~"defs.h
"

9 
	~"g©eway.h
"

10 
	~"g©eway_deÁu…_h™dÀr.h
"

11 
	~"scheduÀr.h
"

12 
	~"tc_£t.h
"

13 
	~"log.h
"

14 
	~"lq_∂ugö.h
"

16 
	~"as£π.h
"

18 #ifde‡
LINUX_NETLINK_ROUTING


19 
uöt32_t
 
	ggw_def_nodecou¡
, 
	ggw_def_°abÀcou¡
;

20 
boﬁ
 
	ggw_def_föished_ùv4
, 
	ggw_def_föished_ùv6
;

22 
timî_íåy
 *
	ggw_def_timî
;

24 
gw_deÁu…_°¨tup_h™dÀr
();

25 
gw_deÁu…_choo£gw_h™dÀr
(
boﬁ
 
ùv4
, boﬁ 
ùv6
);

26 
gw_deÁu…_upd©e_h™dÀr
(
g©eway_íåy
 *);

27 
gw_deÁu…_dñëe_h™dÀr
(
g©eway_íåy
 *);

29 
ﬁ§_gw_h™dÀr
 
	ggw_def_h™dÀr
 = {

30 &
gw_deÁu…_°¨tup_h™dÀr
,

31 &
gw_deÁu…_choo£gw_h™dÀr
,

32 &
gw_deÁu…_upd©e_h™dÀr
,

33 &
gw_deÁu…_dñëe_h™dÀr


40 
	$gw_deÁu…_choo£_g©eway
() {

41 
tc_íåy
 *
tc
;

42 
g©eway_íåy
 *
öë_ùv4
, *
öë_ùv6
;

43 
ﬁ§_lökco°
 
co°_ùv4
, 
co°_ùv6
;

44 
g©eway_íåy
 *
gw
;

45 
boﬁ
 
duÆ
;

46 
ﬁ§_lökco°
 
∑th_co°_times_thªshﬁd
;

48 
co°_ùv4
 = 
ROUTE_COST_BROKEN
;

49 
co°_ùv6
 = 
ROUTE_COST_BROKEN
;

51 
öë_ùv4
 = 
NULL
;

52 
öë_ùv6
 = 
NULL
;

54 
	`OLSR_FOR_ALL_GATEWAY_ENTRIES
(
gw
) {

56 i‡((
tc
 = 
	`ﬁ§_lookup_tc_íåy
(&
gw
->
‹igö©‹
)Ë=
NULL
) {

60 i‡(
ﬁ§_˙f
->
sm¨t_gw_thªsh
 == 0) {

61 
∑th_co°_times_thªshﬁd
 = 
tc
->
∑th_co°
;

63 
∑th_co°_times_thªshﬁd
 = (()
tc
->
∑th_co°
 * ()
ﬁ§_˙f
->
sm¨t_gw_thªsh
 + 50LL) / 100LL;

65 i‡(!
gw_def_föished_ùv4
 && 
gw
->
ùv4
 && gw->
ùv4«t
 =
ﬁ§_˙f
->
sm¨t_gw_Ælow_«t
 && 
∑th_co°_times_thªshﬁd
 < 
co°_ùv4
) {

66 
öë_ùv4
 = 
gw
;

67 
co°_ùv4
 = 
∑th_co°_times_thªshﬁd
;

69 i‡(!
gw_def_föished_ùv6
 && 
gw
->
ùv6
 && 
∑th_co°_times_thªshﬁd
 < 
co°_ùv6
) {

70 
öë_ùv6
 = 
gw
;

71 
co°_ùv6
 = 
∑th_co°_times_thªshﬁd
;

73 } 
	`OLSR_FOR_ALL_GATEWAY_ENTRIES_END
(
gw
)

76 
gw_def_föished_ùv4
 |
öë_ùv4
 !
NULL
;

77 
gw_def_föished_ùv6
 |
öë_ùv6
 !
NULL
;

78 
duÆ
 = 
öë_ùv4
 =
öë_ùv6
;

79 i‡(
öë_ùv4
) {

80 
	`ﬁ§_£t_öë_g©eway
(&
öë_ùv4
->
‹igö©‹
, 
åue
, 
duÆ
, 
Ál£
);

82 i‡(
öë_ùv6
 && !
duÆ
) {

83 
	`ﬁ§_£t_öë_g©eway
(&
öë_ùv6
->
‹igö©‹
, 
Ál£
, 
åue
, false);

87 i‡((
ﬁ§_˙f
->
sm¨t_gw_thªsh
 =0Ë&& 
gw_def_föished_ùv4
 && 
gw_def_föished_ùv6
) {

88 
	`ﬁ§_°›_timî
(
gw_def_timî
);

89 
gw_def_timî
 = 
NULL
;

91 
	}
}

94 
gw_deÁu…_timî
(*
unu£d
 
__©åibuã__
 ((unused))) {

96 i‡(
	gtc_åì
.
	gcou¡
 * 10 <
gw_def_nodecou¡
 * 11) {

97 
gw_def_nodecou¡
 = 
tc_åì
.
cou¡
;

99 i‡(
	gtc_åì
.
	gcou¡
 <
gw_def_nodecou¡
) {

100 
gw_def_°abÀcou¡
++;

103 
	ggw_def_nodecou¡
 = 
tc_åì
.
cou¡
;

104 
	ggw_def_°abÀcou¡
 = 0;

107 i‡(
	ggw_def_°abÀcou¡
 >
ﬁ§_˙f
->
sm¨t_gw_°abÀcou¡
) {

108 
gw_deÁu…_choo£_g©eway
();

113 
	$gw_deÁu…_°¨tup_h™dÀr
() {

115 
gw_def_nodecou¡
 = 
tc_åì
.
cou¡
;

116 
gw_def_°abÀcou¡
 = 0;

119 
gw_def_föished_ùv4
 = 
ﬁ§_˙f
->
ù_vîsi⁄
 =
AF_INET6
 && !ﬁ§_˙f->
u£_niô
;

122 
gw_def_föished_ùv6
 = 
ﬁ§_˙f
->
ù_vîsi⁄
 =
AF_INET
;

125 
gw_def_föished_ùv4
 |
ﬁ§_˙f
->
has_ùv4_g©eway
;

126 
gw_def_föished_ùv6
 |
ﬁ§_˙f
->
has_ùv6_g©eway
;

129 
	`ﬁ§_£t_timî
(&
gw_def_timî
, 
ﬁ§_˙f
->
sm¨t_gw_≥riod
, 0, 
åue
, &
gw_deÁu…_timî
, 
NULL
, 0);

130 
	}
}

132 
	$gw_deÁu…_upd©e_h™dÀr
(
g©eway_íåy
 *
gw
) {

133 
boﬁ
 
v4ch™ged
, 
v6ch™ged
;

135 
v4ch™ged
 = (
gw
 =
	`ﬁ§_gë_ùv4_öë_g©eway
(
NULL
))

136 && (!
gw
->
ùv4
 || (gw->
ùv4«t
 && !
ﬁ§_˙f
->
sm¨t_gw_Ælow_«t
));

137 
v6ch™ged
 = (
gw
 =
	`ﬁ§_gë_ùv6_öë_g©eway
(
NULL
)Ë&& !gw->
ùv6
;

139 i‡(
v4ch™ged
 || 
v6ch™ged
) {

140 
	`ﬁ§_gw_deÁu…_lookup_g©eway
(
v4ch™ged
, 
v6ch™ged
);

142 
	}
}

144 
	$gw_deÁu…_dñëe_h™dÀr
(
g©eway_íåy
 *
gw
) {

145 
boﬁ
 
isv4
, 
isv6
;

147 
isv4
 = 
gw
 =
	`ﬁ§_gë_ùv4_öë_g©eway
(
NULL
);

148 
isv6
 = 
gw
 =
	`ﬁ§_gë_ùv6_öë_g©eway
(
NULL
);

150 i‡(
gw
 !
NULL
 && (
isv4
 || 
isv6
)) {

151 
	`ﬁ§_gw_deÁu…_lookup_g©eway
(
isv4
, 
isv6
);

153 
	}
}

155 
	$gw_deÁu…_choo£gw_h™dÀr
(
boﬁ
 
ùv4
, boﬁ 
ùv6
) {

156 
	`ﬁ§_gw_deÁu…_lookup_g©eway
(
ùv4
, 
ùv6
);

158 i‡(!(
gw_def_föished_ùv4
 && 
gw_def_föished_ùv6
)) {

159 
	`gw_deÁu…_°¨tup_h™dÀr
();

161 
	}
}

166 
	$ﬁ§_gw_deÁu…_öô
() {

168 
gw_def_timî
 = 
NULL
;

169 
gw_def_föished_ùv4
 = 
Ál£
;

170 
gw_def_föished_ùv6
 = 
Ál£
;

171 
gw_def_nodecou¡
 = 0;

172 
gw_def_°abÀcou¡
 = 0;

173 
gw_def_timî
 = 
NULL
;

176 
	`ﬁ§_£t_öëgw_h™dÀr
(&
gw_def_h™dÀr
);

177 
	}
}

185 
	$ﬁ§_gw_deÁu…_lookup_g©eway
(
boﬁ
 
ùv4
, boﬁ 
ùv6
) {

186 i‡(
ùv4
) {

188 
gw_def_föished_ùv4
 = 
ﬁ§_˙f
->
ù_vîsi⁄
 =
AF_INET6
 && !ﬁ§_˙f->
u£_niô
;

190 i‡(
ùv6
) {

192 
gw_def_föished_ùv6
 = 
ﬁ§_˙f
->
ù_vîsi⁄
 =
AF_INET
;

195 i‡(!(
gw_def_föished_ùv4
 && 
gw_def_föished_ùv6
)) {

196 
	`gw_deÁu…_choo£_g©eway
();

198 
	}
}

	@src/gateway_default_handler.h

8 #i‚de‡
GATEWAY_DEFAULT_HANDLER_H_


9 
	#GATEWAY_DEFAULT_HANDLER_H_


	)

11 #i‚de‡
WIN32


12 
	~"g©eway.h
"

14 
ﬁ§_gw_deÁu…_öô
();

15 
ﬁ§_gw_deÁu…_lookup_g©eway
(
boﬁ
, bool);

	@src/generate_msg.c

42 
	~"gíî©e_msg.h
"

43 
	~"defs.h
"

44 
	~"ﬁ§.h
"

45 
	~"buûd_msg.h
"

46 
	~"∑ckë.h
"

51 
	~"h«_£t.h
"

52 
	~"mid_£t.h
"

53 
	~"tc_£t.h
"

54 
	~"m¥_£À˘‹_£t.h
"

55 
	~"du∂iˇã_£t.h
"

56 
	~"√ighb‹_èbÀ.h
"

57 
	~"lök_£t.h
"

58 
	~"two_h›_√ighb‹_èbÀ.h
"

59 
	~"√t_ﬁ§.h
"

61 
	gpul£d©a
[] = { '\\', '|', '/', '-' };

63 
	#PULSE_MAX
 4

	)

64 
uöt8_t
 
	gpul£_°©e
 = 0;

67 
	$gíî©e_hñlo
(*
p
)

69 
hñlo_mesßge
 
hñl›ackë
;

70 
öãrÁ˚
 *
i‚
 = (öãrÁ˚ *)
p
;

72 
	`ﬁ§_buûd_hñlo_∑ckë
(&
hñl›ackë
, 
i‚
);

74 i‡(
	`queue_hñlo
(&
hñl›ackë
, 
i‚
))

75 
	`√t_ouçut
(
i‚
);

77 
	`ﬁ§_‰ì_hñlo_∑ckë
(&
hñl›ackë
);

79 
	}
}

82 
	$gíî©e_tc
(*
p
)

84 
tc_mesßge
 
t˝ackë
;

85 
öãrÁ˚
 *
i‚
 = (öãrÁ˚ *)
p
;

87 
	`ﬁ§_buûd_tc_∑ckë
(&
t˝ackë
);

89 i‡(
	`queue_tc
(&
t˝ackë
, 
i‚
Ë&& 
	`TIMED_OUT
(i‚->
fwdtimî
)) {

90 
	`£t_buf„r_timî
(
i‚
);

93 
	`ﬁ§_‰ì_tc_∑ckë
(&
t˝ackë
);

94 
	}
}

97 
	$gíî©e_mid
(*
p
)

99 
öãrÁ˚
 *
i‚
 = (öãrÁ˚ *)
p
;

101 i‡(
	`queue_mid
(
i‚
Ë&& 
	`TIMED_OUT
(i‚->
fwdtimî
)) {

102 
	`£t_buf„r_timî
(
i‚
);

105 
	}
}

108 
	$gíî©e_h«
(*
p
)

110 
öãrÁ˚
 *
i‚
 = (öãrÁ˚ *)
p
;

112 i‡(
	`queue_h«
(
i‚
Ë&& 
	`TIMED_OUT
(i‚->
fwdtimî
)) {

113 
	`£t_buf„r_timî
(
i‚
);

115 
	}
}

118 
gíî©e_°dout_pul£
(*
foo
 
__©åibuã__
 ((
unu£d
)))

120 i‡(
	gﬁ§_˙f
->
	gdebug_Àvñ
 == 0)

123 
	gpul£_°©e
 = 
pul£_°©e
 == 3 ? 0 :Öulse_state + 1;

125 
¥ötf
("%c\r", 
pul£d©a
[
pul£_°©e
]);

	@src/generate_msg.h

42 #i‚de‡
_OLSR_GEN_MSG


43 
	#_OLSR_GEN_MSG


	)

45 
	~"öãrÁ˚s.h
"

47 
	#STDOUT_PULSE_INT
 600

	)

51 
gíî©e_hñlo
(*);

53 
gíî©e_mid
(*);

55 
gíî©e_h«
(*);

57 
gíî©e_tc
(*);

59 
gíî©e_°dout_pul£
(*);

	@src/hashing.c

42 
	~"ﬁ§_¥Ÿocﬁ.h
"

43 
	~"hashög.h
"

44 
	~"defs.h
"

54 
	#__jhash_mix
(
a
, 
b
, 
c
) \

56 
a
 -
b
;á -
c
;á ^= (c>>13); \

57 
b
 -
c
; b -
a
; b ^= (a<<8); \

58 
c
 -
a
; c -
b
; c ^= (b>>13); \

59 
a
 -
b
;á -
c
;á ^= (c>>12); \

60 
b
 -
c
; b -
a
; b ^= (a<<16); \

61 
c
 -
a
; c -
b
; c ^= (b>>5); \

62 
a
 -
b
;á -
c
;á ^= (c>>3); \

63 
b
 -
c
; b -
a
; b ^= (a<<10); \

64 
c
 -
a
; c -
b
; c ^= (b>>15); \

65 }

	)

67 
uöt32_t


68 
	$jíkös_hash
(c⁄° 
uöt8_t
 * 
k
, 
uöt32_t
 
Àngth
)

74 
uöt32_t
 
a
, 
b
, 
c
, 
Àn
;

77 
Àn
 = 
Àngth
;

78 
a
 = 
b
 = 0x9e3779b9;

79 
c
 = 0;

82 
Àn
 >= 12) {

83 
a
 +(
k
[0] + ((
uöt32_t
) k[1] << 8) + ((uint32_t) k[2] << 16) + ((uint32_t) k[3] << 24));

84 
b
 +(
k
[4] + ((
uöt32_t
) k[5] << 8) + ((uint32_t) k[6] << 16) + ((uint32_t) k[7] << 24));

85 
c
 +(
k
[8] + ((
uöt32_t
) k[9] << 8) + ((uint32_t) k[10] << 16) + ((uint32_t) k[11] << 24));

87 
	`__jhash_mix
(
a
, 
b
, 
c
);

89 
k
 += 12;

90 
Àn
 -= 12;

93 
c
 +
Àngth
;

94 
Àn
) {

96 
c
 +((
uöt32_t
Ë
k
[10] << 24);

98 
c
 +((
uöt32_t
Ë
k
[9] << 16);

100 
c
 +((
uöt32_t
Ë
k
[8] << 8);

103 
b
 +((
uöt32_t
Ë
k
[7] << 24);

105 
b
 +((
uöt32_t
Ë
k
[6] << 16);

107 
b
 +((
uöt32_t
Ë
k
[5] << 8);

109 
b
 +
k
[4];

111 
a
 +((
uöt32_t
Ë
k
[3] << 24);

113 
a
 +((
uöt32_t
Ë
k
[2] << 16);

115 
a
 +((
uöt32_t
Ë
k
[1] << 8);

117 
a
 +
k
[0];

119 
	`__jhash_mix
(
a
, 
b
, 
c
);

121  
c
;

122 
	}
}

129 
uöt32_t


130 
	$ﬁ§_ù_hashög
(c⁄° 
ﬁ§_ù_addr
 * 
addªss
)

132 
uöt32_t
 
hash
;

134 
ﬁ§_˙f
->
ù_vîsi⁄
) {

135 
AF_INET
:

136 
hash
 = 
	`jíkös_hash
((c⁄° 
uöt8_t
 *)&
addªss
->
v4
, (
uöt32_t
));

138 
AF_INET6
:

139 
hash
 = 
	`jíkös_hash
((c⁄° 
uöt8_t
 *)&
addªss
->
v6
, (
ö6_addr
));

142 
hash
 = 0;

146  
hash
 & 
HASHMASK
;

147 
	}
}

	@src/hashing.h

42 #i‚de‡
_OLSR_HASHING


43 
	#_OLSR_HASHING


	)

45 
	#HASHSIZE
 128

	)

46 
	#HASHMASK
 (
HASHSIZE
 - 1)

	)

48 
	~"ﬁ§_ty≥s.h
"

50 
uöt32_t
 
ﬁ§_ù_hashög
(c⁄° 
ﬁ§_ù_addr
 *);

	@src/hna_set.c

42 
	~"ùˇlc.h
"

43 
	~"defs.h
"

44 
	~"ﬁ§.h
"

45 
	~"scheduÀr.h
"

46 
	~"√t_ﬁ§.h
"

47 
	~"tc_£t.h
"

48 
	~"∑r£r.h
"

49 
	~"g©eway.h
"

50 
	~"du∂iˇã_h™dÀr.h
"

52 
h«_íåy
 
	gh«_£t
[
HASHSIZE
];

53 
ﬁ§_cookõ_öfo
 *
	gh«_√t_timî_cookõ
 = 
NULL
;

54 
ﬁ§_cookõ_öfo
 *
	gh«_íåy_mem_cookõ
 = 
NULL
;

55 
ﬁ§_cookõ_öfo
 *
	gh«_√t_mem_cookõ
 = 
NULL
;

57 
boﬁ
 
ﬁ§_dñëe_h«_√t_íåy
(
h«_√t
 *
√t_to_dñëe
);

63 
	$ﬁ§_öô_h«_£t
()

65 
idx
;

67 
idx
 = 0; idx < 
HASHSIZE
; idx++) {

68 
h«_£t
[
idx
].
√xt
 = &hna_set[idx];

69 
h«_£t
[
idx
].
¥ev
 = &hna_set[idx];

72 
h«_√t_timî_cookõ
 = 
	`ﬁ§_Æloc_cookõ
("HNA Nëw‹k", 
OLSR_COOKIE_TYPE_TIMER
);

74 
h«_√t_mem_cookõ
 = 
	`ﬁ§_Æloc_cookõ
("h«_√t", 
OLSR_COOKIE_TYPE_MEMORY
);

75 
	`ﬁ§_cookõ_£t_mem‹y_size
(
h«_√t_mem_cookõ
, (
h«_√t
));

77 
h«_íåy_mem_cookõ
 = 
	`ﬁ§_Æloc_cookõ
("h«_íåy", 
OLSR_COOKIE_TYPE_MEMORY
);

78 
	`ﬁ§_cookõ_£t_mem‹y_size
(
h«_íåy_mem_cookõ
, (
h«_íåy
));

81 
	}
}

84 
	$ﬁ§_˛ónup_h«
(
ﬁ§_ù_addr
 *
‹ig
) {

85 
h«_íåy
 *
h«
;

87 
	`OLSR_FOR_ALL_HNA_ENTRIES
(
h«
) {

88 i‡(
h«
->
√tw‹ks
.
√xt
 !&h«->√tw‹k†&& 
	`ùequÆ
(&h«->
A_g©eway_addr
, 
‹ig
)) {

89 !
	`ﬁ§_dñëe_h«_√t_íåy
(
h«
->
√tw‹ks
.
√xt
));

91 } 
	`OLSR_FOR_ALL_HNA_ENTRIES_END
(
h«
)

92 
	}
}

103 
h«_√t
 *

104 
	$ﬁ§_lookup_h«_√t
(c⁄° 
h«_√t
 *
√ts
, c⁄° 
ﬁ§_ù_addr
 *
√t
, 
uöt8_t
 
¥efixÀn
)

106 
h«_√t
 *
tmp
;

109 
tmp
 = 
√ts
->
√xt
;Åmp !=Çets;Åmp =Åmp->next) {

110 i‡(
tmp
->
h«_¥efix
.
¥efix_Àn
 =
¥efixÀn
 && 
	`ùequÆ
(&tmp->h«_¥efix.
¥efix
, 
√t
)) {

111  
tmp
;

116  
NULL
;

117 
	}
}

125 
h«_íåy
 *

126 
	$ﬁ§_lookup_h«_gw
(c⁄° 
ﬁ§_ù_addr
 *
gw
)

128 
h«_íåy
 *
tmp_h«
;

129 
uöt32_t
 
hash
 = 
	`ﬁ§_ù_hashög
(
gw
);

132 
	`OLSR_PRINTF
(5, "HNA:ÜookupÉntry\n");

136 
tmp_h«
 = 
h«_£t
[
hash
].
√xt
;Åmp_hna != &hna_set[hash];Åmp_hna =Åmp_hna->next) {

137 i‡(
	`ùequÆ
(&
tmp_h«
->
A_g©eway_addr
, 
gw
)) {

138  
tmp_h«
;

143  
NULL
;

144 
	}
}

153 
h«_íåy
 *

154 
	$ﬁ§_add_h«_íåy
(c⁄° 
ﬁ§_ù_addr
 *
addr
)

156 
h«_íåy
 *
√w_íåy
;

157 
uöt32_t
 
hash
;

159 
√w_íåy
 = 
	`ﬁ§_cookõ_mÆloc
(
h«_íåy_mem_cookõ
);

162 
√w_íåy
->
A_g©eway_addr
 = *
addr
;

165 
√w_íåy
->
√tw‹ks
.
√xt
 = &new_entry->networks;

166 
√w_íåy
->
√tw‹ks
.
¥ev
 = &new_entry->networks;

169 
hash
 = 
	`ﬁ§_ù_hashög
(
addr
);

171 
h«_£t
[
hash
].
√xt
->
¥ev
 = 
√w_íåy
;

172 
√w_íåy
->
√xt
 = 
h«_£t
[
hash
].next;

173 
h«_£t
[
hash
].
√xt
 = 
√w_íåy
;

174 
√w_íåy
->
¥ev
 = &
h«_£t
[
hash
];

176  
√w_íåy
;

177 
	}
}

188 
h«_√t
 *

189 
	$ﬁ§_add_h«_√t
(
h«_íåy
 *
h«_gw
, c⁄° 
ﬁ§_ù_addr
 *
√t
, 
uöt8_t
 
¥efixÀn
)

192 
h«_√t
 *
√w_√t
 = 
	`ﬁ§_cookõ_mÆloc
(
h«_√t_mem_cookõ
);

195 
	`mem£t
(
√w_√t
, 0, (
h«_√t
));

196 
√w_√t
->
h«_¥efix
.
¥efix
 = *
√t
;

197 
√w_√t
->
h«_¥efix
.
¥efix_Àn

¥efixÀn
;

200 
√w_√t
->
h«_gw
 = hna_gw;

203 
h«_gw
->
√tw‹ks
.
√xt
->
¥ev
 = 
√w_√t
;

204 
√w_√t
->
√xt
 = 
h«_gw
->
√tw‹ks
.next;

205 
h«_gw
->
√tw‹ks
.
√xt
 = 
√w_√t
;

206 
√w_√t
->
¥ev
 = &
h«_gw
->
√tw‹ks
;

208  
√w_√t
;

209 
	}
}

211 
boﬁ


212 
	$ﬁ§_dñëe_h«_√t_íåy
(
h«_√t
 *
√t_to_dñëe
) {

213 #ifde‡
DEBUG


214 
ùaddr_°r
 
buf1
, 
buf2
;

216 
h«_íåy
 *
h«_gw
;

217 
boﬁ
 
ªmoved_íåy
 = 
Ál£
;

219 #ifde‡
LINUX_NETLINK_ROUTING


220 i‡(
	`is_¥efix_öëgw
(&
√t_to_dñëe
->
h«_¥efix
)) {

222 
	`ﬁ§_dñëe_g©eway_íåy
(&
√t_to_dñëe
->
h«_gw
->
A_g©eway_addr
,Çë_to_dñëe->
h«_¥efix
.
¥efix_Àn
);

226 
	`ﬁ§_°›_timî
(
√t_to_dñëe
->
h«_√t_timî
);

227 
√t_to_dñëe
->
h«_√t_timî
 = 
NULL
;

228 
h«_gw
 = 
√t_to_dñëe
->hna_gw;

230 #ifde‡
DEBUG


231 
	`OLSR_PRINTF
(5, "HNA:Åimeout %s via hna-gw %s\n",

232 
	`ﬁ§_ù_¥efix_to_°rög
(&
√t_to_dñëe
->
h«_¥efix
),

233 
	`ﬁ§_ù_to_°rög
(&
buf2
, &
h«_gw
->
A_g©eway_addr
));

239 
	`ﬁ§_dñëe_routög_èbÀ
(&
√t_to_dñëe
->
h«_¥efix
.
¥efix
,

240 
√t_to_dñëe
->
h«_¥efix
.
¥efix_Àn
, &
h«_gw
->
A_g©eway_addr
);

242 
	`DEQUEUE_ELEM
(
√t_to_dñëe
);

245 i‡(
h«_gw
->
√tw‹ks
.
√xt
 == &hna_gw->networks) {

246 
	`DEQUEUE_ELEM
(
h«_gw
);

247 
	`ﬁ§_cookõ_‰ì
(
h«_íåy_mem_cookõ
, 
h«_gw
);

248 
ªmoved_íåy
 = 
åue
;

251 
	`ﬁ§_cookõ_‰ì
(
h«_√t_mem_cookõ
, 
√t_to_dñëe
);

252  
ªmoved_íåy
;

253 
	}
}

259 
	$ﬁ§_expúe_h«_√t_íåy
(*
c⁄ãxt
)

261 
	`ﬁ§_dñëe_h«_√t_íåy
(
c⁄ãxt
);

262 
	}
}

278 
	$ﬁ§_upd©e_h«_íåy
(c⁄° 
ﬁ§_ù_addr
 *
gw
, c⁄° ﬁ§_ù_add∏*
√t
, 
uöt8_t
 
¥efixÀn
, 
ﬁ§_ª…ime
 
vtime
)

280 
h«_íåy
 *
gw_íåy
;

281 
h«_√t
 *
√t_íåy
;

283 
gw_íåy
 = 
	`ﬁ§_lookup_h«_gw
(
gw
);

284 i‡(!
gw_íåy
) {

287 
gw_íåy
 = 
	`ﬁ§_add_h«_íåy
(
gw
);

290 
√t_íåy
 = 
	`ﬁ§_lookup_h«_√t
(&
gw_íåy
->
√tw‹ks
, 
√t
, 
¥efixÀn
);

291 i‡(
√t_íåy
 =
NULL
) {

294 
√t_íåy
 = 
	`ﬁ§_add_h«_√t
(
gw_íåy
, 
√t
, 
¥efixÀn
);

295 
ch™ges_h«
 = 
åue
;

301 
	`ﬁ§_ö£π_routög_èbÀ
(&
√t_íåy
->
h«_¥efix
.
¥efix
,

302 
√t_íåy
->
h«_¥efix
.
¥efix_Àn
, &
gw_íåy
->
A_g©eway_addr
, 
OLSR_RT_ORIGIN_HNA
);

307 
	`ﬁ§_£t_timî
(&
√t_íåy
->
h«_√t_timî
, 
vtime
, 
OLSR_HNA_NET_JITTER
, 
OLSR_TIMER_ONESHOT
, &
ﬁ§_expúe_h«_√t_íåy
,Çet_entry,

308 
h«_√t_timî_cookõ
);

309 
	}
}

317 
	$ﬁ§_¥öt_h«_£t
()

319 #ifde‡
NODEBUG


321 
idx
;

323 
	`OLSR_PRINTF
(1, "\n--- %02d:%02d:%02d.%02d ------------------------------------------------- HNA SET\n\n", 
nowtm
->
tm_hour
,

324 
nowtm
->
tm_mö
,Çowtm->
tm_£c
, ()
now
.
tv_u£c
 / 10000);

326 i‡(
ﬁ§_˙f
->
ù_vîsi⁄
 =
AF_INET
)

327 
	`OLSR_PRINTF
(1, "IPÇetÇetmask GW IP\n");

329 
	`OLSR_PRINTF
(1, "IPÇet/prefixlen GW IP\n");

331 
idx
 = 0; idx < 
HASHSIZE
; idx++) {

332 
h«_íåy
 *
tmp_h«
 = 
h«_£t
[
idx
].
√xt
;

334 
tmp_h«
 !&
h«_£t
[
idx
]) {

336 
h«_√t
 *
tmp_√t
 = 
tmp_h«
->
√tw‹ks
.
√xt
;

338 
tmp_√t
 !&
tmp_h«
->
√tw‹ks
) {

339 i‡(
ﬁ§_˙f
->
ù_vîsi⁄
 =
AF_INET
) {

340 
ùaddr_°r
 
buf
;

341 
	`OLSR_PRINTF
(1, "%-15†", 
	`ﬁ§_ù_to_°rög
(&
buf
, &
tmp_√t
->
A_√tw‹k_addr
));

342 
	`OLSR_PRINTF
(1, "%-15d ", 
tmp_√t
->
¥efix_Àn
);

343 
	`OLSR_PRINTF
(1, "%-15s\n", 
	`ﬁ§_ù_to_°rög
(&
buf
, &
tmp_h«
->
A_g©eway_addr
));

345 
ùaddr_°r
 
buf
;

346 
	`OLSR_PRINTF
(1, "%-27s/%d", 
	`ﬁ§_ù_to_°rög
(&
buf
, &
tmp_√t
->
A_√tw‹k_addr
),Åmp_√t->
A_√tmask
.
v6
);

347 
	`OLSR_PRINTF
(1, "%s\n", 
	`ﬁ§_ù_to_°rög
(&
buf
, &
tmp_h«
->
A_g©eway_addr
));

350 
tmp_√t
 =Åmp_√t->
√xt
;

352 
tmp_h«
 =Åmp_h«->
√xt
;

356 
	}
}

367 
boﬁ


368 
ﬁ§_öput_h«
(
ﬁ§_mesßge
 *
m
, 
öãrÁ˚
 *
ö_if
 
__©åibuã__
 ((
unu£d
)), 
ﬁ§_ù_addr
 *
‰om_addr
)

371 
uöt8_t
 
	gﬁ§_msgty≥
;

372 
ﬁ§_ª…ime
 
	gvtime
;

373 
uöt16_t
 
	gﬁ§_msgsize
;

374 
ﬁ§_ù_addr
 
	g‹igö©‹
;

375 
uöt8_t
 
	gh›_cou¡
;

376 
uöt16_t
 
	gmsg_£q_numbî
;

378 
	gh«size
;

379 c⁄° 
uöt8_t
 *
	gcuº
, *
	gcuº_íd
;

381 
ùaddr_°r
 
	gbuf
;

382 #ifde‡
DEBUG


383 
OLSR_PRINTF
(5, "Processing HNA\n");

387 i‡(!
	gm
) {

388  
	gÁl£
;

390 
	gcuº
 = (c⁄° 
uöt8_t
 *)
m
;

393 
pkt_gë_u8
(&
cuº
, &
ﬁ§_msgty≥
);

394 i‡(
	gﬁ§_msgty≥
 !
HNA_MESSAGE
) {

395 
OLSR_PRINTF
(1, "notá HNA message!\n");

396  
	gÁl£
;

399 
pkt_gë_ª…ime
(&
cuº
, &
vtime
);

402 
pkt_gë_u16
(&
cuº
, &
ﬁ§_msgsize
);

404 
	gh«size
 = 
ﬁ§_msgsize
 - 8 - 
ﬁ§_˙f
->
ùsize
;

405 
	gcuº_íd
 = (c⁄° 
uöt8_t
 *)
m
 + 
ﬁ§_msgsize
;

408 
pkt_gë_ùaddªss
(&
cuº
, &
‹igö©‹
);

412 
pkt_ign‹e_u8
(&
cuº
);

415 
pkt_gë_u8
(&
cuº
, &
h›_cou¡
);

418 
pkt_gë_u16
(&
cuº
, &
msg_£q_numbî
);

420 i‡((
	gh«size
 % (2 * 
	gﬁ§_˙f
->
	gùsize
)) != 0) {

421 
OLSR_PRINTF
(1, "Illegal HNA message from %s with size %d!\n",

422 
ﬁ§_ù_to_°rög
(&
buf
, &
‹igö©‹
), 
ﬁ§_msgsize
);

423  
	gÁl£
;

431 i‡(
check_√ighb‹_lök
(
‰om_addr
Ë!
SYM_LINK
) {

432 
OLSR_PRINTF
(2, "Re˚ived HNA from NON SYMÇeighb‹ %s\n", 
ﬁ§_ù_to_°rög
(&
buf
, 
‰om_addr
));

433  
	gÁl£
;

435 
	gcuº
 < 
	gcuº_íd
) {

436 
ﬁ§_ù_¥efix
 
	g¥efix
;

437 
ﬁ§_ù_addr
 
	gmask
;

439 
ù_¥efix_li°
 *
	gíåy
;

440 
öãrÁ˚
 *
	gifs
;

441 
boﬁ
 
	g°›
 = 
Ál£
;

443 
pkt_gë_ùaddªss
(&
cuº
, &
¥efix
.prefix);

444 
pkt_gë_ùaddªss
(&
cuº
, &
mask
);

445 
	g¥efix
.
	g¥efix_Àn
 = 
ﬁ§_√tmask_to_¥efix
(&
mask
);

447 #ifde‡
LINUX_NETLINK_ROUTING


448 i‡(
	gﬁ§_˙f
->
	gsm¨t_gw_a˘ive
 && 
ﬁ§_is_sm¨t_g©eway
(&
¥efix
, &
mask
)) {

449 
ﬁ§_upd©e_g©eway_íåy
(&
‹igö©‹
, &
mask
, 
¥efix
.
¥efix_Àn
, 
msg_£q_numbî
);

453 #ifde‡
MAXIMUM_GATEWAY_PREFIX_LENGTH


454 i‡(
	gﬁ§_˙f
->
	gsm¨t_gw_a˘ive
 && 
	g¥efix
.
	g¥efix_Àn
 > 0 &&Öªfix.¥efix_À¿<
MAXIMUM_GATEWAY_PREFIX_LENGTH
) {

459 #i‚de‡
NO_DUPLICATE_DETECTION_HANDLER


460 
	gifs
 = 
i‚ë
; if†!
NULL
; if†
ifs
->
öt_√xt
) {

461 i‡(
ùequÆ
(&
ifs
->
ù_addr
, &
¥efix
.prefix)) {

463 
ﬁ§_h™dÀ_h«_cﬁlisi⁄
(&
¥efix
.¥efix, &
‹igö©‹
);

464 
	g°›
 = 
åue
;

468 i‡(
	g°›
) {

472 
	gíåy
 = 
ù_¥efix_li°_föd
(
ﬁ§_˙f
->
h«_íåõs
, &
¥efix
.¥efix,Öªfix.
¥efix_Àn
);

473 i‡(
	gíåy
 =
NULL
) {

475 
ﬁ§_upd©e_h«_íåy
(&
‹igö©‹
, &
¥efix
.¥efix,Öªfix.
¥efix_Àn
, 
vtime
);

479  
	gåue
;

	@src/hna_set.h

42 #i‚de‡
_OLSR_HNA


43 
	#_OLSR_HNA


	)

45 
	~"hashög.h
"

46 
	~"ﬁ§_ty≥s.h
"

47 
	~"ﬁ§_¥Ÿocﬁ.h
"

48 
	~"m™tisß.h
"

50 
	~<time.h
>

54 
	sh«_√t
 {

55 
ﬁ§_ù_¥efix
 
	mh«_¥efix
;

56 
timî_íåy
 *
	mh«_√t_timî
;

57 
h«_íåy
 *
	mh«_gw
;

58 
h«_√t
 *
	m√xt
;

59 
h«_√t
 *
	m¥ev
;

62 
	#OLSR_HNA_NET_JITTER
 5

	)

64 
	sh«_íåy
 {

65 
ﬁ§_ù_addr
 
	mA_g©eway_addr
;

66 
h«_√t
 
	m√tw‹ks
;

67 
h«_íåy
 *
	m√xt
;

68 
h«_íåy
 *
	m¥ev
;

71 
	#OLSR_FOR_ALL_HNA_ENTRIES
(
h«
) \

73 
_idx
; \

74 
_idx
 = 0; _idx < 
HASHSIZE
; _idx++) { \

75 
h«_íåy
 *
_√xt
; \

76 
h«
 = 
h«_£t
[
_idx
].
√xt
; \

77 
h«
 !&
h«_£t
[
_idx
]; \

78 
h«
 = 
_√xt
) { \

79 
_√xt
 = 
h«
->
√xt
;

	)

80 
	#OLSR_FOR_ALL_HNA_ENTRIES_END
(
h«
Ë}}}

	)

82 
h«_íåy
 
h«_£t
[
HASHSIZE
];

84 
ﬁ§_öô_h«_£t
();

85 
ﬁ§_˛ónup_h«
(
ﬁ§_ù_addr
 *
‹ig
);

87 
h«_√t
 *
ﬁ§_lookup_h«_√t
(c⁄° h«_√à*, c⁄° 
ﬁ§_ù_addr
 *, 
uöt8_t
);

89 
h«_íåy
 *
ﬁ§_lookup_h«_gw
(c⁄° 
ﬁ§_ù_addr
 *);

91 
h«_íåy
 *
ﬁ§_add_h«_íåy
(c⁄° 
ﬁ§_ù_addr
 *);

93 
h«_√t
 *
ﬁ§_add_h«_√t
(
h«_íåy
 *, c⁄° 
ﬁ§_ù_addr
 *, 
uöt8_t
);

95 
ﬁ§_upd©e_h«_íåy
(c⁄° 
ﬁ§_ù_addr
 *, c⁄° ﬁ§_ù_add∏*, 
uöt8_t
, 
ﬁ§_ª…ime
);

97 
ﬁ§_¥öt_h«_£t
();

99 
boﬁ
 
ﬁ§_öput_h«
(
ﬁ§_mesßge
 *, 
öãrÁ˚
 *, 
ﬁ§_ù_addr
 *);

	@src/hysteresis.c

42 
	~<time.h
>

43 
	~<°dlib.h
>

45 
	~"ﬁ§_¥Ÿocﬁ.h
"

46 
	~"hy°îesis.h
"

47 
	~"defs.h
"

48 
	~"ﬁ§.h
"

49 
	~"√t_ﬁ§.h
"

50 
	~"ùˇlc.h
"

51 
	~"scheduÀr.h
"

53 
	#hsˇlög
 
ﬁ§_˙f
->
hy°îesis_∑øm
.
sˇlög


	)

54 
	#hhigh
 
ﬁ§_˙f
->
hy°îesis_∑øm
.
thr_high


	)

55 
	#hlow
 
ﬁ§_˙f
->
hy°îesis_∑øm
.
thr_low


	)

58 
	$ﬁ§_hy°_ˇlc_°abûôy
(
ﬁd_quÆôy
)

60  (((1 - 
hsˇlög
Ë* 
ﬁd_quÆôy
) + hscaling);

61 
	}
}

64 
	$ﬁ§_hy°_ˇlc_ö°abûôy
(
ﬁd_quÆôy
)

66  ((1 - 
hsˇlög
Ë* 
ﬁd_quÆôy
);

67 
	}
}

70 
	$ﬁ§_¥o˚ss_hy°îesis
(
lök_íåy
 *
íåy
)

73 i‡(
íåy
->
L_lök_quÆôy
 > 
hhigh
) {

74 i‡(
íåy
->
L_lök_≥ndög
 == 1) {

75 
ùaddr_°r
 
buf
;

76 
	`OLSR_PRINTF
(1, "HYST[%s]Üök sëÅÿNOTÖídög!\n", 
	`ﬁ§_ù_to_°rög
(&
buf
, &
íåy
->
√ighb‹_iÁ˚_addr
));

77 
ch™ges_√ighb‹hood
 = 
åue
;

81 
íåy
->
L_lök_≥ndög
 = 0;

83 i‡(!
	`TIMED_OUT
(
íåy
->
L_LOST_LINK_time
))

84 
ch™ges_√ighb‹hood
 = 
åue
;

87 
íåy
->
L_LOST_LINK_time
 = 
now_times
 - 1;

92 i‡(
íåy
->
L_lök_quÆôy
 < 
hlow
) {

93 i‡(
íåy
->
L_lök_≥ndög
 == 0) {

94 
ùaddr_°r
 
buf
;

95 
	`OLSR_PRINTF
(1, "HYST[%s]Üök sëÅÿ≥ndög!\n", 
	`ﬁ§_ù_to_°rög
(&
buf
, &
íåy
->
√ighb‹_iÁ˚_addr
));

96 
ch™ges_√ighb‹hood
 = 
åue
;

100 
íåy
->
L_lök_≥ndög
 = 1;

102 i‡(
	`TIMED_OUT
(
íåy
->
L_LOST_LINK_time
))

103 
ch™ges_√ighb‹hood
 = 
åue
;

106 
íåy
->
L_LOST_LINK_time
 = 
	`MIN
(
	`GET_TIMESTAMP
(
NEIGHB_HOLD_TIME
 * 
MSEC_PER_SEC
),É¡ry->
lök_timî
->
timî_˛ock
);

123 
	}
}

135 
	$ﬁ§_upd©e_hy°îesis_hñlo
(
lök_íåy
 *
íåy
, 
ﬁ§_ª…ime
 
htime
)

137 
ùaddr_°r
 
buf
;

138 
	`OLSR_PRINTF
(3, "HYST[%s]: HELLO upd©êvtimê%u ms\n", 
	`ﬁ§_ù_to_°rög
(&
buf
, &
íåy
->
√ighb‹_iÁ˚_addr
), 
htime
 + htime / 2);

140 
	`ﬁ§_£t_timî
(&
íåy
->
lök_hñlo_timî
, 
htime
 + htimê/ 2, 
OLSR_LINK_HELLO_JITTER
, 
OLSR_TIMER_PERIODIC
,

141 &
ﬁ§_expúe_lök_hñlo_timî
, 
íåy
, 0);

144 
	}
}

147 
	$upd©e_hy°îesis_öcomög
(
ﬁ§_ù_addr
 *
ªmŸe
, 
öãrÁ˚
 *
loˇl
, 
uöt16_t
 
£qno
)

149 
lök_íåy
 *
 k
 = 
	`lookup_lök_íåy
(
ªmŸe
, 
NULL
, 
loˇl
);

152 i‡(
 k
 !
NULL
) {

153 #ifde‡
DEBUG


154 
ùaddr_°r
 
buf
;

156 
 k
->
L_lök_quÆôy
 = 
	`ﬁ§_hy°_ˇlc_°abûôy
(lnk->L_link_quality);

157 #ifde‡
DEBUG


158 
	`OLSR_PRINTF
(3, "HYST[%s]: %f\n", 
	`ﬁ§_ù_to_°rög
(&
buf
, 
ªmŸe
), 
 k
->
L_lök_quÆôy
);

168 i‡(
 k
->
ﬁ§_£qno_vÆid
 && ()(
£qno
 -Ünk->
ﬁ§_£qno
) < 100)

169 
 k
->
ﬁ§_£qno
 !
£qno
) {

170 
 k
->
L_lök_quÆôy
 = 
	`ﬁ§_hy°_ˇlc_ö°abûôy
(lnk->L_link_quality);

171 #ifde‡
DEBUG


172 
	`OLSR_PRINTF
(5, "HYST[%s] PACKET LOSS! %f\n", 
	`ﬁ§_ù_to_°rög
(&
buf
, 
ªmŸe
), 
 k
->
L_lök_quÆôy
);

174 i‡(
 k
->
L_lök_quÆôy
 < 
ﬁ§_˙f
->
hy°îesis_∑øm
.
thr_low
)

177 
 k
->
ﬁ§_£qno
++;

180 
 k
->
ﬁ§_£qno
 = 
£qno
 + 1;

181 
 k
->
ﬁ§_£qno_vÆid
 = 
åue
;

186 
	}
}

	@src/hysteresis.h

41 #i‚de‡
_OLSR_HYSTERESIS


42 
	#_OLSR_HYSTERESIS


	)

44 
	~"lök_£t.h
"

45 
	~"m™tisß.h
"

47 
ﬁ§_hy°_ˇlc_°abûôy
();

49 
ﬁ§_¥o˚ss_hy°îesis
(
lök_íåy
 *);

51 
ﬁ§_hy°_ˇlc_ö°abûôy
();

53 
ﬁ§_upd©e_hy°îesis_hñlo
(
lök_íåy
 *, 
ﬁ§_ª…ime
);

55 
upd©e_hy°îesis_öcomög
(
ﬁ§_ù_addr
 *, 
öãrÁ˚
 *, 
uöt16_t
);

	@src/ifnet.h

47 #i‚de‡
_OLSR_IFNET


48 
	#_OLSR_IFNET


	)

51 
	~<¨∑/öë.h
>

52 
	~<sys/sockë.h
>

53 
	~<√t/if.h
>

55 
	~"ﬁ§_cfg.h
"

57 
£t_Êag
(*, );

59 
check_öãrÁ˚_upd©es
(*);

61 
chk_if_ch™ged
(
ﬁ§_if
 *);

63 
chk_if_up
(
ﬁ§_if
 *, );

65 
add_hemu_if
(
ﬁ§_if
 *);

	@src/interfaces.c

42 
	~<sig«l.h
>

43 
	~<uni°d.h
>

45 
	~"defs.h
"

46 
	~"öãrÁ˚s.h
"

47 
	~"i‚ë.h
"

48 
	~"scheduÀr.h
"

49 
	~"ﬁ§.h
"

50 
	~"√t_ﬁ§.h
"

51 
	~"ùˇlc.h
"

52 
	~"log.h
"

53 
	~"∑r£r.h
"

55 #ifde‡
WIN32


56 
	~<wöba£.h
>

57 
	#˛o£
(
x
Ë
	`˛o£sockë
(x)

	)

61 
öãrÁ˚
 *
	gi‚ë
;

64 
	sifchgf
 {

65 (*
	mfun˘i⁄
Ë(
	mif_ödex
, 
	möãrÁ˚
 *, 
	mﬁ§_ifchg_Êag
);

66 
ifchgf
 *
	m√xt
;

69 
ifchgf
 *
	gifchgf_li°
;

72 
ﬁ§_cookõ_öfo
 *
	göãrÁ˚_pﬁl_timî_cookõ
 = 
NULL
;

73 
ﬁ§_cookõ_öfo
 *
	ghñlo_gí_timî_cookõ
 = 
NULL
;

74 
ﬁ§_cookõ_öfo
 *
	gtc_gí_timî_cookõ
 = 
NULL
;

75 
ﬁ§_cookõ_öfo
 *
	gmid_gí_timî_cookõ
 = 
NULL
;

76 
ﬁ§_cookõ_öfo
 *
	gh«_gí_timî_cookõ
 = 
NULL
;

86 
	$ﬁ§_öô_öãrÁ˚db
()

88 
ﬁ§_if
 *
tmp_if
;

91 
i‚ë
 = 
NULL
;

96 
öãrÁ˚_pﬁl_timî_cookõ
 = 
	`ﬁ§_Æloc_cookõ
("I¡îÁ˚ Pﬁlög", 
OLSR_COOKIE_TYPE_TIMER
);

98 
hñlo_gí_timî_cookõ
 = 
	`ﬁ§_Æloc_cookõ
("HñlÿGíî©i⁄", 
OLSR_COOKIE_TYPE_TIMER
);

99 
tc_gí_timî_cookõ
 = 
	`ﬁ§_Æloc_cookõ
("TC Gíî©i⁄", 
OLSR_COOKIE_TYPE_TIMER
);

100 
mid_gí_timî_cookõ
 = 
	`ﬁ§_Æloc_cookõ
("MID Gíî©i⁄", 
OLSR_COOKIE_TYPE_TIMER
);

101 
h«_gí_timî_cookõ
 = 
	`ﬁ§_Æloc_cookõ
("HNA Gíî©i⁄", 
OLSR_COOKIE_TYPE_TIMER
);

103 
	`OLSR_PRINTF
(1, "\n ---- Interface configuration ---- \n\n");

105 
tmp_if
 = 
ﬁ§_˙f
->
öãrÁ˚s
;Åmp_i‡!
NULL
;Åmp_i‡tmp_if->
√xt
) {

106 i‡(!
tmp_if
->
ho°_emul
) {

107 i‡(!
ﬁ§_˙f
->
ho°_emul
)

108 
	`chk_if_up
(
tmp_if
, 1);

110 
	`add_hemu_if
(
tmp_if
);

115 
	`ﬁ§_°¨t_timî
(()
ﬁ§_˙f
->
nic_chgs_pﬁÃ©e
 * 
MSEC_PER_SEC
, 5, 
OLSR_TIMER_PERIODIC
, &
check_öãrÁ˚_upd©es
, 
NULL
,

116 
öãrÁ˚_pﬁl_timî_cookõ
);

118  (
i‚ë
 =
NULL
) ? 0 : 1;

119 
	}
}

122 
	$ﬁ§_åiggî_ifch™ge
(
if_ödex
, 
öãrÁ˚
 *
iÂ
, 
ﬁ§_ifchg_Êag
 
Êag
)

124 
ifchgf
 *
tmp_ifchgf_li°
 = 
ifchgf_li°
;

126 
tmp_ifchgf_li°
 !
NULL
) {

127 
tmp_ifchgf_li°
->
	`fun˘i⁄
(
if_ödex
, 
iÂ
, 
Êag
);

128 
tmp_ifchgf_li°
 =Åmp_ifchgf_li°->
√xt
;

130 
	}
}

141 
öãrÁ˚
 *

142 
	$if_ifwôhaddr
(c⁄° 
ﬁ§_ù_addr
 *
addr
)

144 
öãrÁ˚
 *
iÂ
;

146 i‡(!
addr
)

147  
NULL
;

149 
iÂ
 = 
i‚ë
; iÂ; iÂ = iÂ->
öt_√xt
) {

150 i‡(
ﬁ§_˙f
->
ù_vîsi⁄
 =
AF_INET
) {

155 i‡(((
sockaddr_ö
 *)&
iÂ
->
öt_addr
)->
sö_addr
.
s_addr
 =
addr
->
v4
.s_addr)

156  
iÂ
;

161 i‡(
	`ù6equÆ
(&
iÂ
->
öt6_addr
.
sö6_addr
, &
addr
->
v6
))

162  
iÂ
;

165  
NULL
;

166 
	}
}

176 
öãrÁ˚
 *

177 
	$if_ifwôhsock
(
fd
)

179 
öãrÁ˚
 *
iÂ
;

180 
iÂ
 = 
i‚ë
;

182 
iÂ
) {

183 i‡(
iÂ
->
ﬁ§_sockë
 =
fd
 || iÂ->
£nd_sockë
 == fd)

184  
iÂ
;

185 
iÂ
 = iÂ->
öt_√xt
;

188  
NULL
;

189 
	}
}

199 
öãrÁ˚
 *

200 
	$if_ifwôh«me
(c⁄° *
if_«me
)

202 
öãrÁ˚
 *
iÂ
 = 
i‚ë
;

203 
iÂ
) {

205 i‡(
	`°rcmp
(
iÂ
->
öt_«me
, 
if_«me
) == 0) {

206  
iÂ
;

208 
iÂ
 = iÂ->
öt_√xt
;

210  
NULL
;

211 
	}
}

221 
ﬁ§_if
 *

222 
	$ﬁ§if_ifwôh«me
(c⁄° *
if_«me
)

224 
ﬁ§_if
 *
oiÂ
 = 
ﬁ§_˙f
->
öãrÁ˚s
;

225 
oiÂ
) {

227 i‡(
	`°rcmp
(
oiÂ
->
«me
, 
if_«me
) == 0) {

228  
oiÂ
;

230 
oiÂ
 = oiÂ->
√xt
;

232  
NULL
;

233 
	}
}

243 
öãrÁ˚
 *

244 
	$if_ifwôhödex
(c⁄° 
if_ödex
)

246 
öãrÁ˚
 *
iÂ
 = 
i‚ë
;

247 
iÂ
 !
NULL
) {

248 i‡(
iÂ
->
if_ödex
 == if_index) {

249  
iÂ
;

251 
iÂ
 = iÂ->
öt_√xt
;

253  
NULL
;

254 
	}
}

264 
	$if_ifwôhödex_«me
(c⁄° 
if_ödex
)

266 c⁄° 
öãrÁ˚
 *c⁄° 
iÂ
 = 
	`if_ifwôhödex
(
if_ödex
);

267  
iÂ
 =
NULL
 ? "void" : iÂ->
öt_«me
;

268 
	}
}

278 
ﬁ§_if
 *

279 
	$ﬁ§_¸óã_ﬁ§if
(c⁄° *
«me
, 
hemu
)

281 
ﬁ§_if
 *
öãrf_n
 = 
ﬁ§_˙f
->
öãrÁ˚s
;

282 
size_t
 
«me_size
;

287 
öãrf_n
 !
NULL
) {

288 i‡(
	`°rcmp
(
öãrf_n
->
«me
,Çame) == 0) {

289 
	`Ârötf
(
°dîr
, "Du∂iˇã i¡îÁ˚†deföed...ÇŸáddög %s\n", 
«me
);

290  
NULL
;

292 
öãrf_n
 = i¡îf_n->
√xt
;

295 
öãrf_n
 = 
	`ﬁ§_mÆloc
((
ﬁ§_if
), "queue interface");

297 
«me_size
 = 
	`°æí
(
«me
) + 1;

298 
öãrf_n
->
«me
 = 
	`ﬁ§_mÆloc
(
«me_size
, "queue interfaceÇame");

299 
	`°rs˝y
(
öãrf_n
->
«me
,Çame, 
«me_size
);

301 
öãrf_n
->
˙f
 = 
	`ﬁ§_mÆloc
((*interf_n->cnf), "queue cnf");

303 
öãrf_n
->
˙fi
 = 
	`ﬁ§_mÆloc
((*interf_n->cnfi), "queue cnfi");

304 
	`mem£t
(
öãrf_n
->
˙fi
, 0xFF, (*interf_n->cnfi));

305 
öãrf_n
->
˙fi
->
‹ig_lq_mu…_˙t
=0;

307 
öãrf_n
->
ho°_emul
 = 
hemu
 ? 
åue
 : 
Ál£
;

309 
öãrf_n
->
√xt
 = 
ﬁ§_˙f
->
öãrÁ˚s
;

310 
ﬁ§_˙f
->
öãrÁ˚s
 = 
öãrf_n
;

312  
öãrf_n
;

313 
	}
}

324 
ﬁ§_add_ifch™ge_h™dÀr
((*
f
Ë(
if_ödex
, 
öãrÁ˚
 *, 
ﬁ§_ifchg_Êag
))

327 
ifchgf
 *
√w_ifchgf
;

329 
√w_ifchgf
 = 
	`ﬁ§_mÆloc
((
ifchgf
), "Add ifchgfunction");

331 
√w_ifchgf
->
√xt
 = 
ifchgf_li°
;

332 
√w_ifchgf
->
fun˘i⁄
 = 
f
;

334 
ifchgf_li°
 = 
√w_ifchgf
;

337 
	}
}

343 
ﬁ§_ªmove_ifch™ge_h™dÀr
((*
f
Ë(
if_ödex
, 
öãrÁ˚
 *, 
ﬁ§_ifchg_Êag
))

345 
ifchgf
 *
tmp_ifchgf
, *
¥ev
;

347 
tmp_ifchgf
 = 
ifchgf_li°
;

348 
¥ev
 = 
NULL
;

350 
tmp_ifchgf
) {

351 i‡(
tmp_ifchgf
->
fun˘i⁄
 =
f
) {

353 i‡(
¥ev
 =
NULL
) {

354 
ifchgf_li°
 = 
tmp_ifchgf
->
√xt
;

355 
	`‰ì
(
tmp_ifchgf
);

357 
¥ev
->
√xt
 = 
tmp_ifchgf
->next;

358 
	`‰ì
(
tmp_ifchgf
);

362 
¥ev
 = 
tmp_ifchgf
;

363 
tmp_ifchgf
 =Åmp_ifchgf->
√xt
;

367 
	}
}

370 
	$ﬁ§_ªmove_öãrÁ˚
(
ﬁ§_if
 * 
iÁ˚
)

372 
öãrÁ˚
 *
iÂ
, *
tmp_iÂ
;

373 
iÂ
 = 
iÁ˚
->
öãrf
;

375 
	`OLSR_PRINTF
(1, "Removög i¡îÁ˚ %†(%d)\n", 
iÁ˚
->
«me
, 
iÂ
->
if_ödex
);

376 
	`ﬁ§_sy¶og
(
OLSR_LOG_INFO
, "Removög i¡îÁ˚ %s\n", 
iÁ˚
->
«me
);

378 
	`ﬁ§_dñëe_lök_íåy_by_ù
(&
iÂ
->
ù_addr
);

383 
	`ﬁ§_åiggî_ifch™ge
(
iÂ
->
if_ödex
, iÂ, 
IFCHG_IF_REMOVE
);

386 
	`ﬁ§_dñëe_öãrÁ˚_rouãs
(
iÂ
->
if_ödex
);

389 i‡(
iÂ
 =
i‚ë
) {

390 
i‚ë
 = 
iÂ
->
öt_√xt
;

392 
tmp_iÂ
 = 
i‚ë
;

393 
tmp_iÂ
->
öt_√xt
 !
iÂ
) {

394 
tmp_iÂ
 =Åmp_iÂ->
öt_√xt
;

396 
tmp_iÂ
->
öt_√xt
 = 
iÂ
->int_next;

400 
	`√t_ªmove_buf„r
(
iÂ
);

405 i‡(
	`ùequÆ
(&
ﬁ§_˙f
->
maö_addr
, &
iÂ
->
ù_addr
)) {

406 i‡(
i‚ë
 =
NULL
) {

408 
	`mem£t
(&
ﬁ§_˙f
->
maö_addr
, 0, ol§_˙f->
ùsize
);

409 
	`OLSR_PRINTF
(1, "No more interfaces...\n");

411 
ùaddr_°r
 
buf
;

412 
ﬁ§_˙f
->
maö_addr
 = 
i‚ë
->
ù_addr
;

413 
	`OLSR_PRINTF
(1, "New maöáddªss: %s\n", 
	`ﬁ§_ù_to_°rög
(&
buf
, &
ﬁ§_˙f
->
maö_addr
));

414 
	`ﬁ§_sy¶og
(
OLSR_LOG_INFO
, "New maöáddªss: %s\n", 
	`ﬁ§_ù_to_°rög
(&
buf
, &
ﬁ§_˙f
->
maö_addr
));

421 
	`ﬁ§_°›_timî
(
iÂ
->
hñlo_gí_timî
);

422 
	`ﬁ§_°›_timî
(
iÂ
->
tc_gí_timî
);

423 
	`ﬁ§_°›_timî
(
iÂ
->
mid_gí_timî
);

424 
	`ﬁ§_°›_timî
(
iÂ
->
h«_gí_timî
);

426 
iÁ˚
->
c⁄figuªd
 = 0;

427 
iÁ˚
->
öãrf
 = 
NULL
;

430 
	`ªmove_ﬁ§_sockë
(
iÂ
->
ﬁ§_sockë
, &
ﬁ§_öput
, 
NULL
);

431 
	`˛o£
(
iÂ
->
ﬁ§_sockë
);

433 
	`ªmove_ﬁ§_sockë
(
iÂ
->
£nd_sockë
, &
ﬁ§_öput
, 
NULL
);

434 
	`˛o£
(
iÂ
->
£nd_sockë
);

437 
	`‰ì
(
iÂ
->
öt_«me
);

438 
	`‰ì
(
iÂ
);

440 i‡((
i‚ë
 =
NULL
Ë&& (!
ﬁ§_˙f
->
Ælow_no_öãrÁ˚s
)) {

441 
	`ﬁ§_sy¶og
(
OLSR_LOG_INFO
, "No moreáctive interfaces -Éxiting.\n");

442 
	`ﬁ§_exô
("Nÿm‹êa˘ivêöãrÁ˚†-Éxôög.\n", 
EXIT_FAILURE
);

444 
	}
}

	@src/interfaces.h

42 #i‚de‡
_OLSR_INTERFACE


43 
	#_OLSR_INTERFACE


	)

45 
	~<sys/ty≥s.h
>

46 #ifde‡
_MSC_VER


47 
	~<WS2t˝ù.h
>

48 #unde‡
öãrÁ˚


50 
	~<sys/sockë.h
>

52 
	~<time.h
>

54 
	~"ﬁ§_ty≥s.h
"

55 
	~"m™tisß.h
"

57 
	#IPV6_ADDR_ANY
 0x0000U

	)

59 
	#IPV6_ADDR_UNICAST
 0x0001U

	)

60 
	#IPV6_ADDR_MULTICAST
 0x0002U

	)

61 
	#IPV6_ADDR_ANYCAST
 0x0004U

	)

63 
	#IPV6_ADDR_LOOPBACK
 0x0010U

	)

64 
	#IPV6_ADDR_LINKLOCAL
 0x0020U

	)

65 
	#IPV6_ADDR_SITELOCAL
 0x0040U

	)

67 
	#IPV6_ADDR_COMPATv4
 0x0080U

	)

69 
	#IPV6_ADDR_SCOPE_MASK
 0x00f0U

	)

71 
	#IPV6_ADDR_MAPPED
 0x1000U

	)

72 
	#IPV6_ADDR_RESERVED
 0x2000U

	)

74 
	#MAX_IF_METRIC
 100

	)

76 
	#WEIGHT_LOWEST
 0

	)

77 
	#WEIGHT_LOW
 1

	)

78 
	#WEIGHT_ETHERNET_1GBP
 2

	)

79 
	#WEIGHT_ETHERNET_1GB
 4

	)

80 
	#WEIGHT_ETHERNET_100MB
 8

	)

81 
	#WEIGHT_ETHERNET_10MB
 16

	)

82 
	#WEIGHT_ETHERNET_DEFAULT
 32

	)

83 
	#WEIGHT_WLAN_HIGH
 64

	)

84 
	#WEIGHT_WLAN_54MB
 128

	)

85 
	#WEIGHT_WLAN_11MB
 256

	)

86 
	#WEIGHT_WLAN_LOW
 512

	)

87 
	#WEIGHT_WLAN_DEFAULT
 1024

	)

88 
	#WEIGHT_SERIAL
 2048

	)

89 
	#WEIGHT_HIGH
 4096

	)

90 
	#WEIGHT_HIGHEST
 8192

	)

92 
	sif_gí_¥›îty
 {

93 
uöt32_t
 
	mow√r_id
;

94 *
	md©a
;

95 
if_gí_¥›îty
 *
	m√xt
;

98 
	svtimes
 {

99 
uöt8_t
 
	mhñlo
;

100 
uöt8_t
 
	mtc
;

101 
uöt8_t
 
	mmid
;

102 
uöt8_t
 
	mh«
;

107 
	sﬁ§_√tbuf
 {

108 
uöt8_t
 *
	mbuff
;

109 
	mbufsize
;

110 
	mmaxsize
;

111 
	m≥ndög
;

112 
	mª£rved
;

119 
	söãrÁ˚
 {

121 
sockaddr_ö
 
	möt_addr
;

122 
sockaddr_ö
 
	möt_√tmask
;

123 
sockaddr_ö
 
	möt_brﬂdaddr
;

124 
	mmode
;

126 
sockaddr_ö6
 
	möt6_addr
;

127 
sockaddr_ö6
 
	möt6_mu…addr
;

129 
ﬁ§_ù_addr
 
	mù_addr
;

130 
	mis_hcif
;

132 
	mﬁ§_sockë
;

133 
	m£nd_sockë
;

135 
	möt_mëric
;

136 
	möt_mtu
;

137 
	möt_Êags
;

138 
	mif_ödex
;

139 
	mis_wúñess
;

140 *
	möt_«me
;

141 
uöt16_t
 
	mﬁ§_£qnum
;

144 
timî_íåy
 *
	mhñlo_gí_timî
;

145 
timî_íåy
 *
	mh«_gí_timî
;

146 
timî_íåy
 *
	mmid_gí_timî
;

147 
timî_íåy
 *
	mtc_gí_timî
;

149 #ifde‡
löux


152 
	snic_°©e
 {

154 
	mªdúe˘
;

157 
	m•oof
;

158 } 
	mnic_°©e
;

161 
ﬁ§_ª…ime
 
	mhñlo_ëime
;

162 
vtimes
 
	mvÆtimes
;

165 
uöt32_t
 
	mfwdtimî
;

168 
ﬁ§_√tbuf
 
	m√tbuf
;

171 
if_gí_¥›îty
 *
	mgí_¥›îtõs
;

174 
	mâl_ödex
;

177 
boﬁ
 
	mimmedüã_£nd_tc
;

180 
ﬁ§_if
 *
	mﬁ§_if
;

181 
öãrÁ˚
 *
	möt_√xt
;

184 
	#OLSR_DEFAULT_MTU
 1500

	)

188 
	eﬁ§_ifchg_Êag
 {

189 
	mIFCHG_IF_ADD
 = 1,

190 
	mIFCHG_IF_REMOVE
 = 2,

191 
	mIFCHG_IF_UPDATE
 = 3

195 
öãrÁ˚
 *
i‚ë
;

197 
ﬁ§_öô_öãrÁ˚db
();

198 
ﬁ§_dñëe_öãrÁ˚s
();

200 
ﬁ§_åiggî_ifch™ge
(
if_ödex
, 
öãrÁ˚
 *, 
ﬁ§_ifchg_Êag
);

202 
öãrÁ˚
 *
if_ifwôhsock
();

204 
öãrÁ˚
 *
if_ifwôhaddr
(c⁄° 
ﬁ§_ù_addr
 *);

206 
öãrÁ˚
 *
if_ifwôh«me
(const *);

207 
ﬁ§_if
 *
ﬁ§if_ifwôh«me
(c⁄° *
if_«me
);

209 c⁄° *
if_ifwôhödex_«me
(c⁄° 
if_ödex
);

211 
öãrÁ˚
 *
if_ifwôhödex
(c⁄° 
if_ödex
);

213 
ﬁ§_if
 *
ﬁ§_¸óã_ﬁ§if
(c⁄° *
«me
, 
hemu
);

215 
ﬁ§_add_ifch™ge_h™dÀr
((*
f
Ë(
if_ödex
, 
öãrÁ˚
 *, 
ﬁ§_ifchg_Êag
));

216 
	`ﬁ§_ªmove_ifch™ge_h™dÀr
((*
f
Ë(
if_ödex
, 
öãrÁ˚
 *, 
ﬁ§_ifchg_Êag
));

218 
	`ﬁ§_ªmove_öãrÁ˚
(
ﬁ§_if
 *);

220 
ﬁ§_cookõ_öfo
 *
öãrÁ˚_pﬁl_timî_cookõ
;

221 
ﬁ§_cookõ_öfo
 *
hñlo_gí_timî_cookõ
;

222 
ﬁ§_cookõ_öfo
 *
tc_gí_timî_cookõ
;

223 
ﬁ§_cookõ_öfo
 *
mid_gí_timî_cookõ
;

224 
ﬁ§_cookõ_öfo
 *
h«_gí_timî_cookõ
;

	@src/ipc_frontend.c

49 
	~"ùc_‰⁄ãnd.h
"

50 
	~"lök_£t.h
"

51 
	~"ﬁ§.h
"

52 
	~"log.h
"

53 
	~"∑r£r.h
"

54 
	~"scheduÀr.h
"

55 
	~"√t_ﬁ§.h
"

56 
	~"ùˇlc.h
"

58 #ifde‡
WIN32


59 
	#˛o£
(
x
Ë
	`˛o£sockë
(x)

	)

60 
	#≥º‹
(
x
Ë
	`WöSockPEº‹
(x)

	)

61 
WöSockPEº‹
(const *);

64 #i‚de‡
MSG_NOSIGNAL


65 
	#MSG_NOSIGNAL
 0

	)

68 
	gùc_sock
 = -1;

69 
	gùc_c⁄n
 = -1;

70 
	gùc_a˘ive
 = 
Ál£
;

72 
ùc_£nd_Æl_rouãs
(
fd
);

74 
ùc_£nd_√t_öfo
(
fd
);

83 
	$ùc_öô
()

86 
sockaddr_ö
 
sö
;

87 
yes
 = 1;

90 
	`ﬁ§_∑r£r_add_fun˘i⁄
(&
‰⁄ãnd_msg∑r£r
, 
PROMISCUOUS
);

93 i‡((
ùc_sock
 = 
	`sockë
(
AF_INET
, 
SOCK_STREAM
, 0)) == -1) {

94 
	`≥º‹
("IPC socket");

95 
	`ﬁ§_exô
("IPC sockë", 
EXIT_FAILURE
);

98 i‡(
	`£tsock›t
(
ùc_sock
, 
SOL_SOCKET
, 
SO_REUSEADDR
, (*)&
yes
, (yes)) < 0) {

99 
	`≥º‹
("SO_REUSEADDR failed");

104 
	`mem£t
(&
sö
, 0, (sin));

105 
sö
.
sö_Ámûy
 = 
AF_INET
;

106 
sö
.
sö_addr
.
s_addr
 = 
INADDR_ANY
;

107 
sö
.
sö_p‹t
 = 
	`ht⁄s
(
IPC_PORT
);

110 i‡(
	`böd
(
ùc_sock
, (
sockaddr
 *)&
sö
, (sin)) == -1) {

111 
	`≥º‹
("IPC bind");

112 
	`OLSR_PRINTF
(1, "WillÑetry in 10 seconds...\n");

113 
	`¶ìp
(10);

114 i‡(
	`böd
(
ùc_sock
, (
sockaddr
 *)&
sö
, (sin)) == -1) {

115 
	`≥º‹
("IPC bind");

116 
	`ﬁ§_exô
("IPC böd", 
EXIT_FAILURE
);

118 
	`OLSR_PRINTF
(1, "OK\n");

122 i‡(
	`li°í
(
ùc_sock
, 
ﬁ§_˙f
->
ùc_c⁄√˘i⁄s
) == -1) {

123 
	`≥º‹
("IPCÜisten");

124 
	`ﬁ§_exô
("IPCÜi°í", 
EXIT_FAILURE
);

128 
	`add_ﬁ§_sockë
(
ùc_sock
, &
ùc_ac˚±
, 
NULL
, NULL, 
SP_PR_READ
);

130  
ùc_sock
;

131 
	}
}

135 
ùc_ac˚±
(
fd
, *
d©a
 
__©åibuã__
 ((
unu£d
)), 
Êags
 __attribute__ ((unused)))

137 
sockÀn_t
 
	gaddæí
;

138 
sockaddr_ö
 
	gpö
;

139 *
	gaddr
;

141 
	gaddæí
 = (
sockaddr_ö
);

143 i‡((
	gùc_c⁄n
 = 
ac˚±
(
fd
, (
sockaddr
 *)&
pö
, &
addæí
)) == -1) {

144 
≥º‹
("IPCáccept");

145 
ﬁ§_exô
("IPCác˚±", 
EXIT_FAILURE
);

147 
OLSR_PRINTF
(1, "FrontÉnd connected\n");

148 
	gaddr
 = 
öë_¡ﬂ
(
pö
.
sö_addr
);

149 i‡(
ùc_check_Ælowed_ù
((
ﬁ§_ù_addr
 *)&
pö
.
sö_addr
.
s_addr
)) {

150 
	gùc_a˘ive
 = 
åue
;

151 
ùc_£nd_√t_öfo
(
ùc_c⁄n
);

152 
ùc_£nd_Æl_rouãs
(
ùc_c⁄n
);

153 
OLSR_PRINTF
(1, "C⁄√˘i⁄ from %s\n", 
addr
);

155 
OLSR_PRINTF
(1, "Fr⁄àíd-c⁄√˘i⁄ from f‹egö ho°(%sËnŸáŒowed!\n", 
addr
);

156 
ﬁ§_sy¶og
(
OLSR_LOG_ERR
, "OLSR: Fr⁄àíd-c⁄√˘i⁄ from f‹egö ho°(%sËnŸáŒowed!\n", 
addr
);

157 
CLOSE
(
ùc_c⁄n
);

163 
boﬁ


164 
	$ùc_check_Ælowed_ù
(c⁄° 
ﬁ§_ù_addr
 *
addr
)

166 
ù_¥efix_li°
 *
ù˙
;

168 i‡(
addr
->
v4
.
s_addr
 =
	`¡ohl
(
INADDR_LOOPBACK
)) {

169  
åue
;

173 
ù˙
 = 
ﬁ§_˙f
->
ùc_√ts
; ip˙ !
NULL
; ip˙ = ip˙->
√xt
) {

174 i‡(
	`ù_ö_√t
(
addr
, &
ù˙
->
√t
)) {

175  
åue
;

179  
Ál£
;

180 
	}
}

192 
ùc_öput
(
sock
 
__©åibuã__
 ((
unu£d
)))

195 
	gbuf
[
MAXPACKETSIZE
 + 1];

196 
ﬁ§
 
	gﬁ§
;

197 } 
	göbuf
;

199 i‡(
ªcv
(
sock
, 
dú
, (dir), 0) == -1) {

200 
≥º‹
("recv");

201 
exô
(1);

214 
boﬁ


215 
‰⁄ãnd_msg∑r£r
(
ﬁ§_mesßge
 * 
msg
, 
öãrÁ˚
 * 
ö_if
 
__©åibuã__
 ((
unu£d
)), 
ﬁ§_ù_addr
 * 
‰om_addr


216 
__©åibuã__
 ((
unu£d
)))

218 
	gsize
;

220 i‡(!
	gùc_a˘ive
)

221  
	gåue
;

223 i‡(
	gﬁ§_˙f
->
	gù_vîsi⁄
 =
AF_INET
)

224 
size
 = 
¡ohs
(
msg
->
v4
.
ﬁ§_msgsize
);

226 
	gsize
 = 
¡ohs
(
msg
->
v6
.
ﬁ§_msgsize
);

228 i‡(
£nd
(
ùc_c⁄n
, (*)
msg
, 
size
, 
MSG_NOSIGNAL
) < 0) {

229 
OLSR_PRINTF
(1, "(OUTPUT)IPC connectionÜost!\n");

230 
CLOSE
(
ùc_c⁄n
);

231 
	gùc_a˘ive
 = 
Ál£
;

233  
	gåue
;

246 
	$ùc_rouã_£nd_πíåy
(c⁄° 
ﬁ§_ù_addr
 *
d°
, c⁄° ﬁ§_ù_add∏*
gw
, 
më
, 
add
, c⁄° *
öt_«me
)

248 
ùcmsg
 
∑ckë
;

249 *
tmp
;

251 i‡(
ﬁ§_˙f
->
ùc_c⁄√˘i⁄s
 <= 0) {

255 i‡(!
ùc_a˘ive
) {

258 
	`mem£t
(&
∑ckë
, 0, (
ùcmsg
));

259 
∑ckë
.
size
 = 
	`ht⁄s
(
IPC_PACK_SIZE
);

260 
∑ckë
.
msgty≥
 = 
ROUTE_IPC
;

262 
∑ckë
.
èrgë_addr
 = *
d°
;

264 
∑ckë
.
add
 =ádd;

265 i‡(
add
 && 
gw
) {

266 
∑ckë
.
mëric
 = 
më
;

267 
∑ckë
.
g©eway_addr
 = *
gw
;

270 i‡(
öt_«me
 !
NULL
)

271 
	`mem˝y
(&
∑ckë
.
devi˚
[0], 
öt_«me
, 4);

273 
	`mem£t
(&
∑ckë
.
devi˚
[0], 0, 4);

275 
tmp
 = (*)&
∑ckë
;

292 i‡(
	`£nd
(
ùc_c⁄n
, 
tmp
, 
IPC_PACK_SIZE
, 
MSG_NOSIGNAL
) < 0)

294 
	`OLSR_PRINTF
(1, "(RT_ENTRY)IPC connectionÜost!\n");

295 
	`CLOSE
(
ùc_c⁄n
);

297 
ùc_a˘ive
 = 
Ál£
;

302 
	}
}

305 
	$ùc_£nd_Æl_rouãs
(
fd
)

307 
π_íåy
 *
π
;

308 
ùcmsg
 
∑ckë
;

309 *
tmp
;

311 i‡(!
ùc_a˘ive
)

314 
	`OLSR_FOR_ALL_RT_ENTRIES
(
π
) {

316 
	`mem£t
(&
∑ckë
, 0, (
ùcmsg
));

317 
∑ckë
.
size
 = 
	`ht⁄s
(
IPC_PACK_SIZE
);

318 
∑ckë
.
msgty≥
 = 
ROUTE_IPC
;

320 
∑ckë
.
èrgë_addr
 = 
π
->
π_d°
.
¥efix
;

322 
∑ckë
.
add
 = 1;

323 
∑ckë
.
mëric
 = (
uöt8_t
Ë(
π
->
π_be°
->
πp_mëric
.
h›s
);

325 
∑ckë
.
g©eway_addr
 = 
π
->
π_√xth›
.
g©eway
;

327 
	`mem˝y
(&
∑ckë
.
devi˚
[0], 
	`if_ifwôhödex_«me
(
π
->
π_√xth›
.
iif_ödex
), 4);

329 
tmp
 = (*)&
∑ckë
;

332 i‡(
	`£nd
(
fd
, 
tmp
, 
IPC_PACK_SIZE
, 
MSG_NOSIGNAL
) < 0) {

333 
	`OLSR_PRINTF
(1, "(RT_ENTRY)IPC connectionÜost!\n");

334 
	`CLOSE
(
ùc_c⁄n
);

335 
ùc_a˘ive
 = 
Ál£
;

339 
	`OLSR_FOR_ALL_RT_ENTRIES_END
(
π
);

341 
	}
}

351 
	$ùc_£nd_√t_öfo
(
fd
)

353 
ùc_√t_msg
 *
√t_msg
;

355 
√t_msg
 = 
	`ﬁ§_mÆloc
((
ùc_√t_msg
), "sendÇet info");

357 
	`OLSR_PRINTF
(1, "SendingÇet-infoÅo frontÉnd...\n");

359 
	`mem£t
(
√t_msg
, 0, (
ùc_√t_msg
));

362 
√t_msg
->
size
 = 
	`ht⁄s
((
ùc_√t_msg
));

364 
√t_msg
->
msgty≥
 = 
NET_IPC
;

368 
√t_msg
->
mids
 = (
i‚ë
 !
NULL
 && i‚ë->
öt_√xt
 != NULL) ? 1 : 0;

371 
√t_msg
->
h«s
 = 
ﬁ§_˙f
->
h«_íåõs
 =
NULL
 ? 0 : 1;

376 
√t_msg
->
hñlo_öt
 = 0;

377 
√t_msg
->
hñlo_œn_öt
 = 0;

378 
√t_msg
->
tc_öt
 = 0;

379 
√t_msg
->
√igh_hﬁd
 = 0;

380 
√t_msg
->
t›ﬁogy_hﬁd
 = 0;

382 
√t_msg
->
ùv6
 = 
ﬁ§_˙f
->
ù_vîsi⁄
 =
AF_INET
 ? 0 : 1;

385 
√t_msg
->
maö_addr
 = 
ﬁ§_˙f
->main_addr;

407 i‡(
	`£nd
(
fd
, (*)
√t_msg
, (
ùc_√t_msg
), 
MSG_NOSIGNAL
) < 0) {

408 
	`OLSR_PRINTF
(1, "(NETINFO)IPC connectionÜost!\n");

409 
	`CLOSE
(
ùc_c⁄n
);

413 
	`‰ì
(
√t_msg
);

415 
	}
}

418 
	$shutdown_ùc
()

420 
	`OLSR_PRINTF
(1, "Shutting down IPC...\n");

421 
	`CLOSE
(
ùc_sock
);

422 
	`CLOSE
(
ùc_c⁄n
);

425 
	}
}

	@src/ipc_frontend.h

49 #i‚de‡
_OLSR_IPC


50 
	#_OLSR_IPC


	)

52 
	~<sys/ty≥s.h
>

53 
	~<√töë/ö.h
>

54 
	~<uni°d.h
>

55 
	~<f˙é.h
>

56 
	~<¨∑/öë.h
>

57 
	~<sig«l.h
>

59 
	~"defs.h
"

61 
	#IPC_PORT
 1212

	)

62 
	#IPC_PACK_SIZE
 44

	)

63 
	#ROUTE_IPC
 11

	)

64 
	#NET_IPC
 12

	)

72 
	sùcmsg
 {

73 
uöt8_t
 
	mmsgty≥
;

74 
uöt16_t
 
	msize
;

75 
uöt8_t
 
	mmëric
;

76 
uöt8_t
 
	madd
;

77 
ﬁ§_ù_addr
 
	mèrgë_addr
;

78 
ﬁ§_ù_addr
 
	mg©eway_addr
;

79 
	mdevi˚
[4];

82 
	sùc_√t_msg
 {

83 
uöt8_t
 
	mmsgty≥
;

84 
uöt16_t
 
	msize
;

85 
uöt8_t
 
	mmids
;

86 
uöt8_t
 
	mh«s
;

87 
uöt8_t
 
	munu£d1
;

88 
uöt16_t
 
	mhñlo_öt
;

89 
uöt16_t
 
	mhñlo_œn_öt
;

90 
uöt16_t
 
	mtc_öt
;

91 
uöt16_t
 
	m√igh_hﬁd
;

92 
uöt16_t
 
	mt›ﬁogy_hﬁd
;

93 
uöt8_t
 
	mùv6
;

94 
ﬁ§_ù_addr
 
	mmaö_addr
;

97 
boﬁ
 
ùc_check_Ælowed_ù
(c⁄° 
ﬁ§_ù_addr
 *);

99 
ùc_ac˚±
(
fd
, *, );

101 
boﬁ
 
‰⁄ãnd_msg∑r£r
(
ﬁ§_mesßge
 *, 
öãrÁ˚
 *, 
ﬁ§_ù_addr
 *);

103 
ùc_rouã_£nd_πíåy
(c⁄° 
ﬁ§_ù_addr
 *, const olsr_ip_addr *, , , const *);

	@src/ipcalc.c

42 
	~"defs.h
"

43 
	~"ùˇlc.h
"

46 c⁄° 
ﬁ§_ù_¥efix
 
	gùv4_öã∫ë_rouã
 =

48 .
¥efix
.
v4
.
s_addr
 = 0,

49 .
	g¥efix_Àn
 = 0

53 c⁄° 
ﬁ§_ù_¥efix
 
	gùv6_m≠≥dv4_rouã
 =

55 .
¥efix
.
v6
.
s6_addr
 = { 0,0,0,0,0,0,0,0,0,0,0xff,0xff,0,0,0,0 },

56 .
	g¥efix_Àn
 = 96

60 c⁄° 
ﬁ§_ù_¥efix
 
	gùv6_öã∫ë_rouã
 =

62 .
¥efix
.
v6
.
s6_addr
 = { 0x20, 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },

63 .
	g¥efix_Àn
 = 3

67 c⁄° 
ﬁ§_ù_addr
 
	gﬁ§_ù_zîo
 =

69 .
v6
.
s6_addr
 = { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 }

73 c⁄° 
ﬁ§_ù_addr
 
	gùv6_def_mu…iˇ°
 = {

74 .
v6
.
s6_addr
 = { 0xFF, 0x02, 0,0,0,0,0,0,0,0,0,0,0,0,0, 0x6D }

79 
	$¥efix_to_√tmask
(
uöt8_t
 * 
a
, 
Àn
, uöt8_à
¥efixÀn
)

81 #i‡!
	`deföed
(
NODEBUG
Ë&& deföed(
DEBUG
)

82 
ùaddr_°r
 
buf
;

83 c⁄° 
uöt8_t
 *
a_°¨t
 = 
a
;

85 
p
;

86 c⁄° 
uöt8_t
 *
a_íd
;

88 
a_íd
 = 
a
 + 
Àn
;

89 
p
 = 
¥efixÀn
; 
a
 < 
a_íd
 &&Ö > 8;Ö -= 8) {

90 *
a
++ = 0xff;

92 i‡(
a
 >
a_íd
) {

95 *
a
++ = 0xf‡<< (8 - 
p
);

96 
a
 < 
a_íd
) {

97 *
a
++ = 0;

100 #ifde‡
DEBUG


101 
	`OLSR_PRINTF
(3, "Pªfix %d = Nëmask: %s\n", 
¥efixÀn
, 
	`öë_¡›
(
ﬁ§_˙f
->
ù_vîsi⁄
, 
a_°¨t
, 
buf
.buf, (buf.buf)));

104 
	}
}

106 
uöt8_t


107 
	$√tmask_to_¥efix
(c⁄° 
uöt8_t
 * 
adr
, 
Àn
)

109 
ùaddr_°r
 
buf
;

110 c⁄° 
uöt8_t
 *c⁄° 
a_íd
 = 
adr
 + 
Àn
;

111 
uöt16_t
 
¥efix
 = 0;

112 c⁄° 
uöt8_t
 *
a
;

113 
a
 = 
adr
;á < 
a_íd
 && *a == 0xff;á++) {

114 
¥efix
 += 8;

116 i‡(
a
 < 
a_íd
) {

118 *
a
) {

120 
¥efix
 += 0;

123 
¥efix
 += 1;

126 
¥efix
 += 2;

129 
¥efix
 += 3;

132 
¥efix
 += 4;

135 
¥efix
 += 5;

138 
¥efix
 += 6;

141 
¥efix
 += 7;

144 
¥efix
 += 8;

147 
	`OLSR_PRINTF
(0, "%s: GŸ bogu†√tmask %s\n", 
__func__
, 
	`ﬁ§_ù_to_°rög
(&
buf
, (c⁄° 
ﬁ§_ù_addr
 *)(c⁄° *)
adr
));

148 
¥efix
 = 
UCHAR_MAX
;

152 #ifde‡
DEBUG


153 
	`OLSR_PRINTF
(3, "Nëmask: %†Pªfix %d\n", 
	`ﬁ§_ù_to_°rög
(&
buf
, (c⁄° 
ﬁ§_ù_addr
 *)(c⁄° *)
adr
), 
¥efix
);

155  
¥efix
;

156 
	}
}

159 
	$ﬁ§_ù_¥efix_to_°rög
(c⁄° 
ﬁ§_ù_¥efix
 *
¥efix
)

162 
buf
[
	`MAX
(
INET6_ADDRSTRLEN
 + 1 + 3, 
INET_ADDRSTRLEN
 + 1 + INET_ADDRSTRLEN)];

163 c⁄° *
rv
;

165 i‡(
ﬁ§_˙f
->
ù_vîsi⁄
 =
AF_INET
) {

167 
Àn
;

168 
ﬁ§_ù_addr
 
√tmask
;

169 
rv
 = 
	`öë_¡›
(
AF_INET
, &
¥efix
->¥efix.
v4
, 
buf
, (buf));

170 
Àn
 = 
	`°æí
(
buf
);

171 
buf
[
Àn
++] = '/';

172 
	`ﬁ§_¥efix_to_√tmask
(&
√tmask
, 
¥efix
->
¥efix_Àn
);

173 
	`öë_¡›
(
AF_INET
, &
√tmask
.
v4
, 
buf
 + 
Àn
, (buf) -Üen);

176 
Àn
;

177 
rv
 = 
	`öë_¡›
(
AF_INET6
, &
¥efix
->¥efix.
v6
, 
buf
, (buf));

178 
Àn
 = 
	`°æí
(
buf
);

179 
buf
[
Àn
++] = '/';

180 
	`¢¥ötf
(
buf
 + 
Àn
, (bufË-Üí, "/%d", 
¥efix
->
¥efix_Àn
);

182  
rv
;

183 
	}
}

186 
	$ﬁ§_°rög_to_¥efix
(
ùvîsi⁄
, 
ﬁ§_ù_¥efix
 *
d°
, c⁄° *
°rög
) {

187 
buf
[
	`MAX
(
INET6_ADDRSTRLEN
 + 1 + 3, 
INET_ADDRSTRLEN
 + 1 + INET_ADDRSTRLEN)];

188 *
±r
;

190 
	`°rs˝y
(
buf
, 
°rög
, (buf));

191 
d°
->
¥efix_Àn
 = 
ùvîsi⁄
 =
AF_INET
 ? 32 : 128;

193 
±r
 = 
	`°rchr
(
buf
, '/');

194 i‡(!
±r
) {

195 
±r
 = 
	`°rchr
(
buf
, ' ');

198 i‡(
±r
) {

199 *
±r
++ = 0;

200 i‡(
ﬁ§_˙f
->
ù_vîsi⁄
 =
AF_INET
 && 
	`°rchr
(
±r
, '.')) {

201 
uöt8_t
 
sub√tbuf
[4];

202 i‡(
	`öë_±⁄
(
AF_INET
, 
±r
, 
sub√tbuf
) != 1) {

206 
d°
->
¥efix_Àn
 = 
	`√tmask_to_¥efix
(
sub√tbuf
, (subnetbuf));

209 
d°
->
¥efix_Àn
 = 
	`©oi
(
±r
);

212  
	`öë_±⁄
(
ùvîsi⁄
, 
buf
, &
d°
->
¥efix
) == 1 ? 0 : -1;

213 
	}
}

219 
INLINE
 
uöt32_t


220 
	$¥efix_to_√tmask4
(
uöt8_t
 
¥efixÀn
)

222  
¥efixÀn
 == 0 ? 0 : (~0U << (32 -Örefixlen));

223 
	}
}

229 
	$ù_ö_√t
(c⁄° 
ﬁ§_ù_addr
 *
ùaddr
, c⁄° 
ﬁ§_ù_¥efix
 *
√t
)

231 
rv
;

232 i‡(
ﬁ§_˙f
->
ù_vîsi⁄
 =
AF_INET
) {

233 
uöt32_t
 
√tmask
 = 
	`ht⁄l
(
	`¥efix_to_√tmask4
(
√t
->
¥efix_Àn
));

234 
rv
 = (
ùaddr
->
v4
.
s_addr
 & 
√tmask
Ë=(
√t
->
¥efix
.v4.s_addr &Çetmask);

237 
uöt32_t
 
√tmask
;

238 c⁄° 
uöt32_t
 *
i
 = (c⁄° uöt32_à*)&
ùaddr
->
v6
;

239 c⁄° 
uöt32_t
 *
n
 = (c⁄° uöt32_à*)&
√t
->
¥efix
.
v6
;

240 
¥efix_Àn
;

242 
¥efix_Àn
 = 
√t
->prefix_len;Örefix_len > 32;Örefix_len -= 32) {

243 i‡(*
i
 !*
n
) {

244  
Ál£
;

246 
i
++;

247 
n
++;

250 
√tmask
 = 
	`ht⁄l
(
	`¥efix_to_√tmask4
(
¥efix_Àn
));

251 
rv
 = (*
i
 & 
√tmask
Ë=(*
n
 &Çetmask);

253  
rv
;

254 
	}
}

256 
boﬁ
 
	$is_¥efix_öëgw
(c⁄° 
ﬁ§_ù_¥efix
 *
¥efix
) {

257 i‡(
ﬁ§_˙f
->
ù_vîsi⁄
 =
AF_INET
 && 
	`ù_¥efix_is_v4_öëgw
(
¥efix
)) {

258  
åue
;

260 i‡(
ﬁ§_˙f
->
ù_vîsi⁄
 =
AF_INET6
) {

261 i‡(
	`ù_¥efix_is_v6_öëgw
(
¥efix
Ë|| 
	`ù_¥efix_is_m≠≥dv4_öëgw
(prefix)) {

262  
åue
;

265  
Ál£
;

266 
	}
}

	@src/ipcalc.h

42 #i‚de‡
_IPCALC


43 
	#_IPCALC


	)

45 
	~"ﬁ§_ty≥s.h
"

46 
	~"defs.h
"

48 
	~<limôs.h
>

49 
	~<¨∑/öë.h
>

50 
	~<√töë/ö.h
>

52 c⁄° 
ﬁ§_ù_¥efix
 
ùv4_öã∫ë_rouã
;

53 c⁄° 
ﬁ§_ù_¥efix
 
ùv6_m≠≥dv4_rouã
;

54 c⁄° 
ﬁ§_ù_¥efix
 
ùv6_öã∫ë_rouã
;

56 c⁄° 
ﬁ§_ù_addr
 
ﬁ§_ù_zîo
;

58 c⁄° 
ﬁ§_ù_addr
 
ùv6_def_mu…iˇ°
;

60 
	sùaddr_°r
 {

61 
	mbuf
[
MAX
(
INET6_ADDRSTRLEN
, 
INET_ADDRSTRLEN
)];

62 } 
__©åibuã__
 ((
unu£d
));

67 
INLINE
 

68 
	$ù4cmp
(c⁄° 
ö_addr
 *
a
, c⁄° ö_add∏*
b
)

70  
a
->
s_addr
 > 
b
->s_addr ? +1 :á->s_addr < b->s_addr ? -1 : 0;

71 
	}
}

72 
INLINE
 

73 
	$ù4equÆ
(c⁄° 
ö_addr
 *
a
, c⁄° ö_add∏*
b
)

75  
a
->
s_addr
 =
b
->s_addr;

76 
	}
}

78 
INLINE
 

79 
	$ù6cmp
(c⁄° 
ö6_addr
 *
a
, c⁄° ö6_add∏*
b
)

81  
	`memcmp
(
a
, 
b
, (*a));

82 
	}
}

83 
INLINE
 

84 
	$ù6equÆ
(c⁄° 
ö6_addr
 *
a
, c⁄° ö6_add∏*
b
)

86  
	`ù6cmp
(
a
, 
b
) == 0;

87 
	}
}

89 
INLINE
 

90 
	$ùequÆ
(c⁄° 
ﬁ§_ù_addr
 *
a
, c⁄° ﬁ§_ù_add∏*
b
)

92  
ﬁ§_˙f
->
ù_vîsi⁄
 =
AF_INET
 ? 
	`ù4equÆ
(&
a
->
v4
, &
b
->v4Ë: 
	`ù6equÆ
(&a->
v6
, &b->v6);

93 
	}
}

98 
INLINE
 

99 
	$gíùc›y
(*
d°
, c⁄° *
§c
)

101 
	`mem˝y
(
d°
, 
§c
, 
ﬁ§_˙f
->
ùsize
);

102 
	}
}

104 
ù_ö_√t
(c⁄° 
ﬁ§_ù_addr
 *
ùaddr
, c⁄° 
ﬁ§_ù_¥efix
 *
√t
);

106 
¥efix_to_√tmask
(
uöt8_t
 *, , uint8_t);

108 
INLINE
 

109 
	$ﬁ§_¥efix_to_√tmask
(
ﬁ§_ù_addr
 *
adr
, 
uöt8_t
 
¥efixÀn
)

111  
	`¥efix_to_√tmask
(
adr
->
v6
.
s6_addr
, 
ﬁ§_˙f
->
ùsize
, 
¥efixÀn
);

112 
	}
}

114 
uöt8_t
 
√tmask_to_¥efix
(const uint8_t *, );

116 
INLINE
 
uöt8_t


117 
	$ﬁ§_√tmask_to_¥efix
(c⁄° 
ﬁ§_ù_addr
 *
adr
)

119  
	`√tmask_to_¥efix
(
adr
->
v6
.
s6_addr
, 
ﬁ§_˙f
->
ùsize
);

120 
	}
}

122 
INLINE
 
uöt8_t


123 
	$ﬁ§_√tmask4_to_¥efix
(c⁄° 
uöt32_t
 * 
a
)

125  
	`√tmask_to_¥efix
((c⁄° 
uöt8_t
 *)
a
, (*a));

126 
	}
}

127 
INLINE
 
uöt8_t


128 
	$ﬁ§_√tmask6_to_¥efix
(c⁄° 
ö6_addr
 *
a
)

130  
	`√tmask_to_¥efix
((c⁄° 
uöt8_t
 *)
a
, (*a));

131 
	}
}

133 
INLINE
 const *

134 
	$ù4_to_°rög
(
ùaddr_°r
 *c⁄° 
buf
, c⁄° 
ö_addr
 
addr4
)

136  
	`öë_¡›
(
AF_INET
, &
addr4
, 
buf
->buf, (buf->buf));

137 
	}
}

139 
INLINE
 const *

140 
	$ù6_to_°rög
(
ùaddr_°r
 *c⁄° 
buf
, c⁄° 
ö6_addr
 *c⁄° 
addr6
)

142  
	`öë_¡›
(
AF_INET6
, 
addr6
, 
buf
->buf, (buf->buf));

143 
	}
}

145 
INLINE
 const *

146 
	$ﬁ§_ù_to_°rög
(
ùaddr_°r
 *c⁄° 
buf
, c⁄° 
ﬁ§_ù_addr
 *
addr
)

148  
	`öë_¡›
(
ﬁ§_˙f
->
ù_vîsi⁄
, 
addr
, 
buf
->buf, (buf->buf));

149 
	}
}

152 
ﬁ§_ù_¥efix_to_°rög
(c⁄° 
ﬁ§_ù_¥efix
 *
¥efix
);

155 
ﬁ§_°rög_to_¥efix
(
ùvîsi⁄
, 
ﬁ§_ù_¥efix
 *
d°
, c⁄° *
buf
);

157 
INLINE
 const *

158 
	$sockaddr4_to_°rög
(
ùaddr_°r
 *c⁄° 
buf
, c⁄° 
sockaddr
 *c⁄° 
addr
)

160 c⁄° 
sockaddr_ö
 *
addr4
 = (c⁄° sockaddr_ö *)
	`CONST_ARM_NOWARN_ALIGN
(
addr
);

161  
	`ù4_to_°rög
(
buf
, 
addr4
->
sö_addr
);

162 
	}
}

164 
INLINE
 
boﬁ


165 
	$is_¥efix_niô_ùv6
(c⁄° 
ﬁ§_ù_¥efix
 *
p
) {

166  
ﬁ§_˙f
->
ù_vîsi⁄
 =
AF_INET6
 && 
	`IN6_IS_ADDR_V4MAPPED
(&
p
->
¥efix
.
v6
)

167 && 
p
->
¥efix_Àn
 >
ùv6_m≠≥dv4_rouã
.prefix_len;

168 
	}
}

170 
INLINE
 
ﬁ§_ù_¥efix
 *

171 
	$¥efix_m≠≥dv4_to_v4
(
ﬁ§_ù_¥efix
 *
v4
, c⁄° ﬁ§_ù_¥efix *
v6
) {

172 
	`mem˝y
(&
v4
->
¥efix
.v4, &
v6
->¥efix.v6.
s6_addr
[12], (
ö_addr
));

173 
v4
->
¥efix_Àn
 = 
v6
->prefix_len - 96;

174  
v4
;

175 
	}
}

178 
INLINE
 
boﬁ


179 
	$ù_is_lökloˇl
(c⁄° 
ﬁ§_ù_addr
 *
ù
) {

180  
ﬁ§_˙f
->
ù_vîsi⁄
 =
AF_INET6


181 && 
ù
->
v6
.
s6_addr
[0] == 0xfe && (ip->v6.s6_addr[1] & 0xc0) == 0x80;

182 
	}
}

184 
INLINE
 
boﬁ


185 
	$ù_¥efix_is_m≠≥dv4
(c⁄° 
ﬁ§_ù_¥efix
 *
¥efix
) {

186  
¥efix
->
¥efix_Àn
 >
ùv6_m≠≥dv4_rouã
.prefix_len

187 && 
	`memcmp
(
¥efix
, &
ùv6_m≠≥dv4_rouã
, ipv6_m≠≥dv4_rouã.
¥efix_Àn
 / 8) == 0;

188 
	}
}

190 
INLINE
 
boﬁ


191 
	$ù_¥efix_is_m≠≥dv4_öëgw
(c⁄° 
ﬁ§_ù_¥efix
 *
¥efix
) {

192  
¥efix
->
¥efix_Àn
 =
ùv6_m≠≥dv4_rouã
.prefix_len

193 && 
	`memcmp
(
¥efix
, &
ùv6_m≠≥dv4_rouã
, ipv6_m≠≥dv4_rouã.
¥efix_Àn
 / 8) == 0;

194 
	}
}

196 
INLINE
 
boﬁ


197 
	$ù_¥efix_is_v4_öëgw
(c⁄° 
ﬁ§_ù_¥efix
 *
¥efix
) {

198  
¥efix
->
¥efix_Àn
 =
ùv4_öã∫ë_rouã
.prefix_len

199 && 
¥efix
->¥efix.
v4
.
s_addr
 =
ùv4_öã∫ë_rouã
.prefix.v4.s_addr;

200 
	}
}

202 
INLINE
 
boﬁ


203 
	$ù_¥efix_is_v6_öëgw
(c⁄° 
ﬁ§_ù_¥efix
 *
¥efix
) {

204  
¥efix
->
¥efix_Àn
 =
ùv6_öã∫ë_rouã
.prefix_len

205 && 
	`memcmp
(
¥efix
, &
ùv6_öã∫ë_rouã
, ipv6_öã∫ë_rouã.
¥efix_Àn
/8) == 0;

206 
	}
}

208 
boﬁ
 
is_¥efix_öëgw
(c⁄° 
ﬁ§_ù_¥efix
 *
¥efix
);

	@src/kernel_routes.h

42 #i‚de‡
_OLSR_KERNEL_RT


43 
	#_OLSR_KERNEL_RT


	)

45 
	~"defs.h
"

46 
	~"routög_èbÀ.h
"

48 
ﬁ§_io˘l_add_rouã
(c⁄° 
π_íåy
 *);

50 
ﬁ§_io˘l_add_rouã6
(c⁄° 
π_íåy
 *);

52 
ﬁ§_io˘l_dñ_rouã
(c⁄° 
π_íåy
 *);

54 
ﬁ§_io˘l_dñ_rouã6
(c⁄° 
π_íåy
 *);

56 #ifde‡
LINUX_NETLINK_ROUTING


57 
π√éök_ªgi°î_sockë
();

60 
ﬁ§_os_niô_4to6_rouã
(c⁄° 
ﬁ§_ù_¥efix
 *
d°_v4
, 
boﬁ
 
£t
);

61 
ﬁ§_os_niô_6to4_rouã
(c⁄° 
ﬁ§_ù_¥efix
 *
d°_v6
, 
boﬁ
 
£t
);

62 
ﬁ§_os_öëgw_tu¬ñ_rouã
(
uöt32_t
 
if_idx
, 
boﬁ
 
ùv4
, boﬁ 
£t
);

64 
ﬁ§_os_pﬁicy_ruÀ
(
Ámûy
, 
πèbÀ
, 
uöt32_t
 
¥i‹ôy
, c⁄° *
if_«me
, 
boﬁ
 
£t
);

65 
ﬁ§_os_loˇlho°_if
(
ﬁ§_ù_addr
 *
ù
, 
boﬁ
 
¸óã
);

66 
ﬁ§_os_ifù
(
ifödex
, 
ﬁ§_ù_addr
 *
ù
, 
boﬁ
 
¸óã
);

	@src/kernel_tunnel.h

8 #i‚de‡
KERNEL_TUNNEL_H_


9 
	#KERNEL_TUNNEL_H_


	)

11 
	~<√t/if.h
>

12 #ifde‡
WIN32


14 
	~<ùπrmib.h
>

15 
	#IF_NAMESIZE
 
MAX_INTERFACE_NAME_LEN


	)

18 
	~"defs.h
"

19 
	~"ﬁ§_ty≥s.h
"

20 
	~"comm⁄/avl.h
"

22 
	#TUNNEL_ENDPOINT_IF
 "tu∆0"

	)

23 
	#TUNNEL_ENDPOINT_IF6
 "ù6äl0"

	)

25 
	sﬁ§_ùtu¬ñ_íåy
 {

26 
avl_node
 
	mnode
;

27 
ﬁ§_ù_addr
 
	mèrgë
;

29 
	mif_«me
[
IF_NAMESIZE
];

30 
	mif_ödex
;

32 
	mußge
;

35 
ﬁ§_os_öô_ùtu¬ñ
();

36 
ﬁ§_os_˛ónup_ùtu¬ñ
();

38 
ﬁ§_ùtu¬ñ_íåy
 *
ﬁ§_os_add_ùù_tu¬ñ
(
ﬁ§_ù_addr
 *
èrgë
, 
boﬁ
 
å™•‹tV4
);

39 
ﬁ§_os_dñ_ùù_tu¬ñ
(
ﬁ§_ùtu¬ñ_íåy
 *);

	@src/link_set.c

45 
	~<as£π.h
>

47 
	~"defs.h
"

48 
	~"lök_£t.h
"

49 
	~"hy°îesis.h
"

50 
	~"mid_£t.h
"

51 
	~"m¥.h
"

52 
	~"√ighb‹_èbÀ.h
"

53 
	~"ﬁ§.h
"

54 
	~"log.h
"

55 
	~"scheduÀr.h
"

56 
	~"ﬁ§_•f.h
"

57 
	~"√t_ﬁ§.h
"

58 
	~"ùˇlc.h
"

59 
	~"lq_∂ugö.h
"

62 
li°_node
 
	glök_íåy_hód
;

64 
boﬁ
 
	glök_ch™ges
;

67 
	$sig«l_lök_ch™ges
(
boﬁ
 
vÆ
)

69 
lök_ch™ges
 = 
vÆ
;

70 
	}
}

73 
check_lök_°©us
(c⁄° 
hñlo_mesßge
 *
mesßge
, c⁄° 
öãrÁ˚
 *
ö_if
);

74 
lök_íåy
 *
add_lök_íåy
(c⁄° 
ﬁ§_ù_addr
 *, const olsr_ip_addr *, const olsr_ip_addr *,

75 
ﬁ§_ª…ime
, ol§_ª…ime, c⁄° 
öãrÁ˚
 *);

76 
gë_√ighb‹_°©us
(c⁄° 
ﬁ§_ù_addr
 *);

77 
ﬁ§_expúe_lök_sym_timî
(*
c⁄ãxt
);

80 
	$ﬁ§_öô_lök_£t
()

84 
	`li°_hód_öô
(&
lök_íåy_hód
);

85 
	}
}

92 
	$ﬁ§_ª£t_Æl_löks
() {

93 
lök_íåy
 *
lök
;

95 
	`OLSR_FOR_ALL_LINK_ENTRIES
(
lök
) {

96 
lök
->
ASYM_time
 = 
now_times
-1;

98 
	`ﬁ§_°›_timî
(
lök
->
lök_sym_timî
);

99 
lök
->
lök_sym_timî
 = 
NULL
;

101 
lök
->
√ighb‹
->
is_m¥
 = 
Ál£
;

102 
lök
->
√ighb‹
->
°©us
 = 
NOT_SYM
;

103 } 
	`OLSR_FOR_ALL_LINK_ENTRIES_END
(
lök
)

106 
	`OLSR_FOR_ALL_LINK_ENTRIES
(
lök
) {

107 
	`ﬁ§_expúe_lök_sym_timî
(
lök
);

108 
	`ﬁ§_˛ór_hñlo_lq
(
lök
);

109 } 
	`OLSR_FOR_ALL_LINK_ENTRIES_END
(
lök
)

110 
	}
}

120 
	$lookup_lök_°©us
(c⁄° 
lök_íåy
 *
íåy
)

123 i‡(
íåy
 =
NULL
 || 
	`li°_is_em±y
(&
lök_íåy_hód
)) {

124  
UNSPEC_LINK
;

130 i‡(
ﬁ§_˙f
->
u£_hy°îesis
) {

137 i‡(!
	`TIMED_OUT
(
íåy
->
L_LOST_LINK_time
)) {

138  
LOST_LINK
;

145 i‡(
íåy
->
L_lök_≥ndög
 == 1) {

146 #i‚de‡
NODEBUG


147 
ùaddr_°r
 
buf
;

148 
	`OLSR_PRINTF
(3, "HYST[%s]: SëtögÅÿHIDE\n", 
	`ﬁ§_ù_to_°rög
(&
buf
, &
íåy
->
√ighb‹_iÁ˚_addr
));

150  
HIDE_LINK
;

160 i‡(
íåy
->
lök_sym_timî
) {

161  
SYM_LINK
;

164 i‡(!
	`TIMED_OUT
(
íåy
->
ASYM_time
)) {

165  
ASYM_LINK
;

168  
LOST_LINK
;

169 
	}
}

178 
	$gë_√ighb‹_°©us
(c⁄° 
ﬁ§_ù_addr
 *
addªss
)

180 c⁄° 
ﬁ§_ù_addr
 *
maö_addr
;

181 
öãrÁ˚
 *
ifs
;

184 i‡(!(
maö_addr
 = 
	`mid_lookup_maö_addr
(
addªss
)))

185 
maö_addr
 = 
addªss
;

188 
ifs
 = 
i‚ë
; if†!
NULL
; if†ifs->
öt_√xt
) {

189 
mid_addªss
 *
Æü£s
;

190 
lök_íåy
 *
 k
 = 
	`lookup_lök_íåy
(
maö_addr
, 
NULL
, 
ifs
);

192 i‡(
 k
 !
NULL
) {

193 i‡(
	`lookup_lök_°©us
(
 k
Ë=
SYM_LINK
)

194  
SYM_LINK
;

198 
Æü£s
 = 
	`mid_lookup_Æü£s
(
maö_addr
);álü£†!
NULL
;álü£†Æü£s->
√xt_Æüs
) {

200 
 k
 = 
	`lookup_lök_íåy
(&
Æü£s
->
Æüs
, 
NULL
, 
ifs
);

201 i‡(
 k
 && (
	`lookup_lök_°©us
÷nkË=
SYM_LINK
)) {

202  
SYM_LINK
;

208 
	}
}

213 
lök_íåy
 *

214 
	$gë_be°_lök_to_√ighb‹
(c⁄° 
ﬁ§_ù_addr
 *
ªmŸe
)

216 c⁄° 
ﬁ§_ù_addr
 *
maö_addr
;

217 
lök_íåy
 *
wÆkî
, *
good_lök
, *
backup_lök
;

218 
öãrÁ˚
 *
tmp_if
;

219 
cuº_mëric
 = 
MAX_IF_METRIC
;

220 
ﬁ§_lökco°
 
cuº_lco°
 = 
LINK_COST_BROKEN
;

221 
ﬁ§_lökco°
 
tmp_lc
;

224 
maö_addr
 = 
	`mid_lookup_maö_addr
(
ªmŸe
);

227 i‡(!
maö_addr
) {

228 
maö_addr
 = 
ªmŸe
;

232 
good_lök
 = 
NULL
;

233 
backup_lök
 = 
NULL
;

236 
	`OLSR_FOR_ALL_LINK_ENTRIES
(
wÆkî
) {

239 i‡(!
	`ùequÆ
(&
wÆkî
->
√ighb‹
->
√ighb‹_maö_addr
, 
maö_addr
))

242 i‡(
ﬁ§_˙f
->
lq_Àvñ
 == 0) {

252 
tmp_if
 = 
wÆkî
->
if_«me
 ? 
	`if_ifwôh«me
(wÆkî->if_«meË: 
	`if_ifwôhaddr
(&wÆkî->
loˇl_iÁ˚_addr
);

254 i‡(!
tmp_if
) {

262 i‡((
tmp_if
->
öt_mëric
 < 
cuº_mëric
Ë|| (—mp_if->öt_mëri¯=cuº_mëricË&& 
	`ùequÆ
(&
wÆkî
->
loˇl_iÁ˚_addr
, 
ªmŸe
))) {

265 
cuº_mëric
 = 
tmp_if
->
öt_mëric
;

268 i‡(
	`lookup_lök_°©us
(
wÆkî
Ë=
SYM_LINK
) {

269 
good_lök
 = 
wÆkî
;

271 
backup_lök
 = 
wÆkî
;

281 
tmp_lc
 = 
wÆkî
->
lökco°
;

287 i‡((
tmp_lc
 < 
cuº_lco°
Ë|| (—mp_l¯=cuº_lco°Ë&& 
	`ùequÆ
(&
wÆkî
->
loˇl_iÁ˚_addr
, 
ªmŸe
))) {

290 
cuº_lco°
 = 
tmp_lc
;

293 i‡(
	`lookup_lök_°©us
(
wÆkî
Ë=
SYM_LINK
) {

294 
good_lök
 = 
wÆkî
;

296 
backup_lök
 = 
wÆkî
;

301 
	`OLSR_FOR_ALL_LINK_ENTRIES_END
(
wÆkî
);

306  
good_lök
 ? good_lök : 
backup_lök
;

307 
	}
}

310 
	$£t_loss_lök_mu…ùlõr
(
lök_íåy
 *
íåy
)

312 
öãrÁ˚
 *
öãr
;

313 
ﬁ§_if
 *
cfg_öãr
;

314 
ﬁ§_lq_mu…
 *
mu…
;

315 
uöt32_t
 
vÆ
 = 0;

316 
ﬁ§_ù_addr
 
nuŒ_addr
;

317 
ùaddr_°r
 
buf
;

320 
	`as£π
(
íåy
->
if_«me
);

321 
öãr
 = 
	`if_ifwôh«me
(
íåy
->
if_«me
);

324 
cfg_öãr
 = 
ﬁ§_˙f
->
öãrÁ˚s
; cfg_öãr; cfg_öã∏cfg_öãr->
√xt
) {

325 i‡(
cfg_öãr
->
öãrf
 =
öãr
) {

331 
	`mem£t
(&
nuŒ_addr
, 0, (
ﬁ§_ù_addr
));

334 
mu…
 = 
cfg_öãr
->
˙f
->
lq_mu…
; mu… !
NULL
; mu… = mu…->
√xt
) {

340 i‡((
	`ùequÆ
(&
mu…
->
addr
, &
nuŒ_addr
Ë&& 
vÆ
 =0Ë|| i≥quÆ(&mu…->addr, &
íåy
->
√ighb‹_iÁ˚_addr
)) {

341 
vÆ
 = 
mu…
->
vÆue
;

346 i‡(
vÆ
 == 0) {

347 
vÆ
 = 
LINK_LOSS_MULTIPLIER
;

351 
íåy
->
loss_lök_mu…ùlõr
 = 
vÆ
;

353 
	`OLSR_PRINTF
(1, "SetÜinkloss multiplier for %s on %sÅo %d\n",

354 
	`ﬁ§_ù_to_°rög
(&
buf
, &
íåy
->
√ighb‹_iÁ˚_addr
), 
cfg_öãr
->
«me
, 
vÆ
);

355 
	}
}

361 
	$ﬁ§_dñëe_lök_íåy
(
lök_íåy
 *
lök
)

363 
tc_edge_íåy
 *
tc_edge
;

366 
tc_edge
 = 
	`ﬁ§_lookup_tc_edge
(
tc_my£lf
, &
lök
->
√ighb‹_iÁ˚_addr
);

367 i‡(
tc_edge
 !
NULL
) {

368 
	`ﬁ§_dñëe_tc_edge_íåy
(
tc_edge
);

373 i‡(
lök
->
√ighb‹
->
lökcou¡
 == 1) {

374 
	`ﬁ§_dñëe_√ighb‹_èbÀ
(&
lök
->
√ighb‹
->
√ighb‹_maö_addr
);

376 
lök
->
√ighb‹
->
lökcou¡
--;

380 
	`ﬁ§_°›_timî
(
lök
->
lök_timî
);

381 
lök
->
lök_timî
 = 
NULL
;

382 
	`ﬁ§_°›_timî
(
lök
->
lök_sym_timî
);

383 
lök
->
lök_sym_timî
 = 
NULL
;

384 
	`ﬁ§_°›_timî
(
lök
->
lök_hñlo_timî
);

385 
lök
->
lök_hñlo_timî
 = 
NULL
;

386 
	`ﬁ§_°›_timî
(
lök
->
lök_loss_timî
);

387 
lök
->
lök_loss_timî
 = 
NULL
;

388 
	`li°_ªmove
(&
lök
->
lök_li°
);

390 
	`‰ì
(
lök
->
if_«me
);

391 
	`‰ì
(
lök
);

393 
ch™ges_√ighb‹hood
 = 
åue
;

394 
	}
}

400 
	$ﬁ§_dñëe_lök_íåy_by_ù
(c⁄° 
ﬁ§_ù_addr
 *
öt_addr
)

402 
lök_íåy
 *
lök
;

404 i‡(
	`li°_is_em±y
(&
lök_íåy_hód
)) {

408 
	`OLSR_FOR_ALL_LINK_ENTRIES
(
lök
) {

409 i‡(
	`ùequÆ
(
öt_addr
, &
lök
->
loˇl_iÁ˚_addr
)) {

410 
	`ﬁ§_dñëe_lök_íåy
(
lök
);

413 
	`OLSR_FOR_ALL_LINK_ENTRIES_END
(
lök
);

414 
	}
}

421 
	$ﬁ§_expúe_lök_loss_timî
(*
c⁄ãxt
)

423 
lök_íåy
 *
lök
;

425 
lök
 = (
lök_íåy
 *)
c⁄ãxt
;

428 
	`ﬁ§_upd©e_∑ckë_loss_w‹kî
(
lök
, 
åue
);

431 
	`ﬁ§_ch™ge_timî
(
lök
->
lök_loss_timî
,Üök->
loss_hñloöt
, 
OLSR_LINK_LOSS_JITTER
, 
OLSR_TIMER_PERIODIC
);

432 
	}
}

439 
	$ﬁ§_expúe_lök_sym_timî
(*
c⁄ãxt
)

441 
lök_íåy
 *
lök
;

443 
lök
 = (
lök_íåy
 *)
c⁄ãxt
;

444 
lök
->
lök_sym_timî
 = 
NULL
;

446 i‡(
lök
->
¥ev_°©us
 !
SYM_LINK
) {

450 
lök
->
¥ev_°©us
 = 
	`lookup_lök_°©us
(link);

451 
	`upd©e_√ighb‹_°©us
(
lök
->
√ighb‹
, 
	`gë_√ighb‹_°©us
(&lök->
√ighb‹_iÁ˚_addr
));

452 
ch™ges_√ighb‹hood
 = 
åue
;

453 
	}
}

459 
	$ﬁ§_expúe_lök_hñlo_timî
(*
c⁄ãxt
)

461 
ùaddr_°r
 
buf
;

462 
lök_íåy
 *
lök
;

464 
lök
 = (
lök_íåy
 *)
c⁄ãxt
;

466 
lök
->
L_lök_quÆôy
 = 
	`ﬁ§_hy°_ˇlc_ö°abûôy
(link->L_link_quality);

468 
	`OLSR_PRINTF
(1, "HYST[%s] HELLOÅimeouà%f\n", 
	`ﬁ§_ù_to_°rög
(&
buf
, &
lök
->
√ighb‹_iÁ˚_addr
),Üök->
L_lök_quÆôy
);

471 
	`ﬁ§_ch™ge_timî
(
lök
->
lök_hñlo_timî
,Üök->
œ°_htime
, 
OLSR_LINK_JITTER
, 
OLSR_TIMER_PERIODIC
);

474 
	`ﬁ§_¥o˚ss_hy°îesis
(
lök
);

477 
	`upd©e_√ighb‹_°©us
(
lök
->
√ighb‹
, 
	`gë_√ighb‹_°©us
(&lök->
√ighb‹_iÁ˚_addr
));

480 
lök
->
ﬁ§_£qno
++;

481 
	}
}

487 
	$ﬁ§_expúe_lök_íåy
(*
c⁄ãxt
)

489 
lök_íåy
 *
lök
;

491 
lök
 = (
lök_íåy
 *)
c⁄ãxt
;

492 
lök
->
lök_timî
 = 
NULL
;

494 
	`ﬁ§_dñëe_lök_íåy
(
lök
);

495 
	}
}

501 
	$ﬁ§_£t_lök_timî
(
lök_íåy
 *
lök
, 
ªl_timî
)

503 
ùaddr_°r
 
buf
;

505 
	`OLSR_PRINTF
(3, "resetÜinkÅimer: %s = %u\n",

506 
	`ﬁ§_ù_to_°rög
(&
buf
, &
lök
->
√ighb‹_iÁ˚_addr
),

507 ()(
now_times
 + 
ªl_timî
/1000));

508 
	`ﬁ§_£t_timî
(&
lök
->
lök_timî
, 
ªl_timî
, 
OLSR_LINK_JITTER
, 
OLSR_TIMER_ONESHOT
, &
ﬁ§_expúe_lök_íåy
,Üink, 0);

509 
	}
}

523 
lök_íåy
 *

524 
	$add_lök_íåy
(c⁄° 
ﬁ§_ù_addr
 *
loˇl
, c⁄° ﬁ§_ù_add∏*
ªmŸe
, c⁄° ﬁ§_ù_add∏*
ªmŸe_maö
,

525 
ﬁ§_ª…ime
 
vtime
, ol§_ª…imê
htime
, c⁄° 
öãrÁ˚
 *
loˇl_if
)

527 
lök_íåy
 *
√w_lök
;

528 
√ighb‹_íåy
 *
√ighb‹
;

529 
lök_íåy
 *
tmp_lök_£t
;

531 
tmp_lök_£t
 = 
	`lookup_lök_íåy
(
ªmŸe
, 
ªmŸe_maö
, 
loˇl_if
);

532 i‡(
tmp_lök_£t
) {

533  
tmp_lök_£t
;

541 #ifde‡
DEBUG


543 
ùaddr_°r
 
loˇlbuf
, 
ªmbuf
;

544 
	`OLSR_PRINTF
(1, "Addög %s=>%†tÿlök së\n", 
	`ﬁ§_ù_to_°rög
(&
loˇlbuf
, 
loˇl
), ol§_ù_to_°rög(&
ªmbuf
, 
ªmŸe
));

549 
√w_lök
 = 
	`ﬁ§_mÆloc_lök_íåy
("newÜinkÉntry");

552 i‡(
loˇl_if
->
öt_«me
) {

553 
size_t
 
«me_size
 = 
	`°æí
(
loˇl_if
->
öt_«me
) + 1;

554 
√w_lök
->
if_«me
 = 
	`ﬁ§_mÆloc
(
«me_size
, "target of if_name inÇewÜinkÉntry");

555 
	`°rs˝y
(
√w_lök
->
if_«me
, 
loˇl_if
->
öt_«me
, 
«me_size
);

557 
√w_lök
->
if_«me
 = 
NULL
;

560 
√w_lök
->
öãr
 = 
loˇl_if
;

566 
√w_lök
->
loˇl_iÁ˚_addr
 = *
loˇl
;

569 
√w_lök
->
√ighb‹_iÁ˚_addr
 = *
ªmŸe
;

572 
	`ﬁ§_£t_lök_timî
(
√w_lök
, 
vtime
);

574 
√w_lök
->
¥ev_°©us
 = 
ASYM_LINK
;

577 i‡(
ﬁ§_˙f
->
u£_hy°îesis
) {

578 
√w_lök
->
L_lök_≥ndög
 = 1;

579 
√w_lök
->
L_LOST_LINK_time
 = 
	`GET_TIMESTAMP
(
vtime
);

580 
	`ﬁ§_upd©e_hy°îesis_hñlo
(
√w_lök
, 
htime
);

581 
√w_lök
->
œ°_htime
 = 
htime
;

582 
√w_lök
->
ﬁ§_£qno
 = 0;

583 
√w_lök
->
ﬁ§_£qno_vÆid
 = 
Ál£
;

586 
√w_lök
->
L_lök_quÆôy
 = 0.0;

588 i‡(
ﬁ§_˙f
->
lq_Àvñ
 > 0) {

589 
√w_lök
->
loss_hñloöt
 = 
htime
;

591 
	`ﬁ§_£t_timî
(&
√w_lök
->
lök_loss_timî
, 
htime
 + htimê/ 2, 
OLSR_LINK_LOSS_JITTER
, 
OLSR_TIMER_PERIODIC
,

592 &
ﬁ§_expúe_lök_loss_timî
, 
√w_lök
, 0);

594 
	`£t_loss_lök_mu…ùlõr
(
√w_lök
);

597 
√w_lök
->
lökco°
 = 
LINK_COST_BROKEN
;

600 
	`li°_add_bef‹e
(&
lök_íåy_hód
, &
√w_lök
->
lök_li°
);

607 
√ighb‹
 = 
	`ﬁ§_lookup_√ighb‹_èbÀ
(
ªmŸe_maö
);

608 i‡(!
√ighb‹
) {

609 #ifde‡
DEBUG


610 
ùaddr_°r
 
buf
;

611 
	`OLSR_PRINTF
(3, "ADDING NEW NEIGHBOR ENTRY %†FROM LINK SET\n", 
	`ﬁ§_ù_to_°rög
(&
buf
, 
ªmŸe_maö
));

613 
√ighb‹
 = 
	`ﬁ§_ö£π_√ighb‹_èbÀ
(
ªmŸe_maö
);

616 
√ighb‹
->
lökcou¡
++;

617 
√w_lök
->
√ighb‹
 =Çeighbor;

619  
√w_lök
;

620 
	}
}

629 
	$check_√ighb‹_lök
(c⁄° 
ﬁ§_ù_addr
 *
öt_addr
)

631 
lök_íåy
 *
lök
;

633 
	`OLSR_FOR_ALL_LINK_ENTRIES
(
lök
) {

634 i‡(
	`ùequÆ
(
öt_addr
, &
lök
->
√ighb‹_iÁ˚_addr
)) {

635  
	`lookup_lök_°©us
(
lök
);

638 
	`OLSR_FOR_ALL_LINK_ENTRIES_END
(
lök
);

640  
UNSPEC_LINK
;

641 
	}
}

651 
lök_íåy
 *

652 
	$lookup_lök_íåy
(c⁄° 
ﬁ§_ù_addr
 *
ªmŸe
, c⁄° ﬁ§_ù_add∏*
ªmŸe_maö
, c⁄° 
öãrÁ˚
 *
loˇl
)

654 
lök_íåy
 *
lök
;

656 
	`OLSR_FOR_ALL_LINK_ENTRIES
(
lök
) {

657 i‡(
	`ùequÆ
(
ªmŸe
, &
lök
->
√ighb‹_iÁ˚_addr
)

658 && (
lök
->
if_«me
 ? !
	`°rcmp
÷ök->if_«me, 
loˇl
->
öt_«me
Ë: 
	`ùequÆ
(&loˇl->
ù_addr
, &lök->
loˇl_iÁ˚_addr
))) {

660 i‡(
NULL
 !
ªmŸe_maö
 && !
	`ùequÆ
‘emŸe_maö, &
lök
->
√ighb‹
->
√ighb‹_maö_addr
)) {

662 
ùaddr_°r
 
ﬁdbuf
, 
√wbuf
;

664 
	`OLSR_PRINTF
(1, "Neighbor changed main_ip, updating %s -> %s\n",

665 
	`ﬁ§_ù_to_°rög
(&
ﬁdbuf
, &
lök
->
√ighb‹
->
√ighb‹_maö_addr
), ol§_ù_to_°rög(&
√wbuf
, 
ªmŸe_maö
));

666 
	`ﬁ§_upd©e_√ighb‹_maö_addr
(
lök
->
√ighb‹
, 
ªmŸe_maö
);

668  
lök
;

671 
	`OLSR_FOR_ALL_LINK_ENTRIES_END
(
lök
);

673  
NULL
;

674 
	}
}

687 
lök_íåy
 *

688 
	$upd©e_lök_íåy
(c⁄° 
ﬁ§_ù_addr
 *
loˇl
, c⁄° ﬁ§_ù_add∏*
ªmŸe
, c⁄° 
hñlo_mesßge
 *
mesßge
,

689 c⁄° 
öãrÁ˚
 *
ö_if
)

691 
lök_íåy
 *
íåy
;

694 
íåy
 = 
	`add_lök_íåy
(
loˇl
, 
ªmŸe
, &
mesßge
->
sour˚_addr
, mesßge->
vtime
, mesßge->
htime
, 
ö_if
);

697 
íåy
->
vtime
 = 
mesßge
->vtime;

698 
íåy
->
ASYM_time
 = 
	`GET_TIMESTAMP
(
mesßge
->
vtime
);

700 
íåy
->
¥ev_°©us
 = 
	`check_lök_°©us
(
mesßge
, 
ö_if
);

702 
íåy
->
¥ev_°©us
) {

703 (
LOST_LINK
):

704 
	`ﬁ§_°›_timî
(
íåy
->
lök_sym_timî
);

705 
íåy
->
lök_sym_timî
 = 
NULL
;

707 (
SYM_LINK
):

708 (
ASYM_LINK
):

711 
	`ﬁ§_£t_timî
(&
íåy
->
lök_sym_timî
, 
mesßge
->
vtime
, 
OLSR_LINK_SYM_JITTER
, 
OLSR_TIMER_ONESHOT
, &
ﬁ§_expúe_lök_sym_timî
,

712 
íåy
, 0);

715 
	`ﬁ§_£t_lök_timî
(
íåy
, 
mesßge
->
vtime
 + 
NEIGHB_HOLD_TIME
 * 
MSEC_PER_SEC
);

721 i‡(
íåy
->
lök_timî
 && (íåy->lök_timî->
timî_˛ock
 <É¡ry->
ASYM_time
)) {

722 
	`ﬁ§_£t_lök_timî
(
íåy
, 
	`TIME_DUE
”¡ry->
ASYM_time
));

726 i‡(
ﬁ§_˙f
->
u£_hy°îesis
)

727 
	`ﬁ§_¥o˚ss_hy°îesis
(
íåy
);

730 
	`upd©e_√ighb‹_°©us
(
íåy
->
√ighb‹
, 
	`gë_√ighb‹_°©us
(
ªmŸe
));

732  
íåy
;

733 
	}
}

745 
	$ª∂a˚_√ighb‹_lök_£t
(c⁄° 
√ighb‹_íåy
 *
ﬁd
, √ighb‹_íåy *
√w
)

747 
lök_íåy
 *
lök
;

748 
ªtvÆ
 = 0;

750 i‡(
	`li°_is_em±y
(&
lök_íåy_hód
)) {

751  
ªtvÆ
;

754 
	`OLSR_FOR_ALL_LINK_ENTRIES
(
lök
) {

756 i‡(
lök
->
√ighb‹
 =
ﬁd
) {

757 
lök
->
√ighb‹
 = 
√w
;

758 
ªtvÆ
++;

761 
	`OLSR_FOR_ALL_LINK_ENTRIES_END
(
lök
);

763  
ªtvÆ
;

764 
	}
}

775 
	$check_lök_°©us
(c⁄° 
hñlo_mesßge
 *
mesßge
, c⁄° 
öãrÁ˚
 *
ö_if
)

777 
ªt
 = 
UNSPEC_LINK
;

778 
hñlo_√ighb‹
 *
√ighb‹s
;

780 
√ighb‹s
 = 
mesßge
->neighbors;

781 
√ighb‹s
) {

787 i‡(
	`ùequÆ
(&
√ighb‹s
->
addªss
, &
ö_if
->
ù_addr
) &&

788 
√ighb‹s
->
lök
 !
UNSPEC_LINK
) {

789 
ªt
 = 
√ighb‹s
->
lök
;

790 i‡(
SYM_LINK
 =
ªt
) {

794 
√ighb‹s
 =Çeighb‹s->
√xt
;

797  
ªt
;

798 
	}
}

801 
	$ﬁ§_¥öt_lök_£t
()

803 #i‚de‡
NODEBUG


805 
lök_íåy
 *
wÆkî
;

806 c⁄° 
addrsize
 = 
ﬁ§_˙f
->
ù_vîsi⁄
 =
AF_INET
 ? 15 : 39;

808 
	`OLSR_PRINTF
(0, "\n--- %†---------------------------------------------------- LINKS\n\n", 
	`ﬁ§_wÆl˛ock_°rög
());

809 
	`OLSR_PRINTF
(1, "%-*† %-6†%-14†%s\n", 
addrsize
, "IPáddress", "hyst", " LQ ", "ETX");

811 
	`OLSR_FOR_ALL_LINK_ENTRIES
(
wÆkî
) {

813 
ùaddr_°r
 
buf
;

814 
lqãxtbuf„r
 
lqbuf„r1
, 
lqbuf„r2
;

815 
	`OLSR_PRINTF
(1, "%-*† %5.3‡ %-14†%s\n", 
addrsize
, 
	`ﬁ§_ù_to_°rög
(&
buf
, &
wÆkî
->
√ighb‹_iÁ˚_addr
),

816 
wÆkî
->
L_lök_quÆôy
, 
	`gë_lök_íåy_ãxt
(wÆkî, '/', &
lqbuf„r1
), 
	`gë_lökco°_ãxt
(wÆkî->
lökco°
,

817 
Ál£
, &
lqbuf„r2
));

818 } 
	`OLSR_FOR_ALL_LINK_ENTRIES_END
(
wÆkî
);

820 
	}
}

827 
	$ﬁ§_upd©e_∑ckë_loss_hñlo_öt
(
lök_íåy
 *
íåy
, 
ﬁ§_ª…ime
 
loss_hñlo_öt
)

829 
íåy
->
loss_hñloöt
 = 
loss_hñlo_öt
;

830 
	}
}

833 
	$ﬁ§_ª˚ived_hñlo_h™dÀr
(
lök_íåy
 *
íåy
)

835 
	`ﬁ§_upd©e_∑ckë_loss_w‹kî
(
íåy
, 
Ál£
);

838 
	`ﬁ§_£t_timî
(&
íåy
->
lök_loss_timî
,É¡ry->
loss_hñloöt
 +É¡ry->loss_hñloöà/ 2, 
OLSR_LINK_LOSS_JITTER
,

839 
OLSR_TIMER_PERIODIC
, &
ﬁ§_expúe_lök_loss_timî
, 
íåy
, 0);

840 
	}
}

	@src/link_set.h

46 #i‚de‡
_LINK_SET_H


47 
	#_LINK_SET_H


	)

49 
	~"lq_∂ugö.h
"

50 
	~"∑ckë.h
"

51 
	~"comm⁄/li°.h
"

52 
	~"m™tisß.h
"

54 
	#MID_ALIAS_HACK_VTIME
 10.0

	)

56 
	#LINK_LOSS_MULTIPLIER
 (1<<16)

	)

58 
	slök_íåy
 {

59 
ﬁ§_ù_addr
 
	mloˇl_iÁ˚_addr
;

60 
ﬁ§_ù_addr
 
	m√ighb‹_iÁ˚_addr
;

61 c⁄° 
öãrÁ˚
 *
	möãr
;

62 *
	mif_«me
;

63 
timî_íåy
 *
	mlök_timî
;

64 
timî_íåy
 *
	mlök_sym_timî
;

65 
uöt32_t
 
	mASYM_time
;

66 
ﬁ§_ª…ime
 
	mvtime
;

67 
√ighb‹_íåy
 *
	m√ighb‹
;

68 
uöt8_t
 
	m¥ev_°©us
;

73 
	mL_lök_quÆôy
;

74 
	mL_lök_≥ndög
;

75 
uöt32_t
 
	mL_LOST_LINK_time
;

76 
timî_íåy
 *
	mlök_hñlo_timî
;

77 
ﬁ§_ª…ime
 
	mœ°_htime
;

78 
boﬁ
 
	mﬁ§_£qno_vÆid
;

79 
uöt16_t
 
	mﬁ§_£qno
;

84 
ﬁ§_ª…ime
 
	mloss_hñloöt
;

85 
timî_íåy
 *
	mlök_loss_timî
;

88 
uöt32_t
 
	mloss_lök_mu…ùlõr
;

91 
ﬁ§_lökco°
 
	mlökco°
;

93 
li°_node
 
	mlök_li°
;

94 
uöt32_t
 
	mlökquÆôy
[0];

98 
LISTNODE2STRUCT
(
li°2lök
, 
lök_íåy
, 
lök_li°
);

100 
	#OLSR_LINK_JITTER
 5

	)

101 
	#OLSR_LINK_HELLO_JITTER
 0

	)

102 
	#OLSR_LINK_SYM_JITTER
 0

	)

103 
	#OLSR_LINK_LOSS_JITTER
 0

	)

106 
	#OLSR_FOR_ALL_LINK_ENTRIES
(
lök
) \

108 
li°_node
 *
lök_hód_node
, *
lök_node
, *
√xt_lök_node
; \

109 
lök_hód_node
 = &
lök_íåy_hód
; \

110 
lök_node
 = 
lök_hód_node
->
√xt
; \

111 
lök_node
 !
lök_hód_node
;Üök_nodê
√xt_lök_node
) { \

112 
√xt_lök_node
 = 
lök_node
->
√xt
; \

113 
lök
 = 
	`li°2lök
(
lök_node
);

	)

114 
	#OLSR_FOR_ALL_LINK_ENTRIES_END
(
lök
Ë}}

	)

117 
li°_node
 
lök_íåy_hód
;

118 
boﬁ
 
lök_ch™ges
;

122 
ﬁ§_£t_lök_timî
(
lök_íåy
 *, );

123 
ﬁ§_öô_lök_£t
();

124 
ﬁ§_ª£t_Æl_löks
();

125 
ﬁ§_dñëe_lök_íåy_by_ù
(c⁄° 
ﬁ§_ù_addr
 *);

126 
ﬁ§_expúe_lök_hñlo_timî
(*);

127 
sig«l_lök_ch™ges
(
boﬁ
);

129 
lök_íåy
 *
gë_be°_lök_to_√ighb‹
(c⁄° 
ﬁ§_ù_addr
 *);

131 
lök_íåy
 *
lookup_lök_íåy
(c⁄° 
ﬁ§_ù_addr
 *, c⁄° ﬁ§_ù_add∏*
ªmŸe_maö
, c⁄° 
öãrÁ˚
 *);

133 
lök_íåy
 *
upd©e_lök_íåy
(c⁄° 
ﬁ§_ù_addr
 *, c⁄° ﬁ§_ù_add∏*, c⁄° 
hñlo_mesßge
 *,

134 c⁄° 
öãrÁ˚
 *);

136 
check_√ighb‹_lök
(c⁄° 
ﬁ§_ù_addr
 *);

137 
ª∂a˚_√ighb‹_lök_£t
(c⁄° 
√ighb‹_íåy
 *, neighbor_entry *);

138 
lookup_lök_°©us
(c⁄° 
lök_íåy
 *);

139 
ﬁ§_upd©e_∑ckë_loss_hñlo_öt
(
lök_íåy
 *, 
ﬁ§_ª…ime
);

140 
ﬁ§_ª˚ived_hñlo_h™dÀr
(
lök_íåy
 *
íåy
);

141 
ﬁ§_¥öt_lök_£t
();

	@src/linux/apm.c

47 
	~"≠m.h
"

48 
	~"defs.h
"

49 
	~<°dio.h
>

50 
	~<°rög.h
>

51 
	~<°dlib.h
>

55 
	#APM_PROC
 "/¥oc/≠m"

	)

57 
	slöux_≠m_öfo
 {

58 
	mdrivî_vîsi⁄
[10];

59 
	m≠m_vîsi⁄_maj‹
;

60 
	m≠m_vîsi⁄_mö‹
;

61 
	m≠m_Êags
;

62 
	mac_löe_°©us
;

63 
	mb©ãry_°©us
;

64 
	mb©ãry_Êags
;

65 
	mb©ãry_≥r˚¡age
;

66 
	mb©ãry_time
;

67 
	musög_möuãs
;

71 c⁄° *c⁄° 
	ga˝i_öfo
[] = {

79 c⁄° *c⁄° 
	ga˝i_°©e
[] = {

87 
	#ACPI_BT_CNT
 
	`ARRAYSIZE
(
a˝i_°©e
)

	)

89 c⁄° *c⁄° 
	ga˝i_ac
[] = {

95 
	#ACPI_AC_CNT
 
	`ARRAYSIZE
(
a˝i_ac
)

	)

97 
	#USE_APM
 1

	)

98 
	#USE_ACPI
 2

	)

100 
	gmëhod
;

102 
	gfd_ödex
;

104 
	gac_powî_⁄
;

108 
≠m_ªad_≠m
(
ﬁ§_≠m_öfo
 *);

110 
≠m_ªad_a˝i
(
ﬁ§_≠m_öfo
 *);

112 
a˝i_¥obe
();

115 
	$≠m_öô
()

117 
ﬁ§_≠m_öfo
 
aöfo
;

119 
mëhod
 = -1;

120 
	`OLSR_PRINTF
(3, "Initializing APM\n");

122 i‡((((
fd_ödex
 = 
	`a˝i_¥obe
()Ë>0Ë|| 
ac_powî_⁄
Ë&& 
	`≠m_ªad_a˝i
(&
aöfo
))

123 
mëhod
 = 
USE_ACPI
;

124 i‡(
	`≠m_ªad_≠m
(&
aöfo
))

125 
mëhod
 = 
USE_APM
;

127 i‡(
mëhod
 != -1)

128 
	`≠m_¥ötöfo
(&
aöfo
);

130  
mëhod
;

131 
	}
}

134 
	$≠m_¥ötöfo
(
ﬁ§_≠m_öfo
 *
aöfo
)

136 
	`OLSR_PRINTF
(5, "APM info:\n\tAC sètu†%d\n\tB©ãryÖî˚¡agê%d%%\n\tB©ãryÅimêÀ· %d mös\n\n", 
aöfo
->
ac_löe_°©us
,

137 
aöfo
->
b©ãry_≥r˚¡age
,áöfo->
b©ãry_time_À·
);

139 
aöfo
 = 
NULL
;

140 
	}
}

143 
	$≠m_ªad
(
ﬁ§_≠m_öfo
 *
aöfo
)

145 
mëhod
) {

146 
USE_APM
:

147  
	`≠m_ªad_≠m
(
aöfo
);

148 
USE_ACPI
:

149  
	`≠m_ªad_a˝i
(
aöfo
);

154 
	}
}

157 
	$≠m_ªad_≠m
(
ﬁ§_≠m_öfo
 *
aöfo
)

159 
buf„r
[100];

160 
unôs
[10];

161 
FILE
 *
≠m_¥ocfûe
;

162 
löux_≠m_öfo
 
œöfo
;

165 i‡((
≠m_¥ocfûe
 = 
	`f›í
(
APM_PROC
, "r")Ë=
NULL
)

168 i‡(
	`fgës
(
buf„r
, (buf„r), 
≠m_¥ocfûe
Ë=
NULL
) {

169 
	`f˛o£
(
≠m_¥ocfûe
);

171 i‡((
≠m_¥ocfûe
 = 
	`f›í
(
APM_PROC
, "r")Ë!
NULL
)

174 i‡(
	`fgës
(
buf„r
, (buf„r), 
≠m_¥ocfûe
Ë=
NULL
) {

176 
	`Ârötf
(
°dîr
, "OLSRD: CouldÇotÑead APM info - setting willingnessÅo default");

177 
	`f˛o£
(
≠m_¥ocfûe
);

181 
	`f˛o£
(
≠m_¥ocfûe
);

186 
	`ssˇnf
(
buf„r
, "%†%d.%d %x %x %x %x %d%% %d %s\n", 
œöfo
.
drivî_vîsi⁄
, &œöfo.
≠m_vîsi⁄_maj‹
, &œöfo.
≠m_vîsi⁄_mö‹
,

187 &
œöfo
.
≠m_Êags
, &œöfo.
ac_löe_°©us
, &œöfo.
b©ãry_°©us
, &œöfo.
b©ãry_Êags
, &œöfo.
b©ãry_≥r˚¡age
,

188 &
œöfo
.
b©ãry_time
, 
unôs
);

190 
œöfo
.
usög_möuãs
 = 
	`°∫cmp
(
unôs
, "min", 3) ? 0 : 1;

199 i‡(
œöfo
.
b©ãry_≥r˚¡age
 > 100)

200 
œöfo
.
b©ãry_≥r˚¡age
 = -1;

204 i‡(
œöfo
.
ac_löe_°©us
)

205 
aöfo
->
ac_löe_°©us
 = 
OLSR_AC_POWERED
;

207 
aöfo
->
ac_löe_°©us
 = 
OLSR_BATTERY_POWERED
;

209 
aöfo
->
b©ãry_≥r˚¡age
 = 
œöfo
.battery_percentage;

210 
aöfo
->
b©ãry_time_À·
 = 
œöfo
.
b©ãry_time
;

213 
	}
}

216 
	$≠m_ªad_a˝i
(
ﬁ§_≠m_öfo
 *
aöfo
)

218 
FILE
 *
fd
;

219 
b©_max
 = 5000;

220 
b©_vÆ
 = 0;

221 
ªsu…
;

224 
fd_ödex
 = 
	`a˝i_¥obe
();

227 i‡(
fd_ödex
 < 0) {

229 i‡(
ac_powî_⁄
) {

230 
aöfo
->
ac_löe_°©us
 = 
OLSR_AC_POWERED
;

232 
aöfo
->
b©ãry_≥r˚¡age
 = -1;

242 i‡((
fd
 = 
	`f›í
(
a˝i_öfo
[
fd_ödex
], "r")Ë=
NULL
)

246 
s1
[32], 
s2
[32], 
s3
[32], 
s4
[32], 
öbuff
[127];

247 i‡(
	`fgës
(
öbuff
, (öbuff), 
fd
Ë=
NULL
)

250 
	`ssˇnf
(
öbuff
, "%†%†%†%s", 
s1
, 
s2
, 
s3
, 
s4
);

251 i‡(!
	`°rˇ£cmp
(
s2
, "full"))

252 
b©_max
 = 
	`©oi
(
s4
);

254 
	`f˛o£
(
fd
);

256 i‡((
fd
 = 
	`f›í
(
a˝i_°©e
[
fd_ödex
], "r")Ë=
NULL
)

261 
s1
[32], 
s2
[32], 
s3
[32], 
s4
[32], 
öbuff
[127];

262 i‡(
	`fgës
(
öbuff
, (öbuff), 
fd
Ë=
NULL
)

264 
	`ssˇnf
(
öbuff
, "%†%†%†%s", 
s1
, 
s2
, 
s3
, 
s4
);

267 i‡(!
	`°rˇ£cmp
(
s1
, "Remaining"))

268 
b©_vÆ
 = 
	`©oi
(
s3
);

270 
	`f˛o£
(
fd
);

272 
aöfo
->
ac_löe_°©us
 = 
ac_powî_⁄
 ? 
OLSR_AC_POWERED
 : 
OLSR_BATTERY_POWERED
;

274 
ªsu…
 = 
b©_vÆ
 * 100 / 
b©_max
;

276 
aöfo
->
b©ãry_≥r˚¡age
 = 
ªsu…
 > 100 ? 100 :Ñesult;

279 
	}
}

282 
	$a˝i_¥obe
()

284 
i
;

287 
ac_powî_⁄
 = 0;

289 
i
 = 0; i < 
ACPI_AC_CNT
; i++) {

290 
s1
[32], 
s2
[32];

291 
rc
;

292 
FILE
 *
fd
 = 
	`f›í
(
a˝i_ac
[
i
], "r");

295 i‡(
fd
 =
NULL
)

299 
rc
 = 
	`fsˇnf
(
fd
, "%†%s", 
s1
, 
s2
);

302 
	`f˛o£
(
fd
);

304 i‡(
rc
 < 2)

308 i‡(!
	`°rˇ£cmp
(
s2
, "on-line")) {

311 
ac_powî_⁄
 = 1;

318 
i
 = 0; i < 
ACPI_BT_CNT
; i++) {

319 
s1
[32], 
s2
[32];

320 
rc
;

321 
FILE
 *
fd
 = 
	`f›í
(
a˝i_öfo
[
i
], "r");

324 i‡(
fd
 =
NULL
)

328 
rc
 = 
	`fsˇnf
(
fd
, "%†%s", 
s1
, 
s2
);

331 
	`f˛o£
(
fd
);

333 i‡(
rc
 < 2)

337 i‡((!
	`°rˇ£cmp
(
s1
, "¥e£¡:")Ë&& (!°rˇ£cmp(
s2
, "no")))

341 i‡((
fd
 = 
	`f›í
(
a˝i_°©e
[
i
], "r")Ë=
NULL
)

344 
	`f˛o£
(
fd
);

345  
i
;

350 
	}
}

	@src/linux/kernel_routes_ioctl.c

42 
	~"defs.h
"

43 
	~"kî√l_rouãs.h
"

44 
	~"ùc_‰⁄ãnd.h
"

45 
	~"log.h
"

46 
	~"√t_os.h
"

47 
	~"¥o˚ss_rouãs.h
"

49 
	~<as£π.h
>

50 
	~<löux/ty≥s.h
>

51 
	~<löux/π√éök.h
>

60 #i‚de‡
LINUX_NETLINK_ROUTING


63 
	$dñëe_Æl_öë_gws
()

65 
s
;

66 
buf
[
BUFSIZ
], *
˝
, *
˝lim
;

67 
ifc⁄f
 
ifc
;

68 
i‰eq
 *
i‰
;

70 
	`OLSR_PRINTF
(1, "Internet gateway detected...\nTryingÅo delete default gateways\n");

73 i‡((
s
 = 
	`sockë
(
AF_INET
, 
SOCK_DGRAM
, 0)) < 0) {

74 
	`ﬁ§_sy¶og
(
OLSR_LOG_ERR
, "socket: %m");

78 
ifc
.
ifc_Àn
 = (
buf
);

79 
ifc
.
ifc_buf
 = 
buf
;

80 i‡(
	`io˘l
(
s
, 
SIOCGIFCONF
, (*)&
ifc
) < 0) {

81 
	`ﬁ§_sy¶og
(
OLSR_LOG_ERR
, "ioctl (get interface configuration)");

82 
	`˛o£
(
s
);

86 
i‰
 = 
ifc
.
ifc_ªq
;

87 
˝lim
 = 
buf
 + 
ifc
.
ifc_Àn
;

88 
˝
 = 
buf
; c∞< 
˝lim
; c∞+(
i‰
->
i‰_«me
Ë+ (i‰->
i‰_addr
)) {

89 
πíåy
 
kî√l_rouã
;

90 
i‰
 = (
i‰eq
 *)
˝
;

92 i‡(
	`°rcmp
(
i‰
->
i‰_i‰n
.
i‰n_«me
, "lo") == 0) {

93 
	`OLSR_PRINTF
(1, "SkippingÜoopback...\n");

97 
	`OLSR_PRINTF
(1, "Tryög 0.0.0.0/0 %s...", 
i‰
->
i‰_i‰n
.
i‰n_«me
);

99 
	`mem£t
(&
kî√l_rouã
, 0, (
πíåy
));

101 ((
sockaddr_ö
 *)&
kî√l_rouã
.
π_d°
)->
sö_addr
.
s_addr
 = 0;

102 ((
sockaddr_ö
 *)&
kî√l_rouã
.
π_d°
)->
sö_Ámûy
 = 
AF_INET
;

103 ((
sockaddr_ö
 *)&
kî√l_rouã
.
π_gímask
)->
sö_addr
.
s_addr
 = 0;

104 ((
sockaddr_ö
 *)&
kî√l_rouã
.
π_gímask
)->
sö_Ámûy
 = 
AF_INET
;

106 ((
sockaddr_ö
 *)&
kî√l_rouã
.
π_g©eway
)->
sö_addr
.
s_addr
 = 
INADDR_ANY
;

107 ((
sockaddr_ö
 *)&
kî√l_rouã
.
π_g©eway
)->
sö_Ámûy
 = 
AF_INET
;

109 
kî√l_rouã
.
π_Êags
 = 
RTF_UP
 | 
RTF_GATEWAY
;

111 
kî√l_rouã
.
π_dev
 = 
i‰
->
i‰_i‰n
.
i‰n_«me
;

113 i‡((
	`io˘l
(
s
, 
SIOCDELRT
, &
kî√l_rouã
)) < 0)

114 
	`OLSR_PRINTF
(1, "NO\n");

116 
	`OLSR_PRINTF
(1, "YES\n");

118 
	`˛o£
(
s
);

120 
	}
}

130 
	$ﬁ§_io˘l_add_rouã
(c⁄° 
π_íåy
 *
π
)

132 
if_«me
[
IFNAMSIZ
];

133 
πíåy
 
kî√l_rouã
;

134 
ﬁ§_ù_addr
 
mask
;

135 
r¶t
;

137 
	`OLSR_PRINTF
(2, "KERN: Addög %s\n", 
	`ﬁ§_πp_to_°rög
(
π
->
π_be°
));

139 
	`mem£t
(&
kî√l_rouã
, 0, (
πíåy
));

141 ((
sockaddr_ö
 *)&
kî√l_rouã
.
π_d°
)->
sö_Ámûy
 = 
AF_INET
;

142 ((
sockaddr_ö
 *)&
kî√l_rouã
.
π_g©eway
)->
sö_Ámûy
 = 
AF_INET
;

143 ((
sockaddr_ö
 *)&
kî√l_rouã
.
π_gímask
)->
sö_Ámûy
 = 
AF_INET
;

145 ((
sockaddr_ö
 *)&
kî√l_rouã
.
π_d°
)->
sö_addr
 = 
π
->π_d°.
¥efix
.
v4
;

147 i‡(!
	`ﬁ§_¥efix_to_√tmask
(&
mask
, 
π
->
π_d°
.
¥efix_Àn
)) {

150 ((
sockaddr_ö
 *)&
kî√l_rouã
.
π_gímask
)->
sö_addr
 = 
mask
.
v4
;

152 i‡(
π
->
π_d°
.
¥efix
.
v4
.
s_addr
 !π->
π_be°
->
πp_√xth›
.
g©eway
.v4.s_addr) {

153 ((
sockaddr_ö
 *)&
kî√l_rouã
.
π_g©eway
)->
sö_addr
 = 
π
->
π_be°
->
πp_√xth›
.
g©eway
.
v4
;

156 
kî√l_rouã
.
π_Êags
 = 
	`ﬁ§_π_Êags
(
π
);

157 
kî√l_rouã
.
π_mëric
 = 
	`ﬁ§_fib_mëric
(&
π
->
π_be°
->
πp_mëric
);

162 
	`°r˝y
(
if_«me
, 
	`if_ifwôhödex_«me
(
π
->
π_be°
->
πp_√xth›
.
iif_ödex
));

163 
kî√l_rouã
.
π_dev
 = 
if_«me
;

166 i‡((
ﬁ§_˙f
->
dñ_gws
Ë&& (
π
->
π_d°
.
¥efix
.
v4
.
s_addr
 =
INADDR_ANY
Ë&& (π->π_d°.
¥efix_Àn
 == INADDR_ANY)) {

167 
	`dñëe_Æl_öë_gws
();

168 
ﬁ§_˙f
->
dñ_gws
 = 
Ál£
;

171 i‡((
r¶t
 = 
	`io˘l
(
ﬁ§_˙f
->
io˘l_s
, 
SIOCADDRT
, &
kî√l_rouã
)) >= 0) {

176 
	`ùc_rouã_£nd_πíåy
(&
π
->
π_d°
.
¥efix
, &π->
π_be°
->
πp_√xth›
.
g©eway
,Ñt->π_be°->
πp_mëric
.
h›s
, 1,

177 
	`if_ifwôhödex_«me
(
π
->
π_be°
->
πp_√xth›
.
iif_ödex
));

180  
r¶t
;

181 
	}
}

191 
	$ﬁ§_io˘l_add_rouã6
(c⁄° 
π_íåy
 *
π
)

193 
ö6_πmsg
 
kî√l_rouã
;

194 
r¶t
;

196 
	`OLSR_PRINTF
(2, "KERN: Addög %s\n", 
	`ﬁ§_πp_to_°rög
(
π
->
π_be°
));

198 
	`mem£t
(&
kî√l_rouã
, 0, (
ö6_πmsg
));

200 
kî√l_rouã
.
πmsg_d°
 = 
π
->
π_d°
.
¥efix
.
v6
;

201 
kî√l_rouã
.
πmsg_d°_Àn
 = 
π
->
π_d°
.
¥efix_Àn
;

203 
kî√l_rouã
.
πmsg_g©eway
 = 
π
->
π_be°
->
πp_√xth›
.
g©eway
.
v6
;

205 
kî√l_rouã
.
πmsg_Êags
 = 
	`ﬁ§_π_Êags
(
π
);

206 
kî√l_rouã
.
πmsg_mëric
 = 
	`ﬁ§_fib_mëric
(&
π
->
π_be°
->
πp_mëric
);

211 
kî√l_rouã
.
πmsg_ifödex
 = 
π
->
π_be°
->
πp_√xth›
.
iif_ödex
;

215 i‡((
r¶t
 = 
	`io˘l
(
ﬁ§_˙f
->
io˘l_s
, 
SIOCADDRT
, &
kî√l_rouã
)) >= 0) {

220 
	`ùc_rouã_£nd_πíåy
(&
π
->
π_d°
.
¥efix
, &π->
π_be°
->
πp_√xth›
.
g©eway
,Ñt->π_be°->
πp_mëric
.
h›s
, 1,

221 
	`if_ifwôhödex_«me
(
π
->
π_be°
->
πp_√xth›
.
iif_ödex
));

223  
r¶t
;

224 
	}
}

234 
	$ﬁ§_io˘l_dñ_rouã
(c⁄° 
π_íåy
 *
π
)

236 
πíåy
 
kî√l_rouã
;

237 
ﬁ§_ù_addr
 
mask
;

238 
r¶t
;

240 
	`OLSR_PRINTF
(2, "KERN: Dñëög %s\n", 
	`ﬁ§_π_to_°rög
(
π
));

242 
	`mem£t
(&
kî√l_rouã
, 0, (
πíåy
));

244 ((
sockaddr_ö
 *)&
kî√l_rouã
.
π_d°
)->
sö_Ámûy
 = 
AF_INET
;

245 ((
sockaddr_ö
 *)&
kî√l_rouã
.
π_g©eway
)->
sö_Ámûy
 = 
AF_INET
;

246 ((
sockaddr_ö
 *)&
kî√l_rouã
.
π_gímask
)->
sö_Ámûy
 = 
AF_INET
;

248 ((
sockaddr_ö
 *)&
kî√l_rouã
.
π_d°
)->
sö_addr
 = 
π
->π_d°.
¥efix
.
v4
;

250 i‡(
π
->
π_d°
.
¥efix
.
v4
.
s_addr
 !π->
π_√xth›
.
g©eway
.v4.s_addr) {

251 ((
sockaddr_ö
 *)&
kî√l_rouã
.
π_g©eway
)->
sö_addr
 = 
π
->
π_√xth›
.
g©eway
.
v4
;

254 i‡(!
	`ﬁ§_¥efix_to_√tmask
(&
mask
, 
π
->
π_d°
.
¥efix_Àn
)) {

257 ((
sockaddr_ö
 *)&
kî√l_rouã
.
π_gímask
)->
sö_addr
 = 
mask
.
v4
;

260 
kî√l_rouã
.
π_Êags
 = 
	`ﬁ§_π_Êags
(
π
);

261 
kî√l_rouã
.
π_mëric
 = 
	`ﬁ§_fib_mëric
(&
π
->rt_metric);

266 
kî√l_rouã
.
π_dev
 = 
NULL
;

268 i‡((
r¶t
 = 
	`io˘l
(
ﬁ§_˙f
->
io˘l_s
, 
SIOCDELRT
, &
kî√l_rouã
)) >= 0) {

273 
	`ùc_rouã_£nd_πíåy
(&
π
->
π_d°
.
¥efix
, 
NULL
, 0, 0, NULL);

276  
r¶t
;

277 
	}
}

287 
	$ﬁ§_io˘l_dñ_rouã6
(c⁄° 
π_íåy
 *
π
)

289 
ö6_πmsg
 
kî√l_rouã
;

290 
r¶t
;

292 
	`OLSR_PRINTF
(2, "KERN: Dñëög %s\n", 
	`ﬁ§_π_to_°rög
(
π
));

294 
	`mem£t
(&
kî√l_rouã
, 0, (
ö6_πmsg
));

296 
kî√l_rouã
.
πmsg_d°
 = 
π
->
π_d°
.
¥efix
.
v6
;

297 
kî√l_rouã
.
πmsg_d°_Àn
 = 
π
->
π_d°
.
¥efix_Àn
;

299 
kî√l_rouã
.
πmsg_g©eway
 = 
π
->
π_be°
->
πp_√xth›
.
g©eway
.
v6
;

301 
kî√l_rouã
.
πmsg_Êags
 = 
	`ﬁ§_π_Êags
(
π
);

302 
kî√l_rouã
.
πmsg_mëric
 = 
	`ﬁ§_fib_mëric
(&
π
->
π_be°
->
πp_mëric
);

304 i‡((
r¶t
 = 
	`io˘l
(
ﬁ§_˙f
->
io˘l_s
, 
SIOCDELRT
, &
kî√l_rouã
) >= 0)) {

309 
	`ùc_rouã_£nd_πíåy
(&
π
->
π_d°
.
¥efix
, 
NULL
, 0, 0, NULL);

312  
r¶t
;

313 
	}
}

	@src/linux/kernel_routes_nl.c

42 
	~"kî√l_rouãs.h
"

43 
	~"ùc_‰⁄ãnd.h
"

44 
	~"log.h
"

45 
	~"√t_os.h
"

46 
	~"i‚ë.h
"

48 
	~<as£π.h
>

49 
	~<löux/ty≥s.h
>

50 
	~<löux/π√éök.h
>

53 
	~<√töë/ö.h
>

54 
	~<sys/io˘l.h
>

55 
	~<√t/if.h
>

56 
	~<löux/ù.h
>

57 
	~<löux/if_tu¬ñ.h
>

60 
	~<sys/sockë.h
>

61 
	~<sys/io˘l.h
>

62 
	~<sys/ty≥s.h
>

63 
	~<√t/if.h
>

72 #ifde‡
LINUX_NETLINK_ROUTING


77 
	#MY_NLMSG_NEXT
(
∆h
,
Àn
Ë(÷íË-
	`NLMSG_ALIGN
(“lh)->
∆msg_Àn
), \

78 (
∆msghdr
*)
	`ARM_NOWARN_ALIGN
((((*)(
∆h
)Ë+ 
	`NLMSG_ALIGN
(“lh)->
∆msg_Àn
)))

	)

81 
π√éök_ªad
(
sock
, *, );

83 
	sﬁ§_πªq
 {

84 
∆msghdr
 
	mn
;

85 
πmsg
 
	mr
;

86 
	mbuf
[512];

89 
	sﬁ§_ùadd_ªq
 {

90 
∆msghdr
 
	mn
;

91 
iÁddrmsg
 
	miÁ
;

92 
	mbuf
[256];

95 
	$π√éök_ªgi°î_sockë
(
π∆_mgΩ
)

97 
sock
 = 
	`sockë
(
AF_NETLINK
,
SOCK_RAW
,
NETLINK_ROUTE
);

98 
sockaddr_∆
 
addr
;

100 i‡(
sock
<0) {

101 
	`OLSR_PRINTF
(1,"couldÇŸ cª©êπ√éök sockë! %†(%d)", 
	`°ªº‹
(
î∫o
),Érrno);

105 
	`mem£t
(&
addr
, 0, (addr));

106 
addr
.
∆_Ámûy
 = 
AF_NETLINK
;

107 
addr
.
∆_pid
 = 0;

108 
addr
.
∆_groups
 = 
π∆_mgΩ
;

110 i‡(
	`böd
(
sock
,(
sockaddr
 *)&
addr
,(addr))<0) {

111 
	`OLSR_PRINTF
(1,"couldÇŸ bödÑäëlök sockë! %†(%d)",
	`°ªº‹
(
î∫o
),Érrno);

115 
	`add_ﬁ§_sockë
(
sock
, 
NULL
, &
π√éök_ªad
, NULL, 
SP_IMM_READ
);

116  
sock
;

117 
	}
}

119 
	$√éök_¥o˚ss_lök
(
∆msghdr
 *
h
)

121 
iföfomsg
 *
ifi
 = (iföfomsg *Ë
	`NLMSG_DATA
(
h
);

122 
öãrÁ˚
 *
iÁ˚
;

123 
ﬁ§_if
 *
oif
;

124 
«mebuf„r
[
IF_NAMESIZE
];

126 
iÁ˚
 = 
	`if_ifwôhödex
(
ifi
->
ifi_ödex
);

127 
oif
 = 
NULL
;

129 i‡(
iÁ˚
 =
NULL
 && (
ifi
->
ifi_Êags
 & (
IFF_UP
|
IFF_RUNNING
)) == (IFF_UP|IFF_RUNNING)) {

130 i‡(
	`if_ödext⁄ame
(
ifi
->
ifi_ödex
, 
«mebuf„r
)) {

131 i‡((
oif
 = 
	`ﬁ§if_ifwôh«me
(
«mebuf„r
)Ë!
NULL
) {

133 
	`chk_if_up
(
oif
, 3);

137 i‡(
iÁ˚
 !
NULL
 && (
ifi
->
ifi_Êags
 & 
IFF_UP
) == 0) {

139 
	`ﬁ§_ªmove_öãrÁ˚
(
iÁ˚
->
ﬁ§_if
);

142 i‡(
iÁ˚
 =
NULL
 && 
oif
 == NULL) {

144 i‡((
ifi
->
ifi_Êags
 & 
IFF_UP
Ë!0 && (ifi->ifi_Êag†& 
IFF_RUNNING
) != 0) {

145 
	`ﬁ§_åiggî_ifch™ge
(
ifi
->
ifi_ödex
, 
NULL
, 
IFCHG_IF_ADD
);

147 i‡((
ifi
->
ifi_Êags
 & 
IFF_UP
Ë=0 && (ifi->ifi_Êag†& 
IFF_RUNNING
) == 0){

148 
	`ﬁ§_åiggî_ifch™ge
(
ifi
->
ifi_ödex
, 
NULL
, 
IFCHG_IF_REMOVE
);

151 
	}
}

153 
π√éök_ªad
(
sock
, *
d©a
 
__©åibuã__
 ((
unu£d
)), 
Êags
 __attribute__ ((unused)))

155 
	gÀn
, 
	g∂í
;

156 
iovec
 
	giov
;

157 
sockaddr_∆
 
	g∆addr
;

158 
msghdr
 
	gmsg
 = {

159 &
∆addr
,

160 (
∆addr
),

161 &
iov
,

163 
NULL
,

168 
	gbuf„r
[4096];

169 
∆msghdr
 *
	g∆h
 = (∆msghd∏*)
ARM_NOWARN_ALIGN
(
buf„r
);

170 
	gªt
;

172 
	giov
.
	giov_ba£
 = (*Ë
buf„r
;

173 
	giov
.
	giov_Àn
 = (
buf„r
);

175 (
	gªt
 = 
ªcvmsg
(
sock
, &
msg
, 
MSG_DONTWAIT
)) >= 0) {

177 
Àn
 = 
∆h
->
∆msg_Àn
;

178 
	g∂í
 = 
Àn
 - (
∆h
);

179 i‡(
	gÀn
 > 
	gªt
 || 
	g∂í
 < 0) {

180 
OLSR_PRINTF
(1,"MalformedÇetlink message: "

182 
Àn
, 
ªt
, 
∂í
);

186 
OLSR_PRINTF
(3, "Nëlök mesßgêª˚ived:Åy≥ 0x%x\n", 
∆h
->
∆msg_ty≥
);

187 i‡((
	g∆h
->
	g∆msg_ty≥
 =
RTM_NEWLINK
Ë|| ( 
∆h
->
∆msg_ty≥
 =
RTM_DELLINK
)) {

189 
√éök_¥o˚ss_lök
(
∆h
);

193 i‡(
	gî∫o
 !
EAGAIN
) {

194 
OLSR_PRINTF
(1,"√éökÜi°íÉº‹ %u - %s\n",
î∫o
,
°ªº‹
(errno));

199 
ﬁ§_√éök_addªq
(
∆msghdr
 *
n
, 
size_t
 
ªqSize
 
__©åibuã__
 ((
unu£d
)), 
ty≥
, c⁄° *
d©a
, 
Àn
)

201 
π©å
 *
	gπa
 = (π©å *)
ARM_NOWARN_ALIGN
(((*)
n
Ë+ 
NLMSG_ALIGN
“->
∆msg_Àn
));

202 
	gn
->
	g∆msg_Àn
 = 
NLMSG_ALIGN
(
n
->
∆msg_Àn
Ë+ 
RTA_LENGTH
(
Àn
);

205 
	gπa
->
	gπa_ty≥
 = 
ty≥
;

206 
	gπa
->
	gπa_Àn
 = 
RTA_LENGTH
(
Àn
);

207 
mem˝y
(
RTA_DATA
(
πa
), 
d©a
, 
Àn
);

212 
	$ﬁ§_√éök_£nd
(
∆msghdr
 *
∆_hdr
)

214 
rcvbuf
[1024];

215 
iovec
 
iov
;

216 
sockaddr_∆
 
∆addr
;

217 
msghdr
 
msg
;

218 
∆msghdr
 *
h
;

219 
∆msgîr
 *
l_îr
;

220 
ªt
;

222 
	`mem£t
(&
∆addr
, 0, (nladdr));

223 
	`mem£t
(&
msg
, 0, (msg));

225 
∆addr
.
∆_Ámûy
 = 
AF_NETLINK
;

227 
msg
.
msg_«me
 = &
∆addr
;

228 
msg
.
msg_«mñí
 = (
∆addr
);

229 
msg
.
msg_iov
 = &
iov
;

230 
msg
.
msg_iovÀn
 = 1;

232 
iov
.
iov_ba£
 = 
∆_hdr
;

233 
iov
.
iov_Àn
 = 
∆_hdr
->
∆msg_Àn
;

234 
ªt
 = 
	`£ndmsg
(
ﬁ§_˙f
->
π∆_s
, &
msg
, 0);

235 i‡(
ªt
 <= 0) {

236 
	`ﬁ§_sy¶og
(
OLSR_LOG_ERR
, "C™nŸ síd d©®tÿ√éök sockë (%d: %s)", 
î∫o
, 
	`°ªº‹
(errno));

240 
iov
.
iov_ba£
 = 
rcvbuf
;

241 
iov
.
iov_Àn
 = (
rcvbuf
);

242 
ªt
 = 
	`ªcvmsg
(
ﬁ§_˙f
->
π∆_s
, &
msg
, 0);

243 i‡(
ªt
 <= 0) {

244 
	`ﬁ§_sy¶og
(
OLSR_LOG_ERR
, "Eº‹ whûêªadögánswîÅÿ√éök mesßgê(%d: %s)", 
î∫o
, 
	`°ªº‹
(errno));

248 
h
 = (
∆msghdr
 *)
	`ARM_NOWARN_ALIGN
(
rcvbuf
);

249 i‡(!
	`NLMSG_OK
(
h
, ()
ªt
)) {

250 
	`ﬁ§_sy¶og
(
OLSR_LOG_ERR
, "Re˚ivedÇëlök mesßgêwa†mÆf‹med (ªt=%d, %u)", 
ªt
, 
h
->
∆msg_Àn
);

254 i‡(
h
->
∆msg_ty≥
 !
NLMSG_ERROR
) {

255 
	`ﬁ§_sy¶og
(
OLSR_LOG_INFO
,

257 
h
->
∆msg_Àn
, h->
∆msg_ty≥
, 
NLMSG_ERROR
, h->
∆msg_£q
, h->
∆msg_Êags
, h->
∆msg_pid
);

260 i‡(
	`NLMSG_LENGTH
((
∆msgîr
)Ë> 
h
->
∆msg_Àn
) {

261 
	`ﬁ§_sy¶og
(
OLSR_LOG_INFO
,"Received invalidÇetlink message size %lu != %u",

262 ()(
∆msgîr
), 
h
->
∆msg_Àn
);

266 
l_îr
 = (
∆msgîr
 *)
	`NLMSG_DATA
(
h
);

268 i‡(
l_îr
->
îr‹
) {

269 
	`ﬁ§_sy¶og
(
OLSR_LOG_INFO
,"Re˚ivedÇëlökÉº‹ codê%†(%d)", 
	`°ªº‹
(-
l_îr
->
îr‹
),Ü_err->error);

271  -
l_îr
->
îr‹
;

272 
	}
}

274 
	$ﬁ§_os_pﬁicy_ruÀ
(
Ámûy
, 
πèbÀ
, 
uöt32_t
 
¥i‹ôy
, c⁄° *
if_«me
, 
boﬁ
 
£t
) {

275 
ﬁ§_πªq
 
ªq
;

276 
îr
;

278 
	`mem£t
(&
ªq
, 0, (req));

280 
ªq
.
n
.
∆msg_Àn
 = 
	`NLMSG_LENGTH
((
πmsg
));

281 
ªq
.
n
.
∆msg_Êags
 = 
NLM_F_REQUEST
 | 
NLM_F_CREATE
 | 
NLM_F_EXCL
 | 
NLM_F_ACK
;

283 
ªq
.
n
.
∆msg_ty≥
 = 
£t
 ? 
RTM_NEWRULE
 : 
RTM_DELRULE
;

284 
ªq
.
r
.
πm_Ámûy
 = 
Ámûy
;

285 
ªq
.
r
.
πm_èbÀ
 = 
πèbÀ
;

288 
ªq
.
r
.
πm_ty≥
 = 
RTN_UNICAST
;

290 
	`ﬁ§_√éök_addªq
(&
ªq
.
n
, ‘eq), 
RTA_PRIORITY
, &
¥i‹ôy
, (priority));

292 i‡(
if_«me
 !
NULL
) {

294 
	`ﬁ§_√éök_addªq
(&
ªq
.
n
, ‘eq), 
RTA_IIF
, 
if_«me
, 
	`°æí
(if_name)+1);

297 
îr
 = 
	`ﬁ§_√éök_£nd
(&
ªq
.
n
);

298 i‡(
îr
) {

299 
	`ﬁ§_sy¶og
(
OLSR_LOG_ERR
,"Error on %sÖolicyÑuleáimedÅoáctivate RtTable %u!",

300 
£t
 ? "ö£πög" : "dñëög", 
πèbÀ
);

303  
îr
;

304 
	}
}

307 
	$ﬁ§_add_ù
(
ifödex
, 
ﬁ§_ù_addr
 *
ù
, c⁄° *
l
, 
boﬁ
 
¸óã
)

309 
ﬁ§_ùadd_ªq
 
ªq
;

311 
	`mem£t
(&
ªq
, 0, (req));

313 
ªq
.
n
.
∆msg_Àn
 = 
	`NLMSG_LENGTH
((
iÁddrmsg
));

314 i‡(
¸óã
) {

315 
ªq
.
n
.
∆msg_Êags
 = 
NLM_F_REQUEST
 | 
NLM_F_CREATE
 | 
NLM_F_REPLACE
 | 
NLM_F_ACK
;

316 
ªq
.
n
.
∆msg_ty≥
 = 
RTM_NEWADDR
;

318 
ªq
.
n
.
∆msg_Êags
 = 
NLM_F_REQUEST
 | 
NLM_F_ACK
;

319 
ªq
.
n
.
∆msg_ty≥
 = 
RTM_DELADDR
;

321 
ªq
.
iÁ
.
iÁ_Ámûy
 = 
ﬁ§_˙f
->
ù_vîsi⁄
;

323 
	`ﬁ§_√éök_addªq
(&
ªq
.
n
, ‘eq), 
IFA_LOCAL
, 
ù
, 
ﬁ§_˙f
->
ùsize
);

324 i‡(
l
) {

325 
	`ﬁ§_√éök_addªq
(&
ªq
.
n
, ‘eq), 
IFA_LABEL
, 
l
, 
	`°æí
(l) + 1);

328 
ªq
.
iÁ
.
iÁ_¥efixÀn
 = 
ﬁ§_˙f
->
ùsize
 * 8;

330 
ªq
.
iÁ
.
iÁ_ödex
 = 
ifödex
;

332  
	`ﬁ§_√éök_£nd
(&
ªq
.
n
);

333 
	}
}

336 
	$ﬁ§_os_loˇlho°_if
(
ﬁ§_ù_addr
 *
ù
, 
boﬁ
 
¸óã
)

338 
l
[] = "lo:olsr";

339  
	`ﬁ§_add_ù
(
	`if_«mëoödex
("lo"), 
ù
, 
l
, 
¸óã
);

340 
	}
}

342 
	$ﬁ§_os_ifù
(
ifödex
, 
ﬁ§_ù_addr
 *
ù
, 
boﬁ
 
¸óã
) {

343  
	`ﬁ§_add_ù
(
ifödex
, 
ù
, 
NULL
, 
¸óã
);

344 
	}
}

346 
	$ﬁ§_√w_√éök_rouã
(
Ámûy
, 
πèbÀ
, 
if_ödex
, 
mëric
, 
¥Ÿocﬁ
,

347 c⁄° 
ﬁ§_ù_addr
 *
§c
, c⁄° ﬁ§_ù_add∏*
gw
, c⁄° 
ﬁ§_ù_¥efix
 *
d°
,

348 
boﬁ
 
£t
, boﬁ 
dñ_simû¨
) {

350 
ﬁ§_πªq
 
ªq
;

351 
Ámûy_size
;

352 
îr
;

355 
ùaddr_°r
 
buf1
, 
buf2
;

357 
	`ﬁ§_sy¶og
(
OLSR_LOG_INFO
, "new_netlink_route: family=%d,rttable=%d,if_index=%d,metric=%d,protocol=%d,src=%s,gw=%s,dst=%s,set=%s,del_similar=%s",

358 
Ámûy
, 
πèbÀ
, 
if_ödex
, 
mëric
, 
¥Ÿocﬁ
, 
§c
 =
NULL
 ? "" : 
	`ﬁ§_ù_to_°rög
(&
buf1
, src),

359 
gw
 =
NULL
 ? "" : 
	`ﬁ§_ù_to_°rög
(&
buf2
, gw), 
	`ﬁ§_ù_¥efix_to_°rög
(
d°
),

360 
£t
 ? "åue" : "Ál£", 
dñ_simû¨
 ? "true" : "false");

362 
Ámûy_size
 = 
Ámûy
 =
AF_INET
 ? (
ö_addr
Ë: (
ö6_addr
);

364 
	`mem£t
(&
ªq
, 0, (req));

366 
ªq
.
r
.
πm_Êags
 = 
RTNH_F_ONLINK
;

367 
ªq
.
r
.
πm_Ámûy
 = 
Ámûy
;

368 
ªq
.
r
.
πm_èbÀ
 = 
πèbÀ
;

370 
ªq
.
n
.
∆msg_Àn
 = 
	`NLMSG_LENGTH
((
πmsg
));

371 
ªq
.
n
.
∆msg_Êags
 = 
NLM_F_REQUEST
 | 
NLM_F_ACK
;

373 i‡(
£t
) {

374 
ªq
.
n
.
∆msg_Êags
 |
NLM_F_CREATE
 | 
NLM_F_REPLACE
;

375 
ªq
.
n
.
∆msg_ty≥
 = 
RTM_NEWROUTE
;

377 
ªq
.
n
.
∆msg_ty≥
 = 
RTM_DELROUTE
;

382 
ªq
.
r
.
πm_ty≥
 = 
RTN_UNICAST
;

384 
ªq
.
r
.
πm_d°_Àn
 = 
d°
->
¥efix_Àn
;

386 i‡(
£t
) {

388 
ªq
.
r
.
πm_¥Ÿocﬁ
 = 
¥Ÿocﬁ
;

392 i‡(!
£t
 && 
dñ_simû¨
) {

394 
ªq
.
r
.
πm_sc›e
 = 
RT_SCOPE_NOWHERE
;

398 
ªq
.
r
.
πm_sc›e
 = 
RT_SCOPE_UNIVERSE
;

401 i‡(
£t
 || !
dñ_simû¨
) {

403 
	`ﬁ§_√éök_addªq
(&
ªq
.
n
, ‘eq), 
RTA_OIF
, &
if_ödex
, (if_index));

406 i‡(
£t
 && 
§c
 !
NULL
) {

408 
	`ﬁ§_√éök_addªq
(&
ªq
.
n
, ‘eq), 
RTA_PREFSRC
, 
§c
, 
Ámûy_size
);

411 i‡(
mëric
 != -1) {

413 
	`ﬁ§_√éök_addªq
(&
ªq
.
n
, ‘eq), 
RTA_PRIORITY
, &
mëric
, (metric));

416 i‡(
gw
) {

418 
	`ﬁ§_√éök_addªq
(&
ªq
.
n
, ‘eq), 
RTA_GATEWAY
, 
gw
, 
Ámûy_size
);

421 i‡–
d°
->
¥efix_Àn
 == 32 ) {

423 
	`ﬁ§_√éök_addªq
(&
ªq
.
n
, ‘eq), 
RTA_GATEWAY
, &
d°
->
¥efix
, 
Ámûy_size
);

427 
ªq
.
r
.
πm_Êags
 &(~
RTNH_F_ONLINK
);

432 
	`ﬁ§_√éök_addªq
(&
ªq
.
n
, ‘eq), 
RTA_DST
, &
d°
->
¥efix
, 
Ámûy_size
);

434 
îr
 = 
	`ﬁ§_√éök_£nd
(&
ªq
.
n
);

435 i‡(
îr
) {

436 
ùaddr_°r
 
buf
;

437 i‡(
gw
) {

438 
	`ﬁ§_sy¶og
(
OLSR_LOG_ERR
, ".Érror: %sÑouteÅo %s via %s dev %s onlink (%s %d)",

439 
£t
 ? "add" : "del",

440 
	`ﬁ§_ù_¥efix_to_°rög
(
d°
), 
	`ﬁ§_ù_to_°rög
(&
buf
, 
gw
),

441 
	`if_ifwôhödex_«me
(
if_ödex
), 
	`°ªº‹
(
î∫o
),Érrno);

444 
	`ﬁ§_sy¶og
(
OLSR_LOG_ERR
, ".Érror: %sÑouteÅo %s via %s dev %s onlink (%s %d)",

445 
£t
 ? "add" : "del",

446 
	`ﬁ§_ù_¥efix_to_°rög
(
d°
), 
	`ﬁ§_ù_to_°rög
(&
buf
, &d°->
¥efix
), 
	`if_ifwôhödex_«me
(
if_ödex
),

447 
	`°ªº‹
(
î∫o
),Érrno);

451  
îr
;

452 
	}
}

454 
	$ﬁ§_os_niô_6to4_rouã
(c⁄° 
ﬁ§_ù_¥efix
 *
d°_v6
, 
boﬁ
 
£t
) {

455 i‡(
	`ﬁ§_√w_√éök_rouã
(
AF_INET6
,

456 
	`ù_¥efix_is_m≠≥dv4_öëgw
(
d°_v6
Ë? 
ﬁ§_˙f
->
π_èbÀ_deÁu…
 : ol§_˙f->
π_èbÀ
,

457 
ﬁ§_˙f
->
niô6to4_if_ödex
,

458 
RT_METRIC_DEFAULT
, 
ﬁ§_˙f
->
π_¥Ÿo
, 
NULL
, NULL, 
d°_v6
, 
£t
, 
Ál£
)) {

459 
	`ﬁ§_sy¶og
(
OLSR_LOG_ERR
, ".Érror while %s staticÇiitÑouteÅo %s",

460 
£t
 ? "£âög" : "ªmovög", 
	`ﬁ§_ù_¥efix_to_°rög
(
d°_v6
));

462 
	}
}

464 
	$ﬁ§_os_niô_4to6_rouã
(c⁄° 
ﬁ§_ù_¥efix
 *
d°_v4
, 
boﬁ
 
£t
) {

465 i‡(
	`ﬁ§_√w_√éök_rouã
(
AF_INET
,

466 
	`ù_¥efix_is_v4_öëgw
(
d°_v4
Ë? 
ﬁ§_˙f
->
π_èbÀ_deÁu…
 : ol§_˙f->
π_èbÀ
,

467 
ﬁ§_˙f
->
niô4to6_if_ödex
,

468 
RT_METRIC_DEFAULT
, 
ﬁ§_˙f
->
π_¥Ÿo
, 
NULL
, NULL, 
d°_v4
, 
£t
, 
Ál£
)) {

469 
	`ﬁ§_sy¶og
(
OLSR_LOG_ERR
, ".Érror while %sÇiitÑouteÅo %s",

470 
£t
 ? "£âög" : "ªmovög", 
	`ﬁ§_ù_¥efix_to_°rög
(
d°_v4
));

472 
	}
}

474 
	$ﬁ§_os_öëgw_tu¬ñ_rouã
(
uöt32_t
 
if_idx
, 
boﬁ
 
ùv4
, boﬁ 
£t
) {

475 c⁄° 
ﬁ§_ù_¥efix
 *
d°
;

477 
	`as£π
(
ﬁ§_˙f
->
ù_vîsi⁄
 =
AF_INET6
 || 
ùv4
);

479 
d°
 = 
ùv4
 ? &
ùv4_öã∫ë_rouã
 : &
ùv6_öã∫ë_rouã
;

481 i‡(
	`ﬁ§_√w_√éök_rouã
(
ùv4
 ? 
AF_INET
 : 
AF_INET6
, 
ﬁ§_˙f
->
π_èbÀ_tu¬ñ
,

482 
if_idx
, 
RT_METRIC_DEFAULT
, 
ﬁ§_˙f
->
π_¥Ÿo
, 
NULL
, NULL, 
d°
, 
£t
, 
Ál£
)) {

483 
	`ﬁ§_sy¶og
(
OLSR_LOG_ERR
, ".Érror while %s inetgwÅunnelÑouteÅo %s for if %d",

484 
£t
 ? "£âög" : "ªmovög", 
	`ﬁ§_ù_¥efix_to_°rög
(
d°
), 
if_idx
);

486 
	}
}

488 
	$ﬁ§_os_¥o˚ss_π_íåy
(
af_Ámûy
, c⁄° 
π_íåy
 *
π
, 
boﬁ
 
£t
) {

489 
mëric
, 
èbÀ
;

490 c⁄° 
π_√xth›
 *
√xth›
;

491 
ﬁ§_ù_addr
 *
§c
;

492 
boﬁ
 
ho°Rouã
;

493 
îr
;

496 i‡(
FIBM_FLAT
 =
ﬁ§_˙f
->
fib_mëric
) {

497 
mëric
 = 
RT_METRIC_DEFAULT
;

500 
mëric
 = 
£t
 ? 
π
->
π_be°
->
πp_mëric
.
h›s
 :Ñt->
π_mëric
.hops;

503 i‡(
ﬁ§_˙f
->
sm¨t_gw_a˘ive
 && 
	`is_¥efix_öëgw
(&
π
->
π_d°
)) {

505 
mëric
 += 2;

509 
èbÀ
 = 
	`is_¥efix_öëgw
(&
π
->
π_d°
)

510 ? 
ﬁ§_˙f
->
π_èbÀ_deÁu…
 : ol§_˙f->
π_èbÀ
;

513 i‡(
π
->
π_be°
 && 
£t
) {

514 
√xth›
 = &
π
->
π_be°
->
πp_√xth›
;

517 
√xth›
 = &
π
->
π_√xth›
;

521 
ho°Rouã
 = 
π
->
π_d°
.
¥efix_Àn
 =
ﬁ§_˙f
->
ùsize
 * 8

522 && 
	`ùequÆ
(&
√xth›
->
g©eway
, &
π
->
π_d°
.
¥efix
);

526 
ùaddr_°r
 
buf1
, 
buf2
;

527 
	`ﬁ§_sy¶og
(
OLSR_LOG_INFO
, "hostroute (%s) = %d == %d && %s == %s",

528 
ho°Rouã
 ? "true" : "false",

529 
π
->
π_d°
.
¥efix_Àn
, ()(
ﬁ§_˙f
->
ùsize
 * 8),

530 
	`ﬁ§_ù_to_°rög
(&
buf1
, &
√xth›
->
g©eway
),

531 
	`ﬁ§_ù_to_°rög
(&
buf2
, &
π
->
π_d°
.
¥efix
));

536 i‡(
ﬁ§_˙f
->
u£_§c_ù_rouãs
) {

537 
§c
 = &
ﬁ§_˙f
->
uniˇ°_§c_ù
;

540 
§c
 = 
NULL
;

544 
îr
 = 
	`ﬁ§_√w_√éök_rouã
(
af_Ámûy
, 
èbÀ
, 
√xth›
->
iif_ödex
, 
mëric
, 
ﬁ§_˙f
->
π_¥Ÿo
,

545 
§c
, 
ho°Rouã
 ? 
NULL
 : &
√xth›
->
g©eway
, &
π
->
π_d°
, 
£t
, 
Ál£
);

548 i‡(
£t
 && 
îr
 == 17) {

550 
	`ﬁ§_sy¶og
(
OLSR_LOG_ERR
, ".áuto-deleting similarÑoutesÅoÑesolve 'FileÉxists' (17) whileáddingÑoute!");

553 
îr
 = 
	`ﬁ§_√w_√éök_rouã
(
af_Ámûy
, 
èbÀ
, 0, 0, -1, 
NULL
, NULL, &
π
->
π_d°
, 
Ál£
, 
åue
);

555 i‡(!
îr
) {

557 
îr
 = 
	`ﬁ§_√w_√éök_rouã
(
af_Ámûy
, 
èbÀ
, 
√xth›
->
iif_ödex
, 
mëric
, 
ﬁ§_˙f
->
π_¥Ÿo
,

558 
§c
, 
ho°Rouã
 ? 
NULL
 : &
√xth›
->
g©eway
, &
π
->
π_d°
, 
£t
, 
Ál£
);

560 
	`ﬁ§_sy¶og
(
OLSR_LOG_ERR
, ". %†(%d)", 
îr
 == 0 ? "successful" : "failed",Érr);

564 i‡(!
£t
 && 
îr
 == 3) {

567 
	`ﬁ§_sy¶og
(
OLSR_LOG_ERR
, ". ignoring 'No suchÖrocess' (3) while deletingÑoute!");

568 
îr
 = 0;

576 i‡(!
ho°Rouã
 && 
ﬁ§_˙f
->
fib_mëric
 =
FIBM_FLAT


577 && (
îr
 == 128 ||Érr == 101 ||Érr == 3)) {

578 
ﬁ§_ù_¥efix
 
ho°Pªfix
;

580 i‡(
îr
 == 128) {

581 
	`ﬁ§_sy¶og
(
OLSR_LOG_ERR
, ".áutogeneratingÑouteÅo handle 'Network unreachable' (128) whileáddingÑoute!");

583 i‡(
îr
 == 101) {

584 
	`ﬁ§_sy¶og
(
OLSR_LOG_ERR
, ".áutogeneratingÑouteÅo handle 'Network unreachable' (101) whileáddingÑoute!");

587 
	`ﬁ§_sy¶og
(
OLSR_LOG_ERR
, ".áutogeneratingÑouteÅo handle 'No suchÖrocess' (3) whileáddingÑoute!");

591 
ho°Pªfix
.
¥efix
 = 
√xth›
->
g©eway
;

592 
ho°Pªfix
.
¥efix_Àn
 = 
ﬁ§_˙f
->
ùsize
 * 8;

594 
îr
 = 
	`ﬁ§_√w_√éök_rouã
(
af_Ámûy
, 
ﬁ§_˙f
->
π_èbÀ
, 
√xth›
->
iif_ödex
,

595 
mëric
, 
ﬁ§_˙f
->
π_¥Ÿo
, 
§c
, 
NULL
, &
ho°Pªfix
, 
åue
, 
Ál£
);

596 i‡(
îr
 == 0) {

598 
îr
 = 
	`ﬁ§_√w_√éök_rouã
(
af_Ámûy
, 
èbÀ
, 
√xth›
->
iif_ödex
, 
mëric
, 
ﬁ§_˙f
->
π_¥Ÿo
,

599 
§c
, 
ho°Rouã
 ? 
NULL
 : &
√xth›
->
g©eway
, &
π
->
π_d°
, 
£t
, 
Ál£
);

601 
	`ﬁ§_sy¶og
(
OLSR_LOG_ERR
, ". %†(%d)", 
îr
 == 0 ? "successful" : "failed",Érr);

604  
îr
;

605 
	}
}

615 
	$ﬁ§_io˘l_add_rouã
(c⁄° 
π_íåy
 *
π
)

617 
	`OLSR_PRINTF
(2, "KERN: Addög %s\n", 
	`ﬁ§_πp_to_°rög
(
π
->
π_be°
));

618  
	`ﬁ§_os_¥o˚ss_π_íåy
(
AF_INET
, 
π
, 
åue
);

619 
	}
}

629 
	$ﬁ§_io˘l_add_rouã6
(c⁄° 
π_íåy
 *
π
)

631 
	`OLSR_PRINTF
(2, "KERN: Addög %s\n", 
	`ﬁ§_πp_to_°rög
(
π
->
π_be°
));

632  
	`ﬁ§_os_¥o˚ss_π_íåy
(
AF_INET6
, 
π
, 
åue
);

633 
	}
}

643 
	$ﬁ§_io˘l_dñ_rouã
(c⁄° 
π_íåy
 *
π
)

645 
	`OLSR_PRINTF
(2, "KERN: Dñëög %s\n", 
	`ﬁ§_π_to_°rög
(
π
));

646  
	`ﬁ§_os_¥o˚ss_π_íåy
(
AF_INET
, 
π
, 
Ál£
);

647 
	}
}

657 
	$ﬁ§_io˘l_dñ_rouã6
(c⁄° 
π_íåy
 *
π
)

659 
	`OLSR_PRINTF
(2, "KERN: Dñëög %s\n", 
	`ﬁ§_π_to_°rög
(
π
));

660  
	`ﬁ§_os_¥o˚ss_π_íåy
(
AF_INET6
, 
π
, 
Ál£
);

661 
	}
}

	@src/linux/kernel_tunnel.c

42 
	~"kî√l_tu¬ñ.h
"

43 
	~"kî√l_rouãs.h
"

44 
	~"log.h
"

45 
	~"ﬁ§_ty≥s.h
"

46 
	~"√t_os.h
"

47 
	~"ﬁ§_cookõ.h
"

48 
	~"ùˇlc.h
"

50 
	~<as£π.h
>

53 
	~<¨∑/öë.h
>

54 
	~<√töë/ö.h
>

55 
	~<sys/io˘l.h
>

56 
	~<√t/if.h
>

57 
	~<löux/ù.h
>

58 
	~<löux/if_tu¬ñ.h
>

59 
	~<löux/vîsi⁄.h
>

60 #i‡
LINUX_VERSION_CODE
 >
KERNEL_VERSION
(2,6,24)

61 
	~<löux/ù6_tu¬ñ.h
>

65 
	~<sys/sockë.h
>

66 
	~<sys/io˘l.h
>

67 
	~<sys/ty≥s.h
>

68 
	~<√t/if.h
>

70 c⁄° 
	gDEV_IPV4_TUNNEL
[
IFNAMSIZ
] = 
TUNNEL_ENDPOINT_IF
;

71 c⁄° 
	gDEV_IPV6_TUNNEL
[
IFNAMSIZ
] = 
TUNNEL_ENDPOINT_IF6
;

73 
boﬁ
 
	g°‹e_ùtu¬ñ_°©e
;

74 
ﬁ§_cookõ_öfo
 *
	gtu¬ñ_cookõ
;

75 
avl_åì
 
	gtu¬ñ_åì
;

77 
	$ﬁ§_os_öô_ùtu¬ñ
() {

78 c⁄° *
dev
 = 
ﬁ§_˙f
->
ù_vîsi⁄
 =
AF_INET
 ? 
DEV_IPV4_TUNNEL
 : 
DEV_IPV6_TUNNEL
;

80 
tu¬ñ_cookõ
 = 
	`ﬁ§_Æloc_cookõ
("ùtu¬ñ", 
OLSR_COOKIE_TYPE_MEMORY
);

81 
	`ﬁ§_cookõ_£t_mem‹y_size
(
tu¬ñ_cookõ
, (
ﬁ§_ùtu¬ñ_íåy
));

82 
	`avl_öô
(&
tu¬ñ_åì
, 
avl_comp_deÁu…
);

84 
°‹e_ùtu¬ñ_°©e
 = 
	`ﬁ§_if_isup
(
dev
);

85 i‡(
°‹e_ùtu¬ñ_°©e
) {

88 i‡(
	`ﬁ§_if_£t_°©e
(
dev
, 
åue
)) {

92  
	`ﬁ§_os_ifù
(
	`if_«mëoödex
(
dev
), &
ﬁ§_˙f
->
maö_addr
, 
åue
);

93 
	}
}

95 
	$ﬁ§_os_˛ónup_ùtu¬ñ
() {

96 
tu¬ñ_åì
.
cou¡
 > 0) {

97 
ﬁ§_ùtu¬ñ_íåy
 *
t
;

100 
t
 = (
ﬁ§_ùtu¬ñ_íåy
 *)
	`avl_wÆk_fú°
(&
tu¬ñ_åì
);

101 
t
->
ußge
 = 1;

103 
	`ﬁ§_os_dñ_ùù_tu¬ñ
(
t
);

105 i‡(!
°‹e_ùtu¬ñ_°©e
) {

106 
	`ﬁ§_if_£t_°©e
(
ﬁ§_˙f
->
ù_vîsi⁄
 =
AF_INET
 ? 
DEV_IPV4_TUNNEL
 : 
DEV_IPV6_TUNNEL
, 
Ál£
);

109 
	`ﬁ§_‰ì_cookõ
(
tu¬ñ_cookõ
);

110 
	}
}

119 
	$os_ù4_tu¬ñ
(c⁄° *
«me
, 
ö_addr_t
 *
èrgë
)

121 
i‰eq
 
i‰
;

122 
îr
;

123 
ù_tu¬ñ_∑rm
 
p
;

124 
buf„r
[
INET6_ADDRSTRLEN
];

127 
	`as£π
 (
ﬁ§_˙f
->
ù_vîsi⁄
 =
AF_INET
);

128 
	`mem£t
(&
p
, 0, (p));

129 
p
.
ùh
.
vîsi⁄
 = 4;

130 
p
.
ùh
.
ihl
 = 5;

131 
p
.
ùh
.
âl
 = 64;

132 
p
.
ùh
.
¥Ÿocﬁ
 = 
IPPROTO_IPIP
;

133 i‡(
èrgë
) {

134 
p
.
ùh
.
daddr
 = *
èrgë
;

136 
	`°∫˝y
(
p
.
«me
,Çame, 
IFNAMSIZ
);

138 
	`mem£t
(&
i‰
, 0, (ifr));

139 
	`°∫˝y
(
i‰
.
i‰_«me
, 
èrgë
 !
NULL
 ? 
DEV_IPV4_TUNNEL
 : 
«me
, 
IFNAMSIZ
);

140 
i‰
.
i‰_i‰u
.
i‰u_d©a
 = (*Ë&
p
;

142 i‡((
îr
 = 
	`io˘l
(
ﬁ§_˙f
->
io˘l_s
, 
èrgë
 !
NULL
 ? 
SIOCADDTUNNEL
 : 
SIOCDELTUNNEL
, &
i‰
))) {

143 
	`ﬁ§_sy¶og
(
OLSR_LOG_ERR
, "Cannot %sáÅunnel %sÅo %s: %s (%d)\n",

144 
èrgë
 !
NULL
 ? "add" : "ªmove", 
«me
,

145 
èrgë
 !
NULL
 ? 
	`öë_¡›
(
ﬁ§_˙f
->
ù_vîsi⁄
,Å¨gë, 
buf„r
, (buffer)) : "-",

146 
	`°ªº‹
(
î∫o
),Érrno);

149 
	`ﬁ§_sy¶og
(
OLSR_LOG_INFO
, "Tunnel %s %s,Åo %s",

150 
«me
,

151 
èrgë
 !
NULL
 ? "added" : "removed",

152 
èrgë
 !
NULL
 ? 
	`öë_¡›
(
ﬁ§_˙f
->
ù_vîsi⁄
,Å¨gë, 
buf„r
, (buffer)) : "-");

153  
èrgë
 !
NULL
 ? 
	`if_«mëoödex
(
«me
) : 1;

154 
	}
}

163 #i‡
LINUX_VERSION_CODE
 >
KERNEL_VERSION
(2,6,24)

164 
	$os_ù6_tu¬ñ
(c⁄° *
«me
, 
ö6_addr
 *
èrgë
)

166 
i‰eq
 
i‰
;

167 
îr
;

168 
ù6_äl_∑rm
 
p
;

171 
	`as£π
 (
ﬁ§_˙f
->
ù_vîsi⁄
 =
AF_INET6
);

172 
	`mem£t
(&
p
, 0, (p));

173 
p
.
¥Ÿo
 = 0;

174 i‡(
èrgë
) {

175 
p
.
øddr
 = *
èrgë
;

177 
	`°∫˝y
(
p
.
«me
,Çame, 
IFNAMSIZ
);

179 
	`mem£t
(&
i‰
, 0, (ifr));

180 
	`°∫˝y
(
i‰
.
i‰_«me
, 
èrgë
 !
NULL
 ? 
DEV_IPV6_TUNNEL
 : 
«me
, 
IFNAMSIZ
);

181 
i‰
.
i‰_i‰u
.
i‰u_d©a
 = (*Ë&
p
;

183 i‡((
îr
 = 
	`io˘l
(
ﬁ§_˙f
->
io˘l_s
, 
èrgë
 !
NULL
 ? 
SIOCADDTUNNEL
 : 
SIOCDELTUNNEL
, &
i‰
))) {

184 
buf„r
[
INET6_ADDRSTRLEN
];

186 
	`ﬁ§_sy¶og
(
OLSR_LOG_ERR
, "Cannot %sáÅunnel %sÅo %s: %s (%d)\n",

187 
èrgë
 !
NULL
 ? "add" : "ªmove", 
«me
,

188 
èrgë
 !
NULL
 ? 
	`öë_¡›
(
ﬁ§_˙f
->
ù_vîsi⁄
,Å¨gë, 
buf„r
, (buffer)) : "-",

189 
	`°ªº‹
(
î∫o
),Érrno);

192  
èrgë
 !
NULL
 ? 
	`if_«mëoödex
(
«me
) : 1;

193 
	}
}

201 
	$gíî©e_ùtu¬ñ_«me
(
ﬁ§_ù_addr
 *
èrgë
, *
«me
) {

202 
PREFIX
[] = "tnl_";

203 
uöt32_t
 
cou¡î
 = 0;

205 
	`¢¥ötf
(
«me
, 
IFNAMSIZ
, "%s%08x", 
PREFIX
,

206 
ﬁ§_˙f
->
ù_vîsi⁄
 =
AF_INET
 ? 
èrgë
->
v4
.
s_addr
 : ++
cou¡î
);

207 
	}
}

215 
ﬁ§_ùtu¬ñ_íåy
 *
ﬁ§_os_add_ùù_tu¬ñ
(
ﬁ§_ù_addr
 *
èrgë
, 
boﬁ
 
å™•‹tV4
 
__©åibuã__
 ((
unu£d
))) {

216 
ﬁ§_ùtu¬ñ_íåy
 *
	gt
;

218 
as£π
(
ﬁ§_˙f
->
ù_vîsi⁄
 =
AF_INET6
 || 
å™•‹tV4
);

220 
	gt
 = (
ﬁ§_ùtu¬ñ_íåy
 *)
avl_föd
(&
tu¬ñ_åì
, 
èrgë
);

221 i‡(
	gt
 =
NULL
) {

222 
«me
[
IFNAMSIZ
];

223 
	gif_idx
;

224 
ùaddr_°r
 
	gbuf
;

226 
mem£t
(
«me
, 0, (name));

227 
gíî©e_ùtu¬ñ_«me
(
èrgë
, 
«me
);

229 i‡(
	gﬁ§_˙f
->
	gù_vîsi⁄
 =
AF_INET
) {

230 
if_idx
 = 
os_ù4_tu¬ñ
(
«me
, &
èrgë
->
v4
.
s_addr
);

233 #i‡
LINUX_VERSION_CODE
 >
KERNEL_VERSION
(2,6,24)

234 
	gif_idx
 = 
os_ù6_tu¬ñ
(
«me
, &
èrgë
->
v6
);

236 
	gif_idx
 = 0;

240 i‡(
	gif_idx
 == 0) {

242 
ﬁ§_sy¶og
(
OLSR_LOG_ERR
, "C™nŸ cª©êtu¬ñ %s\n", 
«me
);

243  
	gNULL
;

246 i‡(
ﬁ§_if_£t_°©e
(
«me
, 
åue
)) {

247 i‡(
	gﬁ§_˙f
->
	gù_vîsi⁄
 =
AF_INET
) {

248 
os_ù4_tu¬ñ
(
«me
, 
NULL
);

251 #i‡
LINUX_VERSION_CODE
 >
KERNEL_VERSION
(2,6,24)

252 
os_ù6_tu¬ñ
(
«me
, 
NULL
);

255  
	gNULL
;

259 
ﬁ§_os_ifù
(
if_idx
, &
ﬁ§_˙f
->
maö_addr
, 
åue
);

261 
	gt
 = 
ﬁ§_cookõ_mÆloc
(
tu¬ñ_cookõ
);

262 
mem˝y
(&
t
->
èrgë
,Åarget, (*target));

263 
	gt
->
	gnode
.
	gkey
 = &
t
->
èrgë
;

265 
°∫˝y
(
t
->
if_«me
, 
«me
, 
IFNAMSIZ
);

266 
	gt
->
	gif_ödex
 = 
if_idx
;

268 
avl_ö£π
(&
tu¬ñ_åì
, &
t
->
node
, 
AVL_DUP_NO
);

271 
	gt
->
	gußge
++;

272  
	gt
;

280 
	$öã∫Æ_ﬁ§_os_dñ_ùù_tu¬ñ
(
ﬁ§_ùtu¬ñ_íåy
 *
t
, 
boﬁ
 
˛ónup
) {

281 i‡(!
˛ónup
) {

282 i‡(
t
->
ußge
 == 0) {

285 
t
->
ußge
--;

287 i‡(
t
->
ußge
 > 0) {

292 
	`ﬁ§_if_£t_°©e
(
t
->
if_«me
, 
Ál£
);

293 i‡(
ﬁ§_˙f
->
ù_vîsi⁄
 =
AF_INET
) {

294 
	`os_ù4_tu¬ñ
(
t
->
if_«me
, 
NULL
);

297 #i‡
LINUX_VERSION_CODE
 >
	`KERNEL_VERSION
(2,6,24)

298 
	`os_ù6_tu¬ñ
(
t
->
if_«me
, 
NULL
);

302 
	`avl_dñëe
(&
tu¬ñ_åì
, &
t
->
node
);

303 i‡(!
˛ónup
) {

304 
	`ﬁ§_cookõ_‰ì
(
tu¬ñ_cookõ
, 
t
);

306 
	}
}

308 
	$ﬁ§_os_dñ_ùù_tu¬ñ
(
ﬁ§_ùtu¬ñ_íåy
 *
t
) {

309 
	`öã∫Æ_ﬁ§_os_dñ_ùù_tu¬ñ
(
t
, 
Ál£
);

310 
	}
}

	@src/linux/link_layer.c

45 
	#_LINUX_ETHTOOL_H


	)

47 
	~"../lök_œyî.h
"

48 
	~"../ﬁ§_¥Ÿocﬁ.h
"

49 
	~"../scheduÀr.h
"

50 
	~"../öãrÁ˚s.h
"

51 
	~<löux/wúñess.h
>

52 
	~<löux/icmp.h
>

53 
	~<î∫o.h
>

54 
	~<°rög.h
>

55 
	~<sys/io˘l.h
>

56 
	~<√t/if_¨p.h
>

57 
	~<uni°d.h
>

58 
	~<°dlib.h
>

60 
	~"ﬁ§_¥Ÿocﬁ.h
"

62 
öô_lök_œyî_nŸifiˇti⁄
();

64 
pﬁl_lök_œyî
(*);

66 
add_•y_node
(
ﬁ§_ù_addr
 *, *);

68 
	#MAXIPLEN
 60

	)

69 
	#MAXICMPLEN
 76

	)

71 
	gpﬁl_öt
 = 200;

73 
iw_gë_ønge_öfo
(*, 
iw_ønge
 *);

75 
˛ór_•y_li°
(*);

77 
c⁄vît_ù_to_mac
(
ﬁ§_ù_addr
 *, 
sockaddr
 *, *);

79 
£nd_pög
(
ﬁ§_ù_addr
 *);

82 
	$öô_lök_œyî_nŸifiˇti⁄
()

84 
öãrÁ˚
 *
ifd
;

86 
	`OLSR_PRINTF
(1, "InitializingÜink-layerÇotification...\n");

88 
ifd
 = 
i‚ë
; ifd; ifd = ifd->
öt_√xt
) {

89 i‡(
ifd
->
is_wúñess
)

90 
	`˛ór_•y_li°
(
ifd
->
öt_«me
);

93 
	`ﬁ§_°¨t_timî
(
pﬁl_öt
, 0, 
OLSR_TIMER_PERIODIC
, &
pﬁl_lök_œyî
, 
NULL
, 0);

96 
	}
}

99 
	$˛ór_•y_li°
(*
i‚ame
)

101 
iwªq
 
wrq
;

104 
wrq
.
u
.
d©a
.
poöãr
 = 
NULL
;

105 
wrq
.
u
.
d©a
.
Àngth
 = 0;

106 
wrq
.
u
.
d©a
.
Êags
 = 0;

109 
	`°rs˝y
(
wrq
.
i‰_«me
, 
i‚ame
, (wrq.ifr_name));

111 i‡(
	`io˘l
(
ﬁ§_˙f
->
io˘l_s
, 
SIOCSIWSPY
, &
wrq
) < 0) {

112 
	`OLSR_PRINTF
(1, "CouldÇŸ cÀ¨ spyli° %s\n", 
	`°ªº‹
(
î∫o
));

117 
	}
}

120 
	$add_•y_node
(
ﬁ§_ù_addr
 *
addr
, *
öãrÁ˚
)

122 
sockaddr
 
√w_node
;

123 
iwªq
 
wrq
;

124 
nbr
;

125 
sockaddr
 
hw_addªss
[
IW_MAX_SPY
];

126 
buf„r
[((
iw_quÆôy
Ë+ (
sockaddr
)Ë* 
IW_MAX_SPY
];

128 
	`OLSR_PRINTF
(1, "Adding spynode!\n\n");

132 
wrq
.
u
.
d©a
.
poöãr
 = (
ˇddr_t
Ë
buf„r
;

133 
wrq
.
u
.
d©a
.
Àngth
 = 
IW_MAX_SPY
;

134 
wrq
.
u
.
d©a
.
Êags
 = 0;

136 
	`°rs˝y
(
wrq
.
i‰_«me
, 
öãrÁ˚
, (wrq.ifr_name));

138 i‡(
	`io˘l
(
ﬁ§_˙f
->
io˘l_s
, 
SIOCGIWSPY
, &
wrq
) < 0) {

139 
	`OLSR_PRINTF
(1, "CouldÇŸ gë old spyli° %s\n", 
	`°ªº‹
(
î∫o
));

144 
nbr
 = 
wrq
.
u
.
d©a
.
Àngth
;

145 
	`mem˝y
(
hw_addªss
, 
buf„r
, 
nbr
 * (
sockaddr
));

147 
	`OLSR_PRINTF
(1, "Oldáddªs£s: %d\n\n", 
nbr
);

150 i‡(
nbr
 >
IW_MAX_SPY
)

154 i‡(
	`c⁄vît_ù_to_mac
(
addr
, &
√w_node
, 
öãrÁ˚
) > 0) {

155 
	`mem˝y
(&
hw_addªss
[
nbr
], &
√w_node
, (
sockaddr
));

156 
nbr
++;

161 
wrq
.
u
.
d©a
.
poöãr
 = (
ˇddr_t
Ë
hw_addªss
;

162 
wrq
.
u
.
d©a
.
Àngth
 = 
nbr
;

163 
wrq
.
u
.
d©a
.
Êags
 = 0;

166 
	`°rs˝y
(
wrq
.
i‰_«me
, 
öãrÁ˚
, (wrq.ifr_name));

168 i‡(
	`io˘l
(
ﬁ§_˙f
->
io˘l_s
, 
SIOCSIWSPY
, &
wrq
) < 0) {

169 
	`OLSR_PRINTF
(1, "CouldÇŸ cÀ¨ spyli° %s\n", 
	`°ªº‹
(
î∫o
));

174 
	}
}

177 
	$c⁄vît_ù_to_mac
(
ﬁ§_ù_addr
 *
ù
, 
sockaddr
 *
mac
, *
öãrÁ˚
)

179 
¨¥eq
 
¨p_quîy
;

180 
sockaddr_ö
 
tmp_sockaddr
;

182 
	`mem£t
(&
¨p_quîy
, 0, (
¨¥eq
));

184 
	`OLSR_PRINTF
(1, "\nARP c⁄vîsi⁄ f‹ %†öãrÁ˚ %s\n", 
	`ﬁ§_ù_to_°rög
(
ù
), 
öãrÁ˚
);

186 
tmp_sockaddr
.
sö_Ámûy
 = 
AF_INET
;

187 
tmp_sockaddr
.
sö_p‹t
 = 0;

189 
	`mem˝y
(&
tmp_sockaddr
.
sö_addr
, 
ù
, 
ﬁ§_˙f
->
ùsize
);

192 
	`mem˝y
(&
¨p_quîy
.
¨p_∑
, &
tmp_sockaddr
, (
sockaddr_ö
));

193 
¨p_quîy
.
¨p_ha
.
ß_Ámûy
 = 0;

194 
¨p_quîy
.
¨p_Êags
 = 0;

196 
	`°rs˝y
(
¨p_quîy
.
¨p_dev
, 
öãrÁ˚
, (arp_query.arp_dev));

198 i‡((
	`io˘l
(
ﬁ§_˙f
->
io˘l_s
, 
SIOCGARP
, &
¨p_quîy
Ë< 0Ë|| !◊Ω_quîy.
¨p_Êags
 & 
ATF_COM
)) {

199 
	`OLSR_PRINTF
(1, "AΩ faûed: (%sË-ÅryögÜookup\n", 
	`°ªº‹
(
î∫o
));

202 
	`£nd_pög
(
ù
);

207 
	`OLSR_PRINTF
(1, "Arp success!\n");

209 
	`mem˝y
(
mac
, &
¨p_quîy
.
¨p_ha
, (
sockaddr
));

212 
	}
}

225 
	$£nd_pög
(
ﬁ§_ù_addr
 *
ù
)

227 
pög_s
;

228 
sockaddr
 
d°
;

229 
sockaddr_ö
 *
d°_ö
;

230 *
∑ckë
;

231 
icmphdr
 *
i˝
;

233 
d°_ö
 = (
sockaddr_ö
 *)&
d°
;

235 
d°_ö
->
sö_Ámûy
 = 
AF_INET
;

236 
	`mem˝y
(&
d°_ö
->
sö_addr
, 
ù
, 
ﬁ§_˙f
->
ùsize
);

238 
	`OLSR_PRINTF
(1, "pögög %s\n\n", 
	`ﬁ§_ù_to_°rög
(
ù
));

240 i‡((
pög_s
 = 
	`sockë
(
AF_INET
, 
SOCK_RAW
, 
PF_INET
)) < 0) {

241 
	`OLSR_PRINTF
(1, "CouldÇŸ cª©êRAW sockë f‹Öög!\n%s\n", 
	`°ªº‹
(
î∫o
));

246 
∑ckë
 = 
	`mÆloc
(
MAXIPLEN
 + 
MAXICMPLEN
);

248 
i˝
 = (
icmphdr
 *)
∑ckë
;

249 
i˝
->
ty≥
 = 
ICMP_ECHO
;

250 
i˝
->
code
 = 0;

251 
i˝
->
checksum
 = 0;

252 
i˝
->
un
.
echo
.
£quí˚
 = 1;

253 
i˝
->
un
.
echo
.
id
 = 
	`gëpid
() & 0xFFFF;

255 i‡((
	`£ndto
(
pög_s
, 
∑ckë
, 
MAXIPLEN
 + 
MAXICMPLEN
 + 8, 0, &
d°
, (
sockaddr
))) != MAXIPLEN + MAXICMPLEN + 8) {

256 
	`OLSR_PRINTF
(1, "Eº‹ PING: %s\n", 
	`°ªº‹
(
î∫o
));

261 
	`OLSR_PRINTF
(1, "Ping complete...\n");

262 
	`˛o£
(
pög_s
);

264 
	`‰ì
(
∑ckë
);

267 
	}
}

270 
	$pﬁl_lök_œyî
(*
foo
)

272 
iwªq
 
wrq
;

273 
buf„r
[((
iw_quÆôy
Ë+ (
sockaddr
)Ë* 
IW_MAX_SPY
];

274 
sockaddr
 *
hwa
;

275 
iw_quÆôy
 *
quÆ
;

276 
n
;

277 
iw_ønge
 
ønge
;

278 
i
, 
j
;

279 
has_ønge
 = 0;

280 
öãrÁ˚
 *
iÊi°
;

284 
iÊi°
 = 
i‚ë
; iÊi° !
NULL
; iÊi° = iÊi°->
öt_√xt
) {

285 i‡(!
iÊi°
->
is_wúñess
)

289 
wrq
.
u
.
d©a
.
poöãr
 = (
ˇddr_t
Ë
buf„r
;

290 
wrq
.
u
.
d©a
.
Àngth
 = 
IW_MAX_SPY
;

291 
wrq
.
u
.
d©a
.
Êags
 = 0;

294 
	`°rs˝y
(
wrq
.
i‰_«me
, 
iÊi°
->
öt_«me
, (wrq.ifr_name));

297 i‡(
	`io˘l
(
ﬁ§_˙f
->
io˘l_s
, 
SIOCGIWSPY
, &
wrq
) < 0) {

298 
	`OLSR_PRINTF
(1, "%-8.16† I¡îÁ˚ d€¢'àsuµ‹àwúñes†°©i°i¯cﬁÀ˘i⁄\n\n", 
iÊi°
->
öt_«me
);

303 i‡(
	`iw_gë_ønge_öfo
(
iÊi°
->
öt_«me
, &(
ønge
)) >= 0)

304 
has_ønge
 = 1;

307 
n
 = 
wrq
.
u
.
d©a
.
Àngth
;

310 
hwa
 = (
sockaddr
 *)
buf„r
;

311 
quÆ
 = (
iw_quÆôy
 *)(
buf„r
 + ((
sockaddr
Ë* 
n
));

313 
i
 = 0; i < 
n
; i++) {

314 i‡(!(
quÆ
->
upd©ed
 & 0x7))

318 
	`OLSR_PRINTF
(1, "MAC");

319 
j
 = 0; j < 6; j++) {

320 
	`OLSR_PRINTF
(1, ":%02x", (
hwa
[
i
].
ß_d©a
[
j
] % 0xffffff00));

322 i‡(!
has_ønge
)

323 
	`OLSR_PRINTF
(1, " : QuÆôy:%d Sig«»Àvñ:%d dBm Noi£Üevñ:%d dBm", 
quÆ
[
i
].quÆ, quÆ[i].
Àvñ
 - 0x100,

324 
quÆ
[
i
].
noi£
 - 0x100);

326 
	`OLSR_PRINTF
(1, " : QuÆôy:%d/%d Sig«»Àvñ:%d dBm Noi£Üevñ:%d dBm", 
quÆ
[
i
].quÆ, 
ønge
.
max_quÆ
.qual,

327 
quÆ
[
i
].
Àvñ
 - 0x100, quÆ[i].
noi£
 - 0x100);

329 
	`OLSR_PRINTF
(1, "\n");

336 
	}
}

342 
	$iw_gë_ønge_öfo
(*
i‚ame
, 
iw_ønge
 *
ønge
)

344 
iwªq
 
wrq
;

345 
buf„r
[(
iw_ønge
) * 2];

346 
iw_ønge_øw
 *
ønge_øw
;

349 
	`bzîo
(
buf„r
, (buffer));

351 
wrq
.
u
.
d©a
.
poöãr
 = (
ˇddr_t
Ë
buf„r
;

352 
wrq
.
u
.
d©a
.
Àngth
 = (
buf„r
);

353 
wrq
.
u
.
d©a
.
Êags
 = 0;

356 
	`°rs˝y
(
wrq
.
i‰_«me
, 
i‚ame
, (wrq.ifr_name));

358 i‡(
	`io˘l
(
ﬁ§_˙f
->
io˘l_s
, 
SIOCGIWRANGE
, &
wrq
) < 0) {

359 
	`OLSR_PRINTF
(1, "NO RANGE\n");

364 
ønge_øw
 = (
iw_ønge_øw
 *)
buf„r
;

366 
	`mem˝y
((*)
ønge
, 
buf„r
, (
iw_ønge
));

369 
	}
}

	@src/linux/net.c

46 
	#__BSD_SOURCE
 1

	)

48 
	~"../√t_os.h
"

49 
	~"../ùˇlc.h
"

50 
	~"../ﬁ§.h
"

51 
	~"../log.h
"

52 
	~"kî√l_tu¬ñ.h
"

54 
	~<√t/if.h
>

56 
	~<sys/io˘l.h
>

57 
	~<sys/ut¢ame.h
>

59 
	~<f˙é.h
>

60 
	~<°rög.h
>

61 
	~<°dio.h
>

62 
	~<sy¶og.h
>

63 
	~<uni°d.h
>

68 #ifde‡
IPTOS_CLASS


69 #unde‡
IPTOS_CLASS


71 
	#IPTOS_CLASS
(
˛ass
Ë((˛assË& 
IPTOS_CLASS_MASK
)

	)

73 
	#IPV6_ADDR_LOOPBACK
 0x0010U

	)

74 
	#IPV6_ADDR_LINKLOCAL
 0x0020U

	)

75 
	#IPV6_ADDR_SITELOCAL
 0x0040U

	)

78 
	#PROC_IPFORWARD_V4
 "/¥oc/sys/√t/ùv4/ù_f‹w¨d"

	)

79 
	#PROC_IPFORWARD_V6
 "/¥oc/sys/√t/ùv6/c⁄f/Æl/f‹w¨dög"

	)

82 
	#PROC_IF_REDIRECT
 "/¥oc/sys/√t/ùv4/c⁄f/%s/£nd_ªdúe˘s"

	)

83 
	#PROC_ALL_REDIRECT
 "/¥oc/sys/√t/ùv4/c⁄f/Æl/£nd_ªdúe˘s"

	)

86 
	#PROC_IF_SPOOF
 "/¥oc/sys/√t/ùv4/c⁄f/%s/Ω_fûãr"

	)

87 
	#PROC_ALL_SPOOF
 "/¥oc/sys/√t/ùv4/c⁄f/Æl/Ω_fûãr"

	)

90 
	#PATH_PROCNET_IFINET6
 "/¥oc/√t/if_öë6"

	)

93 
	#OLSRD_FORWARD_VALUE
 '1'

	)

94 
	#OLSRD_REDIRECT_VALUE
 '0'

	)

95 
	#OLSRD_SPOOF_VALUE
 '0'

	)

101 
	#SIOCGIWNAME
 0x8B01

	)

102 
	#SIOCGIWRATE
 0x8B21

	)

105 
	g‹ig_fwd_°©e
;

106 
	g‹ig_globÆ_ªdúe˘_°©e
;

107 
	g‹ig_globÆ_Ω_fûãr
;

108 
	g‹ig_tu¬ñ_Ω_fûãr
;

110 
	g‹ig_tu¬ñ6_Ω_fûãr
;

123 
	$böd_sockë_to_devi˚
(
sock
, *
dev_«me
)

128 
	`OLSR_PRINTF
(3, "Bödög sockë %dÅÿdevi˚ %s\n", 
sock
, 
dev_«me
);

129  
	`£tsock›t
(
sock
, 
SOL_SOCKET
, 
SO_BINDTODEVICE
, 
dev_«me
, 
	`°æí
(dev_name) + 1);

130 
	}
}

132 
	$wrôeToProc
(c⁄° *
fûe
, *
ﬁd
, 
vÆue
) {

133 
fd
;

134 
rv
;

136 i‡((
fd
 = 
	`›í
(
fûe
, 
O_RDWR
)) < 0) {

137 
	`OLSR_PRINTF
(0, "Eº‹, c™nŸ o≥¿¥o¯íåy %s: %†(%d)\n", 
fûe
, 
	`°ªº‹
(
î∫o
),Érrno);

141 i‡(
	`ªad
(
fd
, &
rv
, 1) != 1) {

142 
	`OLSR_PRINTF
(0, "Eº‹, c™nŸÑódÖro¯íåy %s: %†(%d)\n", 
fûe
, 
	`°ªº‹
(
î∫o
),Érrno);

146 i‡(
rv
 !
vÆue
 && value != 0) {

147 i‡(
	`l£ek
(
fd
, 
SEEK_SET
, 0) == -1) {

148 
	`OLSR_PRINTF
(0, "Eº‹, c™nŸÑewödÖro¯íåy %s: %†(%d)\n", 
fûe
, 
	`°ªº‹
(
î∫o
),Érrno);

152 i‡(
	`wrôe
(
fd
, &
vÆue
, 1) != 1) {

153 
	`OLSR_PRINTF
(0, "Eº‹, c™nŸ wrôê¥o¯íåy %s: %†(%d)\n", 
fûe
, 
	`°ªº‹
(
î∫o
),Érrno);

158 i‡(
	`˛o£
(
fd
) != 0) {

159 
	`OLSR_PRINTF
(0, "Eº‹ whûê˛osögÖro¯íåy %s: %†(%d)\n", 
fûe
, 
	`°ªº‹
(
î∫o
),Érrno);

163 i‡(
ﬁd
) {

164 *
ﬁd
 = 
rv
;

167 i‡(
vÆue
) {

168 
	`ﬁ§_sy¶og
(
OLSR_LOG_INFO
, "Wrôög '%c' (wa†%cËtÿ%s", 
vÆue
, 
rv
, 
fûe
);

171 
	}
}

174 
	$ª°‹eProc
(c⁄° *
fûe
, 
‹igöÆ
, 
vÆue
) {

175 i‡–
‹igöÆ
 =
vÆue
 )  0;

176  
	`wrôeToProc
(
fûe
, 
NULL
, 
‹igöÆ
);

177 
	}
}

179 
boﬁ
 
	$is_©_Àa°_löuxkî√l_2_6_31
() {

180 
ut¢ame
 
uts
;

181 *
√xt
;

182 
fú°
 = 0, 
£c⁄d
 = 0, 
thúd
 = 0;

184 
	`mem£t
(&
uts
, 0, (uts));

185 i‡(
	`u«me
(&
uts
)) {

186 
	`OLSR_PRINTF
(1, "Eº‹, couldÇŸÑód kî√»vîsi⁄: %†(%d)\n", 
	`°ªº‹
(
î∫o
),Érrno);

187  
Ál£
;

190 
fú°
 = 
	`°πﬁ
(
uts
.
ªÀa£
, &
√xt
, 10);

192 i‡(
fú°
 >= 3) {

193  
åue
;

196 i‡(*
√xt
 != '.') {

197 
kî√l_∑r£_îr‹
;

200 
£c⁄d
 = 
	`°πﬁ
(
√xt
+1, &next, 10);

201 i‡(*
√xt
 != '.') {

202 
kî√l_∑r£_îr‹
;

205 
thúd
 = 
	`°πﬁ
(
√xt
+1, 
NULL
, 10);

208  
fú°
 =2 && 
£c⁄d
 =6 && 
thúd
 >= 31;

210 
kî√l_∑r£_îr‹
:

211 
	`OLSR_PRINTF
(1, "Eº‹, c™nŸÖ¨£ kî√»vîsi⁄: %s\n", 
uts
.
ªÀa£
);

212  
Ál£
;

213 
	}
}

220 
	$√t_os_£t_globÆ_if›ti⁄s
() {

222 i‡(
	`wrôeToProc
(
ﬁ§_˙f
->
ù_vîsi⁄
 =
AF_INET
 ? 
PROC_IPFORWARD_V4
 : 
PROC_IPFORWARD_V6
, &
‹ig_fwd_°©e
,

223 
ﬁ§_˙f
->
£t_ù_f‹w¨d
 ? 
OLSRD_FORWARD_VALUE
 : 0 )) {

224 
	`OLSR_PRINTF
(1, "Warning, couldÇotÉnable IP forwarding!\n"

226 
	`ﬁ§_°¨tup_¶ìp
(3);

228 i‡((!
ﬁ§_˙f
->
£t_ù_f‹w¨d
Ë&& (
‹ig_fwd_°©e
 !
OLSRD_FORWARD_VALUE
)) {

229 
	`ﬁ§_exô
("IP forwardingÇotáctivated, shutting down.\n", 1);

232 i‡(
ﬁ§_˙f
->
sm¨t_gw_a˘ive
) {

233 
¥ocfûe
[
FILENAME_MAX
];

236 i‡(
ﬁ§_˙f
->
ù_vîsi⁄
 =
AF_INET
 || ol§_˙f->
u£_niô
) {

237 
	`¢¥ötf
(
¥ocfûe
, ’rocfûe), 
PROC_IF_SPOOF
, 
TUNNEL_ENDPOINT_IF
);

238 i‡(
	`wrôeToProc
(
¥ocfûe
, &
‹ig_tu¬ñ_Ω_fûãr
, 
OLSRD_SPOOF_VALUE
)) {

239 
	`OLSR_PRINTF
(0, "WARNING! CouldÇot disableÅhe IP spoof filter forÅunnel!\n"

242 
	`ﬁ§_°¨tup_¶ìp
(3);

247 i‡(
ﬁ§_˙f
->
ù_vîsi⁄
 =
AF_INET6
) {

248 
	`¢¥ötf
(
¥ocfûe
, ’rocfûe), 
PROC_IF_SPOOF
, 
TUNNEL_ENDPOINT_IF6
);

249 i‡(
	`wrôeToProc
(
¥ocfûe
, &
‹ig_tu¬ñ6_Ω_fûãr
, 
OLSRD_SPOOF_VALUE
)) {

250 
	`OLSR_PRINTF
(0, "WARNING! CouldÇot disableÅhe IP spoof filter forÅunnel6!\n"

253 
	`ﬁ§_°¨tup_¶ìp
(3);

259 i‡(
ﬁ§_˙f
->
ù_vîsi⁄
 =
AF_INET
) {

260 i‡(
	`wrôeToProc
(
PROC_ALL_REDIRECT
, &
‹ig_globÆ_ªdúe˘_°©e
, 
OLSRD_REDIRECT_VALUE
)) {

261 
	`OLSR_PRINTF
(1, "WARNING! CouldÇot disable ICMPÑedirects!\n"

264 
	`ﬁ§_°¨tup_¶ìp
(3);

268 i‡(
	`is_©_Àa°_löuxkî√l_2_6_31
()) {

269 i‡(
	`wrôeToProc
(
PROC_ALL_SPOOF
, &
‹ig_globÆ_Ω_fûãr
, 
OLSRD_SPOOF_VALUE
)) {

270 
	`OLSR_PRINTF
(1, "WARNING! CouldÇot disable globalÑp_filter (necessary for kernel 2.6.31ánd higher!\n"

273 
	`ﬁ§_°¨tup_¶ìp
(3);

278 
	}
}

285 
	$√t_os_£t_if›ti⁄s
(c⁄° *
if_«me
, 
öãrÁ˚
 *
iÁ˚
)

287 
¥ocfûe
[
FILENAME_MAX
];

288 i‡(
ﬁ§_˙f
->
ù_vîsi⁄
 =
AF_INET6
)

292 
	`¢¥ötf
(
¥ocfûe
, ’rocfûe), 
PROC_IF_REDIRECT
, 
if_«me
);

294 i‡(
	`wrôeToProc
(
¥ocfûe
, &
iÁ˚
->
nic_°©e
.
ªdúe˘
, 
OLSRD_REDIRECT_VALUE
)) {

295 
	`OLSR_PRINTF
(0, "WARNING! CouldÇot disable ICMPÑedirects!\n"

297 
	`ﬁ§_°¨tup_¶ìp
(3);

302 
	`¢¥ötf
(
¥ocfûe
, ’rocfûe), 
PROC_IF_SPOOF
, 
if_«me
);

304 i‡(
	`wrôeToProc
(
¥ocfûe
, &
iÁ˚
->
nic_°©e
.
•oof
, 
OLSRD_SPOOF_VALUE
)) {

305 
	`OLSR_PRINTF
(0, "WARNING! CouldÇot disableÅhe IP spoof filter!\n"

308 
	`ﬁ§_°¨tup_¶ìp
(3);

312 
	}
}

318 
	$√t_os_ª°‹e_if›ti⁄s
()

320 
öãrÁ˚
 *
ifs
;

321 
¥ocfûe
[
FILENAME_MAX
];

323 
	`OLSR_PRINTF
(1, "RestoringÇetwork state\n");

326 i‡(
ﬁ§_˙f
->
£t_ù_f‹w¨d
) {

327 i‡(
	`ª°‹eProc
(
ﬁ§_˙f
->
ù_vîsi⁄
 =
AF_INET
 ? 
PROC_IPFORWARD_V4
 : 
PROC_IPFORWARD_V6
, 
‹ig_fwd_°©e
, 
OLSRD_FORWARD_VALUE
)) {

328 
	`OLSR_PRINTF
(1, "Error, couldÇotÑestore ip_forward settings\n");

332 i‡(
ﬁ§_˙f
->
sm¨t_gw_a˘ive
 && (ﬁ§_˙f->
ù_vîsi⁄
 =
AF_INET
 || ol§_˙f->
u£_niô
)) {

334 
	`¢¥ötf
(
¥ocfûe
, ’rocfûe), 
PROC_IF_SPOOF
, 
TUNNEL_ENDPOINT_IF
);

335 i‡(
	`ª°‹eProc
(
¥ocfûe
, 
‹ig_tu¬ñ_Ω_fûãr
, 
OLSRD_SPOOF_VALUE
)) {

336 
	`OLSR_PRINTF
(0, "WARNING! CouldÇotÑestoreÅhe IP spoof filter forÅunnel!\n");

340 i‡(
ﬁ§_˙f
->
ù_vîsi⁄
 =
AF_INET6
) {

341 
	`¢¥ötf
(
¥ocfûe
, ’rocfûe), 
PROC_IF_SPOOF
, 
TUNNEL_ENDPOINT_IF6
);

342 i‡(
	`ª°‹eProc
(
¥ocfûe
, 
‹ig_tu¬ñ6_Ω_fûãr
, 
OLSRD_SPOOF_VALUE
)) {

343 
	`OLSR_PRINTF
(0, "WARNING! CouldÇotÑestoreÅhe IP spoof filter forÅunnel6!\n");

349 i‡(
ﬁ§_˙f
->
ù_vîsi⁄
 =
AF_INET
) {

351 i‡(
	`ª°‹eProc
(
PROC_ALL_REDIRECT
, 
‹ig_globÆ_ªdúe˘_°©e
, 
OLSRD_REDIRECT_VALUE
)) {

352 
	`OLSR_PRINTF
(1, "Error, couldÇotÑestore global icmp_redirect setting\n");

356 i‡(
	`is_©_Àa°_löuxkî√l_2_6_31
()) {

357 i‡(
	`ª°‹eProc
(
PROC_ALL_SPOOF
, 
‹ig_globÆ_Ω_fûãr
, 
OLSRD_SPOOF_VALUE
)) {

358 
	`OLSR_PRINTF
(1, "Error, couldÇotÑestore globalÑp_filter setting\n");

361 
ifs
 = 
i‚ë
; if†!
NULL
; if†ifs->
öt_√xt
) {

363 i‡(
ifs
->
is_hcif
)

367 
	`¢¥ötf
(
¥ocfûe
, ’rocfûe), 
PROC_IF_REDIRECT
, 
ifs
->
öt_«me
);

368 i‡(
	`ª°‹eProc
(
¥ocfûe
, 
ifs
->
nic_°©e
.
ªdúe˘
, 
OLSRD_REDIRECT_VALUE
)) {

369 
	`OLSR_PRINTF
(1, "Eº‹, couldÇŸÑe°‹êicmp_ªdúe˘ f‹ i¡îÁ˚ %s\n", 
ifs
->
öt_«me
);

373 
	`•rötf
(
¥ocfûe
, 
PROC_IF_SPOOF
, 
ifs
->
öt_«me
);

374 i‡(
	`ª°‹eProc
(
¥ocfûe
, 
ifs
->
nic_°©e
.
•oof
, 
OLSRD_SPOOF_VALUE
)) {

375 
	`OLSR_PRINTF
(1, "Eº‹, couldÇŸÑe°‹êΩ_fûã∏f‹ i¡îÁ˚ %s\n", 
ifs
->
öt_«me
);

380 
	}
}

388 
	$gëhemusockë
(
sockaddr_ö
 *
pö
)

390 
sock
, 
⁄
 = 1;

392 
	`OLSR_PRINTF
(1, " ConnectingÅo switch daemonÖort 10150...");

393 i‡((
sock
 = 
	`sockë
(
AF_INET
, 
SOCK_STREAM
, 0)) < 0) {

394 
	`≥º‹
("hcsocket");

395 
	`sy¶og
(
LOG_ERR
, "hcsocket: %m");

399 i‡(
	`£tsock›t
(
sock
, 
SOL_SOCKET
, 
SO_REUSEADDR
, &
⁄
, (on)) < 0) {

400 
	`≥º‹
("SO_REUSEADDR failed");

401 
	`˛o£
(
sock
);

405 i‡(
	`c⁄√˘
(
sock
, (
sockaddr
 *)
pö
, (*pin)) < 0) {

406 
	`¥ötf
("FAILED\n");

407 
	`Ârötf
(
°dîr
, "Eº‹ c⁄√˘ög %d - %s\n", 
î∫o
, 
	`°ªº‹
(errno));

408 
	`¥ötf
("connectionÑefused\n");

409 
	`˛o£
(
sock
);

413 
	`¥ötf
("OK\n");

416  
sock
;

417 
	}
}

425 
	$gësockë
(
buf•a˚
, 
öãrÁ˚
 *
iÂ
)

427 
sockaddr_ö
 
sö
;

428 
⁄
;

429 
sock
 = 
	`sockë
(
AF_INET
, 
SOCK_DGRAM
, 0);

430 i‡(
sock
 < 0) {

431 
	`≥º‹
("socket");

432 
	`sy¶og
(
LOG_ERR
, "socket: %m");

436 
⁄
 = 1;

437 #ifde‡
SO_BROADCAST


438 i‡(
	`£tsock›t
(
sock
, 
SOL_SOCKET
, 
SO_BROADCAST
, &
⁄
, (on)) < 0) {

439 
	`≥º‹
("setsockopt");

440 
	`sy¶og
(
LOG_ERR
, "setsockopt SO_BROADCAST: %m");

441 
	`˛o£
(
sock
);

446 i‡(
	`£tsock›t
(
sock
, 
SOL_SOCKET
, 
SO_REUSEADDR
, &
⁄
, (on)) < 0) {

447 
	`≥º‹
("SO_REUSEADDR failed");

448 
	`˛o£
(
sock
);

451 #ifde‡
SO_RCVBUF


452 if(
buf•a˚
 > 0) {

453 
⁄
 = 
buf•a˚
;; on -= 1024) {

454 i‡(
	`£tsock›t
(
sock
, 
SOL_SOCKET
, 
SO_RCVBUF
, &
⁄
, (on)) == 0)

456 i‡(
⁄
 <= 8 * 1024) {

457 
	`≥º‹
("setsockopt");

458 
	`sy¶og
(
LOG_ERR
, "setsockopt SO_RCVBUF: %m");

470 i‡(
	`böd_sockë_to_devi˚
(
sock
, 
iÂ
->
öt_«me
) < 0) {

471 
	`Ârötf
(
°dîr
, "CouldÇot bind socketÅo device...Éxiting!\n\n");

472 
	`sy¶og
(
LOG_ERR
, "CouldÇot bind socketÅo device...Éxiting!\n\n");

473 
	`˛o£
(
sock
);

477 
	`mem£t
(&
sö
, 0, (sin));

478 
sö
.
sö_Ámûy
 = 
AF_INET
;

479 
sö
.
sö_p‹t
 = 
	`ht⁄s
(
ﬁ§_˙f
->
ﬁ§p‹t
);

481 if(
buf•a˚
 <= 0) {

482 
sö
.
sö_addr
.
s_addr
 = 
iÂ
->
öt_addr
.sin_addr.s_addr;

485 i‡(
	`böd
(
sock
, (
sockaddr
 *)&
sö
, (sin)) < 0) {

486 
	`≥º‹
("bind");

487 
	`sy¶og
(
LOG_ERR
, "bind: %m");

488 
	`˛o£
(
sock
);

492 
⁄
 = 
	`f˙é
(
sock
, 
F_GETFL
);

493 i‡(
⁄
 == -1) {

494 
	`sy¶og
(
LOG_ERR
, "fcntl (F_GETFL): %m\n");

496 i‡(
	`f˙é
(
sock
, 
F_SETFL
, 
⁄
 | 
O_NONBLOCK
) == -1) {

497 
	`sy¶og
(
LOG_ERR
, "fcntl O_NONBLOCK: %m\n");

500  
sock
;

501 
	}
}

509 
	$gësockë6
(
buf•a˚
, 
öãrÁ˚
 *
iÂ
)

511 
sockaddr_ö6
 
sö
;

512 
⁄
;

513 
sock
 = 
	`sockë
(
AF_INET6
, 
SOCK_DGRAM
, 0);

514 i‡(
sock
 < 0) {

515 
	`≥º‹
("socket");

516 
	`sy¶og
(
LOG_ERR
, "socket: %m");

519 #ifde‡
IPV6_V6ONLY


520 
⁄
 = 1;

521 i‡(
	`£tsock›t
(
sock
, 
IPPROTO_IPV6
, 
IPV6_V6ONLY
, &
⁄
, (on)) < 0) {

522 
	`≥º‹
("setsockopt(IPV6_V6ONLY)");

523 
	`sy¶og
(
LOG_ERR
, "setsockopt(IPV6_V6ONLY): %m");

539 #ifde‡
SO_RCVBUF


540 if(
buf•a˚
 > 0) {

541 
⁄
 = 
buf•a˚
;; on -= 1024) {

542 i‡(
	`£tsock›t
(
sock
, 
SOL_SOCKET
, 
SO_RCVBUF
, &
⁄
, (on)) == 0)

544 i‡(
⁄
 <= 8 * 1024) {

545 
	`≥º‹
("setsockopt");

546 
	`sy¶og
(
LOG_ERR
, "setsockopt SO_RCVBUF: %m");

553 i‡(
	`£tsock›t
(
sock
, 
SOL_SOCKET
, 
SO_REUSEADDR
, &
⁄
, (on)) < 0) {

554 
	`≥º‹
("SO_REUSEADDR failed");

555 
	`˛o£
(
sock
);

564 i‡(
	`böd_sockë_to_devi˚
(
sock
, 
iÂ
->
öt_«me
) < 0) {

565 
	`Ârötf
(
°dîr
, "CouldÇot bind socketÅo device...Éxiting!\n\n");

566 
	`sy¶og
(
LOG_ERR
, "CouldÇot bind socketÅo device...Éxiting!\n\n");

567 
	`˛o£
(
sock
);

571 
	`mem£t
(&
sö
, 0, (sin));

572 
sö
.
sö6_Ámûy
 = 
AF_INET6
;

573 
sö
.
sö6_p‹t
 = 
	`ht⁄s
(
ﬁ§_˙f
->
ﬁ§p‹t
);

574 
sö
.
sö6_sc›e_id
 = 
iÂ
->
if_ödex
;

576 if(
buf•a˚
 <= 0) {

577 
	`mem˝y
(&
sö
.
sö6_addr
, &
iÂ
->
öt6_addr
.sö6_addr, (
ö6_addr
));

580 i‡(
	`böd
(
sock
, (
sockaddr
 *)&
sö
, (sin)) < 0) {

581 
ùaddr_°r
 
buf
;

582 
	`OLSR_PRINTF
(1, "Error, cannot bindáddress %sÅo %s-socket: %s (%d)\n",

583 
	`öë_¡›
(
sö
.
sö6_Ámûy
, &sö.
sö6_addr
, 
buf
.buf, (buf)),

584 
buf•a˚
 <= 0 ? "transmit" : "receive",

585 
	`°ªº‹
(
î∫o
),Érrno);

586 
	`sy¶og
(
LOG_ERR
, "bind: %m");

587 
	`˛o£
(
sock
);

591 
⁄
 = 
	`f˙é
(
sock
, 
F_GETFL
);

592 i‡(
⁄
 == -1) {

593 
	`sy¶og
(
LOG_ERR
, "fcntl (F_GETFL): %m\n");

595 i‡(
	`f˙é
(
sock
, 
F_SETFL
, 
⁄
 | 
O_NONBLOCK
) == -1) {

596 
	`sy¶og
(
LOG_ERR
, "fcntl O_NONBLOCK: %m\n");

599  
sock
;

600 
	}
}

603 
	$joö_mˇ°
(
öãrÁ˚
 *
ifs
, 
sock
)

606 
ùaddr_°r
 
buf
;

607 
ùv6_mªq
 
mˇ°ªq
;

609 
mˇ°ªq
.
ùv6mr_mu…üddr
 = 
ifs
->
öt6_mu…addr
.
sö6_addr
;

610 
mˇ°ªq
.
ùv6mr_öãrÁ˚
 = 
ifs
->
if_ödex
;

612 #i‡!
deföed
 
__FªeBSD__
 && !deföed 
__FªeBSD_kî√l__
 && !deföed 
__MacOSX__
 && !deföed 
__NëBSD__


613 
	`OLSR_PRINTF
(3, "I¡îÁ˚ %†joöög mu…iˇ° %s...", 
ifs
->
öt_«me
, 
	`ù6_to_°rög
(&
buf
, &ifs->
öt6_mu…addr
.
sö6_addr
));

615 i‡(
	`£tsock›t
(
sock
, 
IPPROTO_IPV6
, 
IPV6_ADD_MEMBERSHIP
, (*)&
mˇ°ªq
, (
ùv6_mªq
)) < 0) {

616 
	`≥º‹
("Join multicast");

620 #w¨nög 
im∂emít
 
IPV6_ADD_MEMBERSHIP


624 #ifde‡
IPV6_JOIN_GROUP


626 i‡(
	`£tsock›t
(
sock
, 
IPPROTO_IPV6
, 
IPV6_JOIN_GROUP
, (*)&
mˇ°ªq
, (
ùv6_mªq
)) < 0)

629 i‡(
	`£tsock›t
(
sock
, 
IPPROTO_IPV6
, 
IPV6_ADD_MEMBERSHIP
, (*)&
mˇ°ªq
, (
ùv6_mªq
)) < 0)

632 
	`≥º‹
("Join multicast send");

636 i‡(
	`£tsock›t
(
sock
, 
IPPROTO_IPV6
, 
IPV6_MULTICAST_IF
, (*)&
mˇ°ªq
.
ùv6mr_öãrÁ˚
, (mcastreq.ipv6mr_interface)) < 0) {

637 
	`≥º‹
("Set multicast if");

641 
	`OLSR_PRINTF
(3, "OK\n");

643 
	}
}

650 
	$gë_ùv6_addªss
(*
i‚ame
, 
sockaddr_ö6
 *
ßddr6
, 
ﬁ§_ù_¥efix
 *
¥efix
)

652 
addr6
[40], 
dev«me
[
IFNAMSIZ
];

653 
addr6p
[8][5];

654 
∂í
, 
sc›e
, 
dad_°©us
, 
if_idx
;

655 
FILE
 *
f
;

656 
ﬁ§_ù_addr
 
tmp_ù
;

658 i‡((
f
 = 
	`f›í
(
PATH_PROCNET_IFINET6
, "r")Ë!
NULL
) {

659 
fsˇnf


660 (
f
, "%4s%4s%4s%4s%4s%4s%4s%4†%x %02x %02x %02x %20s\n", 
addr6p
[0],áddr6p[1],áddr6p[2],áddr6p[3],áddr6p[4],

661 
addr6p
[5],áddr6p[6],áddr6p[7], &
if_idx
, &
∂í
, &
sc›e
, &
dad_°©us
, 
dev«me
Ë!
EOF
) {

662 i‡(!
	`°rcmp
(
dev«me
, 
i‚ame
)) {

663 
boﬁ
 
isNëWide
 = 
Ál£
;

664 
	`•rötf
(
addr6
, "%s:%s:%s:%s:%s:%s:%s:%s", 
addr6p
[0],áddr6p[1],áddr6p[2],áddr6p[3],áddr6p[4],áddr6p[5],áddr6p[6],

665 
addr6p
[7]);

666 
	`OLSR_PRINTF
(5, "\töë6áddr: %s\n", 
addr6
);

667 
	`OLSR_PRINTF
(5, "\tSc›e: %d\n", 
sc›e
);

669 
	`öë_±⁄
(
AF_INET6
, 
addr6
, &
tmp_ù
.
v6
);

671 
isNëWide
 = (
sc›e
 !
IPV6_ADDR_LOOPBACK
Ë&& (sc›ê!
IPV6_ADDR_LINKLOCAL
Ë&& (sc›ê!
IPV6_ADDR_SITELOCAL
);

673 i‡((
¥efix
 =
NULL
 && 
isNëWide
Ë|| (¥efix !NULL && 
	`ù_ö_√t
(&
tmp_ù
,Örefix))) {

674 
	`OLSR_PRINTF
(4, "Foundáddr: %s:%s:%s:%s:%s:%s:%s:%s\n", 
addr6p
[0],áddr6p[1],áddr6p[2],áddr6p[3],áddr6p[4],áddr6p[5],

675 
addr6p
[6],áddr6p[7]);

676 
	`mem˝y
(&
ßddr6
->
sö6_addr
, &
tmp_ù
.
v6
, (
ö6_addr
));

677 
	`f˛o£
(
f
);

682 
	`f˛o£
(
f
);

685 
	}
}

690 
ssize_t


691 
	$ﬁ§_£ndto
(
s
, c⁄° *
buf
, 
size_t
 
Àn
, 
Êags
, c⁄° 
sockaddr
 * 
to
, 
sockÀn_t
 
tﬁí
)

693  
	`£ndto
(
s
, 
buf
, 
Àn
, 
Êags
, 
to
, 
tﬁí
);

694 
	}
}

700 
ssize_t


701 
	$ﬁ§_ªcv‰om
(
s
, *
buf
, 
size_t
 
Àn
, 
Êags
, 
sockaddr
 * 
‰om
, 
sockÀn_t
 * 
‰omÀn
)

703  
	`ªcv‰om
(
s
, 
buf
, 
Àn
, 
Êags
, 
‰om
, 
‰omÀn
);

704 
	}
}

711 
	$ﬁ§_£À˘
(
nfds
, 
fd_£t
 * 
ªadfds
, fd_£à* 
wrôefds
, fd_£à* 
ex˚±fds
, 
timevÆ
 *
timeout
)

713  
	`£À˘
(
nfds
, 
ªadfds
, 
wrôefds
, 
ex˚±fds
, 
timeout
);

714 
	}
}

717 
	$check_wúñess_öãrÁ˚
(*
i‚ame
)

719 
i‰eq
 
i‰
;

721 
	`mem£t
(&
i‰
, 0, (ifr));

722 
	`°rs˝y
(
i‰
.
i‰_«me
, 
i‚ame
, (ifr.ifr_name));

724  (
	`io˘l
(
ﬁ§_˙f
->
io˘l_s
, 
SIOCGIWNAME
, &
i‰
) >= 0) ? 1 : 0;

725 
	}
}

729 
	~<löux/sockios.h
>

730 
	~<löux/ty≥s.h
>

733 
	smii_d©a
 {

734 
__u16
 
	mphy_id
;

735 
__u16
 
	mªg_num
;

736 
__u16
 
	mvÆ_ö
;

737 
__u16
 
	mvÆ_out
;

741 
	#MII_BMCR
 0x00

	)

742 
	#MII_BMCR_RESET
 0x8000

	)

743 
	#MII_BMCR_LOOPBACK
 0x4000

	)

744 
	#MII_BMCR_100MBIT
 0x2000

	)

745 
	#MII_BMCR_AN_ENA
 0x1000

	)

746 
	#MII_BMCR_ISOLATE
 0x0400

	)

747 
	#MII_BMCR_RESTART
 0x0200

	)

748 
	#MII_BMCR_DUPLEX
 0x0100

	)

749 
	#MII_BMCR_COLTEST
 0x0080

	)

752 
	#MII_BMSR
 0x01

	)

753 
	#MII_BMSR_CAP_MASK
 0xf800

	)

754 
	#MII_BMSR_100BASET4
 0x8000

	)

755 
	#MII_BMSR_100BASETX_FD
 0x4000

	)

756 
	#MII_BMSR_100BASETX_HD
 0x2000

	)

757 
	#MII_BMSR_10BASET_FD
 0x1000

	)

758 
	#MII_BMSR_10BASET_HD
 0x0800

	)

759 
	#MII_BMSR_NO_PREAMBLE
 0x0040

	)

760 
	#MII_BMSR_AN_COMPLETE
 0x0020

	)

761 
	#MII_BMSR_REMOTE_FAULT
 0x0010

	)

762 
	#MII_BMSR_AN_ABLE
 0x0008

	)

763 
	#MII_BMSR_LINK_VALID
 0x0004

	)

764 
	#MII_BMSR_JABBER
 0x0002

	)

765 
	#MII_BMSR_EXT_CAP
 0x0001

	)

768 
	$ˇlcuœã_if_mëric
(*
i‚ame
)

770 i‡(
	`check_wúñess_öãrÁ˚
(
i‚ame
)) {

771 
i‰eq
 
i‰
;

772 
	`°rs˝y
(
i‰
.
i‰_«me
, 
i‚ame
, (ifr.ifr_name));

775 i‡(
	`io˘l
(
ﬁ§_˙f
->
io˘l_s
, 
SIOCGIWRATE
, &
i‰
) < 0) {

776 
	`OLSR_PRINTF
(1, "NŸábÀÅÿfödÑ©êf‹ WLAN i¡îÁ˚ %s\n", 
i‚ame
);

777  
WEIGHT_WLAN_11MB
;

780 
	`OLSR_PRINTF
(1, "Bôøã %d\n", 
i‰
.
i‰_i‰u
.
i‰u_ivÆue
);

785  
WEIGHT_WLAN_LOW
;

789 
i‰eq
 
i‰
;

790 
mii_d©a
 *
mii
 = (mii_d©®*)&
i‰
.
i‰_d©a
;

791 
bm¸
;

792 
	`mem£t
(&
i‰
, 0, (ifr));

793 
	`°rs˝y
(
i‰
.
i‰_«me
, 
i‚ame
, (ifr.ifr_name));

795 i‡(
	`io˘l
(
ﬁ§_˙f
->
io˘l_s
, 
SIOCGMIIPHY
, &
i‰
) < 0) {

796 i‡(
î∫o
 !
ENODEV
)

797 
	`OLSR_PRINTF
(1, "SIOCGMIIPHY o¿'%s' faûed: %s\n", 
i‰
.
i‰_«me
, 
	`°ªº‹
(
î∫o
));

798  
WEIGHT_ETHERNET_DEFAULT
;

801 
mii
->
ªg_num
 = 
MII_BMCR
;

802 i‡(
	`io˘l
(
ﬁ§_˙f
->
io˘l_s
, 
SIOCGMIIREG
, &
i‰
) < 0) {

803 
	`OLSR_PRINTF
(1, "SIOCGMIIREG o¿%†Áûed: %s\n", 
i‰
.
i‰_«me
, 
	`°ªº‹
(
î∫o
));

804  
WEIGHT_ETHERNET_DEFAULT
;

806 
bm¸
 = 
mii
->
vÆ_out
;

808 
	`OLSR_PRINTF
(1, "%s: ", 
i‰
.
i‰_«me
);

809 
	`OLSR_PRINTF
(1, "%†Mbô, %†du∂ex\n", (
bm¸
 & 
MII_BMCR_100MBIT
Ë? "100" : "10", (bm¸ & 
MII_BMCR_DUPLEX
) ? "full" : "half");

811 
	`is_if_lök_up
(
i‚ame
);

813 i‡(
mii
->
vÆ_out
 & 
MII_BMCR_100MBIT
)

814  
WEIGHT_ETHERNET_100MB
;

816  
WEIGHT_ETHERNET_10MB
;

820 
	}
}

822 
boﬁ


823 
	$is_if_lök_up
(*
i‚ame
)

825 i‡(
	`check_wúñess_öãrÁ˚
(
i‚ame
)) {

827  
åue
;

830 
i‰eq
 
i‰
;

831 
mii_d©a
 *
mii
 = (mii_d©®*)&
i‰
.
i‰_d©a
;

832 
bm§
;

833 
	`mem£t
(&
i‰
, 0, (ifr));

834 
	`°rs˝y
(
i‰
.
i‰_«me
, 
i‚ame
, (ifr.ifr_name));

836 i‡(
	`io˘l
(
ﬁ§_˙f
->
io˘l_s
, 
SIOCGMIIPHY
, &
i‰
) < 0) {

837 i‡(
î∫o
 !
ENODEV
)

838 
	`OLSR_PRINTF
(1, "SIOCGMIIPHY o¿'%s' faûed: %s\n", 
i‰
.
i‰_«me
, 
	`°ªº‹
(
î∫o
));

839  
WEIGHT_ETHERNET_DEFAULT
;

841 
mii
->
ªg_num
 = 
MII_BMSR
;

842 i‡(
	`io˘l
(
ﬁ§_˙f
->
io˘l_s
, 
SIOCGMIIREG
, &
i‰
) < 0) {

843 
	`OLSR_PRINTF
(1, "SIOCGMIIREG o¿%†Áûed: %s\n", 
i‰
.
i‰_«me
, 
	`°ªº‹
(
î∫o
));

844  
WEIGHT_ETHERNET_DEFAULT
;

846 
bm§
 = 
mii
->
vÆ_out
;

848 
	`OLSR_PRINTF
(1, "%s: ", 
i‰
.
i‰_«me
);

849 
	`OLSR_PRINTF
(1, "%s\n", (
bm§
 & 
MII_BMSR_LINK_VALID
) ? "link ok " : "noÜink ");

851  (
bm§
 & 
MII_BMSR_LINK_VALID
);

854 
	}
}

858 
	$ˇlcuœã_if_mëric
(*
i‚ame
)

860  
	`check_wúñess_öãrÁ˚
(
i‚ame
);

861 
	}
}

864 
boﬁ
 
	$ﬁ§_if_isup
(c⁄° * 
dev
)

866 
i‰eq
 
i‰
;

868 
	`mem£t
(&
i‰
, 0, (ifr));

869 
	`°rs˝y
(
i‰
.
i‰_«me
, 
dev
, 
IFNAMSIZ
);

871 i‡(
	`io˘l
(
ﬁ§_˙f
->
io˘l_s
, 
SIOCGIFFLAGS
, &
i‰
) < 0) {

872 
	`OLSR_PRINTF
(1, "ioctl SIOCGIFFLAGS (get flags)Érror on device %s: %s (%d)\n",

873 
dev
, 
	`°ªº‹
(
î∫o
),Érrno);

876  (
i‰
.
i‰_Êags
 & 
IFF_UP
) != 0;

877 
	}
}

879 
	$ﬁ§_if_£t_°©e
(c⁄° *
dev
, 
boﬁ
 
up
) {

880 
ﬁdÊags
;

881 
i‰eq
 
i‰
;

883 
	`mem£t
(&
i‰
, 0, (ifr));

884 
	`°rs˝y
(
i‰
.
i‰_«me
, 
dev
, 
IFNAMSIZ
);

886 i‡(
	`io˘l
(
ﬁ§_˙f
->
io˘l_s
, 
SIOCGIFFLAGS
, &
i‰
) < 0) {

887 
	`OLSR_PRINTF
(1, "ioctl SIOCGIFFLAGS (get flags)Érror on device %s: %s (%d)\n",

888 
dev
, 
	`°ªº‹
(
î∫o
),Érrno);

892 
ﬁdÊags
 = 
i‰
.
i‰_Êags
;

893 i‡(
up
) {

894 
i‰
.
i‰_Êags
 |
IFF_UP
;

897 
i‰
.
i‰_Êags
 &~
IFF_UP
;

900 i‡(
ﬁdÊags
 =
i‰
.
i‰_Êags
) {

905 i‡(
	`io˘l
(
ﬁ§_˙f
->
io˘l_s
, 
SIOCSIFFLAGS
, &
i‰
) < 0) {

906 
	`OLSR_PRINTF
(1, "ioctl SIOCSIFFLAGS (set flags %s)Érror on device %s: %s (%d)\n",

907 
up
 ? "up" : "down", 
dev
, 
	`°ªº‹
(
î∫o
),Érrno);

911 
	}
}

	@src/log.h

48 #i‚de‡
_OLSR_SYSLOG_H


49 
	#_OLSR_SYSLOG_H


	)

51 
	#OLSR_LOG_INFO
 1

	)

52 
	#OLSR_LOG_ERR
 2

	)

54 
ﬁ§_›ílog
(c⁄° *
idít
);

56 #i‡
SYSLOG_NUMBERING


57 
	$ﬁ§_sy¶og_ªÆ
(
Àvñ
, c⁄° *
f‹m©
, ...Ë
	`__©åibuã__
 ((
	`f‹m©
(
¥ötf
, 2, 3)));

59 
ﬁ§_sy¶og_˘r
;

60 
	#ﬁ§_sy¶og
(
Àvñ
, 
f‹m©
, ...Ë
	`ﬁ§_sy¶og_ªÆ
 (Àvñ, "%02x: " f‹m©, 
ﬁ§_sy¶og_˘r
++ & 0xFF, ## 
__VA_ARGS__
 )

	)

62 
	$ﬁ§_sy¶og
(
Àvñ
, c⁄° *
f‹m©
, ...Ë
	`__©åibuã__
 ((
	`f‹m©
(
¥ötf
, 2, 3)));

	@src/lq_mpr.c

42 
	~"defs.h
"

43 
	~"√ighb‹_èbÀ.h
"

44 
	~"two_h›_√ighb‹_èbÀ.h
"

45 
	~"lök_£t.h
"

46 
	~"lq_m¥.h
"

47 
	~"scheduÀr.h
"

48 
	~"lq_∂ugö.h
"

51 
	$ﬁ§_ˇlcuœã_lq_m¥
()

53 
√ighb‹_2_íåy
 *
√igh2
;

54 
√ighb‹_li°_íåy
 *
wÆkî
;

55 
i
, 
k
;

56 
√ighb‹_íåy
 *
√igh
;

57 
ﬁ§_lökco°
 
be°
, 
be°_1h›
;

58 
boﬁ
 
m¥_ch™ges
 = 
Ál£
;

60 
	`OLSR_FOR_ALL_NBR_ENTRIES
(
√igh
) {

64 
√igh
->
was_m¥
 =Çeigh->
is_m¥
;

68 
√igh
->
is_m¥
 = 
Ál£
;

72 i‡(
√igh
->
°©us
 =
NOT_SYM
 ||Çeigh->
wûlög√ss
 !
WILL_ALWAYS
) {

76 
√igh
->
is_m¥
 = 
åue
;

78 i‡(
√igh
->
is_m¥
 !√igh->
was_m¥
) {

79 
m¥_ch™ges
 = 
åue
;

83 
	`OLSR_FOR_ALL_NBR_ENTRIES_END
(
√igh
);

85 
i
 = 0; i < 
HASHSIZE
; i++) {

88 
√igh2
 = 
two_h›_√ighb‹èbÀ
[
i
].
√xt
;Çeigh2 != &two_hop_neighbortable[i];Çeigh2 =Çeigh2->next) {

89 
be°_1h›
 = 
LINK_COST_BROKEN
;

93 
√igh
 = 
	`ﬁ§_lookup_√ighb‹_èbÀ
(&
√igh2
->
√ighb‹_2_addr
);

98 i‡(
√igh
 !
NULL
 &&Çeigh->
°©us
 =
SYM
) {

105 
lök_íåy
 *
 k
 = 
	`gë_be°_lök_to_√ighb‹
(&
√igh
->
√ighb‹_maö_addr
);

107 i‡(!
 k
)

110 
be°_1h›
 = 
 k
->
lökco°
;

114 
wÆkî
 = 
√igh2
->
√ighb‹_2_nbli°
.
√xt
; walker != &neigh2->neighbor_2_nblist; walker = walker->next)

115 i‡(
wÆkî
->
∑th_lökco°
 < 
be°_1h›
)

122 i‡(
wÆkî
 =&
√igh2
->
√ighb‹_2_nbli°
)

131 
wÆkî
 = 
√igh2
->
√ighb‹_2_nbli°
.
√xt
; walker != &neigh2->neighbor_2_nblist; walker = walker->next)

132 
wÆkî
->
√ighb‹
->
skù
 = 
Ál£
;

134 
k
 = 0; k < 
ﬁ§_˙f
->
m¥_covîage
; k++) {

138 
√igh
 = 
NULL
;

139 
be°
 = 
LINK_COST_BROKEN
;

141 
wÆkî
 = 
√igh2
->
√ighb‹_2_nbli°
.
√xt
; walker != &neigh2->neighbor_2_nblist; walker = walker->next)

142 i‡(
wÆkî
->
√ighb‹
->
°©us
 =
SYM
 && !wÆkî->√ighb‹->
skù
 && wÆkî->
∑th_lökco°
 < 
be°
) {

143 
√igh
 = 
wÆkî
->
√ighb‹
;

144 
be°
 = 
wÆkî
->
∑th_lökco°
;

150 i‡((
√igh
 !
NULL
Ë&& (
be°
 < 
be°_1h›
)) {

151 
√igh
->
is_m¥
 = 
åue
;

152 
√igh
->
skù
 = 
åue
;

154 i‡(
√igh
->
is_m¥
 !√igh->
was_m¥
)

155 
m¥_ch™ges
 = 
åue
;

167 i‡(
m¥_ch™ges
 && 
ﬁ§_˙f
->
tc_ªdund™cy
 > 0)

168 
	`sig«l_lök_ch™ges
(
åue
);

169 
	}
}

	@src/lq_mpr.h

42 #i‚de‡
_OLSR_LQ_MPR


43 
	#_OLSR_LQ_MPR


	)

45 
ﬁ§_ˇlcuœã_lq_m¥
();

	@src/lq_packet.c

44 
	~"ùˇlc.h
"

45 
	~"ﬁ§_¥Ÿocﬁ.h
"

46 
	~"defs.h
"

47 
	~"lq_∑ckë.h
"

48 
	~"öãrÁ˚s.h
"

49 
	~"lök_£t.h
"

50 
	~"√ighb‹_èbÀ.h
"

51 
	~"m¥_£À˘‹_£t.h
"

52 
	~"mid_£t.h
"

53 
	~"m™tisß.h
"

54 
	~"¥o˚ss_∑ckage.h
"

55 
	~"two_h›_√ighb‹_èbÀ.h
"

56 
	~"hy°îesis.h
"

57 
	~"ﬁ§.h
"

58 
	~"buûd_msg.h
"

59 
	~"√t_ﬁ§.h
"

60 
	~"lq_∂ugö.h
"

62 
boﬁ
 
	glq_tc_≥ndög
 = 
Ál£
;

64 
uöt32_t
 
	gmsg_buf„r_Æig√d
[(
MAXMESSAGESIZE
 - 
OLSR_HEADERSIZE
) / (uint32_t) + 1];

65 *c⁄° 
	gmsg_buf„r
 = (*)
msg_buf„r_Æig√d
;

68 
	$¸óã_lq_hñlo
(
lq_hñlo_mesßge
 *
lq_hñlo
, 
öãrÁ˚
 *
outif
)

70 
lök_íåy
 *
wÆkî
;

74 
lq_hñlo
->
comm
.
ty≥
 = 
LQ_HELLO_MESSAGE
;

75 
lq_hñlo
->
comm
.
vtime
 = 
	`me_to_ª…ime
(
outif
->
vÆtimes
.
hñlo
);

76 
lq_hñlo
->
comm
.
size
 = 0;

78 
lq_hñlo
->
comm
.
‹ig
 = 
ﬁ§_˙f
->
maö_addr
;

80 
lq_hñlo
->
comm
.
âl
 = 1;

81 
lq_hñlo
->
comm
.
h›s
 = 0;

83 
lq_hñlo
->
htime
 = 
outif
->
hñlo_ëime
;

84 
lq_hñlo
->
wûl
 = 
ﬁ§_˙f
->
wûlög√ss
;

86 
lq_hñlo
->
√igh
 = 
NULL
;

90 
	`OLSR_FOR_ALL_LINK_ENTRIES
(
wÆkî
) {

93 
lq_hñlo_√ighb‹
 *
√igh
 = 
	`ﬁ§_mÆloc_lq_hñlo_√ighb‹
("Build LQ_HELLO");

96 i‡(!
	`ùequÆ
(&
wÆkî
->
loˇl_iÁ˚_addr
, &
outif
->
ù_addr
))

97 
√igh
->
lök_ty≥
 = 
UNSPEC_LINK
;

102 
√igh
->
lök_ty≥
 = 
	`lookup_lök_°©us
(
wÆkî
);

105 
	`ﬁ§_c›y_hñlo_lq
(
√igh
, 
wÆkî
);

109 i‡(
wÆkî
->
√ighb‹
->
is_m¥
)

110 
√igh
->
√igh_ty≥
 = 
MPR_NEIGH
;

112 i‡(
wÆkî
->
√ighb‹
->
°©us
 =
SYM
)

113 
√igh
->
√igh_ty≥
 = 
SYM_NEIGH
;

115 i‡(
wÆkî
->
√ighb‹
->
°©us
 =
NOT_SYM
)

116 
√igh
->
√igh_ty≥
 = 
NOT_NEIGH
;

119 
	`OLSR_PRINTF
(0, "Error:Çeigh_type undefined");

120 
√igh
->
√igh_ty≥
 = 
NOT_NEIGH
;

125 
√igh
->
addr
 = 
wÆkî
->
√ighb‹_iÁ˚_addr
;

128 
√igh
->
√xt
 = 
lq_hñlo
->neigh;

129 
lq_hñlo
->
√igh
 =Çeigh;

132 
	`OLSR_FOR_ALL_LINK_ENTRIES_END
(
wÆkî
);

133 
	}
}

136 
	$de°roy_lq_hñlo
(
lq_hñlo_mesßge
 *
lq_hñlo
)

138 
lq_hñlo_√ighb‹
 *
wÆkî
, *
aux
;

142 
wÆkî
 = 
lq_hñlo
->
√igh
; wÆkî !
NULL
; wÆkî = 
aux
) {

143 
aux
 = 
wÆkî
->
√xt
;

144 
	`‰ì
(
wÆkî
);

147 
lq_hñlo
->
√igh
 = 
NULL
;

148 
	}
}

151 
	$¸óã_lq_tc
(
lq_tc_mesßge
 *
lq_tc
, 
öãrÁ˚
 *
outif
)

153 
lök_íåy
 *
 k
;

154 
√ighb‹_íåy
 *
wÆkî
;

155 
tc_m¥_addr
 *
√igh
;

156 
âl_li°
[] = { 2, 8, 2, 16, 2, 8, 2, 
MAX_TTL
 };

161 
lq_tc_≥ndög
 = 
åue
;

165 
lq_tc
->
comm
.
ty≥
 = 
LQ_TC_MESSAGE
;

166 
lq_tc
->
comm
.
vtime
 = 
	`me_to_ª…ime
(
outif
->
vÆtimes
.
tc
);

167 
lq_tc
->
comm
.
size
 = 0;

169 
lq_tc
->
comm
.
‹ig
 = 
ﬁ§_˙f
->
maö_addr
;

171 i‡(
ﬁ§_˙f
->
lq_fish
 > 0) {

172 i‡(
outif
->
âl_ödex
 >()((
âl_li°
) / (ttl_list[0])))

173 
outif
->
âl_ödex
 = 0;

175 
lq_tc
->
comm
.
âl
 = (0 <
outif
->
âl_ödex
 ? 
âl_li°
[outif->âl_ödex] : 
MAX_TTL
);

176 
outif
->
âl_ödex
++;

178 
	`OLSR_PRINTF
(3, "Cª©ög LQ TC wôh TTL %d.\n", 
lq_tc
->
comm
.
âl
);

182 
lq_tc
->
comm
.
âl
 = 
MAX_TTL
;

184 
lq_tc
->
comm
.
h›s
 = 0;

186 
lq_tc
->
‰om
 = 
ﬁ§_˙f
->
maö_addr
;

188 
lq_tc
->
™¢
 = 
	`gë_loˇl_™¢
();

190 
lq_tc
->
√igh
 = 
NULL
;

192 
	`OLSR_FOR_ALL_NBR_ENTRIES
(
wÆkî
) {

199 i‡(
wÆkî
->
°©us
 !
SYM
) {

208 i‡(
ﬁ§_˙f
->
tc_ªdund™cy
 =1 && !
wÆkî
->
is_m¥
 && !
	`ﬁ§_lookup_m¥s_£t
(&wÆkî->
√ighb‹_maö_addr
)) {

217 i‡(
ﬁ§_˙f
->
tc_ªdund™cy
 =0 && !
	`ﬁ§_lookup_m¥s_£t
(&
wÆkî
->
√ighb‹_maö_addr
)) {

222 
 k
 = 
	`gë_be°_lök_to_√ighb‹
(&
wÆkî
->
√ighb‹_maö_addr
);

223 i‡(!
 k
) {

227 i‡(
 k
->
lökco°
 >
LINK_COST_BROKEN
) {

232 
√igh
 = 
	`ﬁ§_mÆloc_tc_m¥_addr
("Build LQ_TC");

235 
√igh
->
addªss
 = 
wÆkî
->
√ighb‹_maö_addr
;

237 i‡(
 k
) {

238 
	`ﬁ§_c›ylq_lök_íåy_2_tc_m¥_addr
(
√igh
, 
 k
);

245 i‡(
lq_tc
->
√igh
 =
NULL
 || 
	`avl_comp_deÁu…
(&lq_tc->√igh->
addªss
, &neigh->address) > 0) {

246 
√igh
->
√xt
 = 
lq_tc
->neigh;

247 
lq_tc
->
√igh
 =Çeigh;

249 
tc_m¥_addr
 *
œ°
 = 
lq_tc
->
√igh
, *
n
 =Üa°->
√xt
;

251 
n
) {

252 i‡(
	`avl_comp_deÁu…
(&
n
->
addªss
, &
√igh
->address) > 0) {

255 
œ°
 = 
n
;

256 
n
 =Ç->
√xt
;

258 
√igh
->
√xt
 = 
n
;

259 
œ°
->
√xt
 = 
√igh
;

266 
	`OLSR_FOR_ALL_NBR_ENTRIES_END
(
wÆkî
);

267 
	}
}

270 
	$de°roy_lq_tc
(
lq_tc_mesßge
 *
lq_tc
)

272 
tc_m¥_addr
 *
wÆkî
, *
aux
;

276 
wÆkî
 = 
lq_tc
->
√igh
; wÆkî !
NULL
; wÆkî = 
aux
) {

277 
aux
 = 
wÆkî
->
√xt
;

278 
	`‰ì
(
wÆkî
);

280 
	}
}

283 
	$comm⁄_size
()

287  (
ﬁ§_˙f
->
ù_vîsi⁄
 =
AF_INET
Ë? (
ﬁ§_hódî_v4
Ë: (
ﬁ§_hódî_v6
);

288 
	}
}

291 
	$£rülize_comm⁄
(
ﬁ§_comm⁄
 *
comm
)

293 i‡(
ﬁ§_˙f
->
ù_vîsi⁄
 =
AF_INET
) {

295 
ﬁ§_hódî_v4
 *
ﬁ§_hód_v4
 = (ﬁ§_hódî_v4 *)
	`ARM_NOWARN_ALIGN
(
msg_buf„r
);

297 
ﬁ§_hód_v4
->
ty≥
 = 
comm
->type;

298 
ﬁ§_hód_v4
->
vtime
 = 
	`ª…ime_to_me
(
comm
->vtime);

299 
ﬁ§_hód_v4
->
size
 = 
	`ht⁄s
(
comm
->size);

301 
ﬁ§_hód_v4
->
‹ig
 = 
comm
->‹ig.
v4
.
s_addr
;

303 
ﬁ§_hód_v4
->
âl
 = 
comm
->ttl;

304 
ﬁ§_hód_v4
->
h›s
 = 
comm
->hops;

305 
ﬁ§_hód_v4
->
£qno
 = 
	`ht⁄s
(
	`gë_msg_£qno
());

308 
ﬁ§_hódî_v6
 *
ﬁ§_hód_v6
 = (ﬁ§_hódî_v6 *)
	`ARM_NOWARN_ALIGN
(
msg_buf„r
);

310 
ﬁ§_hód_v6
->
ty≥
 = 
comm
->type;

311 
ﬁ§_hód_v6
->
vtime
 = 
	`ª…ime_to_me
(
comm
->vtime);

312 
ﬁ§_hód_v6
->
size
 = 
	`ht⁄s
(
comm
->size);

314 
	`mem˝y
(&
ﬁ§_hód_v6
->
‹ig
, &
comm
->‹ig.
v6
.
s6_addr
, (olsr_head_v6->orig));

316 
ﬁ§_hód_v6
->
âl
 = 
comm
->ttl;

317 
ﬁ§_hód_v6
->
h›s
 = 
comm
->hops;

318 
ﬁ§_hód_v6
->
£qno
 = 
	`ht⁄s
(
	`gë_msg_£qno
());

320 
	}
}

323 
	$£rülize_lq_hñlo
(
lq_hñlo_mesßge
 *
lq_hñlo
, 
öãrÁ˚
 *
outif
)

325 c⁄° 
LINK_ORDER
[] = { 
SYM_LINK
, 
UNSPEC_LINK
, 
ASYM_LINK
, 
LOST_LINK
 };

326 
ªm
, 
size
, 
ªq
, 
ex≥˘ed_size
 = 0;

327 
lq_hñlo_öfo_hódî
 *
öfo_hód
;

328 
lq_hñlo_√ighb‹
 *
√igh
;

329 *
buff
;

330 
boﬁ
 
is_fú°
;

331 
i
;

334 
off
 = 
	`comm⁄_size
();

338 
lq_hñlo_hódî
 *
hód
 = (lq_hñlo_hódî *)
	`ARM_NOWARN_ALIGN
(
msg_buf„r
 + 
off
);

340 
hód
->
ª£rved
 = 0;

341 
hód
->
htime
 = 
	`ª…ime_to_me
(
lq_hñlo
->htime);

342 
hód
->
wûl
 = 
lq_hñlo
->will;

346 
off
 +(
lq_hñlo_hódî
);

350 
buff
 = 
msg_buf„r
 + 
off
;

355 
size
 = 0;

356 
ªm
 = 
	`√t_outbuf„r_byãs_À·
(
outif
Ë- 
off
;

364 i‡(0 < 
	`√t_ouçut_≥ndög
(
outif
)) {

365 
i
 = 0; i <
MAX_NEIGH
; i++) {

366 
j
;

367 
j
 = 0; j < (
LINK_ORDER
) / (LINK_ORDER[0]); j++) {

368 
is_fú°
 = 
åue
;

369 
√igh
 = 
lq_hñlo
->√igh;Çeigh !
NULL
;Çeigh =Çeigh->
√xt
) {

370 i‡(0 =
i
 && 0 =
j
)

371 
ex≥˘ed_size
 +
ﬁ§_˙f
->
ùsize
 + 
	`ﬁ§_sizeof_hñlo_lqd©a
();

372 i‡(
√igh
->
√igh_ty≥
 =
i
 &&Çeigh->
lök_ty≥
 =
LINK_ORDER
[
j
]) {

373 i‡(
is_fú°
) {

374 
ex≥˘ed_size
 +(
lq_hñlo_öfo_hódî
);

375 
is_fú°
 = 
Ál£
;

383 i‡(
ªm
 < 
ex≥˘ed_size
) {

384 
	`√t_ouçut
(
outif
);

385 
ªm
 = 
	`√t_outbuf„r_byãs_À·
(
outif
Ë- 
off
;

388 
öfo_hód
 = 
NULL
;

392 
i
 = 0; i <
MAX_NEIGH
; i++) {

393 
j
;

394 
j
 = 0; j < (
LINK_ORDER
) / (LINK_ORDER[0]); j++) {

395 
is_fú°
 = 
åue
;

399 
√igh
 = 
lq_hñlo
->√igh;Çeigh !
NULL
;Çeigh =Çeigh->
√xt
) {

400 i‡(
√igh
->
√igh_ty≥
 !
i
 ||Çeigh->
lök_ty≥
 !
LINK_ORDER
[
j
])

406 
ªq
 = 
ﬁ§_˙f
->
ùsize
 + 
	`ﬁ§_sizeof_hñlo_lqd©a
();

411 i‡(
is_fú°
)

412 
ªq
 +(
lq_hñlo_öfo_hódî
);

418 i‡(()(
size
 + 
ªq
Ë> 
ªm
) {

421 
lq_hñlo
->
comm
.
size
 = sizê+ 
off
;

423 
	`£rülize_comm⁄
(&
lq_hñlo
->
comm
);

427 
öfo_hód
->
size
 = 
	`¡ohs
(
buff
 + size - (*)info_head);

431 
	`√t_outbuf„r_push
(
outif
, 
msg_buf„r
, 
size
 + 
off
);

433 
	`√t_ouçut
(
outif
);

437 
size
 = 0;

438 
ªm
 = 
	`√t_outbuf„r_byãs_À·
(
outif
Ë- 
off
;

442 
is_fú°
 = 
åue
;

446 i‡(
is_fú°
) {

447 
öfo_hód
 = (
lq_hñlo_öfo_hódî
 *)
	`ARM_NOWARN_ALIGN
(
buff
 + 
size
);

448 
size
 +(
lq_hñlo_öfo_hódî
);

450 
öfo_hód
->
ª£rved
 = 0;

451 
öfo_hód
->
lök_code
 = 
	`CREATE_LINK_CODE
(
i
, 
LINK_ORDER
[
j
]);

455 
	`gíùc›y
(
buff
 + 
size
, &
√igh
->
addr
);

456 
size
 +
ﬁ§_˙f
->
ùsize
;

459 
size
 +
	`ﬁ§_£rülize_hñlo_lq_∑ú
(&
buff
[size], 
√igh
);

461 
is_fú°
 = 
Ál£
;

467 i‡(!
is_fú°
)

468 
öfo_hód
->
size
 = 
	`¡ohs
(
buff
 + size - (*)info_head);

474 
lq_hñlo
->
comm
.
size
 = sizê+ 
off
;

476 
	`£rülize_comm⁄
((
ﬁ§_comm⁄
 *)
lq_hñlo
);

480 
	`√t_outbuf„r_push
(
outif
, 
msg_buf„r
, 
size
 + 
off
);

481 
	}
}

483 
uöt8_t


484 
	$ˇlcuœã_b‹dî_Êag
(*
lowî_b‹dî
, *
highî_b‹dî
)

486 
uöt8_t
 *
lowî
 = 
lowî_b‹dî
;

487 
uöt8_t
 *
highî
 = 
highî_b‹dî
;

488 
uöt8_t
 
bômask
;

489 
uöt8_t
 
∑π
, 
bôpos
;

491 
∑π
 = 0;Ö¨à< 
ﬁ§_˙f
->
ùsize
;Öart++) {

492 i‡(
lowî
[
∑π
] !
highî
[part]) {

497 i‡(
∑π
 =
ﬁ§_˙f
->
ùsize
) {

501 
bômask
 = 0xfe;

502 
bôpos
 = 0; bôpo†< 8; bôpos++, 
bômask
 <<= 1) {

503 i‡((
lowî
[
∑π
] & 
bômask
Ë=(
highî
[part] & bitmask)) {

508 
bôpos
 +8 * (
ﬁ§_˙f
->
ùsize
 - 
∑π
 - 1);

509  
bôpos
 + 1;

510 
	}
}

513 
	$£rülize_lq_tc
(
lq_tc_mesßge
 *
lq_tc
, 
öãrÁ˚
 *
outif
)

515 
off
, 
ªm
, 
size
, 
ex≥˘ed_size
 = 0;

516 
lq_tc_hódî
 *
hód
;

517 
tc_m¥_addr
 *
√igh
;

518 *
buff
;

520 
ﬁ§_ù_addr
 *
œ°_ù
 = 
NULL
;

521 
uöt8_t
 
À·_b‹dî_Êag
 = 0xff;

525 
off
 = 
	`comm⁄_size
();

529 
hód
 = (
lq_tc_hódî
 *)
	`ARM_NOWARN_ALIGN
(
msg_buf„r
 + 
off
);

531 
hód
->
™¢
 = 
	`ht⁄s
(
lq_tc
->ansn);

532 
hód
->
lowî_b‹dî
 = 0;

533 
hód
->
uµî_b‹dî
 = 0;

537 
off
 +(
lq_tc_hódî
);

541 
buff
 = 
msg_buf„r
 + 
off
;

546 
size
 = 0;

547 
ªm
 = 
	`√t_outbuf„r_byãs_À·
(
outif
Ë- 
off
;

555 i‡(0 < 
	`√t_ouçut_≥ndög
(
outif
)) {

556 
√igh
 = 
lq_tc
->√igh;Çeigh !
NULL
;Çeigh =Çeigh->
√xt
) {

557 
ex≥˘ed_size
 +
ﬁ§_˙f
->
ùsize
 + 
	`ﬁ§_sizeof_tc_lqd©a
();

561 i‡(
ªm
 < 
ex≥˘ed_size
) {

562 
	`√t_ouçut
(
outif
);

563 
ªm
 = 
	`√t_outbuf„r_byãs_À·
(
outif
Ë- 
off
;

567 
√igh
 = 
lq_tc
->√igh;Çeigh !
NULL
;Çeigh =Çeigh->
√xt
) {

572 i‡(()(
size
 + 
ﬁ§_˙f
->
ùsize
 + 
	`ﬁ§_sizeof_tc_lqd©a
()Ë> 
ªm
) {

573 
hód
->
lowî_b‹dî
 = 
À·_b‹dî_Êag
;

574 
hód
->
uµî_b‹dî
 = 
	`ˇlcuœã_b‹dî_Êag
(
œ°_ù
, &
√igh
->
addªss
);

575 
À·_b‹dî_Êag
 = 
hód
->
uµî_b‹dî
;

579 
lq_tc
->
comm
.
size
 = sizê+ 
off
;

581 
	`£rülize_comm⁄
((
ﬁ§_comm⁄
 *)
lq_tc
);

585 
	`√t_outbuf„r_push
(
outif
, 
msg_buf„r
, 
size
 + 
off
);

587 
	`√t_ouçut
(
outif
);

591 
size
 = 0;

592 
ªm
 = 
	`√t_outbuf„r_byãs_À·
(
outif
Ë- 
off
;

595 
	`gíùc›y
(
buff
 + 
size
, &
√igh
->
addªss
);

598 
œ°_ù
 = (
ﬁ§_ù_addr
 *)
	`ARM_NOWARN_ALIGN
(
buff
 + 
size
);

600 
size
 +
ﬁ§_˙f
->
ùsize
;

603 
size
 +
	`ﬁ§_£rülize_tc_lq_∑ú
(&
buff
[size], 
√igh
);

608 
hód
->
lowî_b‹dî
 = 
À·_b‹dî_Êag
;

609 
hód
->
uµî_b‹dî
 = 0xff;

610 
lq_tc
->
comm
.
size
 = sizê+ 
off
;

612 
	`£rülize_comm⁄
((
ﬁ§_comm⁄
 *)
lq_tc
);

614 
	`√t_outbuf„r_push
(
outif
, 
msg_buf„r
, 
size
 + 
off
);

615 
	}
}

618 
	$ﬁ§_ouçut_lq_hñlo
(*
∑ø
)

620 
lq_hñlo_mesßge
 
lq_hñlo
;

621 
öãrÁ˚
 *
outif
 = 
∑ø
;

623 i‡(
outif
 =
NULL
) {

627 
	`¸óã_lq_hñlo
(&
lq_hñlo
, 
outif
);

630 
	`£rülize_lq_hñlo
(&
lq_hñlo
, 
outif
);

633 
	`de°roy_lq_hñlo
(&
lq_hñlo
);

635 i‡(
	`√t_ouçut_≥ndög
(
outif
)) {

636 i‡(
outif
->
immedüã_£nd_tc
) {

637 i‡(
	`TIMED_OUT
(
outif
->
fwdtimî
))

638 
	`£t_buf„r_timî
(
outif
);

640 
	`√t_ouçut
(
outif
);

643 
	}
}

646 
	$ﬁ§_ouçut_lq_tc
(*
∑ø
)

648 
¥ev_em±y
 = 1;

649 
lq_tc_mesßge
 
lq_tc
;

650 
öãrÁ˚
 *
outif
 = 
∑ø
;

652 i‡(
outif
 =
NULL
) {

657 
	`¸óã_lq_tc
(&
lq_tc
, 
outif
);

661 i‡(
lq_tc
.
√igh
 !
NULL
) {

662 
¥ev_em±y
 = 0;

665 
	`£rülize_lq_tc
(&
lq_tc
, 
outif
);

668 } i‡(
¥ev_em±y
 == 0) {

671 
	`£t_em±y_tc_timî
(
	`GET_TIMESTAMP
(
ﬁ§_˙f
->
max_tc_vtime
 * 3 * 
MSEC_PER_SEC
));

673 
¥ev_em±y
 = 1;

677 
	`£rülize_lq_tc
(&
lq_tc
, 
outif
);

680 } i‡(!
	`TIMED_OUT
(
	`gë_em±y_tc_timî
())) {

681 
	`£rülize_lq_tc
(&
lq_tc
, 
outif
);

685 
	`de°roy_lq_tc
(&
lq_tc
);

687 i‡(
	`√t_ouçut_≥ndög
(
outif
)) {

688 i‡(!
outif
->
immedüã_£nd_tc
) {

689 i‡(
	`TIMED_OUT
(
outif
->
fwdtimî
))

690 
	`£t_buf„r_timî
(
outif
);

692 
	`√t_ouçut
(
outif
);

695 
	}
}

	@src/lq_packet.h

42 #i‚de‡
_OLSR_LQ_PACKET_H


43 
	#_OLSR_LQ_PACKET_H


	)

45 
	~"ﬁ§_ty≥s.h
"

46 
	~"∑ckë.h
"

47 
	~"m™tisß.h
"

48 
	~"ùˇlc.h
"

50 
	#LQ_HELLO_MESSAGE
 201

	)

51 
	#LQ_TC_MESSAGE
 202

	)

55 
	sﬁ§_comm⁄
 {

56 
uöt8_t
 
	mty≥
;

57 
ﬁ§_ª…ime
 
	mvtime
;

58 
uöt16_t
 
	msize
;

59 
ﬁ§_ù_addr
 
	m‹ig
;

60 
uöt8_t
 
	mâl
;

61 
uöt8_t
 
	mh›s
;

62 
uöt16_t
 
	m£qno
;

67 
	sﬁ§_hódî_v4
 {

68 
uöt8_t
 
	mty≥
;

69 
uöt8_t
 
	mvtime
;

70 
uöt16_t
 
	msize
;

71 
uöt32_t
 
	m‹ig
;

72 
uöt8_t
 
	mâl
;

73 
uöt8_t
 
	mh›s
;

74 
uöt16_t
 
	m£qno
;

79 
	sﬁ§_hódî_v6
 {

80 
uöt8_t
 
	mty≥
;

81 
uöt8_t
 
	mvtime
;

82 
uöt16_t
 
	msize
;

83 
	m‹ig
[16];

84 
uöt8_t
 
	mâl
;

85 
uöt8_t
 
	mh›s
;

86 
uöt16_t
 
	m£qno
;

91 
	slq_hñlo_√ighb‹
 {

92 
uöt8_t
 
	mlök_ty≥
;

93 
uöt8_t
 
	m√igh_ty≥
;

94 
ﬁ§_ù_addr
 
	maddr
;

95 
lq_hñlo_√ighb‹
 *
	m√xt
;

96 
uöt32_t
 
	mlökquÆôy
[0];

99 
	slq_hñlo_mesßge
 {

100 
ﬁ§_comm⁄
 
	mcomm
;

101 
ﬁ§_ª…ime
 
	mhtime
;

102 
uöt8_t
 
	mwûl
;

103 
lq_hñlo_√ighb‹
 *
	m√igh
;

107 
	slq_hñlo_öfo_hódî
 {

108 
uöt8_t
 
	mlök_code
;

109 
uöt8_t
 
	mª£rved
;

110 
uöt16_t
 
	msize
;

113 
	slq_hñlo_hódî
 {

114 
uöt16_t
 
	mª£rved
;

115 
uöt8_t
 
	mhtime
;

116 
uöt8_t
 
	mwûl
;

120 
	slq_tc_mesßge
 {

121 
ﬁ§_comm⁄
 
	mcomm
;

122 
ﬁ§_ù_addr
 
	m‰om
;

123 
uöt16_t
 
	m™¢
;

124 
tc_m¥_addr
 *
	m√igh
;

129 
	slq_tc_hódî
 {

130 
uöt16_t
 
	m™¢
;

131 
uöt8_t
 
	mlowî_b‹dî
;

132 
uöt8_t
 
	muµî_b‹dî
;

135 
INLINE
 

136 
	$pkt_gë_u8
(c⁄° 
uöt8_t
 ** 
p
, uöt8_à* 
v¨
)

138 *
v¨
 = *(c⁄° 
uöt8_t
 *)(*
p
);

139 *
p
 +(
uöt8_t
);

140 
	}
}

141 
INLINE
 

142 
	$pkt_gë_u16
(c⁄° 
uöt8_t
 ** 
p
, 
uöt16_t
 * 
v¨
)

144 *
v¨
 = 
	`¡ohs
(**((c⁄° 
uöt16_t
 **)
p
));

145 *
p
 +(
uöt16_t
);

146 
	}
}

147 
INLINE
 

148 
	$pkt_gë_u32
(c⁄° 
uöt8_t
 ** 
p
, 
uöt32_t
 * 
v¨
)

150 *
v¨
 = 
	`¡ohl
(**((c⁄° 
uöt32_t
 **)
p
));

151 *
p
 +(
uöt32_t
);

152 
	}
}

153 
INLINE
 

154 
	$pkt_gë_s8
(c⁄° 
uöt8_t
 ** 
p
, 
öt8_t
 * 
v¨
)

156 *
v¨
 = *(c⁄° 
öt8_t
 *)(*
p
);

157 *
p
 +(
öt8_t
);

158 
	}
}

159 
INLINE
 

160 
	$pkt_gë_s16
(c⁄° 
uöt8_t
 ** 
p
, 
öt16_t
 * 
v¨
)

162 *
v¨
 = 
	`¡ohs
(**((c⁄° 
öt16_t
 **)
p
));

163 *
p
 +(
öt16_t
);

164 
	}
}

165 
INLINE
 

166 
	$pkt_gë_s32
(c⁄° 
uöt8_t
 ** 
p
, 
öt32_t
 * 
v¨
)

168 *
v¨
 = 
	`¡ohl
(**((c⁄° 
öt32_t
 **)
p
));

169 *
p
 +(
öt32_t
);

170 
	}
}

171 
INLINE
 

172 
	$pkt_gë_ª…ime
(c⁄° 
uöt8_t
 ** 
p
, 
ﬁ§_ª…ime
 * 
v¨
)

174 *
v¨
 = 
	`me_to_ª…ime
(**
p
);

175 *
p
 +(
uöt8_t
);

176 
	}
}

177 
INLINE
 

178 
	$pkt_gë_ùaddªss
(c⁄° 
uöt8_t
 ** 
p
, 
ﬁ§_ù_addr
 *
v¨
)

180 
	`mem˝y
(
v¨
, *
p
, 
ﬁ§_˙f
->
ùsize
);

181 *
p
 +
ﬁ§_˙f
->
ùsize
;

182 
	}
}

183 
INLINE
 

184 
	$pkt_gë_¥efixÀn
(c⁄° 
uöt8_t
 ** 
p
, uöt8_à* 
v¨
)

186 *
v¨
 = 
	`√tmask_to_¥efix
(*
p
, 
ﬁ§_˙f
->
ùsize
);

187 *
p
 +
ﬁ§_˙f
->
ùsize
;

188 
	}
}

190 
INLINE
 

191 
	$pkt_ign‹e_u8
(c⁄° 
uöt8_t
 ** 
p
)

193 *
p
 +(
uöt8_t
);

194 
	}
}

195 
INLINE
 

196 
	$pkt_ign‹e_u16
(c⁄° 
uöt8_t
 ** 
p
)

198 *
p
 +(
uöt16_t
);

199 
	}
}

200 
INLINE
 

201 
	$pkt_ign‹e_u32
(c⁄° 
uöt8_t
 ** 
p
)

203 *
p
 +(
uöt32_t
);

204 
	}
}

205 
INLINE
 

206 
	$pkt_ign‹e_s8
(c⁄° 
uöt8_t
 ** 
p
)

208 *
p
 +(
öt8_t
);

209 
	}
}

210 
INLINE
 

211 
	$pkt_ign‹e_s16
(c⁄° 
uöt8_t
 ** 
p
)

213 *
p
 +(
öt16_t
);

214 
	}
}

215 
INLINE
 

216 
	$pkt_ign‹e_s32
(c⁄° 
uöt8_t
 ** 
p
)

218 *
p
 +(
öt32_t
);

219 
	}
}

220 
INLINE
 

221 
	$pkt_ign‹e_ùaddªss
(c⁄° 
uöt8_t
 ** 
p
)

223 *
p
 +
ﬁ§_˙f
->
ùsize
;

224 
	}
}

225 
INLINE
 

226 
	$pkt_ign‹e_¥efixÀn
(c⁄° 
uöt8_t
 ** 
p
)

228 *
p
 +
ﬁ§_˙f
->
ùsize
;

229 
	}
}

231 
INLINE
 

232 
	$pkt_put_u8
(
uöt8_t
 ** 
p
, uöt8_à
v¨
)

234 **((
uöt8_t
 **)
p
Ë
v¨
;

235 *
p
 +(
uöt8_t
);

236 
	}
}

237 
INLINE
 

238 
	$pkt_put_u16
(
uöt8_t
 ** 
p
, 
uöt16_t
 
v¨
)

240 **((
uöt16_t
 **)
p
Ë
	`ht⁄s
(
v¨
);

241 *
p
 +(
uöt16_t
);

242 
	}
}

243 
INLINE
 

244 
	$pkt_put_u32
(
uöt8_t
 ** 
p
, 
uöt32_t
 
v¨
)

246 **((
uöt32_t
 **)
p
Ë
	`ht⁄l
(
v¨
);

247 *
p
 +(
uöt32_t
);

248 
	}
}

249 
INLINE
 

250 
	$pkt_put_s8
(
uöt8_t
 ** 
p
, 
öt8_t
 
v¨
)

252 **((
öt8_t
 **)
p
Ë
v¨
;

253 *
p
 +(
öt8_t
);

254 
	}
}

255 
INLINE
 

256 
	$pkt_put_s16
(
uöt8_t
 ** 
p
, 
öt16_t
 
v¨
)

258 **((
öt16_t
 **)
p
Ë
	`ht⁄s
(
v¨
);

259 *
p
 +(
öt16_t
);

260 
	}
}

261 
INLINE
 

262 
	$pkt_put_s32
(
uöt8_t
 ** 
p
, 
öt32_t
 
v¨
)

264 **((
öt32_t
 **)
p
Ë
	`ht⁄l
(
v¨
);

265 *
p
 +(
öt32_t
);

266 
	}
}

267 
INLINE
 

268 
	$pkt_put_ª…ime
(
uöt8_t
 ** 
p
, 
ﬁ§_ª…ime
 
v¨
)

270 **
p
 = 
	`ª…ime_to_me
(
v¨
);

271 *
p
 +(
uöt8_t
);

272 
	}
}

273 
INLINE
 

274 
	$pkt_put_ùaddªss
(
uöt8_t
 ** 
p
, c⁄° 
ﬁ§_ù_addr
 *
v¨
)

276 
	`mem˝y
(*
p
, 
v¨
, 
ﬁ§_˙f
->
ùsize
);

277 *
p
 +
ﬁ§_˙f
->
ùsize
;

278 
	}
}

280 
ﬁ§_ouçut_lq_hñlo
(*
∑ø
);

282 
ﬁ§_ouçut_lq_tc
(*
∑ø
);

284 
ﬁ§_öput_lq_hñlo
(
ﬁ§_mesßge
 *
£r
, 
öãrÁ˚
 *
öif
, 
ﬁ§_ù_addr
 *
‰om
);

286 
boﬁ
 
lq_tc_≥ndög
;

	@src/lq_plugin.c

42 
	~"tc_£t.h
"

43 
	~"lök_£t.h
"

44 
	~"ﬁ§_•f.h
"

45 
	~"lq_∑ckë.h
"

46 
	~"∑ckë.h
"

47 
	~"ﬁ§.h
"

48 
	~"two_h›_√ighb‹_èbÀ.h
"

49 
	~"comm⁄/avl.h
"

51 
	~"lq_∂ugö_deÁu…_Êﬂt.h
"

52 
	~"lq_∂ugö_deÁu…_Âm.h
"

53 
	~"lq_∂ugö_deÁu…_ff.h
"

54 
	~"lq_∂ugö_deÁu…_f„th.h
"

56 
	~<as£π.h
>

58 
avl_åì
 
	glq_h™dÀr_åì
;

59 
lq_h™dÀr
 *
	ga˘ive_lq_h™dÀr
 = 
NULL
;

68 
	$avl_°rˇ£cmp
(c⁄° *
°r1
, c⁄° *
°r2
)

70  
	`°rˇ£cmp
(
°r1
, 
°r2
);

71 
	}
}

78 
	$a˘iv©e_lq_h™dÀr
(c⁄° *
«me
)

80 
lq_h™dÀr_node
 *
node
;

82 
node
 = (
lq_h™dÀr_node
 *)
	`avl_föd
(&
lq_h™dÀr_åì
, 
«me
);

83 i‡(
node
 =
NULL
) {

84 
	`OLSR_PRINTF
(1, "Eº‹, unknow¿lq_h™dÀ∏'%s'\n", 
«me
);

85 
	`ﬁ§_exô
("", 1);

88 
	`OLSR_PRINTF
(1, "Usög '%s'álg‹ôhm f‹Üq cÆcuœti⁄.\n", 
«me
);

89 
a˘ive_lq_h™dÀr
 = 
node
->
h™dÀr
;

90 
a˘ive_lq_h™dÀr
->
	`öôülize
();

91 
	}
}

97 
	$öô_lq_h™dÀr_åì
()

99 
	`avl_öô
(&
lq_h™dÀr_åì
, &
avl_°rˇ£cmp
);

100 
	`ªgi°î_lq_h™dÀr
(&
lq_ëx_Êﬂt_h™dÀr
, 
LQ_ALGORITHM_ETX_FLOAT_NAME
);

101 
	`ªgi°î_lq_h™dÀr
(&
lq_ëx_Âm_h™dÀr
, 
LQ_ALGORITHM_ETX_FPM_NAME
);

102 
	`ªgi°î_lq_h™dÀr
(&
lq_ëx_ff_h™dÀr
, 
LQ_ALGORITHM_ETX_FF_NAME
);

103 
	`ªgi°î_lq_h™dÀr
(&
lq_ëx_f„th_h™dÀr
, 
LQ_ALGORITHM_ETX_FFETH_NAME
);

105 i‡(
ﬁ§_˙f
->
lq_Æg‹ôhm
 =
NULL
) {

106 
	`a˘iv©e_lq_h™dÀr
(
DEF_LQ_ALGORITHM
);

109 
	`a˘iv©e_lq_h™dÀr
(
ﬁ§_˙f
->
lq_Æg‹ôhm
);

111 
	}
}

126 
	$ªgi°î_lq_h™dÀr
(
lq_h™dÀr
 *
h™dÀr
, c⁄° *
«me
)

128 
lq_h™dÀr_node
 *
node
;

129 
size_t
 
«me_size
 = (*
node
Ë+ 
	`°æí
(
«me
) + 1;

131 
node
 = 
	`ﬁ§_mÆloc
(
«me_size
, "olsrÜq handler");

133 
	`°rs˝y
(
node
->
«me
,Çame, 
«me_size
);

134 
node
->node.
key
 =Çode->
«me
;

135 
node
->
h™dÀr
 = handler;

137 
	`avl_ö£π
(&
lq_h™dÀr_åì
, &
node
->node, 
Ál£
);

138 
	}
}

148 
ﬁ§_lökco°


149 
	$ﬁ§_ˇlc_tc_co°
(c⁄° 
tc_edge_íåy
 * 
tc_edge
)

151 
	`as£π
((c⁄° *)
tc_edge
 + (*tc_edgeË>(c⁄° *Èc_edge->
lökquÆôy
);

152  
a˘ive_lq_h™dÀr
->
	`ˇlc_tc_co°
(
tc_edge
->
lökquÆôy
);

153 
	}
}

166 
	$ﬁ§_£rülize_hñlo_lq_∑ú
(*
buff
, 
lq_hñlo_√ighb‹
 *
√igh
)

168 
	`as£π
((c⁄° *)
√igh
 + (*√ighË>(c⁄° *Íeigh->
lökquÆôy
);

169  
a˘ive_lq_h™dÀr
->
	`£rülize_hñlo_lq
(
buff
, 
√igh
->
lökquÆôy
);

170 
	}
}

182 
	$ﬁ§_de£rülize_hñlo_lq_∑ú
(c⁄° 
uöt8_t
 ** 
cuº
, 
hñlo_√ighb‹
 *
√igh
)

184 
	`as£π
((c⁄° *)
√igh
 + (*√ighË>(c⁄° *Íeigh->
lökquÆôy
);

185 
a˘ive_lq_h™dÀr
->
	`de£rülize_hñlo_lq
(
cuº
, 
√igh
->
lökquÆôy
);

186 
√igh
->
co°
 = 
a˘ive_lq_h™dÀr
->
	`ˇlc_hñlo_co°
“eigh->
lökquÆôy
);

187 
	}
}

200 
	$ﬁ§_£rülize_tc_lq_∑ú
(*
buff
, 
tc_m¥_addr
 *
√igh
)

202 
	`as£π
((c⁄° *)
√igh
 + (*√ighË>(c⁄° *Íeigh->
lökquÆôy
);

203  
a˘ive_lq_h™dÀr
->
	`£rülize_tc_lq
(
buff
, 
√igh
->
lökquÆôy
);

204 
	}
}

215 
	$ﬁ§_de£rülize_tc_lq_∑ú
(c⁄° 
uöt8_t
 ** 
cuº
, 
tc_edge_íåy
 *
edge
)

217 
	`as£π
((c⁄° *)
edge
 + (*edgeË>(c⁄° *Îdge->
lökquÆôy
);

218 
a˘ive_lq_h™dÀr
->
	`de£rülize_tc_lq
(
cuº
, 
edge
->
lökquÆôy
);

219 
	}
}

232 
	$ﬁ§_upd©e_∑ckë_loss_w‹kî
(
lök_íåy
 *
íåy
, 
boﬁ
 
lo°
)

234 
	`as£π
((c⁄° *)
íåy
 + (*íåyË>(c⁄° *Î¡ry->
lökquÆôy
);

235 
a˘ive_lq_h™dÀr
->
	`∑ckë_loss_h™dÀr
(
íåy
,É¡ry->
lökquÆôy
, 
lo°
);

236 
	}
}

249 
	$ﬁ§_mem‹ize_f‹eign_hñlo_lq
(
lök_íåy
 *
loˇl
, 
hñlo_√ighb‹
 *
f‹eign
)

251 
	`as£π
((c⁄° *)
loˇl
 + (*loˇlË>(c⁄° *Óoˇl->
lökquÆôy
);

252 i‡(
f‹eign
) {

253 
	`as£π
((c⁄° *)
f‹eign
 + (*f‹eignË>(c⁄° *)f‹eign->
lökquÆôy
);

254 
a˘ive_lq_h™dÀr
->
	`mem‹ize_f‹eign_hñlo
(
loˇl
->
lökquÆôy
, 
f‹eign
->linkquality);

256 
a˘ive_lq_h™dÀr
->
	`mem‹ize_f‹eign_hñlo
(
loˇl
->
lökquÆôy
, 
NULL
);

258 
	}
}

273 
	$gë_lök_íåy_ãxt
(
lök_íåy
 *
íåy
, 
£∑øt‹
, 
lqãxtbuf„r
 *
buf„r
)

275 
	`as£π
((c⁄° *)
íåy
 + (*íåyË>(c⁄° *Î¡ry->
lökquÆôy
);

276  
a˘ive_lq_h™dÀr
->
	`¥öt_hñlo_lq
(
íåy
->
lökquÆôy
, 
£∑øt‹
, 
buf„r
);

277 
	}
}

292 
	$gë_tc_edge_íåy_ãxt
(
tc_edge_íåy
 *
íåy
, 
£∑øt‹
, 
lqãxtbuf„r
 *
buf„r
)

294 
	`as£π
((c⁄° *)
íåy
 + (*íåyË>(c⁄° *Î¡ry->
lökquÆôy
);

295  
a˘ive_lq_h™dÀr
->
	`¥öt_tc_lq
(
íåy
->
lökquÆôy
, 
£∑øt‹
, 
buf„r
);

296 
	}
}

310 
	$gë_lökco°_ãxt
(
ﬁ§_lökco°
 
co°
, 
boﬁ
 
rouã
, 
lqãxtbuf„r
 *
buf„r
)

312 c⁄° *
öföôe
 = "INFINITE";

314 i‡(
rouã
) {

315 i‡(
co°
 =
ROUTE_COST_BROKEN
) {

316  
öföôe
;

319 i‡(
co°
 >
LINK_COST_BROKEN
) {

320  
öföôe
;

323  
a˘ive_lq_h™dÀr
->
	`¥öt_co°
(
co°
, 
buf„r
);

324 
	}
}

336 
	$ﬁ§_c›y_hñlo_lq
(
lq_hñlo_√ighb‹
 *
èrgë
, 
lök_íåy
 *
sour˚
)

338 
	`as£π
((c⁄° *)
èrgë
 + (*èrgëË>(c⁄° *È¨gë->
lökquÆôy
);

339 
	`as£π
((c⁄° *)
sour˚
 + (*sour˚Ë>(c⁄° *)sour˚->
lökquÆôy
);

340 
a˘ive_lq_h™dÀr
->
	`c›y_lök_lq_öto_√igh
(
èrgë
->
lökquÆôy
, 
sour˚
->linkquality);

341 
	}
}

353 
	$ﬁ§_c›ylq_lök_íåy_2_tc_m¥_addr
(
tc_m¥_addr
 *
èrgë
, 
lök_íåy
 *
sour˚
)

355 
	`as£π
((c⁄° *)
èrgë
 + (*èrgëË>(c⁄° *È¨gë->
lökquÆôy
);

356 
	`as£π
((c⁄° *)
sour˚
 + (*sour˚Ë>(c⁄° *)sour˚->
lökquÆôy
);

357 
a˘ive_lq_h™dÀr
->
	`c›y_lök_lq_öto_tc
(
èrgë
->
lökquÆôy
, 
sour˚
->linkquality);

358 
	}
}

370 
	$ﬁ§_c›ylq_lök_íåy_2_tc_edge_íåy
(
tc_edge_íåy
 *
èrgë
, 
lök_íåy
 *
sour˚
)

372 
	`as£π
((c⁄° *)
èrgë
 + (*èrgëË>(c⁄° *È¨gë->
lökquÆôy
);

373 
	`as£π
((c⁄° *)
sour˚
 + (*sour˚Ë>(c⁄° *)sour˚->
lökquÆôy
);

374 
a˘ive_lq_h™dÀr
->
	`c›y_lök_lq_öto_tc
(
èrgë
->
lökquÆôy
, 
sour˚
->linkquality);

375 
	}
}

378 
	$ﬁ§_˛ór_hñlo_lq
(
lök_íåy
 *
lök
) {

379 
a˘ive_lq_h™dÀr
->
	`˛ór_hñlo
(
lök
->
lökquÆôy
);

380 
	}
}

390 
	$ﬁ§_˛ór_tc_lq
(
tc_m¥_addr
 *
èrgë
)

392 
	`as£π
((c⁄° *)
èrgë
 + (*èrgëË>(c⁄° *È¨gë->
lökquÆôy
);

393 
a˘ive_lq_h™dÀr
->
	`˛ór_tc
(
èrgë
->
lökquÆôy
);

394 
	}
}

406 
hñlo_√ighb‹
 *

407 
	$ﬁ§_mÆloc_hñlo_√ighb‹
(c⁄° *
id
)

409 
hñlo_√ighb‹
 *
h
;

411 
h
 = 
	`ﬁ§_mÆloc
((
hñlo_√ighb‹
Ë+ 
a˘ive_lq_h™dÀr
->
hñlo_lq_size
, 
id
);

413 
	`as£π
((c⁄° *)
h
 + (*hË>(c⁄° *)h->
lökquÆôy
);

414 
a˘ive_lq_h™dÀr
->
	`˛ór_hñlo
(
h
->
lökquÆôy
);

415  
h
;

416 
	}
}

428 
tc_m¥_addr
 *

429 
	$ﬁ§_mÆloc_tc_m¥_addr
(c⁄° *
id
)

431 
tc_m¥_addr
 *
t
;

433 
t
 = 
	`ﬁ§_mÆloc
((
tc_m¥_addr
Ë+ 
a˘ive_lq_h™dÀr
->
tc_lq_size
, 
id
);

435 
	`as£π
((c⁄° *)
t
 + (*tË>(c⁄° *È->
lökquÆôy
);

436 
a˘ive_lq_h™dÀr
->
	`˛ór_tc
(
t
->
lökquÆôy
);

437  
t
;

438 
	}
}

450 
lq_hñlo_√ighb‹
 *

451 
	$ﬁ§_mÆloc_lq_hñlo_√ighb‹
(c⁄° *
id
)

453 
lq_hñlo_√ighb‹
 *
h
;

455 
h
 = 
	`ﬁ§_mÆloc
((
lq_hñlo_√ighb‹
Ë+ 
a˘ive_lq_h™dÀr
->
hñlo_lq_size
, 
id
);

457 
	`as£π
((c⁄° *)
h
 + (*hË>(c⁄° *)h->
lökquÆôy
);

458 
a˘ive_lq_h™dÀr
->
	`˛ór_hñlo
(
h
->
lökquÆôy
);

459  
h
;

460 
	}
}

472 
lök_íåy
 *

473 
	$ﬁ§_mÆloc_lök_íåy
(c⁄° *
id
)

475 
lök_íåy
 *
h
;

477 
h
 = 
	`ﬁ§_mÆloc
((
lök_íåy
Ë+ 
a˘ive_lq_h™dÀr
->
hñlo_lq_size
, 
id
);

479 
	`as£π
((c⁄° *)
h
 + (*hË>(c⁄° *)h->
lökquÆôy
);

480 
a˘ive_lq_h™dÀr
->
	`˛ór_hñlo
(
h
->
lökquÆôy
);

481  
h
;

482 
	}
}

484 
size_t
 
	$ﬁ§_sizeof_hñlo_lqd©a
() {

485  
a˘ive_lq_h™dÀr
->
hñlo_lqd©a_size
;

486 
	}
}

488 
size_t
 
	$ﬁ§_sizeof_tc_lqd©a
() {

489  
a˘ive_lq_h™dÀr
->
tc_lqd©a_size
;

490 
	}
}

499 
	$ﬁ§_ªÀv™t_lökco°_ch™ge
() {

500 
ch™ges_√ighb‹hood
 = 
åue
;

501 
ch™ges_t›ﬁogy
 = 
åue
;

504 
	`sig«l_lök_ch™ges
(
åue
);

505 
	}
}

	@src/lq_plugin.h

42 #i‚de‡
LQPLUGIN_H_


43 
	#LQPLUGIN_H_


	)

45 
	~"tc_£t.h
"

46 
	~"lök_£t.h
"

47 
	~"ﬁ§_•f.h
"

48 
	~"lq_∑ckë.h
"

49 
	~"∑ckë.h
"

50 
	~"comm⁄/avl.h
"

52 
	#LINK_COST_BROKEN
 (1<<22)

	)

53 
	#ROUTE_COST_BROKEN
 (0xffffffff)

	)

54 
	#ZERO_ROUTE_COST
 0

	)

56 
	#MINIMAL_USEFUL_LQ
 0.1

	)

57 
	#LQ_PLUGIN_RELEVANT_COSTCHANGE
 16

	)

59 
	#LQ_QUICKSTART_STEPS
 12

	)

60 
	#LQ_QUICKSTART_AGING
 0.25

	)

62 
	slqãxtbuf„r
 {

63 
	mbuf
[16];

66 
	slq_h™dÀr
 {

67 (*
	möôülize
) ();

69 
ﬁ§_lökco°
 (*
ˇlc_hñlo_co°
Ë(c⁄° *
	mlq
);

70 
ﬁ§_lökco°
 (*
ˇlc_tc_co°
Ë(c⁄° *
	mlq
);

72 (*
	m∑ckë_loss_h™dÀr
Ë(
lök_íåy
 * 
	míåy
, *
	mlq
, 
boﬁ
 
	mlo°
);

74 (*
	mmem‹ize_f‹eign_hñlo
Ë(*
	mloˇl
, *
	mf‹eign
);

75 (*
	mc›y_lök_lq_öto_√igh
Ë(*
	mèrgë
, *
	msour˚
);

76 (*
	mc›y_lök_lq_öto_tc
Ë(*
	mèrgë
, *
	msour˚
);

77 (*
	m˛ór_hñlo
Ë(*
	mèrgë
);

78 (*
	m˛ór_tc
Ë(*
	mèrgë
);

80 (*
	m£rülize_hñlo_lq
Ë(*
	mbuff
, *
	mlq
);

81 (*
	m£rülize_tc_lq
Ë(*
	mbuff
, *
	mlq
);

82 (*
	mde£rülize_hñlo_lq
Ë(c⁄° 
uöt8_t
 ** 
	mcuº
, *
	mlq
);

83 (*
	mde£rülize_tc_lq
Ë(c⁄° 
uöt8_t
 ** 
	mcuº
, *
	mlq
);

85 c⁄° *(*
	m¥öt_hñlo_lq
Ë(*
	m±r
, 
	m£∑øt‹
, 
lqãxtbuf„r
 * 
	mbuf„r
);

86 c⁄° *(*
	m¥öt_tc_lq
Ë(*
	m±r
, 
	m£∑øt‹
, 
lqãxtbuf„r
 * 
	mbuf„r
);

87 c⁄° *(*
	m¥öt_co°
Ë(
ﬁ§_lökco°
 
	mco°
, 
lqãxtbuf„r
 * 
	mbuf„r
);

89 
size_t
 
	mhñlo_lq_size
;

90 
size_t
 
	mtc_lq_size
;

91 
size_t
 
	mhñlo_lqd©a_size
;

92 
size_t
 
	mtc_lqd©a_size
;

95 
	slq_h™dÀr_node
 {

96 
avl_node
 
	mnode
;

97 
lq_h™dÀr
 *
	mh™dÀr
;

98 
	m«me
[0];

101 
AVLNODE2STRUCT
(
lq_h™dÀr_åì2lq_h™dÀr_node
, 
lq_h™dÀr_node
, 
node
);

103 
	#OLSR_FOR_ALL_LQ_HANDLERS
(
lq
) \

105 
avl_node
 *
lq_åì_node
, *
√xt_lq_åì_node
; \

106 
lq_åì_node
 = 
	`avl_wÆk_fú°
(&
lq_h™dÀr_åì
); \

107 
lq_åì_node
;Üq_åì_nodê
√xt_lq_åì_node
) { \

108 
√xt_lq_åì_node
 = 
	`avl_wÆk_√xt
(
lq_åì_node
); \

109 
lq
 = 
	`lq_h™dÀr_åì2lq_h™dÀr_node
(
lq_åì_node
);

	)

110 
	#OLSR_FOR_ALL_LQ_HANDLERS_END
(
tc
Ë}}

	)

112 
avl_°rˇ£cmp
(c⁄° *
°r1
, c⁄° *
°r2
);

113 
öô_lq_h™dÀr_åì
();

115 
ªgi°î_lq_h™dÀr
(
lq_h™dÀr
 *
h™dÀr
, c⁄° *
«me
);

117 
ﬁ§_lökco°
 
ﬁ§_ˇlc_tc_co°
(c⁄° 
tc_edge_íåy
 *);

119 
ﬁ§_£rülize_hñlo_lq_∑ú
(*
buff
, 
lq_hñlo_√ighb‹
 *
√igh
);

120 
ﬁ§_de£rülize_hñlo_lq_∑ú
(c⁄° 
uöt8_t
 ** 
cuº
, 
hñlo_√ighb‹
 *
√igh
);

121 
ﬁ§_£rülize_tc_lq_∑ú
(*
buff
, 
tc_m¥_addr
 *
√igh
);

122 
ﬁ§_de£rülize_tc_lq_∑ú
(c⁄° 
uöt8_t
 ** 
cuº
, 
tc_edge_íåy
 *
edge
);

124 
ﬁ§_upd©e_∑ckë_loss_w‹kî
(
lök_íåy
 *
íåy
, 
boﬁ
 
lo°
);

125 
ﬁ§_mem‹ize_f‹eign_hñlo_lq
(
lök_íåy
 *
loˇl
, 
hñlo_√ighb‹
 *
f‹eign
);

127 c⁄° *
gë_lök_íåy_ãxt
(
lök_íåy
 *
íåy
, 
£∑øt‹
, 
lqãxtbuf„r
 *
buf„r
);

128 c⁄° *
gë_tc_edge_íåy_ãxt
(
tc_edge_íåy
 *
íåy
, 
£∑øt‹
, 
lqãxtbuf„r
 *
buf„r
);

129 c⁄° *
gë_lökco°_ãxt
(
ﬁ§_lökco°
 
co°
, 
boﬁ
 
rouã
, 
lqãxtbuf„r
 *
buf„r
);

131 
ﬁ§_˛ór_hñlo_lq
(
lök_íåy
 * );

132 
ﬁ§_c›y_hñlo_lq
(
lq_hñlo_√ighb‹
 *
èrgë
, 
lök_íåy
 *
sour˚
);

133 
ﬁ§_c›ylq_lök_íåy_2_tc_m¥_addr
(
tc_m¥_addr
 *
èrgë
, 
lök_íåy
 *
sour˚
);

134 
ﬁ§_c›ylq_lök_íåy_2_tc_edge_íåy
(
tc_edge_íåy
 *
èrgë
, 
lök_íåy
 *
sour˚
);

135 
ﬁ§_˛ór_tc_lq
(
tc_m¥_addr
 *
èrgë
);

137 
hñlo_√ighb‹
 *
ﬁ§_mÆloc_hñlo_√ighb‹
(c⁄° *
id
);

138 
tc_m¥_addr
 *
ﬁ§_mÆloc_tc_m¥_addr
(c⁄° *
id
);

139 
lq_hñlo_√ighb‹
 *
ﬁ§_mÆloc_lq_hñlo_√ighb‹
(c⁄° *
id
);

140 
lök_íåy
 *
ﬁ§_mÆloc_lök_íåy
(c⁄° *
id
);

142 
size_t
 
ﬁ§_sizeof_hñlo_lqd©a
();

143 
size_t
 
ﬁ§_sizeof_tc_lqd©a
();

145 
ﬁ§_ªÀv™t_lökco°_ch™ge
();

148 
lq_h™dÀr
 *
a˘ive_lq_h™dÀr
;

	@src/lq_plugin_default_ff.c

42 
	~"tc_£t.h
"

43 
	~"lök_£t.h
"

44 
	~"lq_∂ugö.h
"

45 
	~"ﬁ§_•f.h
"

46 
	~"lq_∑ckë.h
"

47 
	~"∑ckë.h
"

48 
	~"ﬁ§.h
"

49 
	~"lq_∂ugö_deÁu…_ff.h
"

50 
	~"∑r£r.h
"

51 
	~"Âm.h
"

52 
	~"mid_£t.h
"

53 
	~"scheduÀr.h
"

54 
	~"log.h
"

55 
	~<time.h
>

57 
deÁu…_lq_öôülize_ff
();

59 
ﬁ§_lökco°
 
deÁu…_lq_ˇlc_co°_ff
(c⁄° *
lq
);

61 
deÁu…_lq_∑ckë_loss_w‹kî_ff
(
lök_íåy
 *
lök
, *
lq
, 
boﬁ
 
lo°
);

62 
deÁu…_lq_mem‹ize_f‹eign_hñlo_ff
(*
loˇl
, *
f‹eign
);

64 
deÁu…_lq_£rülize_hñlo_lq_∑ú_ff
(*
buff
, *
lq
);

65 
deÁu…_lq_de£rülize_hñlo_lq_∑ú_ff
(c⁄° 
uöt8_t
 ** 
cuº
, *
lq
);

66 
deÁu…_lq_£rülize_tc_lq_∑ú_ff
(*
buff
, *
lq
);

67 
deÁu…_lq_de£rülize_tc_lq_∑ú_ff
(c⁄° 
uöt8_t
 ** 
cuº
, *
lq
);

69 
deÁu…_lq_c›y_lök2√igh_ff
(*
t
, *
s
);

70 
deÁu…_lq_c›y_lök2tc_ff
(*
èrgë
, *
sour˚
);

71 
deÁu…_lq_˛ór_ff
(*
èrgë
);

72 
deÁu…_lq_˛ór_ff_hñlo
(*
èrgë
);

74 c⁄° *
deÁu…_lq_¥öt_ff
(*
±r
, 
£∑øt‹
, 
lqãxtbuf„r
 *
buf„r
);

75 c⁄° *
deÁu…_lq_¥öt_co°_ff
(
ﬁ§_lökco°
 
co°
, 
lqãxtbuf„r
 *
buf„r
);

78 
lq_h™dÀr
 
	glq_ëx_ff_h™dÀr
 = {

79 &
deÁu…_lq_öôülize_ff
,

80 &
deÁu…_lq_ˇlc_co°_ff
,

81 &
deÁu…_lq_ˇlc_co°_ff
,

83 &
deÁu…_lq_∑ckë_loss_w‹kî_ff
,

85 &
deÁu…_lq_mem‹ize_f‹eign_hñlo_ff
,

86 &
deÁu…_lq_c›y_lök2√igh_ff
,

87 &
deÁu…_lq_c›y_lök2tc_ff
,

88 &
deÁu…_lq_˛ór_ff_hñlo
,

89 &
deÁu…_lq_˛ór_ff
,

91 &
deÁu…_lq_£rülize_hñlo_lq_∑ú_ff
,

92 &
deÁu…_lq_£rülize_tc_lq_∑ú_ff
,

93 &
deÁu…_lq_de£rülize_hñlo_lq_∑ú_ff
,

94 &
deÁu…_lq_de£rülize_tc_lq_∑ú_ff
,

96 &
deÁu…_lq_¥öt_ff
,

97 &
deÁu…_lq_¥öt_ff
,

98 &
deÁu…_lq_¥öt_co°_ff
,

100 (
deÁu…_lq_ff_hñlo
),

101 (
deÁu…_lq_ff
),

107 
	$deÁu…_lq_ff_h™dÀ_lqch™ge
() {

108 
deÁu…_lq_ff_hñlo
 *
lq
;

109 
ùaddr_°r
 
buf
;

110 
lök_íåy
 *
lök
;

112 
boﬁ
 
åiggîed
 = 
Ál£
;

114 
	`OLSR_FOR_ALL_LINK_ENTRIES
(
lök
) {

115 
boﬁ
 
ªÀv™t
 = 
Ál£
;

116 
lq
 = (
deÁu…_lq_ff_hñlo
 *)
lök
->
lökquÆôy
;

119 
	`Ârötf
(
°dîr
, "%s: old = %u/%uÇew = %u/%u\n", 
	`ﬁ§_ù_to_°rög
(&
buf
, &
lök
->
√ighb‹_iÁ˚_addr
),

120 
lq
->
smoŸhed_lq
.
vÆueLq
,Üq->smoŸhed_lq.
vÆueNlq
,

121 
lq
->lq.
vÆueLq
,Üq->lq.
vÆueNlq
);

124 i‡(
lq
->
smoŸhed_lq
.
vÆueLq
 <Üq->lq.valueLq) {

125 i‡(
lq
->lq.
vÆueLq
 =255 ||Üq->lq.vÆueLq -Üq->
smoŸhed_lq
.valueLq >Üq->smoothed_lq.valueLq/10) {

126 
ªÀv™t
 = 
åue
;

129 i‡(
lq
->
smoŸhed_lq
.
vÆueLq
 >Üq->lq.valueLq) {

130 i‡(
lq
->
smoŸhed_lq
.
vÆueLq
 -Üq->lq.valueLq >Üq->smoothed_lq.valueLq/10) {

131 
ªÀv™t
 = 
åue
;

134 i‡(
lq
->
smoŸhed_lq
.
vÆueNlq
 <Üq->lq.valueNlq) {

135 i‡(
lq
->lq.
vÆueNlq
 =255 ||Üq->lq.vÆueNlq -Üq->
smoŸhed_lq
.valueNlq >Üq->smoothed_lq.valueNlq/10) {

136 
ªÀv™t
 = 
åue
;

139 i‡(
lq
->
smoŸhed_lq
.
vÆueNlq
 >Üq->lq.valueNlq) {

140 i‡(
lq
->
smoŸhed_lq
.
vÆueNlq
 -Üq->lq.valueNlq >Üq->smoothed_lq.valueNlq/10) {

141 
ªÀv™t
 = 
åue
;

145 i‡(
ªÀv™t
) {

146 
	`mem˝y
(&
lq
->
smoŸhed_lq
, &lq->lq, (
deÁu…_lq_ff
));

147 
lök
->
lökco°
 = 
	`deÁu…_lq_ˇlc_co°_ff
(&
lq
->
smoŸhed_lq
);

148 
åiggîed
 = 
åue
;

150 } 
	`OLSR_FOR_ALL_LINK_ENTRIES_END
(
lök
)

152 i‡(!
åiggîed
) {

156 
	`OLSR_FOR_ALL_LINK_ENTRIES
(
lök
) {

157 
lq
 = (
deÁu…_lq_ff_hñlo
 *)
lök
->
lökquÆôy
;

159 i‡(
lq
->
smoŸhed_lq
.
vÆueLq
 =255 &&Üq->smoŸhed_lq.
vÆueNlq
 == 255) {

163 i‡(
lq
->
smoŸhed_lq
.
vÆueLq
 =lq->lq.vÆueLq &&Üq->smoŸhed_lq.
vÆueNlq
 ==Üq->lq.valueNlq) {

167 
	`mem˝y
(&
lq
->
smoŸhed_lq
, &lq->lq, (
deÁu…_lq_ff
));

168 
lök
->
lökco°
 = 
	`deÁu…_lq_ˇlc_co°_ff
(&
lq
->
smoŸhed_lq
);

169 } 
	`OLSR_FOR_ALL_LINK_ENTRIES_END
(
lök
)

171 
	`ﬁ§_ªÀv™t_lökco°_ch™ge
();

172 
	}
}

175 
	$deÁu…_lq_∑r£r_ff
(
ﬁ§
 *ﬁ§, 
öãrÁ˚
 *
ö_if
, 
ﬁ§_ù_addr
 *
‰om_addr
)

177 c⁄° 
ﬁ§_ù_addr
 *
maö_addr
;

178 
lök_íåy
 *
 k
;

179 
deÁu…_lq_ff_hñlo
 *
lq
;

180 
uöt32_t
 
£q_diff
;

183 
maö_addr
 = 
	`mid_lookup_maö_addr
(
‰om_addr
);

186 
 k
 = 
	`lookup_lök_íåy
(
‰om_addr
, 
maö_addr
, 
ö_if
);

187 i‡(
 k
 =
NULL
) {

191 
lq
 = (
deÁu…_lq_ff_hñlo
 *)
 k
->
lökquÆôy
;

194 i‡(
lq
->
œ°_£q_ƒ
 =
ﬁ§
->
ﬁ§_£qno
) {

195 
ùaddr_°r
 
buf
;

196 
	`ﬁ§_sy¶og
(
OLSR_LOG_INFO
, "detected duplicateÖacket with seqnr 0x%x from %s on %s (%d Bytes)",

197 
ﬁ§
->
ﬁ§_£qno
,
	`ﬁ§_ù_to_°rög
(&
buf
, 
‰om_addr
),
ö_if
->
öt_«me
,
	`¡ohs
(ﬁ§->
ﬁ§_∑ckÀn
));

201 i‡(
lq
->
œ°_£q_ƒ
 > 
ﬁ§
->
ﬁ§_£qno
) {

202 
£q_diff
 = (
uöt32_t
Ë
ﬁ§
->
ﬁ§_£qno
 + 65536 - 
lq
->
œ°_£q_ƒ
;

204 
£q_diff
 = 
ﬁ§
->
ﬁ§_£qno
 - 
lq
->
œ°_£q_ƒ
;

208 i‡(
£q_diff
 > 256) {

209 
£q_diff
 = 1;

212 
lq
->
ª˚ived
[lq->
a˘ivePå
]++;

213 
lq
->
tŸÆ
[lq->
a˘ivePå
] +
£q_diff
;

215 
lq
->
œ°_£q_ƒ
 = 
ﬁ§
->
ﬁ§_£qno
;

216 
lq
->
mis£d_hñlos
 = 0;

217 
	}
}

220 
deÁu…_lq_ff_timî
(
__©åibuã__
 ((
unu£d
)Ë* 
c⁄ãxt
)

222 
lök_íåy
 *
	glök
;

224 
OLSR_FOR_ALL_LINK_ENTRIES
(
lök
) {

225 
deÁu…_lq_ff_hñlo
 *
	géq
 = (deÁu…_lq_ff_hñlÿ*)
lök
->
lökquÆôy
;

226 
Âm
 
	gøtio
;

227 
	gi
, 
	gª˚ived
, 
	gtŸÆ
;

229 
	gª˚ived
 = 0;

230 
	gtŸÆ
 = 0;

233 i‡(
	géq
->
	gwödowSize
 < 
	gLQ_FF_WINDOW
) {

234 
	géq
->
	gwödowSize
++;

236 
	gi
 = 0; i < 
	géq
->
	gwödowSize
; i++) {

237 
	gª˚ived
 +
éq
->
ª˚ived
[
i
];

238 
	gtŸÆ
 +
éq
->
tŸÆ
[
i
];

242 i‡(
	gtŸÆ
 == 0) {

243 
éq
->
lq
.
vÆueLq
 = 0;

246 
	gøtio
 = 
Âmidiv
(
ôoÂm
(
lök
->
loss_lök_mu…ùlõr
), 
LINK_LOSS_MULTIPLIER
);

249 i‡(
	géq
->
	gmis£d_hñlos
 > 1) {

250 
	gª˚ived
 = 
ª˚ived
 -Ñe˚ived * 
éq
->
mis£d_hñlos
 * 
lök
->
öãr
->
hñlo_ëime
/1000 / 
LQ_FF_WINDOW
;

254 
	gøtio
 = 
Âmmuli
(
øtio
, 
ª˚ived
);

255 
	gøtio
 = 
Âmidiv
(
øtio
, 
tŸÆ
);

256 
	gøtio
 = 
Âmmuli
(
øtio
, 255);

258 
	géq
->
	glq
.
	gvÆueLq
 = (
uöt8_t
Ë(
Âmtoi
(
øtio
));

262 
	géq
->
	ga˘ivePå
 = (
éq
->
a˘ivePå
 + 1Ë% 
LQ_FF_WINDOW
;

263 
	géq
->
	gtŸÆ
[
éq
->
a˘ivePå
] = 0;

264 
	géq
->
	gª˚ived
[
éq
->
a˘ivePå
] = 0;

265 } 
OLSR_FOR_ALL_LINK_ENTRIES_END
(
lök
);

267 
deÁu…_lq_ff_h™dÀ_lqch™ge
();

271 
	$deÁu…_lq_öôülize_ff
()

273 
	`ﬁ§_∑ckë∑r£r_add_fun˘i⁄
(&
deÁu…_lq_∑r£r_ff
);

274 
	`ﬁ§_°¨t_timî
(1000, 0, 
OLSR_TIMER_PERIODIC
, &
deÁu…_lq_ff_timî
, 
NULL
, 0);

275 
	}
}

277 
ﬁ§_lökco°


278 
	$deÁu…_lq_ˇlc_co°_ff
(c⁄° *
±r
)

280 c⁄° 
deÁu…_lq_ff
 *
lq
 = 
±r
;

281 
ﬁ§_lökco°
 
co°
;

283 i‡(
lq
->
vÆueLq
 < ()(255 * 
MINIMAL_USEFUL_LQ
Ë||Üq->
vÆueNlq
 < ()(255 * MINIMAL_USEFUL_LQ)) {

284  
LINK_COST_BROKEN
;

287 
co°
 = 
	`Âmidiv
(
	`ôoÂm
(255 * 255), ()
lq
->
vÆueLq
 * (Óq->
vÆueNlq
);

289 i‡(
co°
 > 
LINK_COST_BROKEN
)

290  
LINK_COST_BROKEN
;

291 i‡(
co°
 == 0)

293  
co°
;

294 
	}
}

297 
	$deÁu…_lq_£rülize_hñlo_lq_∑ú_ff
(*
buff
, *
±r
)

299 
deÁu…_lq_ff
 *
lq
 = 
±r
;

301 
buff
[0] = ()
lq
->
vÆueLq
;

302 
buff
[1] = ()
lq
->
vÆueNlq
;

303 
buff
[2] = ()(0);

304 
buff
[3] = ()(0);

307 
	}
}

310 
	$deÁu…_lq_de£rülize_hñlo_lq_∑ú_ff
(c⁄° 
uöt8_t
 ** 
cuº
, *
±r
)

312 
deÁu…_lq_ff
 *
lq
 = 
±r
;

314 
	`pkt_gë_u8
(
cuº
, &
lq
->
vÆueLq
);

315 
	`pkt_gë_u8
(
cuº
, &
lq
->
vÆueNlq
);

316 
	`pkt_ign‹e_u16
(
cuº
);

317 
	}
}

320 
	$deÁu…_lq_£rülize_tc_lq_∑ú_ff
(*
buff
, *
±r
)

322 
deÁu…_lq_ff
 *
lq
 = 
±r
;

324 
buff
[0] = ()
lq
->
vÆueLq
;

325 
buff
[1] = ()
lq
->
vÆueNlq
;

326 
buff
[2] = ()(0);

327 
buff
[3] = ()(0);

330 
	}
}

333 
	$deÁu…_lq_de£rülize_tc_lq_∑ú_ff
(c⁄° 
uöt8_t
 ** 
cuº
, *
±r
)

335 
deÁu…_lq_ff
 *
lq
 = 
±r
;

337 
	`pkt_gë_u8
(
cuº
, &
lq
->
vÆueLq
);

338 
	`pkt_gë_u8
(
cuº
, &
lq
->
vÆueNlq
);

339 
	`pkt_ign‹e_u16
(
cuº
);

340 
	}
}

343 
deÁu…_lq_∑ckë_loss_w‹kî_ff
(
lök_íåy
 *
lök
,

344 
__©åibuã__
 ((
unu£d
)Ë*
±r
, 
boﬁ
 
lo°
)

346 
deÁu…_lq_ff_hñlo
 *
	géq
 = (deÁu…_lq_ff_hñlÿ*)
lök
->
lökquÆôy
;

348 i‡(
	glo°
) {

349 
	géq
->
	gmis£d_hñlos
++;

355 
	$deÁu…_lq_mem‹ize_f‹eign_hñlo_ff
(*
±rLoˇl
, *
±rF‹eign
)

357 
deÁu…_lq_ff_hñlo
 *
loˇl
 = 
±rLoˇl
;

358 
deÁu…_lq_ff
 *
f‹eign
 = 
±rF‹eign
;

360 i‡(
f‹eign
) {

361 
loˇl
->
lq
.
vÆueNlq
 = 
f‹eign
->
vÆueLq
;

363 
loˇl
->
lq
.
vÆueNlq
 = 0;

365 
	}
}

368 
	$deÁu…_lq_c›y_lök2√igh_ff
(*
t
, *
s
)

370 
deÁu…_lq_ff
 *
èrgë
 = 
t
;

371 
deÁu…_lq_ff_hñlo
 *
sour˚
 = 
s
;

372 *
èrgë
 = 
sour˚
->
smoŸhed_lq
;

373 
	}
}

376 
	$deÁu…_lq_c›y_lök2tc_ff
(*
t
, *
s
)

378 
deÁu…_lq_ff
 *
èrgë
 = 
t
;

379 
deÁu…_lq_ff_hñlo
 *
sour˚
 = 
s
;

380 *
èrgë
 = 
sour˚
->
smoŸhed_lq
;

381 
	}
}

384 
	$deÁu…_lq_˛ór_ff
(*
èrgë
)

386 
	`mem£t
(
èrgë
, 0, (
deÁu…_lq_ff
));

387 
	}
}

390 
	$deÁu…_lq_˛ór_ff_hñlo
(*
èrgë
)

392 
deÁu…_lq_ff_hñlo
 *
loˇl
 = 
èrgë
;

393 
i
;

395 
	`deÁu…_lq_˛ór_ff
(&
loˇl
->
lq
);

396 
	`deÁu…_lq_˛ór_ff
(&
loˇl
->
smoŸhed_lq
);

397 
loˇl
->
wödowSize
 = 
LQ_FF_QUICKSTART_INIT
;

398 
i
 = 0; i < 
LQ_FF_WINDOW
; i++) {

399 
loˇl
->
tŸÆ
[
i
] = 3;

401 
	}
}

404 
	$deÁu…_lq_¥öt_ff
(*
±r
, 
£∑øt‹
, 
lqãxtbuf„r
 *
buf„r
)

406 
deÁu…_lq_ff
 *
lq
 = 
±r
;

408 
	`¢¥ötf
(
buf„r
->
buf
, (buf„r->buf), "%s%c%s", 
	`Âmtﬂ
(
	`Âmidiv
(
	`ôoÂm
(()
lq
->
vÆueLq
), 255)), 
£∑øt‹
,

409 
	`Âmtﬂ
(
	`Âmidiv
(
	`ôoÂm
(()
lq
->
vÆueNlq
), 255)));

410  
buf„r
->
buf
;

411 
	}
}

414 
	$deÁu…_lq_¥öt_co°_ff
(
ﬁ§_lökco°
 
co°
, 
lqãxtbuf„r
 *
buf„r
)

416 
	`¢¥ötf
(
buf„r
->
buf
, (buf„r->buf), "%s", 
	`Âmtﬂ
(
co°
));

417  
buf„r
->
buf
;

418 
	}
}

	@src/lq_plugin_default_ff.h

42 #i‚de‡
LQ_ETX_FF_


43 
	#LQ_ETX_FF_


	)

45 
	~"ﬁ§_ty≥s.h
"

46 
	~"lq_∂ugö.h
"

48 
	#LQ_PLUGIN_LC_MULTIPLIER
 1024

	)

49 
	#LQ_PLUGIN_RELEVANT_COSTCHANGE_FF
 16

	)

51 
	#LQ_ALGORITHM_ETX_FF_NAME
 "ëx_ff"

	)

53 
	#LQ_FF_WINDOW
 32

	)

54 
	#LQ_FF_QUICKSTART_INIT
 4

	)

56 
	sdeÁu…_lq_ff
 {

57 
uöt8_t
 
	mvÆueLq
;

58 
uöt8_t
 
	mvÆueNlq
;

61 
	sdeÁu…_lq_ff_hñlo
 {

62 
deÁu…_lq_ff
 
	msmoŸhed_lq
;

63 
deÁu…_lq_ff
 
	mlq
;

64 
uöt8_t
 
	mwödowSize
, 
	ma˘ivePå
;

65 
uöt16_t
 
	mœ°_£q_ƒ
;

66 
uöt16_t
 
	mmis£d_hñlos
;

67 
uöt16_t
 
	mª˚ived
[
LQ_FF_WINDOW
], 
	mtŸÆ
[LQ_FF_WINDOW];

70 
lq_h™dÀr
 
lq_ëx_ff_h™dÀr
;

	@src/lq_plugin_default_ffeth.c

42 
	~"tc_£t.h
"

43 
	~"lök_£t.h
"

44 
	~"lq_∂ugö.h
"

45 
	~"ﬁ§_•f.h
"

46 
	~"lq_∑ckë.h
"

47 
	~"∑ckë.h
"

48 
	~"ﬁ§.h
"

49 
	~"lq_∂ugö_deÁu…_f„th.h
"

50 
	~"∑r£r.h
"

51 
	~"Âm.h
"

52 
	~"mid_£t.h
"

53 
	~"scheduÀr.h
"

54 
	~"log.h
"

56 
	#LQ_PLUGIN_LC_MULTIPLIER
 1024

	)

57 
	#LQ_PLUGIN_RELEVANT_COSTCHANGE_FF
 16

	)

59 
deÁu…_lq_öôülize_f„th
();

61 
ﬁ§_lökco°
 
deÁu…_lq_ˇlc_co°_f„th
(c⁄° *
lq
);

63 
deÁu…_lq_∑ckë_loss_w‹kî_f„th
(
lök_íåy
 *
lök
, *
lq
, 
boﬁ
 
lo°
);

64 
deÁu…_lq_mem‹ize_f‹eign_hñlo_f„th
(*
loˇl
, *
f‹eign
);

66 
deÁu…_lq_£rülize_hñlo_lq_∑ú_f„th
(*
buff
, *
lq
);

67 
deÁu…_lq_de£rülize_hñlo_lq_∑ú_f„th
(c⁄° 
uöt8_t
 ** 
cuº
, *
lq
);

68 
deÁu…_lq_£rülize_tc_lq_∑ú_f„th
(*
buff
, *
lq
);

69 
deÁu…_lq_de£rülize_tc_lq_∑ú_f„th
(c⁄° 
uöt8_t
 ** 
cuº
, *
lq
);

71 
deÁu…_lq_c›y_lök2√igh_f„th
(*
t
, *
s
);

72 
deÁu…_lq_c›y_lök2tc_f„th
(*
èrgë
, *
sour˚
);

73 
deÁu…_lq_˛ór_f„th
(*
èrgë
);

74 
deÁu…_lq_˛ór_f„th_hñlo
(*
èrgë
);

76 c⁄° *
deÁu…_lq_¥öt_f„th
(*
±r
, 
£∑øt‹
, 
lqãxtbuf„r
 *
buf„r
);

77 c⁄° *
deÁu…_lq_¥öt_co°_f„th
(
ﬁ§_lökco°
 
co°
, 
lqãxtbuf„r
 *
buf„r
);

80 
lq_h™dÀr
 
	glq_ëx_f„th_h™dÀr
 = {

81 &
deÁu…_lq_öôülize_f„th
,

82 &
deÁu…_lq_ˇlc_co°_f„th
,

83 &
deÁu…_lq_ˇlc_co°_f„th
,

85 &
deÁu…_lq_∑ckë_loss_w‹kî_f„th
,

87 &
deÁu…_lq_mem‹ize_f‹eign_hñlo_f„th
,

88 &
deÁu…_lq_c›y_lök2√igh_f„th
,

89 &
deÁu…_lq_c›y_lök2tc_f„th
,

90 &
deÁu…_lq_˛ór_f„th_hñlo
,

91 &
deÁu…_lq_˛ór_f„th
,

93 &
deÁu…_lq_£rülize_hñlo_lq_∑ú_f„th
,

94 &
deÁu…_lq_£rülize_tc_lq_∑ú_f„th
,

95 &
deÁu…_lq_de£rülize_hñlo_lq_∑ú_f„th
,

96 &
deÁu…_lq_de£rülize_tc_lq_∑ú_f„th
,

98 &
deÁu…_lq_¥öt_f„th
,

99 &
deÁu…_lq_¥öt_f„th
,

100 &
deÁu…_lq_¥öt_co°_f„th
,

102 (
deÁu…_lq_f„th_hñlo
),

103 (
deÁu…_lq_f„th
),

109 
	$deÁu…_lq_f„th_h™dÀ_lqch™ge
() {

110 
deÁu…_lq_f„th_hñlo
 *
lq
;

111 
ùaddr_°r
 
buf
;

112 
lök_íåy
 *
lök
;

114 
boﬁ
 
åiggîed
 = 
Ál£
;

116 
	`OLSR_FOR_ALL_LINK_ENTRIES
(
lök
) {

117 
boﬁ
 
ªÀv™t
 = 
Ál£
;

118 
lq
 = (
deÁu…_lq_f„th_hñlo
 *)
lök
->
lökquÆôy
;

121 
	`Ârötf
(
°dîr
, "%s: old = %u/%uÇew = %u/%u\n", 
	`ﬁ§_ù_to_°rög
(&
buf
, &
lök
->
√ighb‹_iÁ˚_addr
),

122 
lq
->
smoŸhed_lq
.
vÆueLq
,Üq->smoŸhed_lq.
vÆueNlq
,

123 
lq
->lq.
vÆueLq
,Üq->lq.
vÆueNlq
);

126 i‡(
lq
->
smoŸhed_lq
.
vÆueLq
 <Üq->lq.valueLq) {

127 i‡(
lq
->lq.
vÆueLq
 >254 ||Üq->lq.vÆueLq -Üq->
smoŸhed_lq
.valueLq >Üq->smoothed_lq.valueLq/10) {

128 
ªÀv™t
 = 
åue
;

131 i‡(
lq
->
smoŸhed_lq
.
vÆueLq
 >Üq->lq.valueLq) {

132 i‡(
lq
->
smoŸhed_lq
.
vÆueLq
 -Üq->lq.valueLq >Üq->smoothed_lq.valueLq/10) {

133 
ªÀv™t
 = 
åue
;

136 i‡(
lq
->
smoŸhed_lq
.
vÆueNlq
 <Üq->lq.valueNlq) {

137 i‡(
lq
->lq.
vÆueNlq
 >254 ||Üq->lq.vÆueNlq -Üq->
smoŸhed_lq
.valueNlq >Üq->smoothed_lq.valueNlq/10) {

138 
ªÀv™t
 = 
åue
;

141 i‡(
lq
->
smoŸhed_lq
.
vÆueNlq
 >Üq->lq.valueNlq) {

142 i‡(
lq
->
smoŸhed_lq
.
vÆueNlq
 -Üq->lq.valueNlq >Üq->smoothed_lq.valueNlq/10) {

143 
ªÀv™t
 = 
åue
;

147 i‡(
ªÀv™t
) {

148 
	`mem˝y
(&
lq
->
smoŸhed_lq
, &lq->lq, (
deÁu…_lq_f„th
));

149 
lök
->
lökco°
 = 
	`deÁu…_lq_ˇlc_co°_f„th
(&
lq
->
smoŸhed_lq
);

150 
åiggîed
 = 
åue
;

152 } 
	`OLSR_FOR_ALL_LINK_ENTRIES_END
(
lök
)

154 i‡(!
åiggîed
) {

158 
	`OLSR_FOR_ALL_LINK_ENTRIES
(
lök
) {

159 
lq
 = (
deÁu…_lq_f„th_hñlo
 *)
lök
->
lökquÆôy
;

161 i‡(
lq
->
smoŸhed_lq
.
vÆueLq
 >254 &&Üq->smoŸhed_lq.
vÆueNlq
 >= 254) {

165 i‡(
lq
->
smoŸhed_lq
.
vÆueLq
 =lq->lq.vÆueLq &&Üq->smoŸhed_lq.
vÆueNlq
 ==Üq->lq.valueNlq) {

169 
	`mem˝y
(&
lq
->
smoŸhed_lq
, &lq->lq, (
deÁu…_lq_f„th
));

170 
lök
->
lökco°
 = 
	`deÁu…_lq_ˇlc_co°_f„th
(&
lq
->
smoŸhed_lq
);

171 } 
	`OLSR_FOR_ALL_LINK_ENTRIES_END
(
lök
)

173 
	`ﬁ§_ªÀv™t_lökco°_ch™ge
();

174 
	}
}

177 
	$deÁu…_lq_∑r£r_f„th
(
ﬁ§
 *ﬁ§, 
öãrÁ˚
 *
ö_if
, 
ﬁ§_ù_addr
 *
‰om_addr
)

179 c⁄° 
ﬁ§_ù_addr
 *
maö_addr
;

180 
lök_íåy
 *
 k
;

181 
deÁu…_lq_f„th_hñlo
 *
lq
;

182 
uöt32_t
 
£q_diff
;

185 
maö_addr
 = 
	`mid_lookup_maö_addr
(
‰om_addr
);

188 
 k
 = 
	`lookup_lök_íåy
(
‰om_addr
, 
maö_addr
, 
ö_if
);

189 i‡(
 k
 =
NULL
) {

193 
lq
 = (
deÁu…_lq_f„th_hñlo
 *)
 k
->
lökquÆôy
;

196 i‡(
lq
->
œ°_£q_ƒ
 =
ﬁ§
->
ﬁ§_£qno
) {

197 
ùaddr_°r
 
buf
;

198 
	`ﬁ§_sy¶og
(
OLSR_LOG_INFO
, "detected duplicateÖacket with seqnr %d from %s on %s (%d Bytes)",

199 
ﬁ§
->
ﬁ§_£qno
,
	`ﬁ§_ù_to_°rög
(&
buf
, 
‰om_addr
),
ö_if
->
öt_«me
,
	`¡ohs
(ﬁ§->
ﬁ§_∑ckÀn
));

203 i‡(
lq
->
œ°_£q_ƒ
 > 
ﬁ§
->
ﬁ§_£qno
) {

204 
£q_diff
 = (
uöt32_t
Ë
ﬁ§
->
ﬁ§_£qno
 + 65536 - 
lq
->
œ°_£q_ƒ
;

206 
£q_diff
 = 
ﬁ§
->
ﬁ§_£qno
 - 
lq
->
œ°_£q_ƒ
;

210 i‡(
£q_diff
 > 256) {

211 
£q_diff
 = 1;

214 
lq
->
ª˚ived
[lq->
a˘ivePå
]++;

215 
lq
->
tŸÆ
[lq->
a˘ivePå
] +
£q_diff
;

217 
lq
->
œ°_£q_ƒ
 = 
ﬁ§
->
ﬁ§_£qno
;

218 
lq
->
mis£d_hñlos
 = 0;

219 
	}
}

222 
deÁu…_lq_f„th_timî
(
__©åibuã__
 ((
unu£d
)Ë* 
c⁄ãxt
)

224 
lök_íåy
 *
	glök
;

226 
OLSR_FOR_ALL_LINK_ENTRIES
(
lök
) {

227 
deÁu…_lq_f„th_hñlo
 *
	géq
 = (deÁu…_lq_f„th_hñlÿ*)
lök
->
lökquÆôy
;

228 
Âm
 
	gøtio
;

229 
	gi
, 
	gª˚ived
, 
	gtŸÆ
;

231 
	gª˚ived
 = 0;

232 
	gtŸÆ
 = 0;

235 i‡(
	géq
->
	gwödowSize
 < 
	gLQ_FFETH_WINDOW
) {

236 
	géq
->
	gwödowSize
++;

238 
	gi
 = 0; i < 
	géq
->
	gwödowSize
; i++) {

239 
	gª˚ived
 +
éq
->
ª˚ived
[
i
];

240 
	gtŸÆ
 +
éq
->
tŸÆ
[
i
];

244 i‡(
	gtŸÆ
 == 0) {

245 
éq
->
lq
.
vÆueLq
 = 0;

248 
	gøtio
 = 
Âmidiv
(
ôoÂm
(
lök
->
loss_lök_mu…ùlõr
), 
LINK_LOSS_MULTIPLIER
);

251 i‡(
	géq
->
	gmis£d_hñlos
 > 1) {

252 
	gª˚ived
 = 
ª˚ived
 -Ñe˚ived * 
éq
->
mis£d_hñlos
 * 
lök
->
öãr
->
hñlo_ëime
/1000 / 
LQ_FFETH_WINDOW
;

256 
	gøtio
 = 
Âmmuli
(
øtio
, 
ª˚ived
);

257 
	gøtio
 = 
Âmidiv
(
øtio
, 
tŸÆ
);

258 
	gøtio
 = 
Âmmuli
(
øtio
, 255);

260 
	géq
->
	glq
.
	gvÆueLq
 = (
uöt8_t
Ë(
Âmtoi
(
øtio
));

264 i‡(
	glök
->
	göãr
->
	gmode
 =
IF_MODE_ETHER
) {

265 i‡(
éq
->
lq
.
vÆueLq
 > (
uöt8_t
)(0.95 * 255)) {

266 
éq
->
≥r„˘_ëh
 = 
åue
;

268 i‡(
	géq
->
	glq
.
	gvÆueLq
 > (
	guöt8_t
)(0.90 * 255)) {

269 
	géq
->
	g≥r„˘_ëh
 = 
Ál£
;

272 i‡(
	géq
->
	g≥r„˘_ëh
) {

273 
	géq
->
	glq
.
	gvÆueLq
 = 255;

276 i‡(
	glök
->
	göãr
->
	gmode
 !
IF_MODE_ETHER
 && 
éq
->
lq
.
vÆueLq
 > 0) {

277 
éq
->
lq
.
vÆueLq
--;

281 
	géq
->
	ga˘ivePå
 = (
éq
->
a˘ivePå
 + 1Ë% 
LQ_FFETH_WINDOW
;

282 
	géq
->
	gtŸÆ
[
éq
->
a˘ivePå
] = 0;

283 
	géq
->
	gª˚ived
[
éq
->
a˘ivePå
] = 0;

284 } 
OLSR_FOR_ALL_LINK_ENTRIES_END
(
lök
);

286 
deÁu…_lq_f„th_h™dÀ_lqch™ge
();

290 
	$deÁu…_lq_öôülize_f„th
()

292 i‡(
ﬁ§_˙f
->
lq_«t_thªsh
 < 1.0) {

293 
	`Ârötf
(
°dîr
, "Warning,Çat_treshold < 1.0 is moreÜikelyÅoÖroduceÜoops withÉtx_ffeth\n");

295 
	`ﬁ§_∑ckë∑r£r_add_fun˘i⁄
(&
deÁu…_lq_∑r£r_f„th
);

296 
	`ﬁ§_°¨t_timî
(1000, 0, 
OLSR_TIMER_PERIODIC
, &
deÁu…_lq_f„th_timî
, 
NULL
, 0);

297 
	}
}

299 
ﬁ§_lökco°


300 
	$deÁu…_lq_ˇlc_co°_f„th
(c⁄° *
±r
)

302 c⁄° 
deÁu…_lq_f„th
 *
lq
 = 
±r
;

303 
ﬁ§_lökco°
 
co°
;

304 
boﬁ
 
ëhî
;

305 
lq_öt
, 
∆q_öt
;

307 i‡(
lq
->
vÆueLq
 < ()(255 * 
MINIMAL_USEFUL_LQ
Ë||Üq->
vÆueNlq
 < ()(255 * MINIMAL_USEFUL_LQ)) {

308  
LINK_COST_BROKEN
;

311 
ëhî
 = 
lq
->
vÆueLq
 =255 &&Üq->
vÆueNlq
 == 255;

313 
lq_öt
 = ()
lq
->
vÆueLq
;

314 i‡(
lq_öt
 > 0 &&Üq_int < 255) {

315 
lq_öt
++;

318 
∆q_öt
 = ()
lq
->
vÆueNlq
;

319 i‡(
∆q_öt
 > 0 &&Çlq_int < 255) {

320 
∆q_öt
++;

322 
co°
 = 
	`Âmidiv
(
	`ôoÂm
(255 * 255), 
lq_öt
 * 
∆q_öt
);

323 i‡(
ëhî
) {

325 
co°
 /= 10;

328 i‡(
co°
 > 
LINK_COST_BROKEN
)

329  
LINK_COST_BROKEN
;

330 i‡(
co°
 == 0)

332  
co°
;

333 
	}
}

336 
	$deÁu…_lq_£rülize_hñlo_lq_∑ú_f„th
(*
buff
, *
±r
)

338 
deÁu…_lq_f„th
 *
lq
 = 
±r
;

340 
buff
[0] = ()(0);

341 
buff
[1] = ()(0);

342 
buff
[2] = ()
lq
->
vÆueLq
;

343 
buff
[3] = ()
lq
->
vÆueNlq
;

346 
	}
}

349 
	$deÁu…_lq_de£rülize_hñlo_lq_∑ú_f„th
(c⁄° 
uöt8_t
 ** 
cuº
, *
±r
)

351 
deÁu…_lq_f„th
 *
lq
 = 
±r
;

353 
	`pkt_ign‹e_u16
(
cuº
);

354 
	`pkt_gë_u8
(
cuº
, &
lq
->
vÆueLq
);

355 
	`pkt_gë_u8
(
cuº
, &
lq
->
vÆueNlq
);

356 
	}
}

359 
	$deÁu…_lq_£rülize_tc_lq_∑ú_f„th
(*
buff
, *
±r
)

361 
deÁu…_lq_f„th
 *
lq
 = 
±r
;

363 
buff
[0] = ()(0);

364 
buff
[1] = ()(0);

365 
buff
[2] = ()
lq
->
vÆueLq
;

366 
buff
[3] = ()
lq
->
vÆueNlq
;

369 
	}
}

372 
	$deÁu…_lq_de£rülize_tc_lq_∑ú_f„th
(c⁄° 
uöt8_t
 ** 
cuº
, *
±r
)

374 
deÁu…_lq_f„th
 *
lq
 = 
±r
;

376 
	`pkt_ign‹e_u16
(
cuº
);

377 
	`pkt_gë_u8
(
cuº
, &
lq
->
vÆueLq
);

378 
	`pkt_gë_u8
(
cuº
, &
lq
->
vÆueNlq
);

379 
	}
}

382 
deÁu…_lq_∑ckë_loss_w‹kî_f„th
(
lök_íåy
 *
lök
,

383 
__©åibuã__
 ((
unu£d
)Ë*
±r
, 
boﬁ
 
lo°
)

385 
deÁu…_lq_f„th_hñlo
 *
	géq
 = (deÁu…_lq_f„th_hñlÿ*)
lök
->
lökquÆôy
;

387 i‡(
	glo°
) {

388 
	géq
->
	gmis£d_hñlos
++;

394 
	$deÁu…_lq_mem‹ize_f‹eign_hñlo_f„th
(*
±rLoˇl
, *
±rF‹eign
)

396 
deÁu…_lq_f„th_hñlo
 *
loˇl
 = 
±rLoˇl
;

397 
deÁu…_lq_f„th
 *
f‹eign
 = 
±rF‹eign
;

399 i‡(
f‹eign
) {

400 
loˇl
->
lq
.
vÆueNlq
 = 
f‹eign
->
vÆueLq
;

402 
loˇl
->
lq
.
vÆueNlq
 = 0;

404 
	}
}

407 
	$deÁu…_lq_c›y_lök2√igh_f„th
(*
t
, *
s
)

409 
deÁu…_lq_f„th
 *
èrgë
 = 
t
;

410 
deÁu…_lq_f„th_hñlo
 *
sour˚
 = 
s
;

411 *
èrgë
 = 
sour˚
->
smoŸhed_lq
;

412 
	}
}

415 
	$deÁu…_lq_c›y_lök2tc_f„th
(*
t
, *
s
)

417 
deÁu…_lq_f„th
 *
èrgë
 = 
t
;

418 
deÁu…_lq_f„th_hñlo
 *
sour˚
 = 
s
;

419 *
èrgë
 = 
sour˚
->
smoŸhed_lq
;

420 
	}
}

423 
	$deÁu…_lq_˛ór_f„th
(*
èrgë
)

425 
	`mem£t
(
èrgë
, 0, (
deÁu…_lq_f„th
));

426 
	}
}

429 
	$deÁu…_lq_˛ór_f„th_hñlo
(*
èrgë
)

431 
deÁu…_lq_f„th_hñlo
 *
loˇl
 = 
èrgë
;

432 
i
;

434 
	`deÁu…_lq_˛ór_f„th
(&
loˇl
->
lq
);

435 
	`deÁu…_lq_˛ór_f„th
(&
loˇl
->
smoŸhed_lq
);

436 
loˇl
->
wödowSize
 = 
LQ_FFETH_QUICKSTART_INIT
;

437 
i
 = 0; i < 
LQ_FFETH_WINDOW
; i++) {

438 
loˇl
->
tŸÆ
[
i
] = 3;

440 
	}
}

443 
	$deÁu…_lq_¥öt_f„th
(*
±r
, 
£∑øt‹
, 
lqãxtbuf„r
 *
buf„r
)

445 
deÁu…_lq_f„th
 *
lq
 = 
±r
;

446 
lq_öt
, 
∆q_öt
;

448 
lq_öt
 = ()
lq
->
vÆueLq
;

449 i‡(
lq_öt
 > 0 &&Üq_int < 255) {

450 
lq_öt
++;

453 
∆q_öt
 = ()
lq
->
vÆueNlq
;

454 i‡(
∆q_öt
 > 0 &&Çlq_int < 255) {

455 
∆q_öt
++;

458 
	`¢¥ötf
(
buf„r
->
buf
, (buf„r->buf), "%s%c%s", 
	`Âmtﬂ
(
	`Âmidiv
(
	`ôoÂm
(
lq_öt
), 255)), 
£∑øt‹
,

459 
	`Âmtﬂ
(
	`Âmidiv
(
	`ôoÂm
(
∆q_öt
), 255)));

460  
buf„r
->
buf
;

461 
	}
}

464 
	$deÁu…_lq_¥öt_co°_f„th
(
ﬁ§_lökco°
 
co°
, 
lqãxtbuf„r
 *
buf„r
)

466 
	`¢¥ötf
(
buf„r
->
buf
, (buf„r->buf), "%s", 
	`Âmtﬂ
(
co°
));

467  
buf„r
->
buf
;

468 
	}
}

	@src/lq_plugin_default_ffeth.h

42 #i‚de‡
LQ_ETX_FFETH_


43 
	#LQ_ETX_FFETH_


	)

45 
	~"ﬁ§_ty≥s.h
"

46 
	~"lq_∂ugö.h
"

48 
	#LQ_ALGORITHM_ETX_FFETH_NAME
 "ëx_f„th"

	)

50 
	#LQ_FFETH_WINDOW
 32

	)

51 
	#LQ_FFETH_QUICKSTART_INIT
 4

	)

53 
	sdeÁu…_lq_f„th
 {

54 
uöt8_t
 
	mvÆueLq
;

55 
uöt8_t
 
	mvÆueNlq
;

58 
	sdeÁu…_lq_f„th_hñlo
 {

59 
deÁu…_lq_f„th
 
	msmoŸhed_lq
;

60 
deÁu…_lq_f„th
 
	mlq
;

61 
uöt8_t
 
	mwödowSize
, 
	ma˘ivePå
;

62 
uöt16_t
 
	mœ°_£q_ƒ
;

63 
uöt16_t
 
	mmis£d_hñlos
;

64 
boﬁ
 
	m≥r„˘_ëh
;

65 
uöt16_t
 
	mª˚ived
[
LQ_FFETH_WINDOW
], 
	mtŸÆ
[LQ_FFETH_WINDOW];

68 
lq_h™dÀr
 
lq_ëx_f„th_h™dÀr
;

	@src/lq_plugin_default_float.c

42 
	~"tc_£t.h
"

43 
	~"lök_£t.h
"

44 
	~"ﬁ§_•f.h
"

45 
	~"lq_∑ckë.h
"

46 
	~"∑ckë.h
"

47 
	~"ﬁ§.h
"

48 
	~"lq_∂ugö_deÁu…_Êﬂt.h
"

50 
deÁu…_lq_öôülize_Êﬂt
();

51 
ﬁ§_lökco°
 
deÁu…_lq_ˇlc_co°_Êﬂt
(c⁄° *
lq
);

52 
deÁu…_lq_∑ckë_loss_w‹kî_Êﬂt
(
lök_íåy
 *
lök
, *
lq
, 
boﬁ
 
lo°
);

53 
deÁu…_lq_mem‹ize_f‹eign_hñlo_Êﬂt
(*
loˇl
, *
f‹eign
);

54 
deÁu…_lq_£rülize_hñlo_lq_∑ú_Êﬂt
(*
buff
, *
lq
);

55 
deÁu…_lq_de£rülize_hñlo_lq_∑ú_Êﬂt
(c⁄° 
uöt8_t
 ** 
cuº
, *
lq
);

56 
deÁu…_lq_£rülize_tc_lq_∑ú_Êﬂt
(*
buff
, *
lq
);

57 
deÁu…_lq_de£rülize_tc_lq_∑ú_Êﬂt
(c⁄° 
uöt8_t
 ** 
cuº
, *
lq
);

58 
deÁu…_lq_c›y_lök2tc_Êﬂt
(*
èrgë
, *
sour˚
);

59 
deÁu…_lq_˛ór_Êﬂt
(*
èrgë
);

60 c⁄° *
deÁu…_lq_¥öt_Êﬂt
(*
±r
, 
£∑øt‹
, 
lqãxtbuf„r
 *
buf„r
);

61 c⁄° *
deÁu…_lq_¥öt_co°_Êﬂt
(
ﬁ§_lökco°
 
co°
, 
lqãxtbuf„r
 *
buf„r
);

65 
lq_h™dÀr
 
	glq_ëx_Êﬂt_h™dÀr
 = {

66 &
deÁu…_lq_öôülize_Êﬂt
,

68 &
deÁu…_lq_ˇlc_co°_Êﬂt
,

69 &
deÁu…_lq_ˇlc_co°_Êﬂt
,

71 &
deÁu…_lq_∑ckë_loss_w‹kî_Êﬂt
,

72 &
deÁu…_lq_mem‹ize_f‹eign_hñlo_Êﬂt
,

73 &
deÁu…_lq_c›y_lök2tc_Êﬂt
,

74 &
deÁu…_lq_c›y_lök2tc_Êﬂt
,

75 &
deÁu…_lq_˛ór_Êﬂt
,

76 &
deÁu…_lq_˛ór_Êﬂt
,

78 &
deÁu…_lq_£rülize_hñlo_lq_∑ú_Êﬂt
,

79 &
deÁu…_lq_£rülize_tc_lq_∑ú_Êﬂt
,

80 &
deÁu…_lq_de£rülize_hñlo_lq_∑ú_Êﬂt
,

81 &
deÁu…_lq_de£rülize_tc_lq_∑ú_Êﬂt
,

83 &
deÁu…_lq_¥öt_Êﬂt
,

84 &
deÁu…_lq_¥öt_Êﬂt
,

85 &
deÁu…_lq_¥öt_co°_Êﬂt
,

87 (
deÁu…_lq_Êﬂt
),

88 (
deÁu…_lq_Êﬂt
),

94 
	$deÁu…_lq_öôülize_Êﬂt
()

97 
	}
}

99 
ﬁ§_lökco°


100 
	$deÁu…_lq_ˇlc_co°_Êﬂt
(c⁄° *
±r
)

102 c⁄° 
deÁu…_lq_Êﬂt
 *
lq
 = 
±r
;

103 
ﬁ§_lökco°
 
co°
;

105 i‡(
lq
->lq < 
MINIMAL_USEFUL_LQ
 ||Üq->
∆q
 < MINIMAL_USEFUL_LQ) {

106  
LINK_COST_BROKEN
;

109 
co°
 = (
ﬁ§_lökco°
Ë(1.0 / (
lq
->lq *Üq->
∆q
Ë* 
LQ_PLUGIN_LC_MULTIPLIER
);

111 i‡(
co°
 > 
LINK_COST_BROKEN
)

112  
LINK_COST_BROKEN
;

113 i‡(
co°
 == 0) {

116  
co°
;

117 
	}
}

120 
	$deÁu…_lq_£rülize_hñlo_lq_∑ú_Êﬂt
(*
buff
, *
±r
)

122 
deÁu…_lq_Êﬂt
 *
lq
 = 
±r
;

124 
buff
[0] = ()(
lq
->lq * 255);

125 
buff
[1] = ()(
lq
->
∆q
 * 255);

126 
buff
[2] = 0;

127 
buff
[3] = 0;

130 
	}
}

133 
	$deÁu…_lq_de£rülize_hñlo_lq_∑ú_Êﬂt
(c⁄° 
uöt8_t
 ** 
cuº
, *
±r
)

135 
deÁu…_lq_Êﬂt
 *
lq
 = 
±r
;

136 
uöt8_t
 
lq_vÆue
, 
∆q_vÆue
;

138 
	`pkt_gë_u8
(
cuº
, &
lq_vÆue
);

139 
	`pkt_gë_u8
(
cuº
, &
∆q_vÆue
);

140 
	`pkt_ign‹e_u16
(
cuº
);

142 
lq
->lq = ()
lq_vÆue
 / 255.0;

143 
lq
->
∆q
 = ()
∆q_vÆue
 / 255.0;

144 
	}
}

147 
	$deÁu…_lq_£rülize_tc_lq_∑ú_Êﬂt
(*
buff
, *
±r
)

149 
deÁu…_lq_Êﬂt
 *
lq
 = 
±r
;

151 
buff
[0] = ()(
lq
->lq * 255);

152 
buff
[1] = ()(
lq
->
∆q
 * 255);

153 
buff
[2] = 0;

154 
buff
[3] = 0;

157 
	}
}

160 
	$deÁu…_lq_de£rülize_tc_lq_∑ú_Êﬂt
(c⁄° 
uöt8_t
 ** 
cuº
, *
±r
)

162 
deÁu…_lq_Êﬂt
 *
lq
 = 
±r
;

163 
uöt8_t
 
lq_vÆue
, 
∆q_vÆue
;

165 
	`pkt_gë_u8
(
cuº
, &
lq_vÆue
);

166 
	`pkt_gë_u8
(
cuº
, &
∆q_vÆue
);

167 
	`pkt_ign‹e_u16
(
cuº
);

169 
lq
->lq = ()
lq_vÆue
 / 255.0;

170 
lq
->
∆q
 = ()
∆q_vÆue
 / 255.0;

171 
	}
}

174 
	$deÁu…_lq_∑ckë_loss_w‹kî_Êﬂt
(
lök_íåy
 *
lök
, *
±r
, 
boﬁ
 
lo°
)

176 
deÁu…_lq_Êﬂt
 *
éq
 = 
±r
;

177 
Æpha
 = 
ﬁ§_˙f
->
lq_agög
;

179 i‡(
éq
->
quick°¨t
 < 
LQ_QUICKSTART_STEPS
) {

180 
Æpha
 = 
LQ_QUICKSTART_AGING
;

181 
éq
->
quick°¨t
++;

184 
éq
->
lq
 *(1 - 
Æpha
);

185 i‡(
lo°
 == 0) {

186 
éq
->
lq
 +(
Æpha
 * 
lök
->
loss_lök_mu…ùlõr
 / 65536);

188 
lök
->
lökco°
 = 
	`deÁu…_lq_ˇlc_co°_Êﬂt
(
±r
);

189 
	`ﬁ§_ªÀv™t_lökco°_ch™ge
();

190 
	}
}

193 
	$deÁu…_lq_mem‹ize_f‹eign_hñlo_Êﬂt
(*
±rLoˇl
, *
±rF‹eign
)

195 
deÁu…_lq_Êﬂt
 *
loˇl
 = 
±rLoˇl
;

196 
deÁu…_lq_Êﬂt
 *
f‹eign
 = 
±rF‹eign
;

198 i‡(
f‹eign
) {

199 
loˇl
->
∆q
 = 
f‹eign
->
lq
;

201 
loˇl
->
∆q
 = 0;

203 
	}
}

206 
	$deÁu…_lq_c›y_lök2tc_Êﬂt
(*
èrgë
, *
sour˚
)

208 
	`mem˝y
(
èrgë
, 
sour˚
, (
deÁu…_lq_Êﬂt
));

209 
	}
}

212 
	$deÁu…_lq_˛ór_Êﬂt
(*
èrgë
)

214 
	`mem£t
(
èrgë
, 0, (
deÁu…_lq_Êﬂt
));

215 
	}
}

218 
	$deÁu…_lq_¥öt_Êﬂt
(*
±r
, 
£∑øt‹
, 
lqãxtbuf„r
 *
buf„r
)

220 
deÁu…_lq_Êﬂt
 *
lq
 = 
±r
;

222 
	`¢¥ötf
(
buf„r
->
buf
, (
lqãxtbuf„r
), "%2.3f%c%2.3f", 
lq
->lq, 
£∑øt‹
,Üq->
∆q
);

223  
buf„r
->
buf
;

224 
	}
}

227 
	$deÁu…_lq_¥öt_co°_Êﬂt
(
ﬁ§_lökco°
 
co°
, 
lqãxtbuf„r
 *
buf„r
)

229 
	`¢¥ötf
(
buf„r
->
buf
, (
lqãxtbuf„r
), "%2.3f", (()
co°
Ë/ 
LQ_PLUGIN_LC_MULTIPLIER
);

231  
buf„r
->
buf
;

232 
	}
}

	@src/lq_plugin_default_float.h

42 #i‚de‡
LQ_PLUGIN_DEFAULT_H_


43 
	#LQ_PLUGIN_DEFAULT_H_


	)

45 
	~"ﬁ§_ty≥s.h
"

46 
	~"lq_∂ugö.h
"

48 
	#LQ_ALGORITHM_ETX_FLOAT_NAME
 "ëx_Êﬂt"

	)

50 
	#LQ_PLUGIN_LC_MULTIPLIER
 1024

	)

52 
	sdeÁu…_lq_Êﬂt
 {

53 
	mlq
, 
	m∆q
;

54 
uöt16_t
 
	mquick°¨t
;

57 
lq_h™dÀr
 
lq_ëx_Êﬂt_h™dÀr
;

	@src/lq_plugin_default_fpm.c

42 
	~"tc_£t.h
"

43 
	~"lök_£t.h
"

44 
	~"lq_∂ugö.h
"

45 
	~"ﬁ§_•f.h
"

46 
	~"lq_∑ckë.h
"

47 
	~"∑ckë.h
"

48 
	~"ﬁ§.h
"

49 
	~"lq_∂ugö_deÁu…_Âm.h
"

51 
deÁu…_lq_öôülize_Âm
();

52 
ﬁ§_lökco°
 
deÁu…_lq_ˇlc_co°_Âm
(c⁄° *
lq
);

53 
deÁu…_lq_∑ckë_loss_w‹kî_Âm
(
lök_íåy
 *
lök
, *
lq
, 
boﬁ
 
lo°
);

54 
deÁu…_lq_mem‹ize_f‹eign_hñlo_Âm
(*
loˇl
, *
f‹eign
);

55 
deÁu…_lq_£rülize_hñlo_lq_∑ú_Âm
(*
buff
, *
lq
);

56 
deÁu…_lq_de£rülize_hñlo_lq_∑ú_Âm
(c⁄° 
uöt8_t
 ** 
cuº
, *
lq
);

57 
deÁu…_lq_£rülize_tc_lq_∑ú_Âm
(*
buff
, *
lq
);

58 
deÁu…_lq_de£rülize_tc_lq_∑ú_Âm
(c⁄° 
uöt8_t
 ** 
cuº
, *
lq
);

59 
deÁu…_lq_c›y_lök2tc_Âm
(*
èrgë
, *
sour˚
);

60 
deÁu…_lq_˛ór_Âm
(*
èrgë
);

61 c⁄° *
deÁu…_lq_¥öt_Âm
(*
±r
, 
£∑øt‹
, 
lqãxtbuf„r
 *
buf„r
);

62 c⁄° *
deÁu…_lq_¥öt_co°_Âm
(
ﬁ§_lökco°
 
co°
, 
lqãxtbuf„r
 *
buf„r
);

66 
lq_h™dÀr
 
	glq_ëx_Âm_h™dÀr
 = {

67 &
deÁu…_lq_öôülize_Âm
,

69 &
deÁu…_lq_ˇlc_co°_Âm
,

70 &
deÁu…_lq_ˇlc_co°_Âm
,

72 &
deÁu…_lq_∑ckë_loss_w‹kî_Âm
,

73 &
deÁu…_lq_mem‹ize_f‹eign_hñlo_Âm
,

74 &
deÁu…_lq_c›y_lök2tc_Âm
,

75 &
deÁu…_lq_c›y_lök2tc_Âm
,

76 &
deÁu…_lq_˛ór_Âm
,

77 &
deÁu…_lq_˛ór_Âm
,

79 &
deÁu…_lq_£rülize_hñlo_lq_∑ú_Âm
,

80 &
deÁu…_lq_£rülize_tc_lq_∑ú_Âm
,

81 &
deÁu…_lq_de£rülize_hñlo_lq_∑ú_Âm
,

82 &
deÁu…_lq_de£rülize_tc_lq_∑ú_Âm
,

84 &
deÁu…_lq_¥öt_Âm
,

85 &
deÁu…_lq_¥öt_Âm
,

86 &
deÁu…_lq_¥öt_co°_Âm
,

88 (
deÁu…_lq_Âm
),

89 (
deÁu…_lq_Âm
),

94 
uöt32_t
 
	gagög_Á˘‹_√w
, 
	gagög_Á˘‹_ﬁd
;

95 
uöt32_t
 
	gagög_quick°¨t_√w
, 
	gagög_quick°¨t_ﬁd
;

98 
	$deÁu…_lq_öôülize_Âm
()

100 
agög_Á˘‹_√w
 = (
uöt32_t
Ë(
ﬁ§_˙f
->
lq_agög
 * 
LQ_FPM_INTERNAL_MULTIPLIER
);

101 
agög_Á˘‹_ﬁd
 = 
LQ_FPM_INTERNAL_MULTIPLIER
 - 
agög_Á˘‹_√w
;

103 
agög_quick°¨t_√w
 = (
uöt32_t
Ë(
LQ_QUICKSTART_AGING
 * 
LQ_FPM_INTERNAL_MULTIPLIER
);

104 
agög_quick°¨t_ﬁd
 = 
LQ_FPM_INTERNAL_MULTIPLIER
 - 
agög_quick°¨t_√w
;

105 
	}
}

107 
ﬁ§_lökco°


108 
	$deÁu…_lq_ˇlc_co°_Âm
(c⁄° *
±r
)

110 c⁄° 
deÁu…_lq_Âm
 *
lq
 = 
±r
;

111 
ﬁ§_lökco°
 
co°
;

113 i‡(
lq
->
vÆueLq
 < ()(255 * 
MINIMAL_USEFUL_LQ
Ë||Üq->
vÆueNlq
 < ()(255 * MINIMAL_USEFUL_LQ)) {

114  
LINK_COST_BROKEN
;

117 
co°
 = 
LQ_FPM_LINKCOST_MULTIPLIER
 * 255 / ()
lq
->
vÆueLq
 * 255 / (Óq->
vÆueNlq
;

119 i‡(
co°
 > 
LINK_COST_BROKEN
)

120  
LINK_COST_BROKEN
;

121 i‡(
co°
 == 0)

123  
co°
;

124 
	}
}

127 
	$deÁu…_lq_£rülize_hñlo_lq_∑ú_Âm
(*
buff
, *
±r
)

129 
deÁu…_lq_Âm
 *
lq
 = 
±r
;

131 
buff
[0] = ()
lq
->
vÆueLq
;

132 
buff
[1] = ()
lq
->
vÆueNlq
;

133 
buff
[2] = ()(0);

134 
buff
[3] = ()(0);

137 
	}
}

140 
	$deÁu…_lq_de£rülize_hñlo_lq_∑ú_Âm
(c⁄° 
uöt8_t
 ** 
cuº
, *
±r
)

142 
deÁu…_lq_Âm
 *
lq
 = 
±r
;

144 
	`pkt_gë_u8
(
cuº
, &
lq
->
vÆueLq
);

145 
	`pkt_gë_u8
(
cuº
, &
lq
->
vÆueNlq
);

146 
	`pkt_ign‹e_u16
(
cuº
);

147 
	}
}

150 
	$deÁu…_lq_£rülize_tc_lq_∑ú_Âm
(*
buff
, *
±r
)

152 
deÁu…_lq_Âm
 *
lq
 = 
±r
;

154 
buff
[0] = ()
lq
->
vÆueLq
;

155 
buff
[1] = ()
lq
->
vÆueNlq
;

156 
buff
[2] = ()(0);

157 
buff
[3] = ()(0);

160 
	}
}

163 
	$deÁu…_lq_de£rülize_tc_lq_∑ú_Âm
(c⁄° 
uöt8_t
 ** 
cuº
, *
±r
)

165 
deÁu…_lq_Âm
 *
lq
 = 
±r
;

167 
	`pkt_gë_u8
(
cuº
, &
lq
->
vÆueLq
);

168 
	`pkt_gë_u8
(
cuº
, &
lq
->
vÆueNlq
);

169 
	`pkt_ign‹e_u16
(
cuº
);

170 
	}
}

173 
deÁu…_lq_∑ckë_loss_w‹kî_Âm
(
lök_íåy
 *
lök
 
__©åibuã__
 ((
unu£d
)), *
±r
, 
boﬁ
 
lo°
)

175 
deÁu…_lq_Âm
 *
	géq
 = 
±r
;

176 
uöt32_t
 
	gÆpha_ﬁd
 = 
agög_Á˘‹_ﬁd
;

177 
uöt32_t
 
	gÆpha_√w
 = 
agög_Á˘‹_√w
;

179 
uöt32_t
 
	gvÆue
;

181 i‡(
	géq
->
	gquick°¨t
 < 
	gLQ_QUICKSTART_STEPS
) {

182 
	gÆpha_√w
 = 
agög_quick°¨t_√w
;

183 
	gÆpha_ﬁd
 = 
agög_quick°¨t_ﬁd
;

184 
	géq
->
	gquick°¨t
++;

187 
	gvÆue
 = (
uöt32_t
Ë(
éq
->
vÆueLq
Ë* 
LQ_FPM_INTERNAL_MULTIPLIER
 / 255;

189 
	gvÆue
 = (
vÆue
 * 
Æpha_ﬁd
 + 
LQ_FPM_INTERNAL_MULTIPLIER
 - 1) / LQ_FPM_INTERNAL_MULTIPLIER;

191 i‡(!
	glo°
) {

192 
uöt32_t
 
	gøtio
;

194 
	gøtio
 = (
Æpha_√w
 * 
lök
->
loss_lök_mu…ùlõr
 + 
LINK_LOSS_MULTIPLIER
 - 1) / LINK_LOSS_MULTIPLIER;

195 
	gvÆue
 +
øtio
;

197 
	géq
->
	gvÆueLq
 = (
vÆue
 * 255 + 
LQ_FPM_INTERNAL_MULTIPLIER
 - 1) / LQ_FPM_INTERNAL_MULTIPLIER;

199 
	glök
->
	glökco°
 = 
deÁu…_lq_ˇlc_co°_Âm
(
±r
);

200 
ﬁ§_ªÀv™t_lökco°_ch™ge
();

204 
	$deÁu…_lq_mem‹ize_f‹eign_hñlo_Âm
(*
±rLoˇl
, *
±rF‹eign
)

206 
deÁu…_lq_Âm
 *
loˇl
 = 
±rLoˇl
;

207 
deÁu…_lq_Âm
 *
f‹eign
 = 
±rF‹eign
;

209 i‡(
f‹eign
) {

210 
loˇl
->
vÆueNlq
 = 
f‹eign
->
vÆueLq
;

212 
loˇl
->
vÆueNlq
 = 0;

214 
	}
}

217 
	$deÁu…_lq_c›y_lök2tc_Âm
(*
èrgë
, *
sour˚
)

219 
	`mem˝y
(
èrgë
, 
sour˚
, (
deÁu…_lq_Âm
));

220 
	}
}

223 
	$deÁu…_lq_˛ór_Âm
(*
èrgë
)

225 
	`mem£t
(
èrgë
, 0, (
deÁu…_lq_Âm
));

226 
	}
}

229 
	$deÁu…_lq_¥öt_Âm
(*
±r
, 
£∑øt‹
, 
lqãxtbuf„r
 *
buf„r
)

231 
deÁu…_lq_Âm
 *
lq
 = 
±r
;

233 
	`¢¥ötf
(
buf„r
->
buf
, (buf„r->buf), "%0.3f%c%0.3f", ()(
lq
->
vÆueLq
Ë/ 255.0, 
£∑øt‹
,

234 ()(
lq
->
vÆueNlq
) / 255.0);

235  
buf„r
->
buf
;

236 
	}
}

239 
	$deÁu…_lq_¥öt_co°_Âm
(
ﬁ§_lökco°
 
co°
, 
lqãxtbuf„r
 *
buf„r
)

241 
	`¢¥ötf
(
buf„r
->
buf
, (buf„r->buf), "%.3f", ()(
co°
Ë/ 
LQ_FPM_LINKCOST_MULTIPLIER
);

242  
buf„r
->
buf
;

243 
	}
}

	@src/lq_plugin_default_fpm.h

42 #i‚de‡
LQ_ETX_FPM_


43 
	#LQ_ETX_FPM_


	)

45 
	~"ﬁ§_ty≥s.h
"

46 
	~"lq_∂ugö.h
"

50 
	#LQ_FPM_INTERNAL_MULTIPLIER
 65535

	)

51 
	#LQ_FPM_LINKCOST_MULTIPLIER
 65535

	)

53 
	#LQ_ALGORITHM_ETX_FPM_NAME
 "ëx_Âm"

	)

55 
	sdeÁu…_lq_Âm
 {

56 
uöt8_t
 
	mvÆueLq
;

57 
uöt8_t
 
	mvÆueNlq
;

58 
uöt16_t
 
	mquick°¨t
;

61 
lq_h™dÀr
 
lq_ëx_Âm_h™dÀr
;

	@src/main.c

41 
	~<uni°d.h
>

42 
	~<sig«l.h
>

43 
	~<sys/°©.h
>

44 
	~<as£π.h
>

45 
	~<f˙é.h
>

47 
	~"ùˇlc.h
"

48 
	~"defs.h
"

49 
	~"ﬁ§.h
"

50 
	~"log.h
"

51 
	~"scheduÀr.h
"

52 
	~"∑r£r.h
"

53 
	~"gíî©e_msg.h
"

54 
	~"∂ugö_lﬂdî.h
"

55 
	~"≠m.h
"

56 
	~"√t_os.h
"

57 
	~"buûd_msg.h
"

58 
	~"√t_ﬁ§.h
"

59 
	~"mid_£t.h
"

60 
	~"m¥_£À˘‹_£t.h
"

61 
	~"g©eway.h
"

62 
	~"ﬁ§_niô.h
"

64 #ifde‡
LINUX_NETLINK_ROUTING


65 
	~<löux/ty≥s.h
>

66 
	~<löux/π√éök.h
>

67 
	~"kî√l_rouãs.h
"

71 #ifde‡
WIN32


72 
	~<wöba£.h
>

73 
	#˛o£
(
x
Ë
	`˛o£sockë
(x)

	)

74 
__°dˇŒ
 
	$Sig«lH™dÀr
(
signo
Ë
	`__©åibuã__
 ((
n‹ëu∫
));

75 
	`Li°I¡îÁ˚s
();

76 
	`DißbÀIcmpRedúe˘s
();

77 
boﬁ
 
ﬁ§_wö32_íd_ªque°
 = 
Ál£
;

78 
boﬁ
 
ﬁ§_wö32_íd_Êag
 = 
Ál£
;

80 
	$ﬁ§_shutdown
(Ë
	`__©åibuã__
 ((
n‹ëu∫
));

83 #i‡
deföed
 
™droid


84 
	#DEFAULT_LOCKFILE_PREFIX
 "/d©a/loˇl/ﬁ§d"

	)

85 #ñi‡
deföed
 
löux
 || 
__FªeBSD__
 || deföed 
__NëBSD__
 || deföed 
__O≥nBSD__


86 
	#DEFAULT_LOCKFILE_PREFIX
 "/v¨/run/ﬁ§d"

	)

87 #ñi‡
deföed
 
WIN32


88 
	#DEFAULT_LOCKFILE_PREFIX
 "C:\\ﬁ§d"

	)

90 
	#DEFAULT_LOCKFILE_PREFIX
 "ﬁ§d"

	)

96 
	$ﬁ§_ªc⁄figuª
(Ë
	`__©åibuã__
 ((
n‹ëu∫
));

98 
	`¥öt_ußge
(
boﬁ
 
îr‹
);

100 
	`£t_deÁu…_if˙fs
(
ﬁ§_if
 *, 
if_c⁄fig_›ti⁄s
 *);

102 
	`ﬁ§_¥o˚ss_¨gumíts
(, *[], 
ﬁ§d_c⁄fig
 *,

103 
if_c⁄fig_›ti⁄s
 *);

105 #i‚de‡
WIN32


106 **
ﬁ§_¨gv
;

110 
c›yright_°rög
[] 
	`__©åibuã__
 ((
unu£d
)) =

114 #i‚de‡
WIN32


115 
lock_fd
 = 0;

117 
lock_fûe_«me
[
FILENAME_MAX
];

118 
ﬁ§_cookõ_öfo
 *
def_timî_ci
 = 
NULL
;

129 
	$ﬁ§_¸óã_lock_fûe
(
boﬁ
 
noExôOnFaû
) {

130 #ifde‡
WIN32


131 
boﬁ
 
suc˚ss
;

132 
HANDLE
 
lck
, 
lock
;

134 
lck
 = 
	`Cª©eFûe
(
lock_fûe_«me
,

135 
GENERIC_READ
 | 
GENERIC_WRITE
,

136 
FILE_SHARE_READ
 | 
FILE_SHARE_WRITE
,

137 
NULL
,

138 
OPEN_ALWAYS
,

139 
FILE_ATTRIBUTE_NORMAL
 |

140 
FILE_FLAG_DELETE_ON_CLOSE
,

141 
NULL
);

142 
lock
 = 
	`Cª©eEvít
(
NULL
, 
TRUE
, 
FALSE
, 
lock_fûe_«me
);

143 i‡(
INVALID_HANDLE_VALUE
 =
lck
 || 
ERROR_ALREADY_EXISTS
 =
	`GëLa°Eº‹
()) {

144 i‡(
noExôOnFaû
) {

147 i‡(
NULL
 =
lck
) {

148 
	`Ârötf
(
°dîr
,

150 
lock_fûe_«me
);

152 
	`Clo£H™dÀ
(
lck
);

153 
	`Ârötf
(
°dîr
,

156 
lock_fûe_«me
);

158 
	`ﬁ§_exô
("", 
EXIT_FAILURE
);

161 
suc˚ss
 = 
	`LockFûe
–
lck
, 0, 0, 0, 0);

163 i‡(!
suc˚ss
) {

164 
	`Clo£H™dÀ
(
lck
);

165 i‡(
noExôOnFaû
) {

168 
	`Ârötf
(
°dîr
,

171 
lock_fûe_«me
);

172 
	`ﬁ§_exô
("", 
EXIT_FAILURE
);

176 
Êock
 
lck
;

179 
lock_fd
 = 
	`›í
(
lock_fûe_«me
, 
O_WRONLY
 | 
O_CREAT
, 
S_IRWXU
);

180 i‡(
lock_fd
 == 0) {

181 i‡(
noExôOnFaû
) {

184 
	`Ârötf
(
°dîr
,

186 
lock_fûe_«me
);

187 
	`ﬁ§_exô
("", 
EXIT_FAILURE
);

191 
lck
.
l_ty≥
 = 
F_WRLCK
;

192 
lck
.
l_whí˚
 = 
SEEK_SET
;

193 
lck
.
l_°¨t
 = 0;

194 
lck
.
l_Àn
 = 0;

195 
lck
.
l_pid
 = 0;

197 i‡(
	`f˙é
(
lock_fd
, 
F_SETLK
, &
lck
) == -1) {

198 
	`˛o£
(
lock_fd
);

199 i‡(
noExôOnFaû
) {

202 
	`Ârötf
(
°dîr
,

205 
lock_fûe_«me
);

206 
	`ﬁ§_exô
("", 
EXIT_FAILURE
);

210 
	}
}

217 
	$ﬁ§maö_lﬂd_c⁄fig
(*
fûe
) {

218 
°©
 
°©buf
;

220 i‡(
	`°©
(
fûe
, &
°©buf
) < 0) {

221 
	`Ârötf
(
°dîr
, "CouldÇot find specified config file %s!\n%s\n\n",

222 
fûe
, 
	`°ªº‹
(
î∫o
));

226 i‡(
	`ﬁ§d_∑r£_˙f
(
fûe
) < 0) {

227 
	`Ârötf
(
°dîr
, "Eº‹ whûêªadög c⁄fig fûê%s!\n", 
fûe
);

231 
	}
}

237 
	$maö
(
¨gc
, *
¨gv
[]) {

238 
if_c⁄fig_›ti⁄s
 *
deÁu…_if˙f
;

239 
c⁄f_fûe_«me
[
FILENAME_MAX
];

240 
ùaddr_°r
 
buf
;

241 
boﬁ
 
lﬂdedC⁄fig
 = 
Ál£
;

242 
i
;

244 #ifde‡
LINUX_NETLINK_ROUTING


245 
öãrÁ˚
 *
i‚
;

248 #ifde‡
WIN32


249 
WSADATA
 
WßD©a
;

250 
size_t
 
Àn
;

254 
	`as£π
((
uöt8_t
) == 1);

255 
	`as£π
((
uöt16_t
) == 2);

256 
	`as£π
((
uöt32_t
) == 4);

257 
	`as£π
((
öt8_t
) == 1);

258 
	`as£π
((
öt16_t
) == 2);

259 
	`as£π
((
öt32_t
) == 4);

261 
	`¥ötf
("\n *** %s ***\n Build date: %s on %s\n http://www.olsr.org\n\n",

262 
ﬁ§d_vîsi⁄
, 
buûd_d©e
, 
buûd_ho°
);

264 i‡(
¨gc
 == 2) {

265 i‡(
	`°rcmp
(
¨gv
[1], "-h") == 0 || strcmp(argv[1], "/?") == 0) {

266 
	`¥öt_ußge
(
Ál£
);

267 
	`exô
(0);

269 i‡(
	`°rcmp
(
¨gv
[1], "-v") == 0) {

270 
	`exô
(0);

274 
debug_h™dÀ
 = 
°dout
;

275 #i‚de‡
WIN32


276 
ﬁ§_¨gv
 = 
¨gv
;

278 
	`£tbuf
(
°dout
, 
NULL
);

279 
	`£tbuf
(
°dîr
, 
NULL
);

281 #i‚de‡
WIN32


283 i‡(
	`gëeuid
()) {

284 
	`Ârötf
(
°dîr
, "You must beÑoot(uid = 0)ÅoÑun olsrd!\nExiting\n\n");

285 
	`exô
(
EXIT_FAILURE
);

288 
	`DißbÀIcmpRedúe˘s
();

290 i‡(
	`WSASèπup
(0x0202, &
WßD©a
)) {

291 
	`Ârötf
(
°dîr
, "CouldÇot initialize WinSock.\n");

292 
	`ﬁ§_exô
(
__func__
, 
EXIT_FAILURE
);

297 
	`ﬁ§_›ílog
("olsrd");

300 
	`§™dom
(
	`gëpid
());

303 
	`mem£t
(&
Æl_zîo
, 0, (
ﬁ§_ù_addr
));

309 #ifde‡
WIN32


310 #i‚de‡
WINCE


311 
	`GëWödowsDúe˘‹y
(
c⁄f_fûe_«me
, 
FILENAME_MAX
 - 11);

313 
c⁄f_fûe_«me
[0] = 0;

316 
Àn
 = 
	`°æí
(
c⁄f_fûe_«me
);

318 i‡(
Àn
 =0 || 
c⁄f_fûe_«me
[len - 1] != '\\')

319 
c⁄f_fûe_«me
[
Àn
++] = '\\';

321 
	`°rs˝y
(
c⁄f_fûe_«me
 + 
Àn
, "olsrd.conf", (conf_file_name) -Üen);

323 
	`°rs˝y
(
c⁄f_fûe_«me
, 
OLSRD_GLOBAL_CONF_FILE
, (conf_file_name));

326 
ﬁ§_˙f
 = 
	`ﬁ§d_gë_deÁu…_˙f
();

327 
i
=1; i < 
¨gc
-1;) {

328 i‡(
	`°rcmp
(
¨gv
[
i
], "-f") == 0) {

329 
lﬂdedC⁄fig
 = 
åue
;

331 i‡(
	`ﬁ§maö_lﬂd_c⁄fig
(
¨gv
[
i
+1]) < 0) {

332 
	`exô
(
EXIT_FAILURE
);

335 i‡(
i
+2 < 
¨gc
) {

336 
	`memmove
(&
¨gv
[
i
], &¨gv[i+2], (*¨gvË* (
¨gc
-i-1));

338 
¨gc
 -= 2;

341 
i
++;

348 i‡(!
lﬂdedC⁄fig
 && 
	`ﬁ§maö_lﬂd_c⁄fig
(
c⁄f_fûe_«me
) == 0) {

349 
lﬂdedC⁄fig
 = 
åue
;

352 i‡(!
lﬂdedC⁄fig
) {

353 
	`ﬁ§d_‰ì_˙f
(
ﬁ§_˙f
);

354 
ﬁ§_˙f
 = 
	`ﬁ§d_gë_deÁu…_˙f
();

357 
deÁu…_if˙f
 = 
	`gë_deÁu…_if_c⁄fig
();

358 i‡(
deÁu…_if˙f
 =
NULL
) {

359 
	`Ârötf
(
°dîr
, "No default ifconfig found!\n");

360 
	`exô
(
EXIT_FAILURE
);

364 
	`ﬁ§_öô_timîs
();

369 i‡(
	`ﬁ§_¥o˚ss_¨gumíts
(
¨gc
, 
¨gv
, 
ﬁ§_˙f
, 
deÁu…_if˙f
) < 0) {

370 
	`¥öt_ußge
(
åue
);

371 
	`ﬁ§_exô
(
__func__
, 
EXIT_FAILURE
);

377 
	`£t_deÁu…_if˙fs
(
ﬁ§_˙f
->
öãrÁ˚s
, 
deÁu…_if˙f
);

380 
	`‰ì
(
deÁu…_if˙f
);

383 i‡(
	`ﬁ§d_ßnôy_check_˙f
(
ﬁ§_˙f
) < 0) {

384 
	`Ârötf
(
°dîr
, "Bad configuration!\n");

385 
	`ﬁ§_exô
(
__func__
, 
EXIT_FAILURE
);

391 i‡(
ﬁ§_˙f
->
lock_fûe
) {

392 
	`°rs˝y
(
lock_fûe_«me
, 
ﬁ§_˙f
->
lock_fûe
, (lock_file_name));

394 
size_t
 
l
;

395 #ifde‡
DEFAULT_LOCKFILE_PREFIX


396 
	`°rs˝y
(
lock_fûe_«me
, 
DEFAULT_LOCKFILE_PREFIX
, (lock_file_name));

398 
	`°rs˝y
(
lock_fûe_«me
, 
c⁄f_fûe_«me
, (lock_file_name));

400 
l
 = 
	`°æí
(
lock_fûe_«me
);

401 
	`¢¥ötf
(&
lock_fûe_«me
[
l
], (lock_file_name) -Ü, "-ipv%d.lock",

402 
ﬁ§_˙f
->
ù_vîsi⁄
 =
AF_INET
 ? 4 : 6);

408 i‡(
ﬁ§_˙f
->
debug_Àvñ
 > 1) {

409 
	`ﬁ§d_¥öt_˙f
(
ﬁ§_˙f
);

412 
def_timî_ci
 = 
	`ﬁ§_Æloc_cookõ
("DeÁu… Timî Cookõ", 
OLSR_COOKIE_TYPE_TIMER
);

417 
ﬁ§_˙f
->
io˘l_s
 = 
	`sockë
(ﬁ§_˙f->
ù_vîsi⁄
, 
SOCK_DGRAM
, 0);

418 i‡(
ﬁ§_˙f
->
io˘l_s
 < 0) {

419 #i‚de‡
WIN32


420 
	`ﬁ§_sy¶og
(
OLSR_LOG_ERR
, "ioctl socket: %m");

422 
	`ﬁ§_exô
(
__func__
, 0);

424 #ifde‡
LINUX_NETLINK_ROUTING


425 
ﬁ§_˙f
->
π∆_s
 = 
	`sockë
(
PF_NETLINK
, 
SOCK_DGRAM
, 
NETLINK_ROUTE
);

426 i‡(
ﬁ§_˙f
->
π∆_s
 < 0) {

427 
	`ﬁ§_sy¶og
(
OLSR_LOG_ERR
, "rtnetlink socket: %m");

428 
	`ﬁ§_exô
(
__func__
, 0);

430 
	`f˙é
(
ﬁ§_˙f
->
π∆_s
, 
F_SETFL
, 
O_NONBLOCK
);

432 i‡((
ﬁ§_˙f
->
π_m⁄ô‹_sockë
 = 
	`π√éök_ªgi°î_sockë
(
RTMGRP_LINK
)) < 0) {

433 
	`ﬁ§_sy¶og
(
OLSR_LOG_ERR
, "rtmonitor socket: %m");

434 
	`ﬁ§_exô
(
__func__
, 0);

441 #i‡
deföed
 
__FªeBSD__
 || 
__FªeBSD_kî√l__
 || deföed 
__MacOSX__
 || deföed 
__NëBSD__
 || deföed 
__O≥nBSD__


442 
ﬁ§_˙f
->
πs
 = 
	`sockë
(
PF_ROUTE
, 
SOCK_RAW
, 0);

443 i‡(
ﬁ§_˙f
->
πs
 < 0) {

444 
	`ﬁ§_sy¶og
(
OLSR_LOG_ERR
, "routing socket: %m");

445 
	`ﬁ§_exô
(
__func__
, 0);

449 #ifde‡
LINUX_NETLINK_ROUTING


451 i‡(
ﬁ§_˙f
->
sm¨t_gw_a˘ive
) {

452 i‡(
	`ﬁ§_öô_g©eways
()) {

453 
	`ﬁ§_exô
("Cannot initialize gatewayÅunnels", 1);

458 i‡(
ﬁ§_˙f
->
u£_niô
) {

459 
	`ﬁ§_öô_niô
();

464 
	`£t_em±y_tc_timî
(
	`GET_TIMESTAMP
(0));

468 
	`√t_os_£t_globÆ_if›ti⁄s
();

471 
	`ﬁ§_öô_∑r£r
();

474 
	`ﬁ§_öô_exp‹t_rouã
();

477 
	`öô_msg_£qno
();

480 
	`ﬁ§_öô_wûlög√ss
();

485 i‡(
ﬁ§_˙f
->
wûlög√ss_auto
) {

486 i‡(
	`≠m_öô
() < 0) {

487 
	`OLSR_PRINTF
(1, "CouldÇŸÑód APM infÿ- sëtög deÁu… wûlög√ss(%d)\n", 
WILL_DEFAULT
);

489 
	`ﬁ§_sy¶og
(
OLSR_LOG_ERR
,

491 
WILL_DEFAULT
);

493 
ﬁ§_˙f
->
wûlög√ss_auto
 = 0;

494 
ﬁ§_˙f
->
wûlög√ss
 = 
WILL_DEFAULT
;

496 
ﬁ§_˙f
->
wûlög√ss
 = 
	`ﬁ§_ˇlcuœã_wûlög√ss
();

498 
	`OLSR_PRINTF
(1, "Wûlög√s†£àtÿ%d -Çexàupd©êö %.1‡£cs\n", 
ﬁ§_˙f
->
wûlög√ss
, ol§_˙f->
wûl_öt
);

503 
	`öô_√t
();

506 i‡(!
	`ﬁ§_öô_öãrÁ˚db
()) {

507 i‡(
ﬁ§_˙f
->
Ælow_no_öãrÁ˚s
) {

508 
	`Ârötf
(

509 
°dîr
,

511 
	`ﬁ§_°¨tup_¶ìp
(5);

513 
	`Ârötf
(
°dîr
, "No interfaces detected!\nBailing out!\n");

514 
	`ﬁ§_exô
(
__func__
, 
EXIT_FAILURE
);

518 
	`ﬁ§_do_°¨tup_¶ìp
();

522 #i‡!
deföed
 
WINCE


523 i‡(
ﬁ§_˙f
->
debug_Àvñ
 > 0 && 
	`ißây
(
STDOUT_FILENO
)) {

524 
	`ﬁ§_°¨t_timî
(
STDOUT_PULSE_INT
, 0, 
OLSR_TIMER_PERIODIC
,

525 &
gíî©e_°dout_pul£
, 
NULL
, 0);

531 i‡(
ﬁ§_˙f
->
ùc_c⁄√˘i⁄s
 > 0) {

532 
	`ùc_öô
();

535 
	`ﬁ§_öô_èbÀs
();

538 #i‚de‡
WIN32


539 i‡(
ﬁ§_˙f
->
debug_Àvñ
 =0 && !ﬁ§_˙f->
no_f‹k
) {

540 
	`¥ötf
("%†dëachög fromÅhêcuºíà¥o˚ss...\n", 
ﬁ§d_vîsi⁄
);

541 i‡(
	`d´m⁄
(0, 0) < 0) {

542 
	`¥ötf
("d´m⁄(3ËÁûed: %s\n", 
	`°ªº‹
(
î∫o
));

543 
	`exô
(
EXIT_FAILURE
);

551 
i
=5; i>=0; i--) {

552 
	`OLSR_PRINTF
(3, "TryingÅo get olsrdÜock...\n");

553 i‡(!
ﬁ§_˙f
->
ho°_emul
 && 
	`ﬁ§_¸óã_lock_fûe
(
i
 > 0) == 0) {

557 
	`¶ìp
 (1);

561 
	`ﬁ§_lﬂd_∂ugös
();

563 
	`OLSR_PRINTF
(1, "Maöáddªss: %s\n\n", 
	`ﬁ§_ù_to_°rög
(&
buf
, &
ﬁ§_˙f
->
maö_addr
));

565 #ifde‡
LINUX_NETLINK_ROUTING


567 i‡(
DEF_RT_NONE
 !
ﬁ§_˙f
->
π_èbÀ_¥i
) {

568 
	`ﬁ§_os_pﬁicy_ruÀ
(
ﬁ§_˙f
->
ù_vîsi⁄
,

569 
ﬁ§_˙f
->
π_èbÀ
, ol§_˙f->
π_èbÀ_¥i
, 
NULL
, 
åue
);

571 i‡(
DEF_RT_NONE
 !
ﬁ§_˙f
->
π_èbÀ_tu¬ñ_¥i
) {

572 
	`ﬁ§_os_pﬁicy_ruÀ
(
ﬁ§_˙f
->
ù_vîsi⁄
,

573 
ﬁ§_˙f
->
π_èbÀ_tu¬ñ
, ol§_˙f->
π_èbÀ_tu¬ñ_¥i
, 
NULL
, 
åue
);

575 i‡(
DEF_RT_NONE
 !
ﬁ§_˙f
->
π_èbÀ_deÁu…_¥i
) {

576 
	`ﬁ§_os_pﬁicy_ruÀ
(
ﬁ§_˙f
->
ù_vîsi⁄
,

577 
ﬁ§_˙f
->
π_èbÀ_deÁu…
, ol§_˙f->
π_èbÀ_deÁu…_¥i
, 
NULL
, 
åue
);

581 i‡(
DEF_RT_NONE
 !
ﬁ§_˙f
->
π_èbÀ_deÁu…ﬁ§_¥i
) {

582 
i‚
 = 
i‚ë
; i‚; i‚ = i‚->
öt_√xt
) {

583 
	`ﬁ§_os_pﬁicy_ruÀ
(
ﬁ§_˙f
->
ù_vîsi⁄
,

584 
ﬁ§_˙f
->
π_èbÀ_deÁu…
, ol§_˙f->
π_èbÀ_deÁu…ﬁ§_¥i
, 
i‚
->
öt_«me
, 
åue
);

589 i‡(
ﬁ§_˙f
->
sm¨t_gw_a˘ive
) {

590 
	`ﬁ§_åiggî_öëgw_°¨tup
();

594 i‡(
ﬁ§_˙f
->
u£_niô
) {

595 
	`ﬁ§_£tup_niô_rouãs
();

599 i‡(
ﬁ§_˙f
->
u£_§c_ù_rouãs
) {

600 
	`ﬁ§_os_loˇlho°_if
(&
ﬁ§_˙f
->
maö_addr
, 
åue
);

605 
	`ﬁ§_sy¶og
(
OLSR_LOG_INFO
, "%†suc˚ssfuŒy sèπed", 
ﬁ§d_vîsi⁄
);

612 #ifde‡
WIN32


613 #i‚de‡
WINCE


614 
	`SëC⁄sﬁeCålH™dÀr
(
Sig«lH™dÀr
, 
åue
);

617 
	`sig«l
(
SIGHUP
, 
ﬁ§_ªc⁄figuª
);

618 
	`sig«l
(
SIGINT
, 
ﬁ§_shutdown
);

619 
	`sig«l
(
SIGQUIT
, 
ﬁ§_shutdown
);

620 
	`sig«l
(
SIGILL
, 
ﬁ§_shutdown
);

621 
	`sig«l
(
SIGABRT
, 
ﬁ§_shutdown
);

623 
	`sig«l
(
SIGTERM
, 
ﬁ§_shutdown
);

624 
	`sig«l
(
SIGPIPE
, 
SIG_IGN
);

626 
	`sig«l
(
SIGUSR1
, 
SIG_IGN
);

627 
	`sig«l
(
SIGUSR2
, 
SIG_IGN
);

630 
lök_ch™ges
 = 
Ál£
;

633 
	`ﬁ§_scheduÀr
();

637 
	}
}

644 #i‚de‡
WIN32


645 
ﬁ§_ªc⁄figuª
(
signo
 
__©åibuã__
 ((
unu£d
))) {

649 
ﬁ§_sy¶og
(
OLSR_LOG_INFO
, "sot: olsr_reconfigure()\n");

650 i‡(!
	gﬁ§_˙f
->
	gno_f‹k
) {

651 i‡(!
f‹k
()) {

652 
	gi
;

653 
sig£t_t
 
	gsigs
;

655 
¶ìp
(3);

656 
sigem±y£t
(&
sigs
);

657 
sigadd£t
(&
sigs
, 
SIGHUP
);

658 
sig¥ocmask
(
SIG_UNBLOCK
, &
sigs
, 
NULL
);

659 
	gi
 = 
sysc⁄f
(
_SC_OPEN_MAX
); --ò> 
	gSTDERR_FILENO
;) {

660 
˛o£
(
i
);

662 
¥ötf
("Re°¨tög %s\n", 
ﬁ§_¨gv
[0]);

663 
ﬁ§_sy¶og
(
OLSR_LOG_INFO
, "Re°¨tög %s\n", 
ﬁ§_¨gv
[0]);

664 
execv
(
ﬁ§_¨gv
[0], olsr_argv);

665 
ﬁ§_sy¶og
(
OLSR_LOG_ERR
, "execv(%sËÁûs: %s!\n", 
ﬁ§_¨gv
[0],

666 
°ªº‹
(
î∫o
));

668 
ﬁ§_sy¶og
(
OLSR_LOG_INFO
, "RECONFIGURING!\n");

671 
ﬁ§_shutdown
(0);

675 
	$ﬁ§_shutdown_mesßges
() {

676 
öãrÁ˚
 *
i‚
;

679 
i‚
 = 
i‚ë
; i‚; i‚ = i‚->
öt_√xt
) {

681 
	`√t_ouçut
(
i‚
);

684 i‡(
ﬁ§_˙f
->
lq_Àvñ
 > 0) {

685 
	`ﬁ§_ouçut_lq_tc
(
i‚
);

686 
	`ﬁ§_ouçut_lq_hñlo
(
i‚
);

689 
	`gíî©e_tc
(
i‚
);

690 
	`gíî©e_hñlo
(
i‚
);

692 
	`√t_ouçut
(
i‚
);

694 
	}
}

701 #ifde‡
WIN32


702 
__°dˇŒ


703 
	$Sig«lH™dÀr
(
signo
)

705 
	`ﬁ§_shutdown
(
signo
 
	`__©åibuã__
 ((
unu£d
)))

708 
öãrÁ˚
 *
i‚
;

709 
exô_vÆue
;

711 
	`OLSR_PRINTF
(1, "Re˚ived sig«»%d - shuâög down\n", ()
signo
);

713 #ifde‡
WIN32


714 
	`OLSR_PRINTF
(1, "Waiting forÅhe schedulerÅo stop.\n");

716 
ﬁ§_wö32_íd_ªque°
 = 
TRUE
;

718 !
ﬁ§_wö32_íd_Êag
)

719 
	`¶ìp
(1);

721 
	`OLSR_PRINTF
(1, "Scheduler stopped.\n");

725 
	`ﬁ§_ª£t_Æl_löks
();

728 
ﬁ§_˙f
->
lq_fish
 = 0;

729 
i‚
 = 
i‚ë
; i‚; i‚ = i‚->
öt_√xt
) {

730 
i‚
->
immedüã_£nd_tc
 = 
Ál£
;

732 
	`ö¸ó£_loˇl_™¢
();

735 
	`ﬁ§_shutdown_mesßges
();

738 
	`ﬁ§_dñëe_Æl_kî√l_rouãs
();

741 
	`ﬁ§_shutdown_mesßges
();

744 
	`ﬁ§_dñëe_Æl_tc_íåõs
();

746 
	`ﬁ§_dñëe_Æl_mid_íåõs
();

748 #ifde‡
LINUX_NETLINK_ROUTING


750 i‡(
ﬁ§_˙f
->
sm¨t_gw_a˘ive
) {

751 
	`ﬁ§_˛ónup_g©eways
();

755 i‡(
ﬁ§_˙f
->
u£_niô
) {

756 
	`ﬁ§_˛ónup_niô_rouãs
();

760 i‡(
ﬁ§_˙f
->
u£_§c_ù_rouãs
) {

761 
	`ﬁ§_os_loˇlho°_if
(&
ﬁ§_˙f
->
maö_addr
, 
Ál£
);

765 
	`ﬁ§_de°roy_∑r£r
();

767 
	`OLSR_PRINTF
(1, "Closing sockets...\n");

770 i‡(
ﬁ§_˙f
->
ùc_c⁄√˘i⁄s
 > 0) {

771 
	`shutdown_ùc
();

775 
i‚
 = 
i‚ë
; i‚; i‚ = i‚->
öt_√xt
) {

776 
	`˛o£
(
i‚
->
ﬁ§_sockë
);

777 
	`˛o£
(
i‚
->
£nd_sockë
);

779 #ifde‡
LINUX_NETLINK_ROUTING


780 i‡(
DEF_RT_NONE
 !
ﬁ§_˙f
->
π_èbÀ_deÁu…ﬁ§_¥i
) {

781 
	`ﬁ§_os_pﬁicy_ruÀ
(
ﬁ§_˙f
->
ù_vîsi⁄
, ol§_˙f->
π_èbÀ_deÁu…
,

782 
ﬁ§_˙f
->
π_èbÀ_deÁu…ﬁ§_¥i
, 
i‚
->
öt_«me
, 
Ál£
);

788 
	`ﬁ§_˛o£_∂ugös
();

791 
	`√t_os_ª°‹e_if›ti⁄s
();

794 
	`˛o£
(
ﬁ§_˙f
->
io˘l_s
);

796 #ifde‡
LINUX_NETLINK_ROUTING


797 i‡(
DEF_RT_NONE
 !
ﬁ§_˙f
->
π_èbÀ_¥i
) {

798 
	`ﬁ§_os_pﬁicy_ruÀ
(
ﬁ§_˙f
->
ù_vîsi⁄
,

799 
ﬁ§_˙f
->
π_èbÀ
, ol§_˙f->
π_èbÀ_¥i
, 
NULL
, 
Ál£
);

801 i‡(
DEF_RT_NONE
 !
ﬁ§_˙f
->
π_èbÀ_tu¬ñ_¥i
) {

802 
	`ﬁ§_os_pﬁicy_ruÀ
(
ﬁ§_˙f
->
ù_vîsi⁄
,

803 
ﬁ§_˙f
->
π_èbÀ_tu¬ñ
, ol§_˙f->
π_èbÀ_tu¬ñ_¥i
, 
NULL
, 
Ál£
);

805 i‡(
DEF_RT_NONE
 !
ﬁ§_˙f
->
π_èbÀ_deÁu…_¥i
) {

806 
	`ﬁ§_os_pﬁicy_ruÀ
(
ﬁ§_˙f
->
ù_vîsi⁄
,

807 
ﬁ§_˙f
->
π_èbÀ_deÁu…
, ol§_˙f->
π_èbÀ_deÁu…_¥i
, 
NULL
, 
Ál£
);

809 
	`˛o£
(
ﬁ§_˙f
->
π∆_s
);

810 
	`˛o£
 (
ﬁ§_˙f
->
π_m⁄ô‹_sockë
);

813 #i‡
deföed
 
__FªeBSD__
 || deföed 
__FªeBSD_kî√l__
 || deföed 
__MacOSX__
 || deföed 
__NëBSD__
 || deföed 
__O≥nBSD__


815 
	`˛o£
(
ﬁ§_˙f
->
πs
);

819 
	`OLSR_PRINTF
(0, "Freeáll memory...\n");

820 
	`ﬁ§_dñëe_Æl_cookõs
();

822 
	`ﬁ§_sy¶og
(
OLSR_LOG_INFO
, "%†°›≥d", 
ﬁ§d_vîsi⁄
);

824 
	`OLSR_PRINTF
(1, "\¿<<<< %†-Åîmö©ög >>>>\¿ hâp://www.ﬁ§.‹g\n", 
ﬁ§d_vîsi⁄
);

826 
exô_vÆue
 = 
ﬁ§_˙f
->exit_value;

827 
	`ﬁ§d_‰ì_˙f
(
ﬁ§_˙f
);

829 
	`exô
(
exô_vÆue
);

830 
	}
}

835 
	$¥öt_ußge
(
boﬁ
 
îr‹
) {

836 
	`Ârötf
(

837 
°dîr
,

847 
îr‹
 ? "AnÉrror occured somwhere between your keyboardánd your chair!\n" : "");

848 
	}
}

857 
	$£t_deÁu…_if˙fs
(
ﬁ§_if
 *
ifs
, 
if_c⁄fig_›ti⁄s
 *
˙f
) {

858 
ch™ges
 = 0;

860 
ifs
) {

861 i‡(
ifs
->
˙f
 =
NULL
) {

862 
ifs
->
˙f
 = 
	`ﬁ§_mÆloc
((
if_c⁄fig_›ti⁄s
),

864 *
ifs
->
˙f
 = *cnf;

865 
ch™ges
++;

867 
ifs
 = ifs->
√xt
;

869  
ch™ges
;

870 
	}
}

872 
	#NEXT_ARG
 dÿ{ 
¨gv
++;
¨gc
--; } 0)

	)

873 
	#CHECK_ARGC
 dÿ{ if(!
¨gc
) { \

874 if((
¨gc
 - 1) == 1){ \

875 
	`Ârötf
(
°dîr
, "ErrorÖarsing commandÜine options!\n"); \

877 
¨gv
--; \

878 
	`Ârötf
(
°dîr
, "You mu°Örovidê®∑ømëî whí usögÅhê%†swôch!\n", *
¨gv
); \

880 
	`ﬁ§_exô
(
__func__
, 
EXIT_FAILURE
); \

881 } } 0)

	)

887 
	$ﬁ§_¥o˚ss_¨gumíts
(
¨gc
, *
¨gv
[],

888 
ﬁ§d_c⁄fig
 *
˙f
, 
if_c⁄fig_›ti⁄s
 *
if˙f
) {

889 
¨gc
 > 1) {

890 
NEXT_ARG
;

891 #ifde‡
WIN32


895 i‡(
	`°rcmp
(*
¨gv
, "-int") == 0) {

896 
	`Li°I¡îÁ˚s
();

897 
	`exô
(0);

904 i‡(
	`°rcmp
(*
¨gv
, "-f") == 0) {

905 
	`Ârötf
(
°dîr
, "Configfilename must ALWAYS be firstárgument!\n\n");

906 
	`ﬁ§_exô
(
__func__
, 
EXIT_FAILURE
);

912 i‡(
	`°rcmp
(*
¨gv
, "-ipv6") == 0) {

913 
˙f
->
ù_vîsi⁄
 = 
AF_INET6
;

920 i‡(
	`°rcmp
(*
¨gv
, "-bcast") == 0) {

921 
ö_addr
 
ö
;

922 
NEXT_ARG
;

923 
CHECK_ARGC
;

925 i‡(
	`öë_©⁄
(*
¨gv
, &
ö
) == 0) {

926 
	`¥ötf
("InvÆid brﬂdˇ°áddªss! %s\nSkùpög it!\n", *
¨gv
);

929 
	`mem˝y
(&
if˙f
->
ùv4_mu…iˇ°
.
v4
, &
ö
.
s_addr
, (ifcnf->ipv4_multicast.v4));

936 i‡(
	`°rcmp
(*
¨gv
, "-lql") == 0) {

937 
tmp_lq_Àvñ
;

938 
NEXT_ARG
;

939 
CHECK_ARGC
;

942 
	`ssˇnf
(*
¨gv
, "%d", &
tmp_lq_Àvñ
);

943 
ﬁ§_˙f
->
lq_Àvñ
 = 
tmp_lq_Àvñ
;

950 i‡(
	`°rcmp
(*
¨gv
, "-lqa") == 0) {

951 
tmp_lq_agög
;

952 
NEXT_ARG
;

953 
CHECK_ARGC
;

955 
	`ssˇnf
(*
¨gv
, "%f", &
tmp_lq_agög
);

957 i‡(
tmp_lq_agög
 < 
MIN_LQ_AGING
 ||Åmp_lq_agög > 
MAX_LQ_AGING
) {

958 
	`¥ötf
("LQágög fa˘‹ %‡nŸáŒowed. R™gê[%f-%f]\n", 
tmp_lq_agög
,

959 
MIN_LQ_AGING
, 
MAX_LQ_AGING
);

960 
	`ﬁ§_exô
(
__func__
, 
EXIT_FAILURE
);

962 
ﬁ§_˙f
->
lq_agög
 = 
tmp_lq_agög
;

969 i‡(
	`°rcmp
(*
¨gv
, "-lqnt") == 0) {

970 
tmp_lq_«t_thªsh
;

971 
NEXT_ARG
;

972 
CHECK_ARGC
;

974 
	`ssˇnf
(*
¨gv
, "%f", &
tmp_lq_«t_thªsh
);

976 i‡(
tmp_lq_«t_thªsh
 < 0.1 ||Åmp_lq_nat_thresh > 1.0) {

977 
	`¥ötf
("NATÅhreshold %fÇotállowed. Range [%f-%f]\n",

978 
tmp_lq_«t_thªsh
, 0.1, 1.0);

979 
	`ﬁ§_exô
(
__func__
, 
EXIT_FAILURE
);

981 
ﬁ§_˙f
->
lq_«t_thªsh
 = 
tmp_lq_«t_thªsh
;

988 i‡(
	`°rcmp
(*
¨gv
, "-d") == 0) {

989 
NEXT_ARG
;

990 
CHECK_ARGC
;

992 
	`ssˇnf
(*
¨gv
, "%d", &
˙f
->
debug_Àvñ
);

999 i‡(
	`°rcmp
(*
¨gv
, "-i") == 0) {

1000 
NEXT_ARG
;

1001 
CHECK_ARGC
;

1003 i‡(*
¨gv
[0] == '-') {

1004 
	`Ârötf
(
°dîr
, "You mustÖrovideán interfaceÜabel!\n");

1005 
	`ﬁ§_exô
(
__func__
, 
EXIT_FAILURE
);

1007 
	`¥ötf
("Queuög i‡%s\n", *
¨gv
);

1008 
	`ﬁ§_¸óã_ﬁ§if
(*
¨gv
, 
Ál£
);

1010 (
¨gc
 - 1Ë&& (
¨gv
[1][0] != '-')) {

1011 
NEXT_ARG
;

1012 
	`¥ötf
("Queuög i‡%s\n", *
¨gv
);

1013 
	`ﬁ§_¸óã_ﬁ§if
(*
¨gv
, 
Ál£
);

1022 i‡(
	`°rcmp
(*
¨gv
, "-hint") == 0) {

1023 
NEXT_ARG
;

1024 
CHECK_ARGC
;

1025 
	`ssˇnf
(*
¨gv
, "%f", &
if˙f
->
hñlo_∑øms
.
emissi⁄_öãrvÆ
);

1026 
if˙f
->
hñlo_∑øms
.
vÆidôy_time
 = if˙f->hñlo_∑øms.
emissi⁄_öãrvÆ


1035 i‡(
	`°rcmp
(*
¨gv
, "-hnaint") == 0) {

1036 
NEXT_ARG
;

1037 
CHECK_ARGC
;

1038 
	`ssˇnf
(*
¨gv
, "%f", &
if˙f
->
h«_∑øms
.
emissi⁄_öãrvÆ
);

1039 
if˙f
->
h«_∑øms
.
vÆidôy_time
 = if˙f->h«_∑øms.
emissi⁄_öãrvÆ
 * 3;

1047 i‡(
	`°rcmp
(*
¨gv
, "-midint") == 0) {

1048 
NEXT_ARG
;

1049 
CHECK_ARGC
;

1050 
	`ssˇnf
(*
¨gv
, "%f", &
if˙f
->
mid_∑øms
.
emissi⁄_öãrvÆ
);

1051 
if˙f
->
mid_∑øms
.
vÆidôy_time
 = if˙f->mid_∑øms.
emissi⁄_öãrvÆ
 * 3;

1059 i‡(
	`°rcmp
(*
¨gv
, "-tcint") == 0) {

1060 
NEXT_ARG
;

1061 
CHECK_ARGC
;

1062 
	`ssˇnf
(*
¨gv
, "%f", &
if˙f
->
tc_∑øms
.
emissi⁄_öãrvÆ
);

1063 
if˙f
->
tc_∑øms
.
vÆidôy_time
 = if˙f->tc_∑øms.
emissi⁄_öãrvÆ
 * 3;

1070 i‡(
	`°rcmp
(*
¨gv
, "-T") == 0) {

1071 
NEXT_ARG
;

1072 
CHECK_ARGC
;

1073 
	`ssˇnf
(*
¨gv
, "%f", &
˙f
->
pﬁÃ©e
);

1080 i‡(
	`°rcmp
(*
¨gv
, "-dispin") == 0) {

1081 
	`∑r£r_£t_di•_∑ck_ö
(
åue
);

1088 i‡(
	`°rcmp
(*
¨gv
, "-dispout") == 0) {

1089 
	`√t_£t_di•_∑ck_out
(
åue
);

1096 i‡(
	`°rcmp
(*
¨gv
, "-ipc") == 0) {

1097 
˙f
->
ùc_c⁄√˘i⁄s
 = 1;

1104 i‡(
	`°rcmp
(*
¨gv
, "-multi") == 0) {

1105 
ö6_addr
 
ö6
;

1106 
NEXT_ARG
;

1107 
CHECK_ARGC
;

1108 i‡(
	`öë_±⁄
(
AF_INET6
, *
¨gv
, &
ö6
) <= 0) {

1109 
	`Ârötf
(
°dîr
, "Faûed c⁄vîtög IPáddªs†%s\n", *
¨gv
);

1110 
	`exô
(
EXIT_FAILURE
);

1113 
	`mem˝y
(&
if˙f
->
ùv6_mu…iˇ°
, &
ö6
, (
ö6_addr
));

1121 i‡(
	`°rcmp
(*
¨gv
, "-hemu") == 0) {

1122 
ö_addr
 
ö
;

1123 
ﬁ§_if
 *
iÁ
;

1125 
NEXT_ARG
;

1126 
CHECK_ARGC
;

1127 i‡(
	`öë_±⁄
(
AF_INET
, *
¨gv
, &
ö
) <= 0) {

1128 
	`Ârötf
(
°dîr
, "Faûed c⁄vîtög IPáddªs†%s\n", *
¨gv
);

1129 
	`exô
(
EXIT_FAILURE
);

1133 
iÁ
 = 
	`ﬁ§_¸óã_ﬁ§if
("hcif01", 
åue
);

1135 i‡(!
iÁ
)

1138 
iÁ
->
˙f
 = 
	`gë_deÁu…_if_c⁄fig
();

1139 
iÁ
->
ho°_emul
 = 
åue
;

1140 
	`mem˝y
(&
iÁ
->
hemu_ù
, &
ö
, (
ﬁ§_ù_addr
));

1141 
˙f
->
ho°_emul
 = 
åue
;

1149 i‡(
	`°rcmp
(*
¨gv
, "-delgw") == 0) {

1150 
ﬁ§_˙f
->
dñ_gws
 = 
åue
;

1154 i‡(
	`°rcmp
(*
¨gv
, "-nofork") == 0) {

1155 
˙f
->
no_f‹k
 = 
åue
;

1162 
	}
}

	@src/mantissa.c

42 
	~"m™tisß.h
"

58 
uöt8_t


59 
	$ª…ime_to_me
(c⁄° 
ﬁ§_ª…ime
 
öãrvÆ
)

61 
uöt8_t
 
a
, 
b
;

74 c⁄° 
unsˇÀd_öãrvÆ
 = 
öãrvÆ
 / 125 * 2;

75 
b
 = 0;

76 
unsˇÀd_öãrvÆ
 >(1U << 
b
)) {

77 
b
++;

80 i‡(
b
 == 0) {

81 
a
 = 1;

82 
b
 = 0;

84 
b
--;

85 i‡(
b
 > 15) {

86 
a
 = 15;

87 
b
 = 15;

117 i‡(
b
 >= 5) {

118 
a
 = (
öãrvÆ
 - (125 << (
b
 - 1))) / (125 << (b - 5));

120 
a
 = (
öãrvÆ
 - (125 << (
b
 - 1))) * (1 << (5 - b)) / 125;

123 
b
 +
a
 >> 4;

124 
a
 &= 0x0f;

128  (
a
 << 4Ë| (
b
 & 0x0F);

129 
	}
}

166 
ﬁ§_ª…ime


167 
	$me_to_ª…ime
(c⁄° 
uöt8_t
 
me
)

169 c⁄° 
uöt8_t
 
a
 = 
me
 >> 4;

170 c⁄° 
uöt8_t
 
b
 = 
me
 & 0x0F;

172 i‡(
b
 >= 8) {

173  ((16 + 
a
Ë<< (
b
 - 8)) * 1000;

175  ((16 + 
a
Ë* 1000Ë>> (8 - 
b
);

176 
	}
}

	@src/mantissa.h

42 #i‚de‡
_OLSR_MANTISSA


43 
	#_OLSR_MANTISSA


	)

45 
	~"ﬁ§_ty≥s.h
"

48 
uöt32_t
 
	tﬁ§_ª…ime
;

63 
ﬁ§_ª…ime
 
me_to_ª…ime
(c⁄° 
uöt8_t
);

65 
uöt8_t
 
ª…ime_to_me
(c⁄° 
ﬁ§_ª…ime
);

	@src/mid_set.c

41 
	~<as£π.h
>

43 
	~"ùˇlc.h
"

44 
	~"defs.h
"

45 
	~"two_h›_√ighb‹_èbÀ.h
"

46 
	~"mid_£t.h
"

47 
	~"ﬁ§.h
"

48 
	~"ªbuûd_∑ckë.h
"

49 
	~"scheduÀr.h
"

50 
	~"√ighb‹_èbÀ.h
"

51 
	~"lök_£t.h
"

52 
	~"tc_£t.h
"

53 
	~"∑ckë.h
"

54 
	~"√t_ﬁ§.h
"

55 
	~"du∂iˇã_h™dÀr.h
"

57 
mid_íåy
 
	gmid_£t
[
HASHSIZE
];

58 
mid_addªss
 
	gªvî£_mid_£t
[
HASHSIZE
];

60 
mid_íåy
 *
mid_lookup_íåy_bymaö
(c⁄° 
ﬁ§_ù_addr
 *
adr
);

67 
	$ﬁ§_öô_mid_£t
()

69 
idx
;

71 
	`OLSR_PRINTF
(5, "MID: init\n");

73 
idx
 = 0; idx < 
HASHSIZE
; idx++) {

74 
mid_£t
[
idx
].
√xt
 = &mid_set[idx];

75 
mid_£t
[
idx
].
¥ev
 = &mid_set[idx];

77 
ªvî£_mid_£t
[
idx
].
√xt
 = &reverse_mid_set[idx];

78 
ªvî£_mid_£t
[
idx
].
¥ev
 = &reverse_mid_set[idx];

82 
	}
}

84 
	$ﬁ§_dñëe_Æl_mid_íåõs
() {

85 
hash
;

87 
hash
 = 0; hash < 
HASHSIZE
; hash++) {

88 
mid_£t
[
hash
].
√xt
 != &mid_set[hash]) {

89 
	`ﬁ§_dñëe_mid_íåy
(
mid_£t
[
hash
].
√xt
);

92 
	}
}

94 
	$ﬁ§_˛ónup_mid
(
ﬁ§_ù_addr
 *
‹ig
) {

95 
mid_íåy
 *
mid
;

96 
mid
 = 
	`mid_lookup_íåy_bymaö
(
‹ig
);

97 i‡(
mid
) {

98 
	`ﬁ§_dñëe_mid_íåy
(
mid
);

100 
	}
}

106 
	$ﬁ§_expúe_mid_íåy
(*
c⁄ãxt
)

108 #ifde‡
DEBUG


109 
ùaddr_°r
 
buf
;

111 
mid_íåy
 *
mid
;

113 
mid
 = (
mid_íåy
 *)
c⁄ãxt
;

114 
mid
->
mid_timî
 = 
NULL
;

116 #ifde‡
DEBUG


117 
	`OLSR_PRINTF
(1, "MID infÿf‹ %†timed out.. dñëög it\n", 
	`ﬁ§_ù_to_°rög
(&
buf
, &
mid
->
maö_addr
));

120 
	`ﬁ§_dñëe_mid_íåy
(
mid
);

121 
	}
}

130 
	$ﬁ§_£t_mid_timî
(
mid_íåy
 *
mid
, 
ﬁ§_ª…ime
 
ªl_timî
)

132 
öt32_t
 
wûlFúeIn
 = -1;

133 i‡(
mid
->
mid_timî
 !
NULL
Ë
wûlFúeIn
 = 
	`ﬁ§_gëTimeDue
(mid->mid_timî->
timî_˛ock
);

135 i‡(
wûlFúeIn
 < 0 || (
ﬁ§_ª…ime
)wûlFúeI¿< 
ªl_timî
) {

136 
	`ﬁ§_£t_timî
(&
mid
->
mid_timî
, 
ªl_timî
, 0, 
OLSR_TIMER_ONESHOT
, &
ﬁ§_expúe_mid_íåy
, mid, 0);

138 
	}
}

150 
boﬁ


151 
	$ö£π_mid_tu∂e
(
ﬁ§_ù_addr
 *
m_addr
, 
mid_addªss
 *
Æüs
, 
ﬁ§_ª…ime
 
vtime
)

153 
mid_íåy
 *
tmp
;

154 
mid_addªss
 *
tmp_adr
;

155 
uöt32_t
 
hash
, 
Æüs_hash
;

156 
ﬁ§_ù_addr
 *
ªgi°îed_m_addr
;

158 
hash
 = 
	`ﬁ§_ù_hashög
(
m_addr
);

159 
Æüs_hash
 = 
	`ﬁ§_ù_hashög
(&
Æüs
->alias);

162 
tmp
 = 
mid_£t
[
hash
].
√xt
;Åmp != &mid_set[hash];Åmp =Åmp->next) {

163 i‡(
	`ùequÆ
(&
tmp
->
maö_addr
, 
m_addr
))

168 
ªgi°îed_m_addr
 = 
	`mid_lookup_maö_addr
(&
Æüs
->alias);

169 i‡(
ªgi°îed_m_addr
 !
NULL
 && 
	`ùequÆ
‘egi°îed_m_addr, 
m_addr
)) {

171  
Ál£
;

177 
	`ﬁ§_ö£π_routög_èbÀ
(&
Æüs
->Æüs, 
ﬁ§_˙f
->
max∂í
, 
m_addr
, 
OLSR_RT_ORIGIN_MID
);

180 i‡(
tmp
 !&
mid_£t
[
hash
]) {

181 
tmp_adr
 = 
tmp
->
Æü£s
;

182 
tmp
->
Æü£s
 = 
Æüs
;

183 
Æüs
->
maö_íåy
 = 
tmp
;

184 
	`QUEUE_ELEM
(
ªvî£_mid_£t
[
Æüs_hash
], 
Æüs
);

185 
Æüs
->
√xt_Æüs
 = 
tmp_adr
;

186 
	`ﬁ§_£t_mid_timî
(
tmp
, 
vtime
);

190 
tmp
 = 
	`ﬁ§_mÆloc
((
mid_íåy
), "MIDÇewálias");

192 
tmp
->
Æü£s
 = 
Æüs
;

193 
Æüs
->
maö_íåy
 = 
tmp
;

194 
	`QUEUE_ELEM
(
ªvî£_mid_£t
[
Æüs_hash
], 
Æüs
);

195 
tmp
->
maö_addr
 = *
m_addr
;

196 
	`ﬁ§_£t_mid_timî
(
tmp
, 
vtime
);

199 
	`QUEUE_ELEM
(
mid_£t
[
hash
], 
tmp
);

210 
tmp_adr
 = 
Æüs
;

212 
tmp_adr
) {

213 
√ighb‹_2_íåy
 *
tmp_2_√ighb‹
;

214 
√ighb‹_íåy
 *
tmp_√igh
, *
ªÆ_√igh
;

217 i‡((
tmp_2_√ighb‹
 = 
	`ﬁ§_lookup_two_h›_√ighb‹_èbÀ_mid
(&
tmp_adr
->
Æüs
)Ë!
NULL
) {

218 
ùaddr_°r
 
buf
;

219 
	`OLSR_PRINTF
(1, "Dñëög 2 h›Çodê‰om MID: %†tÿ", 
	`ﬁ§_ù_to_°rög
(&
buf
, &
tmp_adr
->
Æüs
));

220 
	`OLSR_PRINTF
(1, "%s\n", 
	`ﬁ§_ù_to_°rög
(&
buf
, 
m_addr
));

222 
	`ﬁ§_dñëe_two_h›_√ighb‹_èbÀ
(
tmp_2_√ighb‹
);

224 
ch™ges_√ighb‹hood
 = 
åue
;

228 i‡(((
tmp_√igh
 = 
	`ﬁ§_lookup_√ighb‹_èbÀ_Æüs
(&
tmp_adr
->
Æüs
)Ë!
NULL
)

229 && ((
ªÆ_√igh
 = 
	`ﬁ§_lookup_√ighb‹_èbÀ_Æüs
(
m_addr
)Ë!
NULL
)) {

230 
ùaddr_°r
 
buf
;

231 
	`OLSR_PRINTF
(1, "[MID]Dñëög bogu†√ighb‹É¡ry %†ªÆ ", 
	`ﬁ§_ù_to_°rög
(&
buf
, &
tmp_adr
->
Æüs
));

232 
	`OLSR_PRINTF
(1, "%s\n", 
	`ﬁ§_ù_to_°rög
(&
buf
, 
m_addr
));

234 
	`ª∂a˚_√ighb‹_lök_£t
(
tmp_√igh
, 
ªÆ_√igh
);

237 
	`DEQUEUE_ELEM
(
tmp_√igh
);

239 
	`‰ì
(
tmp_√igh
);

241 
ch™ges_√ighb‹hood
 = 
åue
;

243 
tmp_adr
 =Åmp_adr->
√xt_Æüs
;

245  
åue
;

246 
	}
}

259 
	$ö£π_mid_Æüs
(
ﬁ§_ù_addr
 *
maö_add
, c⁄° ﬁ§_ù_add∏*
Æüs
, 
ﬁ§_ª…ime
 
vtime
)

261 
√ighb‹_íåy
 *
√_ﬁd
, *
√_√w
;

262 
mid_íåy
 *
me_ﬁd
;

263 
√_ªf_Ω_cou¡
;

264 
ùaddr_°r
 
buf1
, 
buf2
;

265 
mid_addªss
 *
adr
;

266 i‡(!
	`ﬁ§_vÆid©e_addªss
(
Æüs
))

269 
	`OLSR_PRINTF
(1, "In£πögálü†%†f‹ ", 
	`ﬁ§_ù_to_°rög
(&
buf1
, 
Æüs
));

270 
	`OLSR_PRINTF
(1, "%s\n", 
	`ﬁ§_ù_to_°rög
(&
buf1
, 
maö_add
));

272 
adr
 = 
	`ﬁ§_mÆloc
((
mid_addªss
), "Insert MIDálias");

274 
adr
->
Æüs
 = *alias;

275 
adr
->
√xt_Æüs
 = 
NULL
;

282 
√_ﬁd
 = 
	`ﬁ§_lookup_√ighb‹_èbÀ_Æüs
(
Æüs
);

283 i‡(
√_ﬁd
 !
NULL
) {

284 
	`OLSR_PRINTF
(2, "Remote maináddress change detected. ManglingÇeighbortableÅoÑeplace %s with %s.\n",

285 
	`ﬁ§_ù_to_°rög
(&
buf1
, 
Æüs
), ol§_ù_to_°rög(&
buf2
, 
maö_add
));

286 
	`ﬁ§_dñëe_√ighb‹_èbÀ
(
Æüs
);

287 
√_√w
 = 
	`ﬁ§_ö£π_√ighb‹_èbÀ
(
maö_add
);

289 
√_ªf_Ω_cou¡
 = 
	`ª∂a˚_√ighb‹_lök_£t
(
√_ﬁd
, 
√_√w
);

290 i‡(
√_ªf_Ω_cou¡
 > 0)

291 
	`OLSR_PRINTF
(2, "Pîf‹med %dÇeighb‹èbÀ-poöã∏ª∂a˚mít†(%∞-> %pËöÜök_£t.\n", 
√_ªf_Ω_cou¡
, 
√_ﬁd
, 
√_√w
);

293 
me_ﬁd
 = 
	`mid_lookup_íåy_bymaö
(
Æüs
);

294 i‡(
me_ﬁd
) {

300 
	`OLSR_PRINTF
(2,

303 
	`ﬁ§_dñëe_mid_íåy
(
me_ﬁd
);

307 i‡(!
	`ö£π_mid_tu∂e
(
maö_add
, 
adr
, 
vtime
)) {

308 
	`‰ì
(
adr
);

314 
ch™ges_√ighb‹hood
 = 
åue
;

315 
ch™ges_t›ﬁogy
 = 
åue
;

316 
	}
}

325 
ﬁ§_ù_addr
 *

326 
	$mid_lookup_maö_addr
(c⁄° 
ﬁ§_ù_addr
 *
adr
)

328 
uöt32_t
 
hash
;

329 
mid_addªss
 *
tmp_li°
;

331 
hash
 = 
	`ﬁ§_ù_hashög
(
adr
);

334 
tmp_li°
 = 
ªvî£_mid_£t
[
hash
].
√xt
;Åmp_list != &reverse_mid_set[hash];Åmp_list =Åmp_list->next) {

335 i‡(
	`ùequÆ
(&
tmp_li°
->
Æüs
, 
adr
))

336  &
tmp_li°
->
maö_íåy
->
maö_addr
;

338  
NULL
;

340 
	}
}

348 
mid_íåy
 *

349 
	$mid_lookup_íåy_bymaö
(c⁄° 
ﬁ§_ù_addr
 *
adr
)

351 
mid_íåy
 *
tmp_li°
;

352 
uöt32_t
 
hash
;

354 
hash
 = 
	`ﬁ§_ù_hashög
(
adr
);

357 
tmp_li°
 = 
mid_£t
[
hash
].
√xt
;Åmp_list != &mid_set[hash];Åmp_list =Åmp_list->next) {

358 i‡(
	`ùequÆ
(&
tmp_li°
->
maö_addr
, 
adr
))

359  
tmp_li°
;

361  
NULL
;

362 
	}
}

370 
mid_addªss
 *

371 
	$mid_lookup_Æü£s
(c⁄° 
ﬁ§_ù_addr
 *
adr
)

373 
mid_íåy
 *
tmp
 = 
	`mid_lookup_íåy_bymaö
(
adr
);

374  
tmp
 ?Åmp->
Æü£s
 : 
NULL
;

375 
	}
}

384 
	$ﬁ§_upd©e_mid_èbÀ
(c⁄° 
ﬁ§_ù_addr
 *
adr
, 
ﬁ§_ª…ime
 
vtime
)

386 
uöt32_t
 
hash
;

387 
ùaddr_°r
 
buf
;

388 
mid_íåy
 *
tmp_li°
 = 
mid_£t
;

390 
	`OLSR_PRINTF
(3, "MID: upd©ê%s\n", 
	`ﬁ§_ù_to_°rög
(&
buf
, 
adr
));

391 
hash
 = 
	`ﬁ§_ù_hashög
(
adr
);

394 
tmp_li°
 = 
mid_£t
[
hash
].
√xt
;Åmp_list != &mid_set[hash];Åmp_list =Åmp_list->next) {

396 i‡(
	`ùequÆ
(&
tmp_li°
->
maö_addr
, 
adr
)) {

397 
	`ﬁ§_£t_mid_timî
(
tmp_li°
, 
vtime
);

403 
	}
}

413 
	$ﬁ§_¥u√_Æü£s
(
mid_mesßge
 *
mesßge
)

415 c⁄° 
ﬁ§_ù_addr
 *
m_addr
 = &
mesßge
->
mid_‹igaddr
;

416 
mid_Æüs
 * 
de˛¨ed_Æü£s
 = 
mesßge
->
mid_addr
;

417 
mid_íåy
 *
íåy
;

418 
uöt32_t
 
hash
;

419 
mid_addªss
 *
ªgi°îed_Æü£s
;

420 
mid_addªss
 *
¥evious_Æüs
;

421 
mid_Æüs
 *
ßve_de˛¨ed_Æü£s
 = 
de˛¨ed_Æü£s
;

423 
hash
 = 
	`ﬁ§_ù_hashög
(
m_addr
);

426 
íåy
 = 
mid_£t
[
hash
].
√xt
;Éntry != &mid_set[hash];Éntry =Éntry->next) {

427 i‡(
	`ùequÆ
(&
íåy
->
maö_addr
, 
m_addr
))

430 i‡(
íåy
 =&
mid_£t
[
hash
]) {

435 
ªgi°îed_Æü£s
 = 
íåy
->
Æü£s
;

436 
¥evious_Æüs
 = 
NULL
;

438 
ªgi°îed_Æü£s
 !
NULL
) {

439 
mid_addªss
 *
cuºít_Æüs
 = 
ªgi°îed_Æü£s
;

440 
ªgi°îed_Æü£s
 =Ñegi°îed_Æü£s->
√xt_Æüs
;

442 
de˛¨ed_Æü£s
 = 
ßve_de˛¨ed_Æü£s
;

445 
de˛¨ed_Æü£s
 !0 && !
	`ùequÆ
(&
cuºít_Æüs
->
Æüs
, &de˛¨ed_Æü£s->
Æüs_addr
)) {

446 
de˛¨ed_Æü£s
 = de˛¨ed_Æü£s->
√xt
;

449 i‡(
de˛¨ed_Æü£s
 =
NULL
) {

451 i‡(!
	`ﬁ§_isTimedOut
(
cuºít_Æüs
->
vtime
)Ë
de˛¨ed_Æü£s
 = 
ßve_de˛¨ed_Æü£s
;

453 
cuºít_Æüs
->
vtime
=
	`ﬁ§_gëTime°amp
(
mesßge
->vtime);

455 i‡(
de˛¨ed_Æü£s
 =
NULL
) {

456 
ùaddr_°r
 
buf
;

458 
	`OLSR_PRINTF
(1, "MIDÑemove: (%s, ", 
	`ﬁ§_ù_to_°rög
(&
buf
, &
íåy
->
maö_addr
));

459 
	`OLSR_PRINTF
(1, "%s)\n", 
	`ﬁ§_ù_to_°rög
(&
buf
, &
cuºít_Æüs
->
Æüs
));

462 i‡(
¥evious_Æüs
 !
NULL
) {

463 
¥evious_Æüs
->
√xt_Æüs
 = 
cuºít_Æüs
->next_alias;

465 
íåy
->
Æü£s
 = 
cuºít_Æüs
->
√xt_Æüs
;

469 
	`DEQUEUE_ELEM
(
cuºít_Æüs
);

474 
	`ﬁ§_dñëe_routög_èbÀ
(&
cuºít_Æüs
->
Æüs
, 
ﬁ§_˙f
->
max∂í
, &
íåy
->
maö_addr
);

476 
	`‰ì
(
cuºít_Æüs
);

481 
ch™ges_√ighb‹hood
 = 
åue
;

482 
ch™ges_t›ﬁogy
 = 
åue
;

484 
¥evious_Æüs
 = 
cuºít_Æüs
;

487 
	}
}

495 
	$ﬁ§_dñëe_mid_íåy
(
mid_íåy
 *
mid
)

497 
mid_addªss
 *
Æü£s
;

500 
Æü£s
 = 
mid
->aliases;

501 
Æü£s
) {

502 
mid_addªss
 *
tmp_Æü£s
 = 
Æü£s
;

503 
Æü£s
 =álü£s->
√xt_Æüs
;

504 
	`DEQUEUE_ELEM
(
tmp_Æü£s
);

509 
	`ﬁ§_dñëe_routög_èbÀ
(&
tmp_Æü£s
->
Æüs
, 
ﬁ§_˙f
->
max∂í
, &
mid
->
maö_addr
);

511 
	`‰ì
(
tmp_Æü£s
);

517 i‡(
mid
->
mid_timî
) {

518 
	`ﬁ§_°›_timî
(
mid
->
mid_timî
);

519 
mid
->
mid_timî
 = 
NULL
;

523 
	`DEQUEUE_ELEM
(
mid
);

524 
	`‰ì
(
mid
);

525 
	}
}

532 
	$ﬁ§_¥öt_mid_£t
()

534 
idx
;

536 
	`OLSR_PRINTF
(1, "\n--- %†------------------------------------------------- MID\n\n", 
	`ﬁ§_wÆl˛ock_°rög
());

538 
idx
 = 0; idx < 
HASHSIZE
; idx++) {

539 
mid_íåy
 *
tmp_li°
 = 
mid_£t
[
idx
].
√xt
;

541 
tmp_li°
 = 
mid_£t
[
idx
].
√xt
;Åmp_list != &mid_set[idx];Åmp_list =Åmp_list->next) {

542 
mid_addªss
 *
tmp_addr
;

543 
ùaddr_°r
 
buf
;

544 
	`OLSR_PRINTF
(1, "%s: ", 
	`ﬁ§_ù_to_°rög
(&
buf
, &
tmp_li°
->
maö_addr
));

545 
tmp_addr
 = 
tmp_li°
->
Æü£s
;Åmp_addr;Åmp_add∏tmp_addr->
√xt_Æüs
) {

546 
	`OLSR_PRINTF
(1, " %†", 
	`ﬁ§_ù_to_°rög
(&
buf
, &
tmp_addr
->
Æüs
));

548 
	`OLSR_PRINTF
(1, "\n");

551 
	}
}

562 
boﬁ


563 
ﬁ§_öput_mid
(
ﬁ§_mesßge
 *
m
, 
öãrÁ˚
 *
ö_if
 
__©åibuã__
 ((
unu£d
)), 
ﬁ§_ù_addr
 *
‰om_addr
)

565 
ùaddr_°r
 
	gbuf
;

566 
mid_Æüs
 *
	gtmp_adr
;

567 
mid_mesßge
 
	gmesßge
;

569 
mid_chge°ru˘
(&
mesßge
, 
m
);

571 i‡(!
ﬁ§_vÆid©e_addªss
(&
mesßge
.
mid_‹igaddr
)) {

572 
ﬁ§_‰ì_mid_∑ckë
(&
mesßge
);

573  
	gÁl£
;

575 #ifde‡
DEBUG


576 
OLSR_PRINTF
(5, "Pro˚ssög MID from %s...\n", 
ﬁ§_ù_to_°rög
(&
buf
, &
mesßge
.
mid_‹igaddr
));

578 
	gtmp_adr
 = 
mesßge
.
mid_addr
;

586 i‡(
check_√ighb‹_lök
(
‰om_addr
Ë!
SYM_LINK
) {

587 
OLSR_PRINTF
(2, "Re˚ived MID from NON SYMÇeighb‹ %s\n", 
ﬁ§_ù_to_°rög
(&
buf
, 
‰om_addr
));

588 
ﬁ§_‰ì_mid_∑ckë
(&
mesßge
);

589  
	gÁl£
;

593 
ﬁ§_upd©e_mid_èbÀ
(&
mesßge
.
mid_‹igaddr
, mesßge.
vtime
);

595 ;
	gtmp_adr
;Åmp_ad∏
tmp_adr
->
√xt
) {

596 #i‚de‡
NO_DUPLICATE_DETECTION_HANDLER


597 
öãrÁ˚
 *
ifs
;

598 
boﬁ
 
	g°›
 = 
Ál£
;

599 
	gifs
 = 
i‚ë
; if†!
NULL
; if†
ifs
->
öt_√xt
) {

600 i‡(
ùequÆ
(&
ifs
->
ù_addr
, &
tmp_adr
->
Æüs_addr
)) {

602 
ﬁ§_h™dÀ_mid_cﬁlisi⁄
(&
tmp_adr
->
Æüs_addr
, &
mesßge
.
mid_‹igaddr
);

603 
	g°›
 = 
åue
;

607 i‡(
	g°›
) {

611 i‡(!
mid_lookup_maö_addr
(&
tmp_adr
->
Æüs_addr
)) {

612 
OLSR_PRINTF
(1, "MIDÇew: (%s, ", 
ﬁ§_ù_to_°rög
(&
buf
, &
mesßge
.
mid_‹igaddr
));

613 
OLSR_PRINTF
(1, "%s)\n", 
ﬁ§_ù_to_°rög
(&
buf
, &
tmp_adr
->
Æüs_addr
));

614 
ö£π_mid_Æüs
(&
mesßge
.
mid_‹igaddr
, &
tmp_adr
->
Æüs_addr
, mesßge.
vtime
);

616 
ﬁ§_ö£π_routög_èbÀ
(&
tmp_adr
->
Æüs_addr
, 
ﬁ§_˙f
->
max∂í
, &
mesßge
.
mid_‹igaddr
, 
OLSR_RT_ORIGIN_MID
);

620 
ﬁ§_¥u√_Æü£s
(&
mesßge
);

621 
ﬁ§_‰ì_mid_∑ckë
(&
mesßge
);

624  
	gåue
;

	@src/mid_set.h

42 #i‚de‡
_OLSR_MID


43 
	#_OLSR_MID


	)

45 
	~"ﬁ§_ty≥s.h
"

46 
	~"hashög.h
"

47 
	~"m™tisß.h
"

48 
	~"∑ckë.h
"

50 
	smid_addªss
 {

51 
ﬁ§_ù_addr
 
	mÆüs
;

52 
mid_íåy
 *
	mmaö_íåy
;

53 
mid_addªss
 *
	m√xt_Æüs
;

54 
uöt32_t
 
	mvtime
;

57 
mid_addªss
 *
	m¥ev
;

58 
mid_addªss
 *
	m√xt
;

64 
	smid_íåy
 {

65 
ﬁ§_ù_addr
 
	mmaö_addr
;

66 
mid_addªss
 *
	mÆü£s
;

67 
mid_íåy
 *
	m¥ev
;

68 
mid_íåy
 *
	m√xt
;

69 
timî_íåy
 *
	mmid_timî
;

72 
	#OLSR_MID_JITTER
 5

	)

74 
mid_íåy
 
mid_£t
[
HASHSIZE
];

75 
mid_addªss
 
ªvî£_mid_£t
[
HASHSIZE
];

77 
ﬁ§_öô_mid_£t
();

78 
ﬁ§_dñëe_Æl_mid_íåõs
();

79 
ﬁ§_˛ónup_mid
(
ﬁ§_ù_addr
 *);

80 
ö£π_mid_Æüs
(
ﬁ§_ù_addr
 *, c⁄° ﬁ§_ù_add∏*, 
ﬁ§_ª…ime
);

81 
ﬁ§_ù_addr
 *
mid_lookup_maö_addr
(const olsr_ip_addr *);

82 
mid_addªss
 *
mid_lookup_Æü£s
(c⁄° 
ﬁ§_ù_addr
 *);

83 
mid_íåy
 *
mid_lookup_íåy_bymaö
(c⁄° 
ﬁ§_ù_addr
 *);

84 
ﬁ§_¥öt_mid_£t
();

85 
ﬁ§_upd©e_mid_èbÀ
(c⁄° 
ﬁ§_ù_addr
 *, 
ﬁ§_ª…ime
);

86 
ﬁ§_dñëe_mid_íåy
(
mid_íåy
 *);

87 
boﬁ
 
ﬁ§_öput_mid
(
ﬁ§_mesßge
 *, 
öãrÁ˚
 *, 
ﬁ§_ù_addr
 *);

	@src/misc.h

42 #i‚de‡
_OLSR_MISC_H


43 
	#_OLSR_MISC_H


	)

45 
˛ór_c⁄sﬁe
();

	@src/mpr.c

42 
	~"ùˇlc.h
"

43 
	~"defs.h
"

44 
	~"m¥.h
"

45 
	~"two_h›_√ighb‹_èbÀ.h
"

46 
	~"ﬁ§.h
"

47 
	~"√ighb‹_èbÀ.h
"

48 
	~"scheduÀr.h
"

49 
	~"√t_ﬁ§.h
"

55 
uöt16_t
 
add_wûl_Æways_nodes
();

57 
ﬁ§_›timize_m¥_£t
();

59 
ﬁ§_˛ór_m¥s
();

61 
ﬁ§_˛ór_two_h›_¥o˚s£d
();

63 
√ighb‹_íåy
 *
ﬁ§_föd_maximum_covîed
();

65 
uöt16_t
 
ﬁ§_ˇlcuœã_two_h›_√ighb‹s
();

67 
ﬁ§_check_m¥_ch™ges
();

69 
ﬁ§_cho£n_m¥
(
√ighb‹_íåy
 *, 
uöt16_t
 *);

71 
√ighb‹_2_li°_íåy
 *
ﬁ§_föd_2_h›_√ighb‹s_wôh_1_lök
();

86 
√ighb‹_2_li°_íåy
 *

87 
	$ﬁ§_föd_2_h›_√ighb‹s_wôh_1_lök
(
wûlög√ss
)

90 
uöt8_t
 
idx
;

91 
√ighb‹_2_li°_íåy
 *
two_h›_li°_tmp
 = 
NULL
;

92 
√ighb‹_2_li°_íåy
 *
two_h›_li°
 = 
NULL
;

93 
√ighb‹_íåy
 *
dup_√ighb‹
;

94 
√ighb‹_2_íåy
 *
two_h›_√ighb‹
 = 
NULL
;

96 
idx
 = 0; idx < 
HASHSIZE
; idx++) {

98 
two_h›_√ighb‹
 = 
two_h›_√ighb‹èbÀ
[
idx
].
√xt
;Åwo_hop_neighbor != &two_hop_neighbortable[idx];

99 
two_h›_√ighb‹
 =Åwo_h›_√ighb‹->
√xt
) {

104 
dup_√ighb‹
 = 
	`ﬁ§_lookup_√ighb‹_èbÀ
(&
two_h›_√ighb‹
->
√ighb‹_2_addr
);

106 i‡((
dup_√ighb‹
 !
NULL
Ë&& (dup_√ighb‹->
°©us
 !
NOT_SYM
)) {

113 i‡(
two_h›_√ighb‹
->
√ighb‹_2_poöãr
 == 1) {

114 i‡((
two_h›_√ighb‹
->
√ighb‹_2_nbli°
.
√xt
->
√ighb‹
->
wûlög√ss
 == willingness)

115 && (
two_h›_√ighb‹
->
√ighb‹_2_nbli°
.
√xt
->
√ighb‹
->
°©us
 =
SYM
)) {

116 
two_h›_li°_tmp
 = 
	`ﬁ§_mÆloc
((
√ighb‹_2_li°_íåy
), "MPRÅwo hopÜist");

121 
two_h›_li°_tmp
->
√ighb‹_2
 = 
two_h›_√ighb‹
;

123 
two_h›_li°_tmp
->
√xt
 = 
two_h›_li°
;

125 
two_h›_li°
 = 
two_h›_li°_tmp
;

133  (
two_h›_li°_tmp
);

134 
	}
}

141 
	$ﬁ§_cho£n_m¥
(
√ighb‹_íåy
 *
⁄e_h›_√ighb‹
, 
uöt16_t
 * 
two_h›_covîed_cou¡
)

143 
√ighb‹_li°_íåy
 *
the_⁄e_h›_li°
;

144 
√ighb‹_2_li°_íåy
 *
£c⁄d_h›_íåõs
;

145 
√ighb‹_íåy
 *
dup_√ighb‹
;

146 
uöt16_t
 
cou¡
;

147 
ùaddr_°r
 
buf
;

148 
cou¡
 = *
two_h›_covîed_cou¡
;

150 
	`OLSR_PRINTF
(1, "Sëtög %†a†MPR\n", 
	`ﬁ§_ù_to_°rög
(&
buf
, &
⁄e_h›_√ighb‹
->
√ighb‹_maö_addr
));

154 
⁄e_h›_√ighb‹
->
is_m¥
 = 
åue
;

156 
£c⁄d_h›_íåõs
 = 
⁄e_h›_√ighb‹
->
√ighb‹_2_li°
.
√xt
; second_hop_entries != &one_hop_neighbor->neighbor_2_list;

157 
£c⁄d_h›_íåõs
 = sec⁄d_h›_íåõs->
√xt
) {

158 
dup_√ighb‹
 = 
	`ﬁ§_lookup_√ighb‹_èbÀ
(&
£c⁄d_h›_íåõs
->
√ighb‹_2
->
√ighb‹_2_addr
);

160 i‡((
dup_√ighb‹
 !
NULL
Ë&& (dup_√ighb‹->
°©us
 =
SYM
)) {

170 
£c⁄d_h›_íåõs
->
√ighb‹_2
->
m¥_covîed_cou¡
++;

171 
the_⁄e_h›_li°
 = 
£c⁄d_h›_íåõs
->
√ighb‹_2
->
√ighb‹_2_nbli°
.
√xt
;

175 i‡(
£c⁄d_h›_íåõs
->
√ighb‹_2
->
m¥_covîed_cou¡
 >
ﬁ§_˙f
->
m¥_covîage
)

176 
cou¡
++;

178 
the_⁄e_h›_li°
 !&
£c⁄d_h›_íåõs
->
√ighb‹_2
->
√ighb‹_2_nbli°
) {

180 i‡((
the_⁄e_h›_li°
->
√ighb‹
->
°©us
 =
SYM
)) {

181 i‡(
£c⁄d_h›_íåõs
->
√ighb‹_2
->
m¥_covîed_cou¡
 >
ﬁ§_˙f
->
m¥_covîage
) {

182 
the_⁄e_h›_li°
->
√ighb‹
->
√ighb‹_2_nocov
--;

185 
the_⁄e_h›_li°
 =Åhe_⁄e_h›_li°->
√xt
;

193 *
two_h›_covîed_cou¡
 = 
cou¡
;

194  
cou¡
;

196 
	}
}

206 
√ighb‹_íåy
 *

207 
	$ﬁ§_föd_maximum_covîed
(
wûlög√ss
)

209 
uöt16_t
 
maximum
;

210 
√ighb‹_íåy
 *
a_√ighb‹
;

211 
√ighb‹_íåy
 *
m¥_ˇndid©e
 = 
NULL
;

213 
maximum
 = 0;

215 
	`OLSR_FOR_ALL_NBR_ENTRIES
(
a_√ighb‹
) {

218 
	`¥ötf
("[%s]Çocov: %d m¥: %d wûl: %d max: %d\n\n", 
	`ﬁ§_ù_to_°rög
(&
buf
, &
a_√ighb‹
->
√ighb‹_maö_addr
),

219 
a_√ighb‹
->
√ighb‹_2_nocov
,á_√ighb‹->
is_m¥
,á_√ighb‹->
wûlög√ss
, 
maximum
);

222 i‡((!
a_√ighb‹
->
is_m¥
Ë&& (a_√ighb‹->
wûlög√ss
 =wûlög√ssË&& (
maximum
 <á_√ighb‹->
√ighb‹_2_nocov
)) {

224 
maximum
 = 
a_√ighb‹
->
√ighb‹_2_nocov
;

225 
m¥_ˇndid©e
 = 
a_√ighb‹
;

228 
	`OLSR_FOR_ALL_NBR_ENTRIES_END
(
a_√ighb‹
);

230  
m¥_ˇndid©e
;

231 
	}
}

237 
	$ﬁ§_˛ór_m¥s
()

239 
√ighb‹_íåy
 *
a_√ighb‹
;

240 
√ighb‹_2_li°_íåy
 *
two_h›_li°
;

242 
	`OLSR_FOR_ALL_NBR_ENTRIES
(
a_√ighb‹
) {

245 i‡(
a_√ighb‹
->
is_m¥
) {

246 
a_√ighb‹
->
was_m¥
 = 
åue
;

247 
a_√ighb‹
->
is_m¥
 = 
Ál£
;

251 
two_h›_li°
 = 
a_√ighb‹
->
√ighb‹_2_li°
.
√xt
;Åwo_hop_list != &a_neighbor->neighbor_2_list;

252 
two_h›_li°
 =Åwo_h›_li°->
√xt
) {

253 
two_h›_li°
->
√ighb‹_2
->
m¥_covîed_cou¡
 = 0;

257 
	`OLSR_FOR_ALL_NBR_ENTRIES_END
(
a_√ighb‹
);

258 
	}
}

266 
	$ﬁ§_check_m¥_ch™ges
()

268 
√ighb‹_íåy
 *
a_√ighb‹
;

269 
ªtvÆ
;

271 
ªtvÆ
 = 0;

273 
	`OLSR_FOR_ALL_NBR_ENTRIES
(
a_√ighb‹
) {

275 i‡(
a_√ighb‹
->
was_m¥
) {

276 
a_√ighb‹
->
was_m¥
 = 
Ál£
;

278 i‡(!
a_√ighb‹
->
is_m¥
) {

279 
ªtvÆ
 = 1;

283 
	`OLSR_FOR_ALL_NBR_ENTRIES_END
(
a_√ighb‹
);

285  
ªtvÆ
;

286 
	}
}

293 
	$ﬁ§_˛ór_two_h›_¥o˚s£d
()

295 
idx
;

297 
idx
 = 0; idx < 
HASHSIZE
; idx++) {

298 
√ighb‹_2_íåy
 *
√ighb‹_2
;

299 
√ighb‹_2
 = 
two_h›_√ighb‹èbÀ
[
idx
].
√xt
;Çeighbor_2 != &two_hop_neighbortable[idx];Çeighbor_2 =Çeighbor_2->next) {

301 
√ighb‹_2
->
¥o˚s£d
 = 0;

305 
	}
}

310 
uöt16_t


311 
	$ﬁ§_ˇlcuœã_two_h›_√ighb‹s
()

313 
√ighb‹_íåy
 *
a_√ighb‹
, *
dup_√ighb‹
;

314 
√ighb‹_2_li°_íåy
 *
twoh›_√ighb‹s
;

315 
uöt16_t
 
cou¡
 = 0;

316 
uöt16_t
 
n_cou¡
 = 0;

317 
uöt16_t
 
sum
 = 0;

320 
	`ﬁ§_˛ór_two_h›_¥o˚s£d
();

322 
	`OLSR_FOR_ALL_NBR_ENTRIES
(
a_√ighb‹
) {

324 i‡(
a_√ighb‹
->
°©us
 =
NOT_SYM
) {

325 
a_√ighb‹
->
√ighb‹_2_nocov
 = 
cou¡
;

329 
twoh›_√ighb‹s
 = 
a_√ighb‹
->
√ighb‹_2_li°
.
√xt
;Åwohop_neighbors != &a_neighbor->neighbor_2_list;

330 
twoh›_√ighb‹s
 =Åwoh›_√ighb‹s->
√xt
) {

332 
dup_√ighb‹
 = 
	`ﬁ§_lookup_√ighb‹_èbÀ
(&
twoh›_√ighb‹s
->
√ighb‹_2
->
√ighb‹_2_addr
);

334 i‡((
dup_√ighb‹
 =
NULL
Ë|| (dup_√ighb‹->
°©us
 !
SYM
)) {

335 
n_cou¡
++;

336 i‡(!
twoh›_√ighb‹s
->
√ighb‹_2
->
¥o˚s£d
) {

337 
cou¡
++;

338 
twoh›_√ighb‹s
->
√ighb‹_2
->
¥o˚s£d
 = 1;

342 
a_√ighb‹
->
√ighb‹_2_nocov
 = 
n_cou¡
;

345 
sum
 +
cou¡
;

348 
	`OLSR_FOR_ALL_NBR_ENTRIES_END
(
a_√ighb‹
);

350 
	`OLSR_PRINTF
(3, "Twÿh›Çeighb‹s: %d\n", 
sum
);

351  
sum
;

352 
	}
}

357 
uöt16_t


358 
	$add_wûl_Æways_nodes
()

360 
√ighb‹_íåy
 *
a_√ighb‹
;

361 
uöt16_t
 
cou¡
 = 0;

364 
	`¥ötf
("\nAdding WILL ALWAYSÇodes....\n");

367 
	`OLSR_FOR_ALL_NBR_ENTRIES
(
a_√ighb‹
) {

368 
ùaddr_°r
 
buf
;

369 i‡((
a_√ighb‹
->
°©us
 =
NOT_SYM
Ë|| (a_√ighb‹->
wûlög√ss
 !
WILL_ALWAYS
)) {

372 
	`ﬁ§_cho£n_m¥
(
a_√ighb‹
, &
cou¡
);

374 
	`OLSR_PRINTF
(3, "Addög WILL_ALWAYS: %s\n", 
	`ﬁ§_ù_to_°rög
(&
buf
, &
a_√ighb‹
->
√ighb‹_maö_addr
));

377 
	`OLSR_FOR_ALL_NBR_ENTRIES_END
(
a_√ighb‹
);

380 
	`OLSR_PRINTF
(1, "Cou¡: %d\n", 
cou¡
);

382  
cou¡
;

383 
	}
}

390 
	$ﬁ§_ˇlcuœã_m¥
()

392 
uöt16_t
 
two_h›_covîed_cou¡
;

393 
uöt16_t
 
two_h›_cou¡
;

394 
i
;

396 
	`OLSR_PRINTF
(3, "\n**RECALCULATING MPR**\n\n");

398 
	`ﬁ§_˛ór_m¥s
();

399 
two_h›_cou¡
 = 
	`ﬁ§_ˇlcuœã_two_h›_√ighb‹s
();

400 
two_h›_covîed_cou¡
 = 
	`add_wûl_Æways_nodes
();

406 
i
 = 
WILL_ALWAYS
 - 1; i > 
WILL_NEVER
; i--) {

407 
√ighb‹_íåy
 *
m¥s
;

408 
√ighb‹_2_li°_íåy
 *
two_h›_li°
 = 
	`ﬁ§_föd_2_h›_√ighb‹s_wôh_1_lök
(
i
);

410 
two_h›_li°
 !
NULL
) {

411 
√ighb‹_2_li°_íåy
 *
tmp
;

413 i‡(!
two_h›_li°
->
√ighb‹_2
->
√ighb‹_2_nbli°
.
√xt
->
√ighb‹
->
is_m¥
)

414 
	`ﬁ§_cho£n_m¥
(
two_h›_li°
->
√ighb‹_2
->
√ighb‹_2_nbli°
.
√xt
->
√ighb‹
, &
two_h›_covîed_cou¡
);

415 
tmp
 = 
two_h›_li°
;

416 
two_h›_li°
 =Åwo_h›_li°->
√xt
;;

417 
	`‰ì
(
tmp
);

420 i‡(
two_h›_covîed_cou¡
 >
two_h›_cou¡
) {

421 
i
 = 
WILL_NEVER
;

426 (
m¥s
 = 
	`ﬁ§_föd_maximum_covîed
(
i
)Ë!
NULL
) {

428 
	`ﬁ§_cho£n_m¥
(
m¥s
, &
two_h›_covîed_cou¡
);

430 i‡(
two_h›_covîed_cou¡
 >
two_h›_cou¡
) {

431 
i
 = 
WILL_NEVER
;

444 
	`ﬁ§_›timize_m¥_£t
();

446 i‡(
	`ﬁ§_check_m¥_ch™ges
()) {

447 
	`OLSR_PRINTF
(3, "CHANGES IN MPR SET\n");

448 i‡(
ﬁ§_˙f
->
tc_ªdund™cy
 > 0)

449 
	`sig«l_lök_ch™ges
(
åue
);

452 
	}
}

464 
	$ﬁ§_›timize_m¥_£t
()

466 
√ighb‹_íåy
 *
a_√ighb‹
, *
dup_√ighb‹
;

467 
√ighb‹_2_li°_íåy
 *
two_h›_li°
;

468 
i
, 
ªmoveô
;

471 
	`¥ötf
("\n**MPR OPTIMIZING**\n\n");

474 
i
 = 
WILL_NEVER
 + 1; i < 
WILL_ALWAYS
; i++) {

476 
	`OLSR_FOR_ALL_NBR_ENTRIES
(
a_√ighb‹
) {

478 i‡(
a_√ighb‹
->
wûlög√ss
 !
i
) {

482 i‡(
a_√ighb‹
->
is_m¥
) {

483 
ªmoveô
 = 1;

485 
two_h›_li°
 = 
a_√ighb‹
->
√ighb‹_2_li°
.
√xt
;Åwo_hop_list != &a_neighbor->neighbor_2_list;

486 
two_h›_li°
 =Åwo_h›_li°->
√xt
) {

488 
dup_√ighb‹
 = 
	`ﬁ§_lookup_√ighb‹_èbÀ
(&
two_h›_li°
->
√ighb‹_2
->
√ighb‹_2_addr
);

490 i‡((
dup_√ighb‹
 !
NULL
Ë&& (dup_√ighb‹->
°©us
 !
NOT_SYM
)) {

495 i‡(
two_h›_li°
->
√ighb‹_2
->
m¥_covîed_cou¡
 <
ﬁ§_˙f
->
m¥_covîage
) {

496 
ªmoveô
 = 0;

500 i‡(
ªmoveô
) {

501 
ùaddr_°r
 
buf
;

502 
	`OLSR_PRINTF
(3, "MPR OPTIMIZE:Ñemovi⁄g m¥ %s\n\n", 
	`ﬁ§_ù_to_°rög
(&
buf
, &
a_√ighb‹
->
√ighb‹_maö_addr
));

503 
a_√ighb‹
->
is_m¥
 = 
Ál£
;

506 } 
	`OLSR_FOR_ALL_NBR_ENTRIES_END
(
a_√ighb‹
);

508 
	}
}

511 
	$ﬁ§_¥öt_m¥_£t
()

513 #i‚de‡
NODEBUG


515 
√ighb‹_íåy
 *
a_√ighb‹
;

517 
	`OLSR_PRINTF
(1, "MPR SET: ");

519 
	`OLSR_FOR_ALL_NBR_ENTRIES
(
a_√ighb‹
) {

524 i‡(
a_√ighb‹
->
is_m¥
) {

525 
ùaddr_°r
 
buf
;

526 
	`OLSR_PRINTF
(1, "[%s] ", 
	`ﬁ§_ù_to_°rög
(&
buf
, &
a_√ighb‹
->
√ighb‹_maö_addr
));

528 } 
	`OLSR_FOR_ALL_NBR_ENTRIES_END
(
a_√ighb‹
);

530 
	`OLSR_PRINTF
(1, "\n");

532 
	}
}

	@src/mpr.h

42 #i‚de‡
_OLSR_MPR


43 
	#_OLSR_MPR


	)

45 
ﬁ§_ˇlcuœã_m¥
();

47 
ﬁ§_¥öt_m¥_£t
();

	@src/mpr_selector_set.c

42 
	~"ùˇlc.h
"

43 
	~"defs.h
"

44 
	~"m¥_£À˘‹_£t.h
"

45 
	~"ﬁ§.h
"

46 
	~"scheduÀr.h
"

47 
	~"√t_ﬁ§.h
"

49 
uöt16_t
 
	g™¢
;

52 
m¥_£À˘‹
 
	gm¥s_li°
;

59 
	$ﬁ§_öô_m¥s_£t
()

61 
	`OLSR_PRINTF
(5, "MPRS: Init\n");

64 
™¢
 = 0;

66 
m¥s_li°
.
√xt
 = &mprs_list;

67 
m¥s_li°
.
¥ev
 = &mprs_list;

68 
	}
}

70 
uöt16_t


71 
	$gë_loˇl_™¢
()

73  
™¢
;

74 
	}
}

77 
	$ö¸ó£_loˇl_™¢
()

79 
™¢
++;

80 
	}
}

88 
boﬁ


89 
	$ﬁ§_is_m¥
()

91  ((
m¥s_li°
.
√xt
 =&m¥s_li°Ë? 
Ál£
 : 
åue
);

92 
	}
}

99 
	$ﬁ§_expúe_m¥_£l_íåy
(*
c⁄ãxt
)

101 #ifde‡
DEBUG


102 
ùaddr_°r
 
buf
;

104 
m¥_£À˘‹
 *
m¥_£l
;

106 
m¥_£l
 = (
m¥_£À˘‹
 *)
c⁄ãxt
;

107 
m¥_£l
->
MS_timî
 = 
NULL
;

109 #ifde‡
DEBUG


110 
	`OLSR_PRINTF
(1, "MPRS: Timög ouà%°\n", 
	`ﬁ§_ù_to_°rög
(&
buf
, &
m¥_£l
->
MS_maö_addr
));

113 
	`DEQUEUE_ELEM
(
m¥_£l
);

116 
	`‰ì
(
m¥_£l
);

117 
	`sig«l_lök_ch™ges
(
åue
);

118 
	}
}

127 
	$ﬁ§_£t_m¥_£l_timî
(
m¥_£À˘‹
 *
m¥_£l
, 
ﬁ§_ª…ime
 
ªl_timî
)

130 
	`ﬁ§_£t_timî
(&
m¥_£l
->
MS_timî
, 
ªl_timî
, 
OLSR_MPR_SEL_JITTER
, 
OLSR_TIMER_ONESHOT
, &
ﬁ§_expúe_m¥_£l_íåy
, mpr_sel, 0);

131 
	}
}

141 
m¥_£À˘‹
 *

142 
	$ﬁ§_add_m¥_£À˘‹
(c⁄° 
ﬁ§_ù_addr
 *
addr
, 
ﬁ§_ª…ime
 
vtime
)

144 
ùaddr_°r
 
buf
;

145 
m¥_£À˘‹
 *
√w_íåy
;

147 
	`OLSR_PRINTF
(1, "MPRS:áddög %s\n", 
	`ﬁ§_ù_to_°rög
(&
buf
, 
addr
));

149 
√w_íåy
 = 
	`ﬁ§_mÆloc
((
m¥_£À˘‹
), "Add MPR selector");

151 
√w_íåy
->
MS_maö_addr
 = *
addr
;

152 
	`ﬁ§_£t_m¥_£l_timî
(
√w_íåy
, 
vtime
);

154 
	`QUEUE_ELEM
(
m¥s_li°
, 
√w_íåy
);

161  
√w_íåy
;

162 
	}
}

172 
m¥_£À˘‹
 *

173 
	$ﬁ§_lookup_m¥s_£t
(c⁄° 
ﬁ§_ù_addr
 *
addr
)

175 
m¥_£À˘‹
 *
m¥s
;

177 i‡(
addr
 =
NULL
)

178  
NULL
;

181 
m¥s
 = 
m¥s_li°
.
√xt
; mprs != &mprs_list; mprs = mprs->next) {

182 i‡(
	`ùequÆ
(&
m¥s
->
MS_maö_addr
, 
addr
)) {

184  
m¥s
;

188  
NULL
;

189 
	}
}

201 
	$ﬁ§_upd©e_m¥s_£t
(c⁄° 
ﬁ§_ù_addr
 *
addr
, 
ﬁ§_ª…ime
 
vtime
)

203 
ùaddr_°r
 
buf
;

204 
m¥_£À˘‹
 *
m¥s
 = 
	`ﬁ§_lookup_m¥s_£t
(
addr
);

206 
	`OLSR_PRINTF
(5, "MPRS: Upd©ê%s\n", 
	`ﬁ§_ù_to_°rög
(&
buf
, 
addr
));

208 i‡(
m¥s
 =
NULL
) {

209 
	`ﬁ§_add_m¥_£À˘‹
(
addr
, 
vtime
);

210 
	`sig«l_lök_ch™ges
(
åue
);

213 
	`ﬁ§_£t_m¥_£l_timî
(
m¥s
, 
vtime
);

215 
	}
}

223 
	$ﬁ§_¥öt_m¥s_£t
()

225 
m¥_£À˘‹
 *
m¥s
;

226 
	`OLSR_PRINTF
(1, "MPR SELECTORS: ");

227 
m¥s
 = 
m¥s_li°
.
√xt
; mprs != &mprs_list; mprs = mprs->next) {

228 
ùaddr_°r
 
buf
;

229 
	`OLSR_PRINTF
(1, "%†", 
	`ﬁ§_ù_to_°rög
(&
buf
, &
m¥s
->
MS_maö_addr
));

231 
	`OLSR_PRINTF
(1, "\n");

232 
	}
}

	@src/mpr_selector_set.h

42 #i‚de‡
_OLSR_MPRS_SET


43 
	#_OLSR_MPRS_SET


	)

45 
	~"m™tisß.h
"

47 
	sm¥_£À˘‹
 {

48 
ﬁ§_ù_addr
 
	mMS_maö_addr
;

49 
timî_íåy
 *
	mMS_timî
;

50 
m¥_£À˘‹
 *
	m√xt
;

51 
m¥_£À˘‹
 *
	m¥ev
;

54 
	#OLSR_MPR_SEL_JITTER
 5

	)

57 
boﬁ
 
ﬁ§_is_m¥
();

60 
uöt16_t
 
gë_loˇl_™¢
();

62 
ö¸ó£_loˇl_™¢
();

64 
ﬁ§_öô_m¥s_£t
();

66 
m¥_£À˘‹
 *
ﬁ§_add_m¥_£À˘‹
(c⁄° 
ﬁ§_ù_addr
 *, 
ﬁ§_ª…ime
);

68 
m¥_£À˘‹
 *
ﬁ§_lookup_m¥s_£t
(c⁄° 
ﬁ§_ù_addr
 *);

70 
ﬁ§_upd©e_m¥s_£t
(c⁄° 
ﬁ§_ù_addr
 *, 
ﬁ§_ª…ime
);

72 
ﬁ§_time_out_m¥s_£t
();

75 
ﬁ§_¥öt_m¥s_£t
();

	@src/neighbor_table.c

42 
	~"ùˇlc.h
"

43 
	~"defs.h
"

44 
	~"two_h›_√ighb‹_èbÀ.h
"

45 
	~"mid_£t.h
"

46 
	~"m¥.h
"

47 
	~"√ighb‹_èbÀ.h
"

48 
	~"ﬁ§.h
"

49 
	~"scheduÀr.h
"

50 
	~"lök_£t.h
"

51 
	~"m¥_£À˘‹_£t.h
"

52 
	~"√t_ﬁ§.h
"

54 
√ighb‹_íåy
 
	g√ighb‹èbÀ
[
HASHSIZE
];

57 
	$ﬁ§_öô_√ighb‹_èbÀ
()

59 
i
;

61 
i
 = 0; i < 
HASHSIZE
; i++) {

62 
√ighb‹èbÀ
[
i
].
√xt
 = &neighbortable[i];

63 
√ighb‹èbÀ
[
i
].
¥ev
 = &neighbortable[i];

65 
	}
}

71 
	$ﬁ§_dñ_nbr2_li°
(
√ighb‹_2_li°_íåy
 *
nbr2_li°
)

73 
√ighb‹_2_íåy
 *
nbr2
;

75 
nbr2
 = 
nbr2_li°
->
√ighb‹_2
;

77 i‡(
nbr2
->
√ighb‹_2_poöãr
 < 1) {

78 
	`DEQUEUE_ELEM
(
nbr2
);

79 
	`‰ì
(
nbr2
);

85 
	`ﬁ§_°›_timî
(
nbr2_li°
->
nbr2_li°_timî
);

86 
nbr2_li°
->
nbr2_li°_timî
 = 
NULL
;

89 
	`DEQUEUE_ELEM
(
nbr2_li°
);

91 
	`‰ì
(
nbr2_li°
);

94 
ch™ges_√ighb‹hood
 = 
åue
;

95 
ch™ges_t›ﬁogy
 = 
åue
;

96 
	}
}

107 
	$ﬁ§_dñëe_√ighb‹_2_poöãr
(
√ighb‹_íåy
 *
√ighb‹
, 
√ighb‹_2_íåy
 *
√igh2
)

109 
√ighb‹_2_li°_íåy
 *
nbr2_li°
;

111 
nbr2_li°
 = 
√ighb‹
->
√ighb‹_2_li°
.
√xt
;

113 
nbr2_li°
 !&
√ighb‹
->
√ighb‹_2_li°
) {

114 i‡(
nbr2_li°
->
√ighb‹_2
 =
√igh2
) {

115 
	`ﬁ§_dñ_nbr2_li°
(
nbr2_li°
);

118 
nbr2_li°
 =Çbr2_li°->
√xt
;

121 
	}
}

134 
√ighb‹_2_li°_íåy
 *

135 
	$ﬁ§_lookup_my_√ighb‹s
(c⁄° 
√ighb‹_íåy
 *
√ighb‹
, c⁄° 
ﬁ§_ù_addr
 *
√ighb‹_maö_addªss
)

137 
√ighb‹_2_li°_íåy
 *
íåy
;

139 
íåy
 = 
√ighb‹
->
√ighb‹_2_li°
.
√xt
;Éntry != &neighbor->neighbor_2_list;Éntry =Éntry->next) {

141 i‡(
	`ùequÆ
(&
íåy
->
√ighb‹_2
->
√ighb‹_2_addr
, 
√ighb‹_maö_addªss
))

142  
íåy
;

145  
NULL
;

146 
	}
}

153 
	$ﬁ§_upd©e_√ighb‹_maö_addr
(
√ighb‹_íåy
 *
íåy
, c⁄° 
ﬁ§_ù_addr
 *
√w_maö_addr
)

156 
	`DEQUEUE_ELEM
(
íåy
);

159 
íåy
->
√ighb‹_maö_addr
 = *
√w_maö_addr
;

162 
	`QUEUE_ELEM
(
√ighb‹èbÀ
[
	`ﬁ§_ù_hashög
(
√w_maö_addr
)], 
íåy
);

164 
	}
}

177 
	$ﬁ§_dñëe_√ighb‹_èbÀ
(c⁄° 
ﬁ§_ù_addr
 *
√ighb‹_addr
)

179 
√ighb‹_2_li°_íåy
 *
two_h›_li°
, *
two_h›_to_dñëe
;

180 
uöt32_t
 
hash
;

181 
√ighb‹_íåy
 *
íåy
;

185 
hash
 = 
	`ﬁ§_ù_hashög
(
√ighb‹_addr
);

187 
íåy
 = 
√ighb‹èbÀ
[
hash
].
√xt
;

192 
íåy
 !&
√ighb‹èbÀ
[
hash
]) {

193 i‡(
	`ùequÆ
(&
íåy
->
√ighb‹_maö_addr
, 
√ighb‹_addr
))

196 
íåy
 =É¡ry->
√xt
;

199 i‡(
íåy
 =&
√ighb‹èbÀ
[
hash
])

202 
two_h›_li°
 = 
íåy
->
√ighb‹_2_li°
.
√xt
;

204 
two_h›_li°
 !&
íåy
->
√ighb‹_2_li°
) {

205 
two_h›_to_dñëe
 = 
two_h›_li°
;

206 
two_h›_li°
 =Åwo_h›_li°->
√xt
;

208 
two_h›_to_dñëe
->
√ighb‹_2
->
√ighb‹_2_poöãr
--;

209 
	`ﬁ§_dñëe_√ighb‹_poöãr
(
two_h›_to_dñëe
->
√ighb‹_2
, 
íåy
);

211 
	`ﬁ§_dñ_nbr2_li°
(
two_h›_to_dñëe
);

215 
	`DEQUEUE_ELEM
(
íåy
);

217 
	`‰ì
(
íåy
);

219 
ch™ges_√ighb‹hood
 = 
åue
;

222 
	}
}

231 
√ighb‹_íåy
 *

232 
	$ﬁ§_ö£π_√ighb‹_èbÀ
(c⁄° 
ﬁ§_ù_addr
 *
maö_addr
)

234 
uöt32_t
 
hash
;

235 
√ighb‹_íåy
 *
√w_√igh
;

237 
hash
 = 
	`ﬁ§_ù_hashög
(
maö_addr
);

241 
√w_√igh
 = 
√ighb‹èbÀ
[
hash
].
√xt
;Çew_neigh != &neighbortable[hash];Çew_neigh =Çew_neigh->next) {

242 i‡(
	`ùequÆ
(&
√w_√igh
->
√ighb‹_maö_addr
, 
maö_addr
))

243  
√w_√igh
;

248 
√w_√igh
 = 
	`ﬁ§_mÆloc
((
√ighb‹_íåy
), "NewÇeighborÉntry");

251 
√w_√igh
->
√ighb‹_maö_addr
 = *
maö_addr
;

252 
√w_√igh
->
wûlög√ss
 = 
WILL_NEVER
;

253 
√w_√igh
->
°©us
 = 
NOT_SYM
;

255 
√w_√igh
->
√ighb‹_2_li°
.
√xt
 = &new_neigh->neighbor_2_list;

256 
√w_√igh
->
√ighb‹_2_li°
.
¥ev
 = &new_neigh->neighbor_2_list;

258 
√w_√igh
->
lökcou¡
 = 0;

259 
√w_√igh
->
is_m¥
 = 
Ál£
;

260 
√w_√igh
->
was_m¥
 = 
Ál£
;

263 
	`QUEUE_ELEM
(
√ighb‹èbÀ
[
hash
], 
√w_√igh
);

265  
√w_√igh
;

266 
	}
}

276 
√ighb‹_íåy
 *

277 
	$ﬁ§_lookup_√ighb‹_èbÀ
(c⁄° 
ﬁ§_ù_addr
 *
d°
)

282 
ﬁ§_ù_addr
 *
tmp_ù
 = 
	`mid_lookup_maö_addr
(
d°
);

283 i‡(
tmp_ù
 !
NULL
)

284 
d°
 = 
tmp_ù
;

285  
	`ﬁ§_lookup_√ighb‹_èbÀ_Æüs
(
d°
);

286 
	}
}

296 
√ighb‹_íåy
 *

297 
	$ﬁ§_lookup_√ighb‹_èbÀ_Æüs
(c⁄° 
ﬁ§_ù_addr
 *
d°
)

299 
√ighb‹_íåy
 *
íåy
;

300 
uöt32_t
 
hash
 = 
	`ﬁ§_ù_hashög
(
d°
);

303 
íåy
 = 
√ighb‹èbÀ
[
hash
].
√xt
;Éntry != &neighbortable[hash];Éntry =Éntry->next) {

305 i‡(
	`ùequÆ
(&
íåy
->
√ighb‹_maö_addr
, 
d°
))

306  
íåy
;

311  
NULL
;

313 
	}
}

316 
	$upd©e_√ighb‹_°©us
(
√ighb‹_íåy
 *
íåy
, 
 k
)

322 i‡(
 k
 =
SYM_LINK
) {

324 i‡(
íåy
->
°©us
 =
NOT_SYM
) {

325 
√ighb‹_2_íåy
 *
two_h›_√ighb‹
;

328 i‡((
two_h›_√ighb‹
 = 
	`ﬁ§_lookup_two_h›_√ighb‹_èbÀ
(&
íåy
->
√ighb‹_maö_addr
)Ë!
NULL
) {

329 
	`ﬁ§_dñëe_two_h›_√ighb‹_èbÀ
(
two_h›_√ighb‹
);

332 
ch™ges_√ighb‹hood
 = 
åue
;

333 
ch™ges_t›ﬁogy
 = 
åue
;

334 i‡(
ﬁ§_˙f
->
tc_ªdund™cy
 > 1)

335 
	`sig«l_lök_ch™ges
(
åue
);

337 
íåy
->
°©us
 = 
SYM
;

339 i‡(
íåy
->
°©us
 =
SYM
) {

340 
ch™ges_√ighb‹hood
 = 
åue
;

341 
ch™ges_t›ﬁogy
 = 
åue
;

342 i‡(
ﬁ§_˙f
->
tc_ªdund™cy
 > 1)

343 
	`sig«l_lök_ch™ges
(
åue
);

346 
íåy
->
°©us
 = 
NOT_SYM
;

350  
íåy
->
°©us
;

351 
	}
}

357 
	$ﬁ§_expúe_nbr2_li°
(*
c⁄ãxt
)

359 
√ighb‹_2_li°_íåy
 *
nbr2_li°
;

360 
√ighb‹_íåy
 *
nbr
;

361 
√ighb‹_2_íåy
 *
nbr2
;

363 
nbr2_li°
 = (
√ighb‹_2_li°_íåy
 *)
c⁄ãxt
;

364 
nbr2_li°
->
nbr2_li°_timî
 = 
NULL
;

366 
nbr
 = 
nbr2_li°
->
nbr2_nbr
;

367 
nbr2
 = 
nbr2_li°
->
√ighb‹_2
;

369 
nbr2
->
√ighb‹_2_poöãr
--;

370 
	`ﬁ§_dñëe_√ighb‹_poöãr
(
nbr2
, 
nbr
);

372 
	`ﬁ§_dñ_nbr2_li°
(
nbr2_li°
);

373 
	}
}

382 
	$ﬁ§_¥öt_√ighb‹_èbÀ
()

384 #ifde‡
NODEBUG


386 #i‚de‡
NODEBUG


387 c⁄° 
ùÀn
 = 
ﬁ§_˙f
->
ù_vîsi⁄
 =
AF_INET
 ? 15 : 39;

389 
idx
;

390 
	`OLSR_PRINTF
(1,

392 "%*† LQ NLQ SYM MPR MPRS wûl\n", 
nowtm
->
tm_hour
,Çowtm->
tm_mö
,Çowtm->
tm_£c
, ()
now
.
tv_u£c
 / 10000,

393 
ùÀn
, "IPáddress");

395 
idx
 = 0; idx < 
HASHSIZE
; idx++) {

396 
√ighb‹_íåy
 *
√igh
;

397 
√igh
 = 
√ighb‹èbÀ
[
idx
].
√xt
;Çeigh != &neighbortable[idx];Çeigh =Çeigh->next) {

398 
lök_íåy
 *
 k
 = 
	`gë_be°_lök_to_√ighb‹
(&
√igh
->
√ighb‹_maö_addr
);

399 i‡(
 k
) {

400 
ùaddr_°r
 
buf
;

401 
	`OLSR_PRINTF
(1, "%-*† %5.3‡ %5.3‡ %† %† %† %d\n", 
ùÀn
, 
	`ﬁ§_ù_to_°rög
(&
buf
, &
√igh
->
√ighb‹_maö_addr
),

402 
 k
->
loss_lök_quÆôy
,Ünk->
√igh_lök_quÆôy
, 
√igh
->
°©us
 =
SYM
 ? "YES " : "NO ",

403 
√igh
->
is_m¥
 ? "YES " : "NO ", 
	`ﬁ§_lookup_m¥s_£t
(&√igh->
√ighb‹_maö_addr
Ë=
NULL
 ? "NO " : "YES ",

404 
√igh
->
wûlög√ss
);

409 
	}
}

	@src/neighbor_table.h

42 #i‚de‡
_OLSR_NEIGH_TBL


43 
	#_OLSR_NEIGH_TBL


	)

45 
	~"ﬁ§_ty≥s.h
"

46 
	~"hashög.h
"

48 
	s√ighb‹_2_li°_íåy
 {

49 
√ighb‹_íåy
 *
	mnbr2_nbr
;

50 
√ighb‹_2_íåy
 *
	m√ighb‹_2
;

51 
timî_íåy
 *
	mnbr2_li°_timî
;

52 
√ighb‹_2_li°_íåy
 *
	m√xt
;

53 
√ighb‹_2_li°_íåy
 *
	m¥ev
;

56 
	#OLSR_NBR2_LIST_JITTER
 5

	)

58 
	s√ighb‹_íåy
 {

59 
ﬁ§_ù_addr
 
	m√ighb‹_maö_addr
;

60 
uöt8_t
 
	m°©us
;

61 
uöt8_t
 
	mwûlög√ss
;

62 
boﬁ
 
	mis_m¥
;

63 
boﬁ
 
	mwas_m¥
;

64 
boﬁ
 
	mskù
;

65 
	m√ighb‹_2_nocov
;

66 
	mlökcou¡
;

67 
√ighb‹_2_li°_íåy
 
	m√ighb‹_2_li°
;

68 
√ighb‹_íåy
 *
	m√xt
;

69 
√ighb‹_íåy
 *
	m¥ev
;

72 
	#OLSR_FOR_ALL_NBR_ENTRIES
(
nbr
) \

74 
_idx
; \

75 
_idx
 = 0; _idx < 
HASHSIZE
; _idx++) { \

76 
nbr
 = 
√ighb‹èbÀ
[
_idx
].
√xt
; \

77 
nbr
 !&
√ighb‹èbÀ
[
_idx
]; \

78 
nbr
 =Çbr->
√xt
)

	)

79 
	#OLSR_FOR_ALL_NBR_ENTRIES_END
(
nbr
Ë}}

	)

84 
√ighb‹_íåy
 
√ighb‹èbÀ
[
HASHSIZE
];

86 
ﬁ§_öô_√ighb‹_èbÀ
();

88 
ﬁ§_dñëe_√ighb‹_2_poöãr
(
√ighb‹_íåy
 *, 
√ighb‹_2_íåy
 *);

90 
√ighb‹_2_li°_íåy
 *
ﬁ§_lookup_my_√ighb‹s
(c⁄° 
√ighb‹_íåy
 *, c⁄° 
ﬁ§_ù_addr
 *);

92 
ﬁ§_dñëe_√ighb‹_èbÀ
(c⁄° 
ﬁ§_ù_addr
 *);

94 
√ighb‹_íåy
 *
ﬁ§_ö£π_√ighb‹_èbÀ
(c⁄° 
ﬁ§_ù_addr
 *);

96 
√ighb‹_íåy
 *
ﬁ§_lookup_√ighb‹_èbÀ
(c⁄° 
ﬁ§_ù_addr
 *);

98 
√ighb‹_íåy
 *
ﬁ§_lookup_√ighb‹_èbÀ_Æüs
(c⁄° 
ﬁ§_ù_addr
 *);

100 
ﬁ§_time_out_two_h›_√ighb‹s
(
√ighb‹_íåy
 *);

102 
ﬁ§_time_out_√ighb‹hood_èbÀs
();

103 
ﬁ§_expúe_nbr2_li°
(*);

105 
ﬁ§_¥öt_√ighb‹_èbÀ
();

107 
ﬁ§_upd©e_√ighb‹_maö_addr
(
√ighb‹_íåy
 *, c⁄° 
ﬁ§_ù_addr
 *);

109 
upd©e_√ighb‹_°©us
(
√ighb‹_íåy
 *, );

	@src/net_olsr.c

42 
	~"√t_ﬁ§.h
"

43 
	~"ùˇlc.h
"

44 
	~"log.h
"

45 
	~"ﬁ§.h
"

46 
	~"√t_os.h
"

47 
	~"¥öt_∑ckë.h
"

48 
	~"lök_£t.h
"

49 
	~"lq_∑ckë.h
"

51 
	~<°dlib.h
>

52 
	~<as£π.h
>

53 
	~<limôs.h
>

55 
boﬁ
 
	gdi•_∑ck_out
 = 
Ál£
;

57 #ifde‡
WIN32


58 
	#≥º‹
(
x
Ë
	`WöSockPEº‹
(x)

	)

59 
WöSockPEº‹
(const *);

62 
	sdíy_addªss_íåy
 {

63 
ﬁ§_ù_addr
 
	maddr
;

64 
díy_addªss_íåy
 *
	m√xt
;

69 
	s±f
 {

70 
∑ckë_å™sf‹m_fun˘i⁄
 
	mfun˘i⁄
;

71 
±f
 *
	m√xt
;

74 
±f
 *
	g±f_li°
;

76 
díy_addªss_íåy
 *
	gdíy_íåõs
;

78 c⁄° *c⁄° 
	gdíy_ùv4_deÁu…s
[] = {

81 
NULL


84 c⁄° *c⁄° 
	gdíy_ùv6_deÁu…s
[] = {

87 
NULL


91 
	$√t_£t_di•_∑ck_out
(
boﬁ
 
vÆ
)

93 
di•_∑ck_out
 = 
vÆ
;

94 
	}
}

103 
	$öô_√t
()

105 c⁄° *c⁄° *
deÁu…s
 = (
ﬁ§_˙f
->
ù_vîsi⁄
 =
AF_INET
Ë? 
díy_ùv4_deÁu…s
 : 
díy_ùv6_deÁu…s
;

107 ; *
deÁu…s
 !
NULL
; defaults++) {

108 
ﬁ§_ù_addr
 
addr
;

109 i‡(
	`öë_±⁄
(
ﬁ§_˙f
->
ù_vîsi⁄
, *
deÁu…s
, &
addr
) <= 0) {

110 
	`Ârötf
(
°dîr
, "Eº‹ c⁄vîtög fixed IP %†f‹ díyÑuÀ!!\n", *
deÁu…s
);

113 
	`ﬁ§_add_övÆid_addªss
(&
addr
);

115 
	}
}

128 
	$√t_add_buf„r
(
öãrÁ˚
 *
iÂ
)

133 i‡(
iÂ
->
√tbuf
.
bufsize
 !iÂ->
öt_mtu
 && iÂ->√tbuf.
buff
 !
NULL
) {

134 
	`‰ì
(
iÂ
->
√tbuf
.
buff
);

135 
iÂ
->
√tbuf
.
buff
 = 
NULL
;

138 i‡(
iÂ
->
√tbuf
.
buff
 =
NULL
) {

139 
iÂ
->
√tbuf
.
buff
 = 
	`ﬁ§_mÆloc
(iÂ->
öt_mtu
, "add_netbuff");

143 
iÂ
->
√tbuf
.
bufsize
 = iÂ->
öt_mtu
;

144 
iÂ
->
√tbuf
.
maxsize
 = iÂ->
öt_mtu
 - 
OLSR_HEADERSIZE
;

146 
iÂ
->
√tbuf
.
≥ndög
 = 0;

147 
iÂ
->
√tbuf
.
ª£rved
 = 0;

150 
	}
}

161 
	$√t_ªmove_buf„r
(
öãrÁ˚
 *
iÂ
)

164 i‡(
iÂ
->
√tbuf
.
≥ndög
)

165 
	`√t_ouçut
(
iÂ
);

167 
	`‰ì
(
iÂ
->
√tbuf
.
buff
);

168 
iÂ
->
√tbuf
.
buff
 = 
NULL
;

171 
	}
}

188 
	$√t_ª£rve_buf•a˚
(
öãrÁ˚
 *
iÂ
, 
size
)

190 i‡(
size
 > 
iÂ
->
√tbuf
.
maxsize
)

193 
iÂ
->
√tbuf
.
ª£rved
 = 
size
;

194 
iÂ
->
√tbuf
.
maxsize
 -
size
;

197 
	}
}

207 
uöt16_t


208 
	$√t_ouçut_≥ndög
(c⁄° 
öãrÁ˚
 * 
iÂ
)

210  
iÂ
->
√tbuf
.
≥ndög
;

211 
	}
}

225 
	$√t_outbuf„r_push
(
öãrÁ˚
 *
iÂ
, c⁄° *
d©a
, c⁄° 
uöt16_t
 
size
)

227 i‡((
iÂ
->
√tbuf
.
≥ndög
 + 
size
Ë> iÂ->√tbuf.
maxsize
)

230 
	`mem˝y
(&
iÂ
->
√tbuf
.
buff
[iÂ->√tbuf.
≥ndög
 + 
OLSR_HEADERSIZE
], 
d©a
, 
size
);

231 
iÂ
->
√tbuf
.
≥ndög
 +
size
;

233  
size
;

234 
	}
}

248 
	$√t_outbuf„r_push_ª£rved
(
öãrÁ˚
 *
iÂ
, c⁄° *
d©a
, c⁄° 
uöt16_t
 
size
)

250 i‡((
iÂ
->
√tbuf
.
≥ndög
 + 
size
Ë> (iÂ->√tbuf.
maxsize
 + iÂ->√tbuf.
ª£rved
))

253 
	`mem˝y
(&
iÂ
->
√tbuf
.
buff
[iÂ->√tbuf.
≥ndög
 + 
OLSR_HEADERSIZE
], 
d©a
, 
size
);

254 
iÂ
->
√tbuf
.
≥ndög
 +
size
;

256  
size
;

257 
	}
}

268 
	$√t_outbuf„r_byãs_À·
(c⁄° 
öãrÁ˚
 *
iÂ
)

270  
iÂ
->
√tbuf
.
maxsize
 - iÂ->√tbuf.
≥ndög
;

271 
	}
}

282 
	$add_±f
(
∑ckë_å™sf‹m_fun˘i⁄
 
f
)

285 
±f
 *
√w_±f
;

287 
√w_±f
 = 
	`ﬁ§_mÆloc
((
±f
), "Add PTF");

289 
√w_±f
->
√xt
 = 
±f_li°
;

290 
√w_±f
->
fun˘i⁄
 = 
f
;

292 
±f_li°
 = 
√w_±f
;

295 
	}
}

306 
	$dñ_±f
(
∑ckë_å™sf‹m_fun˘i⁄
 
f
)

308 
±f
 *
¥ev
 = 
NULL
;

309 
±f
 *
tmp_±f
 = 
±f_li°
;

310 
tmp_±f
) {

311 i‡(
tmp_±f
->
fun˘i⁄
 =
f
) {

313 i‡(
¥ev
 =
NULL
)

314 
±f_li°
 = 
tmp_±f
->
√xt
;

316 
¥ev
->
√xt
 = 
tmp_±f
->next;

317 
	`‰ì
(
tmp_±f
);

320 
¥ev
 = 
tmp_±f
;

321 
tmp_±f
 =Åmp_±f->
√xt
;

325 
	}
}

335 
	$√t_ouçut
(
öãrÁ˚
 *
iÂ
)

337 
sockaddr_ö
 *
sö
 = 
NULL
;

338 
sockaddr_ö6
 *
sö6
 = 
NULL
;

339 
±f
 *
tmp_±f_li°
;

340 
ﬁ§_∑ckë
 *
outmsg
;

341 
ªtvÆ
;

343 i‡(!
iÂ
->
√tbuf
.
≥ndög
)

346 
iÂ
->
√tbuf
.
≥ndög
 +
OLSR_HEADERSIZE
;

348 
ªtvÆ
 = 
iÂ
->
√tbuf
.
≥ndög
;

350 
outmsg
 = (
ﬁ§_∑ckë
 *)
iÂ
->
√tbuf
.
buff
;

352 
outmsg
->
v4
.
ﬁ§_£qno
 = 
	`ht⁄s
(
iÂ
->
ﬁ§_£qnum
++);

354 
outmsg
->
v4
.
ﬁ§_∑ckÀn
 = 
	`ht⁄s
(
iÂ
->
√tbuf
.
≥ndög
);

356 i‡(
ﬁ§_˙f
->
ù_vîsi⁄
 =
AF_INET
) {

357 
sockaddr_ö
 
d°
;

359 
sö
 = (
sockaddr_ö
 *)&
iÂ
->
öt_brﬂdaddr
;

362 
d°
 = *
sö
;

363 
sö
 = &
d°
;

365 i‡(
sö
->
sö_p‹t
 == 0)

366 
sö
->
sö_p‹t
 = 
	`ht⁄s
(
ﬁ§_˙f
->
ﬁ§p‹t
);

368 
sockaddr_ö6
 
d°6
;

370 
sö6
 = (
sockaddr_ö6
 *)&
iÂ
->
öt6_mu…addr
;

372 
d°6
 = *
sö6
;

373 
sö6
 = &
d°6
;

379 
tmp_±f_li°
 = 
±f_li°
;Åmp_±f_li° !
NULL
;Åmp_±f_li° =Åmp_±f_li°->
√xt
) {

380 
tmp_±f_li°
->
	`fun˘i⁄
(
iÂ
->
√tbuf
.
buff
, &iÂ->√tbuf.
≥ndög
);

387 i‡(
di•_∑ck_out
)

388 
	`¥öt_ﬁ§_£rülized_∑ckë
(
°dout
, (
ﬁ§_∑ckë
 *)
iÂ
->
√tbuf
.
buff
, iÂ->√tbuf.
≥ndög
, &iÂ->
ù_addr
);

390 i‡(
ﬁ§_˙f
->
ù_vîsi⁄
 =
AF_INET
) {

392 i‡(
	`ﬁ§_£ndto
(
iÂ
->
£nd_sockë
, iÂ->
√tbuf
.
buff
, iÂ->√tbuf.
≥ndög
, 
MSG_DONTROUTE
, (
sockaddr
 *)
sö
, (*sin)) <

394 
	`≥º‹
("sendto(v4)");

395 #i‚de‡
WIN32


396 
	`ﬁ§_sy¶og
(
OLSR_LOG_ERR
, "OLSR: sendto IPv4 %m");

398 
ªtvÆ
 = -1;

402 i‡(
	`ﬁ§_£ndto
(
iÂ
->
£nd_sockë
, iÂ->
√tbuf
.
buff
, iÂ->√tbuf.
≥ndög
, 
MSG_DONTROUTE
, (
sockaddr
 *)
sö6
, (*sin6))

404 
ùaddr_°r
 
buf
;

405 
	`≥º‹
("sendto(v6)");

406 #i‚de‡
WIN32


407 
	`ﬁ§_sy¶og
(
OLSR_LOG_ERR
, "OLSR: sendto IPv6 %m");

409 
	`Ârötf
(
°dîr
, "Sockë: %d i¡îÁ˚: %d\n", 
iÂ
->
ﬁ§_sockë
, iÂ->
if_ödex
);

410 
	`Ârötf
(
°dîr
, "To: %†(size: %u)\n", 
	`ù6_to_°rög
(&
buf
, &
sö6
->
sö6_addr
), ()(*sin6));

411 
	`Ârötf
(
°dîr
, "Ouçutsize: %d\n", 
iÂ
->
√tbuf
.
≥ndög
);

412 
ªtvÆ
 = -1;

416 
iÂ
->
√tbuf
.
≥ndög
 = 0;

423 
lq_tc_≥ndög
 = 
Ál£
;

425  
ªtvÆ
;

426 
	}
}

432 
	$ﬁ§_add_övÆid_addªss
(c⁄° 
ﬁ§_ù_addr
 *
adr
)

434 
ùaddr_°r
 
buf
;

435 
díy_addªss_íåy
 *
√w_íåy
 = 
	`ﬁ§_mÆloc
((deny_address_entry), "Add denyáddress");

437 
√w_íåy
->
addr
 = *
adr
;

438 
√w_íåy
->
√xt
 = 
díy_íåõs
;

439 
díy_íåõs
 = 
√w_íåy
;

440 
	`OLSR_PRINTF
(1, "Added %†tÿIP díy së\n", 
	`ﬁ§_ù_to_°rög
(&
buf
, &
√w_íåy
->
addr
));

441 
	}
}

443 
boﬁ


444 
	$ﬁ§_vÆid©e_addªss
(c⁄° 
ﬁ§_ù_addr
 *
adr
)

446 c⁄° 
díy_addªss_íåy
 *
díy_íåy
;

448 
díy_íåy
 = 
díy_íåõs
; díy_íåy !
NULL
; díy_íåy = díy_íåy->
√xt
) {

449 i‡(
	`ùequÆ
(
adr
, &
díy_íåy
->
addr
)) {

450 
ùaddr_°r
 
buf
;

451 
	`OLSR_PRINTF
(1, "VÆid©i⁄ o‡addªs†%†Áûed!\n", 
	`ﬁ§_ù_to_°rög
(&
buf
, 
adr
));

452  
Ál£
;

454 i‡(
díy_íåy
 =(
díy_addªss_íåy
 *)&
ﬁ§_˙f
->
maö_addr
)

457  
åue
;

458 
	}
}

	@src/net_olsr.h

42 #i‚de‡
_NET_OLSR


43 
	#_NET_OLSR


	)

45 
	~"ﬁ§_ty≥s.h
"

46 
	~"öãrÁ˚s.h
"

47 
	~"¥o˚ss_rouãs.h
"

49 
	~<¨∑/öë.h
>

50 
	~<√t/if.h
>

52 (*
	t∑ckë_å™sf‹m_fun˘i⁄
Ë(
	tuöt8_t
 *, *);

54 
	`√t_£t_di•_∑ck_out
(
boﬁ
);

56 
	`öô_√t
();

58 
	`√t_add_buf„r
(
öãrÁ˚
 *);

60 
	`√t_ªmove_buf„r
(
öãrÁ˚
 *);

62 
	`√t_outbuf„r_byãs_À·
(c⁄° 
öãrÁ˚
 *);

64 
uöt16_t
 
	`√t_ouçut_≥ndög
(c⁄° 
öãrÁ˚
 *);

66 
	`√t_ª£rve_buf•a˚
(
öãrÁ˚
 *, );

68 
	`√t_outbuf„r_push
(
öãrÁ˚
 *, c⁄° *, c⁄° 
uöt16_t
);

70 
	`√t_outbuf„r_push_ª£rved
(
öãrÁ˚
 *, c⁄° *, c⁄° 
uöt16_t
);

72 
	`√t_ouçut
(
öãrÁ˚
 *);

74 
	`√t_£ndrouã
(
π_íåy
 *, 
sockaddr
 *);

76 
	`add_±f
(
∑ckë_å™sf‹m_fun˘i⁄
);

78 
	`dñ_±f
(
∑ckë_å™sf‹m_fun˘i⁄
);

80 
boﬁ
 
	`ﬁ§_vÆid©e_addªss
(c⁄° 
ﬁ§_ù_addr
 *);

82 
	`ﬁ§_add_övÆid_addªss
(c⁄° 
ﬁ§_ù_addr
 *);

	@src/net_os.h

49 #i‚de‡
_OLSR_NET_OS_H


50 
	#_OLSR_NET_OS_H


	)

52 
	~"ﬁ§_ty≥s.h
"

53 
	~"öãrÁ˚s.h
"

56 
ssize_t
 
ﬁ§_£ndto
(, c⁄° *, 
size_t
, , c⁄° 
sockaddr
 *, 
sockÀn_t
);

58 
ssize_t
 
ﬁ§_ªcv‰om
(, *, 
size_t
, , 
sockaddr
 *, 
sockÀn_t
 *);

60 
ﬁ§_£À˘
(, 
fd_£t
 *, fd_£à*, fd_£à*, 
timevÆ
 *);

62 
böd_sockë_to_devi˚
(, *);

64 
c⁄vît_ù_to_mac
(
ﬁ§_ù_addr
 *, 
sockaddr
 *, *);

66 
√t_os_£t_globÆ_if›ti⁄s
();

67 
√t_os_£t_if›ti⁄s
(c⁄° *
if_«me
, 
öãrÁ˚
 *
iÁ˚
);

68 
√t_os_ª°‹e_if›ti⁄s
();

70 
gëhemusockë
(
sockaddr_ö
 *);

72 
gësockë
(, 
öãrÁ˚
 *);

74 
gësockë6
(, 
öãrÁ˚
 *);

76 
gë_ùv6_addªss
(*, 
sockaddr_ö6
 *, 
ﬁ§_ù_¥efix
 *);

78 
ˇlcuœã_if_mëric
(*);

80 
check_wúñess_öãrÁ˚
(*);

82 
boﬁ
 
is_if_lök_up
(*);

84 
joö_mˇ°
(
öãrÁ˚
 *, );

86 
boﬁ
 
ﬁ§_if_isup
(c⁄° * 
dev
);

87 
ﬁ§_if_£t_°©e
(c⁄° *
dev
, 
boﬁ
 
up
);

	@src/olsr.c

46 
	~"defs.h
"

47 
	~"ﬁ§.h
"

48 
	~"lök_£t.h
"

49 
	~"two_h›_√ighb‹_èbÀ.h
"

50 
	~"tc_£t.h
"

51 
	~"du∂iˇã_£t.h
"

52 
	~"m¥_£À˘‹_£t.h
"

53 
	~"mid_£t.h
"

54 
	~"m¥.h
"

55 
	~"lq_m¥.h
"

56 
	~"ﬁ§_•f.h
"

57 
	~"scheduÀr.h
"

58 
	~"≠m.h
"

59 
	~"misc.h
"

60 
	~"√ighb‹_èbÀ.h
"

61 
	~"log.h
"

62 
	~"lq_∑ckë.h
"

63 
	~"comm⁄/avl.h
"

64 
	~"√t_ﬁ§.h
"

65 
	~"lq_∂ugö.h
"

66 
	~"g©eway.h
"

67 
	~"du∂iˇã_h™dÀr.h
"

69 
	~<°d¨g.h
>

70 
	~<sig«l.h
>

71 
	~<uni°d.h
>

73 
boﬁ
 
	gch™ges_t›ﬁogy
;

74 
boﬁ
 
	gch™ges_√ighb‹hood
;

75 
boﬁ
 
	gch™ges_h«
;

76 
boﬁ
 
	gch™ges_f‹˚
;

80 #ifde‡
OLSR_COLLECT_STARTUP_SLEEP


81 
	gmax_°¨tup_¶ìp
 = 0;

83 
	gsum_°¨tup_¶ìp
 = 0;

85 
	$ﬁ§_°¨tup_¶ìp
(
s
)

87 
sum_°¨tup_¶ìp
 +
s
;

88 #ifde‡
OLSR_COLLECT_STARTUP_SLEEP


89 i‡(
s
 > 
max_°¨tup_¶ìp
) max_startup_sleep=s;

91 
	`¶ìp
(
s
);

93 
	}
}

95 
	$ﬁ§_do_°¨tup_¶ìp
()

97 #ifde‡
OLSR_COLLECT_STARTUP_SLEEP


98 i‡(
sum_°¨tup_¶ìp
 > 
max_°¨tup_¶ìp
)

99 
	`¥ötf
("OLSRÉncountered multipleÖroblems on startup, which should delay startup by %i seconds.\nAsÅhis is quite muchÅime, OLSR will sleep only %i seconds.\nBUT YOU SHOULD FIX ABOVE PROBLEMS!\n",

100 
sum_°¨tup_¶ìp
,
max_°¨tup_¶ìp
);

101 
	`¶ìp
(
max_°¨tup_¶ìp
);

103 i‡(
sum_°¨tup_¶ìp
 > 0)

104 
	`¥ötf
("olsrd startup was delayed %i seconds dueÅo variousÇastyÉrror messages.\nYOU SHOULD REALLY FIX ABOVE PROBLEMS!\n",

105 
sum_°¨tup_¶ìp
);

107 
	}
}

113 
	spcf
 {

114 (*
	mfun˘i⁄
) (, , );

115 
pcf
 *
	m√xt
;

118 
pcf
 *
	gpcf_li°
;

120 
uöt16_t
 
	gmesßge_£qno
;

121 
ﬁ§_ù_addr
 
	gÆl_zîo
;

127 
	$öô_msg_£qno
()

129 
mesßge_£qno
 = 
	`øndom
() & 0xFFFF;

130 
	}
}

137 
uöt16_t


138 
	$gë_msg_£qno
()

140  
mesßge_£qno
++;

141 
	}
}

143 
boﬁ


144 
	$ﬁ§_is_bad_du∂iˇã_msg_£qno
(
uöt16_t
 
£qno
) {

145 
öt32_t
 
diff
 = (öt32_tË
£qno
 - (öt32_tË
mesßge_£qno
;

147 i‡(
diff
 < -32768) {

148 
diff
 += 65536;

150 i‡(
diff
 > 32767) {

151 
diff
 -= 65536;

153  
diff
 > 0;

154 
	}
}

157 
ªgi°î_pcf
((*
f
) (, , ))

159 
pcf
 *
√w_pcf
;

161 
	`OLSR_PRINTF
(1, "RegisteringÖcf function\n");

163 
√w_pcf
 = 
	`ﬁ§_mÆloc
((
pcf
), "New PCF");

165 
√w_pcf
->
fun˘i⁄
 = 
f
;

166 
√w_pcf
->
√xt
 = 
pcf_li°
;

167 
pcf_li°
 = 
√w_pcf
;

169 
	}
}

179 
	$ﬁ§_¥o˚ss_ch™ges
()

181 
pcf
 *
tmp_pc_li°
;

183 #ifde‡
DEBUG


184 i‡(
ch™ges_√ighb‹hood
)

185 
	`OLSR_PRINTF
(3, "CHANGES IN NEIGHBORHOOD\n");

186 i‡(
ch™ges_t›ﬁogy
)

187 
	`OLSR_PRINTF
(3, "CHANGES IN TOPOLOGY\n");

188 i‡(
ch™ges_h«
)

189 
	`OLSR_PRINTF
(3, "CHANGES IN HNA\n");

192 i‡(!
ch™ges_√ighb‹hood
 && !
ch™ges_t›ﬁogy
 && !
ch™ges_h«
)

195 i‡(
ﬁ§_˙f
->
debug_Àvñ
 > 0 && ol§_˙f->
˛ór_s¸ìn
 && 
	`ißây
(1)) {

196 
	`˛ór_c⁄sﬁe
();

197 
	`¥ötf
(" *** %†(%†⁄ %sË***\n", 
ﬁ§d_vîsi⁄
, 
buûd_d©e
, 
buûd_ho°
);

200 i‡(
ch™ges_√ighb‹hood
) {

201 i‡(
ﬁ§_˙f
->
lq_Àvñ
 < 1) {

202 
	`ﬁ§_ˇlcuœã_m¥
();

204 
	`ﬁ§_ˇlcuœã_lq_m¥
();

209 i‡(
ch™ges_√ighb‹hood
 || 
ch™ges_t›ﬁogy
 || 
ch™ges_h«
) {

210 
	`ﬁ§_ˇlcuœã_routög_èbÀ
(
Ál£
);

213 i‡(
ﬁ§_˙f
->
debug_Àvñ
 > 0) {

214 i‡(
ﬁ§_˙f
->
debug_Àvñ
 > 2) {

215 
	`ﬁ§_¥öt_mid_£t
();

216 #ifde‡
LINUX_NETLINK_ROUTING


217 
	`ﬁ§_¥öt_g©eway_íåõs
();

220 i‡(
ﬁ§_˙f
->
debug_Àvñ
 > 3) {

221 i‡(
ﬁ§_˙f
->
debug_Àvñ
 > 8) {

222 
	`ﬁ§_¥öt_du∂iˇã_èbÀ
();

224 
	`ﬁ§_¥öt_h«_£t
();

227 
	`ﬁ§_¥öt_lök_£t
();

228 
	`ﬁ§_¥öt_√ighb‹_èbÀ
();

229 
	`ﬁ§_¥öt_two_h›_√ighb‹_èbÀ
();

230 i‡(
ﬁ§_˙f
->
debug_Àvñ
 > 3) {

231 
	`ﬁ§_¥öt_tc_èbÀ
();

235 
tmp_pc_li°
 = 
pcf_li°
;Åmp_pc_li° !
NULL
;Åmp_pc_li° =Åmp_pc_li°->
√xt
) {

236 
tmp_pc_li°
->
	`fun˘i⁄
(
ch™ges_√ighb‹hood
, 
ch™ges_t›ﬁogy
, 
ch™ges_h«
);

239 
ch™ges_√ighb‹hood
 = 
Ál£
;

240 
ch™ges_t›ﬁogy
 = 
Ál£
;

241 
ch™ges_h«
 = 
Ál£
;

242 
ch™ges_f‹˚
 = 
Ál£
;

243 
	}
}

251 
	$ﬁ§_öô_èbÀs
()

253 
ch™ges_t›ﬁogy
 = 
Ál£
;

254 
ch™ges_√ighb‹hood
 = 
Ál£
;

255 
ch™ges_h«
 = 
Ál£
;

258 i‡(
ﬁ§_˙f
->
ùsize
 == 4) {

259 
avl_comp_deÁu…
 = 
avl_comp_ùv4
;

260 
avl_comp_¥efix_deÁu…
 = 
avl_comp_ùv4_¥efix
;

262 
avl_comp_deÁu…
 = 
avl_comp_ùv6
;

263 
avl_comp_¥efix_deÁu…
 = 
avl_comp_ùv6_¥efix
;

267 
	`öô_lq_h™dÀr_åì
();

270 
	`ﬁ§_öô_lök_£t
();

273 
	`ﬁ§_öô_du∂iˇã_£t
();

276 
	`ﬁ§_öô_√ighb‹_èbÀ
();

279 
	`ﬁ§_öô_routög_èbÀ
();

282 
	`ﬁ§_öô_two_h›_èbÀ
();

285 
	`ﬁ§_öô_tc
();

288 
	`ﬁ§_öô_m¥s_£t
();

291 
	`ﬁ§_öô_mid_£t
();

294 
	`ﬁ§_öô_h«_£t
();

297 #i‚de‡
NO_DUPLICATE_DETECTION_HANDLER


298 
	`ﬁ§_du∂iˇã_h™dÀr_öô
();

300 
	}
}

312 
	$ﬁ§_f‹w¨d_mesßge
(
ﬁ§_mesßge
 *
m
, 
öãrÁ˚
 *
ö_if
, 
ﬁ§_ù_addr
 *
‰om_addr
)

314 
ﬁ§_ù_addr
 *
§c
;

315 
√ighb‹_íåy
 *
√ighb‹
;

316 
msgsize
;

317 
öãrÁ˚
 *
i‚
;

318 
boﬁ
 
is_âl_1
 = 
Ál£
;

325 i‡(
AF_INET
 =
ﬁ§_˙f
->
ù_vîsi⁄
) {

326 i‡(
m
->
v4
.
âl
 < 2 || 255 < ()m->v4.
h›˙t
 + ()m->v4.ttl)

327 
is_âl_1
 = 
åue
;

329 i‡(
m
->
v6
.
âl
 < 2 || 255 < ()m->v6.
h›˙t
 + ()m->v6.ttl)

330 
is_âl_1
 = 
åue
;

334 
§c
 = 
	`mid_lookup_maö_addr
(
‰om_addr
);

335 i‡(!
§c
)

336 
§c
 = 
‰om_addr
;

338 
√ighb‹
 = 
	`ﬁ§_lookup_√ighb‹_èbÀ
(
§c
);

339 i‡(!
√ighb‹
)

342 i‡(
√ighb‹
->
°©us
 !
SYM
)

346 i‡(
	`ﬁ§_lookup_m¥s_£t
(
§c
Ë=
NULL
) {

347 #ifde‡
DEBUG


348 
ùaddr_°r
 
buf
;

349 
	`OLSR_PRINTF
(5, "F‹w¨d - sídî %†nŸ MPR sñe˘‹\n", 
	`ﬁ§_ù_to_°rög
(&
buf
, 
§c
));

354 i‡(
	`ﬁ§_mesßge_is_du∂iˇã
(
m
)) {

359 i‡(!
is_âl_1
) {

360 i‡(
ﬁ§_˙f
->
ù_vîsi⁄
 =
AF_INET
) {

362 
m
->
v4
.
h›˙t
++;

363 
m
->
v4
.
âl
--;

366 
m
->
v6
.
h›˙t
++;

367 
m
->
v6
.
âl
--;

372 
msgsize
 = 
	`¡ohs
(
m
->
v4
.
ﬁ§_msgsize
);

375 
i‚
 = 
i‚ë
; i‚; i‚ = i‚->
öt_√xt
) {

377 i‡(
i‚
 =
ö_if
 && i‚->
mode
 =
IF_MODE_ETHER
) ;

380 i‡(
is_âl_1
 && 
i‚
->
mode
 !
IF_MODE_ETHER
) ;

382 i‡(
	`√t_ouçut_≥ndög
(
i‚
)) {

386 i‡(
	`√t_outbuf„r_push
(
i‚
, 
m
, 
msgsize
) != msgsize) {

388 
	`√t_ouçut
(
i‚
);

390 
	`£t_buf„r_timî
(
i‚
);

392 i‡(
	`√t_outbuf„r_push
(
i‚
, 
m
, 
msgsize
) != msgsize) {

393 
	`OLSR_PRINTF
(1, "Re˚ived mesßgêtÿbigÅÿbêf‹w¨ded i¿%s(%d byãs)!", 
i‚
->
öt_«me
, 
msgsize
);

394 
	`ﬁ§_sy¶og
(
OLSR_LOG_ERR
, "Re˚ived mesßgêtÿbigÅÿbêf‹w¨ded o¿%s(%d byãs)!", 
i‚
->
öt_«me
, 
msgsize
);

399 
	`£t_buf„r_timî
(
i‚
);

401 i‡(
	`√t_outbuf„r_push
(
i‚
, 
m
, 
msgsize
) != msgsize) {

402 
	`OLSR_PRINTF
(1, "Re˚ived mesßgêtÿbigÅÿbêf‹w¨ded i¿%s(%d byãs)!", 
i‚
->
öt_«me
, 
msgsize
);

403 
	`ﬁ§_sy¶og
(
OLSR_LOG_ERR
, "Re˚ived mesßgêtÿbigÅÿbêf‹w¨ded o¿%s(%d byãs)!", 
i‚
->
öt_«me
, 
msgsize
);

408 
	}
}

411 
	$£t_buf„r_timî
(
öãrÁ˚
 *
i‚
)

414 
i‚
->
fwdtimî
 = 
	`GET_TIMESTAMP
(
	`øndom
(Ë* 
ﬁ§_˙f
->
max_jôãr
 * 
MSEC_PER_SEC
 / 
RAND_MAX
);

415 
	}
}

418 
	$ﬁ§_öô_wûlög√ss
()

420 i‡(
ﬁ§_˙f
->
wûlög√ss_auto
) {

423 
	`ﬁ§_upd©e_wûlög√ss
(
NULL
);

425 
	`ﬁ§_°¨t_timî
(()
ﬁ§_˙f
->
wûl_öt
 * 
MSEC_PER_SEC
, 5, 
OLSR_TIMER_PERIODIC
, &
ﬁ§_upd©e_wûlög√ss
, 
NULL
, 0);

427 
	}
}

430 
ﬁ§_upd©e_wûlög√ss
(*
foo
 
__©åibuã__
 ((
unu£d
)))

432 
	gtmp_wûl
 = 
ﬁ§_˙f
->
wûlög√ss
;

435 
	gﬁ§_˙f
->
	gwûlög√ss
 = 
ﬁ§_ˇlcuœã_wûlög√ss
();

437 i‡(
	gtmp_wûl
 !
ﬁ§_˙f
->
wûlög√ss
) {

438 
OLSR_PRINTF
(1, "Loˇ»wûlög√s†upd©ed: old %dÇew %d\n", 
tmp_wûl
, 
ﬁ§_˙f
->
wûlög√ss
);

450 
uöt8_t


451 
	$ﬁ§_ˇlcuœã_wûlög√ss
()

453 
ﬁ§_≠m_öfo
 
aöfo
;

456 i‡(!
ﬁ§_˙f
->
wûlög√ss_auto
)

457  
ﬁ§_˙f
->
wûlög√ss
;

459 i‡(
	`≠m_ªad
(&
aöfo
) < 1)

460  
WILL_DEFAULT
;

462 
	`≠m_¥ötöfo
(&
aöfo
);

465 i‡(
aöfo
.
ac_löe_°©us
 =
OLSR_AC_POWERED
)

474  (
aöfo
.
b©ãry_≥r˚¡age
 / 26);

475 
	}
}

478 
	$ﬁ§_msgty≥_to_°rög
(
uöt8_t
 
msgty≥
)

480 
ty≥
[20];

482 
msgty≥
) {

483 (
HELLO_MESSAGE
):

485 (
TC_MESSAGE
):

487 (
MID_MESSAGE
):

489 (
HNA_MESSAGE
):

491 (
LQ_HELLO_MESSAGE
):

493 (
LQ_TC_MESSAGE
):

499 
	`¢¥ötf
(
ty≥
, —y≥), "UNKNOWN(%d)", 
msgty≥
);

500  
ty≥
;

501 
	}
}

504 
	$ﬁ§_lök_to_°rög
(
uöt8_t
 
lökty≥
)

506 
ty≥
[20];

508 
lökty≥
) {

509 (
UNSPEC_LINK
):

511 (
ASYM_LINK
):

513 (
SYM_LINK
):

515 (
LOST_LINK
):

517 (
HIDE_LINK
):

523 
	`¢¥ötf
(
ty≥
, —y≥), "UNKNOWN(%d)", 
lökty≥
);

524  
ty≥
;

525 
	}
}

528 
	$ﬁ§_°©us_to_°rög
(
uöt8_t
 
°©us
)

530 
ty≥
[20];

532 
°©us
) {

533 (
NOT_NEIGH
):

535 (
SYM_NEIGH
):

537 (
MPR_NEIGH
):

543 
	`¢¥ötf
(
ty≥
, —y≥), "UNKNOWN(%d)", 
°©us
);

544  
ty≥
;

545 
	}
}

555 
	$ﬁ§_exô
(c⁄° *
msg
, 
vÆ
)

557 
	`OLSR_PRINTF
(1, "OLSR EXIT: %s\n", 
msg
);

558 
	`ﬁ§_sy¶og
(
OLSR_LOG_ERR
, "ﬁ§dÉxô: %s\n", 
msg
);

559 
	`fÊush
(
°dout
);

560 
ﬁ§_˙f
->
exô_vÆue
 = 
vÆ
;

562 
	`øi£
(
SIGTERM
);

563 
	}
}

575 
	$ﬁ§_mÆloc
(
size_t
 
size
, c⁄° *
id
)

577 *
±r
;

583 
±r
 = 
	`ˇŒoc
(1, 
size
);

585 i‡(!
±r
) {

586 c⁄° *c⁄° 
îr_msg
 = 
	`°ªº‹
(
î∫o
);

587 
	`OLSR_PRINTF
(1, "OUT OF MEMORY: %s\n", 
îr_msg
);

588 
	`ﬁ§_sy¶og
(
OLSR_LOG_ERR
, "ﬁ§d: ouào‡mem‹y!: %s\n", 
îr_msg
);

589 
	`ﬁ§_exô
(
id
, 
EXIT_FAILURE
);

593 
	`ﬁ§_¥ötf
(1, "MEMORY:áŒo¯%†%p, %u byãs\n", 
id
, 
±r
, 
size
);

596  
±r
;

597 
	}
}

606 
	$ﬁ§_¥ötf
(
logÀvñ
, c⁄° *
f‹m©
, ...)

608 i‡((
logÀvñ
 <
ﬁ§_˙f
->
debug_Àvñ
Ë&& 
debug_h™dÀ
) {

609 
va_li°
 
¨gli°
;

610 
	`va_°¨t
(
¨gli°
, 
f‹m©
);

611 
	`vÂrötf
(
debug_h™dÀ
, 
f‹m©
, 
¨gli°
);

612 
	`va_íd
(
¨gli°
);

615 
	}
}

	@src/olsr.h

42 #i‚de‡
_OLSR_FUNCTIONS


43 
	#_OLSR_FUNCTIONS


	)

45 
	~"ﬁ§_¥Ÿocﬁ.h
"

46 
	~"öãrÁ˚s.h
"

48 
boﬁ
 
ch™ges_t›ﬁogy
;

49 
boﬁ
 
ch™ges_√ighb‹hood
;

50 
boﬁ
 
ch™ges_h«
;

51 
boﬁ
 
ch™ges_f‹˚
;

53 
ﬁ§_ù_addr
 
Æl_zîo
;

55 
ﬁ§_°¨tup_¶ìp
();

56 
ﬁ§_do_°¨tup_¶ìp
();

58 
ªgi°î_pcf
((*)(, , ));

60 
	`ﬁ§_¥o˚ss_ch™ges
();

62 
	`öô_msg_£qno
();

64 
uöt16_t
 
	`gë_msg_£qno
();

66 
boﬁ
 
	`ﬁ§_is_bad_du∂iˇã_msg_£qno
(
uöt16_t
 
£qno
);

68 
	`ﬁ§_f‹w¨d_mesßge
(
ﬁ§_mesßge
 *, 
öãrÁ˚
 *, 
ﬁ§_ù_addr
 *);

70 
	`£t_buf„r_timî
(
öãrÁ˚
 *);

72 
	`ﬁ§_öô_èbÀs
();

74 
	`ﬁ§_öô_wûlög√ss
();

76 
	`ﬁ§_upd©e_wûlög√ss
(*);

78 
uöt8_t
 
	`ﬁ§_ˇlcuœã_wûlög√ss
();

80 c⁄° *
	`ﬁ§_msgty≥_to_°rög
(
uöt8_t
);

82 c⁄° *
	`ﬁ§_lök_to_°rög
(
uöt8_t
);

84 c⁄° *
	`ﬁ§_°©us_to_°rög
(
uöt8_t
);

86 
	`ﬁ§_exô
(const *, );

88 *
	`ﬁ§_mÆloc
(
size_t
, const *);

90 
	$ﬁ§_¥ötf
(, c⁄° *, ...Ë
	`__©åibuã__
 ((
	`f‹m©
(
¥ötf
, 2, 3)));

92 
	`ﬁ§_åiggî_f‹˚d_upd©e
(*);

	@src/olsr_cfg.h

42 #i‚de‡
_OLSRD_CFGPARSER_H


43 
	#_OLSRD_CFGPARSER_H


	)

45 
	~"ﬁ§_ty≥s.h
"

46 
	~"comm⁄/autobuf.h
"

51 
	#OLSR_COLLECT_STARTUP_SLEEP
 1

	)

53 
	#TESTLIB_PATH
 0

	)

54 
	#SYSLOG_NUMBERING
 0

	)

57 
	#DEF_IP_VERSION
 
AF_INET


	)

58 
	#DEF_POLLRATE
 0.05

	)

59 
	#DEF_NICCHGPOLLRT
 2.5

	)

60 
	#DEF_WILL_AUTO
 
Ál£


	)

61 
	#DEF_WILLINGNESS
 3

	)

62 
	#DEF_ALLOW_NO_INTS
 
åue


	)

63 
	#DEF_TOS
 192

	)

64 
	#DEF_DEBUGLVL
 1

	)

65 
	#DEF_IPC_CONNECTIONS
 0

	)

66 
	#DEF_USE_HYST
 
Ál£


	)

67 
	#DEF_FIB_METRIC
 
FIBM_FLAT


	)

68 
	#DEF_LQ_LEVEL
 2

	)

69 
	#DEF_LQ_ALGORITHM
 "ëx_ff"

	)

70 
	#DEF_LQ_FISH
 1

	)

71 
	#DEF_LQ_NAT_THRESH
 1.0

	)

72 
	#DEF_LQ_AGING
 0.05

	)

73 
	#DEF_CLEAR_SCREEN
 
åue


	)

74 
	#DEF_OLSRPORT
 698

	)

75 
	#DEF_RTPROTO
 0

	)

76 
	#DEF_RT_NONE
 -1

	)

77 
	#DEF_RT_AUTO
 0

	)

78 
	#DEF_MIN_TC_VTIME
 0.0

	)

79 
	#DEF_USE_NIIT
 
åue


	)

80 
	#DEF_SMART_GW
 
Ál£


	)

81 
	#DEF_GW_PERIOD
 10*1000

	)

82 
	#DEF_GW_STABLE_COUNT
 6

	)

83 
	#DEF_GW_ALLOW_NAT
 
åue


	)

84 
	#DEF_GW_THRESH
 0

	)

85 
	#DEF_GW_TYPE
 
GW_UPLINK_IPV46


	)

86 
	#DEF_GW_UPLINK_NAT
 
åue


	)

87 
	#DEF_UPLINK_SPEED
 128

	)

88 
	#DEF_DOWNLINK_SPEED
 1024

	)

89 
	#DEF_USE_SRCIP_ROUTES
 
Ál£


	)

91 
	#DEF_IF_MODE
 
IF_MODE_MESH


	)

95 
	#MIN_INTERVAL
 0.01

	)

97 
	#MAX_POLLRATE
 1.0

	)

98 
	#MIN_POLLRATE
 0.01

	)

99 
	#MAX_NICCHGPOLLRT
 100.0

	)

100 
	#MIN_NICCHGPOLLRT
 1.0

	)

101 
	#MAX_DEBUGLVL
 9

	)

102 
	#MIN_DEBUGLVL
 0

	)

103 
	#MAX_TOS
 252

	)

104 
	#MIN_TOS
 0

	)

105 
	#MAX_WILLINGNESS
 7

	)

106 
	#MIN_WILLINGNESS
 0

	)

107 
	#MAX_MPR_COVERAGE
 20

	)

108 
	#MIN_MPR_COVERAGE
 1

	)

109 
	#MAX_TC_REDUNDANCY
 2

	)

110 
	#MIN_TC_REDUNDANCY
 0

	)

111 
	#MAX_HYST_PARAM
 1.0

	)

112 
	#MIN_HYST_PARAM
 0.0

	)

113 
	#MAX_LQ_LEVEL
 2

	)

114 
	#MIN_LQ_LEVEL
 0

	)

115 
	#MAX_LQ_AGING
 1.0

	)

116 
	#MIN_LQ_AGING
 0.01

	)

118 
	#MIN_SMARTGW_PERIOD
 1*1000

	)

119 
	#MAX_SMARTGW_PERIOD
 320000*1000

	)

121 
	#MIN_SMARTGW_STABLE
 1

	)

122 
	#MAX_SMARTGW_STABLE
 254

	)

124 
	#MIN_SMARTGW_THRES
 10

	)

125 
	#MAX_SMARTGW_THRES
 100

	)

127 
	#MIN_SMARTGW_SPEED
 1

	)

128 
	#MAX_SMARTGW_SPEED
 320000000

	)

130 #i‚de‡
IPV6_ADDR_SITELOCAL


131 
	#IPV6_ADDR_SITELOCAL
 0x0040U

	)

134 
	~"öãrÁ˚s.h
"

136 
	esm¨t_gw_u∂ökty≥
 {

137 
	mGW_UPLINK_NONE
,

138 
	mGW_UPLINK_IPV4
,

139 
	mGW_UPLINK_IPV6
,

140 
	mGW_UPLINK_IPV46
,

141 
	mGW_UPLINK_CNT
,

146 
	mFIBM_FLAT
,

147 
	mFIBM_CORRECT
,

148 
	mFIBM_APPROX
,

149 
	mFIBM_CNT


150 } 
	tﬁ§_fib_mëric_›ti⁄s
;

152 
	eﬁ§_if_mode
 {

153 
	mIF_MODE_MESH
,

154 
	mIF_MODE_ETHER
,

155 
	mIF_MODE_CNT


159 
	sﬁ§_msg_∑øms
 {

160 
	memissi⁄_öãrvÆ
;

161 
	mvÆidôy_time
;

164 
	sﬁ§_lq_mu…
 {

165 
ﬁ§_ù_addr
 
	maddr
;

166 
uöt32_t
 
	mvÆue
;

167 
ﬁ§_lq_mu…
 *
	m√xt
;

170 
	sﬁ§_if_weight
 {

171 
	mvÆue
;

172 
boﬁ
 
	mfixed
;

175 
	sif_c⁄fig_›ti⁄s
 {

176 
ﬁ§_ù_addr
 
	mùv4_mu…iˇ°
;

177 
ﬁ§_ù_addr
 
	mùv6_mu…iˇ°
;

179 
ﬁ§_ù_addr
 
	mùv4_§c
;

180 
ﬁ§_ù_¥efix
 
	mùv6_§c
;

182 
	mmode
;

184 
ﬁ§_if_weight
 
	mweight
;

185 
ﬁ§_msg_∑øms
 
	mhñlo_∑øms
;

186 
ﬁ§_msg_∑øms
 
	mtc_∑øms
;

187 
ﬁ§_msg_∑øms
 
	mmid_∑øms
;

188 
ﬁ§_msg_∑øms
 
	mh«_∑øms
;

189 
ﬁ§_lq_mu…
 *
	mlq_mu…
;

190 
	m‹ig_lq_mu…_˙t
;

191 
boﬁ
 
	mautodëe˘_chg
;

194 
	sﬁ§_if
 {

195 *
	m«me
;

196 
boﬁ
 
	mc⁄figuªd
;

197 
boﬁ
 
	mho°_emul
;

198 
ﬁ§_ù_addr
 
	mhemu_ù
;

199 
öãrÁ˚
 *
	möãrf
;

200 
if_c⁄fig_›ti⁄s
 *
	m˙f
, *
	m˙fi
;

201 
ﬁ§_if
 *
	m√xt
;

204 
	sù_¥efix_li°
 {

205 
ﬁ§_ù_¥efix
 
	m√t
;

206 
ù_¥efix_li°
 *
	m√xt
;

209 
	shy°_∑øm
 {

210 
	msˇlög
;

211 
	mthr_high
;

212 
	mthr_low
;

215 
	s∂ugö_∑øm
 {

216 *
	mkey
;

217 *
	mvÆue
;

218 
∂ugö_∑øm
 *
	m√xt
;

221 
	s∂ugö_íåy
 {

222 *
	m«me
;

223 
∂ugö_∑øm
 *
	m∑øms
;

224 
∂ugö_íåy
 *
	m√xt
;

231 
	sﬁ§d_c⁄fig
 {

232 
uöt16_t
 
	mﬁ§p‹t
;

233 
	mdebug_Àvñ
;

234 
boﬁ
 
	mno_f‹k
;

235 
boﬁ
 
	mho°_emul
;

236 
	mù_vîsi⁄
;

237 
boﬁ
 
	mÆlow_no_öãrÁ˚s
;

238 
uöt8_t
 
	mtos
;

239 
uöt8_t
 
	mπ_¥Ÿo
;

240 
uöt8_t
 
	mπ_èbÀ
, 
	mπ_èbÀ_deÁu…
, 
	mπ_èbÀ_tu¬ñ
;

241 
öt32_t
 
	mπ_èbÀ_¥i
, 
	mπ_èbÀ_tu¬ñ_¥i
;

242 
öt32_t
 
	mπ_èbÀ_deÁu…ﬁ§_¥i
, 
	mπ_èbÀ_deÁu…_¥i
;

243 
uöt8_t
 
	mwûlög√ss
;

244 
boﬁ
 
	mwûlög√ss_auto
;

245 
	mùc_c⁄√˘i⁄s
;

246 
boﬁ
 
	mu£_hy°îesis
;

247 
ﬁ§_fib_mëric_›ti⁄s
 
	mfib_mëric
;

248 
hy°_∑øm
 
	mhy°îesis_∑øm
;

249 
∂ugö_íåy
 *
	m∂ugös
;

250 
ù_¥efix_li°
 *
	mh«_íåõs
;

251 
ù_¥efix_li°
 *
	mùc_√ts
;

252 
if_c⁄fig_›ti⁄s
 *
	möãrÁ˚_deÁu…s
;

253 
ﬁ§_if
 *
	möãrÁ˚s
;

254 
	mpﬁÃ©e
;

255 
	mnic_chgs_pﬁÃ©e
;

256 
boﬁ
 
	m˛ór_s¸ìn
;

257 
uöt8_t
 
	mtc_ªdund™cy
;

258 
uöt8_t
 
	mm¥_covîage
;

259 
uöt8_t
 
	mlq_Àvñ
;

260 
uöt8_t
 
	mlq_fish
;

261 
	mlq_agög
;

262 *
	mlq_Æg‹ôhm
;

264 
	mmö_tc_vtime
;

266 
boﬁ
 
	m£t_ù_f‹w¨d
;

268 *
	mlock_fûe
;

269 
boﬁ
 
	mu£_niô
;

271 
boﬁ
 
	msm¨t_gw_a˘ive
, 
	msm¨t_gw_Ælow_«t
, 
	msm¨t_gw_u∂ök_«t
;

272 
uöt32_t
 
	msm¨t_gw_≥riod
;

273 
uöt8_t
 
	msm¨t_gw_°abÀcou¡
;

274 
uöt8_t
 
	msm¨t_gw_thªsh
;

275 
sm¨t_gw_u∂ökty≥
 
	msm¨t_gw_ty≥
;

276 
uöt32_t
 
	msm¨t_gw_u∂ök
, 
	msm¨t_gw_dow∆ök
;

277 
ﬁ§_ù_¥efix
 
	msm¨t_gw_¥efix
;

280 
ﬁ§_ù_addr
 
	mmaö_addr
, 
	muniˇ°_§c_ù
;

281 
boﬁ
 
	mu£_§c_ù_rouãs
;

284 
uöt8_t
 
	mmax∂í
;

285 
size_t
 
	mùsize
;

286 
boﬁ
 
	mdñ_gws
;

287 
	mwûl_öt
;

288 
	mmax_jôãr
;

289 
	mexô_vÆue
;

290 
	mmax_tc_vtime
;

292 
	mniô4to6_if_ödex
, 
	mniô6to4_if_ödex
;

295 
boﬁ
 
	mhas_ùv4_g©eway
, 
	mhas_ùv6_g©eway
;

297 
	mio˘l_s
;

298 #ifde‡
LINUX_NETLINK_ROUTING


299 
	mπ∆_s
;

300 
	mπ_m⁄ô‹_sockë
;

303 #i‡
deföed
 
__FªeBSD__
 || deföed 
__FªeBSD_kî√l__
 || deföed 
__MacOSX__
 || deföed 
__NëBSD__
 || deföed 
__O≥nBSD__


304 
	mπs
;

306 
	mlq_«t_thªsh
;

309 #i‡
deföed
 
__˝lu•lus


313 c⁄° *
GW_UPLINK_TXT
[];

314 c⁄° *
FIB_METRIC_TXT
[];

315 c⁄° *
OLSR_IF_MODE
[];

321 
ù_¥efix_li°_add
(
ù_¥efix_li°
 **, c⁄° 
ﬁ§_ù_addr
 *, 
uöt8_t
);

323 
ù_¥efix_li°_ªmove
(
ù_¥efix_li°
 **, c⁄° 
ﬁ§_ù_addr
 *, 
uöt8_t
);

325 
ù_¥efix_li°
 *
ù_¥efix_li°_föd
(ù_¥efix_li° *, c⁄° 
ﬁ§_ù_addr
 *
√t
, 
uöt8_t
 
¥efix_Àn
);

331 
ﬁ§d_∑r£_˙f
(const *);

333 
ﬁ§d_ßnôy_check_˙f
(
ﬁ§d_c⁄fig
 *);

335 
ﬁ§d_‰ì_˙f
(
ﬁ§d_c⁄fig
 *);

337 
ﬁ§d_¥öt_˙f
(
ﬁ§d_c⁄fig
 *);

339 
ﬁ§d_wrôe_˙f_autobuf
(
autobuf
 *
out
, 
ﬁ§d_c⁄fig
 *
˙f
);

341 
ﬁ§d_wrôe_˙f
(
ﬁ§d_c⁄fig
 *, const *);

343 
if_c⁄fig_›ti⁄s
 *
gë_deÁu…_if_c⁄fig
();

345 
ﬁ§d_c⁄fig
 *
ﬁ§d_gë_deÁu…_˙f
();

347 #i‡
deföed
 
WIN32


348 
wö32_°dio_hack
();

350 *
wö32_ﬁ§d_mÆloc
(
size_t
 
size
);

352 
wö32_ﬁ§d_‰ì
(*
±r
);

355 #i‡
deföed
 
__˝lu•lus


	@src/olsr_cookie.c

41 
	~"ﬁ§.h
"

42 
	~"defs.h
"

43 
	~"ﬁ§_cookõ.h
"

44 
	~"log.h
"

46 
	~<as£π.h
>

49 
ﬁ§_cookõ_öfo
 *
	gcookõs
[
COOKIE_ID_MAX
] = { 0 };

54 
ﬁ§_cookõ_öfo
 *

55 
	$ﬁ§_Æloc_cookõ
(c⁄° *
cookõ_«me
, 
ﬁ§_cookõ_ty≥
 
cookõ_ty≥
)

57 
ﬁ§_cookõ_öfo
 *
ci
;

58 
ci_ödex
;

64 
ci_ödex
 = 1; ci_ödex < 
COOKIE_ID_MAX
; ci_index++) {

65 i‡(!
cookõs
[
ci_ödex
]) {

70 
	`as£π
(
ci_ödex
 < 
COOKIE_ID_MAX
);

72 
ci
 = 
	`ˇŒoc
(1, (
ﬁ§_cookõ_öfo
));

73 
cookõs
[
ci_ödex
] = 
ci
;

76 
ci
->
ci_id
 = 
ci_ödex
;

77 
ci
->
ci_ty≥
 = 
cookõ_ty≥
;

78 i‡(
cookõ_«me
) {

79 
ci
->
ci_«me
 = 
	`°rdup
(
cookõ_«me
);

83 i‡(
cookõ_ty≥
 =
OLSR_COOKIE_TYPE_MEMORY
) {

84 
	`li°_hód_öô
(&
ci
->
ci_‰ì_li°
);

87  
ci
;

88 
	}
}

94 
	$ﬁ§_‰ì_cookõ
(
ﬁ§_cookõ_öfo
 *
ci
)

96 
li°_node
 *
mem‹y_li°
;

99 
cookõs
[
ci
->
ci_id
] = 
NULL
;

102 i‡(
ci
->
ci_«me
) {

103 
	`‰ì
(
ci
->
ci_«me
);

107 i‡(
ci
->
ci_ty≥
 =
OLSR_COOKIE_TYPE_MEMORY
) {

108 !
	`li°_is_em±y
(&
ci
->
ci_‰ì_li°
)) {

109 
mem‹y_li°
 = 
ci
->
ci_‰ì_li°
.
√xt
;

110 
	`li°_ªmove
(
mem‹y_li°
);

111 
	`‰ì
(
mem‹y_li°
);

115 
	`‰ì
(
ci
);

116 
	}
}

122 
	$ﬁ§_dñëe_Æl_cookõs
()

124 
ci_ödex
;

129 
ci_ödex
 = 1; ci_ödex < 
COOKIE_ID_MAX
; ci_index++) {

130 i‡(!
cookõs
[
ci_ödex
]) {

133 
	`ﬁ§_‰ì_cookõ
(
cookõs
[
ci_ödex
]);

135 
	}
}

142 
	$ﬁ§_cookõ_£t_mem‹y_size
(
ﬁ§_cookõ_öfo
 *
ci
, 
size_t
 
size
)

144 i‡(!
ci
) {

148 
	`as£π
(
ci
->
ci_ty≥
 =
OLSR_COOKIE_TYPE_MEMORY
);

149 
ci
->
ci_size
 = 
size
;

150 
	}
}

155 
boﬁ


156 
	$ﬁ§_cookõ_vÆid
(
ﬁ§_cookõ_t
 
cookõ_id
)

158 i‡((
cookõ_id
 < 
COOKIE_ID_MAX
Ë&& 
cookõs
[cookie_id]) {

159  
åue
;

161  
Ál£
;

162 
	}
}

168 
	$ﬁ§_cookõ_ußge_ö¸
(
ﬁ§_cookõ_t
 
cookõ_id
)

170 i‡(
	`ﬁ§_cookõ_vÆid
(
cookõ_id
)) {

171 
cookõs
[
cookõ_id
]->
ci_ußge
++;

172 
cookõs
[
cookõ_id
]->
ci_ch™ges
++;

174 
	}
}

180 
	$ﬁ§_cookõ_ußge_de¸
(
ﬁ§_cookõ_t
 
cookõ_id
)

182 i‡(
	`ﬁ§_cookõ_vÆid
(
cookõ_id
)) {

183 
cookõs
[
cookõ_id
]->
ci_ußge
--;

184 
cookõs
[
cookõ_id
]->
ci_ch™ges
++;

186 
	}
}

193 
	$ﬁ§_cookõ_«me
(
ﬁ§_cookõ_t
 
cookõ_id
)

195 
unknown
[] = "unknown";

197 i‡(
	`ﬁ§_cookõ_vÆid
(
cookõ_id
)) {

198  (
cookõs
[
cookõ_id
])->
ci_«me
;

201  
unknown
;

202 
	}
}

208 
	$ﬁ§_cookõ_mÆloc
(
ﬁ§_cookõ_öfo
 *
ci
)

210 *
±r
;

211 
ﬁ§_cookõ_mem_bønd
 *
bøndög
;

212 
li°_node
 *
‰ì_li°_node
;

214 #ifde‡
OLSR_COOKIE_DEBUG


215 
boﬁ
 
ªu£
 = 
Ál£
;

221 i‡(!
ci
->
ci_‰ì_li°_ußge
) {

226 
±r
 = 
	`ˇŒoc
(1, 
ci
->
ci_size
 + (
ﬁ§_cookõ_mem_bønd
));

228 i‡(!
±r
) {

229 c⁄° *c⁄° 
îr_msg
 = 
	`°ªº‹
(
î∫o
);

230 
	`OLSR_PRINTF
(1, "OUT OF MEMORY: %s\n", 
îr_msg
);

231 
	`ﬁ§_sy¶og
(
OLSR_LOG_ERR
, "ﬁ§d: ouào‡mem‹y!: %s\n", 
îr_msg
);

232 
	`ﬁ§_exô
(
ci
->
ci_«me
, 
EXIT_FAILURE
);

240 
‰ì_li°_node
 = 
ci
->
ci_‰ì_li°
.
√xt
;

241 
	`li°_ªmove
(
‰ì_li°_node
);

242 
±r
 = (*)
‰ì_li°_node
;

243 
	`mem£t
(
±r
, 0, 
ci
->
ci_size
);

244 
ci
->
ci_‰ì_li°_ußge
--;

245 #ifde‡
OLSR_COOKIE_DEBUG


246 
ªu£
 = 
åue
;

255 
bøndög
 = (
ﬁ§_cookõ_mem_bønd
 *)
	`ARM_NOWARN_ALIGN
(((*)
±r
 + 
ci
->
ci_size
));

256 
	`mem˝y
(&
bøndög
->
cmb_sig
, "cookie", 6);

257 
bøndög
->
cmb_id
 = 
ci
->
ci_id
;

260 
	`ﬁ§_cookõ_ußge_ö¸
(
ci
->
ci_id
);

262 #ifde‡
OLSR_COOKIE_DEBUG


263 
	`OLSR_PRINTF
(1, "MEMORY:áŒo¯%s, %p, %u byãs%s\n", 
ci
->
ci_«me
, 
±r
, ci->
ci_size
, 
ªu£
 ? ",Ñeuse" : "");

266  
±r
;

267 
	}
}

274 
	$ﬁ§_cookõ_‰ì
(
ﬁ§_cookõ_öfo
 *
ci
, *
±r
)

276 
ﬁ§_cookõ_mem_bønd
 *
bøndög
;

277 
li°_node
 *
‰ì_li°_node
;

279 #ifde‡
OLSR_COOKIE_DEBUG


280 
boﬁ
 
ªu£
 = 
Ál£
;

283 
bøndög
 = (
ﬁ§_cookõ_mem_bønd
 *)
	`ARM_NOWARN_ALIGN
(((*)
±r
 + 
ci
->
ci_size
));

289 
	`as£π
(!
	`memcmp
(&
bøndög
->
cmb_sig
, "cookõ", 6Ë&& bøndög->
cmb_id
 =
ci
->
ci_id
);

292 
	`mem£t
(
bøndög
, 0, (*branding));

299 i‡((
ci
->
ci_‰ì_li°_ußge
 < 
COOKIE_FREE_LIST_THRESHOLD
Ë|| (ci->ci_‰ì_li°_ußgê< ci->
ci_ußge
 / COOKIE_FREE_LIST_THRESHOLD)) {

301 
‰ì_li°_node
 = (
li°_node
 *)
±r
;

302 
	`li°_node_öô
(
‰ì_li°_node
);

303 
	`li°_add_bef‹e
(&
ci
->
ci_‰ì_li°
, 
‰ì_li°_node
);

304 
ci
->
ci_‰ì_li°_ußge
++;

305 #ifde‡
OLSR_COOKIE_DEBUG


306 
ªu£
 = 
åue
;

313 
	`‰ì
(
±r
);

317 
	`ﬁ§_cookõ_ußge_de¸
(
ci
->
ci_id
);

319 #ifde‡
OLSR_COOKIE_DEBUG


320 
	`OLSR_PRINTF
(1, "MEMORY: fªê%s, %p, %u byãs%s\n", 
ci
->
ci_«me
, 
±r
, ci->
ci_size
, 
ªu£
 ? ",Ñeuse" : "");

323 
	}
}

	@src/olsr_cookie.h

41 
	~"ﬁ§_ty≥s.h
"

42 
	~"comm⁄/li°.h
"

44 #i‚de‡
_OLSR_COOKIE_H


45 
	#_OLSR_COOKIE_H


	)

47 
	#COOKIE_ID_MAX
 25

	)

49 
	eﬁ§_cookõ_ty≥_
 {

50 
	mOLSR_COOKIE_TYPE_MIN
,

51 
	mOLSR_COOKIE_TYPE_MEMORY
,

52 
	mOLSR_COOKIE_TYPE_TIMER
,

53 
	mOLSR_COOKIE_TYPE_MAX


54 } 
	tﬁ§_cookõ_ty≥
;

61 
	sﬁ§_cookõ_öfo
 {

62 
ﬁ§_cookõ_t
 
	mci_id
;

63 *
	mci_«me
;

64 
ﬁ§_cookõ_ty≥
 
	mci_ty≥
;

65 
size_t
 
	mci_size
;

66 
	mci_ußge
;

67 
	mci_ch™ges
;

68 
li°_node
 
	mci_‰ì_li°
;

69 
	mci_‰ì_li°_ußge
;

72 
	#COOKIE_FREE_LIST_THRESHOLD
 10

	)

78 
	sﬁ§_cookõ_mem_bønd
 {

79 
	mcmb_sig
[6];

80 
ﬁ§_cookõ_t
 
	mcmb_id
;

84 
ﬁ§_cookõ_öfo
 *
ﬁ§_Æloc_cookõ
(c⁄° *, 
ﬁ§_cookõ_ty≥
);

85 
ﬁ§_‰ì_cookõ
(
ﬁ§_cookõ_öfo
 *);

86 
ﬁ§_dñëe_Æl_cookõs
();

87 *
ﬁ§_cookõ_«me
(
ﬁ§_cookõ_t
);

88 
ﬁ§_cookõ_£t_mem‹y_size
(
ﬁ§_cookõ_öfo
 *, 
size_t
);

89 
ﬁ§_cookõ_ußge_ö¸
(
ﬁ§_cookõ_t
);

90 
ﬁ§_cookõ_ußge_de¸
(
ﬁ§_cookõ_t
);

92 *
ﬁ§_cookõ_mÆloc
(
ﬁ§_cookõ_öfo
 *);

93 
ﬁ§_cookõ_‰ì
(
ﬁ§_cookõ_öfo
 *, *);

	@src/olsr_niit.c

8 
	~"defs.h
"

9 
	~"kî√l_rouãs.h
"

10 
	~"√t_os.h
"

11 
	~"ﬁ§_niô.h
"

13 
	~<√t/if.h
>

15 #ifde‡
LINUX_NETLINK_ROUTING


16 
h™dÀ_niô_ifch™ge
 (
if_ödex
, 
öãrÁ˚
 *
iÁ˚
, 
ﬁ§_ifchg_Êag
);

18 
boﬁ
 
	gniô4to6_a˘ive
, 
	gniô6to4_a˘ive
;

20 
	$ﬁ§_öô_niô
() {

21 i‡(
ﬁ§_˙f
->
ù_vîsi⁄
 =
AF_INET
) {

22 
ﬁ§_˙f
->
u£_niô
 = 
Ál£
;

26 
ﬁ§_˙f
->
niô4to6_if_ödex
 = 
	`if_«mëoödex
(
DEF_NIIT4TO6_IFNAME
);

27 i‡(
ﬁ§_˙f
->
niô4to6_if_ödex
 <= 0) {

28 
	`OLSR_PRINTF
(1, "W¨nög, %†devi˚ i†nŸávaûabÀ, dó˘iv©ög NIIT\n", 
DEF_NIIT4TO6_IFNAME
);

29 
ﬁ§_˙f
->
u£_niô
 = 
Ál£
;

32 
ﬁ§_˙f
->
niô6to4_if_ödex
 = 
	`if_«mëoödex
(
DEF_NIIT6TO4_IFNAME
);

33 i‡(
ﬁ§_˙f
->
niô6to4_if_ödex
 <= 0) {

34 
	`OLSR_PRINTF
(1, "W¨nög, %†devi˚ i†nŸávaûabÀ, dó˘iv©ög NIIT\n", 
DEF_NIIT6TO4_IFNAME
);

35 
ﬁ§_˙f
->
u£_niô
 = 
Ál£
;

39 
niô4to6_a˘ive
 = 
	`ﬁ§_if_isup
(
DEF_NIIT4TO6_IFNAME
);

40 
niô6to4_a˘ive
 = 
	`ﬁ§_if_isup
(
DEF_NIIT6TO4_IFNAME
);

42 
	`ﬁ§_add_ifch™ge_h™dÀr
(&
h™dÀ_niô_ifch™ge
);

43 
	`ﬁ§_add_ifch™ge_h™dÀr
(&
h™dÀ_niô_ifch™ge
);

45 
	}
}

47 
	$ﬁ§_£tup_niô_rouãs
() {

48 
ù_¥efix_li°
 *
h
;

50 i‡(!
niô4to6_a˘ive
 || !
niô6to4_a˘ive
) {

53 
h
 = 
ﬁ§_˙f
->
h«_íåõs
; h !
NULL
; h = h->
√xt
) {

54 i‡(
	`ù_¥efix_is_m≠≥dv4
(&
h
->
√t
)) {

55 
	`ﬁ§_os_niô_6to4_rouã
(&
h
->
√t
, 
åue
);

58 
	}
}

60 
	$ﬁ§_˛ónup_niô_rouãs
() {

61 
ù_¥efix_li°
 *
h
;

63 i‡(!
niô6to4_a˘ive
) {

66 
h
 = 
ﬁ§_˙f
->
h«_íåõs
; h !
NULL
; h = h->
√xt
) {

67 i‡(
	`ù_¥efix_is_m≠≥dv4
(&
h
->
√t
)) {

68 
	`ﬁ§_os_niô_6to4_rouã
(&
h
->
√t
, 
Ál£
);

71 
	}
}

73 
	$ﬁ§_niô_h™dÀ_rouã
(c⁄° 
π_íåy
 *
π
, 
boﬁ
 
£t
) {

74 i‡(
ﬁ§_˙f
->
ù_vîsi⁄
 =
AF_INET6
 && ol§_˙f->
u£_niô


75 && 
niô4to6_a˘ive
 && 
niô6to4_a˘ive
 && 
	`is_¥efix_niô_ùv6
(&
π
->
π_d°
)) {

76 
ﬁ§_ù_¥efix
 
d°_v4
;

78 
	`¥efix_m≠≥dv4_to_v4
(&
d°_v4
, &
π
->
π_d°
);

79 
	`ﬁ§_os_niô_4to6_rouã
(&
d°_v4
, 
£t
);

81 
	}
}

83 
	$ª‰esh_niô4to6_rouãs
(
boﬁ
 
£t
) {

84 
π_íåy
 *
π
;

86 i‡(
£t
 && (!
niô4to6_a˘ive
 || !
niô6to4_a˘ive
)) {

89 i‡(!
£t
 && !
niô4to6_a˘ive
) {

93 
	`OLSR_FOR_ALL_RT_ENTRIES
(
π
) {

94 i‡(
	`is_¥efix_niô_ùv6
(&
π
->
π_d°
)) {

95 
ﬁ§_ù_¥efix
 
d°_v4
;

97 
	`¥efix_m≠≥dv4_to_v4
(&
d°_v4
, &
π
->
π_d°
);

98 
	`ﬁ§_os_niô_4to6_rouã
(&
d°_v4
, 
£t
);

100 } 
	`OLSR_FOR_ALL_RT_ENTRIES_END
(
π
)

101 
	}
}

103 
h™dÀ_niô_ifch™ge
 (
if_ödex
, 
öãrÁ˚
 *
iÁ˚
 
__©åibuã__
 ((
unu£d
)),

104 
ﬁ§_ifchg_Êag
 
Êag
) {

105 
boﬁ
 
	ga˘ive
;

107 
	ga˘ive
 = 
niô4to6_a˘ive
 && 
niô6to4_a˘ive
;

108 i‡(
	gif_ödex
 =
ﬁ§_˙f
->
niô4to6_if_ödex
) {

109 
niô4to6_a˘ive
 = 
Êag
 !
IFCHG_IF_REMOVE
;

111 i‡(
	gif_ödex
 =
ﬁ§_˙f
->
niô6to4_if_ödex
) {

112 
niô6to4_a˘ive
 = 
Êag
 !
IFCHG_IF_REMOVE
;

115 i‡(
	ga˘ive
 !(
niô4to6_a˘ive
 && 
niô6to4_a˘ive
)) {

117 i‡(!
a˘ive
) {

119 
ﬁ§_£tup_niô_rouãs
();

120 
ª‰esh_niô4to6_rouãs
(
åue
);

124 
ﬁ§_˛ónup_niô_rouãs
();

125 
ª‰esh_niô4to6_rouãs
(
Ál£
);

	@src/olsr_niit.h

8 #i‚de‡
OLSR_NIIT_H_


9 
	#OLSR_NIIT_H_


	)

11 
	~"defs.h
"

12 
	~"routög_èbÀ.h
"

14 
	#DEF_NIIT4TO6_IFNAME
 "niô4to6"

	)

15 
	#DEF_NIIT6TO4_IFNAME
 "niô6to4"

	)

17 #ifde‡
LINUX_NETLINK_ROUTING


18 
ﬁ§_öô_niô
();

19 
ﬁ§_£tup_niô_rouãs
();

20 
ﬁ§_˛ónup_niô_rouãs
();

22 
ﬁ§_niô_h™dÀ_rouã
(c⁄° 
π_íåy
 *
π
, 
boﬁ
 
£t
);

	@src/olsr_protocol.h

47 #i‚de‡
_PROTOCOLS_OLSR_H


48 
	#_PROTOCOLS_OLSR_H


	)

50 
	gﬁ§
;

52 
	~"ﬁ§_ty≥s.h
"

53 
	~"ﬁ§_cfg.h
"

55 
	~<°rög.h
>

57 
	#OLSR_HEADERSIZE
 ((
uöt16_t
Ë+ (uöt16_t))

	)

59 
	#OLSR_MSGHDRSZ_IPV4
 12

	)

60 
	#OLSR_MSGHDRSZ_IPV6
 24

	)

66 
	#HELLO_INTERVAL
 2

	)

67 
	#REFRESH_INTERVAL
 2

	)

68 
	#TC_INTERVAL
 5

	)

69 
	#MID_INTERVAL
 
TC_INTERVAL


	)

70 
	#HNA_INTERVAL
 
TC_INTERVAL


	)

73 
	#HELLO_JITTER
 25

	)

74 
	#HNA_JITTER
 25

	)

75 
	#MID_JITTER
 25

	)

76 
	#TC_JITTER
 25

	)

82 
	#NEIGHB_HOLD_TIME
 10 * 
REFRESH_INTERVAL


	)

83 
	#TOP_HOLD_TIME
 60 * 
TC_INTERVAL


	)

84 
	#DUP_HOLD_TIME
 30

	)

85 
	#MID_HOLD_TIME
 60 * 
MID_INTERVAL


	)

86 
	#HNA_HOLD_TIME
 60 * 
HNA_INTERVAL


	)

92 
	#HELLO_MESSAGE
 1

	)

93 
	#TC_MESSAGE
 2

	)

94 
	#MID_MESSAGE
 3

	)

95 
	#HNA_MESSAGE
 4

	)

96 
	#MAX_MESSAGE
 4

	)

102 
	#UNSPEC_LINK
 0

	)

103 
	#ASYM_LINK
 1

	)

104 
	#SYM_LINK
 2

	)

105 
	#LOST_LINK
 3

	)

106 
	#HIDE_LINK
 4

	)

107 
	#MAX_LINK
 4

	)

113 
	#NOT_NEIGH
 0

	)

114 
	#SYM_NEIGH
 1

	)

115 
	#MPR_NEIGH
 2

	)

116 
	#MAX_NEIGH
 2

	)

122 
	#NOT_SYM
 0

	)

123 
	#SYM
 1

	)

129 
	#HYST_THRESHOLD_HIGH
 0.8

	)

130 
	#HYST_THRESHOLD_LOW
 0.3

	)

131 
	#HYST_SCALING
 0.5

	)

137 
	#WILL_NEVER
 0

	)

138 
	#WILL_LOW
 1

	)

139 
	#WILL_DEFAULT
 3

	)

140 
	#WILL_HIGH
 6

	)

141 
	#WILL_ALWAYS
 7

	)

146 
	#TC_REDUNDANCY
 2

	)

147 
	#MPR_COVERAGE
 7

	)

152 
	#MAXJITTER
 
HELLO_INTERVAL
 / 4

	)

153 
	#MAX_TTL
 0xff

	)

161 
	#MAXVALUE
 0xFFFF

	)

164 
	#SEQNO_GREATER_THAN
(
s1
, 
s2
) \

165 (((
s1
 > 
s2
Ë&& (s1 - s2 <(
MAXVALUE
/2))) \

166 || ((
s2
 > 
s1
Ë&& (s2 - s1 > (
MAXVALUE
/2))))

	)

174 
	#CREATE_LINK_CODE
(
°©us
, 
lök
Ë÷ök | (°©us<<2))

	)

176 
	#EXTRACT_STATUS
(
lök_code
Ë(÷ök_codê& 0xC)>>2)

	)

178 
	#EXTRACT_LINK
(
lök_code
Ë÷ök_codê& 0x3)

	)

191 
	shñlöfo
 {

192 
uöt8_t
 
	mlök_code
;

193 
uöt8_t
 
	mª£rved
;

194 
uöt16_t
 
	msize
;

195 
uöt32_t
 
	m√igh_addr
[1];

196 } 
__©åibuã__
 ((
∑cked
));

198 
	shñlomsg
 {

199 
uöt16_t
 
	mª£rved
;

200 
uöt8_t
 
	mhtime
;

201 
uöt8_t
 
	mwûlög√ss
;

202 
hñlöfo
 
	mhñl_öfo
[1];

203 } 
__©åibuã__
 ((
∑cked
));

209 
	shñlöfo6
 {

210 
uöt8_t
 
	mlök_code
;

211 
uöt8_t
 
	mª£rved
;

212 
uöt16_t
 
	msize
;

213 
ö6_addr
 
	m√igh_addr
[1];

214 } 
__©åibuã__
 ((
∑cked
));

216 
	shñlomsg6
 {

217 
uöt16_t
 
	mª£rved
;

218 
uöt8_t
 
	mhtime
;

219 
uöt8_t
 
	mwûlög√ss
;

220 
hñlöfo6
 
	mhñl_öfo
[1];

221 } 
__©åibuã__
 ((
∑cked
));

227 
	s√igh_öfo
 {

228 
uöt32_t
 
	maddr
;

229 } 
__©åibuã__
 ((
∑cked
));

231 
	sﬁ§_tcmsg
 {

232 
uöt16_t
 
	m™¢
;

233 
uöt16_t
 
	mª£rved
;

234 
√igh_öfo
 
	m√igh
[1];

235 } 
__©åibuã__
 ((
∑cked
));

241 
	s√igh_öfo6
 {

242 
ö6_addr
 
	maddr
;

243 } 
__©åibuã__
 ((
∑cked
));

245 
	sﬁ§_tcmsg6
 {

246 
uöt16_t
 
	m™¢
;

247 
uöt16_t
 
	mª£rved
;

248 
√igh_öfo6
 
	m√igh
[1];

249 } 
__©åibuã__
 ((
∑cked
));

260 
	smidaddr
 {

261 
uöt32_t
 
	maddr
;

262 } 
__©åibuã__
 ((
∑cked
));

264 
	smidmsg
 {

265 
midaddr
 
	mmid_addr
[1];

266 } 
__©åibuã__
 ((
∑cked
));

271 
	smidaddr6
 {

272 
ö6_addr
 
	maddr
;

273 } 
__©åibuã__
 ((
∑cked
));

275 
	smidmsg6
 {

276 
midaddr6
 
	mmid_addr
[1];

277 } 
__©åibuã__
 ((
∑cked
));

282 
	sh«∑ú
 {

283 
uöt32_t
 
	maddr
;

284 
uöt32_t
 
	m√tmask
;

285 } 
__©åibuã__
 ((
∑cked
));

287 
	sh«msg
 {

288 
h«∑ú
 
	mh«_√t
[1];

289 } 
__©åibuã__
 ((
∑cked
));

295 
	sh«∑ú6
 {

296 
ö6_addr
 
	maddr
;

297 
ö6_addr
 
	m√tmask
;

298 } 
__©åibuã__
 ((
∑cked
));

300 
	sh«msg6
 {

301 
h«∑ú6
 
	mh«_√t
[1];

302 } 
__©åibuã__
 ((
∑cked
));

308 
	sﬁ§msg
 {

309 
uöt8_t
 
	mﬁ§_msgty≥
;

310 
uöt8_t
 
	mﬁ§_vtime
;

311 
uöt16_t
 
	mﬁ§_msgsize
;

312 
uöt32_t
 
	m‹igö©‹
;

313 
uöt8_t
 
	mâl
;

314 
uöt8_t
 
	mh›˙t
;

315 
uöt16_t
 
	m£qno
;

318 
hñlomsg
 
	mhñlo
;

319 
ﬁ§_tcmsg
 
	mtc
;

320 
h«msg
 
	mh«
;

321 
midmsg
 
	mmid
;

322 } 
	mmesßge
;

324 } 
__©åibuã__
 ((
∑cked
));

330 
	sﬁ§msg6
 {

331 
uöt8_t
 
	mﬁ§_msgty≥
;

332 
uöt8_t
 
	mﬁ§_vtime
;

333 
uöt16_t
 
	mﬁ§_msgsize
;

334 
ö6_addr
 
	m‹igö©‹
;

335 
uöt8_t
 
	mâl
;

336 
uöt8_t
 
	mh›˙t
;

337 
uöt16_t
 
	m£qno
;

340 
hñlomsg6
 
	mhñlo
;

341 
ﬁ§_tcmsg6
 
	mtc
;

342 
h«msg6
 
	mh«
;

343 
midmsg6
 
	mmid
;

344 } 
	mmesßge
;

346 } 
__©åibuã__
 ((
∑cked
));

352 
	sﬁ§
 {

353 
uöt16_t
 
	mﬁ§_∑ckÀn
;

354 
uöt16_t
 
	mﬁ§_£qno
;

355 
ﬁ§msg
 
	mﬁ§_msg
[1];

356 } 
__©åibuã__
 ((
∑cked
));

358 
	sﬁ§6
 {

359 
uöt16_t
 
	mﬁ§_∑ckÀn
;

360 
uöt16_t
 
	mﬁ§_£qno
;

361 
ﬁ§msg6
 
	mﬁ§_msg
[1];

362 } 
__©åibuã__
 ((
∑cked
));

366 
	uﬁ§_mesßge
 {

367 
ﬁ§msg
 
	mv4
;

368 
ﬁ§msg6
 
	mv6
;

369 } 
__©åibuã__
 ((
∑cked
));

371 
	uﬁ§_∑ckë
 {

372 
ﬁ§
 
	mv4
;

373 
ﬁ§6
 
	mv6
;

374 } 
__©åibuã__
 ((
∑cked
));

	@src/olsr_spf.c

54 
	~"ùˇlc.h
"

55 
	~"defs.h
"

56 
	~"ﬁ§.h
"

57 
	~"tc_£t.h
"

58 
	~"√ighb‹_èbÀ.h
"

59 
	~"two_h›_√ighb‹_èbÀ.h
"

60 
	~"lök_£t.h
"

61 
	~"routög_èbÀ.h
"

62 
	~"mid_£t.h
"

63 
	~"h«_£t.h
"

64 
	~"comm⁄/li°.h
"

65 
	~"comm⁄/avl.h
"

66 
	~"ﬁ§_•f.h
"

67 
	~"√t_ﬁ§.h
"

68 
	~"lq_∂ugö.h
"

69 
	~"g©eway.h
"

71 
timî_íåy
 *
	g•f_backoff_timî
 = 
NULL
;

83 
	$avl_comp_ëx
(c⁄° *
ëx1
, c⁄° *
ëx2
)

85 i‡(*(c⁄° 
ﬁ§_lökco°
 *)
ëx1
 < *(c⁄° ol§_lökco° *)
ëx2
) {

89 i‡(*(c⁄° 
ﬁ§_lökco°
 *)
ëx1
 > *(c⁄° ol§_lökco° *)
ëx2
) {

94 
	}
}

102 
	$ﬁ§_•f_add_ˇnd_åì
(
avl_åì
 *
åì
, 
tc_íåy
 *
tc
)

104 #i‡!
	`deföed
(
NODEBUG
Ë&& deföed(
DEBUG
)

105 
ùaddr_°r
 
buf
;

106 
lqãxtbuf„r
 
lqbuf„r
;

108 
tc
->
ˇnd_åì_node
.
key
 = &tc->
∑th_co°
;

110 #ifde‡
DEBUG


111 
	`OLSR_PRINTF
(2, "SPF: in£π c™did©ê%s, co° %s\n", 
	`ﬁ§_ù_to_°rög
(&
buf
, &
tc
->
addr
),

112 
	`gë_lökco°_ãxt
(
tc
->
∑th_co°
, 
Ál£
, &
lqbuf„r
));

115 
	`avl_ö£π
(
åì
, &
tc
->
ˇnd_åì_node
, 
AVL_DUP
);

116 
	}
}

124 
	$ﬁ§_•f_dñ_ˇnd_åì
(
avl_åì
 *
åì
, 
tc_íåy
 *
tc
)

127 #ifde‡
DEBUG


128 #i‚de‡
NODEBUG


129 
ùaddr_°r
 
buf
;

130 
lqãxtbuf„r
 
lqbuf„r
;

132 
	`OLSR_PRINTF
(2, "SPF: dñëêˇndid©ê%s, co° %s\n", 
	`ﬁ§_ù_to_°rög
(&
buf
, &
tc
->
addr
),

133 
	`gë_lökco°_ãxt
(
tc
->
∑th_co°
, 
Ál£
, &
lqbuf„r
));

136 
	`avl_dñëe
(
åì
, &
tc
->
ˇnd_åì_node
);

137 
	}
}

145 
	$ﬁ§_•f_add_∑th_li°
(
li°_node
 *
hód
, *
∑th_cou¡
, 
tc_íåy
 *
tc
)

147 #i‡!
	`deföed
(
NODEBUG
Ë&& deföed(
DEBUG
)

148 
ùaddr_°r
 
∑thbuf
, 
nbuf
;

149 
lqãxtbuf„r
 
lqbuf„r
;

152 #ifde‡
DEBUG


153 
	`OLSR_PRINTF
(2, "SPF:áµídÖ©h %s, co° %s, vü %s\n", 
	`ﬁ§_ù_to_°rög
(&
∑thbuf
, &
tc
->
addr
),

154 
	`gë_lökco°_ãxt
(
tc
->
∑th_co°
, 
Ál£
, &
lqbuf„r
),Åc->
√xt_h›
 ? 
	`ﬁ§_ù_to_°rög
(&
nbuf
,

155 &
tc
->
√xt_h›
->

156 
√ighb‹_iÁ˚_addr
) : "-");

159 
	`li°_add_bef‹e
(
hód
, &
tc
->
∑th_li°_node
);

160 *
∑th_cou¡
 = *path_count + 1;

161 
	}
}

168 
tc_íåy
 *

169 
	$ﬁ§_•f_exåa˘_be°
(
avl_åì
 *
åì
)

171 
avl_node
 *
node
 = 
	`avl_wÆk_fú°
(
åì
);

173  (
node
 ? 
	`ˇnd_åì2tc
“odeË: 
NULL
);

174 
	}
}

184 
	$ﬁ§_•f_ªœx
(
avl_åì
 *
ˇnd_åì
, 
tc_íåy
 *
tc
)

186 
avl_node
 *
edge_node
;

187 
ﬁ§_lökco°
 
√w_co°
;

189 #ifde‡
DEBUG


190 #i‚de‡
NODEBUG


191 
ùaddr_°r
 
buf
, 
nbuf
;

192 
lqãxtbuf„r
 
lqbuf„r
;

194 
	`OLSR_PRINTF
(2, "SPF:Éx∂‹ögÇodê%s, co° %s\n", 
	`ﬁ§_ù_to_°rög
(&
buf
, &
tc
->
addr
),

195 
	`gë_lökco°_ãxt
(
tc
->
∑th_co°
, 
Ál£
, &
lqbuf„r
));

201 
edge_node
 = 
	`avl_wÆk_fú°
(&
tc
->
edge_åì
);Édge_node;Édge_nodê
	`avl_wÆk_√xt
(edge_node)) {

203 
tc_íåy
 *
√w_tc
;

204 
tc_edge_íåy
 *
tc_edge
 = 
	`edge_åì2tc_edge
(
edge_node
);

209 i‡(!
tc_edge
->
edge_öv
) {

210 #ifde‡
DEBUG


211 
	`OLSR_PRINTF
(2, "SPF: ign‹ögÉdgê%s\n", 
	`ﬁ§_ù_to_°rög
(&
buf
, &
tc_edge
->
T_de°_addr
));

212 i‡(!
tc_edge
->
edge_öv
) {

213 
	`OLSR_PRINTF
(2, "SPF:Ço inverseÉdge\n");

219 i‡(
tc_edge
->
co°
 =
LINK_COST_BROKEN
) {

220 #ifde‡
DEBUG


221 
	`OLSR_PRINTF
(2, "SPF: ign‹êedgê%†(brokí)\n", 
	`ﬁ§_ù_to_°rög
(&
buf
, &
tc_edge
->
T_de°_addr
));

229 
√w_co°
 = 
tc
->
∑th_co°
 + 
tc_edge
->
co°
;

231 #ifde‡
DEBUG


232 
	`OLSR_PRINTF
(2, "SPF:Éx∂‹ögÉdgê%s, co° %s\n", 
	`ﬁ§_ù_to_°rög
(&
buf
, &
tc_edge
->
T_de°_addr
),

233 
	`gë_lökco°_ãxt
(
√w_co°
, 
åue
, &
lqbuf„r
));

240 
√w_tc
 = 
tc_edge
->
edge_öv
->
tc
;

242 i‡(
√w_co°
 < 
√w_tc
->
∑th_co°
) {

245 i‡(
√w_tc
->
∑th_co°
 < 
ROUTE_COST_BROKEN
) {

246 
	`ﬁ§_•f_dñ_ˇnd_åì
(
ˇnd_åì
, 
√w_tc
);

250 
√w_tc
->
∑th_co°
 = 
√w_co°
;

251 
	`ﬁ§_•f_add_ˇnd_åì
(
ˇnd_åì
, 
√w_tc
);

254 i‡(
tc
->
√xt_h›
) {

255 
√w_tc
->
√xt_h›
 = 
tc
->next_hop;

257 
√w_tc
->
h›s
 = 
tc
->hops + 1;

259 #ifde‡
DEBUG


260 
	`OLSR_PRINTF
(2, "SPF: bëã∏∑thÅÿ%s, co° %s, vü %s, h›†%u\n", 
	`ﬁ§_ù_to_°rög
(&
buf
, &
√w_tc
->
addr
),

261 
	`gë_lökco°_ãxt
(
√w_co°
, 
åue
, &
lqbuf„r
), 
tc
->
√xt_h›
 ? 
	`ﬁ§_ù_to_°rög
(&
nbuf
,

262 &
tc
->
√xt_h›
->
√ighb‹_iÁ˚_addr
)

263 : "<n⁄e>", 
√w_tc
->
h›s
);

268 
	}
}

283 
	$ﬁ§_•f_run_fuŒ
(
avl_åì
 *
ˇnd_åì
, 
li°_node
 *
∑th_li°
, *
∑th_cou¡
)

285 
tc_íåy
 *
tc
;

287 *
∑th_cou¡
 = 0;

289 (
tc
 = 
	`ﬁ§_•f_exåa˘_be°
(
ˇnd_åì
))) {

291 
	`ﬁ§_•f_ªœx
(
ˇnd_åì
, 
tc
);

297 
	`ﬁ§_•f_dñ_ˇnd_åì
(
ˇnd_åì
, 
tc
);

298 
	`ﬁ§_•f_add_∑th_li°
(
∑th_li°
, 
∑th_cou¡
, 
tc
);

300 
	}
}

306 
ﬁ§_expúe_•f_backoff
(*
c⁄ãxt
 
__©åibuã__
 ((
unu£d
)))

308 
	g•f_backoff_timî
 = 
NULL
;

312 
	$ﬁ§_ˇlcuœã_routög_èbÀ
(
boﬁ
 
f‹˚
)

314 #ifde‡
SPF_PROFILING


315 
timevÆ
 
t1
, 
t2
, 
t3
, 
t4
, 
t5
, 
•f_öô
, 
•f_run
, 
rouã
, 
kî√l
, 
tŸÆ
;

317 
avl_åì
 
ˇnd_åì
;

318 
avl_node
 *
πp_åì_node
;

319 
li°_node
 
∑th_li°
;

320 
tc_íåy
 *
tc
;

321 
π_∑th
 *
πp
;

322 
tc_edge_íåy
 *
tc_edge
;

323 
√ighb‹_íåy
 *
√igh
;

324 
lök_íåy
 *
lök
;

325 
∑th_cou¡
 = 0;

328 i‡(!
f‹˚
) {

329 i‡(
•f_backoff_timî
) {

334 
•f_backoff_timî
 = 
	`ﬁ§_°¨t_timî
(1000, 5, 
OLSR_TIMER_ONESHOT
, &
ﬁ§_expúe_•f_backoff
, 
NULL
, 0);

337 #ifde‡
SPF_PROFILING


338 
	`gëtimeofday
(&
t1
, 
NULL
);

344 
	`avl_öô
(&
ˇnd_åì
, 
avl_comp_ëx
);

345 
	`li°_hód_öô
(&
∑th_li°
);

346 
	`ﬁ§_bump_routögåì_vîsi⁄
();

351 
	`OLSR_FOR_ALL_TC_ENTRIES
(
tc
) {

352 
tc
->
√xt_h›
 = 
NULL
;

353 
tc
->
∑th_co°
 = 
ROUTE_COST_BROKEN
;

354 
tc
->
h›s
 = 0;

356 
	`OLSR_FOR_ALL_TC_ENTRIES_END
(
tc
);

362 
	`ﬁ§_ch™ge_my£lf_tc
();

363 i‡(!
tc_my£lf
) {

368 
	`ﬁ§_upd©e_rib_rouãs
();

369 
	`ﬁ§_upd©e_kî√l_rouãs
();

376 
tc_my£lf
->
∑th_co°
 = 
ZERO_ROUTE_COST
;

377 
	`ﬁ§_•f_add_ˇnd_åì
(&
ˇnd_åì
, 
tc_my£lf
);

382 
	`OLSR_FOR_ALL_NBR_ENTRIES
(
√igh
) {

384 i‡(
√igh
->
°©us
 !
SYM
) {

385 
tc_edge
 = 
	`ﬁ§_lookup_tc_edge
(
tc_my£lf
, &
√igh
->
√ighb‹_maö_addr
);

386 i‡(
tc_edge
) {

387 
	`ﬁ§_dñëe_tc_edge_íåy
(
tc_edge
);

391 
tc_edge
 = 
	`ﬁ§_lookup_tc_edge
(
tc_my£lf
, &
√igh
->
√ighb‹_maö_addr
);

392 
lök
 = 
	`gë_be°_lök_to_√ighb‹
(&
√igh
->
√ighb‹_maö_addr
);

393 i‡(!
lök
 || 
	`lookup_lök_°©us
÷ökË=
LOST_LINK
) {

399 i‡(
tc_edge
) {

400 
	`ﬁ§_dñëe_tc_edge_íåy
(
tc_edge
);

406 i‡(
lök
->
if_«me
) {

407 
lök
->
öãr
 = 
	`if_ifwôh«me
÷ök->
if_«me
);

409 
lök
->
öãr
 = 
	`if_ifwôhaddr
(&lök->
loˇl_iÁ˚_addr
);

415 i‡(!
tc_edge
) {

416 
tc_edge
 = 
	`ﬁ§_add_tc_edge_íåy
(
tc_my£lf
, &
√igh
->
√ighb‹_maö_addr
, 0);

422 
	`ﬁ§_c›ylq_lök_íåy_2_tc_edge_íåy
(
tc_edge
, 
lök
);

423 
	`ﬁ§_ˇlc_tc_edge_íåy_ëx
(
tc_edge
);

425 i‡(
tc_edge
->
edge_öv
) {

426 
tc_edge
->
edge_öv
->
tc
->
√xt_h›
 = 
lök
;

430 
	`OLSR_FOR_ALL_NBR_ENTRIES_END
(
√igh
);

432 #ifde‡
SPF_PROFILING


433 
	`gëtimeofday
(&
t2
, 
NULL
);

439 
	`ﬁ§_•f_run_fuŒ
(&
ˇnd_åì
, &
∑th_li°
, &
∑th_cou¡
);

441 
	`OLSR_PRINTF
(2, "\n--- %†------------------------------------------------- DIJKSTRA\n\n", 
	`ﬁ§_wÆl˛ock_°rög
());

443 #ifde‡
SPF_PROFILING


444 
	`gëtimeofday
(&
t3
, 
NULL
);

450 ; !
	`li°_is_em±y
(&
∑th_li°
); 
	`li°_ªmove
’©h_li°.
√xt
)) {

452 
tc
 = 
	`∑thli°2tc
(
∑th_li°
.
√xt
);

453 
lök
 = 
tc
->
√xt_h›
;

455 i‡(!
lök
) {

456 #ifde‡
DEBUG


461 i‡(
tc
 !
tc_my£lf
) {

462 
ùaddr_°r
 
buf
;

463 
	`OLSR_PRINTF
(2, "SPF: %†nÿ√xt-h›\n", 
	`ﬁ§_ù_to_°rög
(&
buf
, &
tc
->
addr
));

475 
πp_åì_node
 = 
	`avl_wÆk_fú°
(&
tc
->
¥efix_åì
);Ñç_åì_node;Ñç_åì_nodê
	`avl_wÆk_√xt
(rtp_tree_node)) {

477 
πp
 = 
	`πp_¥efix_åì2πp
(
πp_åì_node
);

479 i‡(
πp
->
πp_π
) {

484 
	`ﬁ§_upd©e_π_∑th
(
πp
, 
tc
, 
lök
);

492 
	`ﬁ§_ö£π_π_∑th
(
πp
, 
tc
, 
lök
);

496 #i‡
deföed
 
löux


498 
	`ﬁ§_åiggî_g©ewayloss_check
();

503 
	`ﬁ§_upd©e_rib_rouãs
();

505 #ifde‡
SPF_PROFILING


506 
	`gëtimeofday
(&
t4
, 
NULL
);

511 
	`ﬁ§_upd©e_kî√l_rouãs
();

513 #ifde‡
SPF_PROFILING


514 
	`gëtimeofday
(&
t5
, 
NULL
);

517 #ifde‡
SPF_PROFILING


518 
	`timîsub
(&
t2
, &
t1
, &
•f_öô
);

519 
	`timîsub
(&
t3
, &
t2
, &
•f_run
);

520 
	`timîsub
(&
t4
, &
t3
, &
rouã
);

521 
	`timîsub
(&
t5
, &
t4
, &
kî√l
);

522 
	`timîsub
(&
t5
, &
t1
, &
tŸÆ
);

523 
	`OLSR_PRINTF
(1, "\n--- SPF-°©†f‹ %dÇodes, %dÑouã†—ŸÆ/öô/run/rouã/kîn): " "%d, %d, %d, %d, %d\n", 
∑th_cou¡
,

524 
routögåì
.
cou¡
, ()
tŸÆ
.
tv_u£c
, ()
•f_öô
.tv_u£c, ()
•f_run
.tv_u£c, ()
rouã
.tv_usec,

525 ()
kî√l
.
tv_u£c
);

527 
	}
}

	@src/olsr_spf.h

42 #i‚de‡
_OLSR_SPF_H


43 
	#_OLSR_SPF_H


	)

45 
ﬁ§_ˇlcuœã_routög_èbÀ
(
boﬁ
 
f‹˚
);

	@src/olsr_switch/commands.h

42 #i‚de‡
_COMMAND


43 
	#_COMMAND


	)

45 
	~"ohs_cmd.h
"

47 c⁄° 
ohs_comm™d
 
	gohs_comm™ds
[] = {

51 
ohs_cmd_hñp
},

55 
ohs_cmd_exô
},

59 
ohs_cmd_log
},

63 
ohs_cmd_li°
},

67 
ohs_cmd_lök
},

71 
ohs_cmd_ﬁ§d
},

72 {
NULL
, NULL,

73 
NULL
,

74 
NULL
,

75 
NULL
}

	@src/olsr_switch/link_rules.c

42 
	~"lök_ruÀs.h
"

43 
	~"ﬁ§_ho°_swôch.h
"

44 
	~"ùˇlc.h
"

46 
	~<°rög.h
>

47 
	~<°dlib.h
>

48 
	~<°dio.h
>

51 
	$ohs_check_lök
(
ohs_c⁄√˘i⁄
 *
oc
, 
ﬁ§_ù_addr
 *
d°
)

53 
ohs_ù_lök
 *
löks
;

54 
löks
 = 
oc
->löks;Üök†!
NULL
;Üök†löks->
√xt
) {

55 
r
;

56 i‡(!
	`ùequÆ
(&
löks
->
d°
, dst)) {

59 i‡(
löks
->
quÆôy
 == 0) {

60 i‡(
logbôs
 & 
LOG_LINK
) {

61 
ùaddr_°r
 
addr°r
, 
d°°r
;

62 
	`¥ötf
("%†-> %†Q: %d\n", 
	`ﬁ§_ù_to_°rög
(&
addr°r
, &
oc
->
ù_addr
), ol§_ù_to_°rög(&
d°°r
, 
d°
), 
löks
->
quÆôy
);

67 
r
 = 1 + ()(100.0 / (
RAND_MAX
 + 1.0Ë* 
	`ønd
());

69 i‡(
logbôs
 & 
LOG_LINK
) {

70 
ùaddr_°r
 
addr°r
, 
d°°r
;

71 
	`¥ötf
("%†-> %†Q: %d R: %d\n", 
	`ﬁ§_ù_to_°rög
(&
addr°r
, &
oc
->
ù_addr
), ol§_ù_to_°rög(&
d°°r
, 
d°
), 
löks
->
quÆôy
,

72 
r
);

75  
löks
->
quÆôy
 > 
r
 ? 0 : 1;

78 
	}
}

81 
	$ohs_dñëe_Æl_ªœãd_löks
(
ohs_c⁄√˘i⁄
 *
oc
)

83 
ohs_ù_lök
 *
löks
 = 
oc
->links;

84 
˙t
 = 0;

87 
löks
) {

88 
ohs_ù_lök
 *
tmp_lök
 = 
löks
;

89 
löks
 =Üöks->
√xt
;

90 
	`‰ì
(
tmp_lök
);

91 
˙t
++;

98  
˙t
;

99 
	}
}

101 
ohs_ù_lök
 *

102 
	$add_lök
(
ohs_c⁄√˘i⁄
 *
§c
, ohs_c⁄√˘i⁄ *
d°
)

104 
ohs_ù_lök
 *
lök
;

107 
lök
 = 
	`mÆloc
((
ohs_ù_lök
));

108 i‡(!
lök
)

109 
	`OHS_OUT_OF_MEMORY
("NewÜink");

111 
lök
->
√xt
 = 
§c
->
löks
;

112 
§c
->
löks
 = 
lök
;

113 
lök
->
d°
 = d°->
ù_addr
;

114 
§c
->
lök˙t
++;

116  
lök
;

117 
	}
}

120 
	$ªmove_lök
(
ohs_c⁄√˘i⁄
 *
oc
, 
ohs_ù_lök
 *
 k
)

122 
ohs_ù_lök
 *
löks
 = 
oc
->links;

123 
ohs_ù_lök
 *
¥ev_lök
 = 
NULL
;

125 
löks
) {

126 i‡(
löks
 =
 k
) {

128 i‡(
¥ev_lök
)

129 
¥ev_lök
->
√xt
 = 
löks
->next;

131 
oc
->
löks
 =Üöks->
√xt
;

133 
	`‰ì
(
 k
);

134 
oc
->
lök˙t
--;

137 
¥ev_lök
 = 
löks
;

138 
löks
 =Üöks->
√xt
;

141 
	}
}

143 
ohs_ù_lök
 *

144 
	$gë_lök
(
ohs_c⁄√˘i⁄
 *
oc
, 
ﬁ§_ù_addr
 *
d°
)

146 
ohs_ù_lök
 *
löks
;

147 
löks
 = 
oc
->löks;Üök†!
NULL
;Üök†löks->
√xt
) {

148 i‡(
	`ùequÆ
(&
löks
->
d°
, dst)) {

149  
löks
;

152  
NULL
;

153 
	}
}

	@src/olsr_switch/link_rules.h

42 #i‚de‡
_OLSR_SWITCH_LINK_RULES


43 
	#_OLSR_SWITCH_LINK_RULES


	)

45 
	~"ﬁ§_ty≥s.h
"

46 
	~"ﬁ§_ho°_swôch.h
"

47 
ohs_check_lök
(
ohs_c⁄√˘i⁄
 *, 
ﬁ§_ù_addr
 *);

49 
ohs_ù_lök
 *
gë_lök
(
ohs_c⁄√˘i⁄
 *, 
ﬁ§_ù_addr
 *);

51 
ohs_ù_lök
 *
add_lök
(
ohs_c⁄√˘i⁄
 *, ohs_connection *);

53 
ªmove_lök
(
ohs_c⁄√˘i⁄
 *, 
ohs_ù_lök
 *);

55 
ohs_dñëe_Æl_ªœãd_löks
(
ohs_c⁄√˘i⁄
 *);

	@src/olsr_switch/main.c

44 
	~"ﬁ§_ho°_swôch.h
"

45 
	~"lök_ruÀs.h
"

46 
	~"ohs_cmd.h
"

47 
	~"ùˇlc.h
"

49 
	~<sys/ty≥s.h
>

50 
	~<sys/sockë.h
>

51 
	~<î∫o.h
>

52 
	~<sig«l.h
>

53 
	~<√töë/ö.h
>

54 
	~<¨∑/öë.h
>

55 
	~<°dlib.h
>

56 
	~<°dio.h
>

57 
	~<°rög.h
>

58 
	~<uni°d.h
>

59 
	~<time.h
>

61 #ifde‡
WIN32


62 #unde‡
î∫o


63 
	#î∫o
 
	`WSAGëLa°Eº‹
()

	)

64 #unde‡
°ªº‹


65 
	#°ªº‹
(
x
Ë
	`SåEº‹
(x)

	)

66 
	#˛o£
(
x
Ë
	`˛o£sockë
(x)

	)

68 
	~<sys/waô.h
>

71 
	g§v_sockë
;

73 
	#OHS_BUFSIZE
 1500

	)

74 
uöt8_t
 
	gd©a_buf„r
[
OHS_BUFSIZE
];

76 
ohs_c⁄√˘i⁄
 *
	gohs_c⁄ns
;

80 
ﬁ§d_c⁄fig
 
	gﬁ§_˙f_d©a
;

81 
ﬁ§d_c⁄fig
 *
	gﬁ§_˙f
 = &
ﬁ§_˙f_d©a
;

83 
uöt32_t
 
	glogbôs
;

86 
ohs_öô_√w_c⁄√˘i⁄
();

88 
ohs_rouã_d©a
(
ohs_c⁄√˘i⁄
 *);

90 
ohs_öô_c⁄√˘_sockës
();

92 
ohs_c⁄figuª
();

94 #i‡!
deföed
 
WIN32


95 
	$ohs_li°í_lo›
(Ë
	`__©åibuã__
 ((
n‹ëu∫
));

97 
	`ohs_li°í_lo›
();

100 #ifde‡
WIN32


101 
__°dˇŒ


102 
	`ohs_˛o£
(
signo
 
	`__©åibuã__
 ((
unu£d
)))

105 
	`ohs_˛o£
(
signo
 
	`__©åibuã__
 ((
unu£d
)))

108 
	`¥ötf
("OHS:Éxit\n");

110 
	`˛o£
(
§v_sockë
);

112 
	`exô
(0);

113 
	}
}

115 
ohs_c⁄√˘i⁄
 *

116 
	$gë_˛õ¡_by_addr
(c⁄° 
ﬁ§_ù_addr
 *
adr
)

118 
ohs_c⁄√˘i⁄
 *
oc
;

119 
oc
 = 
ohs_c⁄ns
; o¯!
NULL
; o¯oc->
√xt
) {

120 i‡(
	`ùequÆ
(
adr
, &
oc
->
ù_addr
)) {

121  
oc
;

124  
NULL
;

125 
	}
}

128 
	$ohs_öô_√w_c⁄√˘i⁄
(
s
)

130 
ohs_c⁄√˘i⁄
 *
oc
;

131 
i
;

132 
uöt32_t
 
addr
[4];

134 i‡(
logbôs
 & 
LOG_CONNECT
) {

135 
	`¥ötf
("ohs_init_new_connection\n");

138 
oc
 = 
	`ˇŒoc
(1, (
ohs_c⁄√˘i⁄
));

139 i‡(!
oc
) {

140 
	`OHS_OUT_OF_MEMORY
("New connection");

143 
oc
->
sockë
 = 
s
;

144 
oc
->
löks
 = 
NULL
;

145 
oc
->
rx
 = 0;

146 
oc
->
tx
 = 0;

147 
oc
->
lök˙t
 = 0;

154 
i
 = 0; i < 20; i++) {

156 i‡(
	`ªcv
(
oc
->
sockë
, (*)
addr
, 
ﬁ§_˙f
->
ùsize
, 0) == ()olsr_cnf->ipsize) {

159 #i‡
deföed
 
WIN32


160 
	`SÀï
(100);

164 i‡(
i
 == 20) {

165 
	`¥ötf
("FaûedÅÿ„tch IPáddªss! (%s)\n", 
	`°ªº‹
(
î∫o
));

169 
addr
[0] = 
	`¡ohl
(addr[0]);

170 
addr
[1] = 
	`¡ohl
(addr[1]);

171 
addr
[2] = 
	`¡ohl
(addr[2]);

172 
addr
[3] = 
	`¡ohl
(addr[3]);

173 
	`mem˝y
(
oc
->
ù_addr
.
v6
.
s6_addr
, 
addr
, 
ﬁ§_˙f
->
ùsize
);

175 i‡(
logbôs
 & 
LOG_CONNECT
) {

176 
ùaddr_°r
 
addr°r
;

177 
	`¥ötf
("IP: %s\n", 
	`ﬁ§_ù_to_°rög
(&
addr°r
, &
oc
->
ù_addr
));

179 i‡(
	`gë_˛õ¡_by_addr
(&
oc
->
ù_addr
)) {

180 i‡(
logbôs
 & 
LOG_CONNECT
) {

181 
ùaddr_°r
 
addr°r
;

182 
	`¥ötf
("IP: %†DUPLICATE! Disc⁄e˘ög clõ¡!\n", 
	`ﬁ§_ù_to_°rög
(&
addr°r
, &
oc
->
ù_addr
));

184 
	`˛o£
(
s
);

185 
	`‰ì
(
oc
);

190 
oc
->
√xt
 = 
ohs_c⁄ns
;

191 
ohs_c⁄ns
 = 
oc
;

193 
	}
}

196 
	$ohs_dñëe_c⁄√˘i⁄
(
ohs_c⁄√˘i⁄
 *
oc
)

198 i‡(!
oc
) {

202 
	`˛o£
(
oc
->
sockë
);

204 i‡(
logbôs
 & 
LOG_CONNECT
) {

205 
ùaddr_°r
 
addr°r
;

206 
	`¥ötf
("RemovögÉ¡ry %s\n", 
	`ﬁ§_ù_to_°rög
(&
addr°r
, &
oc
->
ù_addr
));

209 i‡(
oc
 =
ohs_c⁄ns
) {

210 
ohs_c⁄ns
 = ohs_c⁄ns->
√xt
;

212 
ohs_c⁄√˘i⁄
 *
cuº_íåy
 = 
ohs_c⁄ns
->
√xt
;

213 
ohs_c⁄√˘i⁄
 *
¥ev_íåy
 = 
ohs_c⁄ns
;

215 
cuº_íåy
 !
NULL
) {

216 i‡(
cuº_íåy
 =
oc
) {

217 
¥ev_íåy
->
√xt
 = 
cuº_íåy
->next;

220 
¥ev_íåy
 = 
cuº_íåy
;

221 
cuº_íåy
 = cuº_íåy->
√xt
;

224 
	`ohs_dñëe_Æl_ªœãd_löks
(
oc
);

226 
	`‰ì
(
oc
);

228 
	}
}

231 
	$ohs_rouã_d©a
(
ohs_c⁄√˘i⁄
 *
oc
)

233 
ohs_c⁄√˘i⁄
 *
ohs_cs
;

234 
ssize_t
 
Àn
;

235 
˙t
 = 0;

237 
oc
->
tx
++;

239 i‡((
Àn
 = 
	`ªcv
(
oc
->
sockë
, (*)
d©a_buf„r
, 
OHS_BUFSIZE
, 0)) <= 0)

242 i‡(
logbôs
 & 
LOG_FORWARD
) {

243 
ùaddr_°r
 
addr°r
;

244 
	`¥ötf
("Re˚ived %ld byã†‰om %s\n", ()
Àn
, 
	`ﬁ§_ù_to_°rög
(&
addr°r
, &
oc
->
ù_addr
));

247 
ohs_cs
 = 
ohs_c⁄ns
; ohs_cs; ohs_c†ohs_cs->
√xt
) {

249 i‡(
	`ohs_check_lök
(
oc
, &
ohs_cs
->
ù_addr
Ë&& oc->
sockë
 != ohs_cs->socket) {

250 
ssize_t
 
£¡
;

253 i‡(
	`£nd
(
ohs_cs
->
sockë
, (c⁄° *)&
oc
->
ù_addr
, 
ﬁ§_˙f
->
ùsize
, 0) != ()olsr_cnf->ipsize) {

254 
	`¥ötf
("Error sendingÜinkáddress!\n");

257 i‡(
logbôs
 & 
LOG_FORWARD
) {

258 
ùaddr_°r
 
addr°r
, 
addr°r2
;

259 
	`¥ötf
("Sídög %d byã†%s=>%s\n", ()
Àn
, 
	`ﬁ§_ù_to_°rög
(&
addr°r
, &
oc
->
ù_addr
),

260 
	`ﬁ§_ù_to_°rög
(&
addr°r2
, &
ohs_cs
->
ù_addr
));

263 
£¡
 = 
	`£nd
(
ohs_cs
->
sockë
, (*)
d©a_buf„r
, 
Àn
, 0);

264 i‡(
£¡
 !
Àn
) {

265 
	`¥ötf
("Eº‹ sídög(bu‡%d !£¡ %d)\n", ()
Àn
, ()
£¡
);

267 
ohs_cs
->
rx
++;

268 
˙t
++;

271  
˙t
;

272 
	}
}

275 
	$ohs_öô_c⁄√˘_sockës
()

277 
uöt32_t
 
yes
 = 1;

278 
sockaddr_ö
 
sö
;

280 
	`¥ötf
("Inôütög sockë TCPÖ‹à%d\n", 
OHS_TCP_PORT
);

282 i‡((
§v_sockë
 = 
	`sockë
(
AF_INET
, 
SOCK_STREAM
, 0)) < 0) {

283 
	`¥ötf
("CouldÇŸ inôülizêsockë(%d): %s\n", 
§v_sockë
, 
	`°ªº‹
(
î∫o
));

284 
	`exô
(0);

287 i‡(
	`£tsock›t
(
§v_sockë
, 
SOL_SOCKET
, 
SO_REUSEADDR
, (*)&
yes
, (yes)) < 0) {

288 
	`¥ötf
("SO_REUSEADDR faûed f‹ sockë: %s\n", 
	`°ªº‹
(
î∫o
));

289 
	`˛o£
(
§v_sockë
);

290 
	`exô
(0);

294 
	`mem£t
(&
sö
, 0, (sin));

295 
sö
.
sö_Ámûy
 = 
AF_INET
;

296 
sö
.
sö_addr
.
s_addr
 = 
INADDR_ANY
;

297 
sö
.
sö_p‹t
 = 
	`ht⁄s
(
OHS_TCP_PORT
);

300 i‡(
	`böd
(
§v_sockë
, (
sockaddr
 *)&
sö
, (sin)) == -1) {

301 
	`¥ötf
("böd faûed f‹ sockë: %s\n", 
	`°ªº‹
(
î∫o
));

302 
	`˛o£
(
§v_sockë
);

303 
	`exô
(0);

307 i‡(
	`li°í
(
§v_sockë
, 5) == -1) {

308 
	`¥ötf
("li°í faûed f‹ sockë: %s\n", 
	`°ªº‹
(
î∫o
));

309 
	`˛o£
(
§v_sockë
);

310 
	`exô
(0);

313 
	}
}

316 
	$ohs_c⁄figuª
()

320 
	}
}

323 
	$ac˚±_h™dÀr
()

325 
sockaddr_ö
 
pö
;

326 
sockÀn_t
 
addæí
 = (
pö
);

327 
s
;

329 
	`mem£t
(&
pö
, 0, (pin));

331 i‡((
s
 = 
	`ac˚±
(
§v_sockë
, (
sockaddr
 *)&
pö
, &
addæí
)) < 0) {

332 
	`¥ötf
("ac˚± faûed sockë: %s\n", 
	`°ªº‹
(
î∫o
));

335 
	`ohs_öô_√w_c⁄√˘i⁄
(
s
);

337 
	}
}

340 
	$°dö_h™dÀr
()

342 
	`ohs_∑r£_comm™d
();

343 
	}
}

346 
	$ªad_h™dÀr
(
ohs_c⁄√˘i⁄
 *
c⁄
)

348 i‡(
	`ohs_rouã_d©a
(
c⁄
) < 0)

349 
	`ohs_dñëe_c⁄√˘i⁄
(
c⁄
);

350 
	}
}

353 
	$ohs_li°í_lo›
()

355 #i‡!
deföed
 
WIN32


356 
n
;

357 
fd_£t
 
ibôs
;

358 
‚_°dö
 = 
	`fûío
(
°dö
);

361 
high
;

363 
ohs_c⁄√˘i⁄
 *
ohs_cs
;

365 
high
 = 0;

366 
	`FD_ZERO
(&
ibôs
);

369 
high
 = 
§v_sockë
;

370 
	`FD_SET
(
§v_sockë
, &
ibôs
);

372 i‡(
‚_°dö
 > 
high
)

373 
high
 = 
‚_°dö
;

375 
	`FD_SET
(
‚_°dö
, &
ibôs
);

378 
ohs_cs
 = 
ohs_c⁄ns
; ohs_cs; ohs_c†ohs_cs->
√xt
) {

379 i‡(
ohs_cs
->
sockë
 > 
high
)

380 
high
 = 
ohs_cs
->
sockë
;

382 
	`FD_SET
(
ohs_cs
->
sockë
, &
ibôs
);

386 
n
 = 
	`£À˘
(
high
 + 1, &
ibôs
, 0, 0, 
NULL
);

388 i‡(
n
 == 0)

392 i‡(
n
 < 0) {

393 i‡(
î∫o
 =
EINTR
)

396 
	`¥ötf
("Eº‹ sñe˘: %s", 
	`°ªº‹
(
î∫o
));

401 i‡(
	`FD_ISSET
(
§v_sockë
, &
ibôs
))

402 
	`ac˚±_h™dÀr
();

405 
ohs_cs
 = 
ohs_c⁄ns
;

406 
ohs_cs
) {

407 
ohs_c⁄√˘i⁄
 *
ohs_tmp
 = 
ohs_cs
;

408 
ohs_cs
 = ohs_cs->
√xt
;

410 i‡(
	`FD_ISSET
(
ohs_tmp
->
sockë
, &
ibôs
))

411 
	`ªad_h™dÀr
(
ohs_tmp
);

414 i‡(
	`FD_ISSET
(
‚_°dö
, &
ibôs
))

415 
	`°dö_h™dÀr
();

419 
HANDLE
 
Obje˘s
[2];

420 
WSANETWORKEVENTS
 
NëEvíts
;

421 
ohs_c⁄√˘i⁄
 *
WÆkî
, *
TmpWÆkî
;

422 
Res
;

424 
Obje˘s
[0] = 
	`GëStdH™dÀ
(
STD_INPUT_HANDLE
);

425 
Obje˘s
[1] = 
	`WSACª©eEvít
();

427 i‡(
	`WSAEvítSñe˘
(
§v_sockë
, 
Obje˘s
[1], 
FD_ACCEPT
Ë=
SOCKET_ERROR
) {

428 
	`Ârötf
(
°dîr
, "WSAEvítSñe˘ faûed (1): %s\n", 
	`°ªº‹
(
î∫o
));

433 
WÆkî
 = 
ohs_c⁄ns
; WÆkî !
NULL
; WÆkî = WÆkî->
√xt
) {

434 i‡(
	`WSAEvítSñe˘
(
WÆkî
->
sockë
, 
Obje˘s
[1], 
FD_READ
 | 
FD_CLOSE
Ë=
SOCKET_ERROR
) {

435 
	`Ârötf
(
°dîr
, "WSAEvítSñe˘ faûed (2): %s\n", 
	`°ªº‹
(
î∫o
));

436 
	`SÀï
(1000);

441 
Res
 = 
	`WaôF‹Mu…ùÀObje˘s
(2, 
Obje˘s
, 
FALSE
, 
INFINITE
);

443 i‡(
Res
 =
WAIT_FAILED
) {

444 
	`Ârötf
(
°dîr
, "WaôF‹Mu…ùÀObje˘†Áûed: %s\n", 
	`°ªº‹
(
	`GëLa°Eº‹
()));

445 
	`SÀï
(1000);

449 i‡(
Res
 =
WAIT_OBJECT_0
)

450 
	`°dö_h™dÀr
();

452 i‡(
Res
 =
WAIT_OBJECT_0
 + 1) {

453 i‡(
	`WSAEnumNëw‹kEvíts
(
§v_sockë
, 
Obje˘s
[1], &
NëEvíts
Ë=
SOCKET_ERROR
)

454 
	`Ârötf
(
°dîr
, "WSAEnumNëw‹kEvít†Áûed (1): %s\n", 
	`°ªº‹
(
î∫o
));

457 i‡((
NëEvíts
.
lNëw‹kEvíts
 & 
FD_ACCEPT
) != 0)

458 
	`ac˚±_h™dÀr
();

461 
WÆkî
 = 
ohs_c⁄ns
; WÆkî !
NULL
; WÆkî = 
TmpWÆkî
) {

462 
TmpWÆkî
 = 
WÆkî
->
√xt
;

464 i‡(
	`WSAEnumNëw‹kEvíts
(
WÆkî
->
sockë
, 
Obje˘s
[1], &
NëEvíts
Ë=
SOCKET_ERROR
)

465 
	`Ârötf
(
°dîr
, "WSAEnumNëw‹kEvít†Áûed (2): %s\n", 
	`°ªº‹
(
î∫o
));

468 i‡((
NëEvíts
.
lNëw‹kEvíts
 & (
FD_READ
 | 
FD_CLOSE
)) != 0)

469 
	`ªad_h™dÀr
(
WÆkî
);

476 
	}
}

479 
	$maö
()

482 #ifde‡
WIN32


483 
WSADATA
 
WßD©a
;

485 i‡(
	`WSASèπup
(0x0202, &
WßD©a
)) {

486 
	`Ârötf
(
°dîr
, "CouldÇot initialize WinSock.\n");

487 
	`exô
(
EXIT_FAILURE
);

490 
	`SëC⁄sﬁeCålH™dÀr
(
ohs_˛o£
, 
åue
);

493 
	`sig«l
(
SIGINT
, 
ohs_˛o£
);

494 
	`sig«l
(
SIGTERM
, 
ohs_˛o£
);

497 
	`sig«l
(
SIGCHLD
, 
SIG_IGN
);

500 
	`¥ötf
("ﬁ§d ho°-swôch d´m⁄ vîsi⁄ %†°¨tög\n", 
OHS_VERSION
);

502 
logbôs
 = 
LOG_DEFAULT
;

503 
ﬁ§_˙f
->
ù_vîsi⁄
 = 
AF_INET
;

504 
ﬁ§_˙f
->
ùsize
 = (
ö_addr
);

506 
	`§™d
(()
	`time
(
NULL
));

508 
	`ohs_£t_ﬁ§d_∑th
(
OHS_DEFAULT_OLSRD_PATH
);

510 
	`ohs_öô_c⁄√˘_sockës
();

512 
	`ohs_c⁄figuª
();

514 
	`¥ötf
("OHS command interpreterÑeading from STDIN\n");

515 
	`¥ötf
("\n> ");

516 
	`fÊush
(
°dout
);

518 
	`ohs_li°í_lo›
();

520 
	`ohs_˛o£
(0);

523 
	}
}

	@src/olsr_switch/ohs_cmd.c

42 
	~"ﬁ§_ho°_swôch.h
"

43 
	~"ﬁ§_ty≥s.h
"

44 
	~"comm™ds.h
"

45 
	~"lök_ruÀs.h
"

46 
	~"ùˇlc.h
"

48 
	~<°rög.h
>

49 
	~<°dlib.h
>

50 
	~<sys/sockë.h
>

51 
	~<√töë/ö.h
>

52 
	~<¨∑/öë.h
>

53 
	~<sys/ty≥s.h
>

54 
	~<sys/°©.h
>

55 
	~<uni°d.h
>

56 
	~<î∫o.h
>

58 
	#TOK_BUF_SIZE
 500

	)

59 
	gtok_buf
[
TOK_BUF_SIZE
];

61 
	#MAX_OLSRD_ARGS
 10

	)

62 
	gﬁ§d_∑th
[
FILENAME_MAX
];

65 
	$gë_√xt_tokí
(c⁄° *
§c
, *
d°
, 
size_t
 
buÊí
)

67 
i
 = 0, 
j
 = 0;

69 
d°
[0] = 0;

71 
§c
[
j
] == ' ' && src[j] != 0) {

72 
j
++;

75 
§c
 +
j
;

76 
i
 = 0;

77 (
§c
[
i
] !' 'Ë&& (§c[i] !0Ë&& (ò< (()
buÊí
 - 1))) {

78 
d°
[
i
] = 
§c
[i];

79 
i
++;

81 
d°
[
i
] = 0;

85  
i
 + 
j
;

86 
	}
}

89 
	$ohs_£t_ﬁ§d_∑th
(c⁄° *
∑th
)

91 
	`°rs˝y
(
ﬁ§d_∑th
, 
∑th
, (olsrd_path));

93 
	}
}

95 #ifde‡
WIN32


97 
ohs_cmd_ﬁ§d
(c⁄° *
¨gs
 
__©åibuã__
 ((
unu£d
)))

99 
¥ötf
("olsrd commandÇotávailable in windows version\nStart instances manually\n");

104 
	$ohs_cmd_ﬁ§d
(c⁄° *
¨gs
)

106 c⁄° *
ﬁ§d_¨gs
[
MAX_OLSRD_ARGS
];

107 
ö_addr
 
üddr
;

109 
¨gs
 +
	`gë_√xt_tokí
◊rgs, 
tok_buf
, 
TOK_BUF_SIZE
);

111 i‡(!
	`°æí
(
tok_buf
))

112 
¥öt_ußge
;

115 i‡(!
	`°∫cmp
(
tok_buf
, "°¨t", 
	`°æí
("start"))) {

116 
¨gc
 = 0, 
i
 = 0;

118 
¨gs
 +
	`gë_√xt_tokí
◊rgs, 
tok_buf
, 
TOK_BUF_SIZE
);

120 i‡(!
	`°æí
(
tok_buf
))

121 
¥öt_ußge
;

123 i‡(!
	`öë_©⁄
(
tok_buf
, &
üddr
)) {

124 
	`¥ötf
("InvÆid IP %s\n", 
tok_buf
);

125 
¥öt_ußge
;

128 
ﬁ§d_¨gs
[
¨gc
++] = 
ﬁ§d_∑th
;

131 
ﬁ§d_¨gs
[
¨gc
++] = "-f";

132 
ﬁ§d_¨gs
[
¨gc
++] = "./olsrd.emu.conf";

134 
ﬁ§d_¨gs
[
¨gc
++] = "-hemu";

135 
ﬁ§d_¨gs
[
¨gc
++] = 
tok_buf
;

137 
ﬁ§d_¨gs
[
¨gc
++] = "-d";

138 
ﬁ§d_¨gs
[
¨gc
++] = "0";

139 
ﬁ§d_¨gs
[
¨gc
++] = "-nofork";

140 
ﬁ§d_¨gs
[
¨gc
] = 
NULL
;

142 
	`¥ötf
("Executög: %s", 
ﬁ§d_∑th
);

143 
i
 = 0; i < 
¨gc
; i++)

144 
	`¥ötf
(" %s", 
ﬁ§d_¨gs
[
i
]);

145 
	`¥ötf
("\n");

147 i‡(
	`f‹k
())

150 i‡(
	`execve
(
ﬁ§d_∑th
, (*c⁄° *)
ﬁ§d_¨gs
, 
NULL
) < 0) {

151 
	`¥ötf
("Eº‹Éxecutög ol§d: %s\n", 
	`°ªº‹
(
î∫o
));

152 
	`exô
(1);

156 i‡(!
	`°∫cmp
(
tok_buf
, "°›", 
	`°æí
("stop"))) {

157 
ohs_c⁄√˘i⁄
 *
oc
;

159 
¨gs
 +
	`gë_√xt_tokí
◊rgs, 
tok_buf
, 
TOK_BUF_SIZE
);

161 i‡(!
	`°æí
(
tok_buf
))

162 
¥öt_ußge
;

164 i‡(!
	`öë_©⁄
(
tok_buf
, &
üddr
)) {

165 
	`¥ötf
("InvÆid IP %s\n", 
tok_buf
);

166 
¥öt_ußge
;

169 
oc
 = 
	`gë_˛õ¡_by_addr
((
ﬁ§_ù_addr
 *)&
üddr
.
s_addr
);

171 i‡(!
oc
) {

172 
	`¥ötf
("Nÿsuch clõ¡: %s\n", 
tok_buf
);

175 
	`ohs_dñëe_c⁄√˘i⁄
(
oc
);

180 i‡(!
	`°∫cmp
(
tok_buf
, "£tb", 
	`°æí
("setb"))) {

181 
°©
 
sbuf
;

183 
¨gs
 +
	`gë_√xt_tokí
◊rgs, 
tok_buf
, 
TOK_BUF_SIZE
);

185 i‡(!
	`°æí
(
tok_buf
))

186 
¥öt_ußge
;

188 i‡(
	`°©
(
tok_buf
, &
sbuf
) < 0) {

189 
	`¥ötf
("Eº‹ sëtög bö¨y \"%s\": %s\n", 
tok_buf
, 
	`°ªº‹
(
î∫o
));

193 i‡((
sbuf
.
°_mode
 & 
S_IFDIR
Ë|| !(sbuf.°_modê& 
S_IXUSR
)) {

194 
	`¥ötf
("Eº‹ sëtög bö¨y \"%s\": NŸáÑeguœ∏execu©bÀ fûe!\n", 
tok_buf
);

198 
	`¥ötf
("New ol§d bö¨yÖ©h:\"%s\"\n", 
tok_buf
);

199 
	`ohs_£t_ﬁ§d_∑th
(
tok_buf
);

205 i‡(!
	`°∫cmp
(
tok_buf
, "£è", 
	`°æí
("seta"))) {

206 
	`¥ötf
("Error - NOT IMPLEMENTED YET\n");

210 i‡(!
	`°∫cmp
(
tok_buf
, "show", 
	`°æí
("show"))) {

211 
	`¥ötf
("ﬁ§d comm™d sëtögs:\n\tBö¨yÖ©h: %s\n\tArgumít† : \n", 
ﬁ§d_∑th
);

215 
¥öt_ußge
:

216 
	`¥ötf
("Usage: olsrd [start|stop|show|setb|seta] [IP|path|args]\n");

218 
	}
}

222 
	$ohs_cmd_lök
(c⁄° *
¨gs
)

224 
uöt8_t
 
bi
 = 0, 
wûdc_§c
 = 0, 
wûdc_d°
 = 0;

225 
ohs_c⁄√˘i⁄
 *
§c
, *
d°
;

226 
ö_addr
 
üddr
;

227 
quÆ
;

228 
ohs_ù_lök
 *
my_lök
, *
öv_lök
;

230 
¨gs
 +
	`gë_√xt_tokí
◊rgs, 
tok_buf
, 
TOK_BUF_SIZE
);

232 i‡(!
	`°æí
(
tok_buf
)) {

233 
¥öt_ußge
;

235 i‡(!
	`°∫cmp
(
tok_buf
, "bi", 
	`°æí
("bi"))) {

236 
bi
 = 1;

237 
¨gs
 +
	`gë_√xt_tokí
◊rgs, 
tok_buf
, 
TOK_BUF_SIZE
);

239 i‡(!
	`°æí
(
tok_buf
)) {

240 
¥öt_ußge
;

244 i‡(
tok_buf
[0] == '*') {

245 
wûdc_§c
 = 1;

246 
§c
 = 
ohs_c⁄ns
;

248 i‡(!
	`öë_©⁄
(
tok_buf
, &
üddr
)) {

249 
	`¥ötf
("InvÆid sr¯IP %s\n", 
tok_buf
);

253 
§c
 = 
	`gë_˛õ¡_by_addr
((
ﬁ§_ù_addr
 *)&
üddr
.
s_addr
);

255 i‡(!
§c
) {

256 
	`¥ötf
("Nÿsuch clõ¡: %s!\n", 
tok_buf
);

261 
¨gs
 +
	`gë_√xt_tokí
◊rgs, 
tok_buf
, 
TOK_BUF_SIZE
);

263 i‡(!
	`°æí
(
tok_buf
)) {

264 
¥öt_ußge
;

267 i‡(
tok_buf
[0] == '*') {

268 
wûdc_d°
 = 1;

269 
d°
 = 
ohs_c⁄ns
;

271 i‡(!
	`öë_©⁄
(
tok_buf
, &
üddr
)) {

272 
	`¥ötf
("InvÆid sr¯IP %s\n", 
tok_buf
);

276 
d°
 = 
	`gë_˛õ¡_by_addr
((
ﬁ§_ù_addr
 *)&
üddr
.
s_addr
);

277 i‡(!
d°
) {

278 
	`¥ötf
("Nÿsuch clõ¡: %s!\n", 
tok_buf
);

283 
¨gs
 +
	`gë_√xt_tokí
◊rgs, 
tok_buf
, 
TOK_BUF_SIZE
);

285 i‡(!
	`°æí
(
tok_buf
)) {

286 
¥öt_ußge
;

290 i‡(
wûdc_§c
 && 
wûdc_d°
) {

291 
bi
 = 0;

294 
quÆ
 = 
	`©oi
(
tok_buf
);

296 i‡(
quÆ
 < 0 || qual > 100) {

297 
	`¥ötf
("Link quality out ofÑange(0-100)\n");

301 
§c
) {

302 
d°
) {

303 
ùaddr_°r
 
§ˇddr°r
, 
d°addr°r
;

305 i‡(
§c
 !
d°
) {

306 
my_lök
 = 
	`gë_lök
(
§c
, &
d°
->
ù_addr
);

307 
öv_lök
 = 
bi
 ? 
	`gë_lök
(
d°
, &
§c
->
ù_addr
Ë: 
NULL
;

308 i‡(
quÆ
 == 100) {

310 i‡(
my_lök
) {

311 
	`ªmove_lök
(
§c
, 
my_lök
);

313 i‡(
öv_lök
) {

314 
	`ªmove_lök
(
d°
, 
öv_lök
);

317 i‡(!
my_lök
) {

319 
my_lök
 = 
	`add_lök
(
§c
, 
d°
);

322 
my_lök
->
quÆôy
 = 
quÆ
;

324 i‡(
bi
) {

325 i‡(!
öv_lök
) {

327 
öv_lök
 = 
	`add_lök
(
d°
, 
§c
);

329 
öv_lök
->
quÆôy
 = 
quÆ
;

332 
	`¥ötf
("%†%sdúe˘i⁄ÆÜök(sË%†%c=> %†quÆôy %d\n", (
quÆ
 =100Ë? "Removög" : "Sëtög", 
bi
 ? "bi" : "uni",

333 
	`ﬁ§_ù_to_°rög
(&
§ˇddr°r
, &
§c
->
ù_addr
), 
bi
 ? '<' : '=', ol§_ù_to_°rög(&
d°addr°r
, &
d°
->ù_addr), 
quÆ
);

335 i‡(
wûdc_d°
) {

336 
d°
 = d°->
√xt
;

341 
d°
 = 
wûdc_d°
 ? 
ohs_c⁄ns
 : dst;

342 
§c
 = 
wûdc_§c
 ? src->
√xt
 : 
NULL
;

346 
¥öt_ußge
:

347 
	`¥ötf
("link <bi> srcIP dstIP [0-100]");

349 
	}
}

352 
	$ohs_cmd_li°
(c⁄° *
¨gs
)

354 
ohs_c⁄√˘i⁄
 *
oc
 = 
ohs_c⁄ns
;

356 
¨gs
 +
	`gë_√xt_tokí
◊rgs, 
tok_buf
, 
TOK_BUF_SIZE
);

358 i‡(!
	`°æí
(
tok_buf
Ë|| !
	`°∫cmp
(tok_buf, "clients", strlen("clients"))) {

359 
	`¥ötf
("All connected clients:\n");

361 
oc
) {

362 
ùaddr_°r
 
addr°r
;

363 
	`¥ötf
("\t%†- Rx: %d Tx: %d LökC¡: %d\n", 
	`ﬁ§_ù_to_°rög
(&
addr°r
, &
oc
->
ù_addr
), oc->
rx
, oc->
tx
, oc->
lök˙t
);

364 
oc
 = oc->
√xt
;

366 } i‡(!
	`°∫cmp
(
tok_buf
, "löks", 
	`°æí
("links"))) {

367 
	`¥ötf
("All configuredÜinks:\n");

368 
oc
) {

369 
ohs_ù_lök
 *
löks
 = 
oc
->links;

370 
löks
) {

371 
ùaddr_°r
 
addr°r
, 
d°°r
;

372 
	`¥ötf
("\t%†=> %†QuÆôy: %d\n", 
	`ﬁ§_ù_to_°rög
(&
addr°r
, &
oc
->
ù_addr
), ol§_ù_to_°rög(&
d°°r
, &
löks
->
d°
),

373 
löks
->
quÆôy
);

375 
löks
 =Üöks->
√xt
;

377 
oc
 = oc->
√xt
;

380 
	`¥ötf
("list [clients|links]");

384 
	}
}

387 
	$ohs_cmd_hñp
(c⁄° *
¨gs
)

389 
i
;

391 
¨gs
 +
	`gë_√xt_tokí
◊rgs, 
tok_buf
, 
TOK_BUF_SIZE
);

393 i‡(!
	`°æí
(
tok_buf
)) {

394 
	`¥ötf
("Ol§d ho° swôch vîsi⁄ %s\n", 
OHS_VERSION
);

395 
	`¥ötf
("Available commands:\n");

397 
i
 = 0; 
ohs_comm™ds
[i].
cmd
; i++) {

398 i‡(
ohs_comm™ds
[
i
].
hñ±ext_brõf
)

399 
	`¥ötf
("\t%†- %s\n", 
ohs_comm™ds
[
i
].
cmd
, ohs_comm™ds[i].
hñ±ext_brõf
);

401 
	`¥ötf
("\nType 'help cmd' for help oná specific command\n");

403 
i
 = 0; 
ohs_comm™ds
[i].
cmd
; i++) {

404 i‡(!
	`°∫cmp
(
tok_buf
, 
ohs_comm™ds
[
i
].
cmd
, 
	`°æí
(ohs_commands[i].cmd))) {

405 
	`¥ötf
("Ußge: %s\nDes¸ùti⁄:\n%s\n", 
ohs_comm™ds
[
i
].
sy¡ax
, ohs_comm™ds[i].
hñ±ext_l⁄g
);

410 
	`¥ötf
("Usage: help <command>\n");

413  
i
;

414 
	}
}

417 
	$ohs_cmd_log
(c⁄° *
¨gs
)

419 
uöt8_t
 
£t
 = 0;

421 
¨gs
 +
	`gë_√xt_tokí
◊rgs, 
tok_buf
, 
TOK_BUF_SIZE
);

423 i‡(
	`°æí
(
tok_buf
Ë&& ((
£t
 = !
	`°∫cmp
(tok_buf, "set", strlen("set"))) || !strncmp(tok_buf, "unset", strlen("unset")))) {

424 
uöt32_t
 
√w_bô
 = 0;

426 
¨gs
 +
	`gë_√xt_tokí
◊rgs, 
tok_buf
, 
TOK_BUF_SIZE
);

428 i‡(!
	`°æí
(
tok_buf
))

429 
¥öt_ußge
;

431 i‡(!
	`°∫cmp
(
tok_buf
, "CON", 
	`°æí
("CON")))

432 
√w_bô
 = 
LOG_CONNECT
;

433 i‡(!
	`°∫cmp
(
tok_buf
, "FOR", 
	`°æí
("FOR")))

434 
√w_bô
 = 
LOG_FORWARD
;

435 i‡(!
	`°∫cmp
(
tok_buf
, "LIN", 
	`°æí
("LIN")))

436 
√w_bô
 = 
LOG_LINK
;

438 i‡(!
√w_bô
)

439 
¥öt_ußge
;

441 i‡(
£t
)

442 
logbôs
 |
√w_bô
;

444 
logbôs
 &~
√w_bô
;

446 
	`¥ötf
("%†log bô: 0x%08x,ÇewÜog: 0x%08x\n", 
£t
 ? "Sëtög" : "Removög", 
√w_bô
, 
logbôs
);

449 i‡(
	`°æí
(
tok_buf
))

450 
¥öt_ußge
;

452 
	`¥ötf
("Log: (0x%08xË", 
logbôs
);

453 i‡(
logbôs
 & 
LOG_CONNECT
)

454 
	`¥ötf
("CONNECT ");

455 i‡(
logbôs
 & 
LOG_FORWARD
)

456 
	`¥ötf
("FORWARD ");

457 i‡(
logbôs
 & 
LOG_LINK
)

458 
	`¥ötf
("LINK ");

460 
	`¥ötf
("\n");

464 
¥öt_ußge
:

465 
	`¥ötf
("Usage:Üog <[set|unset] [CONNECT|FORWARD|LINK]>\n");

468 
	}
}

471 
ohs_cmd_exô
(c⁄° *
¨gs
 
__©åibuã__
 ((
unu£d
)))

474 
¥ötf
("Exitting... bye-bye!\n");

476 
ohs_˛o£
(0);

480 
	$ohs_∑r£_comm™d
()

482 
cmd_löe
[500];

483 
cmd_Àn
 = 0;

484 *
¨gs
;

485 
cmd_tokí
[20];

486 
i
;

487 #i‡
deföed
 
WIN32


488 
c
;

489 
Ród
;

490 
INPUT_RECORD
 
InRec
;

491 
KEY_EVENT_RECORD
 *
KeyEvítRec
;

494 #i‡
deföed
 
WIN32


495 i‡(!
	`RódC⁄sﬁeI≈ut
(
	`GëStdH™dÀ
(
STD_INPUT_HANDLE
), &
InRec
, (InRec), &
Ród
)) {

496 
	`Ârötf
(
°dîr
, "RódC⁄sﬁeI≈uàÁûed: %s\n", 
	`°ªº‹
(
	`GëLa°Eº‹
()));

500 i‡(
InRec
.
EvítTy≥
 !
KEY_EVENT
)

503 
KeyEvítRec
 = &
InRec
.
Evít
.
KeyEvít
;

505 i‡(!
KeyEvítRec
->
bKeyDown
)

508 
c
 = 
KeyEvítRec
->
uCh¨
.
AsciiCh¨
;

510 i‡(
c
 == 8) {

511 i‡(
cmd_Àn
 == 0)

514 
cmd_Àn
--;

516 
	`Âutc
(8, 
°dout
);

517 
	`Âutc
(32, 
°dout
);

518 
	`Âutc
(8, 
°dout
);

520 
	`fÊush
(
°dout
);

525 
	`Âutc
(
c
, 
°dout
);

526 
	`fÊush
(
°dout
);

528 i‡(
c
 !'\n' && c !'\r' && 
cmd_Àn
 < ()(
cmd_löe
) - 1)

529 
cmd_löe
[
cmd_Àn
++] = ()
c
;

533 i‡(
	`fgës
(
cmd_löe
, (cmd_löe), 
°dö
Ë=
NULL
) {

534 
	`ohs_cmd_exô
(
NULL
);

537 
cmd_Àn
 = 0; 
cmd_löe
[cmd_len] != 0 && cmd_line[cmd_len] != '\n'; cmd_len++);

541 
cmd_löe
[
cmd_Àn
] = 0;

542 
cmd_Àn
 = 0;

544 
¨gs
 = 
cmd_löe
 + 
	`gë_√xt_tokí
(cmd_löe, 
cmd_tokí
, (cmd_token));

546 
i
 = 0; 
ohs_comm™ds
[i].
cmd
 !
NULL
; i++) {

547 i‡(
	`°rcmp
(
cmd_tokí
, 
ohs_comm™ds
[
i
].
cmd
) == 0) {

548 i‡(
ohs_comm™ds
[
i
].
cmd_cb
 !
NULL
)

549 
ohs_comm™ds
[
i
].
	`cmd_cb
(
¨gs
);

552 
	`¥ötf
("Nÿa˘i⁄Ñegi°îed o¿cmd %s!\n", 
cmd_tokí
);

558 i‡(
ohs_comm™ds
[
i
].
cmd
 =
NULL
)

559 
	`¥ötf
("%s:Çÿsuch cmd!\n", 
cmd_tokí
);

561 
	`¥ötf
("\n> ");

562 
	`fÊush
(
°dout
);

564 
	}
}

	@src/olsr_switch/ohs_cmd.h

42 #i‚de‡
_OHS_CMD


43 
	#_OHS_CMD


	)

45 
	~<°dio.h
>

47 
	sohs_comm™d
 {

48 c⁄° *
	mcmd
;

49 c⁄° *
	msy¡ax
;

50 c⁄° *
	mhñ±ext_brõf
;

51 c⁄° *
	mhñ±ext_l⁄g
;

52 (*
	mcmd_cb
) (const *);

55 
ohs_£t_ﬁ§d_∑th
(const *);

57 
ohs_∑r£_comm™d
();

59 
ohs_cmd_ﬁ§d
(const *);

61 
ohs_cmd_li°
(const *);

63 
ohs_cmd_hñp
(const *);

65 
	$ohs_cmd_exô
(c⁄° *Ë
	`__©åibuã__
 ((
n‹ëu∫
));

67 
	`ohs_cmd_log
(const *);

69 
	`ohs_cmd_lök
(const *);

	@src/olsr_switch/olsr_host_switch.h

42 #i‚de‡
_OLSR_HOST_SWITCH


43 
	#_OLSR_HOST_SWITCH


	)

45 
	~"ﬁ§_ty≥s.h
"

47 
	#OHS_TCP_PORT
 10150

	)

49 
	#OHS_VERSION
 "0.1"

	)

51 
	#OHS_DEFAULT_OLSRD_PATH
 "./ﬁ§d"

	)

53 
	#OHS_OUT_OF_MEMORY
(
s
Ëdÿ{ 
	`¥ötf
("ohsd: ouào‡mem‹y \"%s\"!\n", s); 
	`ohs_˛o£
(0); } 0)

	)

55 #ifde‡
WIN32


56 
	#˛o£
(
x
Ë
	`˛o£sockë
(x)

	)

57 
__°dˇŒ
 
	$ohs_˛o£
(
sig«l
Ë
	`__©åibuã__
 ((
n‹ëu∫
));

59 
	$ohs_˛o£
(Ë
	`__©åibuã__
 ((
n‹ëu∫
));

62 
	sohs_ù_lök
 {

63 
ﬁ§_ù_addr
 
d°
;

64 
uöt8_t
 
quÆôy
;

65 
ohs_ù_lök
 *
√xt
;

68 
	sohs_c⁄√˘i⁄
 {

69 
ﬁ§_ù_addr
 
ù_addr
;

70 
sockë
;

71 
uöt32_t
 
rx
;

72 
uöt32_t
 
tx
;

73 
uöt32_t
 
lök˙t
;

74 
ohs_ù_lök
 *
löks
;

75 
ohs_c⁄√˘i⁄
 *
√xt
;

78 
uöt32_t
 
logbôs
;

80 
ohs_c⁄√˘i⁄
 *
ohs_c⁄ns
;

82 
	#LOG_DEFAULT
 0x0

	)

83 
	#LOG_FORWARD
 0x1

	)

84 
	#LOG_CONNECT
 0x2

	)

85 
	#LOG_LINK
 0x4

	)

87 #ifde‡
WIN32


88 
__°dˇŒ
 
	`Sig«lH™dÀr
();

90 
	`ohs_˛o£
();

93 
ohs_c⁄√˘i⁄
 *
	`gë_˛õ¡_by_addr
(c⁄° 
ﬁ§_ù_addr
 *);

95 
	`ohs_dñëe_c⁄√˘i⁄
(
ohs_c⁄√˘i⁄
 *);

	@src/olsr_types.h

47 #i‚de‡
_OLSR_TYPES_H


48 
	#_OLSR_TYPES_H


	)

50 #i‡!
deföed
 
löux
 && !deföed 
__MacOSX__
 && !deföed 
WIN32
 && !deföed 
__FªeBSD__
 && !deföed 
__FªeBSD_kî√l__
 && !deföed 
__NëBSD__
 && !deföed 
__O≥nBSD__


55 #ifde‡
_MSC_VER


56 
	tuöt8_t
;

57 
	tuöt16_t
;

58 
	tuöt32_t
;

59 sig√d 
	töt8_t
;

60 sig√d 
	töt16_t
;

61 sig√d 
	töt32_t
;

63 
	~<öây≥s.h
>

66 #i‡
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

69 
	~<°dboﬁ.h
>

70 #ñi‡
deföed
 
__GNUC__


73 
	#boﬁ
 
_Boﬁ


	)

74 
	#åue
 1

	)

75 
	#Ál£
 0

	)

76 
	#__boﬁ_åue_Ál£_¨e_deföed
 1

	)

80 #i‚de‡
_MSC_VER


81 #i‡!
deföed
 
boﬁ
 || !deföed 
åue
 || !deföed 
Ál£
 || !deföed 
__boﬁ_åue_Ál£_¨e_deföed


82 #îr‹ 
You
 
have
 
no
 
C99
-
like
 
boﬁón
 
ty≥s
. 
PÀa£
 
exãnd
 
§c
/
ﬁ§_ty≥
.
h
!

87 
uöt16_t
 
	tﬁ§_cookõ_t
;

89 #ifde‡
WIN32


90 
	~<wösock2.h
>

93 
	~<sys/£À˘.h
>

97 
	~<sys/ty≥s.h
>

98 
	~<sys/sockë.h
>

101 #i‚de‡
_MSC_VER


102 
	~<√töë/ö.h
>

105 
	uﬁ§_sockaddr
 {

106 
sockaddr_°‹age
 
	m°‹age
;

107 
sockaddr
 
	mö
;

108 
sockaddr_ö
 
	mö4
;

109 
sockaddr_ö6
 
	mö6
;

112 
	uﬁ§_ù_addr
 {

113 
ö_addr
 
	mv4
;

114 
ö6_addr
 
	mv6
;

117 
	sﬁ§_ù_¥efix
 {

118 
ﬁ§_ù_addr
 
	m¥efix
;

119 
uöt8_t
 
	m¥efix_Àn
;

122 
uöt32_t
 
	tﬁ§_lökco°
;

	@src/olsrd_plugin.h

38 #i‚de‡
_OLSRD_PLUGIN


39 
	#_OLSRD_PLUGIN


	)

42 
	#MOST_RECENT_PLUGIN_INTERFACE_VERSION
 5

	)

43 
	#LAST_SUPPORTED_PLUGIN_INTERFACE_VERSION
 4

	)

60 
ﬁ§d_∂ugö_öãrÁ˚_vîsi⁄
();

66 
ﬁ§d_∂ugö_öô
();

74 
ﬁ§d_∂ugö_ªgi°î_∑øm
(*
key
, *
vÆue
);

79 
	mui
;

80 *
	mpc
;

81 } 
	t£t_∂ugö_∑ømëî_add⁄
;

83 
	t£t_∂ugö_∑ømëî
(c⁄° *
	tvÆue
, *
	td©a
, 
	t£t_∂ugö_∑ømëî_add⁄
 
	tadd⁄
);

85 
	sﬁ§d_∂ugö_∑ømëîs
 {

86 c⁄° *
	m«me
;

87 
£t_∂ugö_∑ømëî
 *
	m£t_∂ugö_∑ømëî
;

88 *
	md©a
;

89 
£t_∂ugö_∑ømëî_add⁄
 
	madd⁄
;

95 
ﬁ§d_gë_∂ugö_∑ømëîs
(c⁄° 
ﬁ§d_∂ugö_∑ømëîs
 **
∑øms
, *
size
);

	@src/packet.c

42 
	~"ùˇlc.h
"

43 
	~"defs.h
"

44 
	~"lök_£t.h
"

45 
	~"m¥_£À˘‹_£t.h
"

46 
	~"m¥.h
"

47 
	~"ﬁ§.h
"

48 
	~"√ighb‹_èbÀ.h
"

49 
	~"buûd_msg.h
"

50 
	~"√t_ﬁ§.h
"

51 
	~"lq_∂ugö.h
"

53 
boﬁ
 
	g£ndög_tc
 = 
Ál£
;

63 
	$ﬁ§_‰ì_hñlo_∑ckë
(
hñlo_mesßge
 *
mesßge
)

65 
hñlo_√ighb‹
 *
nb
;

67 i‡(!
mesßge
)

70 
nb
 = 
mesßge
->
√ighb‹s
;

71 
nb
) {

72 
hñlo_√ighb‹
 *
¥ev_nb
 = 
nb
;

73 
nb
 =Çb->
√xt
;

74 
	`‰ì
(
¥ev_nb
);

76 
	}
}

88 
	$ﬁ§_buûd_hñlo_∑ckë
(
hñlo_mesßge
 *
mesßge
, 
öãrÁ˚
 *
outif
)

90 
hñlo_√ighb‹
 *
mesßge_√ighb‹
, *
tmp_√igh
;

91 
lök_íåy
 *
löks
;

92 
√ighb‹_íåy
 *
√ighb‹
;

94 #ifde‡
DEBUG


95 
	`OLSR_PRINTF
(3, "\tBuûdög HELLO o¿öãrÁ˚ \"%s\"\n", 
outif
->
öt_«me
 ? outif->int_name : "<null>");

98 
mesßge
->
√ighb‹s
 = 
NULL
;

99 
mesßge
->
∑ckë_£q_numbî
 = 0;

105 
mesßge
->
wûlög√ss
 = 
ﬁ§_˙f
->willingness;

106 #ifde‡
DEBUG


107 
	`OLSR_PRINTF
(3, "Wûlög√ss: %d\n", 
ﬁ§_˙f
->
wûlög√ss
);

112 
mesßge
->
âl
 = 1;

113 
mesßge
->
sour˚_addr
 = 
ﬁ§_˙f
->
maö_addr
;

115 #ifde‡
DEBUG


116 
	`OLSR_PRINTF
(5, "OnÜink:\n");

120 
	`OLSR_FOR_ALL_LINK_ENTRIES
(
löks
) {

121 #ifde‡
DEBUG


122 
ùaddr_°r
 
buf
;

124 
 k
 = 
	`lookup_lök_°©us
(
löks
);

128 i‡(!
	`ùequÆ
(&
löks
->
loˇl_iÁ˚_addr
, &
outif
->
ù_addr
)) {

132 
mesßge_√ighb‹
 = 
	`ﬁ§_mÆloc_hñlo_√ighb‹
("Build HELLO");

135 
mesßge_√ighb‹
->
lök
 = 
 k
;

146 i‡(
löks
->
√ighb‹
->
is_m¥
) {

147 
mesßge_√ighb‹
->
°©us
 = 
MPR_NEIGH
;

167 i‡(
löks
->
√ighb‹
->
°©us
 =
SYM
) {

168 
mesßge_√ighb‹
->
°©us
 = 
SYM_NEIGH
;

176 i‡(
löks
->
√ighb‹
->
°©us
 =
NOT_SYM
) {

177 
mesßge_√ighb‹
->
°©us
 = 
NOT_NEIGH
;

182 
mesßge_√ighb‹
->
addªss
 = 
löks
->
√ighb‹_iÁ˚_addr
;

185 
mesßge_√ighb‹
->
maö_addªss
 = 
löks
->
√ighb‹
->
√ighb‹_maö_addr
;

186 #ifde‡
DEBUG


187 
	`OLSR_PRINTF
(5, "Added: %†- sètu†%d\n", 
	`ﬁ§_ù_to_°rög
(&
buf
, &
mesßge_√ighb‹
->
addªss
), mesßge_√ighb‹->
°©us
);

189 
mesßge_√ighb‹
->
√xt
 = 
mesßge
->
√ighb‹s
;

190 
mesßge
->
√ighb‹s
 = 
mesßge_√ighb‹
;

193 
	`OLSR_FOR_ALL_LINK_ENTRIES_END
(
löks
);

197 #ifde‡
DEBUG


198 
	`OLSR_PRINTF
(5, "Not onÜink:\n");

203 i‡(
i‚ë
 !
NULL
 && i‚ë->
öt_√xt
 != NULL)

204 
	`OLSR_FOR_ALL_NBR_ENTRIES
(
√ighb‹
) {

206 #ifde‡
DEBUG


207 
ùaddr_°r
 
buf
;

210 
tmp_√igh
 = 
mesßge
->
√ighb‹s
;

212 
tmp_√igh
) {

213 i‡(
	`ùequÆ
(&
tmp_√igh
->
maö_addªss
, &
√ighb‹
->
√ighb‹_maö_addr
)) {

217 
tmp_√igh
 =Åmp_√igh->
√xt
;

220 i‡(
tmp_√igh
) {

224 
mesßge_√ighb‹
 = 
	`ﬁ§_mÆloc_hñlo_√ighb‹
("Build HELLO 2");

226 
mesßge_√ighb‹
->
lök
 = 
UNSPEC_LINK
;

237 i‡(
√ighb‹
->
is_m¥
) {

238 
mesßge_√ighb‹
->
°©us
 = 
MPR_NEIGH
;

258 i‡(
√ighb‹
->
°©us
 =
SYM
) {

259 
mesßge_√ighb‹
->
°©us
 = 
SYM_NEIGH
;

267 i‡(
√ighb‹
->
°©us
 =
NOT_SYM
) {

268 
mesßge_√ighb‹
->
°©us
 = 
NOT_NEIGH
;

272 
mesßge_√ighb‹
->
addªss
 = 
√ighb‹
->
√ighb‹_maö_addr
;

273 
mesßge_√ighb‹
->
maö_addªss
 = 
√ighb‹
->
√ighb‹_maö_addr
;

274 #ifde‡
DEBUG


275 
	`OLSR_PRINTF
(5, "Added: %†- sètu† %d\n", 
	`ﬁ§_ù_to_°rög
(&
buf
, &
mesßge_√ighb‹
->
addªss
), mesßge_√ighb‹->
°©us
);

277 
mesßge_√ighb‹
->
√xt
 = 
mesßge
->
√ighb‹s
;

278 
mesßge
->
√ighb‹s
 = 
mesßge_√ighb‹
;

281 
	`OLSR_FOR_ALL_NBR_ENTRIES_END
(
√ighb‹
);

284 
	}
}

294 
	$ﬁ§_‰ì_tc_∑ckë
(
tc_mesßge
 *
mesßge
)

296 
tc_m¥_addr
 *
m¥s
;

298 i‡(!
mesßge
)

301 
m¥s
 = 
mesßge
->
mu…ùoöt_ªœy_£À˘‹_addªss
;

302 
m¥s
 !
NULL
) {

303 
tc_m¥_addr
 *
¥ev_m¥s
 = 
m¥s
;

304 
m¥s
 = m¥s->
√xt
;

305 
	`‰ì
(
¥ev_m¥s
);

307 
	}
}

317 
	$ﬁ§_buûd_tc_∑ckë
(
tc_mesßge
 *
mesßge
)

319 
tc_m¥_addr
 *
mesßge_m¥
;

320 
√ighb‹_íåy
 *
íåy
;

321 
boﬁ
 
íåy_added
 = 
Ál£
;

323 
mesßge
->
mu…ùoöt_ªœy_£À˘‹_addªss
 = 
NULL
;

324 
mesßge
->
∑ckë_£q_numbî
 = 0;

326 
mesßge
->
h›_cou¡
 = 0;

327 
mesßge
->
âl
 = 
MAX_TTL
;

328 
mesßge
->
™¢
 = 
	`gë_loˇl_™¢
();

330 
mesßge
->
‹igö©‹
 = 
ﬁ§_˙f
->
maö_addr
;

331 
mesßge
->
sour˚_addr
 = 
ﬁ§_˙f
->
maö_addr
;

334 
	`OLSR_FOR_ALL_NBR_ENTRIES
(
íåy
) {

335 i‡(
íåy
->
°©us
 !
SYM
) {

339 
ﬁ§_˙f
->
tc_ªdund™cy
) {

344 
mesßge_m¥
 = 
	`ﬁ§_mÆloc_tc_m¥_addr
("Build TC");

346 
mesßge_m¥
->
addªss
 = 
íåy
->
√ighb‹_maö_addr
;

347 
mesßge_m¥
->
√xt
 = 
mesßge
->
mu…ùoöt_ªœy_£À˘‹_addªss
;

348 
mesßge
->
mu…ùoöt_ªœy_£À˘‹_addªss
 = 
mesßge_m¥
;

349 
íåy_added
 = 
åue
;

355 i‡((
íåy
->
is_m¥
Ë|| (
	`ﬁ§_lookup_m¥s_£t
(&íåy->
√ighb‹_maö_addr
Ë!
NULL
)) {

357 
mesßge_m¥
 = 
	`ﬁ§_mÆloc_tc_m¥_addr
("Build TC 2");

359 
mesßge_m¥
->
addªss
 = 
íåy
->
√ighb‹_maö_addr
;

360 
mesßge_m¥
->
√xt
 = 
mesßge
->
mu…ùoöt_ªœy_£À˘‹_addªss
;

361 
mesßge
->
mu…ùoöt_ªœy_£À˘‹_addªss
 = 
mesßge_m¥
;

362 
íåy_added
 = 
åue
;

369 i‡(
	`ﬁ§_lookup_m¥s_£t
(&
íåy
->
√ighb‹_maö_addr
Ë!
NULL
) {

371 
mesßge_m¥
 = 
	`ﬁ§_mÆloc_tc_m¥_addr
("Build TC 3");

373 
mesßge_m¥
->
addªss
 = 
íåy
->
√ighb‹_maö_addr
;

374 
mesßge_m¥
->
√xt
 = 
mesßge
->
mu…ùoöt_ªœy_£À˘‹_addªss
;

375 
mesßge
->
mu…ùoöt_ªœy_£À˘‹_addªss
 = 
mesßge_m¥
;

376 
íåy_added
 = 
åue
;

383 
	`OLSR_FOR_ALL_NBR_ENTRIES_END
(
íåy
);

385 i‡(
íåy_added
) {

386 
£ndög_tc
 = 
åue
;

388 i‡(
£ndög_tc
) {

390 
	`OLSR_PRINTF
(3, "No more MPR selectors - will sendÉmpty TCs\n");

391 
	`£t_em±y_tc_timî
(
	`GET_TIMESTAMP
((
ﬁ§_˙f
->
max_tc_vtime
 * 3Ë* 
MSEC_PER_SEC
));

392 
£ndög_tc
 = 
Ál£
;

397 
	}
}

408 
	$ﬁ§_‰ì_mid_∑ckë
(
mid_mesßge
 *
mesßge
)

410 
mid_Æüs
 *
tmp_adr
, *
tmp_adr2
;

412 
tmp_adr
 = 
mesßge
->
mid_addr
;

414 
tmp_adr
) {

415 
tmp_adr2
 = 
tmp_adr
;

416 
tmp_adr
 =Åmp_adr->
√xt
;

417 
	`‰ì
(
tmp_adr2
);

419 
	}
}

	@src/packet.h

42 #i‚de‡
_OLSR_PACKET


43 
	#_OLSR_PACKET


	)

45 
	~"ﬁ§_¥Ÿocﬁ.h
"

46 
	~"öãrÁ˚s.h
"

47 
	~"m™tisß.h
"

49 
	shñlo_√ighb‹
 {

50 
uöt8_t
 
	m°©us
;

51 
uöt8_t
 
	mlök
;

52 
ﬁ§_ù_addr
 
	mmaö_addªss
;

53 
ﬁ§_ù_addr
 
	maddªss
;

54 
hñlo_√ighb‹
 *
	m√xt
;

55 
ﬁ§_lökco°
 
	mco°
;

56 
uöt32_t
 
	mlökquÆôy
[0];

59 
	shñlo_mesßge
 {

60 
ﬁ§_ª…ime
 
	mvtime
;

61 
ﬁ§_ª…ime
 
	mhtime
;

62 
ﬁ§_ù_addr
 
	msour˚_addr
;

63 
uöt16_t
 
	m∑ckë_£q_numbî
;

64 
uöt8_t
 
	mh›_cou¡
;

65 
uöt8_t
 
	mâl
;

66 
uöt8_t
 
	mwûlög√ss
;

67 
hñlo_√ighb‹
 *
	m√ighb‹s
;

71 
	stc_m¥_addr
 {

72 
ﬁ§_ù_addr
 
	maddªss
;

73 
tc_m¥_addr
 *
	m√xt
;

74 
uöt32_t
 
	mlökquÆôy
[0];

77 
	stc_mesßge
 {

78 
ﬁ§_ª…ime
 
	mvtime
;

79 
ﬁ§_ù_addr
 
	msour˚_addr
;

80 
ﬁ§_ù_addr
 
	m‹igö©‹
;

81 
uöt16_t
 
	m∑ckë_£q_numbî
;

82 
uöt8_t
 
	mh›_cou¡
;

83 
uöt8_t
 
	mâl
;

84 
uöt16_t
 
	m™¢
;

85 
tc_m¥_addr
 *
	mmu…ùoöt_ªœy_£À˘‹_addªss
;

97 
	smid_Æüs
 {

98 
ﬁ§_ù_addr
 
	mÆüs_addr
;

99 
mid_Æüs
 *
	m√xt
;

102 
	smid_mesßge
 {

103 
ﬁ§_ª…ime
 
	mvtime
;

104 
ﬁ§_ù_addr
 
	mmid_‹igaddr
;

105 
uöt8_t
 
	mmid_h›˙t
;

106 
uöt8_t
 
	mmid_âl
;

107 
uöt16_t
 
	mmid_£qno
;

108 
ﬁ§_ù_addr
 
	maddr
;

109 
mid_Æüs
 *
	mmid_addr
;

112 
	sunknown_mesßge
 {

113 
uöt16_t
 
	m£qno
;

114 
ﬁ§_ù_addr
 
	m‹igö©‹
;

115 
uöt8_t
 
	mty≥
;

118 
ﬁ§_‰ì_hñlo_∑ckë
(
hñlo_mesßge
 *);

120 
ﬁ§_buûd_hñlo_∑ckë
(
hñlo_mesßge
 *, 
öãrÁ˚
 *);

122 
ﬁ§_‰ì_tc_∑ckë
(
tc_mesßge
 *);

124 
ﬁ§_buûd_tc_∑ckë
(
tc_mesßge
 *);

126 
ﬁ§_‰ì_mid_∑ckë
(
mid_mesßge
 *);

	@src/parser.c

42 
	~"∑r£r.h
"

43 
	~"ùˇlc.h
"

44 
	~"defs.h
"

45 
	~"¥o˚ss_∑ckage.h
"

46 
	~"m™tisß.h
"

47 
	~"hy°îesis.h
"

48 
	~"du∂iˇã_£t.h
"

49 
	~"mid_£t.h
"

50 
	~"ﬁ§.h
"

51 
	~"ªbuûd_∑ckë.h
"

52 
	~"√t_os.h
"

53 
	~"log.h
"

54 
	~"¥öt_∑ckë.h
"

55 
	~"√t_ﬁ§.h
"

56 
	~"du∂iˇã_h™dÀr.h
"

58 #ifde‡
WIN32


59 #unde‡
EWOULDBLOCK


60 
	#EWOULDBLOCK
 
WSAEWOULDBLOCK


	)

61 #unde‡
î∫o


62 
	#î∫o
 
	`WSAGëLa°Eº‹
()

	)

63 *
SåEº‹
(
EºNo
);

64 #unde‡
°ªº‹


65 
	#°ªº‹
(
x
Ë
	`SåEº‹
(x)

	)

74 
	g˝u_ovîlﬂd_exô
 = 0;

76 
∑r£_fun˘i⁄_íåy
 *
	g∑r£_fun˘i⁄s
;

77 
¥ïro˚ss‹_fun˘i⁄_íåy
 *
	g¥ïro˚ss‹_fun˘i⁄s
;

78 
∑ckë∑r£r_fun˘i⁄_íåy
 *
	g∑ckë∑r£r_fun˘i⁄s
;

80 
uöt32_t
 
	göbuf_Æig√d
[
MAXMESSAGESIZE
/(uint32_t) + 1];

81 *
	göbuf
 = (*)
öbuf_Æig√d
;

83 
boﬁ
 
	gdi•_∑ck_ö
 = 
Ál£
;

86 
	$∑r£r_£t_di•_∑ck_ö
(
boﬁ
 
vÆ
)

88 
di•_∑ck_ö
 = 
vÆ
;

89 
	}
}

97 
	$ﬁ§_öô_∑r£r
()

99 
	`OLSR_PRINTF
(3, "InitializingÖarser...\n");

102 
	`ﬁ§_öô_∑ckage_¥o˚ss
();

104 
	}
}

107 
	$ﬁ§_de°roy_∑r£r
() {

108 
∑r£_fun˘i⁄_íåy
 *
≥
, *
≥_√xt
;

109 
¥ïro˚ss‹_fun˘i⁄_íåy
 *
µe
, *
µe_√xt
;

110 
∑ckë∑r£r_fun˘i⁄_íåy
 *
∑e
, *
∑e_√xt
;

112 
≥
 = 
∑r£_fun˘i⁄s
;Öe;Öê
≥_√xt
) {

113 
≥_√xt
 = 
≥
->
√xt
;

114 
	`‰ì
 (
≥
);

116 
µe
 = 
¥ïro˚ss‹_fun˘i⁄s
;Ö≥;Ö≥ = 
µe_√xt
) {

117 
µe_√xt
 = 
µe
->
√xt
;

118 
	`‰ì
 (
µe
);

120 
∑e
 = 
∑ckë∑r£r_fun˘i⁄s
;Ö´;Ö´ = 
∑e_√xt
) {

121 
∑e_√xt
 = 
∑e
->
√xt
;

122 
	`‰ì
(
∑e
);

124 
	}
}

127 
	$ﬁ§_∑r£r_add_fun˘i⁄
(
∑r£_fun˘i⁄
 * 
fun˘i⁄
, 
uöt32_t
 
ty≥
)

129 
∑r£_fun˘i⁄_íåy
 *
√w_íåy
;

131 
	`OLSR_PRINTF
(3, "P¨£r:Ñegi°îögÉvíàf‹Åy≥ %d\n", 
ty≥
);

133 
√w_íåy
 = 
	`ﬁ§_mÆloc
((
∑r£_fun˘i⁄_íåy
), "RegisterÖarse function");

135 
√w_íåy
->
fun˘i⁄
 = function;

136 
√w_íåy
->
ty≥
 =Åype;

139 
√w_íåy
->
√xt
 = 
∑r£_fun˘i⁄s
;

140 
∑r£_fun˘i⁄s
 = 
√w_íåy
;

142 
	`OLSR_PRINTF
(3, "Regi°îÖ¨£ fun˘i⁄: Added fun˘i⁄ f‹Åy≥ %d\n", 
ty≥
);

144 
	}
}

147 
	$ﬁ§_∑r£r_ªmove_fun˘i⁄
(
∑r£_fun˘i⁄
 * 
fun˘i⁄
, 
uöt32_t
 
ty≥
)

149 
∑r£_fun˘i⁄_íåy
 *
íåy
, *
¥ev
;

151 
íåy
 = 
∑r£_fun˘i⁄s
;

152 
¥ev
 = 
NULL
;

154 
íåy
) {

155 i‡((
íåy
->
fun˘i⁄
 =fun˘i⁄Ë&& (íåy->
ty≥
 ==Åype)) {

156 i‡(
íåy
 =
∑r£_fun˘i⁄s
) {

157 
∑r£_fun˘i⁄s
 = 
íåy
->
√xt
;

159 
¥ev
->
√xt
 = 
íåy
->next;

161 
	`‰ì
(
íåy
);

165 
¥ev
 = 
íåy
;

166 
íåy
 =É¡ry->
√xt
;

170 
	}
}

173 
	$ﬁ§_¥ïro˚ss‹_add_fun˘i⁄
(
¥ïro˚ss‹_fun˘i⁄
 * 
fun˘i⁄
)

175 
¥ïro˚ss‹_fun˘i⁄_íåy
 *
√w_íåy
;

177 
	`OLSR_PRINTF
(3, "Parser:ÑegisteringÖreprocessor\n");

179 
√w_íåy
 = 
	`ﬁ§_mÆloc
((
¥ïro˚ss‹_fun˘i⁄_íåy
), "RegisterÖreprocessor function");

181 
√w_íåy
->
fun˘i⁄
 = function;

184 
√w_íåy
->
√xt
 = 
¥ïro˚ss‹_fun˘i⁄s
;

185 
¥ïro˚ss‹_fun˘i⁄s
 = 
√w_íåy
;

187 
	`OLSR_PRINTF
(3, "RegisteredÖreprocessor function\n");

189 
	}
}

192 
	$ﬁ§_¥ïro˚ss‹_ªmove_fun˘i⁄
(
¥ïro˚ss‹_fun˘i⁄
 * 
fun˘i⁄
)

194 
¥ïro˚ss‹_fun˘i⁄_íåy
 *
íåy
, *
¥ev
;

196 
íåy
 = 
¥ïro˚ss‹_fun˘i⁄s
;

197 
¥ev
 = 
NULL
;

199 
íåy
) {

200 i‡(
íåy
->
fun˘i⁄
 == function) {

201 i‡(
íåy
 =
¥ïro˚ss‹_fun˘i⁄s
) {

202 
¥ïro˚ss‹_fun˘i⁄s
 = 
íåy
->
√xt
;

204 
¥ev
->
√xt
 = 
íåy
->next;

206 
	`‰ì
(
íåy
);

210 
¥ev
 = 
íåy
;

211 
íåy
 =É¡ry->
√xt
;

215 
	}
}

218 
	$ﬁ§_∑ckë∑r£r_add_fun˘i⁄
(
∑ckë∑r£r_fun˘i⁄
 * 
fun˘i⁄
)

220 
∑ckë∑r£r_fun˘i⁄_íåy
 *
√w_íåy
;

222 
	`OLSR_PRINTF
(3, "Parser:ÑegisteringÖacketparser\n");

224 
√w_íåy
 = 
	`ﬁ§_mÆloc
((
∑ckë∑r£r_fun˘i⁄_íåy
), "RegisterÖacketparser function");

226 
√w_íåy
->
fun˘i⁄
 = function;

229 
√w_íåy
->
√xt
 = 
∑ckë∑r£r_fun˘i⁄s
;

230 
∑ckë∑r£r_fun˘i⁄s
 = 
√w_íåy
;

232 
	`OLSR_PRINTF
(3, "RegisteredÖacketparser function\n");

234 
	}
}

237 
	$ﬁ§_∑ckë∑r£r_ªmove_fun˘i⁄
(
∑ckë∑r£r_fun˘i⁄
 * 
fun˘i⁄
)

239 
∑ckë∑r£r_fun˘i⁄_íåy
 *
íåy
, *
¥ev
;

241 
íåy
 = 
∑ckë∑r£r_fun˘i⁄s
;

242 
¥ev
 = 
NULL
;

244 
íåy
) {

245 i‡(
íåy
->
fun˘i⁄
 == function) {

246 i‡(
íåy
 =
∑ckë∑r£r_fun˘i⁄s
) {

247 
∑ckë∑r£r_fun˘i⁄s
 = 
íåy
->
√xt
;

249 
¥ev
->
√xt
 = 
íåy
->next;

251 
	`‰ì
(
íåy
);

255 
¥ev
 = 
íåy
;

256 
íåy
 =É¡ry->
√xt
;

260 
	}
}

273 
	$∑r£_∑ckë
(
ﬁ§
 *ﬁ§, 
size
, 
öãrÁ˚
 *
ö_if
, 
ﬁ§_ù_addr
 *
‰om_addr
)

275 
ﬁ§_mesßge
 *
m
 = (ﬁ§_mesßgê*)
ﬁ§
->
ﬁ§_msg
;

276 
uöt32_t
 
cou¡
;

277 
uöt32_t
 
msgsize
;

278 
uöt16_t
 
£qno
;

279 
∑r£_fun˘i⁄_íåy
 *
íåy
;

280 
∑ckë∑r£r_fun˘i⁄_íåy
 *
∑ckë∑r£r
;

282 
cou¡
 = 
size
 - ((*)
m
 - (*)
ﬁ§
);

285 i‡(
cou¡
 < 4)

288 i‡(
	`¡ohs
(
ﬁ§
->
ﬁ§_∑ckÀn
Ë!=(
uöt16_t
Ë
size
) {

289 
ùaddr_°r
 
buf
;

290 
	`OLSR_PRINTF
(1, "Sizêîr‹ dëe˘ed i¿ª˚ivedÖackë.\nRe˚ived %d, i¿∑ckë %d\n", 
size
, 
	`¡ohs
(
ﬁ§
->
ﬁ§_∑ckÀn
));

292 
	`ﬁ§_sy¶og
(
OLSR_LOG_ERR
, "ÖackëÜígthÉº‹ i¿ÖackëÑe˚ived from %s!", 
	`ﬁ§_ù_to_°rög
(&
buf
, 
‰om_addr
));

297 i‡(
di•_∑ck_ö
)

298 
	`¥öt_ﬁ§_£rülized_∑ckë
(
°dout
, (
ﬁ§_∑ckë
 *)
ﬁ§
, 
size
, 
‰om_addr
);

301 
ﬁ§
->
ﬁ§_£qno
 = 
	`¡ohs
(olsr->olsr_seqno);

304 
∑ckë∑r£r
 = 
∑ckë∑r£r_fun˘i⁄s
;

305 
∑ckë∑r£r
) {

306 
∑ckë∑r£r
->
	`fun˘i⁄
(
ﬁ§
, 
ö_if
, 
‰om_addr
);

307 
∑ckë∑r£r
 =Öackë∑r£r->
√xt
;

315 i‡(
ﬁ§_˙f
->
u£_hy°îesis
) {

316 i‡(
ﬁ§_˙f
->
ù_vîsi⁄
 =
AF_INET
) {

318 
	`upd©e_hy°îesis_öcomög
(
‰om_addr
, 
ö_if
, 
ﬁ§
->
ﬁ§_£qno
);

321 
	`upd©e_hy°îesis_öcomög
(
‰om_addr
, 
ö_if
, 
ﬁ§
->
ﬁ§_£qno
);

325 ; 
cou¡
 > 0; 
m
 = (
ﬁ§_mesßge
 *)((*)m + (
msgsize
))) {

326 
boﬁ
 
f‹w¨d
 = 
åue
;

327 
boﬁ
 
vÆid©ed
;

330 i‡(
cou¡
 < 8 + 
ﬁ§_˙f
->
ùsize
)

333 i‡(
ﬁ§_˙f
->
ù_vîsi⁄
 =
AF_INET
) {

334 
msgsize
 = 
	`¡ohs
(
m
->
v4
.
ﬁ§_msgsize
);

335 
£qno
 = 
	`¡ohs
(
m
->
v4
.seqno);

338 
msgsize
 = 
	`¡ohs
(
m
->
v6
.
ﬁ§_msgsize
);

339 
£qno
 = 
	`¡ohs
(
m
->
v6
.seqno);

343 i‡(
msgsize
 < 8 + 
ﬁ§_˙f
->
ùsize
) {

344 
ùaddr_°r
 
buf
;

345 
ﬁ§_ù_addr
 *
msg‹ig
 = (ﬁ§_ù_add∏*Ë&
m
->
v4
.
‹igö©‹
;

346 
	`OLSR_PRINTF
(1, "Error, OLSR message from %s (type %d) isÅo small (%d bytes)"

348 
	`ﬁ§_ù_to_°rög
(&
buf
, 
msg‹ig
), 
m
->
v4
.
ﬁ§_msgty≥
, 
msgsize
);

349 
	`ﬁ§_sy¶og
(
OLSR_LOG_ERR
, "Error, OLSR message from %s (type %d) isÅoo small (%d bytes)"

351 
	`ﬁ§_ù_to_°rög
(&
buf
, 
msg‹ig
), 
m
->
v4
.
ﬁ§_msgty≥
, 
msgsize
);

355 i‡((
msgsize
 % 4) != 0) {

356 
ùaddr_°r
 
buf
;

357 
ﬁ§_ù_addr
 *
msg‹ig
 = (ﬁ§_ù_add∏*Ë&
m
->
v4
.
‹igö©‹
;

358 
	`OLSR_PRINTF
(1, "Error, OLSR message from %s (type %d) must be"

360 
	`ﬁ§_ù_to_°rög
(&
buf
, 
msg‹ig
), 
m
->
v4
.
ﬁ§_msgty≥
, 
msgsize
);

361 
	`ﬁ§_sy¶og
(
OLSR_LOG_ERR
, "Error, OLSR message from %s (type %d) must be"

363 
	`ﬁ§_ù_to_°rög
(&
buf
, 
msg‹ig
), 
m
->
v4
.
ﬁ§_msgty≥
, 
msgsize
);

367 i‡(
msgsize
 > 
cou¡
) {

368 
ùaddr_°r
 
buf
;

369 
ﬁ§_ù_addr
 *
msg‹ig
 = (ﬁ§_ù_add∏*Ë&
m
->
v4
.
‹igö©‹
;

370 
	`OLSR_PRINTF
(1, "Error, OLSR message from %s (type %d) says"

372 
	`ﬁ§_ù_to_°rög
(&
buf
, 
msg‹ig
), 
m
->
v4
.
ﬁ§_msgty≥
, 
msgsize
, 
cou¡
);

373 
	`ﬁ§_sy¶og
(
OLSR_LOG_ERR
, "Error, OLSR message from %s (type %d) says"

375 
	`ﬁ§_ù_to_°rög
(&
buf
, 
msg‹ig
), 
m
->
v4
.
ﬁ§_msgty≥
, 
msgsize
, 
cou¡
);

379 
cou¡
 -
msgsize
;

390 
vÆid©ed
 = 
	`ﬁ§_vÆid©e_addªss
((
ﬁ§_ù_addr
 *)&
m
->
v4
.
‹igö©‹
);

391 i‡(
	`ùequÆ
((
ﬁ§_ù_addr
 *)&
m
->
v4
.
‹igö©‹
, &
ﬁ§_˙f
->
maö_addr
Ë|| !
vÆid©ed
) {

392 #ifde‡
DEBUG


393 
ùaddr_°r
 
buf
;

394 
	`OLSR_PRINTF
(3, "NotÖrocessing message originating from %s!\n",

395 
	`ﬁ§_ù_to_°rög
(&
buf
, (
ﬁ§_ù_addr
 *)&
m
->
v4
.
‹igö©‹
));

397 #i‚de‡
NO_DUPLICATE_DETECTION_HANDLER


398 i‡(
vÆid©ed
) {

399 
	`ﬁ§_ã°_‹igö©‹_cﬁlisi⁄
(
m
->
v4
.
ﬁ§_msgty≥
, 
£qno
);

405 
íåy
 = 
∑r£_fun˘i⁄s
;

406 
íåy
) {

410 i‡((
íåy
->
ty≥
 =
PROMISCUOUS
Ë|| (íåy->ty≥ =
m
->
v4
.
ﬁ§_msgty≥
)) {

411 i‡(!
íåy
->
	`fun˘i⁄
(
m
, 
ö_if
, 
‰om_addr
))

412 
f‹w¨d
 = 
Ál£
;

414 
íåy
 =É¡ry->
√xt
;

417 i‡(
f‹w¨d
) {

418 
	`ﬁ§_f‹w¨d_mesßge
(
m
, 
ö_if
, 
‰om_addr
);

421 
	}
}

432 
ﬁ§_öput
(
fd
, *
d©a
 
__©åibuã__
 ((
unu£d
)), 
Êags
 __attribute__ ((unused)))

434 
öãrÁ˚
 *
	gﬁ§_ö_if
;

435 
ﬁ§_ù_addr
 
	g‰om_addr
;

436 
¥ïro˚ss‹_fun˘i⁄_íåy
 *
	gíåy
;

437 *
	g∑ckë
;

439 
	g˝u_ovîlﬂd_exô
 = 0;

442 
ùaddr_°r
 
	gbuf
;

444 
sockaddr_°‹age
 
	g‰om
;

445 
sockÀn_t
 
	g‰omÀn
;

446 
	gcc
;

448 i‡(32 < ++
	g˝u_ovîlﬂd_exô
) {

449 
OLSR_PRINTF
(1, "CPU overload detected,Énding olsr_input()Üoop\n");

453 
	g‰omÀn
 = (
sockaddr_°‹age
);

454 
	gcc
 = 
ﬁ§_ªcv‰om
(
fd
, 
öbuf
, (
öbuf_Æig√d
), 0, (
sockaddr
 *)&
‰om
, &
‰omÀn
);

456 i‡(
	gcc
 <= 0) {

457 i‡(
cc
 < 0 && 
î∫o
 !
EWOULDBLOCK
) {

458 
OLSR_PRINTF
(1, "îr‹Ñecv‰om: %s", 
°ªº‹
(
î∫o
));

459 #i‚de‡
WIN32


460 
ﬁ§_sy¶og
(
OLSR_LOG_ERR
, "errorÑecvfrom: %m");

465 i‡(
	gﬁ§_˙f
->
	gù_vîsi⁄
 =
AF_INET
) {

467 * 
§c
 = &((
sockaddr_ö
 *)&
‰om
)->
sö_addr
;

468 
mem˝y
(&
‰om_addr
.
v4
, 
§c
, (from_addr.v4));

471 * 
	g§c
 = &((
sockaddr_ö6
 *)&
‰om
)->
sö6_addr
;

472 
mem˝y
(&
‰om_addr
.
v6
, 
§c
, (from_addr.v6));

475 #ifde‡
DEBUG


476 
OLSR_PRINTF
(5, "ReceivedáÖacket from %s\n",

477 
ﬁ§_ù_to_°rög
(&
buf
, &
‰om_addr
));

480 i‡((
	gﬁ§_˙f
->
	gù_vîsi⁄
 =
AF_INET
Ë&& (
‰omÀn
 !(
sockaddr_ö
)))

482 i‡((
	gﬁ§_˙f
->
	gù_vîsi⁄
 =
AF_INET6
Ë&& (
‰omÀn
 !(
sockaddr_ö6
)))

486 i‡(
if_ifwôhaddr
(&
‰om_addr
Ë!
NULL
)

489 i‡((
	gﬁ§_ö_if
 = 
if_ifwôhsock
(
fd
)Ë=
NULL
) {

490 
OLSR_PRINTF
(1, "CouldÇŸ föd i≈uàöãrÁ˚ f‹ mesßgê‰om %†sizê%d\n", 
ﬁ§_ù_to_°rög
(&
buf
, &
‰om_addr
), 
cc
);

491 
ﬁ§_sy¶og
(
OLSR_LOG_ERR
, "CouldÇŸ föd i≈uàöãrÁ˚ f‹ mesßgê‰om %†sizê%d\n", 
ﬁ§_ù_to_°rög
(&
buf
, &
‰om_addr
),

492 
cc
);

496 
	gíåy
 = 
¥ïro˚ss‹_fun˘i⁄s
;

497 
	g∑ckë
 = &
öbuf
[0];

499 
	gíåy
) {

500 
	g∑ckë
 = 
íåy
->
fun˘i⁄
(
∑ckë
, 
ﬁ§_ö_if
, &
‰om_addr
, &
cc
);

502 i‡(
	g∑ckë
 =
NULL
) {

505 
	gíåy
 = 
íåy
->
√xt
;

513 
∑r£_∑ckë
((
ﬁ§
 *)
∑ckë
, 
cc
, 
ﬁ§_ö_if
, &
‰om_addr
);

527 
ﬁ§_öput_ho°emu
(
fd
, *
d©a
 
__©åibuã__
 ((
unu£d
)), 
Êags
 __attribute__ ((unused)))

530 
sockaddr_°‹age
 
	g‰om
;

531 
sockÀn_t
 
	g‰omÀn
;

532 
öãrÁ˚
 *
	gﬁ§_ö_if
;

533 
ﬁ§_ù_addr
 
	g‰om_addr
;

534 
uöt16_t
 
	gpckÀn
;

535 
¥ïro˚ss‹_fun˘i⁄_íåy
 *
	gíåy
;

536 *
	g∑ckë
;

541 
	gcc
 = 
ªcv
(
fd
, (*)
‰om_addr
.
v6
.
s6_addr
, 
ﬁ§_˙f
->
ùsize
, 0);

542 i‡(
	gcc
 !()
ﬁ§_˙f
->
ùsize
) {

543 
Ârötf
(
°dîr
, "Eº‹Ñe˚ivög ho°-˛õ¡ IP hook(%dË%s!\n", 
cc
, 
°ªº‹
(
î∫o
));

544 
mem˝y
(&
‰om_addr
, &((
ﬁ§
 *)
öbuf
)->
ﬁ§_msg
->
‹igö©‹
, 
ﬁ§_˙f
->
ùsize
);

548 i‡(
if_ifwôhaddr
(&
‰om_addr
Ë!
NULL
)

552 i‡((
	gcc
 = 
ªcv
(
fd
, (*)&
pckÀn
, 2, 
MSG_PEEK
)) != 2) {

553 i‡(
cc
 <= 0) {

554 
Ârötf
(
°dîr
, "Lost olsr_switch connection -Éxit!\n");

555 
ﬁ§_exô
(
__func__
, 
EXIT_FAILURE
);

557 
Ârötf
(
°dîr
, "[hu°-emu]Éº‹Éxåa˘ög size(%dË%s!\n", 
cc
, 
°ªº‹
(
î∫o
));

560 
	gpckÀn
 = 
¡ohs
(
pckÀn
);

563 
	g‰omÀn
 = (
sockaddr_°‹age
);

565 
	gcc
 = 
ﬁ§_ªcv‰om
(
fd
, 
öbuf
, 
pckÀn
, 0, (
sockaddr
 *)&
‰om
, &
‰omÀn
);

567 i‡(
	gcc
 <= 0) {

568 i‡(
cc
 < 0 && 
î∫o
 !
EWOULDBLOCK
) {

569 c⁄° *c⁄° 
îr_msg
 = 
°ªº‹
(
î∫o
);

570 
OLSR_PRINTF
(1, "îr‹Ñecv‰om: %s", 
îr_msg
);

571 
ﬁ§_sy¶og
(
OLSR_LOG_ERR
, "îr‹Ñecv‰om: %s", 
îr_msg
);

576 i‡(
	gcc
 !
pckÀn
) {

577 
¥ötf
("CouldÇŸÑód whﬁê∑ckë(sizê%d,Ñód %d)\n", 
pckÀn
, 
cc
);

581 i‡((
	gﬁ§_ö_if
 = 
if_ifwôhsock
(
fd
)Ë=
NULL
) {

582 
ùaddr_°r
 
buf
;

583 
OLSR_PRINTF
(1, "CouldÇŸ föd i≈uàöãrÁ˚ f‹ mesßgê‰om %†sizê%d\n", 
ﬁ§_ù_to_°rög
(&
buf
, &
‰om_addr
), 
cc
);

584 
ﬁ§_sy¶og
(
OLSR_LOG_ERR
, "CouldÇŸ föd i≈uàöãrÁ˚ f‹ mesßgê‰om %†sizê%d\n", 
ﬁ§_ù_to_°rög
(&
buf
, &
‰om_addr
),

585 
cc
);

589 
	gíåy
 = 
¥ïro˚ss‹_fun˘i⁄s
;

590 
	g∑ckë
 = &
öbuf
[0];

592 
	gíåy
) {

593 
	g∑ckë
 = 
íåy
->
fun˘i⁄
(
∑ckë
, 
ﬁ§_ö_if
, &
‰om_addr
, &
cc
);

595 i‡(
	g∑ckë
 =
NULL
) {

598 
	gíåy
 = 
íåy
->
√xt
;

606 
∑r£_∑ckë
((
ﬁ§
 *)
öbuf
, 
cc
, 
ﬁ§_ö_if
, &
‰om_addr
);

	@src/parser.h

42 #i‚de‡
_OLSR_MSG_PARSER


43 
	#_OLSR_MSG_PARSER


	)

45 
	~"ﬁ§_¥Ÿocﬁ.h
"

46 
	~"∑ckë.h
"

48 
	#PROMISCUOUS
 0xffffffff

	)

51 
boﬁ
 
	t∑r£_fun˘i⁄
(
	tﬁ§_mesßge
 *, 
	töãrÁ˚
 *, 
	tﬁ§_ù_addr
 *);

53 
	s∑r£_fun˘i⁄_íåy
 {

54 
uöt32_t
 
	mty≥
;

55 
∑r£_fun˘i⁄
 *
	mfun˘i⁄
;

56 
∑r£_fun˘i⁄_íåy
 *
	m√xt
;

59 *
	t¥ïro˚ss‹_fun˘i⁄
(*
	t∑ckë
, 
	töãrÁ˚
 *, 
	tﬁ§_ù_addr
 *, *
	tÀngth
);

61 
	s¥ïro˚ss‹_fun˘i⁄_íåy
 {

62 
¥ïro˚ss‹_fun˘i⁄
 *
	mfun˘i⁄
;

63 
¥ïro˚ss‹_fun˘i⁄_íåy
 *
	m√xt
;

66 
	t∑ckë∑r£r_fun˘i⁄
(
	tﬁ§
 *ﬁ§, 
	töãrÁ˚
 *
	tö_if
, 
	tﬁ§_ù_addr
 *
	t‰om_addr
);

68 
	s∑ckë∑r£r_fun˘i⁄_íåy
 {

69 
∑ckë∑r£r_fun˘i⁄
 *
	mfun˘i⁄
;

70 
∑ckë∑r£r_fun˘i⁄_íåy
 *
	m√xt
;

73 
∑r£r_£t_di•_∑ck_ö
(
boﬁ
);

75 
ﬁ§_öô_∑r£r
();

77 
ﬁ§_de°roy_∑r£r
();

79 
ﬁ§_öput
(
fd
, *, );

81 
ﬁ§_öput_ho°emu
(
fd
, *, );

83 
ﬁ§_∑r£r_add_fun˘i⁄
(
∑r£_fun˘i⁄
, 
uöt32_t
);

85 
ﬁ§_∑r£r_ªmove_fun˘i⁄
(
∑r£_fun˘i⁄
, 
uöt32_t
);

87 
ﬁ§_¥ïro˚ss‹_add_fun˘i⁄
(
¥ïro˚ss‹_fun˘i⁄
);

89 
ﬁ§_¥ïro˚ss‹_ªmove_fun˘i⁄
(
¥ïro˚ss‹_fun˘i⁄
);

91 
ﬁ§_∑ckë∑r£r_add_fun˘i⁄
(
∑ckë∑r£r_fun˘i⁄
 * 
fun˘i⁄
);

93 
ﬁ§_∑ckë∑r£r_ªmove_fun˘i⁄
(
∑ckë∑r£r_fun˘i⁄
 * 
fun˘i⁄
);

95 
∑r£_∑ckë
(
ﬁ§
 *, , 
öãrÁ˚
 *, 
ﬁ§_ù_addr
 *);

	@src/plugin_loader.c

42 
	~"∂ugö_lﬂdî.h
"

43 
	~"ﬁ§d_∂ugö.h
"

44 
	~"∂ugö_utû.h
"

45 
	~"defs.h
"

46 
	~"ﬁ§.h
"

48 
	~<dlf˙.h
>

51 
öô_ﬁ§_∂ugö
(
ﬁ§_∂ugö
 *);

52 
ﬁ§_lﬂd_dl
(*, 
∂ugö_∑øm
 *);

53 
ﬁ§_add_dl
(
ﬁ§_∂ugö
 *);

55 
ﬁ§_∂ugö
 *
	gﬁ§_∂ugös
 = 
NULL
;

63 
	$ﬁ§_lﬂd_∂ugös
()

65 
∂ugö_íåy
 *
íåy
 = 
ﬁ§_˙f
->
∂ugös
;

66 
rv
 = 0;

67 
íåy
 = 
ﬁ§_˙f
->
∂ugös
;É¡ry !
NULL
;É¡ry =É¡ry->
√xt
) {

68 i‡(
	`ﬁ§_lﬂd_dl
(
íåy
->
«me
,É¡ry->
∑øms
) < 0) {

69 
rv
 = 1;

72 i‡(
rv
 != 0) {

73 
	`OLSR_PRINTF
(0, "-- PLUGIN LOADING FAILED! --\n");

74 
	`exô
(1);

76 
	`OLSR_PRINTF
(0, "-- ALL PLUGINS LOADED! --\n\n");

77 
	}
}

88 
	$ﬁ§_lﬂd_dl
(*
lib«me
, 
∂ugö_∑øm
 *
∑øms
)

90 #i‡
TESTLIB_PATH


91 
∑th
[256] = "/usr/testlib/";

93 
ﬁ§_∂ugö
 *
∂ugö
 = 
	`ﬁ§_mÆloc
((olsr_plugin), "PluginÉntry");

94 
rv
;

96 
	`OLSR_PRINTF
(0, "---------- LOADING LIBRARY %†----------\n", 
lib«me
);

98 #i‡
TESTLIB_PATH


99 
	`°rˇt
(
∑th
, 
lib«me
);

100 
∂ugö
->
dlh™dÀ
 = 
	`dl›í
(
∑th
, 
RTLD_NOW
);

102 
∂ugö
->
dlh™dÀ
 = 
	`dl›í
(
lib«me
, 
RTLD_NOW
);

104 i‡(
∂ugö
->
dlh™dÀ
 =
NULL
) {

105 c⁄° 
ßve_î∫o
 = 
î∫o
;

106 
	`OLSR_PRINTF
(0, "DLÜﬂdög faûed: \"%s\"!\n", 
	`dÀº‹
());

107 
	`‰ì
(
∂ugö
);

108 
î∫o
 = 
ßve_î∫o
;

112 
rv
 = 
	`ﬁ§_add_dl
(
∂ugö
);

113 i‡(
rv
 == -1) {

114 c⁄° 
ßve_î∫o
 = 
î∫o
;

115 
	`dl˛o£
(
∂ugö
->
dlh™dÀ
);

116 
	`‰ì
(
∂ugö
);

117 
î∫o
 = 
ßve_î∫o
;

119 
∂ugö
->
∑øms
 =Öarams;

122 i‡(
	`öô_ﬁ§_∂ugö
(
∂ugö
) != 0) {

123 
rv
 = -1;

127 
∂ugö
->
√xt
 = 
ﬁ§_∂ugös
;

128 
ﬁ§_∂ugös
 = 
∂ugö
;

130 
	`OLSR_PRINTF
(0, "---------- LIBRARY %†%†----------\n\n", 
lib«me
, 
rv
 == 0 ? "LOADED" : "FAILED");

131  
rv
;

132 
	}
}

134 #i‡
SUPPORT_OLD_PLUGIN_VERSIONS


136 
	$åy_ﬁd_vîsi⁄s
(c⁄° 
ﬁ§_∂ugö
 *
∂ugö
)

138 
gë_öãrÁ˚_vîsi⁄_func
 
gë_öãrÁ˚_vîsi⁄
;

139 *
öãrÁ˚_vîsi⁄
;

141 
	`OLSR_PRINTF
(1, "trying v2 detection... ");

142 
gë_öãrÁ˚_vîsi⁄
 = 
	`dlsym
(
∂ugö
->
dlh™dÀ
, "get_plugin_interface_version");

143 i‡(
gë_öãrÁ˚_vîsi⁄
 !
NULL
) {

144  
	`gë_öãrÁ˚_vîsi⁄
();

147 
	`OLSR_PRINTF
(1, "trying v1 detection... ");

148 
öãrÁ˚_vîsi⁄
 = 
	`dlsym
(
∂ugö
->
dlh™dÀ
, "plugin_interface_version");

149 i‡(
öãrÁ˚_vîsi⁄
 !
NULL
) {

150  *
öãrÁ˚_vîsi⁄
;

152 
	`OLSR_PRINTF
(0, "FAILED: \"%s\"\n", 
	`dÀº‹
());

154 
	}
}

156 
	#åy_ﬁd_vîsi⁄s
(
∂ugö
Ë-1

	)

160 
	$ﬁ§_add_dl
(
ﬁ§_∂ugö
 *
∂ugö
)

162 
gë_öãrÁ˚_vîsi⁄_func
 
gë_öãrÁ˚_vîsi⁄
;

163 
gë_∂ugö_∑ømëîs_func
 
gë_∂ugö_∑ømëîs
;

164 
∂ugö_öãrÁ˚_vîsi⁄
;

167 
	`OLSR_PRINTF
(0, "CheckingÖlugin interface version: ");

168 
gë_öãrÁ˚_vîsi⁄
 = 
	`dlsym
(
∂ugö
->
dlh™dÀ
, "olsrd_plugin_interface_version");

169 i‡(
gë_öãrÁ˚_vîsi⁄
 =
NULL
) {

170 
∂ugö_öãrÁ˚_vîsi⁄
 = 
	`åy_ﬁd_vîsi⁄s
(
∂ugö
);

172 
∂ugö_öãrÁ˚_vîsi⁄
 = 
	`gë_öãrÁ˚_vîsi⁄
();

174 i‡(
∂ugö_öãrÁ˚_vîsi⁄
 == -1) {

175 
	`OLSR_PRINTF
(0, "FAILED: \"%s\"\n", 
	`dÀº‹
());

178 
	`OLSR_PRINTF
(0, " %d - OK\n", 
∂ugö_öãrÁ˚_vîsi⁄
);

180 i‡(
∂ugö_öãrÁ˚_vîsi⁄
 < 5) {

182 
	`OLSR_PRINTF
(0,

184 "DETECTED VERSION %d AND THE CURRENT VERSION IS %d\n" "PLEASE UPGRADE YOUR PLUGIN!\n", 
∂ugö_öãrÁ˚_vîsi⁄
,

185 
MOST_RECENT_PLUGIN_INTERFACE_VERSION
);

186 #i‡
SUPPORT_OLD_PLUGIN_VERSIONS


187 
	`OLSR_PRINTF
(0, "WILL CONTINUE IN 5 SECONDS...\n\n");

188 
	`¶ìp
(5);

193 #i‡
SUPPORT_OLD_PLUGIN_VERSIONS


195 i‡(
∂ugö_öãrÁ˚_vîsi⁄
 < 
LAST_SUPPORTED_PLUGIN_INTERFACE_VERSION
) {

196 
	`OLSR_PRINTF
(0,

198 "THIS CAN CAUSE UNEXPECTED BEHAVIOUR AND CRASHES!\n" "WILL CONTINUE IN 5 SECONDS...\n\n", 
	`gë_öãrÁ˚_vîsi⁄
(),

199 
LAST_SUPPORTED_PLUGIN_INTERFACE_VERSION
);

200 
	`¶ìp
(5);

205 
	`OLSR_PRINTF
(1, "TryingÅo fetchÖlugin init function: ");

206 
∂ugö
->
∂ugö_öô
 = 
	`dlsym
’lugö->
dlh™dÀ
, "olsrd_plugin_init");

207 i‡(
∂ugö
->
∂ugö_öô
 =
NULL
) {

208 
	`OLSR_PRINTF
(0, "FAILED: \"%s\"\n", 
	`dÀº‹
());

211 
	`OLSR_PRINTF
(1, "OK\n");

213 
	`OLSR_PRINTF
(1, "TryingÅo fetchÖarameterÅableánd it's size... \n");

215 
gë_∂ugö_∑ømëîs
 = 
	`dlsym
(
∂ugö
->
dlh™dÀ
, "olsrd_get_plugin_parameters");

216 i‡(
gë_∂ugö_∑ømëîs
 !
NULL
) {

217 (*
gë_∂ugö_∑ømëîs
Ë(&
∂ugö
->
∂ugö_∑ømëîs
, &∂ugö->
∂ugö_∑ømëîs_size
);

219 #i‡
SUPPORT_OLD_PLUGIN_VERSIONS


221 
	`OLSR_PRINTF
(1, "TryingÅo fetchÖaram function: ");

223 
∂ugö
->
ªgi°î_∑øm
 = 
	`dlsym
’lugö->
dlh™dÀ
, "olsrd_plugin_register_param");

224 i‡(
∂ugö
->
ªgi°î_∑øm
 =
NULL
) {

225 
	`OLSR_PRINTF
(0, "FAILED: \"%s\"\n", 
	`dÀº‹
());

228 
	`OLSR_PRINTF
(1, "OK\n");

231 
∂ugö
->
∂ugö_∑ømëîs
 = 
NULL
;

232 
∂ugö
->
∂ugö_∑ømëîs_size
 = 0;

234 
	`OLSR_PRINTF
(0, "OldÖlugin interfacesáreÇot supported\n");

239 
	}
}

252 
	$öô_ﬁ§_∂ugö
(
ﬁ§_∂ugö
 *
íåy
)

254 
rv
 = 0;

255 
∂ugö_∑øm
 *
∑øms
;

256 
	`OLSR_PRINTF
(1, "SendingÖarameters...\n");

257 
∑øms
 = 
íåy
->∑øms;Ö¨am†!
NULL
;Ö¨am†∑øms->
√xt
) {

258 
	`OLSR_PRINTF
(1, "\"%s\"/\"%s\"... ", 
∑øms
->
key
,Ö¨ams->
vÆue
);

259 i‡(
íåy
->
∂ugö_∑ømëîs_size
 != 0) {

260 
i
;

261 
rc
 = 0;

262 
i
 = 0; i < 
íåy
->
∂ugö_∑ømëîs_size
; i++) {

263 i‡(0 =
íåy
->
∂ugö_∑ømëîs
[
i
].
«me
[0] || 0 =
	`°rˇ£cmp
”¡ry->∂ugö_∑ømëîs[i].«me, 
∑øms
->
key
)) {

265 
rc
 =

266 
íåy
->
∂ugö_∑ømëîs
[
i
].
	`£t_∂ugö_∑ømëî
(
∑øms
->
vÆue
,É¡ry->∂ugö_∑ømëîs[i].
d©a
,

267 0 =
íåy
->
∂ugö_∑ømëîs
[
i
].
«me
[0]

268 ? (
£t_∂ugö_∑ømëî_add⁄
)

269 
∑øms
->
key
 : 
íåy
->
∂ugö_∑ømëîs
[
i
].
add⁄
);

270 i‡(
rc
 != 0) {

271 
	`Ârötf
(
°dîr
, "\nF©ÆÉº‹ i¿∂ugöÖ¨amëî \"%s\"/\"%s\"\n", 
∑øms
->
key
,Ö¨ams->
vÆue
);

272 
rv
 = -1;

277 i‡(
i
 >
íåy
->
∂ugö_∑ømëîs_size
) {

278 
	`OLSR_PRINTF
(0, "Ign‹edÖ¨amëî \"%s\"\n", 
∑øms
->
key
);

280 
	`OLSR_PRINTF
(1, "%s: %s\n", 
∑øms
->
key
, 
rc
 == 0 ? "OK" : "FAILED");

281 i‡(
rc
 != 0) {

282 
rv
 = -1;

285 #i‡
SUPPORT_OLD_PLUGIN_VERSIONS


286 } i‡(
íåy
->
ªgi°î_∑øm
 !
NULL
) {

287 
rc
;

288 
	`OLSR_PRINTF
(0, "Regi°îögÖ¨amëî \"%s\": ", 
∑øms
->
key
);

289 
rc
 = 
íåy
->
	`ªgi°î_∑øm
(
∑øms
->
key
,Ö¨ams->
vÆue
);

290 i‡(
rc
 < 0) {

291 
	`Ârötf
(
°dîr
, "\nF©ÆÉº‹ i¿∂ugöÖ¨amëî \"%s\"/\"%s\"\n", 
∑øms
->
key
,Ö¨ams->
vÆue
);

292 
	`exô
(
EXIT_FAILURE
);

294 
	`OLSR_PRINTF
(0, "%s\n", 
rc
 == 0 ? "FAILED" : "OK");

297 
	`OLSR_PRINTF
(0, "I d⁄'àknow wh©Åÿdÿwôh \"%s\"!\n", 
∑øms
->
key
);

298 
rv
 = -1;

302 
	`OLSR_PRINTF
(1, "RunningÖlugin_init function...\n");

303 
íåy
->
	`∂ugö_öô
();

304  
rv
;

305 
	}
}

311 
	$ﬁ§_˛o£_∂ugös
()

313 
ﬁ§_∂ugö
 *
íåy
;

315 
	`OLSR_PRINTF
(0, "ClosingÖlugins...\n");

316 
íåy
 = 
ﬁ§_∂ugös
;É¡ry !
NULL
;É¡ry =É¡ry->
√xt
) {

317 
	`dl˛o£
(
íåy
->
dlh™dÀ
);

318 
íåy
->
dlh™dÀ
 = 
NULL
;

320 
	}
}

	@src/plugin_loader.h

42 #i‚de‡
_OLSR_PLUGIN_LOADER


43 
	#_OLSR_PLUGIN_LOADER


	)

45 
	~"ﬁ§d_∂ugö.h
"

46 
	~"ﬁ§_ty≥s.h
"

47 
	~"ﬁ§_cfg.h
"

49 #i‚de‡
OLSR_PLUGIN


52 (*
	t∂ugö_öô_func
) ();

53 (*
	tgë_öãrÁ˚_vîsi⁄_func
) ();

55 #i‡
SUPPORT_OLD_PLUGIN_VERSIONS


58 (*
	tªgi°î_∑øm_func
) (*, *);

62 (*
	tgë_∂ugö_∑ømëîs_func
Ë(c⁄° 
	tﬁ§d_∂ugö_∑ømëîs
 ** 
	t∑øms
, *
	tsize
);

64 
	sﬁ§_∂ugö
 {

66 *
dlh™dÀ
;

68 
∂ugö_∑øm
 *
∑øms
;

69 
∂ugö_öãrÁ˚_vîsi⁄
;

71 #i‡
SUPPORT_OLD_PLUGIN_VERSIONS


73 
ªgi°î_∑øm_func
 
ªgi°î_∑øm
;

75 
∂ugö_öô_func
 
∂ugö_öô
;

78 c⁄° 
ﬁ§d_∂ugö_∑ømëîs
 *
∂ugö_∑ømëîs
;

79 
∂ugö_∑ømëîs_size
;

81 
ﬁ§_∂ugö
 *
√xt
;

84 
	`ﬁ§_lﬂd_∂ugös
();

86 
	`ﬁ§_˛o£_∂ugös
();

88 
	`ﬁ§_∂ugö_io
(, *, 
size_t
);

	@src/plugin_util.c

43 
	~"∂ugö_utû.h
"

44 
	~"ﬁ§.h
"

45 
	~"defs.h
"

47 
	~<¨∑/öë.h
>

50 
£t_∂ugö_p‹t
(c⁄° *
vÆue
, *
d©a
, 
£t_∂ugö_∑ømëî_add⁄
 
add⁄
 
__©åibuã__
 ((
unu£d
)))

52 *
	gíd±r
;

53 c⁄° 
	gp‹t
 = 
°πoul
(
vÆue
, &
íd±r
, 0);

54 i‡(*
	gíd±r
 !'\0' || 
íd±r
 =
vÆue
) {

55 
OLSR_PRINTF
(0, "IŒegÆÖ‹ànumbî \"%s\"", 
vÆue
);

58 i‡(
	gp‹t
 > 65535) {

59 
OLSR_PRINTF
(0, "P‹ànumbî %u ouào‡ønge", 
p‹t
);

62 i‡(
	gd©a
 !
NULL
) {

63 *
v
 = 
d©a
;

64 *
	gv
 = 
p‹t
;

65 
OLSR_PRINTF
(1, "%†p‹ànumbî %u\n", "GŸ", 
p‹t
);

67 
OLSR_PRINTF
(0, "%†p‹ànumbî %u\n", "Ign‹ed", 
p‹t
);

73 
£t_∂ugö_ùaddªss
(c⁄° *
vÆue
, *
d©a
, 
£t_∂ugö_∑ømëî_add⁄
 
add⁄
 
__©åibuã__
 ((
unu£d
)))

75 
	gbuf
[
INET6_ADDRSTRLEN
];

76 
ﬁ§_ù_addr
 
	gù_addr
;

77 i‡(
öë_±⁄
(
ﬁ§_˙f
->
ù_vîsi⁄
, 
vÆue
, &
ù_addr
) <= 0) {

78 
OLSR_PRINTF
(0, "IŒegÆ IPáddªs†\"%s\"", 
vÆue
);

81 
öë_¡›
(
ﬁ§_˙f
->
ù_vîsi⁄
, &
ù_addr
, 
buf
, (buf));

82 i‡(
	gd©a
 !
NULL
) {

83 
ﬁ§_ù_addr
 *
v
 = 
d©a
;

84 *
	gv
 = 
ù_addr
;

85 
OLSR_PRINTF
(1, "%†IPáddªs†%s\n", "GŸ", 
buf
);

87 
OLSR_PRINTF
(0, "%†IPáddªs†%s\n", "Ign‹ed", 
buf
);

93 
£t_∂ugö_boﬁón
(c⁄° *
vÆue
, *
d©a
, 
£t_∂ugö_∑ømëî_add⁄
 
add⁄
 
__©åibuã__
 ((
unu£d
)))

95 *
	gv
 = 
d©a
;

96 i‡(
°rˇ£cmp
(
vÆue
, "yes") == 0 || strcasecmp(value, "true") == 0) {

97 *
v
 = 1;

98 } i‡(
°rˇ£cmp
(
vÆue
, "no") == 0 || strcasecmp(value, "false") == 0) {

99 *
v
 = 0;

107 
£t_∂ugö_öt
(c⁄° *
vÆue
, *
d©a
, 
£t_∂ugö_∑ømëî_add⁄
 
add⁄
 
__©åibuã__
 ((
unu£d
)))

109 *
	gíd±r
;

110 c⁄° 
	gtheöt
 = 
°πﬁ
(
vÆue
, &
íd±r
, 0);

111 i‡(*
	gíd±r
 !'\0' || 
íd±r
 =
vÆue
) {

112 
OLSR_PRINTF
(0, "IŒegÆ i¡ \"%s\"", 
vÆue
);

115 i‡(
	gd©a
 !
NULL
) {

116 *
v
 = 
d©a
;

117 *
	gv
 = 
theöt
;

118 
OLSR_PRINTF
(1, "%†öà%d\n", "GŸ", 
theöt
);

120 
OLSR_PRINTF
(0, "%†öà%d\n", "Ign‹ed", 
theöt
);

126 
	$£t_∂ugö_°rög
(c⁄° *
vÆue
, *
d©a
, 
£t_∂ugö_∑ømëî_add⁄
 
add⁄
)

128 i‡(
d©a
 !
NULL
) {

129 *
v
 = 
d©a
;

130 i‡(()
	`°æí
(
vÆue
Ë>
add⁄
.
ui
) {

131 
	`OLSR_PRINTF
(0, "SåögÅoÿl⁄g \"%s\"", 
vÆue
);

134 
	`°rs˝y
(
v
, 
vÆue
, 
add⁄
.
ui
);

135 
	`OLSR_PRINTF
(1, "%†°rög %s\n", "GŸ", 
vÆue
);

137 
	`OLSR_PRINTF
(0, "%†°rög %s\n", "Ign‹ed", 
vÆue
);

140 
	}
}

	@src/plugin_util.h

37 #i‚de‡
_OLSRD_PLUGIN_UTIL


38 
	#_OLSRD_PLUGIN_UTIL


	)

40 
	~"ﬁ§d_∂ugö.h
"

43 
£t_∂ugö_∑ømëî
 
£t_∂ugö_p‹t
;

44 
£t_∂ugö_∑ømëî
 
£t_∂ugö_ùaddªss
;

45 
£t_∂ugö_∑ømëî
 
£t_∂ugö_boﬁón
;

46 
£t_∂ugö_∑ømëî
 
£t_∂ugö_öt
;

47 
£t_∂ugö_∑ømëî
 
£t_∂ugö_°rög
;

	@src/print_packet.c

42 
	~"¥öt_∑ckë.h
"

43 
	~"ùˇlc.h
"

44 
	~"m™tisß.h
"

45 
	~"defs.h
"

46 
	~"ﬁ§.h
"

47 
	~"lq_∑ckë.h
"

48 
	~"√t_ﬁ§.h
"

50 
¥öt_mesßgedump
(
FILE
 *, 
uöt8_t
 *, 
öt16_t
);

52 
¥öt_midmsg
(
FILE
 *, 
uöt8_t
 *, 
öt16_t
);

54 
¥öt_h«msg
(
FILE
 *, 
uöt8_t
 *, 
öt16_t
);

56 
¥öt_ﬁ§_tcmsg
(
FILE
 *, 
uöt8_t
 *, 
öt16_t
);

58 
¥öt_ﬁ§_tcmsg_lq
(
FILE
 *, 
uöt8_t
 *, 
öt16_t
);

60 
¥öt_hñlomsg
(
FILE
 *, 
uöt8_t
 *, 
öt16_t
);

62 
¥öt_hñlomsg_lq
(
FILE
 *, 
uöt8_t
 *, 
öt16_t
);

65 
öt8_t


66 
	$¥öt_ﬁ§_£rülized_∑ckë
(
FILE
 * 
h™dÀ
, 
ﬁ§_∑ckë
 *
pkt
, 
uöt16_t
 
size
, 
ﬁ§_ù_addr
 *
‰om_addr
)

68 
öt16_t
 
ªmaösize
 = 
size
 - 
OLSR_HEADERSIZE
;

69 
ﬁ§_mesßge
 *
msg
;

70 
ùaddr_°r
 
buf
;

73 
	`Ârötf
(
h™dÀ
, " ============== OLSR PACKET ==============\n source: %s\nÜength: %d bytes\n seqno: %d\n\n",

74 
‰om_addr
 ? 
	`ﬁ§_ù_to_°rög
(&
buf
, from_addrË: "UNKNOWN", 
	`¡ohs
(
pkt
->
v4
.
ﬁ§_∑ckÀn
),Çtohs’kt->v4.
ﬁ§_£qno
));

77 i‡(
size
 !
	`¡ohs
(
pkt
->
v4
.
ﬁ§_∑ckÀn
))

78 
	`Ârötf
(
h™dÀ
, " SIZE MISSMATCH(%d !%d)!\n", 
size
, 
	`¡ohs
(
pkt
->
v4
.
ﬁ§_∑ckÀn
));

80 
msg
 = (
ﬁ§_mesßge
 *)
pkt
->
v4
.
ﬁ§_msg
;

83 (
ªmaösize
 > 0Ë&& 
	`¡ohs
(
msg
->
v4
.
ﬁ§_msgsize
)) {

84 
	`¥öt_ﬁ§_£rülized_mesßge
(
h™dÀ
, 
msg
);

85 
ªmaösize
 -
	`¡ohs
(
msg
->
v4
.
ﬁ§_msgsize
);

86 
msg
 = (
ﬁ§_mesßge
 *)((*)msg + 
	`¡ohs
(msg->
v4
.
ﬁ§_msgsize
));

90 
	`Ârötf
(
h™dÀ
, " =========================================\n\n");

92 
	}
}

95 
öt8_t


96 
	$¥öt_ﬁ§_£rülized_mesßge
(
FILE
 * 
h™dÀ
, 
ﬁ§_mesßge
 * 
msg
)

98 
ùaddr_°r
 
buf
;

100 
	`Ârötf
(
h™dÀ
, " ------------ OLSR MESSAGE ------------\n");

101 
	`Ârötf
(
h™dÀ
, " Sídî maöáddr: %s\n", 
	`ﬁ§_ù_to_°rög
(&
buf
, (
ﬁ§_ù_addr
 *)&
msg
->
v4
.
‹igö©‹
));

102 
	`Ârötf
(
h™dÀ
, " Ty≥: %s, size: %d, vtime: %u ms\n", 
	`ﬁ§_msgty≥_to_°rög
(
msg
->
v4
.
ﬁ§_msgty≥
),

103 
	`¡ohs
(
msg
->
v4
.
ﬁ§_msgsize
), 
	`me_to_ª…ime
(msg->v4.
ﬁ§_vtime
));

104 
	`Ârötf
(
h™dÀ
, " TTL: %d, H›˙t: %d, seqno: %d\n", (
ﬁ§_˙f
->
ù_vîsi⁄
 =
AF_INET
Ë? 
msg
->
v4
.
âl
 : msg->
v6
.ttl,

105 (
ﬁ§_˙f
->
ù_vîsi⁄
 =
AF_INET
Ë? 
msg
->
v4
.
h›˙t
 : msg->
v6
.hopcnt,

106 
	`¡ohs
((
ﬁ§_˙f
->
ù_vîsi⁄
 =
AF_INET
Ë? 
msg
->
v4
.
£qno
 : msg->
v6
.seqno));

108 
msg
->
v4
.
ﬁ§_msgty≥
) {

110 (
MID_MESSAGE
):

111 
	`¥öt_midmsg
(
h™dÀ
, (
ﬁ§_˙f
->
ù_vîsi⁄
 =
AF_INET
Ë? (
uöt8_t
 *Ë& 
msg
->
v4
.
mesßge
 : (uöt8_à*Ë& msg->
v6
.message,

112 
	`¡ohs
(
msg
->
v4
.
ﬁ§_msgsize
));

114 (
HNA_MESSAGE
):

115 
	`¥öt_h«msg
(
h™dÀ
, (
ﬁ§_˙f
->
ù_vîsi⁄
 =
AF_INET
Ë? (
uöt8_t
 *Ë& 
msg
->
v4
.
mesßge
 : (uöt8_à*Ë& msg->
v6
.message,

116 
	`¡ohs
(
msg
->
v4
.
ﬁ§_msgsize
));

118 (
TC_MESSAGE
):

119 
	`¥öt_ﬁ§_tcmsg
(
h™dÀ
, (
ﬁ§_˙f
->
ù_vîsi⁄
 =
AF_INET
Ë? (
uöt8_t
 *Ë& 
msg
->
v4
.
mesßge
 : (uöt8_à*Ë& msg->
v6
.message,

120 
	`¡ohs
(
msg
->
v4
.
ﬁ§_msgsize
));

122 (
LQ_TC_MESSAGE
):

123 
	`¥öt_ﬁ§_tcmsg_lq
(
h™dÀ
,

124 (
ﬁ§_˙f
->
ù_vîsi⁄
 =
AF_INET
Ë? (
uöt8_t
 *Ë& 
msg
->
v4
.
mesßge
 : (uöt8_à*Ë& msg->
v6
.message,

125 
	`¡ohs
(
msg
->
v4
.
ﬁ§_msgsize
));

127 (
HELLO_MESSAGE
):

128 
	`¥öt_hñlomsg
(
h™dÀ
, (
ﬁ§_˙f
->
ù_vîsi⁄
 =
AF_INET
Ë? (
uöt8_t
 *Ë& 
msg
->
v4
.
mesßge
 : (uöt8_à*Ë& msg->
v6
.message,

129 
	`¡ohs
(
msg
->
v4
.
ﬁ§_msgsize
));

131 (
LQ_HELLO_MESSAGE
):

132 
	`¥öt_hñlomsg_lq
(
h™dÀ
, (
ﬁ§_˙f
->
ù_vîsi⁄
 =
AF_INET
Ë? (
uöt8_t
 *Ë& 
msg
->
v4
.
mesßge
 : (uöt8_à*Ë& msg->
v6
.message,

133 
	`¡ohs
(
msg
->
v4
.
ﬁ§_msgsize
));

136 
	`¥öt_mesßgedump
(
h™dÀ
, (
uöt8_t
 *Ë
msg
, 
	`¡ohs
(msg->
v4
.
ﬁ§_msgsize
));

139 
	`Ârötf
(
h™dÀ
, " --------------------------------------\n\n");

141 
	}
}

144 
	$¥öt_mesßgedump
(
FILE
 * 
h™dÀ
, 
uöt8_t
 * 
msg
, 
öt16_t
 
size
)

146 
i
, 
x
 = 0;

148 
	`Ârötf
(
h™dÀ
, " Data dump:\n ");

149 
i
 = 0; i < 
size
; i++) {

150 i‡(
x
 == 4) {

151 
x
 = 0;

152 
	`Ârötf
(
h™dÀ
, "\n ");

154 
x
++;

155 i‡(
ﬁ§_˙f
->
ù_vîsi⁄
 =
AF_INET
)

156 
	`Ârötf
(
h™dÀ
, " %-3ò", (
u_ch¨
Ë
msg
[
i
]);

158 
	`Ârötf
(
h™dÀ
, " %-2x ", (
u_ch¨
Ë
msg
[
i
]);

160 
	`Ârötf
(
h™dÀ
, "\n");

161 
	}
}

164 
	$¥öt_hñlomsg
(
FILE
 * 
h™dÀ
, 
uöt8_t
 * 
d©a
, 
öt16_t
 
tŸsize
)

166 
ﬁ§_ù_addr
 *
haddr
;

167 
hñlosize
 = 
tŸsize
 - ((
ﬁ§_˙f
->
ù_vîsi⁄
 =
AF_INET
Ë? 
OLSR_MSGHDRSZ_IPV4
 : 
OLSR_MSGHDRSZ_IPV6
);

169 
	`Ârötf
(
h™dÀ
, " +Htime: %u ms\n", 
	`me_to_ª…ime
(
d©a
[2]));

171 
	`Ârötf
(
h™dÀ
, " +Wûlög√ss: %d\n", 
d©a
[3]);

173 i‡(
ﬁ§_˙f
->
ù_vîsi⁄
 =
AF_INET
) {

175 
hñlomsg
 *
h
;

176 
hñlöfo
 *
höf
;

178 
h
 = (
hñlomsg
 *)
d©a
;

180 
höf
 = 
h
->
hñl_öfo
; (*)hö‡< ((*)
d©a
 + 
hñlosize
);

181 
höf
 = (
hñlöfo
 *)((*)hö‡+ 
	`¡ohs
(höf->
size
))) {

183 
	`Ârötf
(
h™dÀ
, " ++ Lök: %s, Sètus: %s, Size: %d\n", 
	`ﬁ§_lök_to_°rög
(
	`EXTRACT_LINK
(
höf
->
lök_code
)),

184 
	`ﬁ§_°©us_to_°rög
(
	`EXTRACT_STATUS
(
höf
->
lök_code
)), 
	`¡ohs
(höf->
size
));

186 
haddr
 = (
ﬁ§_ù_addr
 *)&
höf
->
√igh_addr
; (*)hadd∏< (*)hö‡+ 
	`¡ohs
(höf->
size
);

187 
haddr
 +(haddr->
v4
)) {

188 
ùaddr_°r
 
buf
;

189 
	`Ârötf
(
h™dÀ
, " ++ %s\n", 
	`ﬁ§_ù_to_°rög
(&
buf
, 
haddr
));

195 
hñlomsg6
 *
h6
;

196 
hñlöfo6
 *
höf6
;

198 
h6
 = (
hñlomsg6
 *)
d©a
;

200 
höf6
 = 
h6
->
hñl_öfo
; (*)höf6 < ((*)
d©a
 + (
hñlosize
));

201 
höf6
 = (
hñlöfo6
 *)((*)höf6 + 
	`¡ohs
(höf6->
size
))) {

202 
	`Ârötf
(
h™dÀ
, " ++ Lök: %s, Sètus: %s, Size: %d\n", 
	`ﬁ§_lök_to_°rög
(
	`EXTRACT_LINK
(
höf6
->
lök_code
)),

203 
	`ﬁ§_°©us_to_°rög
(
	`EXTRACT_STATUS
(
höf6
->
lök_code
)), 
	`¡ohs
(höf6->
size
));

205 
haddr
 = (
ﬁ§_ù_addr
 *)
höf6
->
√igh_addr
; (*)hadd∏< (*)höf6 + 
	`¡ohs
(höf6->
size
); haddr++) {

206 
ùaddr_°r
 
buf
;

207 
	`Ârötf
(
h™dÀ
, " ++ %s\n", 
	`ﬁ§_ù_to_°rög
(&
buf
, 
haddr
));

213 
	}
}

216 
	$¥öt_hñlomsg_lq
(
FILE
 * 
h™dÀ
, 
uöt8_t
 * 
d©a
, 
öt16_t
 
tŸsize
)

218 
ﬁ§_ù_addr
 *
haddr
;

219 
hñlosize
 = 
tŸsize
 - ((
ﬁ§_˙f
->
ù_vîsi⁄
 =
AF_INET
Ë? 
OLSR_MSGHDRSZ_IPV4
 : 
OLSR_MSGHDRSZ_IPV6
);

221 
	`Ârötf
(
h™dÀ
, " +Htime: %u ms\n", 
	`me_to_ª…ime
(
d©a
[2]));

223 
	`Ârötf
(
h™dÀ
, " +Wûlög√ss: %d\n", 
d©a
[3]);

225 i‡(
ﬁ§_˙f
->
ù_vîsi⁄
 =
AF_INET
) {

227 
hñlomsg
 *
h
;

228 
hñlöfo
 *
höf
;

230 
h
 = (
hñlomsg
 *)
d©a
;

232 
höf
 = 
h
->
hñl_öfo
; (*)hö‡< ((*)
d©a
 + 
hñlosize
);

233 
höf
 = (
hñlöfo
 *)((*)hö‡+ 
	`¡ohs
(höf->
size
))) {

235 
	`Ârötf
(
h™dÀ
, " ++ Lök: %s, Sètus: %s, Size: %d\n", 
	`ﬁ§_lök_to_°rög
(
	`EXTRACT_LINK
(
höf
->
lök_code
)),

236 
	`ﬁ§_°©us_to_°rög
(
	`EXTRACT_STATUS
(
höf
->
lök_code
)), 
	`¡ohs
(höf->
size
));

238 
haddr
 = (
ﬁ§_ù_addr
 *)&
höf
->
√igh_addr
; (*)hadd∏< (*)hö‡+ 
	`¡ohs
(höf->
size
);

239 
haddr
 +(haddr->
v4
)) {

240 
ùaddr_°r
 
buf
;

241 
uöt8_t
 *
quÆôy
 = (uöt8_à*Ë
haddr
 + 
ﬁ§_˙f
->
ùsize
;

242 
	`Ârötf
(
h™dÀ
, " ++ %s\n", 
	`ﬁ§_ù_to_°rög
(&
buf
, 
haddr
));

243 
	`Ârötf
(
h™dÀ
, " ++ LQ = %d, RLQ = %d\n", 
quÆôy
[0], quality[1]);

249 
hñlomsg6
 *
h6
;

250 
hñlöfo6
 *
höf6
;

252 
h6
 = (
hñlomsg6
 *)
d©a
;

254 
höf6
 = 
h6
->
hñl_öfo
; (*)höf6 < ((*)
d©a
 + (
hñlosize
));

255 
höf6
 = (
hñlöfo6
 *)((*)höf6 + 
	`¡ohs
(höf6->
size
))) {

256 
	`Ârötf
(
h™dÀ
, " ++ Lök: %s, Sètus: %s, Size: %d\n", 
	`ﬁ§_lök_to_°rög
(
	`EXTRACT_LINK
(
höf6
->
lök_code
)),

257 
	`ﬁ§_°©us_to_°rög
(
	`EXTRACT_STATUS
(
höf6
->
lök_code
)), 
	`¡ohs
(höf6->
size
));

259 
haddr
 = (
ﬁ§_ù_addr
 *)
höf6
->
√igh_addr
; (*)hadd∏< (*)höf6 + 
	`¡ohs
(höf6->
size
) + 4; haddr++) {

260 
ùaddr_°r
 
buf
;

261 
uöt8_t
 *
quÆôy
 = (uöt8_à*Ë
haddr
 + 
ﬁ§_˙f
->
ùsize
;

262 
	`Ârötf
(
h™dÀ
, " ++ %s\n", 
	`ﬁ§_ù_to_°rög
(&
buf
, 
haddr
));

263 
	`Ârötf
(
h™dÀ
, " ++ LQ = %d, RLQ = %d\n", 
quÆôy
[0], quality[1]);

268 
	}
}

271 
	$¥öt_ﬁ§_tcmsg_lq
(
FILE
 * 
h™dÀ
, 
uöt8_t
 * 
d©a
, 
öt16_t
 
tŸsize
)

273 
ªmsize
 = 
tŸsize
 - ((
ﬁ§_˙f
->
ù_vîsi⁄
 =
AF_INET
Ë? 
OLSR_MSGHDRSZ_IPV4
 : 
OLSR_MSGHDRSZ_IPV6
);

275 
	`Ârötf
(
h™dÀ
, " +ANSN: %d\n", 
	`ht⁄s
(((
ﬁ§_tcmsg
 *)
d©a
)->
™¢
));

277 
d©a
 += 4;

278 
ªmsize
 -= 4;

280 
ªmsize
) {

281 
ùaddr_°r
 
buf
;

282 
	`Ârötf
(
h™dÀ
, " +Neighb‹: %s\n", 
	`ﬁ§_ù_to_°rög
(&
buf
, (
ﬁ§_ù_addr
 *)
	`ARM_NOWARN_ALIGN
(
d©a
)));

283 
d©a
 +
ﬁ§_˙f
->
ùsize
;

284 
	`Ârötf
(
h™dÀ
, " +LQ: %d, ", *
d©a
);

285 
d©a
 += 1;

286 
	`Ârötf
(
h™dÀ
, "RLQ: %d\n", *
d©a
);

287 
d©a
 += 3;

288 
ªmsize
 -(
ﬁ§_˙f
->
ùsize
 + 4);

291 
	}
}

294 
	$¥öt_ﬁ§_tcmsg
(
FILE
 * 
h™dÀ
, 
uöt8_t
 * 
d©a
, 
öt16_t
 
tŸsize
)

296 
ªmsize
 = 
tŸsize
 - ((
ﬁ§_˙f
->
ù_vîsi⁄
 =
AF_INET
Ë? 
OLSR_MSGHDRSZ_IPV4
 : 
OLSR_MSGHDRSZ_IPV6
);

298 
	`Ârötf
(
h™dÀ
, " +ANSN: %d\n", 
	`ht⁄s
(((
ﬁ§_tcmsg
 *)
d©a
)->
™¢
));

300 
d©a
 += 4;

301 
ªmsize
 -= 4;

303 
ªmsize
) {

304 
ùaddr_°r
 
buf
;

305 
	`Ârötf
(
h™dÀ
, " +Neighb‹: %s\n", 
	`ﬁ§_ù_to_°rög
(&
buf
, (
ﬁ§_ù_addr
 *)
	`ARM_NOWARN_ALIGN
(
d©a
)));

306 
d©a
 +
ﬁ§_˙f
->
ùsize
;

308 
ªmsize
 -
ﬁ§_˙f
->
ùsize
;

311 
	}
}

314 
	$¥öt_h«msg
(
FILE
 * 
h™dÀ
, 
uöt8_t
 * 
d©a
, 
öt16_t
 
tŸsize
)

316 
ªmsize
 = 
tŸsize
 - ((
ﬁ§_˙f
->
ù_vîsi⁄
 =
AF_INET
Ë? 
OLSR_MSGHDRSZ_IPV4
 : 
OLSR_MSGHDRSZ_IPV6
);

318 
ªmsize
) {

319 
ùaddr_°r
 
buf
;

320 
	`Ârötf
(
h™dÀ
, " +Nëw‹k: %s\n", 
	`ﬁ§_ù_to_°rög
(&
buf
, (
ﬁ§_ù_addr
 *)
	`ARM_NOWARN_ALIGN
(
d©a
)));

321 
d©a
 +
ﬁ§_˙f
->
ùsize
;

322 
	`Ârötf
(
h™dÀ
, " +Nëmask: %s\n", 
	`ﬁ§_ù_to_°rög
(&
buf
, (
ﬁ§_ù_addr
 *)
	`ARM_NOWARN_ALIGN
(
d©a
)));

323 
d©a
 +
ﬁ§_˙f
->
ùsize
;

325 
ªmsize
 -(
ﬁ§_˙f
->
ùsize
 * 2);

328 
	}
}

331 
	$¥öt_midmsg
(
FILE
 * 
h™dÀ
, 
uöt8_t
 * 
d©a
, 
öt16_t
 
tŸsize
)

333 
ªmsize
 = 
tŸsize
 - ((
ﬁ§_˙f
->
ù_vîsi⁄
 =
AF_INET
Ë? 
OLSR_MSGHDRSZ_IPV4
 : 
OLSR_MSGHDRSZ_IPV6
);

335 
ªmsize
) {

336 
ùaddr_°r
 
buf
;

337 
	`Ârötf
(
h™dÀ
, " +Alüs: %s\n", 
	`ﬁ§_ù_to_°rög
(&
buf
, (
ﬁ§_ù_addr
 *)
	`ARM_NOWARN_ALIGN
(
d©a
)));

338 
d©a
 +
ﬁ§_˙f
->
ùsize
;

339 
ªmsize
 -
ﬁ§_˙f
->
ùsize
;

341 
	}
}

	@src/print_packet.h

42 #i‚de‡
_PRINT_PACKET


43 
	#_PRINT_PACKET


	)

45 
	~"ﬁ§_ty≥s.h
"

46 
	~"ﬁ§_¥Ÿocﬁ.h
"

47 
	~<°dio.h
>

49 
öt8_t
 
¥öt_ﬁ§_£rülized_∑ckë
(
FILE
 *, 
ﬁ§_∑ckë
 *, 
uöt16_t
, 
ﬁ§_ù_addr
 *);

51 
öt8_t
 
¥öt_ﬁ§_£rülized_mesßge
(
FILE
 *, 
ﬁ§_mesßge
 *);

	@src/process_package.c

42 
	~"¥o˚ss_∑ckage.h
"

43 
	~"ùˇlc.h
"

44 
	~"defs.h
"

45 
	~"lq_∑ckë.h
"

46 
	~"hy°îesis.h
"

47 
	~"two_h›_√ighb‹_èbÀ.h
"

48 
	~"tc_£t.h
"

49 
	~"m¥_£À˘‹_£t.h
"

50 
	~"mid_£t.h
"

51 
	~"ﬁ§.h
"

52 
	~"∑r£r.h
"

53 
	~"du∂iˇã_£t.h
"

54 
	~"scheduÀr.h
"

55 
	~"√t_ﬁ§.h
"

56 
	~"lq_∂ugö.h
"

57 
	~"log.h
"

59 
	~<°ddef.h
>

61 
¥o˚ss_mesßge_√ighb‹s
(
√ighb‹_íåy
 *, c⁄° 
hñlo_mesßge
 *);

63 
lökög_this_2_íåõs
(
√ighb‹_íåy
 *, 
√ighb‹_2_íåy
 *, 
ﬁ§_ª…ime
);

65 
boﬁ
 
lookup_m¥_°©us
(c⁄° 
hñlo_mesßge
 *, c⁄° 
öãrÁ˚
 *);

74 
	$¥o˚ss_mesßge_√ighb‹s
(
√ighb‹_íåy
 *
√ighb‹
, c⁄° 
hñlo_mesßge
 *
mesßge
)

76 
hñlo_√ighb‹
 *
mesßge_√ighb‹s
;

78 
mesßge_√ighb‹s
 = 
mesßge
->
√ighb‹s
; mesßge_√ighb‹†!
NULL
; mesßge_√ighb‹†mesßge_√ighb‹s->
√xt
) {

79 
ﬁ§_ù_addr
 *
√igh_addr
;

80 
√ighb‹_2_íåy
 *
two_h›_√ighb‹
;

88 i‡(
	`if_ifwôhaddr
(&
mesßge_√ighb‹s
->
addªss
Ë!
NULL
)

92 
√igh_addr
 = 
	`mid_lookup_maö_addr
(&
mesßge_√ighb‹s
->
addªss
);

94 i‡(
√igh_addr
 !
NULL
) {

95 
mesßge_√ighb‹s
->
addªss
 = *
√igh_addr
;

98 i‡(((
mesßge_√ighb‹s
->
°©us
 =
SYM_NEIGH
Ë|| (mesßge_√ighb‹s->°©u†=
MPR_NEIGH
))) {

99 
√ighb‹_2_li°_íåy
 *
two_h›_√ighb‹_yë
 = 
	`ﬁ§_lookup_my_√ighb‹s
(
√ighb‹
, &
mesßge_√ighb‹s
->
addªss
);

101 i‡(
two_h›_√ighb‹_yë
 !
NULL
) {

103 
	`ﬁ§_£t_timî
(&
two_h›_√ighb‹_yë
->
nbr2_li°_timî
, 
mesßge
->
vtime
, 
OLSR_NBR2_LIST_JITTER
, 
OLSR_TIMER_ONESHOT
,

104 &
ﬁ§_expúe_nbr2_li°
, 
two_h›_√ighb‹_yë
, 0);

105 
two_h›_√ighb‹
 = 
two_h›_√ighb‹_yë
->
√ighb‹_2
;

113 i‡(
ﬁ§_˙f
->
lq_Àvñ
 > 0) {

119 
√ighb‹_li°_íåy
 *
wÆkî
;

121 
wÆkî
 = 
two_h›_√ighb‹
->
√ighb‹_2_nbli°
.
√xt
; walker != &two_hop_neighbor->neighbor_2_nblist;

122 
wÆkî
 = wÆkî->
√xt
) {

128 i‡(
wÆkî
->
√ighb‹
 ==Çeighbor) {

129 
wÆkî
->
∑th_lökco°
 = 
LINK_COST_BROKEN
;

134 
two_h›_√ighb‹
 = 
	`ﬁ§_lookup_two_h›_√ighb‹_èbÀ
(&
mesßge_√ighb‹s
->
addªss
);

135 i‡(
two_h›_√ighb‹
 =
NULL
) {

136 
ch™ges_√ighb‹hood
 = 
åue
;

137 
ch™ges_t›ﬁogy
 = 
åue
;

139 
two_h›_√ighb‹
 = 
	`ﬁ§_mÆloc
((
√ighb‹_2_íåy
), "Process HELLO");

141 
two_h›_√ighb‹
->
√ighb‹_2_nbli°
.
√xt
 = &two_hop_neighbor->neighbor_2_nblist;

143 
two_h›_√ighb‹
->
√ighb‹_2_nbli°
.
¥ev
 = &two_hop_neighbor->neighbor_2_nblist;

145 
two_h›_√ighb‹
->
√ighb‹_2_poöãr
 = 0;

147 
two_h›_√ighb‹
->
√ighb‹_2_addr
 = 
mesßge_√ighb‹s
->
addªss
;

149 
	`ﬁ§_ö£π_two_h›_√ighb‹_èbÀ
(
two_h›_√ighb‹
);

151 
	`lökög_this_2_íåõs
(
√ighb‹
, 
two_h›_√ighb‹
, 
mesßge
->
vtime
);

156 
ch™ges_√ighb‹hood
 = 
åue
;

157 
ch™ges_t›ﬁogy
 = 
åue
;

159 
	`lökög_this_2_íåõs
(
√ighb‹
, 
two_h›_√ighb‹
, 
mesßge
->
vtime
);

168 i‡(
ﬁ§_˙f
->
lq_Àvñ
 > 0) {

169 
ﬁ§_lökco°
 
fú°_h›_∑thco°
;

170 
lök_íåy
 *
 k
 = 
	`gë_be°_lök_to_√ighb‹
(&
√ighb‹
->
√ighb‹_maö_addr
);

172 i‡(!
 k
)

176 
fú°_h›_∑thco°
 = 
 k
->
lökco°
;

186 
mesßge_√ighb‹s
 = 
mesßge
->
√ighb‹s
; mesßge_√ighb‹†!
NULL
; mesßge_√ighb‹†mesßge_√ighb‹s->
√xt
) {

187 i‡(
	`if_ifwôhaddr
(&
mesßge_√ighb‹s
->
addªss
Ë!
NULL
)

190 i‡(((
mesßge_√ighb‹s
->
°©us
 =
SYM_NEIGH
Ë|| (mesßge_√ighb‹s->°©u†=
MPR_NEIGH
))) {

191 
√ighb‹_li°_íåy
 *
wÆkî
;

192 
√ighb‹_2_íåy
 *
two_h›_√ighb‹
;

193 
√ighb‹_2_li°_íåy
 *
two_h›_√ighb‹_yë
 = 
	`ﬁ§_lookup_my_√ighb‹s
(
√ighb‹
,

194 &
mesßge_√ighb‹s
->
addªss
);

196 i‡(!
two_h›_√ighb‹_yë
)

199 
two_h›_√ighb‹
 = 
two_h›_√ighb‹_yë
->
√ighb‹_2
;

206 
wÆkî
 = 
two_h›_√ighb‹
->
√ighb‹_2_nbli°
.
√xt
; walker != &two_hop_neighbor->neighbor_2_nblist;

207 
wÆkî
 = wÆkî->
√xt
) {

213 i‡(
wÆkî
->
√ighb‹
 ==Çeighbor) {

214 
ﬁ§_lökco°
 
√w_£c⁄d_h›_lökco°
, 
√w_∑th_lökco°
;

219 
√w_£c⁄d_h›_lökco°
 = 
mesßge_√ighb‹s
->
co°
;

224 
√w_∑th_lökco°
 = 
fú°_h›_∑thco°
 + 
√w_£c⁄d_h›_lökco°
;

228 i‡(
√w_∑th_lökco°
 < 
wÆkî
->
∑th_lökco°
) {

229 
wÆkî
->
£c⁄d_h›_lökco°
 = 
√w_£c⁄d_h›_lökco°
;

230 
wÆkî
->
∑th_lökco°
 = 
√w_∑th_lökco°
;

232 
wÆkî
->
ßved_∑th_lökco°
 = 
√w_∑th_lökco°
;

234 
ch™ges_√ighb‹hood
 = 
åue
;

235 
ch™ges_t›ﬁogy
 = 
åue
;

242 
	}
}

252 
	$lökög_this_2_íåõs
(
√ighb‹_íåy
 *
√ighb‹
, 
√ighb‹_2_íåy
 *
two_h›_√ighb‹
, 
ﬁ§_ª…ime
 
vtime
)

254 
√ighb‹_li°_íåy
 *
li°_of_1_√ighb‹s
 = 
	`ﬁ§_mÆloc
((neighbor_list_entry), "LinkÉntries 1");

255 
√ighb‹_2_li°_íåy
 *
li°_of_2_√ighb‹s
 = 
	`ﬁ§_mÆloc
((neighbor_2_list_entry), "LinkÉntries 2");

257 
li°_of_1_√ighb‹s
->
√ighb‹
 =Çeighbor;

259 
li°_of_1_√ighb‹s
->
∑th_lökco°
 = 
LINK_COST_BROKEN
;

260 
li°_of_1_√ighb‹s
->
ßved_∑th_lökco°
 = 
LINK_COST_BROKEN
;

261 
li°_of_1_√ighb‹s
->
£c⁄d_h›_lökco°
 = 
LINK_COST_BROKEN
;

264 
two_h›_√ighb‹
->
√ighb‹_2_nbli°
.
√xt
->
¥ev
 = 
li°_of_1_√ighb‹s
;

265 
li°_of_1_√ighb‹s
->
√xt
 = 
two_h›_√ighb‹
->
√ighb‹_2_nbli°
.next;

267 
two_h›_√ighb‹
->
√ighb‹_2_nbli°
.
√xt
 = 
li°_of_1_√ighb‹s
;

268 
li°_of_1_√ighb‹s
->
¥ev
 = &
two_h›_√ighb‹
->
√ighb‹_2_nbli°
;

269 
li°_of_2_√ighb‹s
->
√ighb‹_2
 = 
two_h›_√ighb‹
;

270 
li°_of_2_√ighb‹s
->
nbr2_nbr
 = 
√ighb‹
;

272 
	`ﬁ§_ch™ge_timî
(
li°_of_2_√ighb‹s
->
nbr2_li°_timî
, 
vtime
, 
OLSR_NBR2_LIST_JITTER
, 
OLSR_TIMER_ONESHOT
);

275 
√ighb‹
->
√ighb‹_2_li°
.
√xt
->
¥ev
 = 
li°_of_2_√ighb‹s
;

276 
li°_of_2_√ighb‹s
->
√xt
 = 
√ighb‹
->
√ighb‹_2_li°
.next;

277 
√ighb‹
->
√ighb‹_2_li°
.
√xt
 = 
li°_of_2_√ighb‹s
;

278 
li°_of_2_√ighb‹s
->
¥ev
 = &
√ighb‹
->
√ighb‹_2_li°
;

281 
two_h›_√ighb‹
->
√ighb‹_2_poöãr
++;

282 
	}
}

292 
boﬁ


293 
	$lookup_m¥_°©us
(c⁄° 
hñlo_mesßge
 *
mesßge
, c⁄° 
öãrÁ˚
 *
ö_if
)

295 
hñlo_√ighb‹
 *
√ighb‹s
;

297 
√ighb‹s
 = 
mesßge
->√ighb‹s;Çeighb‹s;Çeighb‹†√ighb‹s->
√xt
) {

298 i‡–
√ighb‹s
->
lök
 !
UNSPEC_LINK


299 && (
ﬁ§_˙f
->
ù_vîsi⁄
 =
AF_INET


300 ? 
	`ù4equÆ
(&
√ighb‹s
->
addªss
.
v4
, &
ö_if
->
ù_addr
.v4)

301 : 
	`ù6equÆ
(&
√ighb‹s
->
addªss
.
v6
, &
ö_if
->
öt6_addr
.
sö6_addr
))) {

303 i‡(
√ighb‹s
->
lök
 =
SYM_LINK
 &&Çeighb‹s->
°©us
 =
MPR_NEIGH
) {

304  
åue
;

310  
Ál£
;

311 
	}
}

314 
	$de£rülize_hñlo
(
hñlo_mesßge
 *
hñlo
, c⁄° *
£r
)

316 c⁄° *
cuº
, *
limô
;

317 
uöt8_t
 
ty≥
;

318 
uöt16_t
 
size
;

319 
ùaddr_°r
 
buf
;

321 
	`mem£t
 (
hñlo
, 0, (*hello));

323 
cuº
 = 
£r
;

324 
	`pkt_gë_u8
(&
cuº
, &
ty≥
);

325 i‡(
ty≥
 !
HELLO_MESSAGE
 &&Åy≥ !
LQ_HELLO_MESSAGE
) {

329 
	`pkt_gë_ª…ime
(&
cuº
, &
hñlo
->
vtime
);

330 
	`pkt_gë_u16
(&
cuº
, &
size
);

331 
	`pkt_gë_ùaddªss
(&
cuº
, &
hñlo
->
sour˚_addr
);

333 
	`pkt_gë_u8
(&
cuº
, &
hñlo
->
âl
);

334 
	`pkt_gë_u8
(&
cuº
, &
hñlo
->
h›_cou¡
);

335 
	`pkt_gë_u16
(&
cuº
, &
hñlo
->
∑ckë_£q_numbî
);

336 
	`pkt_ign‹e_u16
(&
cuº
);

338 
	`pkt_gë_ª…ime
(&
cuº
, &
hñlo
->
htime
);

339 
	`pkt_gë_u8
(&
cuº
, &
hñlo
->
wûlög√ss
);

341 
hñlo
->
√ighb‹s
 = 
NULL
;

343 
limô
 = ((c⁄° *)
£r
Ë+ 
size
;

344 
cuº
 < 
limô
) {

345 c⁄° *
limô2
 = 
cuº
;

346 
uöt8_t
 
lök_code
;

347 
uöt16_t
 
size2
;

349 
	`pkt_gë_u8
(&
cuº
, &
lök_code
);

350 
	`pkt_ign‹e_u8
(&
cuº
);

351 
	`pkt_gë_u16
(&
cuº
, &
size2
);

353 
limô2
 +
size2
;

354 
cuº
 < 
limô2
) {

355 
hñlo_√ighb‹
 *
√igh
 = 
	`ﬁ§_mÆloc_hñlo_√ighb‹
("HELLO deserialization");

356 
	`pkt_gë_ùaddªss
(&
cuº
, &
√igh
->
addªss
);

357 i‡(
ty≥
 =
LQ_HELLO_MESSAGE
) {

358 
	`ﬁ§_de£rülize_hñlo_lq_∑ú
(&
cuº
, 
√igh
);

360 
√igh
->
lök
 = 
	`EXTRACT_LINK
(
lök_code
);

361 
√igh
->
°©us
 = 
	`EXTRACT_STATUS
(
lök_code
);

363 
√igh
->
√xt
 = 
hñlo
->
√ighb‹s
;

364 
hñlo
->
√ighb‹s
 = 
√igh
;

368 
	}
}

370 
boﬁ


371 
	$ﬁ§_öput_hñlo
(
ﬁ§_mesßge
 * 
£r
, 
öãrÁ˚
 * 
öif
, 
ﬁ§_ù_addr
 * 
‰om
)

373 
hñlo_mesßge
 
hñlo
;

375 i‡(
£r
 =
NULL
) {

376  
Ál£
;

378 i‡(
	`de£rülize_hñlo
(&
hñlo
, 
£r
) != 0) {

379  
Ál£
;

381 
	`ﬁ§_hñlo_èp
(&
hñlo
, 
öif
, 
‰om
);

384  
Ál£
;

385 
	}
}

391 
	$ﬁ§_öô_∑ckage_¥o˚ss
()

393 i‡(
ﬁ§_˙f
->
lq_Àvñ
 == 0) {

394 
	`ﬁ§_∑r£r_add_fun˘i⁄
(&
ﬁ§_öput_hñlo
, 
HELLO_MESSAGE
);

395 
	`ﬁ§_∑r£r_add_fun˘i⁄
(&
ﬁ§_öput_tc
, 
TC_MESSAGE
);

397 
	`ﬁ§_∑r£r_add_fun˘i⁄
(&
ﬁ§_öput_hñlo
, 
LQ_HELLO_MESSAGE
);

398 
	`ﬁ§_∑r£r_add_fun˘i⁄
(&
ﬁ§_öput_tc
, 
LQ_TC_MESSAGE
);

401 
	`ﬁ§_∑r£r_add_fun˘i⁄
(&
ﬁ§_öput_mid
, 
MID_MESSAGE
);

402 
	`ﬁ§_∑r£r_add_fun˘i⁄
(&
ﬁ§_öput_h«
, 
HNA_MESSAGE
);

403 
	}
}

406 
	$ﬁ§_hñlo_èp
(
hñlo_mesßge
 *
mesßge
, 
öãrÁ˚
 *
ö_if
, c⁄° 
ﬁ§_ù_addr
 *
‰om_addr
)

408 
√ighb‹_íåy
 *
√ighb‹
;

413 
lök_íåy
 *
 k
 = 
	`upd©e_lök_íåy
(&
ö_if
->
ù_addr
, 
‰om_addr
, 
mesßge
, in_if);

416 i‡(!
	`ùequÆ
(&
mesßge
->
sour˚_addr
,
‰om_addr
)){

418 i‡(
	`ﬁ§_vÆid©e_addªss
(
‰om_addr
)) {

419 
ﬁ§_ù_addr
 * 
maö_addr
 = 
	`mid_lookup_maö_addr
(
‰om_addr
);

420 i‡((
maö_addr
==
NULL
)||(
	`ùequÆ
(&
mesßge
->
sour˚_addr
, main_addr))){

425 
	`ö£π_mid_Æüs
(&
mesßge
->
sour˚_addr
, 
‰om_addr
, mesßge->
vtime
);

429 
ùaddr_°r
 
§cbuf
, 
‹igbuf
;

430 
	`ﬁ§_sy¶og
(
OLSR_LOG_INFO
, "got hello with invalid frománd originatorádressÖair (%s, %s) Duplicate Ips?\n",

431 
	`ﬁ§_ù_to_°rög
(&
‹igbuf
,&
mesßge
->
sour˚_addr
),

432 
	`ﬁ§_ù_to_°rög
(&
§cbuf
,
‰om_addr
));

437 i‡(
ﬁ§_˙f
->
lq_Àvñ
 > 0) {

438 
hñlo_√ighb‹
 *
wÆkî
;

440 
	`ﬁ§_upd©e_∑ckë_loss_hñlo_öt
(
 k
, 
mesßge
->
htime
);

443 
wÆkî
 = 
mesßge
->
√ighb‹s
; wÆkî !
NULL
; wÆkî = wÆkî->
√xt
) {

444 i‡(
wÆkî
->
lök
 !
UNSPEC_LINK


445 && 
	`ùequÆ
(&
wÆkî
->
addªss
, &
ö_if
->
ù_addr
)) {

457 
	`ﬁ§_mem‹ize_f‹eign_hñlo_lq
(
 k
, 
wÆkî
);

460 
	`ﬁ§_ª˚ived_hñlo_h™dÀr
(
 k
);

463 
√ighb‹
 = 
 k
->neighbor;

468 i‡(
ﬁ§_˙f
->
u£_hy°îesis
) {

471 
	`ﬁ§_upd©e_hy°îesis_hñlo
(
 k
, 
mesßge
->
htime
);

475 i‡(
	`lookup_m¥_°©us
(
mesßge
, 
ö_if
))

477 
	`ﬁ§_upd©e_m¥s_£t
(&
mesßge
->
sour˚_addr
, mesßge->
vtime
);

480 i‡(
√ighb‹
->
wûlög√ss
 !
mesßge
->willingness) {

481 
ùaddr_°r
 
buf
;

482 
	`OLSR_PRINTF
(1, "Wûlög√s†f‹ %†ch™ged from %dÅÿ%d - UPDATING\n", 
	`ﬁ§_ù_to_°rög
(&
buf
, &
√ighb‹
->
√ighb‹_maö_addr
),

483 
√ighb‹
->
wûlög√ss
, 
mesßge
->willingness);

487 
√ighb‹
->
wûlög√ss
 = 
mesßge
->willingness;

488 
ch™ges_√ighb‹hood
 = 
åue
;

489 
ch™ges_t›ﬁogy
 = 
åue
;

493 i‡(
√ighb‹
->
wûlög√ss
 !
WILL_NEVER
)

494 
	`¥o˚ss_mesßge_√ighb‹s
(
√ighb‹
, 
mesßge
);

497 
	`ﬁ§_¥o˚ss_ch™ges
();

499 
	`ﬁ§_‰ì_hñlo_∑ckë
(
mesßge
);

502 
	}
}

	@src/process_package.h

42 #i‚de‡
_OLSR_PROCESS_PACKAGE


43 
	#_OLSR_PROCESS_PACKAGE


	)

45 
	~"ﬁ§_¥Ÿocﬁ.h
"

46 
	~"∑ckë.h
"

47 
	~"√ighb‹_èbÀ.h
"

49 
boﬁ
 
ﬁ§_öput_hñlo
(
ﬁ§_mesßge
 *, 
öãrÁ˚
 *, 
ﬁ§_ù_addr
 *);

51 
ﬁ§_öô_∑ckage_¥o˚ss
();

53 
ﬁ§_hñlo_èp
(
hñlo_mesßge
 *, 
öãrÁ˚
 *, c⁄° 
ﬁ§_ù_addr
 *);

	@src/process_routes.c

46 
	~"ùˇlc.h
"

47 
	~"defs.h
"

48 
	~"ﬁ§.h
"

49 
	~"log.h
"

50 
	~"kî√l_rouãs.h
"

51 
	~"comm⁄/avl.h
"

52 
	~"√t_ﬁ§.h
"

53 
	~"tc_£t.h
"

54 
	~"ﬁ§_cookõ.h
"

55 
	~"ﬁ§_niô.h
"

57 #ifde‡
WIN32


58 *
SåEº‹
(
EºNo
);

59 #unde‡
°ªº‹


60 
	#°ªº‹
(
x
Ë
	`SåEº‹
(x)

	)

63 
li°_node
 
	gchg_kî√l_li°
;

71 
uöt8_t


72 
	$ﬁ§_π_Êags
(c⁄° 
π_íåy
 *
π
, 
add
)

74 c⁄° 
π_√xth›
 *
nh
;

75 
uöt8_t
 
Êags
 = 
RTF_UP
;

78 i‡(
π
->
π_d°
.
¥efix_Àn
 =
ﬁ§_˙f
->
max∂í
) {

79 
Êags
 |
RTF_HOST
;

82 i‡(
add
Ë
nh
 = 
	`ﬁ§_gë_nh
(
π
);

83 
nh
 = &
π
->
π_√xth›
;

85 i‡(!
	`ùequÆ
(&
π
->
π_d°
.
¥efix
, &
nh
->
g©eway
)) {

86 
Êags
 |
RTF_GATEWAY
;

89  
Êags
;

90 
	}
}

92 
exp‹t_rouã_fun˘i⁄
 
	gﬁ§_addrouã_fun˘i⁄
;

93 
exp‹t_rouã_fun˘i⁄
 
	gﬁ§_addrouã6_fun˘i⁄
;

94 
exp‹t_rouã_fun˘i⁄
 
	gﬁ§_dñrouã_fun˘i⁄
;

95 
exp‹t_rouã_fun˘i⁄
 
	gﬁ§_dñrouã6_fun˘i⁄
;

98 
	$ﬁ§_öô_exp‹t_rouã
()

102 
	`li°_hód_öô
(&
chg_kî√l_li°
);

104 
ﬁ§_addrouã_fun˘i⁄
 = 
ﬁ§_io˘l_add_rouã
;

105 
ﬁ§_addrouã6_fun˘i⁄
 = 
ﬁ§_io˘l_add_rouã6
;

106 
ﬁ§_dñrouã_fun˘i⁄
 = 
ﬁ§_io˘l_dñ_rouã
;

107 
ﬁ§_dñrouã6_fun˘i⁄
 = 
ﬁ§_io˘l_dñ_rouã6
;

108 
	}
}

119 
	$ﬁ§_dñëe_Æl_kî√l_rouãs
()

121 
	`OLSR_PRINTF
(1, "DeletingállÑoutes...\n");

123 
	`ﬁ§_bump_routögåì_vîsi⁄
();

124 
	`ﬁ§_upd©e_rib_rouãs
();

125 
	`ﬁ§_upd©e_kî√l_rouãs
();

126 
	}
}

132 
	$ﬁ§_íqueue_π
(
li°_node
 *
hód_node
, 
π_íåy
 *
π
)

134 c⁄° 
π_√xth›
 *
nh
;

137 i‡(
	`li°_node_⁄_li°
(&
π
->
π_ch™ge_node
)) {

145 
nh
 = 
	`ﬁ§_gë_nh
(
π
);

147 i‡(
	`ùequÆ
(&
π
->
π_d°
.
¥efix
, &
nh
->
g©eway
)) {

148 
	`li°_add_a·î
(
hód_node
, &
π
->
π_ch™ge_node
);

150 
	`li°_add_bef‹e
(
hód_node
, &
π
->
π_ch™ge_node
);

152 
	}
}

160 
	$ﬁ§_dñëe_kî√l_rouã
(
π_íåy
 *
π
)

162 i‡(
π
->
π_mëric
.
h›s
 > 1) {

164 i‡(
	`ù_is_lökloˇl
(&
π
->
π_d°
.
¥efix
)) {

170 i‡(!
ﬁ§_˙f
->
ho°_emul
) {

171 
öt16_t
 
îr‹
 = 
ﬁ§_˙f
->
ù_vîsi⁄
 =
AF_INET
 ? 
	`ﬁ§_dñrouã_fun˘i⁄
(
π
Ë: 
	`ﬁ§_dñrouã6_fun˘i⁄
(rt);

173 i‡(
îr‹
 != 0) {

174 c⁄° *c⁄° 
îr_msg
 = 
	`°ªº‹
(
î∫o
);

175 c⁄° *c⁄° 
rouã°r
 = 
	`ﬁ§_π_to_°rög
(
π
);

176 
	`OLSR_PRINTF
(1, "KERN: ERROR dñëög %s: %s\n", 
rouã°r
, 
îr_msg
);

178 
	`ﬁ§_sy¶og
(
OLSR_LOG_ERR
, "Dñëêrouã %s: %s", 
rouã°r
, 
îr_msg
);

181 #ifde‡
LINUX_NETLINK_ROUTING


183 i‡(
ﬁ§_˙f
->
u£_niô
) {

184 
	`ﬁ§_niô_h™dÀ_rouã
(
π
, 
Ál£
);

189 
	}
}

197 
	$ﬁ§_add_kî√l_rouã
(
π_íåy
 *
π
)

199 i‡(
π
->
π_be°
->
πp_mëric
.
h›s
 > 1) {

201 i‡(
	`ù_is_lökloˇl
(&
π
->
π_be°
->
πp_d°
.
¥efix
)) {

206 i‡(!
ﬁ§_˙f
->
ho°_emul
) {

207 
öt16_t
 
îr‹
 = (
ﬁ§_˙f
->
ù_vîsi⁄
 =
AF_INET
Ë? 
	`ﬁ§_addrouã_fun˘i⁄
(
π
Ë: 
	`ﬁ§_addrouã6_fun˘i⁄
(rt);

209 i‡(
îr‹
 != 0) {

210 c⁄° *c⁄° 
îr_msg
 = 
	`°ªº‹
(
î∫o
);

211 c⁄° *c⁄° 
rouã°r
 = 
	`ﬁ§_πp_to_°rög
(
π
->
π_be°
);

212 
	`OLSR_PRINTF
(1, "KERN: ERRORáddög %s: %s\n", 
rouã°r
, 
îr_msg
);

214 
	`ﬁ§_sy¶og
(
OLSR_LOG_ERR
, "AddÑouã %s: %s", 
rouã°r
, 
îr_msg
);

219 
π
->
π_√xth›
 =Ñt->
π_be°
->
πp_√xth›
;

220 
π
->
π_mëric
 =Ñt->
π_be°
->
πp_mëric
;

222 #ifde‡
LINUX_NETLINK_ROUTING


224 i‡(
ﬁ§_˙f
->
u£_niô
) {

225 
	`ﬁ§_niô_h™dÀ_rouã
(
π
, 
åue
);

230 
	}
}

240 
	$ﬁ§_chg_kî√l_rouãs
(
li°_node
 *
hód_node
)

242 
π_íåy
 *
π
;

244 i‡(
	`li°_is_em±y
(
hód_node
)) {

252 !
	`li°_is_em±y
(
hód_node
)) {

253 
π
 = 
	`ch™gñi°2π
(
hód_node
->
√xt
);

255 #ifde‡
LINUX_NETLINK_ROUTING


263 i‡(((
ﬁ§_˙f
->
ù_vîsi⁄
 !
AF_INET
 ) || (ﬁ§_˙f->
fib_mëric
 !
FIBM_FLAT
)

264 || (
ﬁ§_addrouã_fun˘i⁄
 !
ﬁ§_io˘l_add_rouã
Ë|| (
ﬁ§_addrouã6_fun˘i⁄
 !
ﬁ§_io˘l_add_rouã6
)

265 || (
ﬁ§_dñrouã_fun˘i⁄
 !
ﬁ§_io˘l_dñ_rouã
Ë|| (
ﬁ§_dñrouã6_fun˘i⁄
 !
ﬁ§_io˘l_dñ_rouã6
))

266 && (
π
->
π_√xth›
.
iif_ödex
 > -1)) {

267 
	`ﬁ§_dñëe_kî√l_rouã
(
π
);

271 i‡(
π
->
π_√xth›
.
iif_ödex
 > -1Ë
	`ﬁ§_dñëe_kî√l_rouã
(rt);

274 
	`ﬁ§_add_kî√l_rouã
(
π
);

276 
	`li°_ªmove
(&
π
->
π_ch™ge_node
);

278 
	}
}

287 
	$ﬁ§_dñëe_outd©ed_rouãs
(
π_íåy
 *
π
)

289 
π_∑th
 *
πp
;

290 
avl_node
 *
πp_åì_node
, *
√xt_πp_åì_node
;

292 
πp_åì_node
 = 
	`avl_wÆk_fú°
(&
π
->
π_∑th_åì
);Ñç_åì_nodê!
NULL
;Ñç_åì_nodê
√xt_πp_åì_node
) {

296 
√xt_πp_åì_node
 = 
	`avl_wÆk_√xt
(
πp_åì_node
);

298 
πp
 = 
	`πp_åì2πp
(
πp_åì_node
);

304 i‡(
routögåì_vîsi⁄
 !
πp
->
πp_vîsi⁄
) {

306 
	`avl_dñëe
(&
π
->
π_∑th_åì
, 
πp_åì_node
);

307 
πp
->
πp_π
 = 
NULL
;

309 i‡(
π
->
π_be°
 =
πp
) {

310 
π
->
π_be°
 = 
NULL
;

314 
	}
}

323 
	$ﬁ§_upd©e_rib_rouãs
()

325 
π_íåy
 *
π
;

327 
	`OLSR_PRINTF
(3, "Updating kernelÑoutes...\n");

331 
	`OLSR_FOR_ALL_RT_ENTRIES
(
π
) {

334 
	`ﬁ§_dñëe_outd©ed_rouãs
(
π
);

336 i‡(!
π
->
π_∑th_åì
.
cou¡
) {

340 i‡(
	`ﬁ§_dñëe_kî√l_rouã
(
π
) == 0) {

342 
	`avl_dñëe
(&
routögåì
, &
π
->
π_åì_node
);

343 
	`ﬁ§_cookõ_‰ì
(
π_mem_cookõ
, 
π
);

350 
	`ﬁ§_π_be°
(
π
);

353 i‡(
	`ﬁ§_nh_ch™ge
(&
π
->
π_be°
->
πp_√xth›
, &π->
π_√xth›
)

354 || (
FIBM_CORRECT
 =
ﬁ§_˙f
->
fib_mëric
 && 
	`ﬁ§_h›cou¡_ch™ge
(&
π
->
π_be°
->
πp_mëric
, &π->
π_mëric
))) {

357 
	`ﬁ§_íqueue_π
(&
chg_kî√l_li°
, 
π
);

360 
	`OLSR_FOR_ALL_RT_ENTRIES_END
(
π
);

361 
	}
}

364 
	$ﬁ§_dñëe_öãrÁ˚_rouãs
(
if_ödex
) {

365 
π_íåy
 *
π
;

366 
boﬁ
 
åiggîUpd©e
 = 
Ál£
;

368 
	`OLSR_FOR_ALL_RT_ENTRIES
(
π
) {

369 
boﬁ
 
mightTriggî
 = 
Ál£
;

370 
π_∑th
 *
πp
;

371 
avl_node
 *
πp_åì_node
, *
√xt_πp_åì_node
;

374 
πp_åì_node
 = 
	`avl_wÆk_fú°
(&
π
->
π_∑th_åì
);Ñç_åì_nodê!
NULL
;Ñç_åì_nodê
√xt_πp_åì_node
) {

378 
√xt_πp_åì_node
 = 
	`avl_wÆk_√xt
(
πp_åì_node
);

380 
πp
 = 
	`πp_åì2πp
(
πp_åì_node
);

383 i‡(
πp
->
πp_√xth›
.
iif_ödex
 =
if_ödex
) {

385 
	`avl_dñëe
(&
π
->
π_∑th_åì
, 
πp_åì_node
);

386 
πp
->
πp_π
 = 
NULL
;

388 i‡(
π
->
π_be°
 =
πp
) {

389 
π
->
π_be°
 = 
NULL
;

390 
mightTriggî
 = 
åue
;

395 i‡(
mightTriggî
) {

396 i‡(!
π
->
π_∑th_åì
.
cou¡
) {

398 
	`avl_dñëe
(&
routögåì
, 
π_åì_node
);

402 
åiggîUpd©e
 = 
åue
;

404 } 
	`OLSR_FOR_ALL_RT_ENTRIES_END
(
π
)

407 i‡(
åiggîUpd©e
) {

408 
	`ﬁ§_upd©e_rib_rouãs
();

409 
	`ﬁ§_upd©e_kî√l_rouãs
();

411 
	}
}

417 
	$ﬁ§_upd©e_kî√l_rouãs
()

420 
	`ﬁ§_chg_kî√l_rouãs
(&
chg_kî√l_li°
);

422 #i‡
DEBUG


423 
	`ﬁ§_¥öt_routög_èbÀ
(&
routögåì
);

425 
	}
}

428 
	$ﬁ§_f‹˚_kî√Ãouãs_ª‰esh
() {

429 
π_íåy
 *
π
;

432 
	`OLSR_FOR_ALL_RT_ENTRIES
(
π
) {

433 
	`ﬁ§_íqueue_π
(&
chg_kî√l_li°
, 
π
);

434 } 
	`OLSR_FOR_ALL_RT_ENTRIES_END
(
π
)

437 
	`ﬁ§_chg_kî√l_rouãs
(&
chg_kî√l_li°
);

438 
	}
}

	@src/process_routes.h

42 #i‚de‡
_OLSR_PROCESS_RT


43 
	#_OLSR_PROCESS_RT


	)

45 
	~"routög_èbÀ.h
"

46 
	~<sys/io˘l.h
>

48 (*
	texp‹t_rouã_fun˘i⁄
Ë(c⁄° 
	tπ_íåy
 *);

50 
exp‹t_rouã_fun˘i⁄
 
ﬁ§_addrouã_fun˘i⁄
;

51 
exp‹t_rouã_fun˘i⁄
 
ﬁ§_addrouã6_fun˘i⁄
;

52 
exp‹t_rouã_fun˘i⁄
 
ﬁ§_dñrouã_fun˘i⁄
;

53 
exp‹t_rouã_fun˘i⁄
 
ﬁ§_dñrouã6_fun˘i⁄
;

55 
	`ﬁ§_öô_exp‹t_rouã
();

56 
	`ﬁ§_upd©e_rib_rouãs
();

57 
	`ﬁ§_upd©e_kî√l_rouãs
();

58 
	`ﬁ§_dñëe_Æl_kî√l_rouãs
();

59 
uöt8_t
 
	`ﬁ§_π_Êags
(c⁄° 
π_íåy
 *, 
add
);

60 
	`ﬁ§_dñëe_öãrÁ˚_rouãs
(
if_ödex
);

61 
	`ﬁ§_f‹˚_kî√Ãouãs_ª‰esh
();

	@src/rebuild_packet.c

42 
	~"ªbuûd_∑ckë.h
"

43 
	~"ùˇlc.h
"

44 
	~"defs.h
"

45 
	~"ﬁ§.h
"

46 
	~"mid_£t.h
"

47 
	~"m™tisß.h
"

48 
	~"√t_ﬁ§.h
"

60 
	$mid_chge°ru˘
(
mid_mesßge
 *
mmsg
, c⁄° 
ﬁ§_mesßge
 *
m
)

62 
i
;

63 
mid_Æüs
 *
Æüs
, *
Æüs_tmp
;

64 
no_Æü£s
;

67 i‡((!
m
Ë|| (m->
v4
.
ﬁ§_msgty≥
 !
MID_MESSAGE
))

70 
Æüs
 = 
NULL
;

72 i‡(
ﬁ§_˙f
->
ù_vîsi⁄
 =
AF_INET
) {

74 c⁄° 
midaddr
 *
maddr
 = 
m
->
v4
.
mesßge
.
mid
.
mid_addr
;

80 
no_Æü£s
 = ((
	`¡ohs
(
m
->
v4
.
ﬁ§_msgsize
) - 12) / 4);

83 
mmsg
->
mid_‹igaddr
.
v4
.
s_addr
 = 
m
->v4.
‹igö©‹
;

84 
mmsg
->
addr
.
v4
.
s_addr
 = 
m
->v4.
‹igö©‹
;

86 
mmsg
->
mid_£qno
 = 
	`¡ohs
(
m
->
v4
.
£qno
);

87 
mmsg
->
mid_addr
 = 
NULL
;

90 
mmsg
->
vtime
 = 
	`me_to_ª…ime
(
m
->
v4
.
ﬁ§_vtime
);

94 
i
 = 0; i < 
no_Æü£s
; i++) {

95 
Æüs
 = 
	`ﬁ§_mÆloc
((
mid_Æüs
), "MID chgestruct");

97 
Æüs
->
Æüs_addr
.
v4
.
s_addr
 = 
maddr
->
addr
;

98 
Æüs
->
√xt
 = 
mmsg
->
mid_addr
;

99 
mmsg
->
mid_addr
 = 
Æüs
;

100 
maddr
++;

103 i‡(
ﬁ§_˙f
->
debug_Àvñ
 > 1) {

104 
ùaddr_°r
 
buf
;

105 
	`OLSR_PRINTF
(3, "Alü†li° f‹ %s: ", 
	`ﬁ§_ù_to_°rög
(&
buf
, &
mmsg
->
mid_‹igaddr
));

106 
	`OLSR_PRINTF
(3, "%s", 
	`ﬁ§_ù_to_°rög
(&
buf
, &
mmsg
->
addr
));

107 
Æüs_tmp
 = 
mmsg
->
mid_addr
;

108 
Æüs_tmp
) {

109 
	`OLSR_PRINTF
(3, " - %s", 
	`ﬁ§_ù_to_°rög
(&
buf
, &
Æüs_tmp
->
Æüs_addr
));

110 
Æüs_tmp
 =álüs_tmp->
√xt
;

112 
	`OLSR_PRINTF
(3, "\n");

116 c⁄° 
midaddr6
 *
maddr6
 = 
m
->
v6
.
mesßge
.
mid
.
mid_addr
;

122 
no_Æü£s
 = ((
	`¡ohs
(
m
->
v6
.
ﬁ§_msgsize
) - 12) / 16);

125 
mmsg
->
mid_‹igaddr
.
v6
 = 
m
->v6.
‹igö©‹
;

126 
mmsg
->
addr
.
v6
 = 
m
->v6.
‹igö©‹
;

128 
mmsg
->
mid_£qno
 = 
	`¡ohs
(
m
->
v6
.
£qno
);

129 
mmsg
->
mid_addr
 = 
NULL
;

132 
mmsg
->
vtime
 = 
	`me_to_ª…ime
(
m
->
v6
.
ﬁ§_vtime
);

136 
i
 = 0; i < 
no_Æü£s
; i++) {

137 
Æüs
 = 
	`ﬁ§_mÆloc
((
mid_Æüs
), "MID chgestruct 2");

140 
Æüs
->
Æüs_addr
.
v6
 = 
maddr6
->
addr
;

141 
Æüs
->
√xt
 = 
mmsg
->
mid_addr
;

142 
mmsg
->
mid_addr
 = 
Æüs
;

144 
maddr6
++;

147 i‡(
ﬁ§_˙f
->
debug_Àvñ
 > 1) {

148 
ùaddr_°r
 
buf
;

149 
	`OLSR_PRINTF
(3, "Alü†li° f‹ %s", 
	`ù6_to_°rög
(&
buf
, &
mmsg
->
mid_‹igaddr
.
v6
));

150 
	`OLSR_PRINTF
(3, "%s", 
	`ù6_to_°rög
(&
buf
, &
mmsg
->
addr
.
v6
));

152 
Æüs_tmp
 = 
mmsg
->
mid_addr
;

153 
Æüs_tmp
) {

154 
	`OLSR_PRINTF
(3, " - %s", 
	`ù6_to_°rög
(&
buf
, &
Æüs_tmp
->
Æüs_addr
.
v6
));

155 
Æüs_tmp
 =álüs_tmp->
√xt
;

157 
	`OLSR_PRINTF
(3, "\n");

161 
	}
}

	@src/rebuild_packet.h

42 #i‚de‡
_OLSR_REBUILD


43 
	#_OLSR_REBUILD


	)

45 
	~"ﬁ§_¥Ÿocﬁ.h
"

46 
	~"∑ckë.h
"

48 
mid_chge°ru˘
(
mid_mesßge
 *, c⁄° 
ﬁ§_mesßge
 *);

50 
hñlo_chge°ru˘
(
hñlo_mesßge
 *, c⁄° 
ﬁ§_mesßge
 *);

	@src/routing_table.c

43 
	~"routög_èbÀ.h
"

44 
	~"ùˇlc.h
"

45 
	~"defs.h
"

46 
	~"two_h›_√ighb‹_èbÀ.h
"

47 
	~"tc_£t.h
"

48 
	~"mid_£t.h
"

49 
	~"√ighb‹_èbÀ.h
"

50 
	~"ﬁ§.h
"

51 
	~"lök_£t.h
"

52 
	~"comm⁄/avl.h
"

53 
	~"ﬁ§_•f.h
"

54 
	~"√t_ﬁ§.h
"

56 
	~<as£π.h
>

59 
ﬁ§_cookõ_öfo
 *
	gπ_mem_cookõ
 = 
NULL
;

60 
ﬁ§_cookõ_öfo
 *
	gπp_mem_cookõ
 = 
NULL
;

69 
π_∑th
 *
	gcuºít_öëgw
 = 
NULL
;

72 
avl_åì
 
	groutögåì
;

78 
	groutögåì_vîsi⁄
;

89 
	$ﬁ§_bump_routögåì_vîsi⁄
()

91  
routögåì_vîsi⁄
++;

92 
	}
}

105 
	$avl_comp_ùv4_¥efix
(c⁄° *
¥efix1
, c⁄° *
¥efix2
)

107 c⁄° 
ﬁ§_ù_¥efix
 *
pfx1
 = 
¥efix1
;

108 c⁄° 
ﬁ§_ù_¥efix
 *
pfx2
 = 
¥efix2
;

109 c⁄° 
uöt32_t
 
addr1
 = 
	`¡ohl
(
pfx1
->
¥efix
.
v4
.
s_addr
);

110 c⁄° 
uöt32_t
 
addr2
 = 
	`¡ohl
(
pfx2
->
¥efix
.
v4
.
s_addr
);

113 i‡(
addr1
 < 
addr2
) {

116 i‡(
addr1
 > 
addr2
) {

121 i‡(
pfx1
->
¥efix_Àn
 < 
pfx2
->prefix_len) {

124 i‡(
pfx1
->
¥efix_Àn
 > 
pfx2
->prefix_len) {

129 
	}
}

142 
	$avl_comp_ùv6_¥efix
(c⁄° *
¥efix1
, c⁄° *
¥efix2
)

144 
ªs
;

145 c⁄° 
ﬁ§_ù_¥efix
 *
pfx1
 = 
¥efix1
;

146 c⁄° 
ﬁ§_ù_¥efix
 *
pfx2
 = 
¥efix2
;

149 
ªs
 = 
	`memcmp
(&
pfx1
->
¥efix
.
v6
, &
pfx2
->prefix.v6, 16);

150 i‡(
ªs
 != 0) {

151  
ªs
;

154 i‡(
pfx1
->
¥efix_Àn
 < 
pfx2
->prefix_len) {

157 i‡(
pfx1
->
¥efix_Àn
 > 
pfx2
->prefix_len) {

162 
	}
}

168 
	$ﬁ§_öô_routög_èbÀ
()

170 
	`OLSR_PRINTF
(5, "RIB: initÑoutingÅree\n");

173 
	`avl_öô
(&
routögåì
, 
avl_comp_¥efix_deÁu…
);

174 
routögåì_vîsi⁄
 = 0;

179 
π_mem_cookõ
 = 
	`ﬁ§_Æloc_cookõ
("π_íåy", 
OLSR_COOKIE_TYPE_MEMORY
);

180 
	`ﬁ§_cookõ_£t_mem‹y_size
(
π_mem_cookõ
, (
π_íåy
));

182 
πp_mem_cookõ
 = 
	`ﬁ§_Æloc_cookõ
("π_∑th", 
OLSR_COOKIE_TYPE_MEMORY
);

183 
	`ﬁ§_cookõ_£t_mem‹y_size
(
πp_mem_cookõ
, (
π_∑th
));

184 
	}
}

194 
π_íåy
 *

195 
	$ﬁ§_lookup_routög_èbÀ
(c⁄° 
ﬁ§_ù_addr
 *
d°
)

197 
avl_node
 *
π_åì_node
;

198 
ﬁ§_ù_¥efix
 
¥efix
;

200 
¥efix
.¥efix = *
d°
;

201 
¥efix
.
¥efix_Àn
 = 
ﬁ§_˙f
->
max∂í
;

203 
π_åì_node
 = 
	`avl_föd
(&
routögåì
, &
¥efix
);

205  
π_åì_node
 ? 
	`π_åì2π
‘t_åì_nodeË: 
NULL
;

206 
	}
}

212 
	$ﬁ§_upd©e_π_∑th
(
π_∑th
 *
πp
, 
tc_íåy
 *
tc
, 
lök_íåy
 *
lök
)

215 
πp
->
πp_vîsi⁄
 = 
routögåì_vîsi⁄
;

218 
πp
->
πp_√xth›
.
g©eway
 = 
lök
->
√ighb‹_iÁ˚_addr
;

221 
πp
->
πp_√xth›
.
iif_ödex
 = 
lök
->
öãr
->
if_ödex
;

224 
πp
->
πp_mëric
.
h›s
 = 
tc
->hops;

225 
πp
->
πp_mëric
.
co°
 = 
tc
->
∑th_co°
;

226 
	}
}

231 
π_íåy
 *

232 
	$ﬁ§_Æloc_π_íåy
(
ﬁ§_ù_¥efix
 *
¥efix
)

234 
π_íåy
 *
π
 = 
	`ﬁ§_cookõ_mÆloc
(
π_mem_cookõ
);

235 i‡(!
π
) {

236  
NULL
;

239 
	`mem£t
(
π
, 0, (*rt));

242 
π
->
π_√xth›
.
iif_ödex
 = -1;

245 
π
->
π_d°
 = *
¥efix
;

247 
π
->
π_åì_node
.
key
 = &π->
π_d°
;

248 
	`avl_ö£π
(&
routögåì
, &
π
->
π_åì_node
, 
AVL_DUP_NO
);

251 
	`avl_öô
(&
π
->
π_∑th_åì
, 
avl_comp_deÁu…
);

253  
π
;

254 
	}
}

259 
π_∑th
 *

260 
	$ﬁ§_Æloc_π_∑th
(
tc_íåy
 *
tc
, 
ﬁ§_ù_¥efix
 *
¥efix
, 
uöt8_t
 
‹igö
)

262 
π_∑th
 *
πp
 = 
	`ﬁ§_cookõ_mÆloc
(
πp_mem_cookõ
);

264 i‡(!
πp
) {

265  
NULL
;

268 
	`mem£t
(
πp
, 0, (*rtp));

270 
πp
->
πp_d°
 = *
¥efix
;

273 
πp
->
πp_¥efix_åì_node
.
key
 = &πp->
πp_d°
;

276 
	`avl_ö£π
(&
tc
->
¥efix_åì
, &
πp
->
πp_¥efix_åì_node
, 
AVL_DUP_NO
);

277 
	`ﬁ§_lock_tc_íåy
(
tc
);

280 
πp
->
πp_tc
 = 
tc
;

283 
πp
->
πp_‹igö
 = 
‹igö
;

285  
πp
;

286 
	}
}

293 
	$ﬁ§_ö£π_π_∑th
(
π_∑th
 *
πp
, 
tc_íåy
 *
tc
, 
lök_íåy
 *
lök
)

295 
π_íåy
 *
π
;

296 
avl_node
 *
node
;

301 i‡(
tc
->
∑th_co°
 =
ROUTE_COST_BROKEN
) {

308 i‡(
πp
->
πp_d°
.
¥efix_Àn
 > 
ﬁ§_˙f
->
max∂í
) {

315 
node
 = 
	`avl_föd
(&
routögåì
, &
πp
->
πp_d°
);

317 i‡(!
node
) {

320 
π
 = 
	`ﬁ§_Æloc_π_íåy
(&
πp
->
πp_d°
);

322 i‡(!
π
) {

327 
π
 = 
	`π_åì2π
(
node
);

331 
πp
->
πp_‹igö©‹
 = 
tc
->
addr
;

334 
πp
->
πp_åì_node
.
key
 = &πp->
πp_‹igö©‹
;

337 
	`avl_ö£π
(&
π
->
π_∑th_åì
, &
πp
->
πp_åì_node
, 
AVL_DUP_NO
);

340 
πp
->
πp_π
 = 
π
;

343 
	`ﬁ§_upd©e_π_∑th
(
πp
, 
tc
, 
lök
);

344 
	}
}

350 
	$ﬁ§_dñëe_π_∑th
(
π_∑th
 *
πp
)

354 i‡(
πp
->
πp_π
) {

355 
	`avl_dñëe
(&
πp
->
πp_π
->
π_∑th_åì
, &πp->
πp_åì_node
);

356 
πp
->
πp_π
 = 
NULL
;

360 i‡(
πp
->
πp_tc
) {

361 
	`avl_dñëe
(&
πp
->
πp_tc
->
¥efix_åì
, &πp->
πp_¥efix_åì_node
);

362 
	`ﬁ§_u∆ock_tc_íåy
(
πp
->
πp_tc
);

363 
πp
->
πp_tc
 = 
NULL
;

367 i‡(
cuºít_öëgw
 =
πp
) {

368 
cuºít_öëgw
 = 
NULL
;

371 
	`ﬁ§_cookõ_‰ì
(
πp_mem_cookõ
, 
πp
);

372 
	}
}

377 
boﬁ


378 
	$ﬁ§_nh_ch™ge
(c⁄° 
π_√xth›
 *
nh1
, c⁄° π_√xth› *
nh2
)

380 i‡(!
	`ùequÆ
(&
nh1
->
g©eway
, &
nh2
->g©ewayË|| (nh1->
iif_ödex
 !=Çh2->iif_index)) {

381  
åue
;

383  
Ál£
;

384 
	}
}

389 
boﬁ


390 
	$ﬁ§_h›cou¡_ch™ge
(c⁄° 
π_mëric
 * 
më1
, c⁄° π_mëri¯* 
më2
)

392  (
më1
->
h›s
 !
më2
->hops);

393 
	}
}

402 
uöt8_t


403 
	$ﬁ§_fib_mëric
(c⁄° 
π_mëric
 * 
më
)

405 i‡(
FIBM_CORRECT
 =
ﬁ§_˙f
->
fib_mëric
) {

406  
më
->
h›s
;

408  
RT_METRIC_DEFAULT
;

409 
	}
}

415 c⁄° 
π_√xth›
 *

416 
	$ﬁ§_gë_nh
(c⁄° 
π_íåy
 *
π
)

419 i‡(
π
->
π_be°
) {

422  &
π
->
π_be°
->
πp_√xth›
;

426  &
π
->
π_√xth›
;

427 
	}
}

435 
boﬁ


436 
	$ﬁ§_cmp_πp
(c⁄° 
π_∑th
 *
πp1
, c⁄° π_∑th *
πp2
, c⁄° π_∑th *
öëgw
)

438 
ﬁ§_lökco°
 
ëx1
 = 
πp1
->
πp_mëric
.
co°
;

439 
ﬁ§_lökco°
 
ëx2
 = 
πp2
->
πp_mëric
.
co°
;

440 i‡(
öëgw
 =
πp1
)

441 
ëx1
 *
ﬁ§_˙f
->
lq_«t_thªsh
;

442 i‡(
öëgw
 =
πp2
)

443 
ëx2
 *
ﬁ§_˙f
->
lq_«t_thªsh
;

446 i‡(
ëx1
 < 
ëx2
) {

447  
åue
;

449 i‡(
ëx1
 > 
ëx2
) {

450  
Ál£
;

454 i‡(
πp1
->
πp_mëric
.
h›s
 < 
πp2
->rtp_metric.hops) {

455  
åue
;

457 i‡(
πp1
->
πp_mëric
.
h›s
 > 
πp2
->rtp_metric.hops) {

458  
Ál£
;

462 i‡(
	`memcmp
(&
πp1
->
πp_‹igö©‹
, &
πp2
->πp_‹igö©‹, 
ﬁ§_˙f
->
ùsize
) < 0) {

463  
åue
;

466  
Ál£
;

467 
	}
}

475 
boﬁ


476 
	$ﬁ§_cmp_π
(c⁄° 
π_íåy
 * 
π1
, c⁄° π_íåy * 
π2
)

478  
	`ﬁ§_cmp_πp
(
π1
->
π_be°
, 
π2
->π_be°, 
NULL
);

479 
	}
}

486 
	$ﬁ§_π_be°
(
π_íåy
 *
π
)

489 
avl_node
 *
node
 = 
	`avl_wÆk_fú°
(&
π
->
π_∑th_åì
);

491 
	`as£π
(
node
 != 0);

493 
π
->
π_be°
 = 
	`πp_åì2πp
(
node
);

496 (
node
 = 
	`avl_wÆk_√xt
(node))) {

497 
π_∑th
 *
πp
 = 
	`πp_åì2πp
(
node
);

499 i‡(
	`ﬁ§_cmp_πp
(
πp
, 
π
->
π_be°
, 
cuºít_öëgw
)) {

500 
π
->
π_be°
 = 
πp
;

504 i‡(0 =
π
->
π_d°
.
¥efix_Àn
) {

505 
cuºít_öëgw
 = 
π
->
π_be°
;

507 
	}
}

523 
π_∑th
 *

524 
	$ﬁ§_ö£π_routög_èbÀ
(
ﬁ§_ù_addr
 *
d°
, 
∂í
, ﬁ§_ù_add∏*
‹igö©‹
, 
‹igö
)

526 #ifde‡
DEBUG


527 
ùaddr_°r
 
d°buf
, 
‹igbuf
;

529 
tc_íåy
 *
tc
;

530 
π_∑th
 *
πp
;

531 
avl_node
 *
node
;

532 
ﬁ§_ù_¥efix
 
¥efix
;

537 i‡(
∂í
 > 
ﬁ§_˙f
->
max∂í
) {

538  
NULL
;

546 
tc
 = 
	`ﬁ§_loˇã_tc_íåy
(
‹igö©‹
);

551 
¥efix
.¥efix = *
d°
;

552 
¥efix
.
¥efix_Àn
 = 
∂í
;

554 
node
 = 
	`avl_föd
(&
tc
->
¥efix_åì
, &
¥efix
);

556 i‡(!
node
) {

559 
πp
 = 
	`ﬁ§_Æloc_π_∑th
(
tc
, &
¥efix
, 
‹igö
);

561 i‡(!
πp
) {

562  
NULL
;

564 #ifde‡
DEBUG


565 
	`OLSR_PRINTF
(1, "RIB:áddÖªfix %s/%u from %s\n", 
	`ﬁ§_ù_to_°rög
(&
d°buf
, 
d°
), 
∂í
,

566 
	`ﬁ§_ù_to_°rög
(&
‹igbuf
, 
‹igö©‹
));

570 
ch™ges_h«
 = 
åue
;

573 
πp
 = 
	`πp_¥efix_åì2πp
(
node
);

576  
πp
;

577 
	}
}

583 
	$ﬁ§_dñëe_routög_èbÀ
(
ﬁ§_ù_addr
 *
d°
, 
∂í
, ﬁ§_ù_add∏*
‹igö©‹
)

585 #ifde‡
DEBUG


586 
ùaddr_°r
 
d°buf
, 
‹igbuf
;

589 
tc_íåy
 *
tc
;

590 
π_∑th
 *
πp
;

591 
avl_node
 *
node
;

592 
ﬁ§_ù_¥efix
 
¥efix
;

597 i‡(
∂í
 > 
ﬁ§_˙f
->
max∂í
) {

601 
tc
 = 
	`ﬁ§_lookup_tc_íåy
(
‹igö©‹
);

602 i‡(!
tc
) {

609 
¥efix
.¥efix = *
d°
;

610 
¥efix
.
¥efix_Àn
 = 
∂í
;

612 
node
 = 
	`avl_föd
(&
tc
->
¥efix_åì
, &
¥efix
);

614 i‡(
node
) {

615 
πp
 = 
	`πp_¥efix_åì2πp
(
node
);

616 
	`ﬁ§_dñëe_π_∑th
(
πp
);

618 #ifde‡
DEBUG


619 
	`OLSR_PRINTF
(1, "RIB: dñÖªfix %s/%u from %s\n", 
	`ﬁ§_ù_to_°rög
(&
d°buf
, 
d°
), 
∂í
,

620 
	`ﬁ§_ù_to_°rög
(&
‹igbuf
, 
‹igö©‹
));

624 
ch™ges_h«
 = 
åue
;

626 
	}
}

632 
	$ﬁ§_π_to_°rög
(c⁄° 
π_íåy
 *
π
)

634 
buff
[128];

635 
ùaddr_°r
 
¥efix°r
, 
gw°r
;

637 
	`¢¥ötf
(
buff
, (buff), "%s/%u vü %s", 
	`ﬁ§_ù_to_°rög
(&
¥efix°r
, &
π
->
π_d°
.
¥efix
),Ñt->π_d°.
¥efix_Àn
,

638 
	`ﬁ§_ù_to_°rög
(&
gw°r
, &
π
->
π_√xth›
.
g©eway
));

640  
buff
;

641 
	}
}

647 
	$ﬁ§_πp_to_°rög
(c⁄° 
π_∑th
 *
πp
)

649 
buff
[128];

650 
ùaddr_°r
 
¥efix°r
, 
‹ig°r
, 
gw°r
;

651 
π_íåy
 *
π
 = 
πp
->
πp_π
;

652 
lqãxtbuf„r
 
lqbuf„r
;

654 
	`¢¥ötf
(
buff
, (buff), "%s/%u from %s via %s, " "cost %s, metric %u, v %u",

655 
	`ﬁ§_ù_to_°rög
(&
¥efix°r
, &
π
->
π_d°
.
¥efix
),Ñt->π_d°.
¥efix_Àn
, ol§_ù_to_°rög(&
‹ig°r
,

656 &
πp
->
πp_‹igö©‹
),

657 
	`ﬁ§_ù_to_°rög
(&
gw°r
, &
πp
->
πp_√xth›
.
g©eway
), 
	`gë_lökco°_ãxt
‘ç->
πp_mëric
.
co°
, 
åue
, &
lqbuf„r
),

658 
πp
->
πp_mëric
.
h›s
,Ñç->
πp_vîsi⁄
);

660  
buff
;

661 
	}
}

668 
	$ﬁ§_¥öt_routög_èbÀ
(
avl_åì
 *
åì
)

670 #i‚de‡
NODEBUG


672 
avl_node
 *
π_åì_node
;

673 
lqãxtbuf„r
 
lqbuf„r
;

675 
	`OLSR_PRINTF
(6, "ROUTING TABLE\n");

677 
π_åì_node
 = 
	`avl_wÆk_fú°
(
åì
);Ñt_åì_nodê!
NULL
;Ñt_åì_nodê
	`avl_wÆk_√xt
(rt_tree_node)) {

678 
avl_node
 *
πp_åì_node
;

679 
ùaddr_°r
 
¥efix°r
, 
‹ig°r
, 
gw°r
;

680 
π_íåy
 *
π
 = 
	`π_åì2π
(
π_åì_node
);

683 
	`OLSR_PRINTF
(6, "%s/%u, vü %s, be°-‹igö©‹ %s\n", 
	`ﬁ§_ù_to_°rög
(&
¥efix°r
, &
π
->
π_d°
.
¥efix
),Ñt->π_d°.
¥efix_Àn
,

684 
	`ﬁ§_ù_to_°rög
(&
‹ig°r
, &
π
->
π_√xth›
.
g©eway
), ol§_ù_to_°rög(&
gw°r
, &π->
π_be°
->
πp_‹igö©‹
));

687 
πp_åì_node
 = 
	`avl_wÆk_fú°
(&
π
->
π_∑th_åì
);Ñç_åì_nodê!
NULL
;Ñç_åì_nodê
	`avl_wÆk_√xt
(rtp_tree_node)) {

688 
π_∑th
 *
πp
 = 
	`πp_åì2πp
(
πp_åì_node
);

689 
	`OLSR_PRINTF
(6, "\t‰om %s, co° %s, mëri¯%u, vü %s, %s, v %u\n", 
	`ﬁ§_ù_to_°rög
(&
‹ig°r
, &
πp
->
πp_‹igö©‹
),

690 
	`gë_lökco°_ãxt
(
πp
->
πp_mëric
.
co°
, 
åue
, &
lqbuf„r
),Ñç->πp_mëric.
h›s
, 
	`ﬁ§_ù_to_°rög
(&
gw°r
,

691 &
πp
->

692 
πp_√xth›
.

693 
g©eway
),

694 
	`if_ifwôhödex_«me
(
π
->
π_√xth›
.
iif_ödex
), 
πp
->
πp_vîsi⁄
);

698 
åì
 = 
NULL
;

699 
	}
}

	@src/routing_table.h

43 #i‚de‡
_OLSR_ROUTING_TABLE


44 
	#_OLSR_ROUTING_TABLE


	)

46 
	~<sys/ty≥s.h
>

47 
	~<sys/time.h
>

48 
	~<sys/sockë.h
>

49 
	~<√t/if.h
>

50 
	~<√t/rouã.h
>

51 
	~"h«_£t.h
"

52 
	~"lök_£t.h
"

53 
	~"ﬁ§_cookõ.h
"

54 
	~"comm⁄/avl.h
"

55 
	~"comm⁄/li°.h
"

57 
	#NETMASK_HOST
 0xffffffff

	)

58 
	#NETMASK_DEFAULT
 0x0

	)

64 
	#RT_METRIC_DEFAULT
 2

	)

67 
	sπ_mëric
 {

68 
ﬁ§_lökco°
 
	mco°
;

69 
uöt32_t
 
	mh›s
;

73 
	sπ_√xth›
 {

74 
ﬁ§_ù_addr
 
	mg©eway
;

75 
	miif_ödex
;

85 
	sπ_íåy
 {

86 
ﬁ§_ù_¥efix
 
	mπ_d°
;

87 
avl_node
 
	mπ_åì_node
;

88 
π_∑th
 *
	mπ_be°
;

89 
π_√xth›
 
	mπ_√xth›
;

90 
π_mëric
 
	mπ_mëric
;

91 
avl_åì
 
	mπ_∑th_åì
;

92 
li°_node
 
	mπ_ch™ge_node
;

95 
AVLNODE2STRUCT
(
π_åì2π
, 
π_íåy
, 
π_åì_node
);

96 
LISTNODE2STRUCT
(
ch™gñi°2π
, 
π_íåy
, 
π_ch™ge_node
);

106 
	sπ_∑th
 {

107 
π_íåy
 *
	mπp_π
;

108 
tc_íåy
 *
	mπp_tc
;

109 
π_√xth›
 
	mπp_√xth›
;

110 
π_mëric
 
	mπp_mëric
;

111 
avl_node
 
	mπp_åì_node
;

112 
ﬁ§_ù_addr
 
	mπp_‹igö©‹
;

113 
avl_node
 
	mπp_¥efix_åì_node
;

114 
ﬁ§_ù_¥efix
 
	mπp_d°
;

115 
uöt32_t
 
	mπp_vîsi⁄
;

116 
uöt8_t
 
	mπp_‹igö
;

119 
AVLNODE2STRUCT
(
πp_åì2πp
, 
π_∑th
, 
πp_åì_node
);

120 
AVLNODE2STRUCT
(
πp_¥efix_åì2πp
, 
π_∑th
, 
πp_¥efix_åì_node
);

129 
	eﬁ§_π_‹igö
 {

130 
	mOLSR_RT_ORIGIN_MIN
,

131 
	mOLSR_RT_ORIGIN_INT
,

132 
	mOLSR_RT_ORIGIN_MID
,

133 
	mOLSR_RT_ORIGIN_HNA
,

134 
	mOLSR_RT_ORIGIN_MAX


147 
	#OLSR_FOR_ALL_RT_ENTRIES
(
π
) \

149 
avl_node
 *
π_åì_node
, *
√xt_π_åì_node
; \

150 
π_åì_node
 = 
	`avl_wÆk_fú°
(&
routögåì
); \

151 
π_åì_node
;Ñt_åì_nodê
√xt_π_åì_node
) { \

152 
√xt_π_åì_node
 = 
	`avl_wÆk_√xt
(
π_åì_node
); \

153 
π
 = 
	`π_åì2π
(
π_åì_node
);

	)

154 
	#OLSR_FOR_ALL_RT_ENTRIES_END
(
π
Ë}}

	)

168 
	#OLSR_FOR_ALL_HNA_RT_ENTRIES
(
π
) \

170 
avl_node
 *
π_åì_node
, *
√xt_π_åì_node
; \

171 
π_åì_node
 = 
	`avl_wÆk_fú°
(&
routögåì
); \

172 
π_åì_node
;Ñt_åì_nodê
√xt_π_åì_node
) { \

173 
√xt_π_åì_node
 = 
	`avl_wÆk_√xt
(
π_åì_node
); \

174 
π
 = 
	`π_åì2π
(
π_åì_node
); \

175 i‡(
π
->
π_be°
->
πp_‹igö
 !
OLSR_RT_ORIGIN_HNA
) \

176 ;

	)

177 
	#OLSR_FOR_ALL_HNA_RT_ENTRIES_END
(
π
Ë}}

	)

182 
	uﬁ§_kî√l_rouã
 {

184 
sockaddr
 
	mπ_d°
;

185 
sockaddr
 
	mπ_g©eway
;

186 
uöt32_t
 
	mmëric
;

187 } 
	mv4
;

190 
ö6_addr
 
	mπmsg_d°
;

191 
ö6_addr
 
	mπmsg_g©eway
;

192 
uöt32_t
 
	mπmsg_mëric
;

193 } 
	mv6
;

196 
avl_åì
 
routögåì
;

197 
routögåì_vîsi⁄
;

198 
ﬁ§_cookõ_öfo
 *
π_mem_cookõ
;

200 
ﬁ§_öô_routög_èbÀ
();

202 
ﬁ§_bump_routögåì_vîsi⁄
();

204 
avl_comp_ùv4_¥efix
(const *, const *);

205 
avl_comp_ùv6_¥efix
(const *, const *);

207 
ﬁ§_π_be°
(
π_íåy
 *);

208 
boﬁ
 
ﬁ§_nh_ch™ge
(c⁄° 
π_√xth›
 *, const rt_nexthop *);

209 
boﬁ
 
ﬁ§_h›cou¡_ch™ge
(c⁄° 
π_mëric
 *, const rt_metric *);

210 
boﬁ
 
ﬁ§_cmp_π
(c⁄° 
π_íåy
 *, const rt_entry *);

211 
uöt8_t
 
ﬁ§_fib_mëric
(c⁄° 
π_mëric
 *);

213 *
ﬁ§_π_to_°rög
(c⁄° 
π_íåy
 *);

214 *
ﬁ§_πp_to_°rög
(c⁄° 
π_∑th
 *);

215 
ﬁ§_¥öt_routög_èbÀ
(
avl_åì
 *);

217 c⁄° 
π_√xth›
 *
ﬁ§_gë_nh
(c⁄° 
π_íåy
 *);

220 
π_∑th
 *
ﬁ§_ö£π_routög_èbÀ
(
ﬁ§_ù_addr
 *, , olsr_ip_addr *, );

221 
ﬁ§_dñëe_routög_èbÀ
(
ﬁ§_ù_addr
 *, , olsr_ip_addr *);

222 
ﬁ§_ö£π_π_∑th
(
π_∑th
 *, 
tc_íåy
 *, 
lök_íåy
 *);

223 
ﬁ§_upd©e_π_∑th
(
π_∑th
 *, 
tc_íåy
 *, 
lök_íåy
 *);

224 
ﬁ§_dñëe_π_∑th
(
π_∑th
 *);

226 
π_íåy
 *
ﬁ§_lookup_routög_èbÀ
(c⁄° 
ﬁ§_ù_addr
 *);

	@src/scheduler.c

42 
	~"scheduÀr.h
"

43 
	~"log.h
"

44 
	~"lök_£t.h
"

45 
	~"ﬁ§.h
"

46 
	~"ﬁ§_cookõ.h
"

47 
	~"√t_os.h
"

48 
	~"m¥_£À˘‹_£t.h
"

50 
	~<sys/times.h
>

52 
	~<uni°d.h
>

53 
	~<as£π.h
>

55 #ifde‡
WIN32


56 
	#˛o£
(
x
Ë
	`˛o£sockë
(x)

	)

60 
uöt32_t
 
	gnow_times
;

61 
timevÆ
 
	gfú°_tv
;

62 
timevÆ
 
	gœ°_tv
;

65 
li°_node
 
	gtimî_whìl
[
TIMER_WHEEL_SLOTS
];

66 
uöt32_t
 
	gtimî_œ°_run
;

69 
ﬁ§_cookõ_öfo
 *
	gtimî_mem_cookõ
 = 
NULL
;

72 
li°_node
 
	gsockë_hód
 = { &
sockë_hód
, &socket_head };

75 
wÆk_timîs
(
uöt32_t
 *);

76 
pﬁl_sockës
();

77 
uöt32_t
 
ˇlc_jôãr
(
ªl_time
, 
uöt8_t
 
jôãr_p˘
, 
øndom_vÆ
);

86 
uöt32_t


87 
	$ﬁ§_times
()

89 
timevÆ
 
tv
;

90 
uöt32_t
 
t
;

92 i‡(
	`gëtimeofday
(&
tv
, 
NULL
) != 0) {

93 
	`ﬁ§_exô
("OS clock isÇot working, haveÅo shut down OLSR", 1);

97 i‡(
tv
.
tv_£c
 < 
œ°_tv
.tv_£¯|| (tv.tv_£¯=œ°_tv.tv_£¯&&Åv.
tv_u£c
 <Üast_tv.tv_usec)

98 || 
tv
.
tv_£c
 - 
œ°_tv
.tv_sec > 60) {

99 
	`OLSR_PRINTF
(1, "Time jump (%d.%06dÅo %d.%06d)\n",

100 (
öt32_t
Ë(
œ°_tv
.
tv_£c
), (öt32_tË÷a°_tv.
tv_u£c
), (öt32_tË(
tv
.tv_sec), (int32_t) (tv.tv_usec));

102 
t
 = (
œ°_tv
.
tv_£c
 - 
fú°_tv
.tv_£cË* 1000 + (œ°_tv.
tv_u£c
 - first_tv.tv_usec) / 1000;

103 
t
++;

105 
fú°_tv
 = 
tv
;

106 
fú°_tv
.
tv_£c
 -(
t
 / 1000);

107 
fú°_tv
.
tv_u£c
 -((
t
 % 1000) * 1000);

109 i‡(
fú°_tv
.
tv_u£c
 < 0) {

110 
fú°_tv
.
tv_£c
--;

111 
fú°_tv
.
tv_u£c
 += 1000000;

113 
œ°_tv
 = 
tv
;

114  
t
;

116 
œ°_tv
 = 
tv
;

117  (
tv
.
tv_£c
 - 
fú°_tv
.tv_£cË* 1000 + (tv.
tv_u£c
 - first_tv.tv_usec) / 1000;

118 
	}
}

123 
uöt32_t


124 
	$ﬁ§_gëTime°amp
(
uöt32_t
 
s
)

126  
now_times
 + 
s
;

127 
	}
}

133 
öt32_t


134 
	$ﬁ§_gëTimeDue
(
uöt32_t
 
s
)

136 
uöt32_t
 
diff
;

137 i‡(
s
 > 
now_times
) {

138 
diff
 = 
s
 - 
now_times
;

141 i‡(
diff
 > (1u << 31)) {

142  -(
öt32_t
Ë(0xfffffff‡- 
diff
);

144  (
öt32_t
Ë(
diff
);

147 
diff
 = 
now_times
 - 
s
;

149 i‡(
diff
 > (1u << 31)) {

150  (
öt32_t
Ë(0xfffffff‡- 
diff
);

152  -(
öt32_t
Ë(
diff
);

153 
	}
}

155 
boﬁ


156 
	$ﬁ§_isTimedOut
(
uöt32_t
 
s
)

158 i‡(
s
 > 
now_times
) {

159  
s
 - 
now_times
 > (1u << 31);

162  
now_times
 - 
s
 <= (1u << 31);

163 
	}
}

174 
	$add_ﬁ§_sockë
(
fd
, 
sockë_h™dÀr_func
 
pf_¥
, sockë_h™dÀr_fun¯
pf_imm
, *
d©a
, 
Êags
)

176 
ﬁ§_sockë_íåy
 *
√w_íåy
;

178 i‡(
fd
 < 0 || (
pf_¥
 =
NULL
 && 
pf_imm
 == NULL)) {

179 
	`OLSR_PRINTF
(1, "Bogus socketÉntry -ÇotÑegistering...");

182 
	`OLSR_PRINTF
(3, "Addög OLSR sockëÉ¡ry %d\n", 
fd
);

184 
√w_íåy
 = 
	`ﬁ§_mÆloc
((*new_entry), "SocketÉntry");

186 
√w_íåy
->
fd
 = fd;

187 
√w_íåy
->
¥o˚ss_immedüã
 = 
pf_imm
;

188 
√w_íåy
->
¥o˚ss_pﬁÃ©e
 = 
pf_¥
;

189 
√w_íåy
->
d©a
 = data;

190 
√w_íåy
->
Êags
 = flags;

193 
	`li°_node_öô
(&
√w_íåy
->
sockë_node
);

194 
	`li°_add_bef‹e
(&
sockë_hód
, &
√w_íåy
->
sockë_node
);

195 
	}
}

206 
	$ªmove_ﬁ§_sockë
(
fd
, 
sockë_h™dÀr_func
 
pf_¥
, sockë_h™dÀr_fun¯
pf_imm
)

208 
ﬁ§_sockë_íåy
 *
íåy
;

210 i‡(
fd
 < 0 || (
pf_¥
 =
NULL
 && 
pf_imm
 == NULL)) {

211 
	`OLSR_PRINTF
(1, "Bogus socketÉntry -ÇotÖrocessing...");

214 
	`OLSR_PRINTF
(3, "Removög OLSR sockëÉ¡ry %d\n", 
fd
);

216 
	`OLSR_FOR_ALL_SOCKETS
(
íåy
) {

217 i‡(
íåy
->
fd
 =fd &&É¡ry->
¥o˚ss_immedüã
 =
pf_imm
 &&É¡ry->
¥o˚ss_pﬁÃ©e
 =
pf_¥
) {

219 
íåy
->
¥o˚ss_immedüã
 = 
NULL
;

220 
íåy
->
¥o˚ss_pﬁÃ©e
 = 
NULL
;

221 
íåy
->
Êags
 = 0;

225 
	`OLSR_FOR_ALL_SOCKETS_END
(
íåy
);

227 
	}
}

230 
	$íabÀ_ﬁ§_sockë
(
fd
, 
sockë_h™dÀr_func
 
pf_¥
, sockë_h™dÀr_fun¯
pf_imm
, 
Êags
)

232 
ﬁ§_sockë_íåy
 *
íåy
;

234 
	`OLSR_FOR_ALL_SOCKETS
(
íåy
) {

235 i‡(
íåy
->
fd
 =fd &&É¡ry->
¥o˚ss_immedüã
 =
pf_imm
 &&É¡ry->
¥o˚ss_pﬁÃ©e
 =
pf_¥
) {

236 
íåy
->
Êags
 |= flags;

239 
	`OLSR_FOR_ALL_SOCKETS_END
(
íåy
);

240 
	}
}

243 
	$dißbÀ_ﬁ§_sockë
(
fd
, 
sockë_h™dÀr_func
 
pf_¥
, sockë_h™dÀr_fun¯
pf_imm
, 
Êags
)

245 
ﬁ§_sockë_íåy
 *
íåy
;

247 
	`OLSR_FOR_ALL_SOCKETS
(
íåy
) {

248 i‡(
íåy
->
fd
 =fd &&É¡ry->
¥o˚ss_immedüã
 =
pf_imm
 &&É¡ry->
¥o˚ss_pﬁÃ©e
 =
pf_¥
) {

249 
íåy
->
Êags
 &= ~flags;

252 
	`OLSR_FOR_ALL_SOCKETS_END
(
íåy
);

253 
	}
}

259 
	$ﬁ§_Êush_sockës
()

261 
ﬁ§_sockë_íåy
 *
íåy
;

263 
	`OLSR_FOR_ALL_SOCKETS
(
íåy
) {

264 
	`˛o£
(
íåy
->
fd
);

265 
	`li°_ªmove
(&
íåy
->
sockë_node
);

266 
	`‰ì
(
íåy
);

267 } 
	`OLSR_FOR_ALL_SOCKETS_END
(
íåy
);

268 
	}
}

271 
	$pﬁl_sockës
()

273 
n
;

274 
ﬁ§_sockë_íåy
 *
íåy
;

275 
fd_£t
 
ibôs
, 
obôs
;

276 
timevÆ
 
tvp
 = { 0, 0 };

277 
hfd
 = 0, 
fd£ts
 = 0;

282 i‡(
	`li°_is_em±y
(&
sockë_hód
)) {

286 
	`FD_ZERO
(&
ibôs
);

287 
	`FD_ZERO
(&
obôs
);

290 
	`OLSR_FOR_ALL_SOCKETS
(
íåy
) {

291 i‡(
íåy
->
¥o˚ss_pﬁÃ©e
 =
NULL
) {

294 i‡((
íåy
->
Êags
 & 
SP_PR_READ
) != 0) {

295 
fd£ts
 |
SP_PR_READ
;

296 
	`FD_SET
(()
íåy
->
fd
, &
ibôs
);

298 i‡((
íåy
->
Êags
 & 
SP_PR_WRITE
) != 0) {

299 
fd£ts
 |
SP_PR_WRITE
;

300 
	`FD_SET
(()
íåy
->
fd
, &
obôs
);

302 i‡((
íåy
->
Êags
 & (
SP_PR_READ
 | 
SP_PR_WRITE
)Ë!0 &&É¡ry->
fd
 >
hfd
) {

303 
hfd
 = 
íåy
->
fd
 + 1;

306 
	`OLSR_FOR_ALL_SOCKETS_END
(
íåy
);

310 
n
 = 
	`ﬁ§_£À˘
(
hfd
, 
fd£ts
 & 
SP_PR_READ
 ? &
ibôs
 : 
NULL
, fd£t†& 
SP_PR_WRITE
 ? &
obôs
 : NULL, NULL, &
tvp
);

311 } 
n
 =-1 && 
î∫o
 =
EINTR
);

313 i‡(
n
 == 0) {

316 i‡(
n
 == -1) {

317 
	`OLSR_PRINTF
(1, "£À˘Éº‹: %s", 
	`°ªº‹
(
î∫o
));

322 
now_times
 = 
	`ﬁ§_times
();

323 
	`OLSR_FOR_ALL_SOCKETS
(
íåy
) {

324 
Êags
;

325 i‡(
íåy
->
¥o˚ss_pﬁÃ©e
 =
NULL
) {

328 
Êags
 = 0;

329 i‡(
	`FD_ISSET
(
íåy
->
fd
, &
ibôs
)) {

330 
Êags
 |
SP_PR_READ
;

332 i‡(
	`FD_ISSET
(
íåy
->
fd
, &
obôs
)) {

333 
Êags
 |
SP_PR_WRITE
;

335 i‡(
Êags
 != 0) {

336 
íåy
->
	`¥o˚ss_pﬁÃ©e
”¡ry->
fd
,É¡ry->
d©a
, 
Êags
);

339 
	`OLSR_FOR_ALL_SOCKETS_END
(
íåy
);

340 
	}
}

343 
	$h™dÀ_fds
(
uöt32_t
 
√xt_öãrvÆ
)

345 
ﬁ§_sockë_íåy
 *
íåy
;

346 
timevÆ
 
tvp
;

347 
öt32_t
 
ªmaöög
;

350 
now_times
 = 
	`ﬁ§_times
();

352 
ªmaöög
 = 
	`TIME_DUE
(
√xt_öãrvÆ
);

353 i‡(
ªmaöög
 <= 0) {

355 i‡(
	`li°_is_em±y
(&
sockë_hód
)) {

359 
tvp
.
tv_£c
 = 0;

360 
tvp
.
tv_u£c
 = 0;

363 
tvp
.
tv_£c
 = 
ªmaöög
 / 
MSEC_PER_SEC
;

364 
tvp
.
tv_u£c
 = (
ªmaöög
 % 
MSEC_PER_SEC
Ë* 
USEC_PER_MSEC
;

369 
fd_£t
 
ibôs
, 
obôs
;

370 
n
, 
hfd
 = 0, 
fd£ts
 = 0;

371 
	`FD_ZERO
(&
ibôs
);

372 
	`FD_ZERO
(&
obôs
);

375 
	`OLSR_FOR_ALL_SOCKETS
(
íåy
) {

376 i‡(
íåy
->
¥o˚ss_immedüã
 =
NULL
) {

379 i‡((
íåy
->
Êags
 & 
SP_IMM_READ
) != 0) {

380 
fd£ts
 |
SP_IMM_READ
;

381 
	`FD_SET
(()
íåy
->
fd
, &
ibôs
);

383 i‡((
íåy
->
Êags
 & 
SP_IMM_WRITE
) != 0) {

384 
fd£ts
 |
SP_IMM_WRITE
;

385 
	`FD_SET
(()
íåy
->
fd
, &
obôs
);

387 i‡((
íåy
->
Êags
 & (
SP_IMM_READ
 | 
SP_IMM_WRITE
)Ë!0 &&É¡ry->
fd
 >
hfd
) {

388 
hfd
 = 
íåy
->
fd
 + 1;

391 
	`OLSR_FOR_ALL_SOCKETS_END
(
íåy
);

393 i‡(
hfd
 =0 && ()
ªmaöög
 <= 0) {

399 
n
 = 
	`ﬁ§_£À˘
(
hfd
, 
fd£ts
 & 
SP_IMM_READ
 ? &
ibôs
 : 
NULL
, fd£t†& 
SP_IMM_WRITE
 ? &
obôs
 : NULL, NULL, &
tvp
);

400 } 
n
 =-1 && 
î∫o
 =
EINTR
);

402 i‡(
n
 == 0) {

405 i‡(
n
 == -1) {

406 
	`OLSR_PRINTF
(1, "£À˘Éº‹: %s", 
	`°ªº‹
(
î∫o
));

411 
now_times
 = 
	`ﬁ§_times
();

412 
	`OLSR_FOR_ALL_SOCKETS
(
íåy
) {

413 
Êags
;

414 i‡(
íåy
->
¥o˚ss_immedüã
 =
NULL
) {

417 
Êags
 = 0;

418 i‡(
	`FD_ISSET
(
íåy
->
fd
, &
ibôs
)) {

419 
Êags
 |
SP_IMM_READ
;

421 i‡(
	`FD_ISSET
(
íåy
->
fd
, &
obôs
)) {

422 
Êags
 |
SP_IMM_WRITE
;

424 i‡(
Êags
 != 0) {

425 
íåy
->
	`¥o˚ss_immedüã
”¡ry->
fd
,É¡ry->
d©a
, 
Êags
);

428 
	`OLSR_FOR_ALL_SOCKETS_END
(
íåy
);

431 
ªmaöög
 = 
	`TIME_DUE
(
√xt_öãrvÆ
);

432 i‡(
ªmaöög
 <= 0) {

437 
tvp
.
tv_£c
 = 
ªmaöög
 / 
MSEC_PER_SEC
;

438 
tvp
.
tv_u£c
 = (
ªmaöög
 % 
MSEC_PER_SEC
Ë* 
USEC_PER_MSEC
;

441 
	`OLSR_FOR_ALL_SOCKETS
(
íåy
) {

442 i‡(
íåy
->
¥o˚ss_immedüã
 =
NULL
 &&É¡ry->
¥o˚ss_pﬁÃ©e
 == NULL) {

444 
	`li°_ªmove
(&
íåy
->
sockë_node
);

445 
	`‰ì
(
íåy
);

447 } 
	`OLSR_FOR_ALL_SOCKETS_END
(
íåy
);

448 
	}
}

459 
__©åibuã__
 ((
n‹ëu∫
))

460 
	$ﬁ§_scheduÀr
()

462 
	`OLSR_PRINTF
(1, "ScheduÀ∏°¨ãd -ÖﬁlögÉvîy %‡ms\n", 
ﬁ§_˙f
->
pﬁÃ©e
);

465 
åue
) {

466 
uöt32_t
 
√xt_öãrvÆ
;

472 
now_times
 = 
	`ﬁ§_times
();

473 
√xt_öãrvÆ
 = 
	`GET_TIMESTAMP
(
ﬁ§_˙f
->
pﬁÃ©e
 * 1000);

476 
	`pﬁl_sockës
();

479 
	`wÆk_timîs
(&
timî_œ°_run
);

482 
	`ﬁ§_¥o˚ss_ch™ges
();

485 i‡(
lök_ch™ges
) {

486 
	`ö¸ó£_loˇl_™¢
();

487 
	`OLSR_PRINTF
(3, "ANSN UPDATED %d\n\n", 
	`gë_loˇl_™¢
());

488 
lök_ch™ges
 = 
Ál£
;

492 
	`h™dÀ_fds
(
√xt_öãrvÆ
);

494 #ifde‡
WIN32


495 i‡(
ﬁ§_wö32_íd_ªque°
) {

496 
ﬁ§_wö32_íd_Êag
 = 
åue
;

500 
	}
}

510 
uöt32_t


511 
	$ˇlc_jôãr
(
ªl_time
, 
uöt8_t
 
jôãr_p˘
, 
øndom_vÆ
)

513 
jôãr_time
;

519 i‡(
jôãr_p˘
 =0 || jôãr_p˘ > 99 || 
ªl_time
 > (1 << 24)) {

520  
	`GET_TIMESTAMP
(
ªl_time
);

526 
jôãr_time
 = (
jôãr_p˘
 * 
ªl_time
) / 100;

527 
jôãr_time
 = 
øndom_vÆ
 / (1 + 
RAND_MAX
 / (jitter_time + 1));

529 
	`OLSR_PRINTF
(3, "TIMER: jôã∏%u%%Ññ_timê%um†tÿ%ums\n", 
jôãr_p˘
, 
ªl_time
,Ññ_timê- 
jôãr_time
);

531  
	`GET_TIMESTAMP
(
ªl_time
 - 
jôãr_time
);

532 
	}
}

538 
	$ﬁ§_öô_timîs
()

540 
idx
;

542 
	`OLSR_PRINTF
(3, "Initializing scheduler.\n");

545 i‡(
	`gëtimeofday
(&
fú°_tv
, 
NULL
)) {

546 
	`ﬁ§_exô
("OS clock isÇot working, haveÅo shut down OLSR", 1);

548 
œ°_tv
 = 
fú°_tv
;

549 
now_times
 = 
	`ﬁ§_times
();

551 
idx
 = 0; idx < 
TIMER_WHEEL_SLOTS
; idx++) {

552 
	`li°_hód_öô
(&
timî_whìl
[
idx
]);

558 
timî_œ°_run
 = 
now_times
;

561 
timî_mem_cookõ
 = 
	`ﬁ§_Æloc_cookõ
("timî_íåy", 
OLSR_COOKIE_TYPE_MEMORY
);

562 
	`ﬁ§_cookõ_£t_mem‹y_size
(
timî_mem_cookõ
, (
timî_íåy
));

563 
	}
}

570 
	$wÆk_timîs
(
uöt32_t
 * 
œ°_run
)

572 
tŸÆ_timîs_wÆked
 = 0, 
tŸÆ_timîs_fúed
 = 0;

573 
whìl_¶Ÿ_wÆks
 = 0;

580 (*
œ°_run
 <
now_times
Ë&& (
whìl_¶Ÿ_wÆks
 < 
TIMER_WHEEL_SLOTS
)) {

581 
li°_node
 
tmp_hód_node
;

583 
timîs_wÆked
 = 0, 
timîs_fúed
 = 0;

586 
li°_node
 *c⁄° 
timî_hód_node
 = &
timî_whìl
[*
œ°_run
 & 
TIMER_WHEEL_MASK
];

591 
	`li°_hód_öô
(&
tmp_hód_node
);

592 !
	`li°_is_em±y
(
timî_hód_node
)) {

594 
li°_node
 *c⁄° 
timî_node
 = 
timî_hód_node
->
√xt
;

595 
timî_íåy
 *c⁄° 
timî
 = 
	`li°2timî
(
timî_node
);

602 
	`li°_ªmove
(
timî_node
);

603 
	`li°_add_a·î
(&
tmp_hód_node
, 
timî_node
);

604 
timîs_wÆked
++;

607 i‡(
	`TIMED_OUT
(
timî
->
timî_˛ock
)) {

609 
	`OLSR_PRINTF
(7, "TIMER: fire %sÅimer %p, ctx %p, "

611 
timî
->
timî_cookõ
->
ci_«me
,

612 
timî
,Åimî->
timî_cb_c⁄ãxt
, ()*
œ°_run
, 
	`ﬁ§_wÆl˛ock_°rög
());

615 
timî
->
	`timî_cb
—imî->
timî_cb_c⁄ãxt
);

618 i‡(
timî
->
timî_Êags
 & 
OLSR_TIMER_RUNNING
) {

623 i‡(
timî
->
timî_≥riod
) {

625 
timî
->
timî_øndom
 = 
	`øndom
();

626 
	`ﬁ§_ch™ge_timî
(
timî
,Åimî->
timî_≥riod
,Åimî->
timî_jôãr_p˘
, 
OLSR_TIMER_PERIODIC
);

629 
	`ﬁ§_°›_timî
(
timî
);

633 
timîs_fúed
++;

640 
	`li°_mîge
(
timî_hód_node
, &
tmp_hód_node
);

643 
tŸÆ_timîs_wÆked
 +
timîs_wÆked
;

644 
tŸÆ_timîs_fúed
 +
timîs_fúed
;

647 (*
œ°_run
)++;

648 
whìl_¶Ÿ_wÆks
++;

651 
	`OLSR_PRINTF
(7, "TIMER:Örocessed %4u/%d clockwheel slots, "

653 
whìl_¶Ÿ_wÆks
, 
TIMER_WHEEL_SLOTS
, 
tŸÆ_timîs_wÆked
, 
timî_mem_cookõ
->
ci_ußge
, 
tŸÆ_timîs_fúed
);

659 *
œ°_run
 = 
now_times
;

660 
	}
}

666 
	$ﬁ§_Êush_timîs
()

668 
li°_node
 *
timî_hód_node
;

669 
whìl_¶Ÿ
 = 0;

671 
whìl_¶Ÿ
 = 0; whìl_¶Ÿ < 
TIMER_WHEEL_SLOTS
; wheel_slot++) {

672 
timî_hód_node
 = &
timî_whìl
[
whìl_¶Ÿ
 & 
TIMER_WHEEL_MASK
];

675 !
	`li°_is_em±y
(
timî_hód_node
)) {

676 
	`ﬁ§_°›_timî
(
	`li°2timî
(
timî_hód_node
->
√xt
));

679 
	}
}

688 
	$ﬁ§_gë_timez⁄e
()

690 
	#OLSR_TIMEZONE_UNINITIALIZED
 -1

	)

691 
time_diff
 = 
OLSR_TIMEZONE_UNINITIALIZED
;

692 i‡(
time_diff
 =
OLSR_TIMEZONE_UNINITIALIZED
) {

693 
dú
;

694 c⁄° 
time_t
 
t
 = 
	`time
(
NULL
);

695 c⁄° 
tm
 
gmt
 = *
	`gmtime
(&
t
);

696 c⁄° 
tm
 *
loc
 = 
	`loˇ…ime
(&
t
);

698 
time_diff
 = (
loc
->
tm_hour
 - 
gmt
.tm_hourË* 60 * 60 + (loc->
tm_mö
 - gmt.tm_min) * 60;

705 
dú
 = 
loc
->
tm_yór
 - 
gmt
.tm_year;

706 i‡(!
dú
) {

707 
dú
 = 
loc
->
tm_yday
 - 
gmt
.tm_yday;

710 
time_diff
 +
dú
 * 24 * 60 * 60;

712  
time_diff
;

713 
	}
}

723 
	$ﬁ§_wÆl˛ock_°rög
()

725 
buf
[("00:00:00.000000")];

726 
timevÆ
 
now
;

727 
£c
, 
u£c
;

729 
	`gëtimeofday
(&
now
, 
NULL
);

731 
£c
 = ()
now
.
tv_£c
 + 
	`ﬁ§_gë_timez⁄e
();

732 
u£c
 = ()
now
.
tv_u£c
;

734 
	`¢¥ötf
(
buf
, (buf), "%02d:%02d:%02d.%06d", (
£c
 % 86400Ë/ 3600, (£¯% 3600Ë/ 60, se¯% 60, 
u£c
);

736  
buf
;

737 
	}
}

748 
	$ﬁ§_˛ock_°rög
(
uöt32_t
 
˛k
)

750 
buf
[("00:00:00.000")];

753 
m£c
 = 
˛k
 % 1000;

754 
£c
 = 
˛k
 / 1000;

756 
	`¢¥ötf
(
buf
, (buf), "%02u:%02u:%02u.%03u", 
£c
 / 3600, (£¯% 3600Ë/ 60, (£¯% 60), (
m£c
 % 
MSEC_PER_SEC
));

758  
buf
;

759 
	}
}

770 
timî_íåy
 *

771 
	$ﬁ§_°¨t_timî
(
ªl_time
,

772 
uöt8_t
 
jôãr_p˘
, 
boﬁ
 
≥riodiˇl
, 
timî_cb_func
 
cb_func
, *
c⁄ãxt
, 
ﬁ§_cookõ_öfo
 *
ci
)

774 
timî_íåy
 *
timî
;

776 i‡(
ci
 =
NULL
) {

777 
ci
 = 
def_timî_ci
;

779 
	`as£π
(
cb_func
);

781 
timî
 = 
	`ﬁ§_cookõ_mÆloc
(
timî_mem_cookõ
);

786 i‡(!
timî
->
timî_øndom
) {

787 
timî
->
timî_øndom
 = 
	`øndom
();

791 
timî
->
timî_˛ock
 = 
	`ˇlc_jôãr
(
ªl_time
, 
jôãr_p˘
,Åimî->
timî_øndom
);

792 
timî
->
timî_cb
 = 
cb_func
;

793 
timî
->
timî_cb_c⁄ãxt
 = 
c⁄ãxt
;

794 
timî
->
timî_jôãr_p˘
 = 
jôãr_p˘
;

795 
timî
->
timî_Êags
 = 
OLSR_TIMER_RUNNING
;

798 
timî
->
timî_cookõ
 = 
ci
;

799 
	`ﬁ§_cookõ_ußge_ö¸
(
ci
->
ci_id
);

802 
timî
->
timî_≥riod
 = 
≥riodiˇl
 ? 
ªl_time
 : 0;

807 
	`li°_add_bef‹e
(&
timî_whìl
[
timî
->
timî_˛ock
 & 
TIMER_WHEEL_MASK
], &timî->
timî_li°
);

809 
	`OLSR_PRINTF
(7, "TIMER: start %sÅimer %p firing in %s, ctx %p\n",

810 
ci
->
ci_«me
, 
timî
, 
	`ﬁ§_˛ock_°rög
—imî->
timî_˛ock
), 
c⁄ãxt
);

812  
timî
;

813 
	}
}

822 
	$ﬁ§_°›_timî
(
timî_íåy
 *
timî
)

825 i‡(!
timî
) {

829 
	`as£π
(
timî
->
timî_cookõ
);

831 
	`OLSR_PRINTF
(7, "TIMER: stop %sÅimer %p, ctx %p\n",

832 
timî
->
timî_cookõ
->
ci_«me
,Åimî,Åimî->
timî_cb_c⁄ãxt
);

838 
	`li°_ªmove
(&
timî
->
timî_li°
);

839 
timî
->
timî_Êags
 &~
OLSR_TIMER_RUNNING
;

840 
	`ﬁ§_cookõ_ußge_de¸
(
timî
->
timî_cookõ
->
ci_id
);

842 
	`ﬁ§_cookõ_‰ì
(
timî_mem_cookõ
, 
timî
);

843 
	}
}

854 
	$ﬁ§_ch™ge_timî
(
timî_íåy
 *
timî
, 
ªl_time
, 
uöt8_t
 
jôãr_p˘
, 
boﬁ
 
≥riodiˇl
)

857 i‡(!
timî
) {

861 
	`as£π
(
timî
->
timî_cookõ
);

864 
timî
->
timî_≥riod
 = 
≥riodiˇl
 ? 
ªl_time
 : 0;

866 
timî
->
timî_˛ock
 = 
	`ˇlc_jôãr
(
ªl_time
, 
jôãr_p˘
,Åimî->
timî_øndom
);

867 
timî
->
timî_jôãr_p˘
 = 
jôãr_p˘
;

873 
	`li°_ªmove
(&
timî
->
timî_li°
);

874 
	`li°_add_bef‹e
(&
timî_whìl
[
timî
->
timî_˛ock
 & 
TIMER_WHEEL_MASK
], &timî->
timî_li°
);

876 
	`OLSR_PRINTF
(7, "TIMER: change %sÅimer %p, firingÅo %s, ctx %p\n",

877 
timî
->
timî_cookõ
->
ci_«me
,Åimî, 
	`ﬁ§_˛ock_°rög
—imî->
timî_˛ock
),Åimî->
timî_cb_c⁄ãxt
);

878 
	}
}

887 
	$ﬁ§_£t_timî
(
timî_íåy
 **
timî_±r
,

888 
ªl_time
,

889 
uöt8_t
 
jôãr_p˘
, 
boﬁ
 
≥riodiˇl
, 
timî_cb_func
 
cb_func
, *
c⁄ãxt
, 
ﬁ§_cookõ_öfo
 *
cookõ
)

891 i‡(
cookõ
) {

892 
cookõ
 = 
def_timî_ci
;

895 i‡(
ªl_time
 == 0) {

897 
	`ﬁ§_°›_timî
(*
timî_±r
);

898 *
timî_±r
 = 
NULL
;

900 i‡((*
timî_±r
Ë=
NULL
) {

902 *
timî_±r
 = 
	`ﬁ§_°¨t_timî
(
ªl_time
, 
jôãr_p˘
, 
≥riodiˇl
, 
cb_func
, 
c⁄ãxt
, 
cookõ
);

905 
	`ﬁ§_ch™ge_timî
(*
timî_±r
, 
ªl_time
, 
jôãr_p˘
, 
≥riodiˇl
);

907 
	}
}

	@src/scheduler.h

43 #i‚de‡
_OLSR_SCHEDULER


44 
	#_OLSR_SCHEDULER


	)

46 
	~"comm⁄/li°.h
"

48 
	~"ﬁ§_ty≥s.h
"

50 
	~<time.h
>

53 
	#MSEC_PER_SEC
 1000

	)

54 
	#USEC_PER_SEC
 1000000

	)

55 
	#NSEC_PER_USEC
 1000

	)

56 
	#USEC_PER_MSEC
 1000

	)

58 
	#TIMER_WHEEL_SLOTS
 1024

	)

59 
	#TIMER_WHEEL_MASK
 (
TIMER_WHEEL_SLOTS
 - 1)

	)

61 (*
	ttimî_cb_func
) (*);

73 
	stimî_íåy
 {

74 
li°_node
 
timî_li°
;

75 
uöt32_t
 
timî_˛ock
;

76 
timî_≥riod
;

77 
ﬁ§_cookõ_öfo
 *
timî_cookõ
;

78 
uöt8_t
 
timî_jôãr_p˘
;

79 
uöt8_t
 
timî_Êags
;

80 
timî_øndom
;

81 
timî_cb_func
 
timî_cb
;

82 *
timî_cb_c⁄ãxt
;

86 
	`LISTNODE2STRUCT
(
li°2timî
, 
timî_íåy
, 
timî_li°
);

88 
	#OLSR_TIMER_ONESHOT
 0

	)

89 
	#OLSR_TIMER_PERIODIC
 1

	)

92 
	#OLSR_TIMER_RUNNING
 ( 1 << 0Ë

	)

95 
	`ﬁ§_öô_timîs
();

96 
	`ﬁ§_Êush_timîs
();

97 
	`ﬁ§_£t_timî
 (
timî_íåy
 **, , 
uöt8_t
, 
boﬁ
, 
timî_cb_func
, *, 
ﬁ§_cookõ_öfo
 *);

98 
timî_íåy
 *
	`ﬁ§_°¨t_timî
 (, 
uöt8_t
, 
boﬁ
, 
timî_cb_func
, *, 
ﬁ§_cookõ_öfo
 *);

99 
	`ﬁ§_ch™ge_timî
(
timî_íåy
 *, , 
uöt8_t
, 
boﬁ
);

100 
	`ﬁ§_°›_timî
 (
timî_íåy
 *);

103 c⁄° *
	`ﬁ§_˛ock_°rög
(
uöt32_t
);

104 c⁄° *
	`ﬁ§_wÆl˛ock_°rög
();

107 
	`ﬁ§_scheduÀr
();

112 
	#GET_TIMESTAMP
(
s1
Ë
	`ﬁ§_gëTime°amp
(s1)

	)

115 
	#TIME_DUE
(
s1
Ë
	`ﬁ§_gëTimeDue
(s1)

	)

118 
	#TIMED_OUT
(
s1
Ë
	`ﬁ§_isTimedOut
(s1)

	)

121 
uöt32_t
 
now_times
;

124 
	#SP_PR_READ
 0x01

	)

125 
	#SP_PR_WRITE
 0x02

	)

127 
	#SP_IMM_READ
 0x04

	)

128 
	#SP_IMM_WRITE
 0x08

	)

131 (*
	tsockë_h™dÀr_func
Ë(
	tfd
, *
	td©a
, 
	tÊags
);

134 
	sﬁ§_sockë_íåy
 {

135 
fd
;

136 
sockë_h™dÀr_func
 
¥o˚ss_immedüã
;

137 
sockë_h™dÀr_func
 
¥o˚ss_pﬁÃ©e
;

138 *
d©a
;

139 
Êags
;

140 
li°_node
 
sockë_node
;

143 
	`LISTNODE2STRUCT
(
li°2sockë
, 
ﬁ§_sockë_íåy
, 
sockë_node
);

146 
	#OLSR_FOR_ALL_SOCKETS
(
sockë
) \

148 
li°_node
 *
_sockë_node
, *
_√xt_sockë_node
; \

149 
_sockë_node
 = 
sockë_hód
.
√xt
; \

150 
_sockë_node
 !&
sockë_hód
; \

151 
_sockë_node
 = 
_√xt_sockë_node
) { \

152 
_√xt_sockë_node
 = 
_sockë_node
->
√xt
; \

153 
sockë
 = 
	`li°2sockë
(
_sockë_node
);

	)

154 
	#OLSR_FOR_ALL_SOCKETS_END
(
sockë
Ë}
	}

	)
}

156 
uöt32_t
 
ﬁ§_gëTime°amp
 (uöt32_à
s
);

157 
öt32_t
 
ﬁ§_gëTimeDue
 (
uöt32_t
 
s
);

158 
boﬁ
 
ﬁ§_isTimedOut
 (
uöt32_t
 
s
);

160 
add_ﬁ§_sockë
 (
fd
, 
sockë_h™dÀr_func
 
pf_¥
, sockë_h™dÀr_fun¯
pf_imm
, *
d©a
, 
Êags
);

161 
ªmove_ﬁ§_sockë
 (
fd
, 
sockë_h™dÀr_func
 
pf_¥
, sockë_h™dÀr_fun¯
pf_imm
);

162 
ﬁ§_Êush_sockës
();

163 
íabÀ_ﬁ§_sockë
 (
fd
, 
sockë_h™dÀr_func
 
pf_¥
, sockë_h™dÀr_fun¯
pf_imm
, 
Êags
);

164 
dißbÀ_ﬁ§_sockë
 (
fd
, 
sockë_h™dÀr_func
 
pf_¥
, sockë_h™dÀr_fun¯
pf_imm
, 
Êags
);

	@src/tc_set.c

43 
	~"tc_£t.h
"

44 
	~"ùˇlc.h
"

45 
	~"mid_£t.h
"

46 
	~"lök_£t.h
"

47 
	~"ﬁ§.h
"

48 
	~"scheduÀr.h
"

49 
	~"ﬁ§_•f.h
"

50 
	~"comm⁄/avl.h
"

51 
	~"lq_∑ckë.h
"

52 
	~"√t_ﬁ§.h
"

53 
	~"lq_∂ugö.h
"

54 
	~"ﬁ§_cookõ.h
"

55 
	~"du∂iˇã_£t.h
"

56 
	~"g©eway.h
"

58 
	~<as£π.h
>

61 
avl_åì
 
	gtc_åì
;

62 
tc_íåy
 *
	gtc_my£lf
;

65 
ﬁ§_cookõ_öfo
 *
	gtc_edge_gc_timî_cookõ
 = 
NULL
;

66 
ﬁ§_cookõ_öfo
 *
	gtc_vÆidôy_timî_cookõ
 = 
NULL
;

67 
ﬁ§_cookõ_öfo
 *
	gtc_edge_mem_cookõ
 = 
NULL
;

68 
ﬁ§_cookõ_öfo
 *
	gtc_mem_cookõ
 = 
NULL
;

83 
	#TC_ANSN_WINDOW
 256

	)

86 
	#TC_SEQNO_WINDOW
 1024

	)

89 
	#TC_ANSN_WINDOW_MULT
 4

	)

92 
	#TC_SEQNO_WINDOW_MULT
 8

	)

94 
boﬁ


95 
	$ﬁ§_£q_öønge_low
(
beg
, 
íd
, 
uöt16_t
 
£q
)

97 i‡(
beg
 < 0) {

98 i‡(
£q
 >(
uöt16_t
Ë
beg
 || seq < 
íd
) {

99  
åue
;

101 } i‡(
íd
 >= 0x10000) {

102 i‡(
£q
 >
beg
 || seq < (
uöt16_t
Ë
íd
) {

103  
åue
;

105 } i‡(
£q
 >
beg
 && seq < 
íd
) {

106  
åue
;

108  
Ál£
;

109 
	}
}

111 
boﬁ


112 
	$ﬁ§_£q_öønge_high
(
beg
, 
íd
, 
uöt16_t
 
£q
)

114 i‡(
beg
 < 0) {

115 i‡(
£q
 > (
uöt16_t
Ë
beg
 || seq <
íd
) {

116  
åue
;

118 } i‡(
íd
 >= 0x10000) {

119 i‡(
£q
 > 
beg
 || seq <(
uöt16_t
Ë
íd
) {

120  
åue
;

122 } i‡(
£q
 > 
beg
 && seq <
íd
) {

123  
åue
;

125  
Ál£
;

126 
	}
}

134 
tc_íåy
 *

135 
	$ﬁ§_add_tc_íåy
(
ﬁ§_ù_addr
 *
adr
)

137 #ifde‡
DEBUG


138 
ùaddr_°r
 
buf
;

140 
tc_íåy
 *
tc
;

145 i‡(
	`ùequÆ
(&
ﬁ§_˙f
->
maö_addr
, &
Æl_zîo
)) {

146  
NULL
;

148 #ifde‡
DEBUG


149 
	`OLSR_PRINTF
(1, "TC:áddÉ¡ry %s\n", 
	`ﬁ§_ù_to_°rög
(&
buf
, 
adr
));

152 
tc
 = 
	`ﬁ§_cookõ_mÆloc
(
tc_mem_cookõ
);

153 i‡(!
tc
) {

154  
NULL
;

158 
tc
->
addr
 = *
adr
;

159 
tc
->
vîãx_node
.
key
 = &tc->
addr
;

164 
	`avl_ö£π
(&
tc_åì
, &
tc
->
vîãx_node
, 
AVL_DUP_NO
);

165 
	`ﬁ§_lock_tc_íåy
(
tc
);

170 
	`avl_öô
(&
tc
->
edge_åì
, 
avl_comp_deÁu…
);

171 
	`avl_öô
(&
tc
->
¥efix_åì
, 
avl_comp_¥efix_deÁu…
);

176 
	`ﬁ§_ö£π_routög_èbÀ
(
adr
, 
ﬁ§_˙f
->
max∂í
,ádr, 
OLSR_RT_ORIGIN_INT
);

178  
tc
;

179 
	}
}

186 
	$ﬁ§_öô_tc
()

188 
	`OLSR_PRINTF
(5, "TC: initÅopo\n");

190 
	`avl_öô
(&
tc_åì
, 
avl_comp_deÁu…
);

195 
tc_edge_gc_timî_cookõ
 = 
	`ﬁ§_Æloc_cookõ
("TCÉdgêGC", 
OLSR_COOKIE_TYPE_TIMER
);

196 
tc_vÆidôy_timî_cookõ
 = 
	`ﬁ§_Æloc_cookõ
("TC vÆidôy", 
OLSR_COOKIE_TYPE_TIMER
);

198 
tc_edge_mem_cookõ
 = 
	`ﬁ§_Æloc_cookõ
("tc_edge_íåy", 
OLSR_COOKIE_TYPE_MEMORY
);

199 
	`ﬁ§_cookõ_£t_mem‹y_size
(
tc_edge_mem_cookõ
, (
tc_edge_íåy
Ë+ 
a˘ive_lq_h™dÀr
->
tc_lq_size
);

201 
tc_mem_cookõ
 = 
	`ﬁ§_Æloc_cookõ
("tc_íåy", 
OLSR_COOKIE_TYPE_MEMORY
);

202 
	`ﬁ§_cookõ_£t_mem‹y_size
(
tc_mem_cookõ
, (
tc_íåy
));

207 
tc_my£lf
 = 
	`ﬁ§_add_tc_íåy
(&
ﬁ§_˙f
->
maö_addr
);

208 
	}
}

210 
	$ﬁ§_dñëe_Æl_tc_íåõs
() {

211 
tc_íåy
 *
tc
;

213 
	`OLSR_FOR_ALL_TC_ENTRIES
(
tc
) {

214 
	`ﬁ§_dñëe_tc_íåy
(
tc
);

215 } 
	`OLSR_FOR_ALL_TC_ENTRIES_END
(
tc
)

216 
	}
}

223 
	$ﬁ§_ch™ge_my£lf_tc
()

225 i‡(
tc_my£lf
) {

230 i‡(
	`ùequÆ
(&
tc_my£lf
->
addr
, &
ﬁ§_˙f
->
maö_addr
)) {

237 
	`ﬁ§_dñëe_tc_íåy
(
tc_my£lf
);

243 
tc_my£lf
 = 
	`ﬁ§_add_tc_íåy
(&
ﬁ§_˙f
->
maö_addr
);

244 
ch™ges_t›ﬁogy
 = 
åue
;

245 
	}
}

251 
	$ﬁ§_lock_tc_íåy
(
tc_íåy
 *
tc
)

253 
tc
->
ªfcou¡
++;

254 
	}
}

260 
	$ﬁ§_u∆ock_tc_íåy
(
tc_íåy
 *
tc
)

262 i‡(--
tc
->
ªfcou¡
) {

269 
	`ﬁ§_cookõ_‰ì
(
tc_mem_cookõ
, 
tc
);

270 
	}
}

279 
	$ﬁ§_dñëe_tc_íåy
(
tc_íåy
 *
tc
)

281 
tc_edge_íåy
 *
tc_edge
;

282 
π_∑th
 *
πp
;

284 
ùaddr_°r
 
buf
;

285 
	`OLSR_PRINTF
(1, "TC: dñÉ¡ry %s\n", 
	`ﬁ§_ù_to_°rög
(&
buf
, &
tc
->
addr
));

289 #ifde‡
LINUX_NETLINK_ROUTING


290 
	`ﬁ§_dñëe_g©eway_íåy
(&
tc
->
addr
, 
FORCE_DELETE_GW_ENTRY
);

295 
	`ﬁ§_dñëe_routög_èbÀ
(&
tc
->
addr
, 
ﬁ§_˙f
->
max∂í
, &tc->addr);

298 
	`OLSR_FOR_ALL_TC_EDGE_ENTRIES
(
tc
, 
tc_edge
) {

299 
	`ﬁ§_dñëe_tc_edge_íåy
(
tc_edge
);

300 } 
	`OLSR_FOR_ALL_TC_EDGE_ENTRIES_END
(
tc
, 
tc_edge
);

302 
	`OLSR_FOR_ALL_PREFIX_ENTRIES
(
tc
, 
πp
) {

303 
	`ﬁ§_dñëe_π_∑th
(
πp
);

304 } 
	`OLSR_FOR_ALL_PREFIX_ENTRIES_END
(
tc
, 
πp
);

307 
	`ﬁ§_°›_timî
(
tc
->
edge_gc_timî
);

308 
tc
->
edge_gc_timî
 = 
NULL
;

309 
	`ﬁ§_°›_timî
(
tc
->
vÆidôy_timî
);

310 
tc
->
vÆidôy_timî
 = 
NULL
;

312 
	`avl_dñëe
(&
tc_åì
, &
tc
->
vîãx_node
);

313 
	`ﬁ§_u∆ock_tc_íåy
(
tc
);

314 
	}
}

322 
tc_íåy
 *

323 
	$ﬁ§_lookup_tc_íåy
(
ﬁ§_ù_addr
 *
adr
)

325 
avl_node
 *
node
;

328 
	`OLSR_PRINTF
(1, "TC:ÜookupÉntry\n");

331 
node
 = 
	`avl_föd
(&
tc_åì
, 
adr
);

333  (
node
 ? 
	`vîãx_åì2tc
“odeË: 
NULL
);

334 
	}
}

339 
tc_íåy
 *

340 
	$ﬁ§_loˇã_tc_íåy
(
ﬁ§_ù_addr
 *
adr
)

342 
tc_íåy
 *
tc
;

344 i‡(!(
tc
 = 
	`ﬁ§_lookup_tc_íåy
(
adr
))) {

345  
	`ﬁ§_add_tc_íåy
(
adr
);

347  
tc
;

348 
	}
}

354 
	$ﬁ§_tc_edge_to_°rög
(
tc_edge_íåy
 *
tc_edge
)

356 
buf
[128];

357 
ùaddr_°r
 
addrbuf
, 
d°buf
;

358 
tc_íåy
 *
tc
 = 
tc_edge
->tc;

359 
lqãxtbuf„r
 
lqbuf„r1
, 
lqbuf„r2
;

361 
	`¢¥ötf
(
buf
, (buf), "%†> %s, co° (%6sË%s", 
	`ﬁ§_ù_to_°rög
(&
addrbuf
, &
tc
->
addr
),

362 
	`ﬁ§_ù_to_°rög
(&
d°buf
, &
tc_edge
->
T_de°_addr
), 
	`gë_tc_edge_íåy_ãxt
—c_edge, '/', &
lqbuf„r1
),

363 
	`gë_lökco°_ãxt
(
tc_edge
->
co°
, 
Ál£
, &
lqbuf„r2
));

365  
buf
;

366 
	}
}

374 
	$ﬁ§_expúe_tc_íåy
(*
c⁄ãxt
)

376 
tc_íåy
 *
tc
;

377 
ùaddr_°r
 
buf
;

379 
tc
 = (
tc_íåy
 *)
c⁄ãxt
;

381 
	`OLSR_PRINTF
(3, "TC:Éxpúênodêíåy %s\n", 
	`ﬁ§_ù_to_°rög
(&
buf
, &
tc
->
addr
));

383 
tc
->
vÆidôy_timî
 = 
NULL
;

385 
	`ﬁ§_dñëe_tc_íåy
(
tc
);

386 
ch™ges_t›ﬁogy
 = 
åue
;

387 
	}
}

395 
	$ﬁ§_expúe_tc_edge_gc
(*
c⁄ãxt
)

397 
tc_íåy
 *
tc
;

398 
ùaddr_°r
 
buf
;

400 
tc
 = (
tc_íåy
 *)
c⁄ãxt
;

402 
	`OLSR_PRINTF
(3, "TC:Éxpúêedgêíåy %s\n", 
	`ﬁ§_ù_to_°rög
(&
buf
, &
tc
->
addr
));

404 
tc
->
edge_gc_timî
 = 
NULL
;

406 i‡(
	`ﬁ§_dñëe_outd©ed_tc_edges
(
tc
)) {

407 
ch™ges_t›ﬁogy
 = 
åue
;

409 
	}
}

418 
boﬁ


419 
	$ﬁ§_ˇlc_tc_edge_íåy_ëx
(
tc_edge_íåy
 *
tc_edge
)

424 i‡(
ﬁ§_˙f
->
lq_Àvñ
 < 1) {

425  
Ál£
;

428 
tc_edge
->
co°
 = 
	`ﬁ§_ˇlc_tc_co°
(tc_edge);

429  
åue
;

430 
	}
}

438 
tc_edge_íåy
 *

439 
	$ﬁ§_add_tc_edge_íåy
(
tc_íåy
 *
tc
, 
ﬁ§_ù_addr
 *
addr
, 
uöt16_t
 
™¢
)

441 #ifde‡
DEBUG


442 
ùaddr_°r
 
buf
;

444 
tc_íåy
 *
tc_√ighb‹
;

445 
tc_edge_íåy
 *
tc_edge
, *
tc_edge_öv
;

447 
tc_edge
 = 
	`ﬁ§_cookõ_mÆloc
(
tc_edge_mem_cookõ
);

448 i‡(!
tc_edge
) {

449  
NULL
;

453 
tc_edge
->
T_de°_addr
 = *
addr
;

454 
tc_edge
->
™¢
 =ánsn;

455 
tc_edge
->
edge_node
.
key
 = &tc_edge->
T_de°_addr
;

460 
	`avl_ö£π
(&
tc
->
edge_åì
, &
tc_edge
->
edge_node
, 
AVL_DUP_NO
);

461 
	`ﬁ§_lock_tc_íåy
(
tc
);

466 
tc_edge
->
tc
 =Åc;

472 
tc_√ighb‹
 = 
	`ﬁ§_lookup_tc_íåy
(&
tc_edge
->
T_de°_addr
);

473 i‡(
tc_√ighb‹
) {

474 #ifde‡
DEBUG


475 
	`OLSR_PRINTF
(1, "TC: foundÇeighb‹Åc_íåy %s\n", 
	`ﬁ§_ù_to_°rög
(&
buf
, &
tc_√ighb‹
->
addr
));

478 
tc_edge_öv
 = 
	`ﬁ§_lookup_tc_edge
(
tc_√ighb‹
, &
tc
->
addr
);

479 i‡(
tc_edge_öv
) {

480 #ifde‡
DEBUG


481 
	`OLSR_PRINTF
(1, "TC: found invî£Édgêf‹ %s\n", 
	`ﬁ§_ù_to_°rög
(&
buf
, &
tc_edge_öv
->
T_de°_addr
));

487 
tc_edge_öv
->
edge_öv
 = 
tc_edge
;

488 
tc_edge
->
edge_öv
 = 
tc_edge_öv
;

496 
	`ﬁ§_ˇlc_tc_edge_íåy_ëx
(
tc_edge
);

498 #ifde‡
DEBUG


499 
	`OLSR_PRINTF
(1, "TC:áddÉdgêíåy %s\n", 
	`ﬁ§_tc_edge_to_°rög
(
tc_edge
));

502  
tc_edge
;

503 
	}
}

512 
	$ﬁ§_dñëe_tc_edge_íåy
(
tc_edge_íåy
 *
tc_edge
)

514 
tc_íåy
 *
tc
;

515 
tc_edge_íåy
 *
tc_edge_öv
;

517 #ifde‡
DEBUG


518 
	`OLSR_PRINTF
(1, "TC: dñÉdgêíåy %s\n", 
	`ﬁ§_tc_edge_to_°rög
(
tc_edge
));

521 
tc
 = 
tc_edge
->tc;

522 
	`avl_dñëe
(&
tc
->
edge_åì
, &
tc_edge
->
edge_node
);

523 
	`ﬁ§_u∆ock_tc_íåy
(
tc
);

528 
tc_edge_öv
 = 
tc_edge
->
edge_öv
;

529 i‡(
tc_edge_öv
) {

530 
tc_edge_öv
->
edge_öv
 = 
NULL
;

533 
	`ﬁ§_cookõ_‰ì
(
tc_edge_mem_cookõ
, 
tc_edge
);

534 
	}
}

542 
boﬁ


543 
	$ﬁ§_dñëe_outd©ed_tc_edges
(
tc_íåy
 *
tc
)

545 
tc_edge_íåy
 *
tc_edge
;

546 
boﬁ
 
ªtvÆ
 = 
Ál£
;

549 
	`OLSR_PRINTF
(5, "TC: deleting outdated TC-edgeÉntries\n");

552 
	`OLSR_FOR_ALL_TC_EDGE_ENTRIES
(
tc
, 
tc_edge
) {

553 i‡(
	`SEQNO_GREATER_THAN
(
tc
->
™¢
, 
tc_edge
->ansn)) {

554 
	`ﬁ§_dñëe_tc_edge_íåy
(
tc_edge
);

555 
ªtvÆ
 = 
åue
;

558 
	`OLSR_FOR_ALL_TC_EDGE_ENTRIES_END
(
tc
, 
tc_edge
);

560  
ªtvÆ
;

561 
	}
}

572 
	$ﬁ§_dñëe_ªvoked_tc_edges
(
tc_íåy
 *
tc
, 
uöt16_t
 
™¢
, 
ﬁ§_ù_addr
 *
lowî_b‹dî
, ﬁ§_ù_add∏*
uµî_b‹dî
)

574 
tc_edge_íåy
 *
tc_edge
;

575 
ªtvÆ
 = 0;

578 
	`OLSR_PRINTF
(5, "TC: deleting MPRS\n");

581 
boﬁ
 
∑s£dLowîB‹dî
 = 
Ál£
;

583 
	`OLSR_FOR_ALL_TC_EDGE_ENTRIES
(
tc
, 
tc_edge
) {

584 i‡(!
∑s£dLowîB‹dî
) {

585 i‡(
	`avl_comp_deÁu…
(
lowî_b‹dî
, &
tc_edge
->
T_de°_addr
) <= 0) {

586 
∑s£dLowîB‹dî
 = 
åue
;

592 i‡(
∑s£dLowîB‹dî
) {

593 i‡(
	`avl_comp_deÁu…
(
uµî_b‹dî
, &
tc_edge
->
T_de°_addr
) <= 0) {

598 i‡(
	`SEQNO_GREATER_THAN
(
™¢
, 
tc_edge
->ansn)) {

599 
	`ﬁ§_dñëe_tc_edge_íåy
(
tc_edge
);

600 
ªtvÆ
 = 1;

603 
	`OLSR_FOR_ALL_TC_EDGE_ENTRIES_END
(
tc
, 
tc_edge
);

605 i‡(
ªtvÆ
)

606 
ch™ges_t›ﬁogy
 = 
åue
;

607  
ªtvÆ
;

608 
	}
}

620 
	$ﬁ§_tc_upd©e_edge
(
tc_íåy
 *
tc
, 
uöt16_t
 
™¢
, c⁄° **
cuº
, 
ﬁ§_ù_addr
 *
√ighb‹
)

622 
tc_edge_íåy
 *
tc_edge
;

623 
edge_ch™ge
;

625 
edge_ch™ge
 = 0;

630 
	`pkt_gë_ùaddªss
(
cuº
, 
√ighb‹
);

633 
tc_edge
 = 
	`ﬁ§_lookup_tc_edge
(
tc
, 
√ighb‹
);

635 i‡(!
tc_edge
) {

641 i‡(!
	`ﬁ§_vÆid©e_addªss
(
√ighb‹
)) {

645 
tc_edge
 = 
	`ﬁ§_add_tc_edge_íåy
(
tc
, 
√ighb‹
, 
™¢
);

647 
	`ﬁ§_de£rülize_tc_lq_∑ú
(
cuº
, 
tc_edge
);

648 
edge_ch™ge
 = 1;

655 
tc_edge
->
™¢
 =ánsn;

660 i‡(
ﬁ§_˙f
->
lq_Àvñ
 > 0) {

661 
	`ﬁ§_de£rülize_tc_lq_∑ú
(
cuº
, 
tc_edge
);

667 i‡(
	`ﬁ§_ˇlc_tc_edge_íåy_ëx
(
tc_edge
)) {

668 
edge_ch™ge
 = 1;

670 #i‡
DEBUG


671 i‡(
edge_ch™ge
) {

672 
	`OLSR_PRINTF
(1, "TC: chgÉdgêíåy %s\n", 
	`ﬁ§_tc_edge_to_°rög
(
tc_edge
));

678  
edge_ch™ge
;

679 
	}
}

688 
tc_edge_íåy
 *

689 
	$ﬁ§_lookup_tc_edge
(
tc_íåy
 *
tc
, 
ﬁ§_ù_addr
 *
edge_addr
)

691 
avl_node
 *
edge_node
;

694 
	`OLSR_PRINTF
(1, "TC:Üookup dst\n");

697 
edge_node
 = 
	`avl_föd
(&
tc
->
edge_åì
, 
edge_addr
);

699  (
edge_node
 ? 
	`edge_åì2tc_edge
”dge_nodeË: 
NULL
);

700 
	}
}

706 
	$ﬁ§_¥öt_tc_èbÀ
()

708 #i‚de‡
NODEBUG


710 
tc_íåy
 *
tc
;

711 c⁄° 
ùwidth
 = 
ﬁ§_˙f
->
ù_vîsi⁄
 =
AF_INET
 ? 15 : 30;

713 
	`OLSR_PRINTF
(1, "\n--- %s ------------------------------------------------- TOPOLOGY\n\n" "%-*s %-*s %-14s %s\n",

714 
	`ﬁ§_wÆl˛ock_°rög
(), 
ùwidth
, "Source IPáddr", ipwidth, "Dest IPáddr", " LQ ", "ETX");

716 
	`OLSR_FOR_ALL_TC_ENTRIES
(
tc
) {

717 
tc_edge_íåy
 *
tc_edge
;

718 
	`OLSR_FOR_ALL_TC_EDGE_ENTRIES
(
tc
, 
tc_edge
) {

719 
ùaddr_°r
 
addrbuf
, 
d°addrbuf
;

720 
lqãxtbuf„r
 
lqbuf„r1
, 
lqbuf„r2
;

722 
	`OLSR_PRINTF
(1, "%-*†%-*†%-14†%s\n", 
ùwidth
, 
	`ﬁ§_ù_to_°rög
(&
addrbuf
, &
tc
->
addr
), ipwidth,

723 
	`ﬁ§_ù_to_°rög
(&
d°addrbuf
, &
tc_edge
->
T_de°_addr
), 
	`gë_tc_edge_íåy_ãxt
—c_edge, '/', &
lqbuf„r1
),

724 
	`gë_lökco°_ãxt
(
tc_edge
->
co°
, 
Ál£
, &
lqbuf„r2
));

726 } 
	`OLSR_FOR_ALL_TC_EDGE_ENTRIES_END
(
tc
, 
tc_edge
);

727 } 
	`OLSR_FOR_ALL_TC_ENTRIES_END
(
tc
);

729 
	}
}

741 
	$ﬁ§_ˇlcuœã_tc_b‹dî
(
uöt8_t
 
lowî_b‹dî
, 
ﬁ§_ù_addr
 *
lowî_b‹dî_ù
, uöt8_à
uµî_b‹dî
,

742 
ﬁ§_ù_addr
 *
uµî_b‹dî_ù
)

744 i‡(
lowî_b‹dî
 =0 && 
uµî_b‹dî
 == 0) {

747 i‡(
lowî_b‹dî
 == 0xff) {

748 
	`mem£t
(
lowî_b‹dî_ù
, 0, (lower_border_ip));

750 
i
;

752 
lowî_b‹dî
--;

753 
i
 = 0; i < 
lowî_b‹dî
 / 8; i++) {

754 
lowî_b‹dî_ù
->
v6
.
s6_addr
[
ﬁ§_˙f
->
ùsize
 - 
i
 - 1] = 0;

756 
lowî_b‹dî_ù
->
v6
.
s6_addr
[
ﬁ§_˙f
->
ùsize
 - 
lowî_b‹dî
 / 8 - 1] &= (0xff << (lower_border & 7));

757 
lowî_b‹dî_ù
->
v6
.
s6_addr
[
ﬁ§_˙f
->
ùsize
 - 
lowî_b‹dî
 / 8 - 1] |= (1 << (lower_border & 7));

760 i‡(
uµî_b‹dî
 == 0xff) {

761 
	`mem£t
(
uµî_b‹dî_ù
, 0xff, (upper_border_ip));

763 
i
;

765 
uµî_b‹dî
--;

767 
i
 = 0; i < 
uµî_b‹dî
 / 8; i++) {

768 
uµî_b‹dî_ù
->
v6
.
s6_addr
[
ﬁ§_˙f
->
ùsize
 - 
i
 - 1] = 0;

770 
uµî_b‹dî_ù
->
v6
.
s6_addr
[
ﬁ§_˙f
->
ùsize
 - 
uµî_b‹dî
 / 8 - 1] &= (0xff << (upper_border & 7));

771 
uµî_b‹dî_ù
->
v6
.
s6_addr
[
ﬁ§_˙f
->
ùsize
 - 
uµî_b‹dî
 / 8 - 1] |= (1 << (upper_border & 7));

774 
	}
}

786 
boﬁ


787 
ﬁ§_öput_tc
(
ﬁ§_mesßge
 * 
msg
, 
öãrÁ˚
 * 
öput_if
 
__©åibuã__
 ((
unu£d
)), 
ﬁ§_ù_addr
 * 
‰om_addr
)

789 
ùaddr_°r
 
	gbuf
;

790 
uöt16_t
 
	gsize
, 
	gmsg_£q
, 
	g™¢
;

791 
uöt8_t
 
	gty≥
, 
	gâl
, 
	gmsg_h›s
, 
	glowî_b‹dî
, 
	guµî_b‹dî
;

792 
ﬁ§_ª…ime
 
	gvtime
;

793 
ﬁ§_ù_addr
 
	g‹igö©‹
;

794 c⁄° *
	glimô
, *
	gcuº
;

795 
tc_íåy
 *
	gtc
;

796 
boﬁ
 
	gem±yTC
;

798 
ﬁ§_ù_addr
 
	glowî_b‹dî_ù
, 
	guµî_b‹dî_ù
;

799 
	gb‹dîSë
 = 0;

801 
	gcuº
 = (*)
msg
;

802 i‡(!
	gmsg
) {

803  
	gÁl£
;

807 
pkt_gë_u8
(&
cuº
, &
ty≥
);

808 i‡((
	gty≥
 !
LQ_TC_MESSAGE
Ë&& (
ty≥
 !
TC_MESSAGE
)) {

809  
Ál£
;

817 i‡(
check_√ighb‹_lök
(
‰om_addr
Ë!
SYM_LINK
) {

818 
OLSR_PRINTF
(2, "Re˚ived TC from NON SYMÇeighb‹ %s\n", 
ﬁ§_ù_to_°rög
(&
buf
, 
‰om_addr
));

819  
	gÁl£
;

822 
pkt_gë_ª…ime
(&
cuº
, &
vtime
);

823 
pkt_gë_u16
(&
cuº
, &
size
);

825 
pkt_gë_ùaddªss
(&
cuº
, &
‹igö©‹
);

828 
pkt_gë_u8
(&
cuº
, &
âl
);

829 
pkt_gë_u8
(&
cuº
, &
msg_h›s
);

830 
pkt_gë_u16
(&
cuº
, &
msg_£q
);

831 
pkt_gë_u16
(&
cuº
, &
™¢
);

834 
pkt_gë_u8
(&
cuº
, &
lowî_b‹dî
);

835 
pkt_gë_u8
(&
cuº
, &
uµî_b‹dî
);

837 
	gtc
 = 
ﬁ§_lookup_tc_íåy
(&
‹igö©‹
);

839 i‡(
	gvtime
 < (
	gﬁ§_ª…ime
)(
	gﬁ§_˙f
->
	gmö_tc_vtime
*1000)) {

840 
	gvtime
 = (
ﬁ§_ª…ime
)(
ﬁ§_˙f
->
mö_tc_vtime
*1000);

843 i‡(
	gtc
 && 0 !
tc
->
edge_åì
.
cou¡
) {

844 i‡(
ﬁ§_£q_öønge_high
(()
tc
->
msg_£q
 - 
TC_SEQNO_WINDOW
,Åc->msg_seq, msg_seq)

845 && 
ﬁ§_£q_öønge_high
(()
tc
->
™¢
 - 
TC_ANSN_WINDOW
,Åc->ansn,ánsn)) {

850 i‡((
tc
->
msg_£q
 =msg_£qË|| (tc->
ign‹ed
++ < 32)) {

851  
Ál£
;

854 
OLSR_PRINTF
(1, "Ign‹edÅÿmuch LQTC'†f‹ %s,Ñe°¨tög\n", 
ﬁ§_ù_to_°rög
(&
buf
, &
‹igö©‹
));

856 } i‡(!
ﬁ§_£q_öønge_high
(
tc
->
msg_£q
, (Èc->msg_£q + 
TC_SEQNO_WINDOW
 * 
TC_SEQNO_WINDOW_MULT
, msg_seq)

857 || !
ﬁ§_£q_öønge_low
(
tc
->
™¢
, (Èc->™¢ + 
TC_ANSN_WINDOW
 * 
TC_ANSN_WINDOW_MULT
,ánsn)) {

863 i‡(!
	gtc
->
	gîr_£q_vÆid
) {

864 
	gtc
->
	gîr_£q
 = 
msg_£q
;

865 
	gtc
->
	gîr_£q_vÆid
 = 
åue
;

867 i‡(
	gtc
->
	gîr_£q
 =
msg_£q
) {

868  
Ál£
;

871 
OLSR_PRINTF
(2, "Dëe˘edÇodêª°¨àf‹ %s\n", 
ﬁ§_ù_to_°rög
(&
buf
, &
‹igö©‹
));

878 i‡(!
	gtc
) {

879 
	gtc
 = 
ﬁ§_add_tc_íåy
(&
‹igö©‹
);

885 
	gtc
->
	gmsg_h›s
 = 
msg_h›s
;

886 
	gtc
->
	gmsg_£q
 = 
msg_£q
;

887 
	gtc
->
	g™¢
 = 
™¢
;

888 
	gtc
->
	gign‹ed
 = 0;

889 
	gtc
->
	gîr_£q_vÆid
 = 
Ál£
;

891 
OLSR_PRINTF
(1, "Pro˚ssög TC from %s, seq 0x%04x\n", 
ﬁ§_ù_to_°rög
(&
buf
, &
‹igö©‹
), 
tc
->
msg_£q
);

897 
	glimô
 = (*)
msg
 + 
size
;

898 
	gb‹dîSë
 = 0;

899 
	gem±yTC
 = 
cuº
 >
limô
;

900 
	gcuº
 < 
	glimô
) {

901 i‡(
ﬁ§_tc_upd©e_edge
(
tc
, 
™¢
, &
cuº
, &
uµî_b‹dî_ù
)) {

902 
	gch™ges_t›ﬁogy
 = 
åue
;

905 i‡(!
	gb‹dîSë
) {

906 
	gb‹dîSë
 = 1;

907 
mem˝y
(&
lowî_b‹dî_ù
, &
uµî_b‹dî_ù
, (lower_border_ip));

914 i‡(
	gb‹dîSë
) {

915 
	gb‹dîSë
 = 
ﬁ§_ˇlcuœã_tc_b‹dî
(
lowî_b‹dî
, &
lowî_b‹dî_ù
, 
uµî_b‹dî
, &
uµî_b‹dî_ù
);

921 
ﬁ§_£t_timî
(&
tc
->
vÆidôy_timî
, 
vtime
, 
OLSR_TC_VTIME_JITTER
, 
OLSR_TIMER_ONESHOT
, &
ﬁ§_expúe_tc_íåy
,Åc,

922 
tc_vÆidôy_timî_cookõ
);

924 i‡(
	gem±yTC
 && 
	glowî_b‹dî
 =0xf‡&& 
uµî_b‹dî
 == 0xff) {

926 
mem£t
(&
lowî_b‹dî_ù
, 0x00, (lower_border_ip));

927 
mem£t
(&
uµî_b‹dî_ù
, 0xff, (upper_border_ip));

928 
	gb‹dîSë
 = 1;

931 i‡(
	gb‹dîSë
) {

936 
ﬁ§_dñëe_ªvoked_tc_edges
(
tc
, 
™¢
, &
lowî_b‹dî_ù
, &
uµî_b‹dî_ù
);

943 
ﬁ§_£t_timî
(&
tc
->
edge_gc_timî
, 
OLSR_TC_EDGE_GC_TIME
, 
OLSR_TC_EDGE_GC_JITTER
, 
OLSR_TIMER_ONESHOT
, &
ﬁ§_expúe_tc_edge_gc
,

944 
tc
, 
tc_edge_gc_timî_cookõ
);

947 i‡(
	gem±yTC
 && 
	gb‹dîSë
) {

951 
ﬁ§_˛ónup_mid
(&
‹igö©‹
);

952 
ﬁ§_˛ónup_h«
(&
‹igö©‹
);

953 
ﬁ§_˛ónup_du∂iˇãs
(&
‹igö©‹
);

955 
ﬁ§_dñëe_tc_íåy
(
tc
);

958  
	gåue
;

	@src/tc_set.h

43 #i‚de‡
_OLSR_TOP_SET


44 
	#_OLSR_TOP_SET


	)

46 
	~"defs.h
"

47 
	~"∑ckë.h
"

48 
	~"comm⁄/avl.h
"

49 
	~"comm⁄/li°.h
"

50 
	~"scheduÀr.h
"

59 
	stc_edge_íåy
 {

60 
avl_node
 
	medge_node
;

61 
ﬁ§_ù_addr
 
	mT_de°_addr
;

62 
tc_edge_íåy
 *
	medge_öv
;

63 
tc_íåy
 *
	mtc
;

64 
ﬁ§_lökco°
 
	mco°
;

65 
uöt16_t
 
	m™¢
;

66 
uöt32_t
 
	mlökquÆôy
[0];

69 
AVLNODE2STRUCT
(
edge_åì2tc_edge
, 
tc_edge_íåy
, 
edge_node
);

71 
	stc_íåy
 {

72 
avl_node
 
	mvîãx_node
;

73 
ﬁ§_ù_addr
 
	maddr
;

74 
avl_node
 
	mˇnd_åì_node
;

75 
ﬁ§_lökco°
 
	m∑th_co°
;

76 
li°_node
 
	m∑th_li°_node
;

77 
avl_åì
 
	medge_åì
;

78 
avl_åì
 
	m¥efix_åì
;

79 
lök_íåy
 *
	m√xt_h›
;

80 
timî_íåy
 *
	medge_gc_timî
;

81 
timî_íåy
 *
	mvÆidôy_timî
;

82 
uöt32_t
 
	mªfcou¡
;

83 
uöt16_t
 
	mmsg_£q
;

84 
uöt8_t
 
	mmsg_h›s
;

85 
uöt8_t
 
	mh›s
;

86 
uöt16_t
 
	m™¢
;

87 
uöt16_t
 
	mign‹ed
;

89 
uöt16_t
 
	mîr_£q
;

90 
boﬁ
 
	mîr_£q_vÆid
;

97 
	#OLSR_TC_EDGE_GC_TIME
 (2*1000Ë

	)

98 
	#OLSR_TC_EDGE_GC_JITTER
 5

	)

100 
	#OLSR_TC_VTIME_JITTER
 5

	)

102 
AVLNODE2STRUCT
(
vîãx_åì2tc
, 
tc_íåy
, 
vîãx_node
);

103 
AVLNODE2STRUCT
(
ˇnd_åì2tc
, 
tc_íåy
, 
ˇnd_åì_node
);

104 
LISTNODE2STRUCT
(
∑thli°2tc
, 
tc_íåy
, 
∑th_li°_node
);

114 
	#OLSR_FOR_ALL_TC_ENTRIES
(
tc
) \

116 
avl_node
 *
tc_åì_node
, *
√xt_tc_åì_node
; \

117 
tc_åì_node
 = 
	`avl_wÆk_fú°
(&
tc_åì
); \

118 
tc_åì_node
;Åc_åì_nodê
√xt_tc_åì_node
) { \

119 
√xt_tc_åì_node
 = 
	`avl_wÆk_√xt
(
tc_åì_node
); \

120 
tc
 = 
	`vîãx_åì2tc
(
tc_åì_node
);

	)

121 
	#OLSR_FOR_ALL_TC_ENTRIES_END
(
tc
Ë}}

	)

123 
	#OLSR_FOR_ALL_TC_EDGE_ENTRIES
(
tc
, 
tc_edge
) \

125 
avl_node
 *
tc_edge_node
, *
√xt_tc_edge_node
; \

126 
tc_edge_node
 = 
	`avl_wÆk_fú°
(&
tc
->
edge_åì
); \

127 
tc_edge_node
;Åc_edge_nodê
√xt_tc_edge_node
) { \

128 
√xt_tc_edge_node
 = 
	`avl_wÆk_√xt
(
tc_edge_node
); \

129 
tc_edge
 = 
	`edge_åì2tc_edge
(
tc_edge_node
);

	)

130 
	#OLSR_FOR_ALL_TC_EDGE_ENTRIES_END
(
tc
, 
tc_edge
Ë}}

	)

132 
	#OLSR_FOR_ALL_PREFIX_ENTRIES
(
tc
, 
πp
) \

134 
avl_node
 *
πp_node
, *
√xt_πp_node
; \

135 
πp_node
 = 
	`avl_wÆk_fú°
(&
tc
->
¥efix_åì
); \

136 
πp_node
;Ñç_nodê
√xt_πp_node
) { \

137 
√xt_πp_node
 = 
	`avl_wÆk_√xt
(
πp_node
); \

138 
πp
 = 
	`πp_¥efix_åì2πp
(
πp_node
);

	)

139 
	#OLSR_FOR_ALL_PREFIX_ENTRIES_END
(
tc
, 
πp
Ë}}

	)

141 
avl_åì
 
tc_åì
;

142 
tc_íåy
 *
tc_my£lf
;

144 
ﬁ§_öô_tc
();

145 
ﬁ§_dñëe_Æl_tc_íåõs
();

146 
ﬁ§_ch™ge_my£lf_tc
();

147 
ﬁ§_¥öt_tc_èbÀ
();

148 
ﬁ§_time_out_tc_£t
();

151 
boﬁ
 
ﬁ§_öput_tc
(
ﬁ§_mesßge
 *, 
öãrÁ˚
 *, 
ﬁ§_ù_addr
 *
‰om
);

154 
tc_íåy
 *
ﬁ§_lookup_tc_íåy
(
ﬁ§_ù_addr
 *);

155 
tc_íåy
 *
ﬁ§_loˇã_tc_íåy
(
ﬁ§_ù_addr
 *);

156 
ﬁ§_lock_tc_íåy
(
tc_íåy
 *);

157 
ﬁ§_u∆ock_tc_íåy
(
tc_íåy
 *);

160 
boﬁ
 
ﬁ§_dñëe_outd©ed_tc_edges
(
tc_íåy
 *);

161 *
ﬁ§_tc_edge_to_°rög
(
tc_edge_íåy
 *);

162 
tc_edge_íåy
 *
ﬁ§_lookup_tc_edge
(
tc_íåy
 *, 
ﬁ§_ù_addr
 *);

163 
tc_edge_íåy
 *
ﬁ§_add_tc_edge_íåy
(
tc_íåy
 *, 
ﬁ§_ù_addr
 *, 
uöt16_t
);

164 
ﬁ§_dñëe_tc_íåy
(
tc_íåy
 *);

165 
ﬁ§_dñëe_tc_edge_íåy
(
tc_edge_íåy
 *);

166 
boﬁ
 
ﬁ§_ˇlc_tc_edge_íåy_ëx
(
tc_edge_íåy
 *);

167 
ﬁ§_£t_tc_edge_timî
(
tc_edge_íåy
 *, );

	@src/two_hop_neighbor_table.c

42 
	~"two_h›_√ighb‹_èbÀ.h
"

43 
	~"ùˇlc.h
"

44 
	~"defs.h
"

45 
	~"mid_£t.h
"

46 
	~"√ighb‹_èbÀ.h
"

47 
	~"√t_ﬁ§.h
"

48 
	~"scheduÀr.h
"

50 
√ighb‹_2_íåy
 
	gtwo_h›_√ighb‹èbÀ
[
HASHSIZE
];

56 
	$ﬁ§_öô_two_h›_èbÀ
()

58 
idx
;

59 
idx
 = 0; idx < 
HASHSIZE
; idx++) {

60 
two_h›_√ighb‹èbÀ
[
idx
].
√xt
 = &two_hop_neighbortable[idx];

61 
two_h›_√ighb‹èbÀ
[
idx
].
¥ev
 = &two_hop_neighbortable[idx];

63 
	}
}

77 
	$ﬁ§_dñëe_√ighb‹_poöãr
(
√ighb‹_2_íåy
 *
two_h›_íåy
, 
√ighb‹_íåy
 *
√igh
)

79 
√ighb‹_li°_íåy
 *
íåy
 = 
two_h›_íåy
->
√ighb‹_2_nbli°
.
√xt
;

80 
íåy
 !&
two_h›_íåy
->
√ighb‹_2_nbli°
) {

81 i‡(
íåy
->
√ighb‹
 =
√igh
) {

82 
√ighb‹_li°_íåy
 *
íåy_to_dñëe
 = 
íåy
;

83 
íåy
 =É¡ry->
√xt
;

86 
	`DEQUEUE_ELEM
(
íåy_to_dñëe
);

88 
	`‰ì
(
íåy_to_dñëe
);

90 
íåy
 =É¡ry->
√xt
;

93 
	}
}

103 
	$ﬁ§_dñëe_two_h›_√ighb‹_èbÀ
(
√ighb‹_2_íåy
 *
two_h›_√ighb‹
)

105 
√ighb‹_li°_íåy
 *
⁄e_h›_li°
;

107 
⁄e_h›_li°
 = 
two_h›_√ighb‹
->
√ighb‹_2_nbli°
.
√xt
;

110 
⁄e_h›_li°
 !&
two_h›_√ighb‹
->
√ighb‹_2_nbli°
) {

111 
√ighb‹_íåy
 *
⁄e_h›_íåy
 = 
⁄e_h›_li°
->
√ighb‹
;

112 
√ighb‹_li°_íåy
 *
íåy_to_dñëe
 = 
⁄e_h›_li°
;

114 
	`ﬁ§_dñëe_√ighb‹_2_poöãr
(
⁄e_h›_íåy
, 
two_h›_√ighb‹
);

115 
⁄e_h›_li°
 = o√_h›_li°->
√xt
;

117 
	`‰ì
(
íåy_to_dñëe
);

121 
	`DEQUEUE_ELEM
(
two_h›_√ighb‹
);

122 
	`‰ì
(
two_h›_√ighb‹
);

123 
	}
}

133 
	$ﬁ§_ö£π_two_h›_√ighb‹_èbÀ
(
√ighb‹_2_íåy
 *
two_h›_√ighb‹
)

135 
uöt32_t
 
hash
 = 
	`ﬁ§_ù_hashög
(&
two_h›_√ighb‹
->
√ighb‹_2_addr
);

138 
	`¥ötf
("Addög 2 h›Çeighb‹ %s\n", 
	`ﬁ§_ù_to_°rög
(&
buf
, &
two_h›_√ighb‹
->
√ighb‹_2_addr
));

142 
	`QUEUE_ELEM
(
two_h›_√ighb‹èbÀ
[
hash
], 
two_h›_√ighb‹
);

143 
	}
}

153 
√ighb‹_2_íåy
 *

154 
	$ﬁ§_lookup_two_h›_√ighb‹_èbÀ
(c⁄° 
ﬁ§_ù_addr
 *
de°
)

157 
√ighb‹_2_íåy
 *
√ighb‹_2
;

158 
uöt32_t
 
hash
 = 
	`ﬁ§_ù_hashög
(
de°
);

161 
√ighb‹_2
 = 
two_h›_√ighb‹èbÀ
[
hash
].
√xt
;Çeighbor_2 != &two_hop_neighbortable[hash];Çeighbor_2 =Çeighbor_2->next) {

162 
mid_addªss
 *
adr
;

165 i‡(
	`ùequÆ
(&
√ighb‹_2
->
√ighb‹_2_addr
, 
de°
))

166  
√ighb‹_2
;

168 
adr
 = 
	`mid_lookup_Æü£s
(&
√ighb‹_2
->
√ighb‹_2_addr
);

170 
adr
) {

171 i‡(
	`ùequÆ
(&
adr
->
Æüs
, 
de°
))

172  
√ighb‹_2
;

173 
adr
 =ádr->
√xt_Æüs
;

177  
NULL
;

178 
	}
}

189 
√ighb‹_2_íåy
 *

190 
	$ﬁ§_lookup_two_h›_√ighb‹_èbÀ_mid
(c⁄° 
ﬁ§_ù_addr
 *
de°
)

192 
√ighb‹_2_íåy
 *
√ighb‹_2
;

193 
uöt32_t
 
hash
;

196 
hash
 = 
	`ﬁ§_ù_hashög
(
de°
);

198 
√ighb‹_2
 = 
two_h›_√ighb‹èbÀ
[
hash
].
√xt
;Çeighbor_2 != &two_hop_neighbortable[hash];Çeighbor_2 =Çeighbor_2->next) {

199 i‡(
	`ùequÆ
(&
√ighb‹_2
->
√ighb‹_2_addr
, 
de°
))

200  
√ighb‹_2
;

203  
NULL
;

204 
	}
}

212 
	$ﬁ§_¥öt_two_h›_√ighb‹_èbÀ
()

214 #i‚de‡
NODEBUG


216 
i
;

218 
	`OLSR_PRINTF
(1, "\n--- %s ----------------------- TWO-HOP NEIGHBORS\n\n" "IPáddr (2-hop) IPáddr (1-hop) Total cost\n",

219 
	`ﬁ§_wÆl˛ock_°rög
());

221 
i
 = 0; i < 
HASHSIZE
; i++) {

222 
√ighb‹_2_íåy
 *
√igh2
;

223 
√igh2
 = 
two_h›_√ighb‹èbÀ
[
i
].
√xt
;Çeigh2 != &two_hop_neighbortable[i];Çeigh2 =Çeigh2->next) {

224 
√ighb‹_li°_íåy
 *
íåy
;

225 
boﬁ
 
fú°
 = 
åue
;

227 
íåy
 = 
√igh2
->
√ighb‹_2_nbli°
.
√xt
;Éntry != &neigh2->neighbor_2_nblist;Éntry =Éntry->next) {

228 
ùaddr_°r
 
buf
;

229 
lqãxtbuf„r
 
lqbuf„r
;

230 i‡(
fú°
) {

231 
	`OLSR_PRINTF
(1, "%-15† ", 
	`ﬁ§_ù_to_°rög
(&
buf
, &
√igh2
->
√ighb‹_2_addr
));

232 
fú°
 = 
Ál£
;

234 
	`OLSR_PRINTF
(1, " ");

236 
	`OLSR_PRINTF
(1, "%-15† %s\n", 
	`ﬁ§_ù_to_°rög
(&
buf
, &
íåy
->
√ighb‹
->
√ighb‹_maö_addr
),

237 
	`gë_lökco°_ãxt
(
íåy
->
∑th_lökco°
, 
Ál£
, &
lqbuf„r
));

242 
	}
}

	@src/two_hop_neighbor_table.h

42 #i‚de‡
_OLSR_TWO_HOP_TABLE


43 
	#_OLSR_TWO_HOP_TABLE


	)

45 
	~"defs.h
"

46 
	~"hashög.h
"

47 
	~"lq_∂ugö.h
"

49 
	#NB2S_COVERED
 0x1

	)

51 
	s√ighb‹_li°_íåy
 {

52 
√ighb‹_íåy
 *
	m√ighb‹
;

53 
ﬁ§_lökco°
 
	m£c⁄d_h›_lökco°
;

54 
ﬁ§_lökco°
 
	m∑th_lökco°
;

55 
ﬁ§_lökco°
 
	mßved_∑th_lökco°
;

56 
√ighb‹_li°_íåy
 *
	m√xt
;

57 
√ighb‹_li°_íåy
 *
	m¥ev
;

60 
	s√ighb‹_2_íåy
 {

61 
ﬁ§_ù_addr
 
	m√ighb‹_2_addr
;

62 
uöt8_t
 
	mm¥_covîed_cou¡
;

63 
uöt8_t
 
	m¥o˚s£d
;

64 
öt16_t
 
	m√ighb‹_2_poöãr
;

65 
√ighb‹_li°_íåy
 
	m√ighb‹_2_nbli°
;

66 
√ighb‹_2_íåy
 *
	m¥ev
;

67 
√ighb‹_2_íåy
 *
	m√xt
;

70 
√ighb‹_2_íåy
 
two_h›_√ighb‹èbÀ
[
HASHSIZE
];

72 
ﬁ§_öô_two_h›_èbÀ
();

74 
ﬁ§_dñëe_√ighb‹_poöãr
(
√ighb‹_2_íåy
 *, 
√ighb‹_íåy
 *);

76 
ﬁ§_dñëe_two_h›_√ighb‹_èbÀ
(
√ighb‹_2_íåy
 *);

78 
ﬁ§_ö£π_two_h›_√ighb‹_èbÀ
(
√ighb‹_2_íåy
 *);

80 
√ighb‹_2_íåy
 *
ﬁ§_lookup_two_h›_√ighb‹_èbÀ
(c⁄° 
ﬁ§_ù_addr
 *);

82 
√ighb‹_2_íåy
 *
ﬁ§_lookup_two_h›_√ighb‹_èbÀ_mid
(c⁄° 
ﬁ§_ù_addr
 *);

84 
ﬁ§_¥öt_two_h›_√ighb‹_èbÀ
();

	@src/unix/ifnet.c

42 #i‡
deföed
 
__FªeBSD__
 || deföed 
__FªeBSD_kî√l__
 || deföed 
__MacOSX__
 || deföed 
__NëBSD__
 || deföed 
__O≥nBSD__


43 
	#i‰_√tmask
 
i‰_addr


	)

46 
	~"i‚ë.h
"

47 
	~"ùˇlc.h
"

48 
	~"öãrÁ˚s.h
"

49 
	~"defs.h
"

50 
	~"ﬁ§.h
"

51 
	~"√t_os.h
"

52 
	~"√t_ﬁ§.h
"

53 
	~"∑r£r.h
"

54 
	~"scheduÀr.h
"

55 
	~"gíî©e_msg.h
"

56 
	~"m™tisß.h
"

57 
	~"lq_∑ckë.h
"

58 
	~"log.h
"

59 
	~"lök_£t.h
"

61 
	~<sig«l.h
>

62 
	~<sys/ty≥s.h
>

63 
	~<√t/if.h
>

64 
	~<√t/if_¨p.h
>

65 
	~<√töë/ö_sy°m.h
>

66 
	~<√töë/ù.h
>

67 
	~<¨∑/öë.h
>

68 
	~<√tdb.h
>

69 
	~<uni°d.h
>

74 #ifde‡
IPTOS_CLASS


75 #unde‡
IPTOS_CLASS


77 
	#IPTOS_CLASS
(
˛ass
Ë((˛assË& 
IPTOS_CLASS_MASK
)

	)

79 
	#BUFSPACE
 (127*1024Ë

	)

82 
£t_Êag
(*
i‚ame
, 
Êag
 
__©åibuã__
 ((
unu£d
)))

84 
i‰eq
 
	gi‰
;

86 
°rs˝y
(
i‰
.
i‰_«me
, 
i‚ame
, (ifr.ifr_name));

89 i‡(
io˘l
(
ﬁ§_˙f
->
io˘l_s
, 
SIOCGIFFLAGS
, &
i‰
) < 0) {

90 
Ârötf
(
°dîr
, "ioctl (get interface flags)");

94 
°rs˝y
(
i‰
.
i‰_«me
, 
i‚ame
, (ifr.ifr_name));

98 i‡(!(
	gi‰
.
	gi‰_Êags
 & (
	gIFF_UP
 | 
	gIFF_RUNNING
))) {

100 
	gi‰
.
	gi‰_Êags
 |(
IFF_UP
 | 
IFF_RUNNING
);

102 i‡(
io˘l
(
ﬁ§_˙f
->
io˘l_s
, 
SIOCSIFFLAGS
, &
i‰
) < 0) {

103 
Ârötf
(
°dîr
, "ERROR(%s): %s\n", 
i‰
.
i‰_«me
, 
°ªº‹
(
î∫o
));

112 
check_öãrÁ˚_upd©es
(*
foo
 
__©åibuã__
 ((
unu£d
)))

114 
ﬁ§_if
 *
	gtmp_if
;

116 #ifde‡
DEBUG


117 
OLSR_PRINTF
(3, "Checking for updates inÅhe interface set\n");

120 
	gtmp_if
 = 
ﬁ§_˙f
->
öãrÁ˚s
;Åmp_i‡!
NULL
;Åmp_i‡
tmp_if
->
√xt
) {

121 i‡(
tmp_if
->
ho°_emul
)

124 i‡(
	gﬁ§_˙f
->
	gho°_emul
)

127 i‡(!
	gtmp_if
->
	g˙f
->
	gautodëe˘_chg
) {

128 #ifde‡
DEBUG


130 
OLSR_PRINTF
(3, "NŸ checkög i¡îÁ˚ %s\n", 
tmp_if
->
«me
);

135 i‡(
	gtmp_if
->
	gc⁄figuªd
) {

136 
chk_if_ch™ged
(
tmp_if
);

138 
chk_if_up
(
tmp_if
, 3);

153 
	$chk_if_ch™ged
(
ﬁ§_if
 *
iÁ˚
)

155 
öãrÁ˚
 *
iÂ
;

156 
i‰eq
 
i‰
;

157 
sockaddr_ö6
 
tmp_ßddr6
;

158 
if_ch™ges
;

159 
if_ch™ges
 = 0;

161 #ifde‡
DEBUG


162 
	`OLSR_PRINTF
(3, "Checkög i‡%†i†£àdow¿‹ ch™ged\n", 
iÁ˚
->
«me
);

165 i‡(
iÁ˚
->
ho°_emul
)

168 
iÂ
 = 
iÁ˚
->
öãrf
;

170 i‡(
iÂ
 =
NULL
) {

172 
iÁ˚
->
c⁄figuªd
 = 0;

176 
	`mem£t
(&
i‰
, 0, (
i‰eq
));

177 
	`°rs˝y
(
i‰
.
i‰_«me
, 
iÁ˚
->
«me
, (ifr.ifr_name));

180 i‡(
	`io˘l
(
ﬁ§_˙f
->
io˘l_s
, 
SIOCGIFFLAGS
, &
i‰
) < 0) {

181 
	`OLSR_PRINTF
(3, "Nÿsuch i¡îÁ˚: %s\n", 
iÁ˚
->
«me
);

182 
ªmove_öãrÁ˚
;

185 
iÂ
->
öt_Êags
 = 
i‰
.
i‰_Êags
;

191 i‡((
iÂ
->
öt_Êags
 & 
IFF_UP
Ë=0 || (iÂ->öt_Êag†& 
IFF_RUNNING
) == 0) {

192 
	`OLSR_PRINTF
(1, "\tI¡îÁ˚ %†nŸ u∞™dÑu¬ög -Ñemovög it...\n", 
iÁ˚
->
«me
);

193 
ªmove_öãrÁ˚
;

203 i‡((
ﬁ§_˙f
->
ù_vîsi⁄
 =
AF_INET
Ë&& !
iÁ˚
->
˙f
->
ùv4_mu…iˇ°
.
v4
.
s_addr
 &&

204 (!(
iÂ
->
öt_Êags
 & 
IFF_BROADCAST
))) {

205 
	`OLSR_PRINTF
(3, "\tNo broadcast -Ñemoving\n");

206 
ªmove_öãrÁ˚
;

209 i‡(
iÂ
->
öt_Êags
 & 
IFF_LOOPBACK
) {

210 
	`OLSR_PRINTF
(3, "\tThis isáÜoopback interface -Ñemoving it...\n");

211 
ªmove_öãrÁ˚
;

214 
iÂ
->
is_hcif
 = 
Ál£
;

217 
iÂ
->
is_wúñess
 = 
	`check_wúñess_öãrÁ˚
(
i‰
.
i‰_«me
);

220 i‡(
iÁ˚
->
˙f
->
weight
.
fixed
)

221 
iÂ
->
öt_mëric
 = 
iÁ˚
->
˙f
->
weight
.
vÆue
;

223 
iÂ
->
öt_mëric
 = 
	`ˇlcuœã_if_mëric
(
i‰
.
i‰_«me
);

226 i‡(
	`io˘l
(
ﬁ§_˙f
->
io˘l_s
, 
SIOCGIFMTU
, &
i‰
) < 0)

227 
iÂ
->
öt_mtu
 = 0;

229 
i‰
.
i‰_mtu
 -(
ﬁ§_˙f
->
ù_vîsi⁄
 =
AF_INET6
Ë? 
UDP_IPV6_HDRSIZE
 : 
UDP_IPV4_HDRSIZE
;

231 i‡(
iÂ
->
öt_mtu
 !
i‰
.
i‰_mtu
) {

232 
iÂ
->
öt_mtu
 = 
i‰
.
i‰_mtu
;

234 
	`√t_ªmove_buf„r
(
iÂ
);

235 
	`√t_add_buf„r
(
iÂ
);

240 
iÂ
->
if_ödex
 = 
	`if_«mëoödex
(
i‰
.
i‰_«me
);

247 i‡(
ﬁ§_˙f
->
ù_vîsi⁄
 =
AF_INET6
) {

248 
ùaddr_°r
 
buf
;

251 i‡(0 =
	`gë_ùv6_addªss
(
iÁ˚
->
«me
, &
tmp_ßddr6
, (iÁ˚->
˙f
->
ùv6_§c
.
¥efix_Àn
 =0Ë? 
NULL
 : (&iface->cnf->ipv6_src))) {

252 
	`OLSR_PRINTF
(3, "\tCouldÇŸ föd i∞addªs†f‹ %†wôhÖªfix %s.\n", 
i‰
.
i‰_«me
, 
	`ﬁ§_ù_¥efix_to_°rög
(&
iÁ˚
->
˙f
->
ùv6_§c
));

253 
ªmove_öãrÁ˚
;

256 #ifde‡
DEBUG


257 
	`OLSR_PRINTF
(3, "\tAddªss: %s\n", 
	`ù6_to_°rög
(&
buf
, &
iÁ˚
->
˙f
->
ùv6_mu…iˇ°
.
v6
));

260 i‡(
	`memcmp
(&
tmp_ßddr6
.
sö6_addr
, &
iÂ
->
öt6_addr
.sö6_addr, 
ﬁ§_˙f
->
ùsize
) != 0) {

261 
	`OLSR_PRINTF
(1, "New IPáddªs†f‹ %s:\n", 
i‰
.
i‰_«me
);

262 
	`OLSR_PRINTF
(1, "\tOld: %s\n", 
	`ù6_to_°rög
(&
buf
, &
iÂ
->
öt6_addr
.
sö6_addr
));

263 
	`OLSR_PRINTF
(1, "\tNew: %s\n", 
	`ù6_to_°rög
(&
buf
, &
tmp_ßddr6
.
sö6_addr
));

268 i‡(
	`memcmp
(&
ﬁ§_˙f
->
maö_addr
, &
tmp_ßddr6
.
sö6_addr
, ol§_˙f->
ùsize
) == 0) {

270 
	`mem˝y
(&
ﬁ§_˙f
->
maö_addr
, &
tmp_ßddr6
.
sö6_addr
, ol§_˙f->
ùsize
);

274 
	`mem˝y
(&
iÂ
->
öt6_addr
.
sö6_addr
, &
tmp_ßddr6
.sö6_addr, 
ﬁ§_˙f
->
ùsize
);

275 
	`mem˝y
(&
iÂ
->
ù_addr
, &
tmp_ßddr6
.
sö6_addr
, 
ﬁ§_˙f
->
ùsize
);

277 
	`ﬁ§_åiggî_ifch™ge
(
iÂ
->
if_ödex
, iÂ, 
IFCHG_IF_UPDATE
);

280 
	`ﬁ§_ªmove_öãrÁ˚
(
iÁ˚
);

281 
	`chk_if_up
(
iÁ˚
,3);

288 
ùaddr_°r
 
buf
;

290 i‡(
	`io˘l
(
ﬁ§_˙f
->
io˘l_s
, 
SIOCGIFADDR
, &
i‰
) < 0) {

291 
	`OLSR_PRINTF
(1, "\tCouldÇot getáddress of interface -Ñemoving it\n");

292 
ªmove_öãrÁ˚
;

294 #ifde‡
DEBUG


295 
	`OLSR_PRINTF
(3, "\tAddªss:%s\n", 
	`sockaddr4_to_°rög
(&
buf
, &
i‰
.
i‰_addr
));

298 i‡(
memcmp


299 (&((
sockaddr_ö
 *)
	`ARM_NOWARN_ALIGN
(&
iÂ
->
öt_addr
))->
sö_addr
.
s_addr
, &((sockaddr_ö *)ARM_NOWARN_ALIGN(&
i‰
.
i‰_addr
))->sin_addr.s_addr,

300 
ﬁ§_˙f
->
ùsize
) != 0) {

302 
	`OLSR_PRINTF
(1, "IPv4áddªs†ch™ged f‹ %s\n", 
i‰
.
i‰_«me
);

303 
	`OLSR_PRINTF
(1, "\tOld:%s\n", 
	`ù4_to_°rög
(&
buf
, 
iÂ
->
öt_addr
.
sö_addr
));

304 
	`OLSR_PRINTF
(1, "\tNew:%s\n", 
	`sockaddr4_to_°rög
(&
buf
, &
i‰
.
i‰_addr
));

306 
iÂ
->
öt_addr
 = *(
sockaddr_ö
 *)
	`ARM_NOWARN_ALIGN
(&
i‰
.
i‰_addr
);

309 i‡(
	`memcmp
(&
ﬁ§_˙f
->
maö_addr
, &
iÂ
->
ù_addr
, ol§_˙f->
ùsize
) == 0) {

310 
	`OLSR_PRINTF
(1, "New maöáddªss: %s\n", 
	`sockaddr4_to_°rög
(&
buf
, &
i‰
.
i‰_addr
));

311 
	`ﬁ§_sy¶og
(
OLSR_LOG_INFO
, "New maöáddªss: %s\n", 
	`sockaddr4_to_°rög
(&
buf
, &
i‰
.
i‰_addr
));

312 
	`mem˝y
(&
ﬁ§_˙f
->
maö_addr
, &((
sockaddr_ö
 *)&
i‰
.
i‰_addr
)->
sö_addr
.
s_addr
, ol§_˙f->
ùsize
);

315 
	`mem˝y
(&
iÂ
->
ù_addr
, &((
sockaddr_ö
 *)
	`ARM_NOWARN_ALIGN
(&
i‰
.
i‰_addr
))->
sö_addr
.
s_addr
, 
ﬁ§_˙f
->
ùsize
);

318 
	`ﬁ§_ªmove_öãrÁ˚
(
iÁ˚
);

319 
	`chk_if_up
(
iÁ˚
,3);

324 i‡(
	`io˘l
(
ﬁ§_˙f
->
io˘l_s
, 
SIOCGIFNETMASK
, &
i‰
) < 0) {

325 
	`ﬁ§_sy¶og
(
OLSR_LOG_ERR
, "%s: io˘»(gë brﬂdaddr)", 
i‰
.
i‰_«me
);

326 
ªmove_öãrÁ˚
;

328 #ifde‡
DEBUG


329 
	`OLSR_PRINTF
(3, "\tNëmask:%s\n", 
	`sockaddr4_to_°rög
(&
buf
, &
i‰
.
i‰_√tmask
));

332 i‡(
memcmp


333 (&((
sockaddr_ö
 *)
	`ARM_NOWARN_ALIGN
(&
iÂ
->
öt_√tmask
))->
sö_addr
.
s_addr
, &((sockaddr_ö *)ARM_NOWARN_ALIGN(&
i‰
.
i‰_√tmask
))->sin_addr.s_addr,

334 
ﬁ§_˙f
->
ùsize
) != 0) {

336 
	`OLSR_PRINTF
(1, "IPv4Çëmask ch™ged f‹ %s\n", 
i‰
.
i‰_«me
);

337 
	`OLSR_PRINTF
(1, "\tOld:%s\n", 
	`ù4_to_°rög
(&
buf
, 
iÂ
->
öt_√tmask
.
sö_addr
));

338 
	`OLSR_PRINTF
(1, "\tNew:%s\n", 
	`sockaddr4_to_°rög
(&
buf
, &
i‰
.
i‰_√tmask
));

340 
iÂ
->
öt_√tmask
 = *(
sockaddr_ö
 *)
	`ARM_NOWARN_ALIGN
(&
i‰
.
i‰_√tmask
);

342 
if_ch™ges
 = 1;

345 i‡(!
iÁ˚
->
˙f
->
ùv4_mu…iˇ°
.
v4
.
s_addr
) {

347 i‡(
	`io˘l
(
ﬁ§_˙f
->
io˘l_s
, 
SIOCGIFBRDADDR
, &
i‰
) < 0) {

348 
	`ﬁ§_sy¶og
(
OLSR_LOG_ERR
, "%s: io˘»(gë brﬂdaddr)", 
i‰
.
i‰_«me
);

349 
ªmove_öãrÁ˚
;

351 #ifde‡
DEBUG


352 
	`OLSR_PRINTF
(3, "\tBrﬂdˇ°áddªss:%s\n", 
	`sockaddr4_to_°rög
(&
buf
, &
i‰
.
i‰_brﬂdaddr
));

355 i‡(
iÂ
->
öt_brﬂdaddr
.
sö_addr
.
s_addr
 !((
sockaddr_ö
 *)
	`ARM_NOWARN_ALIGN
(&
i‰
.
i‰_brﬂdaddr
))->sin_addr.s_addr) {

357 
	`OLSR_PRINTF
(1, "IPv4 brﬂdˇ° ch™ged f‹ %s\n", 
i‰
.
i‰_«me
);

358 
	`OLSR_PRINTF
(1, "\tOld:%s\n", 
	`ù4_to_°rög
(&
buf
, 
iÂ
->
öt_brﬂdaddr
.
sö_addr
));

359 
	`OLSR_PRINTF
(1, "\tNew:%s\n", 
	`sockaddr4_to_°rög
(&
buf
, &
i‰
.
i‰_brﬂdaddr
));

361 
iÂ
->
öt_brﬂdaddr
 = *(
sockaddr_ö
 *)
	`ARM_NOWARN_ALIGN
(&
i‰
.
i‰_brﬂdaddr
);

362 
if_ch™ges
 = 1;

367 i‡(
if_ch™ges
)

368 
	`ﬁ§_åiggî_ifch™ge
(
iÂ
->
if_ödex
, iÂ, 
IFCHG_IF_UPDATE
);

370  
if_ch™ges
;

372 
ªmove_öãrÁ˚
:

374 
	`ﬁ§_ªmove_öãrÁ˚
(
iÁ˚
);

376 
	}
}

383 
	$add_hemu_if
(
ﬁ§_if
 *
iÁ˚
)

385 
öãrÁ˚
 *
iÂ
;

386 
ﬁ§_ù_addr
 
nuŒ_addr
;

387 
uöt32_t
 
addr
[4];

388 
ùaddr_°r
 
buf
;

389 
size_t
 
«me_size
;

391 i‡(!
iÁ˚
->
ho°_emul
)

394 
iÂ
 = 
	`ﬁ§_mÆloc
((
öãrÁ˚
), "Interface update 2");

396 
	`mem£t
(
iÂ
, 0, (
öãrÁ˚
));

399 
iÂ
->
ﬁ§_if
 = 
iÁ˚
;

401 
iÁ˚
->
c⁄figuªd
 = 
åue
;

402 
iÁ˚
->
öãrf
 = 
iÂ
;

404 
«me_size
 = 
	`°æí
("hcif01") + 1;

405 
iÂ
->
is_hcif
 = 
åue
;

406 
iÂ
->
öt_«me
 = 
	`ﬁ§_mÆloc
(
«me_size
, "Interface update 3");

407 
iÂ
->
öt_mëric
 = 0;

409 
	`°rs˝y
(
iÂ
->
öt_«me
, "hcif01", 
«me_size
);

411 
	`OLSR_PRINTF
(1, "Addög %s(ho°Émuœti⁄):\n", 
iÂ
->
öt_«me
);

413 
	`OLSR_PRINTF
(1, " Addªss:%s\n", 
	`ﬁ§_ù_to_°rög
(&
buf
, &
iÁ˚
->
hemu_ù
));

415 
	`OLSR_PRINTF
(1, " NB! This isáÉmulated interface\nÅhat doesÇotÉxist inÅhe kernel!\n");

417 
iÂ
->
öt_√xt
 = 
i‚ë
;

418 
i‚ë
 = 
iÂ
;

420 
	`mem£t
(&
nuŒ_addr
, 0, 
ﬁ§_˙f
->
ùsize
);

421 i‡(
	`ùequÆ
(&
nuŒ_addr
, &
ﬁ§_˙f
->
maö_addr
)) {

422 
ﬁ§_˙f
->
maö_addr
 = 
iÁ˚
->
hemu_ù
;

423 
ﬁ§_˙f
->
uniˇ°_§c_ù
 = 
iÁ˚
->
hemu_ù
;

424 
	`OLSR_PRINTF
(1, "New maöáddªss: %s\n", 
	`ﬁ§_ù_to_°rög
(&
buf
, &
ﬁ§_˙f
->
maö_addr
));

425 
	`ﬁ§_sy¶og
(
OLSR_LOG_INFO
, "New maöáddªss: %s\n", 
	`ﬁ§_ù_to_°rög
(&
buf
, &
ﬁ§_˙f
->
maö_addr
));

428 
iÂ
->
öt_mtu
 = 
OLSR_DEFAULT_MTU
;

430 
iÂ
->
öt_mtu
 -(
ﬁ§_˙f
->
ù_vîsi⁄
 =
AF_INET6
Ë? 
UDP_IPV6_HDRSIZE
 : 
UDP_IPV4_HDRSIZE
;

433 
	`√t_add_buf„r
(
iÂ
);

435 i‡(
ﬁ§_˙f
->
ù_vîsi⁄
 =
AF_INET
) {

436 
sockaddr_ö
 
sö
;

438 
	`mem£t
(&
sö
, 0, (sin));

440 
sö
.
sö_Ámûy
 = 
AF_INET
;

441 
sö
.
sö_addr
.
s_addr
 = 
	`ht⁄l
(
INADDR_LOOPBACK
);

442 
sö
.
sö_p‹t
 = 
	`ht⁄s
(10150);

445 
iÂ
->
ù_addr
.
v4
 = 
iÁ˚
->
hemu_ù
.v4;

447 
	`mem˝y
(&((
sockaddr_ö
 *)&
iÂ
->
öt_addr
)->
sö_addr
, &
iÁ˚
->
hemu_ù
, 
ﬁ§_˙f
->
ùsize
);

455 
iÂ
->
ﬁ§_sockë
 = 
	`gëhemusockë
(&
sö
);

457 i‡(
iÂ
->
ﬁ§_sockë
 < 0) {

458 
	`Ârötf
(
°dîr
, "CouldÇot initialize socket...Éxiting!\n\n");

459 
	`ﬁ§_sy¶og
(
OLSR_LOG_ERR
, "CouldÇot initialize socket...Éxiting!\n\n");

460 
ﬁ§_˙f
->
exô_vÆue
 = 
EXIT_FAILURE
;

461 
	`kûl
(
	`gëpid
(), 
SIGINT
);

466 
	`mem˝y
(&
iÂ
->
ù_addr
, &
iÁ˚
->
hemu_ù
, 
ﬁ§_˙f
->
ùsize
);

475 
iÂ
->
ﬁ§_sockë
 = 
	`gëhcsockë6
(&
addrsock6
, 
BUFSPACE
, iÂ->
öt_«me
);

477 
	`joö_mˇ°
(
iÂ
, iÂ->
ﬁ§_sockë
);

479 i‡(
iÂ
->
ﬁ§_sockë
 < 0) {

480 
	`Ârötf
(
°dîr
, "CouldÇot initialize socket...Éxiting!\n\n");

481 
	`ﬁ§_sy¶og
(
OLSR_LOG_ERR
, "CouldÇot initialize socket...Éxiting!\n\n");

482 
ﬁ§_˙f
->
exô_vÆue
 = 
EXIT_FAILURE
;

483 
	`kûl
(
	`gëpid
(), 
SIGINT
);

489 
	`mem˝y
(
addr
, 
iÁ˚
->
hemu_ù
.
v6
.
s6_addr
, 
ﬁ§_˙f
->
ùsize
);

490 
addr
[0] = 
	`ht⁄l
(addr[0]);

491 
addr
[1] = 
	`ht⁄l
(addr[1]);

492 
addr
[2] = 
	`ht⁄l
(addr[2]);

493 
addr
[3] = 
	`ht⁄l
(addr[3]);

495 i‡(
	`£nd
(
iÂ
->
ﬁ§_sockë
, 
addr
, 
ﬁ§_˙f
->
ùsize
, 0) != ()olsr_cnf->ipsize) {

496 
	`Ârötf
(
°dîr
, "Error sending IP!");

500 
	`add_ﬁ§_sockë
(
iÂ
->
ﬁ§_sockë
, &
ﬁ§_öput_ho°emu
, 
NULL
, NULL, 
SP_PR_READ
);

506 
iÂ
->
hñlo_gí_timî
 =

507 
	`ﬁ§_°¨t_timî
(
iÁ˚
->
˙f
->
hñlo_∑øms
.
emissi⁄_öãrvÆ
 * 
MSEC_PER_SEC
, 
HELLO_JITTER
, 
OLSR_TIMER_PERIODIC
,

508 
ﬁ§_˙f
->
lq_Àvñ
 =0 ? &
gíî©e_hñlo
 : &
ﬁ§_ouçut_lq_hñlo
, 
iÂ
, 
hñlo_gí_timî_cookõ
);

509 
iÂ
->
tc_gí_timî
 =

510 
	`ﬁ§_°¨t_timî
(
iÁ˚
->
˙f
->
tc_∑øms
.
emissi⁄_öãrvÆ
 * 
MSEC_PER_SEC
, 
TC_JITTER
, 
OLSR_TIMER_PERIODIC
,

511 
ﬁ§_˙f
->
lq_Àvñ
 =0 ? &
gíî©e_tc
 : &
ﬁ§_ouçut_lq_tc
, 
iÂ
, 
tc_gí_timî_cookõ
);

512 
iÂ
->
mid_gí_timî
 =

513 
	`ﬁ§_°¨t_timî
(
iÁ˚
->
˙f
->
mid_∑øms
.
emissi⁄_öãrvÆ
 * 
MSEC_PER_SEC
, 
MID_JITTER
, 
OLSR_TIMER_PERIODIC
, &
gíî©e_mid
, 
iÂ
,

514 
mid_gí_timî_cookõ
);

515 
iÂ
->
h«_gí_timî
 =

516 
	`ﬁ§_°¨t_timî
(
iÁ˚
->
˙f
->
h«_∑øms
.
emissi⁄_öãrvÆ
 * 
MSEC_PER_SEC
, 
HNA_JITTER
, 
OLSR_TIMER_PERIODIC
, &
gíî©e_h«
, 
iÂ
,

517 
h«_gí_timî_cookõ
);

520 i‡(
ﬁ§_˙f
->
max_tc_vtime
 < 
iÁ˚
->
˙f
->
tc_∑øms
.
emissi⁄_öãrvÆ
)

521 
ﬁ§_˙f
->
max_tc_vtime
 = 
iÁ˚
->
˙f
->
tc_∑øms
.
emissi⁄_öãrvÆ
;

523 
iÂ
->
hñlo_ëime
 = (
ﬁ§_ª…ime
Ë(
iÁ˚
->
˙f
->
hñlo_∑øms
.
emissi⁄_öãrvÆ
 * 
MSEC_PER_SEC
);

524 
iÂ
->
vÆtimes
.
hñlo
 = 
	`ª…ime_to_me
(
iÁ˚
->
˙f
->
hñlo_∑øms
.
vÆidôy_time
 * 
MSEC_PER_SEC
);

525 
iÂ
->
vÆtimes
.
tc
 = 
	`ª…ime_to_me
(
iÁ˚
->
˙f
->
tc_∑øms
.
vÆidôy_time
 * 
MSEC_PER_SEC
);

526 
iÂ
->
vÆtimes
.
mid
 = 
	`ª…ime_to_me
(
iÁ˚
->
˙f
->
mid_∑øms
.
vÆidôy_time
 * 
MSEC_PER_SEC
);

527 
iÂ
->
vÆtimes
.
h«
 = 
	`ª…ime_to_me
(
iÁ˚
->
˙f
->
h«_∑øms
.
vÆidôy_time
 * 
MSEC_PER_SEC
);

529 
iÂ
->
mode
 = 
iÁ˚
->
˙f
->mode;

532 
	}
}

534 
	gba£«me°r
[32];

535 c⁄° *
if_ba£«me
(c⁄° *
«me
);

537 
	$if_ba£«me
(c⁄° *
«me
)

539 *
p
 = 
	`°rchr
(
«me
, ':');

540 i‡(
NULL
 =
p
 ||Ö - 
«me
 >()((
ba£«me°r
) / (basenamestr[0]) - 1)) {

541  
«me
;

543 
	`mem˝y
(
ba£«me°r
, 
«me
, 
p
 -Çame);

544 
ba£«me°r
[
p
 - 
«me
] = 0;

545  
ba£«me°r
;

546 
	}
}

557 
chk_if_up
(
ﬁ§_if
 *
iÁ˚
, 
debuglvl
 
__©åibuã__
 ((
unu£d
)))

559 
öãrÁ˚
 
	gifs
, *
	giÂ
;

560 
i‰eq
 
	gi‰
;

561 
ﬁ§_ù_addr
 
	gnuŒ_addr
;

562 
size_t
 
	g«me_size
;

563 #ifde‡
löux


564 
	g¥e˚dí˚
 = 
IPTOS_PREC
(
ﬁ§_˙f
->
tos
);

565 
	gtos_bôs
 = 
ﬁ§_˙f
->
tos
;

568 i‡(
	giÁ˚
->
	gho°_emul
)

571 
mem£t
(&
i‰
, 0, (
i‰eq
));

572 
mem£t
(&
ifs
, 0, (
öãrÁ˚
));

573 
°rs˝y
(
i‰
.
i‰_«me
, 
iÁ˚
->
«me
, (ifr.ifr_name));

575 
OLSR_PRINTF
(
debuglvl
, "Checkög %s:\n", 
i‰
.
i‰_«me
);

578 i‡(
io˘l
(
ﬁ§_˙f
->
io˘l_s
, 
SIOCGIFFLAGS
, &
i‰
) < 0) {

579 
OLSR_PRINTF
(
debuglvl
, "\tNo such interface!\n");

583 
	gifs
.
	göt_Êags
 = 
i‰
.
i‰_Êags
;

585 i‡––(
	gifs
.
	göt_Êags
 & 
	gIFF_UP
Ë=0Ë|| ( (
ifs
.
öt_Êags
 & 
IFF_RUNNING
) == 0) ) {

586 
OLSR_PRINTF
(
debuglvl
, "\tInterfaceÇot up &Ñunning - skipping it...\n");

591 i‡((
	gﬁ§_˙f
->
	gù_vîsi⁄
 =
AF_INET
Ë&& !
iÁ˚
->
˙f
->
ùv4_mu…iˇ°
.
v4
.
s_addr
 &&

592 (!(
ifs
.
öt_Êags
 & 
IFF_BROADCAST
))) {

593 
OLSR_PRINTF
(
debuglvl
, "\tNo broadcast - skipping\n");

597 i‡(
	gifs
.
	göt_Êags
 & 
	gIFF_LOOPBACK
) {

598 
OLSR_PRINTF
(
debuglvl
, "\tThis isáÜoopback interface - skipping it...\n");

602 
	gifs
.
	gis_hcif
 = 
Ál£
;

605 
	gifs
.
	gis_wúñess
 = 
check_wúñess_öãrÁ˚
(
i‰
.
i‰_«me
);

607 i‡(
	gifs
.
	gis_wúñess
)

608 
OLSR_PRINTF
(
debuglvl
, "\tWireless interface detected\n");

610 
OLSR_PRINTF
(
debuglvl
, "\tNotá wireless interface\n");

613 i‡(
	gﬁ§_˙f
->
	gù_vîsi⁄
 =
AF_INET6
) {

615 
ùaddr_°r
 
buf
;

617 i‡(0 =
gë_ùv6_addªss
(
iÁ˚
->
«me
, &
ifs
.
öt6_addr
, (iÁ˚->
˙f
->
ùv6_§c
.
¥efix_Àn
 =0Ë? 
NULL
 : (&iface->cnf->ipv6_src))) {

618 
OLSR_PRINTF
(3, "\tCouldÇŸ föd i∞addªs†f‹ %†wôhÖªfix %s.\n", 
i‰
.
i‰_«me
, 
ﬁ§_ù_¥efix_to_°rög
(&
iÁ˚
->
˙f
->
ùv6_§c
));

621 
OLSR_PRINTF
(
debuglvl
, "\tAddªss: %s\n", 
ù6_to_°rög
(&
buf
, &
iÁ˚
->
˙f
->
ùv6_mu…iˇ°
.
v6
));

624 
mem£t
(&
ifs
.
öt6_mu…addr
, 0, (ifs.int6_multaddr));

625 
	gifs
.
	göt6_mu…addr
.
	gsö6_Ámûy
 = 
AF_INET6
;

626 
	gifs
.
	göt6_mu…addr
.
	gsö6_Êowöfo
 = 
ht⁄l
(0);

627 
	gifs
.
	göt6_mu…addr
.
	gsö6_sc›e_id
 = 
if_«mëoödex
(
i‰
.
i‰_«me
);

628 
	gifs
.
	göt6_mu…addr
.
	gsö6_p‹t
 = 
ht⁄s
(
ﬁ§_˙f
->
ﬁ§p‹t
);

629 
	gifs
.
	göt6_mu…addr
.
	gsö6_addr
 = 
iÁ˚
->
˙f
->
ùv6_mu…iˇ°
.
v6
;

631 #ifde‡
__MacOSX__


632 
	gifs
.
	göt6_mu…addr
.
	gsö6_sc›e_id
 = 0;

635 
OLSR_PRINTF
(
debuglvl
, "\tMu…iˇ°: %s\n", 
ù6_to_°rög
(&
buf
, &
ifs
.
öt6_mu…addr
.
sö6_addr
));

641 i‡(
	giÁ˚
->
	g˙f
->
	gùv4_§c
.
	gv4
.
	gs_addr
) {

642 
	gifs
.
	göt_addr
.
	gsö_addr
 = 
iÁ˚
->
˙f
->
ùv4_§c
.
v4
;

645 i‡(
io˘l
(
ﬁ§_˙f
->
io˘l_s
, 
SIOCGIFADDR
, &
i‰
) < 0) {

646 
OLSR_PRINTF
(
debuglvl
, "\tCouldÇot getáddress of interface - skipping it\n");

650 
	gifs
.
	göt_addr
 = *(
sockaddr_ö
 *)
ARM_NOWARN_ALIGN
(&
i‰
.
i‰_addr
);

653 i‡(
io˘l
(
ﬁ§_˙f
->
io˘l_s
, 
SIOCGIFNETMASK
, &
i‰
) < 0) {

654 
ﬁ§_sy¶og
(
OLSR_LOG_ERR
, "%s: io˘»(gëÇëmask)", 
i‰
.
i‰_«me
);

658 
	gifs
.
	göt_√tmask
 = *(
sockaddr_ö
 *)
ARM_NOWARN_ALIGN
(&
i‰
.
i‰_√tmask
);

661 i‡(
	giÁ˚
->
	g˙f
->
	gùv4_mu…iˇ°
.
	gv4
.
	gs_addr
) {

663 
mem˝y
(&((
sockaddr_ö
 *)&
ifs
.
öt_brﬂdaddr
)->
sö_addr
.
s_addr
, &
iÁ˚
->
˙f
->
ùv4_mu…iˇ°
.
v4
, (
uöt32_t
));

666 i‡(
io˘l
(
ﬁ§_˙f
->
io˘l_s
, 
SIOCGIFBRDADDR
, &
i‰
) < 0) {

667 
ﬁ§_sy¶og
(
OLSR_LOG_ERR
, "%s: io˘»(gë brﬂdaddr)", 
i‰
.
i‰_«me
);

671 
	gifs
.
	göt_brﬂdaddr
 = *(
sockaddr_ö
 *)
ARM_NOWARN_ALIGN
(&
i‰
.
i‰_brﬂdaddr
);

676 
√t_os_£t_if›ti⁄s
(
if_ba£«me
(
i‰
.
i‰_«me
), &
ifs
);

681 
	gifs
.
	gif_ödex
 = 
if_«mëoödex
(
i‰
.
i‰_«me
);

684 i‡(
	giÁ˚
->
	g˙f
->
	gweight
.
	gfixed
)

685 
	gifs
.
	göt_mëric
 = 
iÁ˚
->
˙f
->
weight
.
vÆue
;

687 
	gifs
.
	göt_mëric
 = 
ˇlcuœã_if_mëric
(
i‰
.
i‰_«me
);

688 
OLSR_PRINTF
(1, "\tMëric: %d\n", 
ifs
.
öt_mëric
);

691 i‡(
io˘l
(
ﬁ§_˙f
->
io˘l_s
, 
SIOCGIFMTU
, &
i‰
) < 0)

692 
	gifs
.
	göt_mtu
 = 
OLSR_DEFAULT_MTU
;

694 
	gifs
.
	göt_mtu
 = 
i‰
.
i‰_mtu
;

696 
	gifs
.
	göt_mtu
 -(
ﬁ§_˙f
->
ù_vîsi⁄
 =
AF_INET6
Ë? 
UDP_IPV6_HDRSIZE
 : 
UDP_IPV4_HDRSIZE
;

698 
	gifs
.
	gâl_ödex
 = -32;

701 
√t_add_buf„r
(&
ifs
);

703 
OLSR_PRINTF
(1, "\tMTU - IPhdr: %d\n", 
ifs
.
öt_mtu
);

705 
ﬁ§_sy¶og
(
OLSR_LOG_INFO
, "Addög i¡îÁ˚ %s\n", 
iÁ˚
->
«me
);

706 
OLSR_PRINTF
(1, "\tIndex %d\n", 
ifs
.
if_ödex
);

708 i‡(
	gﬁ§_˙f
->
	gù_vîsi⁄
 =
AF_INET
) {

709 
ùaddr_°r
 
buf
;

710 
OLSR_PRINTF
(1, "\tAddªss:%s\n", 
ù4_to_°rög
(&
buf
, 
ifs
.
öt_addr
.
sö_addr
));

711 
OLSR_PRINTF
(1, "\tNëmask:%s\n", 
ù4_to_°rög
(&
buf
, 
ifs
.
öt_√tmask
.
sö_addr
));

712 
OLSR_PRINTF
(1, "\tBrﬂdˇ°áddªss:%s\n", 
ù4_to_°rög
(&
buf
, 
ifs
.
öt_brﬂdaddr
.
sö_addr
));

714 
ùaddr_°r
 
	gbuf
;

715 
OLSR_PRINTF
(1, "\tAddªss: %s\n", 
ù6_to_°rög
(&
buf
, &
ifs
.
öt6_addr
.
sö6_addr
));

716 
OLSR_PRINTF
(1, "\tMu…iˇ°: %s\n", 
ù6_to_°rög
(&
buf
, &
ifs
.
öt6_mu…addr
.
sö6_addr
));

719 
	g«me_size
 = 
°æí
(
if_ba£«me
(
i‰
.
i‰_«me
)) + 1;

720 
	gifs
.
	göt_«me
 = 
ﬁ§_mÆloc
(
«me_size
, "Interface update 3");

721 
°rs˝y
(
ifs
.
öt_«me
, 
if_ba£«me
(
i‰
.
i‰_«me
), 
«me_size
);

723 i‡(
	gﬁ§_˙f
->
	gù_vîsi⁄
 =
AF_INET
) {

725 
ifs
.
ù_addr
.
v4
 = ifs.
öt_addr
.
sö_addr
;

732 
	gifs
.
	gﬁ§_sockë
 = 
gësockë
(
BUFSPACE
, &
ifs
);

733 
	gifs
.
	g£nd_sockë
 = 
gësockë
(0, &
ifs
);

735 i‡(
	gifs
.
	gﬁ§_sockë
 < 0) {

736 
Ârötf
(
°dîr
, "CouldÇot initialize socket...Éxiting!\n\n");

737 
ﬁ§_sy¶og
(
OLSR_LOG_ERR
, "CouldÇot initialize socket...Éxiting!\n\n");

738 
	gﬁ§_˙f
->
	gexô_vÆue
 = 
EXIT_FAILURE
;

739 
‰ì
(
ifs
.
öt_«me
);

740 
kûl
(
gëpid
(), 
SIGINT
);

743 i‡(
	gifs
.
	g£nd_sockë
 < 0) {

744 
OLSR_PRINTF
(1, "Warning,Åransmission socket couldÇot be initialized. Abort if-up.\n");

745 
˛o£
 (
ifs
.
ﬁ§_sockë
);

746 
‰ì
(
ifs
.
öt_«me
);

751 
	gifs
.
	gù_addr
.
	gv6
 = 
ifs
.
öt6_addr
.
sö6_addr
;

759 
	gifs
.
	gﬁ§_sockë
 = 
gësockë6
(
BUFSPACE
, &
ifs
);

760 
	gifs
.
	g£nd_sockë
 = 
gësockë6
(0, &
ifs
);

762 i‡(
	gifs
.
	gﬁ§_sockë
 < 0) {

763 
Ârötf
(
°dîr
, "CouldÇot initialize socket...Éxiting!\n\n");

764 
ﬁ§_sy¶og
(
OLSR_LOG_ERR
, "CouldÇot initialize socket...Éxiting!\n\n");

765 
	gﬁ§_˙f
->
	gexô_vÆue
 = 
EXIT_FAILURE
;

766 
‰ì
(
ifs
.
öt_«me
);

767 
kûl
(
gëpid
(), 
SIGINT
);

770 i‡(
	gifs
.
	g£nd_sockë
 < 0) {

771 
OLSR_PRINTF
(1, "Warning,Åransmission socket couldÇot be initialized. Abort if-up.\n");

772 
˛o£
 (
ifs
.
ﬁ§_sockë
);

773 
‰ì
(
ifs
.
öt_«me
);

777 
joö_mˇ°
(&
ifs
, ifs.
ﬁ§_sockë
);

778 
joö_mˇ°
(&
ifs
, ifs.
£nd_sockë
);

781 
	giÂ
 = 
ﬁ§_mÆloc
((
öãrÁ˚
), "Interface update 2");

783 
	giÁ˚
->
	gc⁄figuªd
 = 1;

784 
	giÁ˚
->
	göãrf
 = 
iÂ
;

787 
mem˝y
(
iÂ
, &
ifs
, (
öãrÁ˚
));

790 
	giÂ
->
	gﬁ§_if
 = 
iÁ˚
;

792 
	giÂ
->
	gimmedüã_£nd_tc
 = (
iÁ˚
->
˙f
->
tc_∑øms
.
emissi⁄_öãrvÆ
 < iÁ˚->˙f->
hñlo_∑øms
.emission_interval);

793 i‡(
	gﬁ§_˙f
->
	gmax_jôãr
 == 0) {

795 
ﬁ§_˙f
->
max_jôãr
 =

796 
iÂ
->
immedüã_£nd_tc
 ? 
iÁ˚
->
˙f
->
tc_∑øms
.
emissi⁄_öãrvÆ
 : iÁ˚->˙f->
hñlo_∑øms
.emission_interval;

799 
	giÂ
->
	ggí_¥›îtõs
 = 
NULL
;

800 
	giÂ
->
	göt_√xt
 = 
i‚ë
;

801 
	gi‚ë
 = 
iÂ
;

803 
£t_buf„r_timî
(
iÂ
);

806 
add_ﬁ§_sockë
(
iÂ
->
ﬁ§_sockë
, &
ﬁ§_öput
, 
NULL
, NULL, 
SP_PR_READ
);

807 
add_ﬁ§_sockë
(
iÂ
->
£nd_sockë
, &
ﬁ§_öput
, 
NULL
, NULL, 
SP_PR_READ
);

809 #ifde‡
löux


812 i‡(
£tsock›t
(
iÂ
->
£nd_sockë
, 
SOL_SOCKET
, 
SO_PRIORITY
, (*)&
¥e˚dí˚
, (precedence)) < 0) {

813 
≥º‹
("setsockopt(SO_PRIORITY)");

814 
ﬁ§_sy¶og
(
OLSR_LOG_ERR
, "OLSRD: setsockopt(SO_PRIORITY)Érror %m");

816 i‡(
£tsock›t
(
iÂ
->
£nd_sockë
, 
IPPROTO_IP
, 
IP_TOS
, (*)&
tos_bôs
, (tos_bits)) < 0) {

817 
≥º‹
("setsockopt(IP_TOS)");

818 
ﬁ§_sy¶og
(
OLSR_LOG_ERR
, "setsockopt(IP_TOS)Érror %m");

825 
	giÂ
->
	gﬁ§_£qnum
 = 
øndom
() & 0xFFFF;

830 
mem£t
(&
nuŒ_addr
, 0, 
ﬁ§_˙f
->
ùsize
);

831 i‡(
ùequÆ
(&
nuŒ_addr
, &
ﬁ§_˙f
->
maö_addr
)) {

832 
ùaddr_°r
 
	gbuf
;

833 
	gﬁ§_˙f
->
	gmaö_addr
 = 
iÂ
->
ù_addr
;

834 
	gﬁ§_˙f
->
	guniˇ°_§c_ù
 = 
iÂ
->
ù_addr
;

835 
OLSR_PRINTF
(1, "New maöáddªss: %s\n", 
ﬁ§_ù_to_°rög
(&
buf
, &
ﬁ§_˙f
->
maö_addr
));

836 
ﬁ§_sy¶og
(
OLSR_LOG_INFO
, "New maöáddªss: %s\n", 
ﬁ§_ù_to_°rög
(&
buf
, &
ﬁ§_˙f
->
maö_addr
));

842 
	giÂ
->
	ghñlo_gí_timî
 =

843 
ﬁ§_°¨t_timî
(
iÁ˚
->
˙f
->
hñlo_∑øms
.
emissi⁄_öãrvÆ
 * 
MSEC_PER_SEC
, 
HELLO_JITTER
, 
OLSR_TIMER_PERIODIC
,

844 
ﬁ§_˙f
->
lq_Àvñ
 =0 ? &
gíî©e_hñlo
 : &
ﬁ§_ouçut_lq_hñlo
, 
iÂ
, 
hñlo_gí_timî_cookõ
);

845 
	giÂ
->
	gtc_gí_timî
 =

846 
ﬁ§_°¨t_timî
(
iÁ˚
->
˙f
->
tc_∑øms
.
emissi⁄_öãrvÆ
 * 
MSEC_PER_SEC
, 
TC_JITTER
, 
OLSR_TIMER_PERIODIC
,

847 
ﬁ§_˙f
->
lq_Àvñ
 =0 ? &
gíî©e_tc
 : &
ﬁ§_ouçut_lq_tc
, 
iÂ
, 
tc_gí_timî_cookõ
);

848 
	giÂ
->
	gmid_gí_timî
 =

849 
ﬁ§_°¨t_timî
(
iÁ˚
->
˙f
->
mid_∑øms
.
emissi⁄_öãrvÆ
 * 
MSEC_PER_SEC
, 
MID_JITTER
, 
OLSR_TIMER_PERIODIC
, &
gíî©e_mid
, 
iÂ
,

850 
mid_gí_timî_cookõ
);

851 
	giÂ
->
	gh«_gí_timî
 =

852 
ﬁ§_°¨t_timî
(
iÁ˚
->
˙f
->
h«_∑øms
.
emissi⁄_öãrvÆ
 * 
MSEC_PER_SEC
, 
HNA_JITTER
, 
OLSR_TIMER_PERIODIC
, &
gíî©e_h«
, 
iÂ
,

853 
h«_gí_timî_cookõ
);

856 i‡(
	gﬁ§_˙f
->
	gmax_tc_vtime
 < 
	giÁ˚
->
	g˙f
->
	gtc_∑øms
.
	gemissi⁄_öãrvÆ
) {

857 
	gﬁ§_˙f
->
	gmax_tc_vtime
 = 
iÁ˚
->
˙f
->
tc_∑øms
.
emissi⁄_öãrvÆ
;

859 
	giÂ
->
	ghñlo_ëime
 = (
ﬁ§_ª…ime
Ë(
iÁ˚
->
˙f
->
hñlo_∑øms
.
emissi⁄_öãrvÆ
 * 
MSEC_PER_SEC
);

860 
	giÂ
->
	gvÆtimes
.
	ghñlo
 = 
ª…ime_to_me
(
iÁ˚
->
˙f
->
hñlo_∑øms
.
vÆidôy_time
 * 
MSEC_PER_SEC
);

861 
	giÂ
->
	gvÆtimes
.
	gtc
 = 
ª…ime_to_me
(
iÁ˚
->
˙f
->
tc_∑øms
.
vÆidôy_time
 * 
MSEC_PER_SEC
);

862 
	giÂ
->
	gvÆtimes
.
	gmid
 = 
ª…ime_to_me
(
iÁ˚
->
˙f
->
mid_∑øms
.
vÆidôy_time
 * 
MSEC_PER_SEC
);

863 
	giÂ
->
	gvÆtimes
.
	gh«
 = 
ª…ime_to_me
(
iÁ˚
->
˙f
->
h«_∑øms
.
vÆidôy_time
 * 
MSEC_PER_SEC
);

865 
	giÂ
->
	gmode
 = 
iÁ˚
->
˙f
->
mode
;

870 
ﬁ§_åiggî_ifch™ge
(
iÂ
->
if_ödex
, iÂ, 
IFCHG_IF_ADD
);

	@src/unix/log.c

46 
	~"../ﬁ§_cfg.h
"

47 
	~"../log.h
"

48 
	~<sy¶og.h
>

49 
	~<°d¨g.h
>

51 #ifde‡
™droid


52 
	~<™droid/log.h
>

56 
	$ﬁ§_›ílog
(c⁄° *
idít
)

58 #i‚de‡
™droid


59 
	`›ílog
(
idít
, 
LOG_PID
 | 
LOG_ODELAY
, 
LOG_DAEMON
);

60 
	`£éogmask
(
	`LOG_UPTO
(
LOG_INFO
));

64 
	}
}

66 #i‡
SYSLOG_NUMBERING


68 
	gﬁ§_sy¶og_˘r
 = 0;

71 
	$ﬁ§_sy¶og_ªÆ
(
Àvñ
, c⁄° *
f‹m©
, ...)

77 
	$ﬁ§_sy¶og
(
Àvñ
, c⁄° *
f‹m©
, ...)

82 
löux_Àvñ
;

83 
va_li°
 
¨gli°
;

85 
Àvñ
) {

86 (
OLSR_LOG_INFO
):

87 #ifde‡
™droid


88 
löux_Àvñ
 = 
ANDROID_LOG_INFO
;

90 
löux_Àvñ
 = 
LOG_INFO
;

93 (
OLSR_LOG_ERR
):

94 #ifde‡
™droid


95 
löux_Àvñ
 = 
ANDROID_LOG_ERROR
;

97 
löux_Àvñ
 = 
LOG_ERR
;

104 
	`va_°¨t
(
¨gli°
, 
f‹m©
);

105 #ifde‡
™droid


106 
	`__™droid_log_v¥öt
(
löux_Àvñ
, "ﬁ§d", 
f‹m©
, 
¨gli°
);

108 
	`vsy¶og
(
löux_Àvñ
, 
f‹m©
, 
¨gli°
);

110 
	`va_íd
(
¨gli°
);

113 
	}
}

	@src/unix/misc.c

42 
	~<°dio.h
>

43 
	~<uni°d.h
>

44 
	~"misc.h
"

45 
	~"ﬁ§_ty≥s.h
"

48 
	$˛ór_c⁄sﬁe
()

50 
Àn
 = -1;

51 
˛ór_buff
[100];

52 
i
;

54 i‡(
Àn
 < 0) {

55 
FILE
 *
pù
 = 
	`p›í
("clear", "r");

56 
Àn
 = 0;Üí < ()(
˛ór_buff
);Üen++) {

57 
c
 = 
	`fgëc
(
pù
);

58 i‡(
c
 =
EOF
)

61 
˛ór_buff
[
Àn
] = 
c
;

64 
	`p˛o£
(
pù
);

67 
i
 = 0; i < 
Àn
; i++)

68 
	`Âutc
(
˛ór_buff
[
i
], 
°dout
);

70 
	`fÊush
(
°dout
);

71 
	}
}

	@src/win32/apm.c

42 
	~"≠m.h
"

43 
	~"defs.h
"

44 
	~<°dio.h
>

45 
	~<°rög.h
>

47 
	#WIN32_LEAN_AND_MEAN


	)

48 
	~<wödows.h
>

49 #unde‡
öãrÁ˚


52 
	$≠m_öô
()

54 
ﬁ§_≠m_öfo
 
ApmInfo
;

56 
	`OLSR_PRINTF
(3, "Initializing APM\n");

58 i‡(
	`≠m_ªad
(&
ApmInfo
) < 0)

61 
	`≠m_¥ötöfo
(&
ApmInfo
);

64 
	}
}

67 
	$≠m_¥ötöfo
(
ﬁ§_≠m_öfo
 *
ApmInfo
)

69 
	`OLSR_PRINTF
(5, "APM info:\n\tAC sètu†%d\n\tB©ãryÖî˚¡agê%d%%\n\n", 
ApmInfo
->
ac_löe_°©us
, ApmInfo->
b©ãry_≥r˚¡age
);

70 
	}
}

73 
	$≠m_ªad
(
ﬁ§_≠m_öfo
 *
ApmInfo
)

75 #i‡!
deföed
 
WINCE


76 
SYSTEM_POWER_STATUS
 
PowîSèt
;

78 
	`mem£t
(
ApmInfo
, 0, (
ﬁ§_≠m_öfo
));

80 i‡(!
	`GëSy°emPowîSètus
(&
PowîSèt
))

83 
ApmInfo
->
ac_löe_°©us
 = (
PowîSèt
.
ACLöeSètus
 =1Ë? 
OLSR_AC_POWERED
 : 
OLSR_BATTERY_POWERED
;

85 
ApmInfo
->
b©ãry_≥r˚¡age
 = (
PowîSèt
.
B©ãryLi„Pî˚¡
 <= 100) ? PowerStat.BatteryLifePercent : 0;

91 
	}
}

	@src/win32/arpa/inet.h

42 #i‡!
deföed
 
TL_ARPA_INET_H_INCLUDED


44 
	#TL_ARPA_INET_H_INCLUDED


	)

46 
	#WIN32_LEAN_AND_MEAN


	)

47 
	~<wösock2.h
>

48 
	~<ws2t˝ù.h
>

49 #unde‡
öãrÁ˚


51 
öë_©⁄
(c⁄° *
˝
, 
ö_addr
 *
addr
);

52 
öë_±⁄
(
af
, c⁄° *
§c
, *
d°
);

53 *
öë_¡›
(
af
, c⁄° *
§c
, *
d°
, 
size
);

	@src/win32/ce/ws2tcpip.h

1 #i‡!
deföed
 
TL_WS2TCPIP_INCLUDED


3 
	#TL_WS2TCPIP_INCLUDED


	)

5 
	#AF_INET6
 23

	)

7 
	sö6_addr
 {

8 
	ms6_addr
[16];

11 
	ssockaddr_ö6
 {

12 
	msö6_Ámûy
;

13 
	msö6_p‹t
;

14 
	msö6_Êowöfo
;

15 
ö6_addr
 
	msö6_addr
;

16 
	msö6_sc›e_id
;

19 
	tsockÀn_t
;

21 
	ssockaddr_°‹age
 {

22 
	mdummy
[128];

25 
	#IPPROTO_IPV6
 41

	)

27 
	#IPV6_MULTICAST_IF
 9

	)

28 
	#IPV6_ADD_MEMBERSHIP
 12

	)

30 
	sùv6_mªq
 {

31 
ö6_addr
 
	mùv6mr_mu…üddr
;

32 
	mùv6mr_öãrÁ˚
;

	@src/win32/compat.c

59 
	~<uni°d.h
>

60 
	~<sys/time.h
>

61 
	~<sys/times.h
>

62 
	~<˘y≥.h
>

63 
	~<dlf˙.h
>

64 
	~<io.h
>

65 
	~<¨∑/öë.h
>

67 
	~"defs.h
"

69 
PEº‹
(*
Så
);

70 
WöSockPEº‹
(*
Så
);

73 
	$¶ìp
(
Sec
)

75 
	`SÀï
(
Sec
 * 1000);

76 
	}
}

78 
	gR™dSèã
;

81 
	$§™dom
(
Sìd
)

83 
R™dSèã
 = 
Sìd
;

84 
	}
}

87 
	$øndom
()

89 
R™dSèã
 = RandState * 1103515245 + 12345;

91  (
R™dSèã
 ^ (R™dSèã >> 16)Ë& 
RAND_MAX
;

92 
	}
}

95 
	$gëpid
()

97 
HANDLE
 
h
 = 
	`GëCuºítThªad
();

98  ()
h
;

99 
	}
}

102 
	$«no¶ìp
(
time•ec
 *
Req
, time•e¯*
Rem
)

104 
	`SÀï
(
Req
->
tv_£c
 * 1000 + Req->
tv_n£c
 / 1000000);

106 
Rem
->
tv_£c
 = 0;

107 
Rem
->
tv_n£c
 = 0;

110 
	}
}

113 
gëtimeofday
(
timevÆ
 *
TVÆ
, *
TZ⁄e
 
__©åibuã__
 ((
unu£d
)))

115 
SYSTEMTIME
 
	gSysTime
;

116 
FILETIME
 
	gFûeTime
;

117 
__öt64
 
	gTicks
;

119 
GëSy°emTime
(&
SysTime
);

120 
Sy°emTimeToFûeTime
(&
SysTime
, &
FûeTime
);

122 
	gTicks
 = ((
__öt64
Ë
FûeTime
.
dwHighD©eTime
 << 32Ë| (__öt64ËFûeTime.
dwLowD©eTime
;

124 
	gTicks
 -= 116444736000000000LL;

126 
	gTVÆ
->
	gtv_£c
 = ()(
Ticks
 / 10000000);

127 
	gTVÆ
->
	gtv_u£c
 = ()(
Ticks
 % 10000000) / 10;

132 
times
(
tms
 *
Dummy
 
__©åibuã__
 ((
unu£d
)))

134  ()
GëTickCou¡
();

138 
	$öë_©⁄
(c⁄° *
AddrSå
, 
ö_addr
 *
Addr
)

140 
Addr
->
s_addr
 = 
	`öë_addr
(
AddrSå
);

143 
	}
}

146 
	$SåEº‹
(
EºNo
)

148 
Msg
[1000];

150 #i‡!
deföed
 
WINCE


151 
	`F‹m©Mesßge
(
FORMAT_MESSAGE_FROM_SYSTEM
, 
NULL
, 
EºNo
, 
	`MAKELANGID
(
LANG_NEUTRAL
, 
SUBLANG_DEFAULT
), 
Msg
, (Msg), NULL);

153 
WideMsg
[1000];

155 
	`F‹m©Mesßge
(
FORMAT_MESSAGE_FROM_SYSTEM
, 
NULL
, 
EºNo
, 
	`MAKELANGID
(
LANG_NEUTRAL
, 
SUBLANG_DEFAULT
), 
WideMsg
, (WideMsg) / 2,

156 
NULL
);

158 i‡(
	`WideCh¨ToMu…iByã
(
CP_ACP
, 0, 
WideMsg
, -1, 
Msg
, (Msg), 
NULL
, NULL) == 0)

159 
	`°rs˝y
(
Msg
, "[cannot convert string]", (Msg));

162  
Msg
;

163 
	}
}

166 
	$PEº‹
(*
Så
)

168 
	`Ârötf
(
°dîr
, "ERROR - %s: %s", 
Så
, 
	`SåEº‹
(
	`GëLa°Eº‹
()));

169 
	}
}

172 
	$WöSockPEº‹
(*
Så
)

174 
	`Ârötf
(
°dîr
, "ERROR - %s: %s", 
Så
, 
	`SåEº‹
(
	`WSAGëLa°Eº‹
()));

175 
	}
}

180 
dl›í
(*
Name
, 
Fœgs
 
__©åibuã__
 ((
unu£d
)))

182 #i‡!
deföed
 
WINCE


183  (*)
LﬂdLibøry
(
Name
);

185 
	gWideName
[1000];

187 
Mu…iByãToWideCh¨
(
CP_ACP
, 0, 
Name
, -1, 
WideName
, (WideName));

188  (*)
LﬂdLibøry
(
WideName
);

193 
	$dl˛o£
(*
H™dÀ
)

195 
	`FªeLibøry
((
HMODULE
Ë
H™dÀ
);

197 
	}
}

200 
	$dlsym
(*
H™dÀ
, c⁄° *
Name
)

202 #i‡!
deföed
 
WINCE


203  
	`GëProcAddªss
((
HMODULE
Ë
H™dÀ
, 
Name
);

205 
WideName
[1000];

207 
	`Mu…iByãToWideCh¨
(
CP_ACP
, 0, 
Name
, -1, 
WideName
, (WideName));

208  
	`GëProcAddªss
((
HMODULE
Ë
H™dÀ
, 
WideName
);

210 
	}
}

213 
	$dÀº‹
()

215  
	`SåEº‹
(
	`GëLa°Eº‹
());

216 
	}
}

218 
	#NS_INADDRSZ
 4

	)

219 
	#NS_IN6ADDRSZ
 16

	)

220 
	#NS_INT16SZ
 2

	)

223 
	$öë_±⁄4
(c⁄° *
§c
, *
d°
)

225 
ßw_digô
, 
o˘ës
, 
ch
;

226 
u_ch¨
 
tmp
[
NS_INADDRSZ
], *
ç
;

228 
ßw_digô
 = 0;

229 
o˘ës
 = 0;

230 *(
ç
 = 
tmp
) = 0;

232 (
ch
 = *
§c
++) != '\0') {

233 i‡(
ch
 >= '0' && ch <= '9') {

234 
√w
 = *
ç
 * 10 + (
ch
 - '0');

236 i‡(
√w
 > 255)

239 *
ç
 = 
√w
;

241 i‡(!
ßw_digô
) {

242 i‡(++
o˘ës
 > 4)

245 
ßw_digô
 = 1;

249 i‡(
ch
 ='.' && 
ßw_digô
) {

250 i‡(
o˘ës
 == 4)

253 *++
ç
 = 0;

255 
ßw_digô
 = 0;

262 i‡(
o˘ës
 < 4)

265 
	`mem˝y
(
d°
, 
tmp
, 
NS_INADDRSZ
);

267 
	}
}

270 
	$öë_±⁄6
(c⁄° *
§c
, *
d°
)

272 c⁄° 
xdigôs
[] = "0123456789abcdef";

273 
u_ch¨
 
tmp
[
NS_IN6ADDRSZ
], *
ç
, *
ídp
, *
cﬁ⁄p
;

274 c⁄° *
cuπok
;

275 
ch
, 
ßw_xdigô
;

276 
u_öt
 
vÆ
;

278 
ç
 = 
	`mem£t
(
tmp
, '\0', 
NS_IN6ADDRSZ
);

279 
ídp
 = 
ç
 + 
NS_IN6ADDRSZ
;

280 
cﬁ⁄p
 = 
NULL
;

282 i‡(*
§c
 == ':')

283 i‡(*++
§c
 != ':')

286 
cuπok
 = 
§c
;

287 
ßw_xdigô
 = 0;

288 
vÆ
 = 0;

290 (
ch
 = 
	`tﬁowî
(*
§c
++)) != '\0') {

291 c⁄° *
pch
;

293 
pch
 = 
	`°rchr
(
xdigôs
, 
ch
);

295 i‡(
pch
 !
NULL
) {

296 
vÆ
 <<= 4;

297 
vÆ
 |(
pch
 - 
xdigôs
);

299 i‡(
vÆ
 > 0xffff)

302 
ßw_xdigô
 = 1;

306 i‡(
ch
 == ':') {

307 
cuπok
 = 
§c
;

309 i‡(!
ßw_xdigô
) {

310 i‡(
cﬁ⁄p
)

313 
cﬁ⁄p
 = 
ç
;

317 i‡(*
§c
 == '\0') {

321 i‡(
ç
 + 
NS_INT16SZ
 > 
ídp
)

324 *
ç
++ = (
u_ch¨
Ë(
vÆ
 >> 8) & 0xff;

325 *
ç
++ = (
u_ch¨
Ë
vÆ
 & 0xff;

326 
ßw_xdigô
 = 0;

327 
vÆ
 = 0;

331 i‡(
ch
 ='.' && ((
ç
 + 
NS_INADDRSZ
Ë<
ídp
Ë&& 
	`öë_±⁄4
(
cuπok
,Åp) > 0) {

332 
ç
 +
NS_INADDRSZ
;

333 
ßw_xdigô
 = 0;

340 i‡(
ßw_xdigô
) {

341 i‡(
ç
 + 
NS_INT16SZ
 > 
ídp
)

344 *
ç
++ = (
u_ch¨
Ë(
vÆ
 >> 8) & 0xff;

345 *
ç
++ = (
u_ch¨
Ë
vÆ
 & 0xff;

348 i‡(
cﬁ⁄p
 !
NULL
) {

349 c⁄° 
n
 = 
ç
 - 
cﬁ⁄p
;

350 
i
;

352 i‡(
ç
 =
ídp
)

355 
i
 = 1; i <
n
; i++) {

356 
ídp
[-
i
] = 
cﬁ⁄p
[
n
 - i];

357 
cﬁ⁄p
[
n
 - 
i
] = 0;

360 
ç
 = 
ídp
;

363 i‡(
ç
 !
ídp
)

366 
	`mem˝y
(
d°
, 
tmp
, 
NS_IN6ADDRSZ
);

368 
	}
}

371 
	$öë_±⁄
(
af
, c⁄° *
§c
, *
d°
)

373 
af
) {

374 
AF_INET
:

375  (
	`öë_±⁄4
(
§c
, 
d°
));

377 
AF_INET6
:

378  (
	`öë_±⁄6
(
§c
, 
d°
));

383 
	}
}

386 
	$öë_¡›4
(c⁄° *
§c
, *
d°
, 
size
)

388 c⁄° 
fmt
[] = "%u.%u.%u.%u";

389 
tmp
[ "255.255.255.255"];

391 i‡(
	`•rötf
(
tmp
, 
fmt
, 
§c
[0], src[1], src[2], src[3]Ë> 
size
)

392  (
NULL
);

394  
	`°rs˝y
(
d°
, 
tmp
, 
size
);

395 
	}
}

398 
	$öë_¡›6
(c⁄° *
§c
, *
d°
, 
size
)

400 
tmp
[ "ffff:ffff:ffff:ffff:ffff:ffff:255.255.255.255"], *
ç
;

402 
ba£
, 
Àn
;

403 } 
be°
, 
cur
;

404 
u_öt
 
w‹ds
[
NS_IN6ADDRSZ
 / 
NS_INT16SZ
];

405 
i
;

407 
	`mem£t
(
w‹ds
, '\0',  words);

409 
i
 = 0; i < 
NS_IN6ADDRSZ
; i += 2)

410 
w‹ds
[
i
 / 2] = (
§c
[i] << 8) | src[i + 1];

412 
be°
.
ba£
 = -1;

413 
cur
.
ba£
 = -1;

415 
i
 = 0; i < (
NS_IN6ADDRSZ
 / 
NS_INT16SZ
); i++) {

416 i‡(
w‹ds
[
i
] == 0) {

417 i‡(
cur
.
ba£
 == -1)

418 
cur
.
ba£
 = 
i
, cur.
Àn
 = 1;

421 
cur
.
Àn
++;

425 i‡(
cur
.
ba£
 != -1) {

426 i‡(
be°
.
ba£
 =-1 || 
cur
.
Àn
 > best.len)

427 
be°
 = 
cur
;

429 
cur
.
ba£
 = -1;

434 i‡(
cur
.
ba£
 != -1) {

435 i‡(
be°
.
ba£
 =-1 || 
cur
.
Àn
 > best.len)

436 
be°
 = 
cur
;

439 i‡(
be°
.
ba£
 !-1 && be°.
Àn
 < 2)

440 
be°
.
ba£
 = -1;

442 
ç
 = 
tmp
;

444 
i
 = 0; i < (
NS_IN6ADDRSZ
 / 
NS_INT16SZ
); i++) {

445 i‡(
be°
.
ba£
 !-1 && 
i
 >be°.ba£ && i < (be°.ba£ + be°.
Àn
)) {

446 i‡(
i
 =
be°
.
ba£
)

447 *
ç
++ = ':';

452 i‡(
i
 != 0)

453 *
ç
++ = ':';

455 i‡(
i
 =6 && 
be°
.
ba£
 =0 && (be°.
Àn
 =6 || (be°.À¿=5 && 
w‹ds
[5] == 0xffff))) {

456 i‡(!
	`öë_¡›4
(
§c
 + 12, 
ç
,  
tmp
 - (tp -Åmp)))

457  (
NULL
);

459 
ç
 +
	`°æí
(tp);

464 
ç
 +
	`•rötf
—p, "%x", 
w‹ds
[
i
]);

467 i‡(
be°
.
ba£
 !-1 && (be°.ba£ + be°.
Àn
Ë=(
NS_IN6ADDRSZ
 / 
NS_INT16SZ
))

468 *
ç
++ = ':';

470 *
ç
++ = '\0';

472 i‡((
ç
 - 
tmp
Ë> 
size
)

473  (
NULL
);

475  
	`°rs˝y
(
d°
, 
tmp
, 
size
);

476 
	}
}

479 
	$öë_¡›
(
af
, c⁄° *
§c
, *
d°
, 
size
)

481 
af
) {

482 
AF_INET
:

483  (
	`öë_¡›4
(
§c
, 
d°
, 
size
));

485 
AF_INET6
:

486  (
	`öë_¡›6
(
§c
, 
d°
, 
size
));

489  (
NULL
);

491 
	}
}

494 
	$ißây
(
fd
)

496 #i‡!
deföed
 
WINCE


497 
HANDLE
 
H™d
;

498 
CONSOLE_SCREEN_BUFFER_INFO
 
Info
;

499 
Evíts
;

501 i‡(
fd
 == 0) {

502 
H™d
 = 
	`GëStdH™dÀ
(
STD_INPUT_HANDLE
);

503  
	`GëNumbîOfC⁄sﬁeI≈utEvíts
(
H™d
, &
Evíts
);

506 i‡(
fd
 == 1) {

507 
H™d
 = 
	`GëStdH™dÀ
(
STD_OUTPUT_HANDLE
);

508  
	`GëC⁄sﬁeS¸ìnBuf„rInfo
(
H™d
, &
Info
);

511 i‡(
fd
 == 2) {

512 
H™d
 = 
	`GëStdH™dÀ
(
STD_ERROR_HANDLE
);

513  
	`GëC⁄sﬁeS¸ìnBuf„rInfo
(
H™d
, &
Info
);

520 
	}
}

522 
	#CHUNK_SIZE
 512

	)

526 
	$wrôe
(
fd
, c⁄° *
buf
, 
cou¡
)

528 
size_t
 
wrôãn
 = 0;

529 
wrôãn
 < 
cou¡
) {

530 
ssize_t
 
rc
 = 
	`£nd
(
fd
, (c⁄° *)
buf
 + 
wrôãn
,

531 
	`mö
(
cou¡
 - 
wrôãn
, 
CHUNK_SIZE
), 0);

532 i‡(
rc
 <= 0) {

535 
wrôãn
 +
rc
;

537  
wrôãn
;

538 
	}
}

	@src/win32/dlfcn.h

42 #i‡!
deföed
 
TL_DLFCN_H_INCLUDED


44 
	#TL_DLFCN_H_INCLUDED


	)

46 
	#RTLD_NOW
 0

	)

48 *
dl›í
(*
Name
, 
Fœgs
);

49 
dl˛o£
(*
H™dÀ
);

50 *
dlsym
(*
H™dÀ
, c⁄° *
Name
);

51 *
dÀº‹
();

	@src/win32/dummy.c

8 
	~"../defs.h
"

9 
	~"../kî√l_rouãs.h
"

10 
	~"../kî√l_tu¬ñ.h
"

11 
	~"../√t_os.h
"

13 
	$ﬁ§_os_öô_ùtu¬ñ
() {

15 
	}
}

17 
	$ﬁ§_os_˛ónup_ùtu¬ñ
() {

18 
	}
}

20 
ﬁ§_ùtu¬ñ_íåy
 *
ﬁ§_os_add_ùù_tu¬ñ
(
ﬁ§_ù_addr
 *
èrgë
 
__©åibuã__
 ((
unu£d
)),

21 
boﬁ
 
å™•‹tV4
 
__©åibuã__
 ((
unu£d
))) {

22  
	gNULL
;

25 
ﬁ§_os_dñ_ùù_tu¬ñ
(
ﬁ§_ùtu¬ñ_íåy
 *
t
 
__©åibuã__
 ((
unu£d
))) {

29 
boﬁ
 
ﬁ§_if_isup
(c⁄° * 
dev
 
__©åibuã__
 ((
unu£d
))) {

30  
	gÁl£
;

33 
ﬁ§_if_£t_°©e
(c⁄° *
dev
 
__©åibuã__
 ((
unu£d
)),

34 
boﬁ
 
up
 
__©åibuã__
 ((
unu£d
))) {

38 
ﬁ§_os_niô_4to6_rouã
(c⁄° 
ﬁ§_ù_¥efix
 *
d°_v4
 
__©åibuã__
 ((
unu£d
)),

39 
boﬁ
 
£t
 
__©åibuã__
 ((
unu£d
))) {

41 
ﬁ§_os_niô_6to4_rouã
(c⁄° 
ﬁ§_ù_¥efix
 *
d°_v6
 
__©åibuã__
 ((
unu£d
)),

42 
boﬁ
 
£t
 
__©åibuã__
 ((
unu£d
))) {

44 
ﬁ§_os_öëgw_tu¬ñ_rouã
(
uöt32_t
 
if_idx
 
__©åibuã__
 ((
unu£d
)),

45 
boﬁ
 
ùv4
 
__©åibuã__
 ((
unu£d
)),

46 
boﬁ
 
£t
 
__©åibuã__
 ((
unu£d
))) {

49 
ﬁ§_os_pﬁicy_ruÀ
(
Ámûy
 
__©åibuã__
 ((
unu£d
)),

50 
πèbÀ
 
__©åibuã__
 ((
unu£d
)),

51 
uöt32_t
 
¥i‹ôy
 
__©åibuã__
 ((
unu£d
)),

52 c⁄° *
if_«me
 
__©åibuã__
 ((
unu£d
)),

53 
boﬁ
 
£t
 
__©åibuã__
 ((
unu£d
))) {

57 
ﬁ§_os_loˇlho°_if
(
ﬁ§_ù_addr
 *
ù
 
__©åibuã__
 ((
unu£d
)),

58 
boﬁ
 
¸óã
 
__©åibuã__
 ((
unu£d
))) {

62 
ﬁ§_os_ifù
(
ifödex
 
__©åibuã__
 ((
unu£d
)),

63 
ﬁ§_ù_addr
 *
ù
 
__©åibuã__
 ((
unu£d
)), 
boﬁ
 
¸óã
 __attribute__ ((unused))) {

	@src/win32/ifnet.c

42 
	~<°dlib.h
>

43 
	#øndom
(Ë
	`ønd
()

	)

44 
	#§™dom
(
x
Ë
	`§™d
(x)

	)

45 
	~<wösock2.h
>

46 
	~"öãrÁ˚s.h
"

47 
	~"ﬁ§.h
"

48 
	~"∑r£r.h
"

49 
	~"defs.h
"

50 
	~"√t_os.h
"

51 
	~"i‚ë.h
"

52 
	~"gíî©e_msg.h
"

53 
	~"scheduÀr.h
"

54 
	~"m™tisß.h
"

55 
	~"lq_∑ckë.h
"

56 
	~"√t_ﬁ§.h
"

58 
	~<ùhÕ≠i.h
>

59 
	~<ùπrmib.h
>

61 
	~<¨∑/öë.h
>

63 
	#BUFSPACE
 (127*1024Ë

	)

65 
	sMibIpI¡îÁ˚Row
 {

66 
USHORT
 
	mFamûy
;

67 
ULONG64
 
	mI¡îÁ˚Luid
;

68 
ULONG
 
	mI¡îÁ˚Index
;

69 
ULONG
 
	mMaxRós£mblySize
;

70 
ULONG64
 
	mI¡îÁ˚Idítifõr
;

71 
ULONG
 
	mMöRouãrAdvîti£mítI¡îvÆ
;

72 
ULONG
 
	mMaxRouãrAdvîti£mítI¡îvÆ
;

73 
BOOLEAN
 
	mAdvîtisögE«bÀd
;

74 
BOOLEAN
 
	mF‹w¨dögE«bÀd
;

75 
BOOLEAN
 
	mWókHo°Síd
;

76 
BOOLEAN
 
	mWókHo°Re˚ive
;

77 
BOOLEAN
 
	mU£Autom©icMëric
;

78 
BOOLEAN
 
	mU£Neighb‹UƒóchabûôyDëe˘i⁄
;

79 
BOOLEAN
 
	mM™agedAddªssC⁄figuøti⁄Suµ‹ãd
;

80 
BOOLEAN
 
	mOthîSèãfulC⁄figuøti⁄Suµ‹ãd
;

81 
BOOLEAN
 
	mAdvîti£DeÁu…Rouã
;

82 
INT
 
	mRouãrDiscovîyBehavi‹
;

83 
ULONG
 
	mDadTønsmôs
;

84 
ULONG
 
	mBa£RóchabÀTime
;

85 
ULONG
 
	mRëønsmôTime
;

86 
ULONG
 
	mP©hMtuDiscovîyTimeout
;

87 
INT
 
	mLökLoˇlAddªssBehavi‹
;

88 
ULONG
 
	mLökLoˇlAddªssTimeout
;

89 
ULONG
 
	mZ⁄eIndi˚s
[16];

90 
ULONG
 
	mSôePªfixLígth
;

91 
ULONG
 
	mMëric
;

92 
ULONG
 
	mNlMtu
;

93 
BOOLEAN
 
	mC⁄√˘ed
;

94 
BOOLEAN
 
	mSuµ‹tsWakeUpP©ã∫s
;

95 
BOOLEAN
 
	mSuµ‹tsNeighb‹Discovîy
;

96 
BOOLEAN
 
	mSuµ‹tsRouãrDiscovîy
;

97 
ULONG
 
	mRóchabÀTime
;

98 
BYTE
 
	mTønsmôOfÊﬂd
;

99 
BYTE
 
	mRe˚iveOfÊﬂd
;

100 
BOOLEAN
 
	mDißbÀDeÁu…Rouãs
;

103 
	$DWORD
(
	t__°dˇŒ
 * 
	tGETIPINTERFACEENTRY
Ë(
	tMibIpI¡îÁ˚Row
 * 
	tRow
);

105 
	$DWORD
(
	t__°dˇŒ
 * 
	tGETADAPTERSADDRESSES
Ë(
	tULONG
 
	tFamûy
, 
	tDWORD
 
	tFœgs
, 
	tPVOID
 
	tRe£rved
, 
	tPIP_ADAPTER_ADDRESSES
 
	tpAd≠ãrAddªs£s
,

106 
	tPULONG
 
	tpOutBufLí
);

108 
	sI¡îÁ˚Info
 {

109 
Index
;

110 
Mtu
;

111 
Mëric
;

112 
Addr
;

113 
Mask
;

114 
Brﬂd
;

115 
Guid
[39];

118 
	`WöSockPEº‹
(*);

119 *
	`SåEº‹
(
EºNo
);

121 
	`Li°I¡îÁ˚s
();

122 
	`GëI¡Info
(
I¡îÁ˚Info
 *
Info
, *
Name
);

124 
	#MAX_INTERFACES
 100

	)

127 
	$MöiIndexToI¡Name
(*
Såög
, 
MöiIndex
)

129 c⁄° *
HexDigôs
 = "0123456789abcdef";

131 
Såög
[0] = 'i';

132 
Såög
[1] = 'f';

134 
Såög
[2] = 
HexDigôs
[(
MöiIndex
 >> 4) & 15];

135 
Såög
[3] = 
HexDigôs
[
MöiIndex
 & 15];

137 
Såög
[4] = 0;

138 
	}
}

141 
	$I¡NameToMöiIndex
(*
MöiIndex
, *
Såög
)

143 c⁄° *
HexDigôs
 = "0123456789abcdef";

144 
i
, 
k
;

145 
ch
;

147 i‡((
Såög
[0] != 'i' && String[0] != 'I') || (String[1] != 'f' && String[1] != 'F'))

150 *
MöiIndex
 = 0;

152 
i
 = 2; i < 4; i++) {

153 
ch
 = 
Såög
[
i
];

155 i‡(
ch
 >= 'A' && ch <= 'F')

156 
ch
 += 32;

158 
k
 = 0; k < 16 && 
ch
 !
HexDigôs
[k]; k++);

160 i‡(
k
 == 16)

163 *
MöiIndex
 = (*MöiIndex << 4Ë| 
k
;

167 
	}
}

170 
	$FrõndlyNameToMöiIndex
(*
MöiIndex
, *
Såög
)

172 
BuffLí
;

173 
Res
;

174 
IP_ADAPTER_ADDRESSES
 
AdAddr
[
MAX_INTERFACES
], *
WÆkîAddr
;

175 
FrõndlyName
[
MAX_INTERFACE_NAME_LEN
];

176 
HMODULE
 
h
;

177 
GETADAPTERSADDRESSES
 
pfGëAd≠ãrsAddªs£s
;

179 
h
 = 
	`LﬂdLibøry
("iphlpapi.dll");

181 i‡(
h
 =
NULL
) {

182 
	`Ârötf
(
°dîr
, "LﬂdLibøry(Ë%08lx", 
	`GëLa°Eº‹
());

186 
pfGëAd≠ãrsAddªs£s
 = (
GETADAPTERSADDRESSES
Ë
	`GëProcAddªss
(
h
, "GetAdaptersAddresses");

188 i‡(
pfGëAd≠ãrsAddªs£s
 =
NULL
) {

189 
	`Ârötf
(
°dîr
, "U«bÀÅÿu£ád≠ã∏‰õndlyÇamê(GëProcAddªss(Ë%08lx)\n", 
	`GëLa°Eº‹
());

193 
BuffLí
 = (
AdAddr
);

195 
Res
 = 
	`pfGëAd≠ãrsAddªs£s
(
AF_INET
, 0, 
NULL
, 
AdAddr
, &
BuffLí
);

197 i‡(
Res
 !
NO_ERROR
) {

198 
	`Ârötf
(
°dîr
, "GëAd≠ãrsAddªs£s(Ë%08lx", 
	`GëLa°Eº‹
());

202 
WÆkîAddr
 = 
AdAddr
; WÆkîAdd∏!
NULL
; WÆkîAdd∏WÆkîAddr->
Next
) {

203 
	`OLSR_PRINTF
(5, "Index = %08x - ", ()
WÆkîAddr
->
IfIndex
);

205 
	`wc°ombs
(
FrõndlyName
, 
WÆkîAddr
->FrõndlyName, 
MAX_INTERFACE_NAME_LEN
);

207 
	`OLSR_PRINTF
(5, "FrõndlyÇamê%s\n", 
FrõndlyName
);

209 i‡(
	`°∫cmp
(
FrõndlyName
, 
Såög
, 
MAX_INTERFACE_NAME_LEN
) == 0)

213 i‡(
WÆkîAddr
 =
NULL
) {

214 
	`Ârötf
(
°dîr
, "Nÿsuch i¡îÁ˚: %s!\n", 
Såög
);

218 *
MöiIndex
 = 
WÆkîAddr
->
IfIndex
 & 255;

221 
	}
}

224 
	$GëI¡Info
(
I¡îÁ˚Info
 *
Info
, *
Name
)

226 
MöiIndex
;

227 
Buff
[
MAX_INTERFACES
 * (
MIB_IFROW
) + 4];

228 
MIB_IFTABLE
 *
IfTabÀ
;

229 
BuffLí
;

230 
Res
;

231 
TabIdx
;

232 
IP_ADAPTER_INFO
 
AdInfo
[
MAX_INTERFACES
], *
WÆkî
;

233 
HMODULE
 
Lib
;

234 
MibIpI¡îÁ˚Row
 
Row
;

235 
GETIPINTERFACEENTRY
 
I¡îÁ˚E¡ry
;

237 i‡(
ﬁ§_˙f
->
ù_vîsi⁄
 =
AF_INET6
) {

238 
	`Ârötf
(
°dîr
, "IPv6Çot supported by GetIntInfo()!\n");

242 i‡((
Name
[0] != 'i' && Name[0] != 'I') || (Name[1] != 'f' && Name[1] != 'F')) {

243 i‡(
	`FrõndlyNameToMöiIndex
(&
MöiIndex
, 
Name
) < 0) {

244 
	`Ârötf
(
°dîr
, "Nÿsuch i¡îÁ˚: %s!\n", 
Name
);

250 i‡(
	`I¡NameToMöiIndex
(&
MöiIndex
, 
Name
) < 0) {

251 
	`Ârötf
(
°dîr
, "Nÿsuch i¡îÁ˚: %s!\n", 
Name
);

256 
IfTabÀ
 = (
MIB_IFTABLE
 *Ë
Buff
;

258 
BuffLí
 = (
Buff
);

260 
Res
 = 
	`GëIfTabÀ
(
IfTabÀ
, &
BuffLí
, 
FALSE
);

262 i‡(
Res
 !
NO_ERROR
) {

263 
	`Ârötf
(
°dîr
, "GëIfTabÀ(Ë%08lx, %s", 
Res
, 
	`SåEº‹
(Res));

267 
TabIdx
 = 0; TabIdx < ()
IfTabÀ
->
dwNumE¡rõs
; TabIdx++) {

268 
	`OLSR_PRINTF
(5, "Index = %08x\n", ()
IfTabÀ
->
èbÀ
[
TabIdx
].
dwIndex
);

270 i‡(()(
IfTabÀ
->
èbÀ
[
TabIdx
].
dwIndex
 & 255Ë=
MöiIndex
)

274 i‡(
TabIdx
 =()
IfTabÀ
->
dwNumE¡rõs
) {

275 
	`Ârötf
(
°dîr
, "Nÿsuch i¡îÁ˚: %s!\n", 
Name
);

279 
Info
->
Index
 = 
IfTabÀ
->
èbÀ
[
TabIdx
].
dwIndex
;

280 
Info
->
Mtu
 = ()
IfTabÀ
->
èbÀ
[
TabIdx
].
dwMtu
;

282 
Info
->
Mtu
 -(
ﬁ§_˙f
->
ù_vîsi⁄
 =
AF_INET6
Ë? 
UDP_IPV6_HDRSIZE
 : 
UDP_IPV4_HDRSIZE
;

284 
Lib
 = 
	`LﬂdLibøry
("iphlpapi.dll");

286 i‡(
Lib
 =
NULL
) {

287 
	`Ârötf
(
°dîr
, "C™nŸÜﬂd iphÕ≠i.dŒ: %08lx\n", 
	`GëLa°Eº‹
());

291 
I¡îÁ˚E¡ry
 = (
GETIPINTERFACEENTRY
Ë
	`GëProcAddªss
(
Lib
, "GetIpInterfaceEntry");

293 i‡(
I¡îÁ˚E¡ry
 =
NULL
) {

294 
	`OLSR_PRINTF
(5, "NotÑunning on Vista - setting interface metricÅo 0.\n");

296 
Info
->
Mëric
 = 0;

300 
	`mem£t
(&
Row
, 0, (
MibIpI¡îÁ˚Row
));

302 
Row
.
Famûy
 = 
AF_INET
;

303 
Row
.
I¡îÁ˚Index
 = 
Info
->
Index
;

305 
Res
 = 
	`I¡îÁ˚E¡ry
(&
Row
);

307 i‡(
Res
 !
NO_ERROR
) {

308 
	`Ârötf
(
°dîr
, "GëIpI¡îÁ˚E¡ry(Ë%08lx", 
Res
);

309 
	`FªeLibøry
(
Lib
);

313 
Info
->
Mëric
 = 
Row
.Metric;

315 
	`OLSR_PRINTF
(5, "Ru¬ög o¿Vi°®- i¡îÁ˚ mëri¯i†%d.\n", 
Info
->
Mëric
);

318 
	`FªeLibøry
(
Lib
);

320 
BuffLí
 = (
AdInfo
);

322 
Res
 = 
	`GëAd≠ãrsInfo
(
AdInfo
, &
BuffLí
);

324 i‡(
Res
 !
NO_ERROR
) {

325 
	`Ârötf
(
°dîr
, "GëAd≠ãrsInfo(Ë%08lx, %s", 
	`GëLa°Eº‹
(), 
	`SåEº‹
(
Res
));

329 
WÆkî
 = 
AdInfo
; WÆkî !
NULL
; WÆkî = WÆkî->
Next
) {

330 
	`OLSR_PRINTF
(5, "Index = %08x\n", ()
WÆkî
->
Index
);

332 i‡(()(
WÆkî
->
Index
 & 255Ë=
MöiIndex
)

336 i‡(
WÆkî
 =
NULL
) {

337 
	`Ârötf
(
°dîr
, "Nÿsuch i¡îÁ˚: %s!\n", 
Name
);

341 
	`öë_±⁄
(
AF_INET
, 
WÆkî
->
IpAddªssLi°
.
IpAddªss
.
Såög
, &
Info
->
Addr
);

342 
	`öë_±⁄
(
AF_INET
, 
WÆkî
->
IpAddªssLi°
.
IpMask
.
Såög
, &
Info
->
Mask
);

344 
Info
->
Brﬂd
 = Info->
Addr
 | ~Info->
Mask
;

346 
	`°rs˝y
(
Info
->
Guid
, 
WÆkî
->
Ad≠ãrName
, (Info->Guid));

348 i‡((
IfTabÀ
->
èbÀ
[
TabIdx
].
dwO≥rSètus
 !
MIB_IF_OPER_STATUS_CONNECTED


349 && 
IfTabÀ
->
èbÀ
[
TabIdx
].
dwO≥rSètus
 !
MIB_IF_OPER_STATUS_OPERATIONAL
Ë|| 
Info
->
Addr
 == 0) {

350 
	`OLSR_PRINTF
(3, "I¡îÁ˚ %†nŸ up!\n", 
Name
);

355 
	}
}

357 #i‡!
deföed
 
OID_802_11_CONFIGURATION


358 
	#OID_802_11_CONFIGURATION
 0x0d010211

	)

361 #i‡!
deföed
 
IOCTL_NDIS_QUERY_GLOBAL_STATS


362 
	#IOCTL_NDIS_QUERY_GLOBAL_STATS
 0x00170002

	)

366 
	$IsWúñess
(*
I¡Name
)

368 #i‡!
deföed
 
WINCE


369 
I¡îÁ˚Info
 
Info
;

370 
DevName
[43];

371 
HANDLE
 
DevH™d
;

372 
EºNo
;

373 
Oid
;

374 
OutBuff
[100];

375 
OutByãs
;

377 i‡(
	`GëI¡Info
(&
Info
, 
I¡Name
) < 0)

380 
DevName
[0] = '\\';

381 
DevName
[1] = '\\';

382 
DevName
[2] = '.';

383 
DevName
[3] = '\\';

385 
	`°rs˝y
(
DevName
 + 4, 
Info
.
Guid
, (DevName) - 4);

387 
	`OLSR_PRINTF
(5, "Checkög whëhî i¡îÁ˚ %†i†wúñess.\n", 
DevName
);

389 
DevH™d
 = 
	`Cª©eFûe
(
DevName
, 
GENERIC_READ
, 
FILE_SHARE_READ
 | 
FILE_SHARE_WRITE
, 
NULL
, 
OPEN_EXISTING
, 
FILE_ATTRIBUTE_NORMAL
, NULL);

391 i‡(
DevH™d
 =
INVALID_HANDLE_VALUE
) {

392 
EºNo
 = 
	`GëLa°Eº‹
();

394 
	`OLSR_PRINTF
(5, "Cª©eFûe(Ë%08x, %s\n", 
EºNo
, 
	`SåEº‹
(ErrNo));

398 
Oid
 = 
OID_802_11_CONFIGURATION
;

400 i‡(!
	`Devi˚IoC⁄åﬁ
(
DevH™d
, 
IOCTL_NDIS_QUERY_GLOBAL_STATS
, &
Oid
, (Oid), 
OutBuff
, (OutBuff), &
OutByãs
, 
NULL
)) {

401 
EºNo
 = 
	`GëLa°Eº‹
();

403 
	`Clo£H™dÀ
(
DevH™d
);

405 i‡(
EºNo
 =
ERROR_GEN_FAILURE
 || EºNÿ=
ERROR_INVALID_PARAMETER
) {

406 
	`OLSR_PRINTF
(5, "OIDÇot supported. DeviceÖrobablyÇot wireless.\n");

410 
	`OLSR_PRINTF
(5, "Devi˚IoC⁄åﬁ(Ë%08x, %s\n", 
EºNo
, 
	`SåEº‹
(ErrNo));

414 
	`Clo£H™dÀ
(
DevH™d
);

417 
	}
}

420 
	$Li°I¡îÁ˚s
()

422 
IP_ADAPTER_INFO
 
AdInfo
[
MAX_INTERFACES
], *
WÆkî
;

423 
AdInfoLí
;

424 
I¡Name
[5];

425 
IP_ADDR_STRING
 *
WÆkî2
;

426 
Res
;

427 
IsWœn
;

429 i‡(
ﬁ§_˙f
->
ù_vîsi⁄
 =
AF_INET6
) {

430 
	`Ârötf
(
°dîr
, "IPv6Çot supported by ListInterfaces()!\n");

434 
AdInfoLí
 = (
AdInfo
);

436 
Res
 = 
	`GëAd≠ãrsInfo
(
AdInfo
, &
AdInfoLí
);

438 i‡(
Res
 =
ERROR_NO_DATA
) {

439 
	`¥ötf
("No interfaces detected.\n");

443 i‡(
Res
 !
NO_ERROR
) {

444 
	`Ârötf
(
°dîr
, "GëAd≠ãrsInfo(Ë%08lx, %s", 
Res
, 
	`SåEº‹
(Res));

448 
WÆkî
 = 
AdInfo
; WÆkî !
NULL
; WÆkî = WÆkî->
Next
) {

449 
	`OLSR_PRINTF
(5, "Index = %08x\n", ()
WÆkî
->
Index
);

451 
	`MöiIndexToI¡Name
(
I¡Name
, 
WÆkî
->
Index
);

453 
	`¥ötf
("%s: ", 
I¡Name
);

455 
IsWœn
 = 
	`IsWúñess
(
I¡Name
);

457 i‡(
IsWœn
 < 0)

458 
	`¥ötf
("?");

460 i‡(
IsWœn
 == 0)

461 
	`¥ötf
("-");

464 
	`¥ötf
("+");

466 
WÆkî2
 = &
WÆkî
->
IpAddªssLi°
; WÆkî2 !
NULL
; WÆkî2 = WÆkî2->
Next
)

467 
	`¥ötf
(" %s", 
WÆkî2
->
IpAddªss
.
Såög
);

469 
	`¥ötf
("\n");

471 
	}
}

474 
	$add_hemu_if
(
ﬁ§_if
 *
iÁ˚
)

476 
öãrÁ˚
 *
iÂ
;

477 
ﬁ§_ù_addr
 
nuŒ_addr
;

478 
uöt32_t
 
addr
[4];

479 
ùaddr_°r
 
buf
;

480 
size_t
 
«me_size
;

482 i‡(!
iÁ˚
->
ho°_emul
)

485 
iÂ
 = 
	`ﬁ§_mÆloc
((
öãrÁ˚
), "Interface update 2");

487 
	`mem£t
(
iÂ
, 0, (
öãrÁ˚
));

490 
iÂ
->
ﬁ§_if
 = 
iÁ˚
;

492 
iÁ˚
->
c⁄figuªd
 = 
åue
;

493 
iÁ˚
->
öãrf
 = 
iÂ
;

495 
«me_size
 = 
	`°æí
("hcif01") + 1;

496 
iÂ
->
is_hcif
 = 
åue
;

497 
iÂ
->
öt_«me
 = 
	`ﬁ§_mÆloc
(
«me_size
, "Interface update 3");

498 
iÂ
->
öt_mëric
 = 0;

500 
	`°rs˝y
(
iÂ
->
öt_«me
, "hcif01", 
«me_size
);

502 
	`OLSR_PRINTF
(1, "Addög %s(ho°Émuœti⁄):\n", 
iÂ
->
öt_«me
);

504 
	`OLSR_PRINTF
(1, " Addªss:%s\n", 
	`ﬁ§_ù_to_°rög
(&
buf
, &
iÁ˚
->
hemu_ù
));

506 
	`OLSR_PRINTF
(1, " NB! This isáÉmulated interface\nÅhat doesÇotÉxist inÅhe kernel!\n");

508 
iÂ
->
öt_√xt
 = 
i‚ë
;

509 
i‚ë
 = 
iÂ
;

511 
	`mem£t
(&
nuŒ_addr
, 0, 
ﬁ§_˙f
->
ùsize
);

512 i‡(
	`ùequÆ
(&
nuŒ_addr
, &
ﬁ§_˙f
->
maö_addr
)) {

513 
ﬁ§_˙f
->
maö_addr
 = 
iÁ˚
->
hemu_ù
;

514 
ﬁ§_˙f
->
uniˇ°_§c_ù
 = 
iÁ˚
->
hemu_ù
;

515 
	`OLSR_PRINTF
(1, "New maöáddªss: %s\n", 
	`ﬁ§_ù_to_°rög
(&
buf
, &
ﬁ§_˙f
->
maö_addr
));

518 
iÂ
->
öt_mtu
 = 
OLSR_DEFAULT_MTU
;

520 
iÂ
->
öt_mtu
 -(
ﬁ§_˙f
->
ù_vîsi⁄
 =
AF_INET6
Ë? 
UDP_IPV6_HDRSIZE
 : 
UDP_IPV4_HDRSIZE
;

523 
	`√t_add_buf„r
(
iÂ
);

525 i‡(
ﬁ§_˙f
->
ù_vîsi⁄
 =
AF_INET
) {

526 
sockaddr_ö
 
sö
;

528 
	`mem£t
(&
sö
, 0, (sin));

530 
sö
.
sö_Ámûy
 = 
AF_INET
;

531 
sö
.
sö_addr
.
s_addr
 = 
	`ht⁄l
(
INADDR_LOOPBACK
);

532 
sö
.
sö_p‹t
 = 
	`ht⁄s
(10150);

535 
iÂ
->
ù_addr
.
v4
 = 
iÁ˚
->
hemu_ù
.v4;

537 
	`mem˝y
(&((
sockaddr_ö
 *)&
iÂ
->
öt_addr
)->
sö_addr
, &
iÁ˚
->
hemu_ù
, 
ﬁ§_˙f
->
ùsize
);

545 
iÂ
->
ﬁ§_sockë
 = 
	`gëhemusockë
(&
sö
);

547 i‡(
iÂ
->
ﬁ§_sockë
 < 0) {

548 
	`Ârötf
(
°dîr
, "CouldÇot initialize socket...Éxiting!\n\n");

549 
	`exô
(1);

554 
	`mem˝y
(&
iÂ
->
ù_addr
, &
iÁ˚
->
hemu_ù
, 
ﬁ§_˙f
->
ùsize
);

563 
iÂ
->
ﬁ§_sockë
 = 
	`gëhcsockë6
(&
addrsock6
, 
buf•a˚
, iÂ->
öt_«me
);

565 
	`joö_mˇ°
(
iÂ
, iÂ->
ﬁ§_sockë
);

567 i‡(
iÂ
->
ﬁ§_sockë
 < 0) {

568 
	`Ârötf
(
°dîr
, "CouldÇot initialize socket...Éxiting!\n\n");

569 
	`exô
(1);

575 
	`mem˝y
(
addr
, 
iÁ˚
->
hemu_ù
.
v6
.
s6_addr
, 
ﬁ§_˙f
->
ùsize
);

576 
addr
[0] = 
	`ht⁄l
(addr[0]);

577 
addr
[1] = 
	`ht⁄l
(addr[1]);

578 
addr
[2] = 
	`ht⁄l
(addr[2]);

579 
addr
[3] = 
	`ht⁄l
(addr[3]);

581 i‡(
	`£nd
(
iÂ
->
ﬁ§_sockë
, (*)
addr
, 
ﬁ§_˙f
->
ùsize
, 0) != ()olsr_cnf->ipsize) {

582 
	`Ârötf
(
°dîr
, "Error sending IP!");

586 
	`add_ﬁ§_sockë
(
iÂ
->
ﬁ§_sockë
, &
ﬁ§_öput_ho°emu
, 
NULL
, NULL, 
SP_PR_READ
);

591 
iÂ
->
hñlo_gí_timî
 =

592 
	`ﬁ§_°¨t_timî
(
iÁ˚
->
˙f
->
hñlo_∑øms
.
emissi⁄_öãrvÆ
 * 
MSEC_PER_SEC
, 
HELLO_JITTER
, 
OLSR_TIMER_PERIODIC
,

593 
ﬁ§_˙f
->
lq_Àvñ
 =0 ? &
gíî©e_hñlo
 : &
ﬁ§_ouçut_lq_hñlo
, 
iÂ
, 
hñlo_gí_timî_cookõ
);

594 
iÂ
->
tc_gí_timî
 =

595 
	`ﬁ§_°¨t_timî
(
iÁ˚
->
˙f
->
tc_∑øms
.
emissi⁄_öãrvÆ
 * 
MSEC_PER_SEC
, 
TC_JITTER
, 
OLSR_TIMER_PERIODIC
,

596 
ﬁ§_˙f
->
lq_Àvñ
 =0 ? &
gíî©e_tc
 : &
ﬁ§_ouçut_lq_tc
, 
iÂ
, 
tc_gí_timî_cookõ
);

597 
iÂ
->
mid_gí_timî
 =

598 
	`ﬁ§_°¨t_timî
(
iÁ˚
->
˙f
->
mid_∑øms
.
emissi⁄_öãrvÆ
 * 
MSEC_PER_SEC
, 
MID_JITTER
, 
OLSR_TIMER_PERIODIC
, &
gíî©e_mid
, 
iÂ
,

599 
mid_gí_timî_cookõ
);

600 
iÂ
->
h«_gí_timî
 =

601 
	`ﬁ§_°¨t_timî
(
iÁ˚
->
˙f
->
h«_∑øms
.
emissi⁄_öãrvÆ
 * 
MSEC_PER_SEC
, 
HNA_JITTER
, 
OLSR_TIMER_PERIODIC
, &
gíî©e_h«
, 
iÂ
,

602 
h«_gí_timî_cookõ
);

605 i‡(
ﬁ§_˙f
->
max_tc_vtime
 < 
iÁ˚
->
˙f
->
tc_∑øms
.
emissi⁄_öãrvÆ
)

606 
ﬁ§_˙f
->
max_tc_vtime
 = 
iÁ˚
->
˙f
->
tc_∑øms
.
emissi⁄_öãrvÆ
;

608 
iÂ
->
hñlo_ëime
 = (
ﬁ§_ª…ime
Ë(
iÁ˚
->
˙f
->
hñlo_∑øms
.
emissi⁄_öãrvÆ
 * 
MSEC_PER_SEC
);

609 
iÂ
->
vÆtimes
.
hñlo
 = 
	`ª…ime_to_me
(
iÁ˚
->
˙f
->
hñlo_∑øms
.
vÆidôy_time
 * 
MSEC_PER_SEC
);

610 
iÂ
->
vÆtimes
.
tc
 = 
	`ª…ime_to_me
(
iÁ˚
->
˙f
->
tc_∑øms
.
vÆidôy_time
 * 
MSEC_PER_SEC
);

611 
iÂ
->
vÆtimes
.
mid
 = 
	`ª…ime_to_me
(
iÁ˚
->
˙f
->
mid_∑øms
.
vÆidôy_time
 * 
MSEC_PER_SEC
);

612 
iÂ
->
vÆtimes
.
h«
 = 
	`ª…ime_to_me
(
iÁ˚
->
˙f
->
h«_∑øms
.
vÆidôy_time
 * 
MSEC_PER_SEC
);

614 
iÂ
->
mode
 = 
iÁ˚
->
˙f
->mode;

617 
	}
}

620 
	$chk_if_ch™ged
(
ﬁ§_if
 *
I¡C⁄f
)

622 
ùaddr_°r
 
buf
;

623 
öãrÁ˚
 *
I¡
;

624 
I¡îÁ˚Info
 
Info
;

625 
Res
;

626 
IsWœn
;

627 
ﬁ§_ù_addr
 
OldVÆ
, 
NewVÆ
;

628 
sockaddr_ö
 *
AddrIn
;

630 i‡(
ﬁ§_˙f
->
ù_vîsi⁄
 =
AF_INET6
) {

631 
	`Ârötf
(
°dîr
, "IPv6Çot supported by chk_if_changed()!\n");

634 #ifde‡
DEBUG


635 
	`OLSR_PRINTF
(3, "Checkög i‡%†i†£àdow¿‹ ch™ged\n", 
I¡C⁄f
->
«me
);

638 
I¡
 = 
I¡C⁄f
->
öãrf
;

640 i‡(
	`GëI¡Info
(&
Info
, 
I¡C⁄f
->
«me
) < 0) {

641 
	`ﬁ§_ªmove_öãrÁ˚
(
I¡C⁄f
);

645 
Res
 = 0;

647 
IsWœn
 = 
	`IsWúñess
(
I¡C⁄f
->
«me
);

649 i‡(
IsWœn
 < 0)

650 
IsWœn
 = 1;

652 i‡(
I¡
->
is_wúñess
 !
IsWœn
) {

653 
	`OLSR_PRINTF
(1, "\tLAN/WLAN ch™ge: %d -> %d.\n", 
I¡
->
is_wúñess
, 
IsWœn
);

655 
I¡
->
is_wúñess
 = 
IsWœn
;

657 i‡(
I¡C⁄f
->
˙f
->
weight
.
fixed
)

658 
I¡
->
öt_mëric
 = 
I¡C⁄f
->
˙f
->
weight
.
vÆue
;

661 
I¡
->
öt_mëric
 = 
Info
.
Mëric
;

663 
Res
 = 1;

666 i‡(
I¡
->
öt_mtu
 !
Info
.
Mtu
) {

667 
	`OLSR_PRINTF
(1, "\tMTU ch™ge: %d -> %d.\n", ()
I¡
->
öt_mtu
, 
Info
.
Mtu
);

669 
I¡
->
öt_mtu
 = 
Info
.
Mtu
;

671 
	`√t_ªmove_buf„r
(
I¡
);

672 
	`√t_add_buf„r
(
I¡
);

674 
Res
 = 1;

677 
OldVÆ
.
v4
 = ((
sockaddr_ö
 *)&
I¡
->
öt_addr
)->
sö_addr
;

678 
NewVÆ
.
v4
.
s_addr
 = 
Info
.
Addr
;

680 #ifde‡
DEBUG


681 
	`OLSR_PRINTF
(3, "\tAddªss: %s\n", 
	`ﬁ§_ù_to_°rög
(&
buf
, &
NewVÆ
));

684 i‡(
NewVÆ
.
v4
.
s_addr
 !
OldVÆ
.v4.s_addr) {

685 
	`OLSR_PRINTF
(1, "\tAddress change.\n");

686 
	`OLSR_PRINTF
(1, "\tOld: %s\n", 
	`ﬁ§_ù_to_°rög
(&
buf
, &
OldVÆ
));

687 
	`OLSR_PRINTF
(1, "\tNew: %s\n", 
	`ﬁ§_ù_to_°rög
(&
buf
, &
NewVÆ
));

689 
I¡
->
ù_addr
.
v4
 = 
NewVÆ
.v4;

691 
AddrIn
 = (
sockaddr_ö
 *)&
I¡
->
öt_addr
;

693 
AddrIn
->
sö_Ámûy
 = 
AF_INET
;

694 
AddrIn
->
sö_p‹t
 = 0;

695 
AddrIn
->
sö_addr
 = 
NewVÆ
.
v4
;

697 i‡(
ﬁ§_˙f
->
maö_addr
.
v4
.
s_addr
 =
OldVÆ
.v4.s_addr) {

698 
	`OLSR_PRINTF
(1, "\tMaináddress change.\n");

700 
ﬁ§_˙f
->
maö_addr
.
v4
 = 
NewVÆ
.v4;

703 
Res
 = 1;

707 
	`OLSR_PRINTF
(3, "\tNoáddress change.\n");

709 
OldVÆ
.
v4
 = ((
sockaddr_ö
 *)&
I¡
->
öt_√tmask
)->
sö_addr
;

710 
NewVÆ
.
v4
.
s_addr
 = 
Info
.
Mask
;

712 #ifde‡
DEBUG


713 
	`OLSR_PRINTF
(3, "\tNëmask: %s\n", 
	`ﬁ§_ù_to_°rög
(&
buf
, &
NewVÆ
));

716 i‡(
NewVÆ
.
v4
.
s_addr
 !
OldVÆ
.v4.s_addr) {

717 
	`OLSR_PRINTF
(1, "\tNetmask change.\n");

718 
	`OLSR_PRINTF
(1, "\tOld: %s\n", 
	`ﬁ§_ù_to_°rög
(&
buf
, &
OldVÆ
));

719 
	`OLSR_PRINTF
(1, "\tNew: %s\n", 
	`ﬁ§_ù_to_°rög
(&
buf
, &
NewVÆ
));

721 
AddrIn
 = (
sockaddr_ö
 *)&
I¡
->
öt_√tmask
;

723 
AddrIn
->
sö_Ámûy
 = 
AF_INET
;

724 
AddrIn
->
sö_p‹t
 = 0;

725 
AddrIn
->
sö_addr
 = 
NewVÆ
.
v4
;

727 
Res
 = 1;

731 
	`OLSR_PRINTF
(3, "\tNoÇetmask change.\n");

733 
OldVÆ
.
v4
 = ((
sockaddr_ö
 *)&
I¡
->
öt_brﬂdaddr
)->
sö_addr
;

734 
NewVÆ
.
v4
.
s_addr
 = 
Info
.
Brﬂd
;

736 #ifde‡
DEBUG


737 
	`OLSR_PRINTF
(3, "\tBrﬂdˇ°áddªss: %s\n", 
	`ﬁ§_ù_to_°rög
(&
buf
, &
NewVÆ
));

740 i‡(
NewVÆ
.
v4
.
s_addr
 !
OldVÆ
.v4.s_addr) {

741 
	`OLSR_PRINTF
(1, "\tBroadcastáddress change.\n");

742 
	`OLSR_PRINTF
(1, "\tOld: %s\n", 
	`ﬁ§_ù_to_°rög
(&
buf
, &
OldVÆ
));

743 
	`OLSR_PRINTF
(1, "\tNew: %s\n", 
	`ﬁ§_ù_to_°rög
(&
buf
, &
NewVÆ
));

745 
AddrIn
 = (
sockaddr_ö
 *)&
I¡
->
öt_brﬂdaddr
;

747 
AddrIn
->
sö_Ámûy
 = 
AF_INET
;

748 
AddrIn
->
sö_p‹t
 = 0;

749 
AddrIn
->
sö_addr
 = 
NewVÆ
.
v4
;

751 
Res
 = 1;

755 
	`OLSR_PRINTF
(3, "\tNo broadcastáddress change.\n");

757 i‡(
Res
 != 0)

758 
	`ﬁ§_åiggî_ifch™ge
(
I¡
->
if_ödex
, I¡, 
IFCHG_IF_UPDATE
);

760  
Res
;

761 
	}
}

764 
chk_if_up
(
ﬁ§_if
 *
I¡C⁄f
, 
DebugLevñ
 
__©åibuã__
 ((
unu£d
)))

766 
ùaddr_°r
 
	gbuf
;

767 
I¡îÁ˚Info
 
	gInfo
;

768 
öãrÁ˚
 *
	gNew
;

769 
ﬁ§_ù_addr
 
	gNuŒAddr
;

770 
	gIsWœn
;

771 
sockaddr_ö
 *
	gAddrIn
;

772 
size_t
 
	g«me_size
;

774 i‡(
	gﬁ§_˙f
->
	gù_vîsi⁄
 =
AF_INET6
) {

775 
Ârötf
(
°dîr
, "IPv6Çot supported by chk_if_up()!\n");

779 i‡(
GëI¡Info
(&
Info
, 
I¡C⁄f
->
«me
) < 0)

782 
	gNew
 = 
ﬁ§_mÆloc
((
öãrÁ˚
), "Interface 1");

784 
	gNew
->
	gﬁ§_if
 = 
I¡C⁄f
;

787 
	gNew
->
	gimmedüã_£nd_tc
 = (
I¡C⁄f
->
˙f
->
tc_∑øms
.
emissi⁄_öãrvÆ
 < I¡C⁄f->˙f->
hñlo_∑øms
.emission_interval);

788 i‡(
	gﬁ§_˙f
->
	gmax_jôãr
 == 0) {

790 
ﬁ§_˙f
->
max_jôãr
 =

791 
New
->
immedüã_£nd_tc
 ? 
I¡C⁄f
->
˙f
->
tc_∑øms
.
emissi⁄_öãrvÆ
 : I¡C⁄f->˙f->
hñlo_∑øms
.emission_interval;

794 
	gNew
->
	ggí_¥›îtõs
 = 
NULL
;

796 
	gAddrIn
 = (
sockaddr_ö
 *)&
New
->
öt_addr
;

798 
	gAddrIn
->
	gsö_Ámûy
 = 
AF_INET
;

799 
	gAddrIn
->
	gsö_p‹t
 = 0;

800 
	gAddrIn
->
	gsö_addr
.
	gs_addr
 = 
Info
.
Addr
;

802 
	gAddrIn
 = (
sockaddr_ö
 *)&
New
->
öt_√tmask
;

804 
	gAddrIn
->
	gsö_Ámûy
 = 
AF_INET
;

805 
	gAddrIn
->
	gsö_p‹t
 = 0;

806 
	gAddrIn
->
	gsö_addr
.
	gs_addr
 = 
Info
.
Mask
;

808 
	gAddrIn
 = (
sockaddr_ö
 *)&
New
->
öt_brﬂdaddr
;

810 
	gAddrIn
->
	gsö_Ámûy
 = 
AF_INET
;

811 
	gAddrIn
->
	gsö_p‹t
 = 0;

812 
	gAddrIn
->
	gsö_addr
.
	gs_addr
 = 
Info
.
Brﬂd
;

814 i‡(
	gI¡C⁄f
->
	g˙f
->
	gùv4_mu…iˇ°
.
	gv4
.
	gs_addr
 != 0)

815 
AddrIn
->
sö_addr
 = 
I¡C⁄f
->
˙f
->
ùv4_mu…iˇ°
.
v4
;

817 
	gNew
->
	göt_Êags
 = 0;

819 
	gNew
->
	gis_hcif
 = 
Ál£
;

821 
	gNew
->
	göt_mtu
 = 
Info
.
Mtu
;

823 
	g«me_size
 = 
°æí
(
I¡C⁄f
->
«me
) + 1;

824 
	gNew
->
	göt_«me
 = 
ﬁ§_mÆloc
(
«me_size
, "Interface 2");

825 
°rs˝y
(
New
->
öt_«me
, 
I¡C⁄f
->
«me
, 
«me_size
);

827 
	gIsWœn
 = 
IsWúñess
(
I¡C⁄f
->
«me
);

829 i‡(
	gIsWœn
 < 0)

830 
	gIsWœn
 = 1;

832 
	gNew
->
	gis_wúñess
 = 
IsWœn
;

834 i‡(
	gI¡C⁄f
->
	g˙f
->
	gweight
.
	gfixed
)

835 
	gNew
->
	göt_mëric
 = 
I¡C⁄f
->
˙f
->
weight
.
vÆue
;

838 
	gNew
->
	göt_mëric
 = 
Info
.
Mëric
;

840 
	gNew
->
	gﬁ§_£qnum
 = 
øndom
() & 0xffff;

842 
	gNew
->
	gâl_ödex
 = -32;

844 
OLSR_PRINTF
(1, "\tI¡îÁ˚ %†£àu∞f‹ u£ wôh index %d\n\n", 
I¡C⁄f
->
«me
, 
New
->
if_ödex
);

846 
OLSR_PRINTF
(1, "\tMTU: %d\n", 
New
->
öt_mtu
);

847 
OLSR_PRINTF
(1, "\tAddªss: %s\n", 
sockaddr4_to_°rög
(&
buf
, (c⁄° 
sockaddr
 *)&
New
->
öt_addr
));

848 
OLSR_PRINTF
(1, "\tNëmask: %s\n", 
sockaddr4_to_°rög
(&
buf
, (c⁄° 
sockaddr
 *)&
New
->
öt_√tmask
));

849 
OLSR_PRINTF
(1, "\tBrﬂdˇ°áddªss: %s\n", 
sockaddr4_to_°rög
(&
buf
, (c⁄° 
sockaddr
 *)&
New
->
öt_brﬂdaddr
));

851 
	gNew
->
	gù_addr
.
	gv4
 = 
New
->
öt_addr
.
sö_addr
;

853 
	gNew
->
	gif_ödex
 = 
Info
.
Index
;

855 
OLSR_PRINTF
(3, "\tKî√»ödex: %08x\n", 
New
->
if_ödex
);

857 
	gNew
->
	gﬁ§_sockë
 = 
gësockë
(
BUFSPACE
, 
New
);

858 
	gNew
->
	g£nd_sockë
 = 
gësockë
(0, 
New
);

860 i‡(
	gNew
->
	gﬁ§_sockë
 < 0) {

861 
Ârötf
(
°dîr
, "CouldÇot initialize socket...Éxiting!\n\n");

862 
exô
(1);

865 
add_ﬁ§_sockë
(
New
->
ﬁ§_sockë
, &
ﬁ§_öput
, 
NULL
, NULL, 
SP_PR_READ
);

867 
	gNew
->
	göt_√xt
 = 
i‚ë
;

868 
	gi‚ë
 = 
New
;

870 
	gI¡C⁄f
->
	göãrf
 = 
New
;

871 
	gI¡C⁄f
->
	gc⁄figuªd
 = 1;

873 
mem£t
(&
NuŒAddr
, 0, 
ﬁ§_˙f
->
ùsize
);

875 i‡(
ùequÆ
(&
NuŒAddr
, &
ﬁ§_˙f
->
maö_addr
)) {

876 
	gﬁ§_˙f
->
	gmaö_addr
 = 
New
->
ù_addr
;

877 
	gﬁ§_˙f
->
	guniˇ°_§c_ù
 = 
New
->
ù_addr
;

878 
OLSR_PRINTF
(1, "New maöáddªss: %s\n", 
ﬁ§_ù_to_°rög
(&
buf
, &
ﬁ§_˙f
->
maö_addr
));

881 
√t_add_buf„r
(
New
);

886 
	gNew
->
	ghñlo_gí_timî
 =

887 
ﬁ§_°¨t_timî
(
I¡C⁄f
->
˙f
->
hñlo_∑øms
.
emissi⁄_öãrvÆ
 * 
MSEC_PER_SEC
, 
HELLO_JITTER
, 
OLSR_TIMER_PERIODIC
,

888 
ﬁ§_˙f
->
lq_Àvñ
 =0 ? &
gíî©e_hñlo
 : &
ﬁ§_ouçut_lq_hñlo
, 
New
, 
hñlo_gí_timî_cookõ
);

889 
	gNew
->
	gtc_gí_timî
 =

890 
ﬁ§_°¨t_timî
(
I¡C⁄f
->
˙f
->
tc_∑øms
.
emissi⁄_öãrvÆ
 * 
MSEC_PER_SEC
, 
TC_JITTER
, 
OLSR_TIMER_PERIODIC
,

891 
ﬁ§_˙f
->
lq_Àvñ
 =0 ? &
gíî©e_tc
 : &
ﬁ§_ouçut_lq_tc
, 
New
, 
tc_gí_timî_cookõ
);

892 
	gNew
->
	gmid_gí_timî
 =

893 
ﬁ§_°¨t_timî
(
I¡C⁄f
->
˙f
->
mid_∑øms
.
emissi⁄_öãrvÆ
 * 
MSEC_PER_SEC
, 
MID_JITTER
, 
OLSR_TIMER_PERIODIC
, &
gíî©e_mid
, 
New
,

894 
mid_gí_timî_cookõ
);

895 
	gNew
->
	gh«_gí_timî
 =

896 
ﬁ§_°¨t_timî
(
I¡C⁄f
->
˙f
->
h«_∑øms
.
emissi⁄_öãrvÆ
 * 
MSEC_PER_SEC
, 
HNA_JITTER
, 
OLSR_TIMER_PERIODIC
, &
gíî©e_h«
, 
New
,

897 
h«_gí_timî_cookõ
);

899 i‡(
	gﬁ§_˙f
->
	gmax_tc_vtime
 < 
	gI¡C⁄f
->
	g˙f
->
	gtc_∑øms
.
	gemissi⁄_öãrvÆ
)

900 
	gﬁ§_˙f
->
	gmax_tc_vtime
 = 
I¡C⁄f
->
˙f
->
tc_∑øms
.
emissi⁄_öãrvÆ
;

902 
	gNew
->
	ghñlo_ëime
 = (
ﬁ§_ª…ime
Ë(
I¡C⁄f
->
˙f
->
hñlo_∑øms
.
emissi⁄_öãrvÆ
 * 
MSEC_PER_SEC
);

903 
	gNew
->
	gvÆtimes
.
	ghñlo
 = 
ª…ime_to_me
(
I¡C⁄f
->
˙f
->
hñlo_∑øms
.
vÆidôy_time
 * 
MSEC_PER_SEC
);

904 
	gNew
->
	gvÆtimes
.
	gtc
 = 
ª…ime_to_me
(
I¡C⁄f
->
˙f
->
tc_∑øms
.
vÆidôy_time
 * 
MSEC_PER_SEC
);

905 
	gNew
->
	gvÆtimes
.
	gmid
 = 
ª…ime_to_me
(
I¡C⁄f
->
˙f
->
mid_∑øms
.
vÆidôy_time
 * 
MSEC_PER_SEC
);

906 
	gNew
->
	gvÆtimes
.
	gh«
 = 
ª…ime_to_me
(
I¡C⁄f
->
˙f
->
h«_∑øms
.
vÆidôy_time
 * 
MSEC_PER_SEC
);

908 
	gNew
->
	gmode
 = 
I¡C⁄f
->
˙f
->
mode
;

910 
ﬁ§_åiggî_ifch™ge
(
New
->
if_ödex
, New, 
IFCHG_IF_ADD
);

916 
check_öãrÁ˚_upd©es
(*
dummy
 
__©åibuã__
 ((
unu£d
)))

918 
ﬁ§_if
 *
	gI¡C⁄f
;

920 #ifde‡
DEBUG


921 
OLSR_PRINTF
(3, "Checking for updates inÅhe interface set\n");

924 
	gI¡C⁄f
 = 
ﬁ§_˙f
->
öãrÁ˚s
; I¡C⁄‡!
NULL
; I¡C⁄‡
I¡C⁄f
->
√xt
) {

925 i‡(
I¡C⁄f
->
ho°_emul
)

928 i‡(
	gﬁ§_˙f
->
	gho°_emul
)

931 i‡(
	gI¡C⁄f
->
	gc⁄figuªd
)

932 
chk_if_ch™ged
(
I¡C⁄f
);

935 
chk_if_up
(
I¡C⁄f
, 3);

	@src/win32/kernel_routes.c

42 
	~<°dio.h
>

43 
	~"√t/rouã.h
"

45 
	~"kî√l_rouãs.h
"

46 
	~"√t_ﬁ§.h
"

47 
	~"ùˇlc.h
"

48 
	~"ùc_‰⁄ãnd.h
"

50 
	#WIN32_LEAN_AND_MEAN


	)

51 
	~<ùπrmib.h
>

52 
	~<ùhÕ≠i.h
>

54 *
SåEº‹
(
EºNo
);

64 
	$ﬁ§_io˘l_add_rouã
(c⁄° 
π_íåy
 *
π
)

66 
MIB_IPFORWARDROW
 
Row
;

67 
ﬁ§_ù_addr
 
mask
;

68 
Res
;

69 
öãrÁ˚
 *
iÁ˚
 = 
	`if_ifwôhödex
(
π
->
π_be°
->
πp_√xth›
.
iif_ödex
);

71 
	`OLSR_PRINTF
(2, "KERN: Addög %s\n", 
	`ﬁ§_π_to_°rög
(
π
));

73 
	`mem£t
(&
Row
, 0, (
MIB_IPFORWARDROW
));

75 
Row
.
dwF‹w¨dDe°
 = 
π
->
π_d°
.
¥efix
.
v4
.
s_addr
;

77 i‡(!
	`ﬁ§_¥efix_to_√tmask
(&
mask
, 
π
->
π_d°
.
¥efix_Àn
)) {

80 
Row
.
dwF‹w¨dMask
 = 
mask
.
v4
.
s_addr
;

83 
Row
.
dwF‹w¨dPﬁicy
 = 0;

84 
Row
.
dwF‹w¨dNextH›
 = 
π
->
π_be°
->
πp_√xth›
.
g©eway
.
v4
.
s_addr
;

85 
Row
.
dwF‹w¨dIfIndex
 = 
π
->
π_be°
->
πp_√xth›
.
iif_ödex
;

87 
Row
.
dwF‹w¨dTy≥
 = (
π
->
π_d°
.
¥efix
.
v4
.
s_addr
 =π->
π_be°
->
πp_√xth›
.
g©eway
.v4.s_addr) ? 3 : 4;

88 
Row
.
dwF‹w¨dPrŸo
 = 3;

89 
Row
.
dwF‹w¨dAge
 = 
INFINITE
;

90 
Row
.
dwF‹w¨dNextH›AS
 = 0;

91 
Row
.
dwF‹w¨dMëric1
 = 
iÁ˚
 ? iÁ˚->
öt_mëric
 : 0 + 
	`ﬁ§_fib_mëric
(&
π
->
π_be°
->
πp_mëric
);

92 
Row
.
dwF‹w¨dMëric2
 = -1;

93 
Row
.
dwF‹w¨dMëric3
 = -1;

94 
Row
.
dwF‹w¨dMëric4
 = -1;

95 
Row
.
dwF‹w¨dMëric5
 = -1;

97 
Res
 = 
	`SëIpF‹w¨dE¡ry
(&
Row
);

99 i‡(
Res
 !
NO_ERROR
) {

100 i‡(
Res
 !
ERROR_NOT_FOUND
)

101 
	`Ârötf
(
°dîr
, "SëIpF‹w¨dE¡ry(Ë%08lx, %s", 
Res
, 
	`SåEº‹
(Res));

103 
Res
 = 
	`Cª©eIpF‹w¨dE¡ry
(&
Row
);

106 i‡(
Res
 !
NO_ERROR
) {

107 
	`Ârötf
(
°dîr
, "Cª©eIpF‹w¨dE¡ry(Ë%08lx, %s", 
Res
, 
	`SåEº‹
(Res));

111 
î∫o
 = 
Res
;

119 i‡(
ﬁ§_˙f
->
ùc_c⁄√˘i⁄s
 > 0) {

120 
	`ùc_rouã_£nd_πíåy
(&
π
->
π_d°
.
¥efix
, &π->
π_be°
->
πp_√xth›
.
g©eway
,Ñt->π_be°->
πp_mëric
.
h›s
, 1,

121 
	`if_ifwôhödex_«me
(
π
->
π_be°
->
πp_√xth›
.
iif_ödex
));

125 
	}
}

130 
ﬁ§_io˘l_add_rouã6
(c⁄° 
π_íåy
 *
π
 
__©åibuã__
 ((
unu£d
)))

143 
	$ﬁ§_io˘l_dñ_rouã
(c⁄° 
π_íåy
 *
π
)

145 
MIB_IPFORWARDROW
 
Row
;

146 
ﬁ§_ù_addr
 
mask
;

147 
Res
;

148 
öãrÁ˚
 *
iÁ˚
 = 
	`if_ifwôhödex
(
π
->
π_√xth›
.
iif_ödex
);

150 
	`OLSR_PRINTF
(2, "KERN: Dñëög %s\n", 
	`ﬁ§_π_to_°rög
(
π
));

152 
	`mem£t
(&
Row
, 0, (Row));

154 
Row
.
dwF‹w¨dDe°
 = 
π
->
π_d°
.
¥efix
.
v4
.
s_addr
;

156 i‡(!
	`ﬁ§_¥efix_to_√tmask
(&
mask
, 
π
->
π_d°
.
¥efix_Àn
)) {

159 
Row
.
dwF‹w¨dMask
 = 
mask
.
v4
.
s_addr
;

160 
Row
.
dwF‹w¨dPﬁicy
 = 0;

161 
Row
.
dwF‹w¨dNextH›
 = 
π
->
π_√xth›
.
g©eway
.
v4
.
s_addr
;

162 
Row
.
dwF‹w¨dIfIndex
 = 
π
->
π_√xth›
.
iif_ödex
;

164 
Row
.
dwF‹w¨dTy≥
 = (
π
->
π_d°
.
¥efix
.
v4
.
s_addr
 =π->
π_√xth›
.
g©eway
.v4.s_addr) ? 3 : 4;

165 
Row
.
dwF‹w¨dPrŸo
 = 3;

166 
Row
.
dwF‹w¨dAge
 = 
INFINITE
;

167 
Row
.
dwF‹w¨dNextH›AS
 = 0;

168 
Row
.
dwF‹w¨dMëric1
 = 
iÁ˚
 ? iÁ˚->
öt_mëric
 : 0 + 
	`ﬁ§_fib_mëric
(&
π
->
π_mëric
);

169 
Row
.
dwF‹w¨dMëric2
 = -1;

170 
Row
.
dwF‹w¨dMëric3
 = -1;

171 
Row
.
dwF‹w¨dMëric4
 = -1;

172 
Row
.
dwF‹w¨dMëric5
 = -1;

174 
Res
 = 
	`DñëeIpF‹w¨dE¡ry
(&
Row
);

176 i‡(
Res
 !
NO_ERROR
) {

177 
	`Ârötf
(
°dîr
, "DñëeIpF‹w¨dE¡ry(Ë%08lx, %s", 
Res
, 
	`SåEº‹
(Res));

181 
î∫o
 = 
Res
;

189 i‡(
ﬁ§_˙f
->
ùc_c⁄√˘i⁄s
 > 0) {

190 
	`ùc_rouã_£nd_πíåy
(&
π
->
π_d°
.
¥efix
, 
NULL
, 0, 0, NULL);

194 
	}
}

199 
ﬁ§_io˘l_dñ_rouã6
(c⁄° 
π_íåy
 *
π
 
__©åibuã__
 ((
unu£d
)))

	@src/win32/log.c

42 
	~"../log.h
"

45 
ﬁ§_›ílog
(c⁄° *
Id
 
__©åibuã__
 ((
unu£d
)))

50 
ﬁ§_sy¶og
(
Levñ
 
__©åibuã__
 ((
unu£d
)), c⁄° *
F‹m©
 __attribute__ ((unused)),...)

	@src/win32/misc.c

42 
	#WIN32_LEAN_AND_MEAN


	)

43 
	~<wödows.h
>

44 #unde‡
öãrÁ˚


46 
	~<misc.h
>

49 
	$˛ór_c⁄sﬁe
()

51 #i‡!
deföed
 
WINCE


52 
HANDLE
 
H™d
;

53 
CONSOLE_SCREEN_BUFFER_INFO
 
Info
;

54 
Wrôãn
;

55 
COORD
 
Home
 = { 0, 0 };

57 
H™d
 = 
	`GëStdH™dÀ
(
STD_OUTPUT_HANDLE
);

59 i‡(
H™d
 =
INVALID_HANDLE_VALUE
)

62 i‡(!
	`GëC⁄sﬁeS¸ìnBuf„rInfo
(
H™d
, &
Info
))

65 i‡(!
	`FûlC⁄sﬁeOuçutCh¨a˘î
(
H™d
, ' ', 
Info
.
dwSize
.
X
 * Info.dwSize.
Y
, 
Home
, &
Wrôãn
))

68 i‡(!
	`FûlC⁄sﬁeOuçutAâribuã
(
H™d
, 
Info
.
wAâribuãs
, Info.
dwSize
.
X
 * Info.dwSize.
Y
, 
Home
, &
Wrôãn
))

71 
	`SëC⁄sﬁeCurs‹Posôi⁄
(
H™d
, 
Home
);

73 
	}
}

	@src/win32/net.c

42 #i‡
deföed
 
WINCE


43 
	~<sys/ty≥s.h
>

46 
	#WIN32_LEAN_AND_MEAN


	)

47 
	~<wödows.h
>

48 
	~<wösock2.h
>

49 
	~<ws2t˝ù.h
>

50 
	~<ùhÕ≠i.h
>

51 #unde‡
öãrÁ˚


53 
	~<°dio.h
>

54 
	~<°dlib.h
>

55 
	~"defs.h
"

56 
	~"√t_os.h
"

57 
	~"√t_ﬁ§.h
"

58 
	~"ùˇlc.h
"

60 #i‡
deföed
 
WINCE


61 
	#WIDE_STRING
(
s
Ë
L
##
	)
s

63 
	#WIDE_STRING
(
s
Ë
	`TEXT
(s)

	)

66 
WöSockPEº‹
(c⁄° *
Så
);

67 
PEº‹
(const *);

69 
DißbÀIcmpRedúe˘s
();

72 
	$gëhemusockë
(
sockaddr_ö
 *
pö
)

74 
sock
;

76 
	`OLSR_PRINTF
(1, " ConnectingÅo switch daemonÖort 10150...");

78 i‡((
sock
 = 
	`sockë
(
AF_INET
, 
SOCK_STREAM
, 0)) < 0) {

79 
	`≥º‹
("hcsocket");

84 i‡(
	`c⁄√˘
(
sock
, (
sockaddr
 *)
pö
, (*pin)) < 0) {

85 
	`¥ötf
("FAILED\n");

86 
	`Ârötf
(
°dîr
, "Eº‹ c⁄√˘ög %d - %s\n", 
î∫o
, 
	`°ªº‹
(errno));

87 
	`¥ötf
("connectionÑefused\n");

88 
	`˛o£sockë
(
sock
);

92 
	`¥ötf
("OK\n");

95  (
sock
);

96 
	}
}

99 
gësockë
(
BuffSize
, 
öãrÁ˚
 *
iÂ
 
__©åibuã__
 ((
unu£d
)))

101 
sockaddr_ö
 
	gAddr
;

102 
	gOn
 = 1;

103 
	gLí
;

104 
	gSock
 = 
sockë
(
AF_INET
, 
SOCK_DGRAM
, 0);

105 i‡(
	gSock
 < 0) {

106 
WöSockPEº‹
("getsocket/socket()");

110 i‡(
£tsock›t
(
Sock
, 
SOL_SOCKET
, 
SO_BROADCAST
, (*)&
On
, (On)) < 0) {

111 
WöSockPEº‹
("getsocket/setsockopt(SO_BROADCAST)");

112 
˛o£sockë
(
Sock
);

116 i‡(
£tsock›t
(
Sock
, 
SOL_SOCKET
, 
SO_REUSEADDR
, (*)&
On
, (On)) < 0) {

117 
WöSockPEº‹
("getsocket/setsockopt(SO_REUSEADDR)");

118 
˛o£sockë
(
Sock
);

122 
	gBuffSize
 > 8192) {

123 i‡(
£tsock›t
(
Sock
, 
SOL_SOCKET
, 
SO_RCVBUF
, (*)&
BuffSize
, (BuffSize)) == 0)

126 
	gBuffSize
 -= 1024;

129 i‡(
	gBuffSize
 <= 8192) {

130 
OLSR_PRINTF
(1, "Cannot set IPv4 socketÑeceive buffer.\n");

132 
mem£t
(&
Addr
, 0, (Addr));

133 
	gAddr
.
	gsö_Ámûy
 = 
AF_INET
;

134 
	gAddr
.
	gsö_p‹t
 = 
ht⁄s
(
ﬁ§_˙f
->
ﬁ§p‹t
);

136 if(
	gBuffSize
 <= 0) {

137 
Addr
.
sö_addr
.
s_addr
 = 
iÂ
->
öt_addr
.sin_addr.s_addr;

140 i‡(
böd
(
Sock
, (
sockaddr
 *)&
Addr
, (Addr)) < 0) {

141 
WöSockPEº‹
("getsocket/bind()");

142 
˛o£sockë
(
Sock
);

146 i‡(
WSAIo˘l
(
Sock
, 
FIONBIO
, &
On
, (On), 
NULL
, 0, &
Lí
, NULL, NULL) < 0) {

147 
WöSockPEº‹
("WSAIoctl");

148 
˛o£sockë
(
Sock
);

152  
	gSock
;

156 
gësockë6
(
BuffSize
, 
öãrÁ˚
 *
iÂ
 
__©åibuã__
 ((
unu£d
)))

158 
sockaddr_ö6
 
	gAddr6
;

159 
	gOn
 = 1;

160 
	gSock
 = 
sockë
(
AF_INET6
, 
SOCK_DGRAM
, 0);

161 i‡(
	gSock
 < 0) {

162 
WöSockPEº‹
("getsocket6/socket()");

166 i‡(
£tsock›t
(
Sock
, 
SOL_SOCKET
, 
SO_BROADCAST
, (*)&
On
, (On)) < 0) {

167 
WöSockPEº‹
("getsocket6/setsockopt(SO_BROADCAST)");

168 
˛o£sockë
(
Sock
);

172 i‡(
£tsock›t
(
Sock
, 
SOL_SOCKET
, 
SO_REUSEADDR
, (*)&
On
, (On)) < 0) {

173 
WöSockPEº‹
("getsocket6/setsockopt(SO_REUSEADDR)");

174 
˛o£sockë
(
Sock
);

178 
	gBuffSize
 > 8192) {

179 i‡(
£tsock›t
(
Sock
, 
SOL_SOCKET
, 
SO_RCVBUF
, (*)&
BuffSize
, (BuffSize)) == 0)

182 
	gBuffSize
 -= 1024;

185 i‡(
	gBuffSize
 <= 8192)

186 
Ârötf
(
°dîr
, "Cannot set IPv6 socketÑeceive buffer.\n");

188 
mem£t
(&
Addr6
, 0, (Addr6));

189 
	gAddr6
.
	gsö6_Ámûy
 = 
AF_INET6
;

190 
	gAddr6
.
	gsö6_p‹t
 = 
ht⁄s
(
ﬁ§_˙f
->
ﬁ§p‹t
);

192 if(
	gBuffSize
 <= 0) {

193 
mem˝y
(&
Addr6
.
sö6_addr
, &
iÂ
->
öt6_addr
.sö6_addr, (
ö6_addr
));

196 i‡(
böd
(
Sock
, (
sockaddr
 *)&
Addr6
, (Addr6)) < 0) {

197 
WöSockPEº‹
("getsocket6/bind()");

198 
˛o£sockë
(
Sock
);

202  
	gSock
;

205 
OVERLAPPED
 
	gRouãrOvî
;

207 
	$√t_os_£t_globÆ_if›ti⁄s
()

209 
HMODULE
 
Lib
;

210 
	`__°dˇŒ
(*
íabÀ_rouãr
)(
HANDLE
 *, 
OVERLAPPED
 *);

211 
HANDLE
 
H™d
;

213 
Lib
 = 
	`LﬂdLibøry
(
	`WIDE_STRING
("iphlpapi.dll"));

215 i‡(
Lib
 =
NULL
)

218 
íabÀ_rouãr
 = (
	`__°dˇŒ
(*)(
HANDLE
 *, 
OVERLAPPED
 *))
	`GëProcAddªss
(
Lib
, 
	`WIDE_STRING
("EnableRouter"));

220 i‡(
íabÀ_rouãr
 =
NULL
)

223 
	`mem£t
(&
RouãrOvî
, 0, (
OVERLAPPED
));

225 
RouãrOvî
.
hEvít
 = 
	`Cª©eEvít
(
NULL
, 
FALSE
, FALSE, NULL);

227 i‡(
RouãrOvî
.
hEvít
 =
NULL
) {

228 
	`PEº‹
("CreateEvent()");

232 i‡(
	`íabÀ_rouãr
(&
H™d
, &
RouãrOvî
Ë!
ERROR_IO_PENDING
) {

233 
	`PEº‹
("EnableRouter()");

237 
	`OLSR_PRINTF
(3, "RoutingÉnabled.\n");

240 
	}
}

243 
	$dißbÀ_ù_f‹w¨dög
(
Vî
)

245 
HMODULE
 
Lib
;

246 
	`__°dˇŒ
(*
u√«bÀ_rouãr
)(
OVERLAPPED
 *, *);

247 
Cou¡
;

249 
Vî
 = Ver;

251 
Lib
 = 
	`LﬂdLibøry
(
	`WIDE_STRING
("iphlpapi.dll"));

253 i‡(
Lib
 =
NULL
)

256 
u√«bÀ_rouãr
 = (
	`__°dˇŒ
(*)(
OVERLAPPED
 *, *))
	`GëProcAddªss
(
Lib
, 
	`WIDE_STRING
("UnenableRouter"));

258 i‡(
u√«bÀ_rouãr
 =
NULL
)

261 i‡(
	`u√«bÀ_rouãr
(&
RouãrOvî
, &
Cou¡
Ë!
NO_ERROR
) {

262 
	`PEº‹
("UnenableRouter()");

266 
	`OLSR_PRINTF
(3, "Routög dißbÀd, cou¡ = %u.\n", 
Cou¡
);

269 
	}
}

273 
	$√t_os_ª°‹e_if›ti⁄s
()

275 
	`dißbÀ_ù_f‹w¨dög
(
ﬁ§_˙f
->
ù_vîsi⁄
);

278 
	}
}

281 
	$SëE«bÀRedúKey
(
New
)

283 #i‡!
deföed
 
WINCE


284 
HKEY
 
Key
;

285 
Ty≥
;

286 
Lí
;

287 
Old
;

289 i‡(
	`RegO≥nKeyEx
(
HKEY_LOCAL_MACHINE
, "SYSTEM\\CuºítC⁄åﬁSë\\Sîvi˚s\\T˝ù\\P¨amëîs", 0, 
KEY_READ
 | 
KEY_WRITE
, &
Key
) !=

290 
ERROR_SUCCESS
)

293 
Lí
 = (
Old
);

295 i‡(
	`RegQuîyVÆueEx
(
Key
, "E«bÀICMPRedúe˘", 
NULL
, &
Ty≥
, (*)&
Old
, &
Lí
Ë!
ERROR_SUCCESS
 || Ty≥ !
REG_DWORD
)

296 
Old
 = 1;

298 i‡(
	`RegSëVÆueEx
(
Key
, "E«bÀICMPRedúe˘", 0, 
REG_DWORD
, (*)&
New
, (New))) {

299 
	`RegClo£Key
(
Key
);

303 
	`RegClo£Key
(
Key
);

304  
Old
;

308 
	}
}

311 
	$DißbÀIcmpRedúe˘s
()

313 
Res
;

315 
Res
 = 
	`SëE«bÀRedúKey
(0);

317 i‡(
Res
 != 1)

320 
	`Ârötf
(
°dîr
, "\n*** IMPORTANT *** IMPORTANT *** IMPORTANT *** IMPORTANT *** IMPORTANT ***\n\n");

323 i‡(
Res
 < 0) {

324 
	`Ârötf
(
°dîr
, "Cannot disable ICMPÑedirectÖrocessing inÅheÑegistry.\n");

325 
	`Ârötf
(
°dîr
, "Please disable it manually. Continuing in 3 seconds...\n");

326 
	`SÀï
(3000);

332 
	`Ârötf
(
°dîr
, "I have disabled ICMPÑedirectÖrocessing inÅheÑegistry for you.\n");

333 
	`Ârötf
(
°dîr
, "REBOOT NOW, soÅhatÅhese changesÅakeÉffect. Exiting...\n\n");

335 
	`exô
(0);

336 
	}
}

339 
	$joö_mˇ°
(
öãrÁ˚
 *
Nic
, 
Sock
)

342 
ùaddr_°r
 
buf
;

343 
ùv6_mªq
 
Mˇ°Req
;

345 
Mˇ°Req
.
ùv6mr_mu…üddr
 = 
Nic
->
öt6_mu…addr
.
sö6_addr
;

346 
Mˇ°Req
.
ùv6mr_öãrÁ˚
 = 
Nic
->
if_ödex
;

348 
	`OLSR_PRINTF
(3, "I¡îÁ˚ %†joöög mu…iˇ° %s...", 
Nic
->
öt_«me
,

349 
	`ﬁ§_ù_to_°rög
(&
buf
, (
ﬁ§_ù_addr
 *)&
Nic
->
öt6_mu…addr
.
sö6_addr
));

351 i‡(
	`£tsock›t
(
Sock
, 
IPPROTO_IPV6
, 
IPV6_ADD_MEMBERSHIP
, (*)&
Mˇ°Req
, (
ùv6_mªq
)) < 0) {

352 
	`≥º‹
("Join multicast");

357 #ifde‡
IPV6_JOIN_GROUP


359 i‡(
	`£tsock›t
(
Sock
, 
IPPROTO_IPV6
, 
IPV6_JOIN_GROUP
, (*)&
Mˇ°Req
, (
ùv6_mªq
)) < 0)

362 i‡(
	`£tsock›t
(
Sock
, 
IPPROTO_IPV6
, 
IPV6_ADD_MEMBERSHIP
, (*)&
Mˇ°Req
, (
ùv6_mªq
)) < 0)

365 
	`≥º‹
("Join multicast send");

369 i‡(
	`£tsock›t
(
Sock
, 
IPPROTO_IPV6
, 
IPV6_MULTICAST_IF
, (*)&
Mˇ°Req
.
ùv6mr_öãrÁ˚
, (McastReq.ipv6mr_interface)) < 0) {

370 
	`≥º‹
("Set multicast if");

374 
	`OLSR_PRINTF
(3, "OK\n");

376 
	}
}

382 
ssize_t


383 
	$ﬁ§_£ndto
(
s
, c⁄° *
buf
, 
size_t
 
Àn
, 
Êags
, c⁄° 
sockaddr
 * 
to
, 
sockÀn_t
 
tﬁí
)

385  
	`£ndto
(
s
, 
buf
, 
Àn
, 
Êags
, 
to
, 
tﬁí
);

386 
	}
}

392 
ssize_t


393 
ﬁ§_ªcv‰om
(
s
, *
buf
, 
size_t
 
Àn
, 
Êags
 
__©åibuã__
 ((
unu£d
)), 
sockaddr
 * 
‰om
, 
sockÀn_t
 * 
‰omÀn
)

395  
ªcv‰om
(
s
, 
buf
, 
Àn
, 0, 
‰om
, 
‰omÀn
);

403 
	$ﬁ§_£À˘
(
nfds
, 
fd_£t
 * 
ªadfds
, fd_£à* 
wrôefds
, fd_£à* 
ex˚±fds
, 
timevÆ
 *
timeout
)

405 #ifde‡
WIN32


406 i‡(
nfds
 == 0) {

407 i‡(
timeout
) {

408 
	`SÀï
(
timeout
->
tv_£c
 * 1000 +Åimeout->
tv_u£c
 / 1000);

413  
	`£À˘
(
nfds
, 
ªadfds
, 
wrôefds
, 
ex˚±fds
, 
timeout
);

416  
	`£À˘
(
nfds
, 
ªadfds
, 
wrôefds
, 
ex˚±fds
, 
timeout
);

418 
	}
}

	@src/win32/net/if.h

	@src/win32/net/route.h

42 #i‡!
deföed
 
TL_NET_ROUTE_H_INCLUDED


44 
	#TL_NET_ROUTE_H_INCLUDED


	)

46 
	#RTF_UP
 1

	)

47 
	#RTF_HOST
 2

	)

48 
	#RTF_GATEWAY
 4

	)

	@src/win32/netinet/in.h

42 #i‡!
deföed
 
TL_NETINET_IN_H_INCLUDED


44 
	#TL_NETINET_IN_H_INCLUDED


	)

46 
	#WIN32_LEAN_AND_MEAN


	)

47 
	~<wösock2.h
>

48 
	~<ws2t˝ù.h
>

49 #unde‡
öãrÁ˚


	@src/win32/sys/ioctl.h

	@src/win32/sys/socket.h

42 #i‡!
deföed
 
TL_SYS_SOCKET_H_INCLUDED


44 
	#TL_SYS_SOCKET_H_INCLUDED


	)

46 
	#MSG_NOSIGNAL
 0

	)

	@src/win32/sys/time.h

42 #i‡!
deföed
 
TL_SYS_TIME_H_INCLUDED


44 
	#TL_SYS_TIME_H_INCLUDED


	)

46 
	#WIN32_LEAN_AND_MEAN


	)

47 
	~<wösock2.h
>

48 
	~<ws2t˝ù.h
>

49 #unde‡
öãrÁ˚


51 
	#timîadd
(
x
, 
y
, 
z
) \

54 (
z
)->
tv_£c
 = (
x
)->tv_£¯+ (
y
)->tv_sec; \

56 (
z
)->
tv_u£c
 = (
x
)->tv_u£¯+ (
y
)->tv_usec; \

58 i‡((
z
)->
tv_u£c
 >= 1000000) \

60 (
z
)->
tv_£c
++; \

61 (
z
)->
tv_u£c
 -= 1000000; \

64 0)

	)

66 
	#timîsub
(
x
, 
y
, 
z
) \

69 (
z
)->
tv_£c
 = (
x
)->tv_£¯- (
y
)->tv_sec; \

71 (
z
)->
tv_u£c
 = (
x
)->tv_u£¯- (
y
)->tv_usec; \

73 i‡((
z
)->
tv_u£c
 < 0) \

75 (
z
)->
tv_£c
--; \

76 (
z
)->
tv_u£c
 += 1000000; \

79 0)

	)

81 #i‡!
deföed
 
WINCE


82 
	stime•ec
 {

83 
	mtv_£c
;

84 
	mtv_n£c
;

87 
	~<time.h
>

90 
«no¶ìp
(
time•ec
 *
Req
, time•e¯*
Rem
);

92 
gëtimeofday
(
timevÆ
 *
TVÆ
, *
TZ⁄e
);

	@src/win32/sys/times.h

42 #i‡!
deföed
 
TL_SYS_TIMES_H_INCLUDED


44 
	#TL_SYS_TIMES_H_INCLUDED


	)

46 
	stms
 {

47 
	mdummy
;

50 
times
(
tms
 *);

	@src/win32/sys/utsname.h

	@src/win32/unistd.h

42 #i‡!
deföed
 
TL_UNISTD_H_INCLUDED


44 
	~<°ddef.h
>

46 
	#TL_UNISTD_H_INCLUDED


	)

48 
¶ìp
(
Sec
);

50 
§™dom
(
Sìd
);

51 
øndom
();

53 *
SåEº‹
(
EºNo
);

55 
gëpid
();

57 
	#IPTOS_TOS
(
x
Ë((xË& 0x1e)

	)

58 
	#IPTOS_PREC
(
x
Ë((xË& 0xe0)

	)

60 
ißây
(
fd
);

	@/usr/include/alloca.h

19 #i‚def 
_ALLOCA_H


20 
	#_ALLOCA_H
 1

	)

22 
	~<„©uªs.h
>

24 
	#__√ed_size_t


	)

25 
	~<°ddef.h
>

27 
	g__BEGIN_DECLS


30 #unde‡
Æloˇ


33 *
	$Æloˇ
 (
size_t
 
__size
Ë
__THROW
;

35 #ifdef 
__GNUC__


36 
	#Æloˇ
(
size
Ë
	`__buûtö_Æloˇ
 (size)

	)

39 
__END_DECLS


	@/usr/include/arpa/inet.h

19 #i‚de‡
_ARPA_INET_H


20 
	#_ARPA_INET_H
 1

	)

22 
	~<„©uªs.h
>

23 
	~<√töë/ö.h
>

26 #i‚de‡
__sockÀn_t_deföed


27 
__sockÀn_t
 
	tsockÀn_t
;

28 
	#__sockÀn_t_deföed


	)

31 
__BEGIN_DECLS


35 
ö_addr_t
 
	$öë_addr
 (
__c⁄°
 *
__˝
Ë
__THROW
;

38 
ö_addr_t
 
	$öë_ aof
 (
ö_addr
 
__ö
Ë
__THROW
;

42 
ö_addr
 
	$öë_makóddr
 (
ö_addr_t
 
__√t
, in_addr_à
__ho°
)

43 
__THROW
;

46 
ö_addr_t
 
	$öë_√tof
 (
ö_addr
 
__ö
Ë
__THROW
;

50 
ö_addr_t
 
	$öë_√tw‹k
 (
__c⁄°
 *
__˝
Ë
__THROW
;

54 *
	$öë_¡ﬂ
 (
ö_addr
 
__ö
Ë
__THROW
;

59 
	$öë_±⁄
 (
__af
, 
__c⁄°
 *
__ª°ri˘
 
__˝
,

60 *
__ª°ri˘
 
__buf
Ë
__THROW
;

65 
__c⁄°
 *
	$öë_¡›
 (
__af
, 
__c⁄°
 *
__ª°ri˘
 
__˝
,

66 *
__ª°ri˘
 
__buf
, 
sockÀn_t
 
__Àn
)

67 
__THROW
;

71 #ifde‡
__USE_MISC


74 
	$öë_©⁄
 (
__c⁄°
 *
__˝
, 
ö_addr
 *
__öp
Ë
__THROW
;

78 *
	$öë_√è
 (
ö_addr_t
 
__√t
, *
__buf
, 
size_t
 
__Àn
Ë
__THROW
;

83 *
	$öë_√t_¡›
 (
__af
, 
__c⁄°
 *
__˝
, 
__bôs
,

84 *
__buf
, 
size_t
 
__Àn
Ë
__THROW
;

89 
	$öë_√t_±⁄
 (
__af
, 
__c⁄°
 *
__˝
,

90 *
__buf
, 
size_t
 
__Àn
Ë
__THROW
;

95 
	$öë_nßp_addr
 (
__c⁄°
 *
__˝
,

96 *
__buf
, 
__Àn
Ë
__THROW
;

100 *
	$öë_nßp_¡ﬂ
 (
__Àn
, 
__c⁄°
 *
__˝
,

101 *
__buf
Ë
__THROW
;

104 
__END_DECLS


	@/usr/include/arpa/nameser.h

52 #i‚de‡
_ARPA_NAMESER_H_


53 
	#_ARPA_NAMESER_H_


	)

57 
	#BIND_4_COMPAT


	)

59 
	~<sys/∑øm.h
>

60 #i‡(!
deföed
(
BSD
)) || (BSD < 199306)

61 
	~<sys/bôy≥s.h
>

63 
	~<sys/ty≥s.h
>

65 
	~<sys/cdefs.h
>

75 
	#__NAMESER
 19991006

	)

79 
	#NS_PACKETSZ
 512

	)

80 
	#NS_MAXDNAME
 1025

	)

81 
	#NS_MAXMSG
 65535

	)

82 
	#NS_MAXCDNAME
 255

	)

83 
	#NS_MAXLABEL
 63

	)

84 
	#NS_HFIXEDSZ
 12

	)

85 
	#NS_QFIXEDSZ
 4

	)

86 
	#NS_RRFIXEDSZ
 10

	)

87 
	#NS_INT32SZ
 4

	)

88 
	#NS_INT16SZ
 2

	)

89 
	#NS_INT8SZ
 1

	)

90 
	#NS_INADDRSZ
 4

	)

91 
	#NS_IN6ADDRSZ
 16

	)

92 
	#NS_CMPRSFLGS
 0xc0

	)

93 
	#NS_DEFAULTPORT
 53

	)

98 
	e__ns_£˘
 {

99 
	mns_s_qd
 = 0,

100 
	mns_s_zn
 = 0,

101 
	mns_s_™
 = 1,

102 
	mns_s_¥
 = 1,

103 
	mns_s_ns
 = 2,

104 
	mns_s_ud
 = 2,

105 
	mns_s_¨
 = 3,

106 
	mns_s_max
 = 4

107 } 
	tns_£˘
;

114 
	s__ns_msg
 {

115 c⁄° 
u_ch¨
 *
	m_msg
, *
	m_eom
;

116 
u_öt16_t
 
	m_id
, 
	m_Êags
, 
	m_cou¡s
[
ns_s_max
];

117 c⁄° 
u_ch¨
 *
	m_£˘i⁄s
[
ns_s_max
];

118 
ns_£˘
 
	m_£˘
;

119 
	m_ºnum
;

120 c⁄° 
u_ch¨
 *
	m_msg_±r
;

121 } 
	tns_msg
;

124 
	s_ns_Êagd©a
 { 
	mmask
, 
	mshi·
; };

125 c⁄° 
_ns_Êagd©a
 _ns_flagdata[];

129 
	#ns_msg_id
(
h™dÀ
Ë((h™dÀ).
_id
 + 0)

	)

130 
	#ns_msg_ba£
(
h™dÀ
Ë((h™dÀ).
_msg
 + 0)

	)

131 
	#ns_msg_íd
(
h™dÀ
Ë((h™dÀ).
_eom
 + 0)

	)

132 
	#ns_msg_size
(
h™dÀ
Ë((h™dÀ).
_eom
 - (h™dÀ).
_msg
)

	)

133 
	#ns_msg_cou¡
(
h™dÀ
, 
£˘i⁄
Ë((h™dÀ).
_cou¡s
[£˘i⁄] + 0)

	)

138 
	s__ns_º
 {

139 
	m«me
[
NS_MAXDNAME
];

140 
u_öt16_t
 
	mty≥
;

141 
u_öt16_t
 
	mº_˛ass
;

142 
u_öt32_t
 
	mâl
;

143 
u_öt16_t
 
	mrdÀngth
;

144 c⁄° 
u_ch¨
 * 
	mrd©a
;

145 } 
	tns_º
;

148 
	#ns_º_«me
(
º
Ë((‘r).
«me
[0] !'\0'Ë? (º).«mê: ".")

	)

149 
	#ns_º_ty≥
(
º
Ë((
ns_ty≥
)(‘r).
ty≥
 + 0))

	)

150 
	#ns_º_˛ass
(
º
Ë((
ns_˛ass
)(‘r).
º_˛ass
 + 0))

	)

151 
	#ns_º_âl
(
º
Ë(‘r).
âl
 + 0)

	)

152 
	#ns_º_rdÀn
(
º
Ë(‘r).
rdÀngth
 + 0)

	)

153 
	#ns_º_rd©a
(
º
Ë(‘r).
rd©a
 + 0)

	)

160 
	e__ns_Êag
 {

161 
	mns_f_qr
,

162 
	mns_f_›code
,

163 
	mns_f_Ø
,

164 
	mns_f_tc
,

165 
	mns_f_rd
,

166 
	mns_f_ø
,

167 
	mns_f_z
,

168 
	mns_f_ad
,

169 
	mns_f_cd
,

170 
	mns_f_rcode
,

171 
	mns_f_max


172 } 
	tns_Êag
;

177 
	e__ns_›code
 {

178 
	mns_o_quîy
 = 0,

179 
	mns_o_iquîy
 = 1,

180 
	mns_o_°©us
 = 2,

182 
	mns_o_nŸify
 = 4,

183 
	mns_o_upd©e
 = 5,

184 
	mns_o_max
 = 6

185 } 
	tns_›code
;

190 
	e__ns_rcode
 {

191 
	mns_r_n€º‹
 = 0,

192 
	mns_r_f‹mîr
 = 1,

193 
	mns_r_£rvÁû
 = 2,

194 
	mns_r_nxdomaö
 = 3,

195 
	mns_r_nŸim∂
 = 4,

196 
	mns_r_ªfu£d
 = 5,

198 
	mns_r_yxdomaö
 = 6,

199 
	mns_r_yxº£t
 = 7,

200 
	mns_r_nxº£t
 = 8,

201 
	mns_r_nŸauth
 = 9,

202 
	mns_r_nŸz⁄e
 = 10,

203 
	mns_r_max
 = 11,

205 
	mns_r_badvîs
 = 16,

207 
	mns_r_badsig
 = 16,

208 
	mns_r_badkey
 = 17,

209 
	mns_r_badtime
 = 18

210 } 
	tns_rcode
;

213 
	e__ns_upd©e_›î©i⁄
 {

214 
	mns_u›_dñëe
 = 0,

215 
	mns_u›_add
 = 1,

216 
	mns_u›_max
 = 2

217 } 
	tns_upd©e_›î©i⁄
;

222 
	sns_tsig_key
 {

223 
	m«me
[
NS_MAXDNAME
], 
	mÆg
[NS_MAXDNAME];

224 *
	md©a
;

225 
	mÀn
;

227 
ns_tsig_key
 
	tns_tsig_key
;

232 
	sns_t˝_tsig_°©e
 {

233 
	mcou¡î
;

234 
d°_key
 *
	mkey
;

235 *
	m˘x
;

236 
	msig
[
NS_PACKETSZ
];

237 
	msigÀn
;

239 
ns_t˝_tsig_°©e
 
	tns_t˝_tsig_°©e
;

241 
	#NS_TSIG_FUDGE
 300

	)

242 
	#NS_TSIG_TCP_COUNT
 100

	)

243 
	#NS_TSIG_ALG_HMAC_MD5
 "HMAC-MD5.SIG-ALG.REG.INT"

	)

245 
	#NS_TSIG_ERROR_NO_TSIG
 -10

	)

246 
	#NS_TSIG_ERROR_NO_SPACE
 -11

	)

247 
	#NS_TSIG_ERROR_FORMERR
 -12

	)

252 
	e__ns_ty≥
 {

253 
	mns_t_övÆid
 = 0,

254 
	mns_t_a
 = 1,

255 
	mns_t_ns
 = 2,

256 
	mns_t_md
 = 3,

257 
	mns_t_mf
 = 4,

258 
	mns_t_˙ame
 = 5,

259 
	mns_t_sﬂ
 = 6,

260 
	mns_t_mb
 = 7,

261 
	mns_t_mg
 = 8,

262 
	mns_t_mr
 = 9,

263 
	mns_t_nuŒ
 = 10,

264 
	mns_t_wks
 = 11,

265 
	mns_t_±r
 = 12,

266 
	mns_t_höfo
 = 13,

267 
	mns_t_möfo
 = 14,

268 
	mns_t_mx
 = 15,

269 
	mns_t_txt
 = 16,

270 
	mns_t_Ω
 = 17,

271 
	mns_t_afsdb
 = 18,

272 
	mns_t_x25
 = 19,

273 
	mns_t_isdn
 = 20,

274 
	mns_t_π
 = 21,

275 
	mns_t_nßp
 = 22,

276 
	mns_t_nßp_±r
 = 23,

277 
	mns_t_sig
 = 24,

278 
	mns_t_key
 = 25,

279 
	mns_t_px
 = 26,

280 
	mns_t_gpos
 = 27,

281 
	mns_t_ØØ
 = 28,

282 
	mns_t_loc
 = 29,

283 
	mns_t_nxt
 = 30,

284 
	mns_t_eid
 = 31,

285 
	mns_t_nimloc
 = 32,

286 
	mns_t_§v
 = 33,

287 
	mns_t_©ma
 = 34,

288 
	mns_t_«±r
 = 35,

289 
	mns_t_kx
 = 36,

290 
	mns_t_˚π
 = 37,

291 
	mns_t_a6
 = 38,

292 
	mns_t_d«me
 = 39,

293 
	mns_t_sök
 = 40,

294 
	mns_t_›t
 = 41,

295 
	mns_t_≠l
 = 42,

296 
	mns_t_tkey
 = 249,

297 
	mns_t_tsig
 = 250,

298 
	mns_t_ix‰
 = 251,

299 
	mns_t_ax‰
 = 252,

300 
	mns_t_maûb
 = 253,

301 
	mns_t_maûa
 = 254,

302 
	mns_t_™y
 = 255,

303 
	mns_t_zx‰
 = 256,

304 
	mns_t_max
 = 65536

305 } 
	tns_ty≥
;

308 
	#ns_t_qt_p
(
t
Ë(
	`ns_t_x‰_p
—Ë|| (tË=
ns_t_™y
 || \

309 (
t
Ë=
ns_t_maûb
 || (tË=
ns_t_maûa
)

	)

311 
	#ns_t_mº_p
(
t
Ë(—Ë=
ns_t_tsig
 || (tË=
ns_t_›t
)

	)

313 
	#ns_t_º_p
(
t
Ë(!
	`ns_t_qt_p
—Ë&& !
	`ns_t_mº_p
—))

	)

314 
	#ns_t_udp_p
(
t
Ë(—Ë!
ns_t_ax‰
 && (tË!
ns_t_zx‰
)

	)

315 
	#ns_t_x‰_p
(
t
Ë(—Ë=
ns_t_ax‰
 || (tË=
ns_t_ix‰
 || \

316 (
t
Ë=
ns_t_zx‰
)

	)

321 
	e__ns_˛ass
 {

322 
	mns_c_övÆid
 = 0,

323 
	mns_c_ö
 = 1,

324 
	mns_c_2
 = 2,

325 
	mns_c_chaos
 = 3,

326 
	mns_c_hs
 = 4,

328 
	mns_c_n⁄e
 = 254,

329 
	mns_c_™y
 = 255,

330 
	mns_c_max
 = 65536

331 } 
	tns_˛ass
;

335 
	e__ns_key_ty≥s
 {

336 
	mns_kt_rß
 = 1,

337 
	mns_kt_dh
 = 2,

338 
	mns_kt_dß
 = 3,

339 
	mns_kt_¥iv©e
 = 254

340 } 
	tns_key_ty≥s
;

342 
	e__ns_˚π_ty≥s
 {

343 
	m˚π_t_pkix
 = 1,

344 
	m˚π_t_•ki
 = 2,

345 
	m˚π_t_pgp
 = 3,

346 
	m˚π_t_uæ
 = 253,

347 
	m˚π_t_oid
 = 254

348 } 
	tns_˚π_ty≥s
;

351 
	#NS_KEY_TYPEMASK
 0xC000

	)

352 
	#NS_KEY_TYPE_AUTH_CONF
 0x0000

	)

353 
	#NS_KEY_TYPE_CONF_ONLY
 0x8000

	)

354 
	#NS_KEY_TYPE_AUTH_ONLY
 0x4000

	)

355 
	#NS_KEY_TYPE_NO_KEY
 0xC000

	)

357 
	#NS_KEY_NO_AUTH
 0x8000

	)

358 
	#NS_KEY_NO_CONF
 0x4000

	)

359 
	#NS_KEY_RESERVED2
 0x2000

	)

360 
	#NS_KEY_EXTENDED_FLAGS
 0x1000

	)

361 
	#NS_KEY_RESERVED4
 0x0800

	)

362 
	#NS_KEY_RESERVED5
 0x0400

	)

363 
	#NS_KEY_NAME_TYPE
 0x0300

	)

364 
	#NS_KEY_NAME_USER
 0x0000

	)

365 
	#NS_KEY_NAME_ENTITY
 0x0200

	)

366 
	#NS_KEY_NAME_ZONE
 0x0100

	)

367 
	#NS_KEY_NAME_RESERVED
 0x0300

	)

368 
	#NS_KEY_RESERVED8
 0x0080

	)

369 
	#NS_KEY_RESERVED9
 0x0040

	)

370 
	#NS_KEY_RESERVED10
 0x0020

	)

371 
	#NS_KEY_RESERVED11
 0x0010

	)

372 
	#NS_KEY_SIGNATORYMASK
 0x000F

	)

373 
	#NS_KEY_RESERVED_BITMASK
 ( 
NS_KEY_RESERVED2
 | \

374 
NS_KEY_RESERVED4
 | \

375 
NS_KEY_RESERVED5
 | \

376 
NS_KEY_RESERVED8
 | \

377 
NS_KEY_RESERVED9
 | \

378 
NS_KEY_RESERVED10
 | \

379 
NS_KEY_RESERVED11
 )

	)

380 
	#NS_KEY_RESERVED_BITMASK2
 0xFFFF

	)

382 
	#NS_ALG_MD5RSA
 1

	)

383 
	#NS_ALG_DH
 2

	)

384 
	#NS_ALG_DSA
 3

	)

385 
	#NS_ALG_DSS
 
NS_ALG_DSA


	)

386 
	#NS_ALG_EXPIRE_ONLY
 253

	)

387 
	#NS_ALG_PRIVATE_OID
 254

	)

390 
	#NS_KEY_PROT_TLS
 1

	)

391 
	#NS_KEY_PROT_EMAIL
 2

	)

392 
	#NS_KEY_PROT_DNSSEC
 3

	)

393 
	#NS_KEY_PROT_IPSEC
 4

	)

394 
	#NS_KEY_PROT_ANY
 255

	)

397 
	#NS_MD5RSA_MIN_BITS
 512

	)

398 
	#NS_MD5RSA_MAX_BITS
 4096

	)

400 
	#NS_MD5RSA_MAX_BYTES
 ((
NS_MD5RSA_MAX_BITS
+7/8)*2+3)

	)

402 
	#NS_MD5RSA_MAX_BASE64
 (((
NS_MD5RSA_MAX_BYTES
+2)/3)*4)

	)

403 
	#NS_MD5RSA_MIN_SIZE
 ((
NS_MD5RSA_MIN_BITS
+7)/8)

	)

404 
	#NS_MD5RSA_MAX_SIZE
 ((
NS_MD5RSA_MAX_BITS
+7)/8)

	)

406 
	#NS_DSA_SIG_SIZE
 41

	)

407 
	#NS_DSA_MIN_SIZE
 213

	)

408 
	#NS_DSA_MAX_BYTES
 405

	)

411 
	#NS_SIG_TYPE
 0

	)

412 
	#NS_SIG_ALG
 2

	)

413 
	#NS_SIG_LABELS
 3

	)

414 
	#NS_SIG_OTTL
 4

	)

415 
	#NS_SIG_EXPIR
 8

	)

416 
	#NS_SIG_SIGNED
 12

	)

417 
	#NS_SIG_FOOT
 16

	)

418 
	#NS_SIG_SIGNER
 18

	)

420 
	#NS_NXT_BITS
 8

	)

421 
	#NS_NXT_BIT_SET
–
n
,
p
Ë’[“)/
NS_NXT_BITS
] |(0x80>>(“)%NS_NXT_BITS)))

	)

422 
	#NS_NXT_BIT_CLEAR
(
n
,
p
Ë’[“)/
NS_NXT_BITS
] &~(0x80>>(“)%NS_NXT_BITS)))

	)

423 
	#NS_NXT_BIT_ISSET
(
n
,
p
Ë’[“)/
NS_NXT_BITS
] & (0x80>>(“)%NS_NXT_BITS)))

	)

424 
	#NS_NXT_MAX
 127

	)

429 
	#NS_OPT_DNSSEC_OK
 0x8000U

	)

430 
	#NS_OPT_NSID
 3

	)

435 
	#NS_GET16
(
s
, 
˝
) do { \

436 c⁄° 
u_ch¨
 *
t_˝
 = (c⁄° u_ch¨ *)(
˝
); \

437 (
s
Ë((
u_öt16_t
)
t_˝
[0] << 8) \

438 | ((
u_öt16_t
)
t_˝
[1]) \

440 (
˝
Ë+
NS_INT16SZ
; \

441 } 0)

	)

443 
	#NS_GET32
(
l
, 
˝
) do { \

444 c⁄° 
u_ch¨
 *
t_˝
 = (c⁄° u_ch¨ *)(
˝
); \

445 (
l
Ë((
u_öt32_t
)
t_˝
[0] << 24) \

446 | ((
u_öt32_t
)
t_˝
[1] << 16) \

447 | ((
u_öt32_t
)
t_˝
[2] << 8) \

448 | ((
u_öt32_t
)
t_˝
[3]) \

450 (
˝
Ë+
NS_INT32SZ
; \

451 } 0)

	)

453 
	#NS_PUT16
(
s
, 
˝
) do { \

454 
u_öt16_t
 
t_s
 = (u_öt16_t)(
s
); \

455 
u_ch¨
 *
t_˝
 = (u_ch¨ *)(
˝
); \

456 *
t_˝
++ = 
t_s
 >> 8; \

457 *
t_˝
 = 
t_s
; \

458 (
˝
Ë+
NS_INT16SZ
; \

459 } 0)

	)

461 
	#NS_PUT32
(
l
, 
˝
) do { \

462 
u_öt32_t
 
t_l
 = (u_öt32_t)(
l
); \

463 
u_ch¨
 *
t_˝
 = (u_ch¨ *)(
˝
); \

464 *
t_˝
++ = 
t_l
 >> 24; \

465 *
t_˝
++ = 
t_l
 >> 16; \

466 *
t_˝
++ = 
t_l
 >> 8; \

467 *
t_˝
 = 
t_l
; \

468 (
˝
Ë+
NS_INT32SZ
; \

469 } 0)

	)

471 
__BEGIN_DECLS


472 
	$ns_msg_gëÊag
 (
ns_msg
, Ë
__THROW
;

473 
u_öt
 
	$ns_gë16
 (c⁄° 
u_ch¨
 *Ë
__THROW
;

474 
u_l⁄g
 
	$ns_gë32
 (c⁄° 
u_ch¨
 *Ë
__THROW
;

475 
	$ns_put16
 (
u_öt
, 
u_ch¨
 *Ë
__THROW
;

476 
	$ns_put32
 (
u_l⁄g
, 
u_ch¨
 *Ë
__THROW
;

477 
	$ns_öô∑r£
 (c⁄° 
u_ch¨
 *, , 
ns_msg
 *Ë
__THROW
;

478 
	$ns_skùº
 (c⁄° 
u_ch¨
 *, c⁄° u_ch¨ *, 
ns_£˘
, )

479 
__THROW
;

480 
	$ns_∑r£º
 (
ns_msg
 *, 
ns_£˘
, , 
ns_º
 *Ë
__THROW
;

481 
	$ns_•röår
 (c⁄° 
ns_msg
 *, c⁄° 
ns_º
 *,

482 c⁄° *, c⁄° *, *, 
size_t
)

483 
__THROW
;

484 
	$ns_•röårf
 (c⁄° 
u_ch¨
 *, 
size_t
, const *,

485 
ns_˛ass
, 
ns_ty≥
, 
u_l⁄g
, c⁄° 
u_ch¨
 *,

486 
size_t
, const *, const *,

487 *, 
size_t
Ë
__THROW
;

488 
	$ns_f‹m©_âl
 (
u_l⁄g
, *, 
size_t
Ë
__THROW
;

489 
	$ns_∑r£_âl
 (c⁄° *, 
u_l⁄g
 *Ë
__THROW
;

490 
u_öt32_t
 
	$ns_d©ëo£cs
 (c⁄° *, *Ë
__THROW
;

491 
	$ns_«me_¡ﬁ
 (c⁄° 
u_ch¨
 *, u_ch¨ *, 
size_t
Ë
__THROW
;

492 
	$ns_«me_¡›
 (c⁄° 
u_ch¨
 *, *, 
size_t
Ë
__THROW
;

493 
	$ns_«me_±⁄
 (c⁄° *, 
u_ch¨
 *, 
size_t
Ë
__THROW
;

494 
	$ns_«me_u≈ack
 (c⁄° 
u_ch¨
 *, const u_char *,

495 c⁄° 
u_ch¨
 *, u_ch¨ *, 
size_t
Ë
__THROW
;

496 
	$ns_«me_∑ck
 (c⁄° 
u_ch¨
 *, u_char *, ,

497 c⁄° 
u_ch¨
 **, c⁄° u_ch¨ **Ë
__THROW
;

498 
	$ns_«me_uncom¥ess
 (c⁄° 
u_ch¨
 *, const u_char *,

499 c⁄° 
u_ch¨
 *, *, 
size_t
Ë
__THROW
;

500 
	$ns_«me_com¥ess
 (c⁄° *, 
u_ch¨
 *, 
size_t
,

501 c⁄° 
u_ch¨
 **, c⁄° u_ch¨ **Ë
__THROW
;

502 
	$ns_«me_skù
 (c⁄° 
u_ch¨
 **, c⁄° u_ch¨ *Ë
__THROW
;

503 
	$ns_«me_rﬁlback
 (c⁄° 
u_ch¨
 *, const u_char **,

504 c⁄° 
u_ch¨
 **Ë
__THROW
;

505 
	$ns_sign
 (
u_ch¨
 *, *, , , *,

506 c⁄° 
u_ch¨
 *, , u_ch¨ *, *, 
time_t
Ë
__THROW
;

507 
	$ns_sign2
 (
u_ch¨
 *, *, , , *,

508 c⁄° 
u_ch¨
 *, , u_ch¨ *, *, 
time_t
,

509 
u_ch¨
 **, u_ch¨ **Ë
__THROW
;

510 
	$ns_sign_t˝
 (
u_ch¨
 *, *, , ,

511 
ns_t˝_tsig_°©e
 *, Ë
__THROW
;

512 
	$ns_sign_t˝2
 (
u_ch¨
 *, *, , ,

513 
ns_t˝_tsig_°©e
 *, ,

514 
u_ch¨
 **, u_ch¨ **Ë
__THROW
;

515 
	$ns_sign_t˝_öô
 (*, c⁄° 
u_ch¨
 *, ,

516 
ns_t˝_tsig_°©e
 *Ë
__THROW
;

517 
u_ch¨
 *
	$ns_föd_tsig
 (
u_ch¨
 *, u_ch¨ *Ë
__THROW
;

518 
	$ns_vîify
 (
u_ch¨
 *, *, *, const u_char *, ,

519 
u_ch¨
 *, *, 
time_t
 *, Ë
__THROW
;

520 
	$ns_vîify_t˝
 (
u_ch¨
 *, *, 
ns_t˝_tsig_°©e
 *, )

521 
__THROW
;

522 
	$ns_vîify_t˝_öô
 (*, c⁄° 
u_ch¨
 *, ,

523 
ns_t˝_tsig_°©e
 *Ë
__THROW
;

524 
	$ns_ßmedomaö
 (c⁄° *, c⁄° *Ë
__THROW
;

525 
	$ns_subdomaö
 (c⁄° *, c⁄° *Ë
__THROW
;

526 
	$ns_makeˇn⁄
 (c⁄° *, *, 
size_t
Ë
__THROW
;

527 
	$ns_ßmíame
 (c⁄° *, c⁄° *Ë
__THROW
;

528 
__END_DECLS


530 #ifde‡
BIND_4_COMPAT


531 
	~<¨∑/«me£r_com∑t.h
>

	@/usr/include/assert.h

24 #ifdef 
_ASSERT_H


26 #unde‡
_ASSERT_H


27 #unde‡
as£π


28 #unde‡
__ASSERT_VOID_CAST


30 #ifdef 
__USE_GNU


31 #unde‡
as£π_≥º‹


36 
	#_ASSERT_H
 1

	)

37 
	~<„©uªs.h
>

39 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (2,95)

40 
	#__ASSERT_VOID_CAST
 
°©ic_ˇ°
<>

	)

42 
	#__ASSERT_VOID_CAST
 ()

	)

50 #ifdef 
NDEBUG


52 
	#as£π
(
ex¥
Ë(
	`__ASSERT_VOID_CAST
 (0))

	)

60 #ifdef 
__USE_GNU


61 
	#as£π_≥º‹
(
î∫um
Ë(
	`__ASSERT_VOID_CAST
 (0))

	)

66 #i‚de‡
_ASSERT_H_DECLS


67 
	#_ASSERT_H_DECLS


	)

68 
__BEGIN_DECLS


71 
	$__as£π_Áû
 (
__c⁄°
 *
__as£πi⁄
, __c⁄° *
__fûe
,

72 
__löe
, 
__c⁄°
 *
__fun˘i⁄
)

73 
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

76 
	$__as£π_≥º‹_Áû
 (
__î∫um
, 
__c⁄°
 *
__fûe
,

77 
__löe
,

78 
__c⁄°
 *
__fun˘i⁄
)

79 
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

84 
	$__as£π
 (c⁄° *
__as£πi⁄
, c⁄° *
__fûe
, 
__löe
)

85 
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

88 
__END_DECLS


91 
	#as£π
(
ex¥
) \

92 ((
ex¥
) \

93 ? 
	`__ASSERT_VOID_CAST
 (0) \

94 : 
	`__as£π_Áû
 (
	`__STRING
(
ex¥
), 
__FILE__
, 
__LINE__
, 
__ASSERT_FUNCTION
))

	)

96 #ifdef 
__USE_GNU


97 
	#as£π_≥º‹
(
î∫um
) \

98 (!(
î∫um
) \

99 ? 
	`__ASSERT_VOID_CAST
 (0) \

100 : 
	`__as£π_≥º‹_Áû
 ((
î∫um
), 
__FILE__
, 
__LINE__
, 
__ASSERT_FUNCTION
))

	)

108 #i‡
deföed
 
__˝lu•lus
 ? 
	`__GNUC_PREREQ
 (2, 6) : __GNUC_PREREQ (2, 4)

109 
	#__ASSERT_FUNCTION
 
__PRETTY_FUNCTION__


	)

111 #i‡
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

112 
	#__ASSERT_FUNCTION
 
__func__


	)

114 
	#__ASSERT_FUNCTION
 ((
__c⁄°
 *Ë0)

	)

	@/usr/include/ctype.h

24 #i‚def 
_CTYPE_H


25 
	#_CTYPE_H
 1

	)

27 
	~<„©uªs.h
>

28 
	~<bôs/ty≥s.h
>

30 
	g__BEGIN_DECLS


32 #i‚de‡
_ISbô


41 
	~<ídün.h
>

42 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


43 
	#_ISbô
(
bô
Ë(1 << (bô))

	)

45 
	#_ISbô
(
bô
Ë((bôË< 8 ? ((1 << (bô)Ë<< 8Ë: ((1 << (bô)Ë>> 8))

	)

50 
	m_ISuµî
 = 
_ISbô
 (0),

51 
	m_ISlowî
 = 
_ISbô
 (1),

52 
	m_ISÆpha
 = 
_ISbô
 (2),

53 
	m_ISdigô
 = 
_ISbô
 (3),

54 
	m_ISxdigô
 = 
_ISbô
 (4),

55 
	m_IS•a˚
 = 
_ISbô
 (5),

56 
	m_IS¥öt
 = 
_ISbô
 (6),

57 
	m_ISgøph
 = 
_ISbô
 (7),

58 
	m_ISbœnk
 = 
_ISbô
 (8),

59 
	m_IS˙ål
 = 
_ISbô
 (9),

60 
	m_ISpun˘
 = 
_ISbô
 (10),

61 
	m_ISÆnum
 = 
_ISbô
 (11)

81 
__c⁄°
 **
	$__˘y≥_b_loc
 ()

82 
__THROW
 
	`__©åibuã__
 ((
__c⁄°
));

83 
__c⁄°
 
__öt32_t
 **
	$__˘y≥_tﬁowî_loc
 ()

84 
__THROW
 
	`__©åibuã__
 ((
__c⁄°
));

85 
__c⁄°
 
__öt32_t
 **
	$__˘y≥_touµî_loc
 ()

86 
__THROW
 
	`__©åibuã__
 ((
__c⁄°
));

88 
	#__is˘y≥
(
c
, 
ty≥
) \

89 ((*
	`__˘y≥_b_loc
 ())[(Ë(
c
)] & (Ë
ty≥
)

	)

91 
	#__ißscii
(
c
Ë(((cË& ~0x7fË=0Ë

	)

92 
	#__tﬂscii
(
c
Ë((cË& 0x7fË

	)

94 
	#__ex˘y≥
(
«me
Ë
	`«me
 (Ë
__THROW


	)

96 
__BEGIN_NAMESPACE_STD


102 
	`__ex˘y≥
 (
iß um
);

103 
	`__ex˘y≥
 (
ißÕha
);

104 
	`__ex˘y≥
 (
is˙ål
);

105 
	`__ex˘y≥
 (
isdigô
);

106 
	`__ex˘y≥
 (
i¶owî
);

107 
	`__ex˘y≥
 (
isgøph
);

108 
	`__ex˘y≥
 (
i•röt
);

109 
	`__ex˘y≥
 (
i•un˘
);

110 
	`__ex˘y≥
 (
is•a˚
);

111 
	`__ex˘y≥
 (
isuµî
);

112 
	`__ex˘y≥
 (
isxdigô
);

116 
	$tﬁowî
 (
__c
Ë
__THROW
;

119 
	$touµî
 (
__c
Ë
__THROW
;

121 
__END_NAMESPACE_STD


125 #ifdef 
__USE_ISOC99


126 
__BEGIN_NAMESPACE_C99


128 
	`__ex˘y≥
 (
isbœnk
);

130 
__END_NAMESPACE_C99


133 #ifde‡
__USE_GNU


135 
	$is˘y≥
 (
__c
, 
__mask
Ë
__THROW
;

138 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


142 
	$ißscii
 (
__c
Ë
__THROW
;

146 
	$tﬂscii
 (
__c
Ë
__THROW
;

150 
	`__ex˘y≥
 (
_touµî
);

151 
	`__ex˘y≥
 (
_tﬁowî
);

155 
	#__tobody
(
c
, 
f
, 
a
, 
¨gs
) \

156 (
__exãnsi⁄__
 \

157 ({ 
__ªs
; \

158 i‡( (
c
) > 1) \

160 i‡(
	`__buûtö_c⁄°™t_p
 (
c
)) \

162 
__c
 = (
c
); \

163 
__ªs
 = 
__c
 < -128 || __¯> 255 ? __¯: (
a
)[__c]; \

166 
__ªs
 = 
f
 
¨gs
; \

169 
__ªs
 = (
a
)[(Ë(
c
)]; \

170 
__ªs
; 
	}
}))

	)

172 #i‡!
deföed
 
__NO_CTYPE
 && !deföed 
__˝lu•lus


173 
	#iß um
(
c
Ë
	`__is˘y≥
((c), 
_ISÆnum
)

	)

174 
	#ißÕha
(
c
Ë
	`__is˘y≥
((c), 
_ISÆpha
)

	)

175 
	#is˙ål
(
c
Ë
	`__is˘y≥
((c), 
_IS˙ål
)

	)

176 
	#isdigô
(
c
Ë
	`__is˘y≥
((c), 
_ISdigô
)

	)

177 
	#i¶owî
(
c
Ë
	`__is˘y≥
((c), 
_ISlowî
)

	)

178 
	#isgøph
(
c
Ë
	`__is˘y≥
((c), 
_ISgøph
)

	)

179 
	#i•röt
(
c
Ë
	`__is˘y≥
((c), 
_IS¥öt
)

	)

180 
	#i•un˘
(
c
Ë
	`__is˘y≥
((c), 
_ISpun˘
)

	)

181 
	#is•a˚
(
c
Ë
	`__is˘y≥
((c), 
_IS•a˚
)

	)

182 
	#isuµî
(
c
Ë
	`__is˘y≥
((c), 
_ISuµî
)

	)

183 
	#isxdigô
(
c
Ë
	`__is˘y≥
((c), 
_ISxdigô
)

	)

185 #ifde‡
__USE_ISOC99


186 
	#isbœnk
(
c
Ë
	`__is˘y≥
((c), 
_ISbœnk
)

	)

189 #ifde‡
__USE_EXTERN_INLINES


190 
__exã∫_ölöe
 

191 
__NTH
 (
	$tﬁowî
 (
__c
))

193  
__c
 >-128 && __¯< 256 ? (*
	`__˘y≥_tﬁowî_loc
 ())[__c] : __c;

194 
	}
}

196 
__exã∫_ölöe
 

197 
__NTH
 (
	$touµî
 (
__c
))

199  
__c
 >-128 && __¯< 256 ? (*
	`__˘y≥_touµî_loc
 ())[__c] : __c;

200 
	}
}

203 #i‡
__GNUC__
 >2 && 
deföed
 
__OPTIMIZE__
 && !deföed 
__˝lu•lus


204 
	#tﬁowî
(
c
Ë
	`__tobody
 (c, 
tﬁowî
, *
	`__˘y≥_tﬁowî_loc
 (), (c))

	)

205 
	#touµî
(
c
Ë
	`__tobody
 (c, 
touµî
, *
	`__˘y≥_touµî_loc
 (), (c))

	)

208 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


209 
	#ißscii
(
c
Ë
	`__ißscii
 (c)

	)

210 
	#tﬂscii
(
c
Ë
	`__tﬂscii
 (c)

	)

212 
	#_tﬁowî
(
c
Ë((Ë(*
	`__˘y≥_tﬁowî_loc
 ())[(Ë(c)])

	)

213 
	#_touµî
(
c
Ë((Ë(*
	`__˘y≥_touµî_loc
 ())[(Ë(c)])

	)

219 #ifde‡
__USE_XOPEN2K8


233 
	~<xloˇÀ.h
>

237 
	#__is˘y≥_l
(
c
, 
ty≥
, 
loˇÀ
) \

238 ((
loˇÀ
)->
__˘y≥_b
[(Ë(
c
)] & (Ë
ty≥
)

	)

240 
	#__ex˘y≥_l
(
«me
) \

241 
	`«me
 (, 
__loˇÀ_t
Ë
__THROW


	)

247 
__ex˘y≥_l
 (
iß um_l
);

248 
__ex˘y≥_l
 (
ißÕha_l
);

249 
__ex˘y≥_l
 (
is˙ål_l
);

250 
__ex˘y≥_l
 (
isdigô_l
);

251 
__ex˘y≥_l
 (
i¶owî_l
);

252 
__ex˘y≥_l
 (
isgøph_l
);

253 
__ex˘y≥_l
 (
i•röt_l
);

254 
__ex˘y≥_l
 (
i•un˘_l
);

255 
__ex˘y≥_l
 (
is•a˚_l
);

256 
__ex˘y≥_l
 (
isuµî_l
);

257 
__ex˘y≥_l
 (
isxdigô_l
);

259 
__ex˘y≥_l
 (
isbœnk_l
);

263 
	$__tﬁowî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

264 
	$tﬁowî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

267 
	$__touµî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

268 
	$touµî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

270 #i‡
__GNUC__
 >2 && 
deföed
 
__OPTIMIZE__
 && !deföed 
__˝lu•lus


271 
	#__tﬁowî_l
(
c
, 
loˇÀ
) \

272 
	`__tobody
 (
c
, 
__tﬁowî_l
, (
loˇÀ
)->
__˘y≥_tﬁowî
, (c,ÜoˇÀ))

	)

273 
	#__touµî_l
(
c
, 
loˇÀ
) \

274 
	`__tobody
 (
c
, 
__touµî_l
, (
loˇÀ
)->
__˘y≥_touµî
, (c,ÜoˇÀ))

	)

275 
	#tﬁowî_l
(
c
, 
loˇÀ
Ë
	`__tﬁowî_l
 ((c), (loˇÀ))

	)

276 
	#touµî_l
(
c
, 
loˇÀ
Ë
	`__touµî_l
 ((c), (loˇÀ))

	)

280 #i‚de‡
__NO_CTYPE


281 
	#__iß um_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISÆnum
, (l))

	)

282 
	#__ißÕha_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISÆpha
, (l))

	)

283 
	#__is˙ål_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS˙ål
, (l))

	)

284 
	#__isdigô_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISdigô
, (l))

	)

285 
	#__i¶owî_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISlowî
, (l))

	)

286 
	#__isgøph_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISgøph
, (l))

	)

287 
	#__i•röt_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS¥öt
, (l))

	)

288 
	#__i•un˘_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISpun˘
, (l))

	)

289 
	#__is•a˚_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS•a˚
, (l))

	)

290 
	#__isuµî_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISuµî
, (l))

	)

291 
	#__isxdigô_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISxdigô
, (l))

	)

293 
	#__isbœnk_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISbœnk
, (l))

	)

295 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC


296 
	#__ißscii_l
(
c
,
l
Ë(÷), 
	`__ißscii
 (c))

	)

297 
	#__tﬂscii_l
(
c
,
l
Ë(÷), 
	`__tﬂscii
 (c))

	)

300 
	#iß um_l
(
c
,
l
Ë
	`__iß um_l
 ((c), (l))

	)

301 
	#ißÕha_l
(
c
,
l
Ë
	`__ißÕha_l
 ((c), (l))

	)

302 
	#is˙ål_l
(
c
,
l
Ë
	`__is˙ål_l
 ((c), (l))

	)

303 
	#isdigô_l
(
c
,
l
Ë
	`__isdigô_l
 ((c), (l))

	)

304 
	#i¶owî_l
(
c
,
l
Ë
	`__i¶owî_l
 ((c), (l))

	)

305 
	#isgøph_l
(
c
,
l
Ë
	`__isgøph_l
 ((c), (l))

	)

306 
	#i•röt_l
(
c
,
l
Ë
	`__i•röt_l
 ((c), (l))

	)

307 
	#i•un˘_l
(
c
,
l
Ë
	`__i•un˘_l
 ((c), (l))

	)

308 
	#is•a˚_l
(
c
,
l
Ë
	`__is•a˚_l
 ((c), (l))

	)

309 
	#isuµî_l
(
c
,
l
Ë
	`__isuµî_l
 ((c), (l))

	)

310 
	#isxdigô_l
(
c
,
l
Ë
	`__isxdigô_l
 ((c), (l))

	)

312 
	#isbœnk_l
(
c
,
l
Ë
	`__isbœnk_l
 ((c), (l))

	)

314 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC


315 
	#ißscii_l
(
c
,
l
Ë
	`__ißscii_l
 ((c), (l))

	)

316 
	#tﬂscii_l
(
c
,
l
Ë
	`__tﬂscii_l
 ((c), (l))

	)

323 
__END_DECLS


	@/usr/include/dlfcn.h

20 #i‚def 
_DLFCN_H


21 
	#_DLFCN_H
 1

	)

23 
	~<„©uªs.h
>

24 
	#__√ed_size_t


	)

25 
	~<°ddef.h
>

28 
	~<bôs/dlf˙.h
>

31 #ifde‡
__USE_GNU


36 
	#RTLD_NEXT
 ((*Ë-1l)

	)

41 
	#RTLD_DEFAULT
 ((*Ë0)

	)

45 
	tLmid_t
;

48 
	#LM_ID_BASE
 0

	)

49 
	#LM_ID_NEWLM
 -1

	)

53 
__BEGIN_DECLS


57 *
	$dl›í
 (
__c⁄°
 *
__fûe
, 
__mode
Ë
__THROW
;

61 
	$dl˛o£
 (*
__h™dÀ
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

65 *
	$dlsym
 (*
__ª°ri˘
 
__h™dÀ
,

66 
__c⁄°
 *
__ª°ri˘
 
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

68 #ifde‡
__USE_GNU


70 *
	$dlm›í
 (
Lmid_t
 
__nsid
, 
__c⁄°
 *
__fûe
, 
__mode
Ë
__THROW
;

74 *
	$dlvsym
 (*
__ª°ri˘
 
__h™dÀ
,

75 
__c⁄°
 *
__ª°ri˘
 
__«me
,

76 
__c⁄°
 *
__ª°ri˘
 
__vîsi⁄
)

77 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

83 *
	$dÀº‹
 (Ë
__THROW
;

86 #ifde‡
__USE_GNU


91 
__c⁄°
 *
dli_‚ame
;

92 *
dli_fba£
;

93 
__c⁄°
 *
dli_¢ame
;

94 *
dli_ßddr
;

95 } 
	tDl_öfo
;

99 
	$dœddr
 (
__c⁄°
 *
__addªss
, 
Dl_öfo
 *
__öfo
)

100 
__THROW
 
	`__n⁄nuŒ
 ((2));

103 
	$dœddr1
 (
__c⁄°
 *
__addªss
, 
Dl_öfo
 *
__öfo
,

104 **
__exåa_öfo
, 
__Êags
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

112 
RTLD_DL_SYMENT
 = 1,

115 
RTLD_DL_LINKMAP
 = 2

124 
	$dlöfo
 (*
__ª°ri˘
 
__h™dÀ
,

125 
__ªque°
, *
__ª°ri˘
 
__¨g
)

126 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

132 
RTLD_DI_LMID
 = 1,

136 
RTLD_DI_LINKMAP
 = 2,

138 
RTLD_DI_CONFIGADDR
 = 3,

145 
RTLD_DI_SERINFO
 = 4,

146 
RTLD_DI_SERINFOSIZE
 = 5,

150 
RTLD_DI_ORIGIN
 = 6,

152 
RTLD_DI_PROFILENAME
 = 7,

153 
RTLD_DI_PROFILEOUT
 = 8,

158 
RTLD_DI_TLS_MODID
 = 9,

164 
RTLD_DI_TLS_DATA
 = 10,

166 
RTLD_DI_MAX
 = 10

174 *
dls_«me
;

175 
dls_Êags
;

176 } 
	tDl_£Ω©h
;

182 
size_t
 
dls_size
;

183 
dls_˙t
;

184 
Dl_£Ω©h
 
dls_£Ω©h
[1];

185 } 
	tDl_£röfo
;

189 
__END_DECLS


	@/usr/include/errno.h

23 #i‚def 
_ERRNO_H


27 #i‚def 
__√ed_Em©h


28 
	#_ERRNO_H
 1

	)

29 
	~<„©uªs.h
>

32 
	g__BEGIN_DECLS


36 
	~<bôs/î∫o.h
>

37 #unde‡
__√ed_Em©h


39 #ifdef 
_ERRNO_H


46 #i‚def 
î∫o


47 
î∫o
;

50 #ifde‡
__USE_GNU


55 *
¥ogøm_övoˇti⁄_«me
, *
¥ogøm_övoˇti⁄_sh‹t_«me
;

59 
	g__END_DECLS


67 #i‡
deföed
 
__USE_GNU
 || deföed 
__√ed_îr‹_t


68 #i‚de‡
__îr‹_t_deföed


69 
	tîr‹_t
;

70 
	#__îr‹_t_deföed
 1

	)

72 #unde‡
__√ed_îr‹_t


	@/usr/include/fcntl.h

24 #i‚def 
_FCNTL_H


25 
	#_FCNTL_H
 1

	)

27 
	~<„©uªs.h
>

30 
	g__BEGIN_DECLS


34 
	~<bôs/f˙é.h
>

37 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


38 
	~<bôs/ty≥s.h
>

39 
	#__√ed_time•ec


	)

40 
	~<time.h
>

41 
	~<bôs/°©.h
>

43 
	#S_IFMT
 
__S_IFMT


	)

44 
	#S_IFDIR
 
__S_IFDIR


	)

45 
	#S_IFCHR
 
__S_IFCHR


	)

46 
	#S_IFBLK
 
__S_IFBLK


	)

47 
	#S_IFREG
 
__S_IFREG


	)

48 #ifde‡
__S_IFIFO


49 
	#S_IFIFO
 
__S_IFIFO


	)

51 #ifde‡
__S_IFLNK


52 
	#S_IFLNK
 
__S_IFLNK


	)

54 #i‡(
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8
Ë&& deföed 
__S_IFSOCK


55 
	#S_IFSOCK
 
__S_IFSOCK


	)

60 
	#S_ISUID
 
__S_ISUID


	)

61 
	#S_ISGID
 
__S_ISGID


	)

63 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


65 
	#S_ISVTX
 
__S_ISVTX


	)

68 
	#S_IRUSR
 
__S_IREAD


	)

69 
	#S_IWUSR
 
__S_IWRITE


	)

70 
	#S_IXUSR
 
__S_IEXEC


	)

72 
	#S_IRWXU
 (
__S_IREAD
|
__S_IWRITE
|
__S_IEXEC
)

	)

74 
	#S_IRGRP
 (
S_IRUSR
 >> 3Ë

	)

75 
	#S_IWGRP
 (
S_IWUSR
 >> 3Ë

	)

76 
	#S_IXGRP
 (
S_IXUSR
 >> 3Ë

	)

78 
	#S_IRWXG
 (
S_IRWXU
 >> 3)

	)

80 
	#S_IROTH
 (
S_IRGRP
 >> 3Ë

	)

81 
	#S_IWOTH
 (
S_IWGRP
 >> 3Ë

	)

82 
	#S_IXOTH
 (
S_IXGRP
 >> 3Ë

	)

84 
	#S_IRWXO
 (
S_IRWXG
 >> 3)

	)

87 #ifdef 
__USE_MISC


88 #i‚de‡
R_OK


91 
	#R_OK
 4

	)

92 
	#W_OK
 2

	)

93 
	#X_OK
 1

	)

94 
	#F_OK
 0

	)

99 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


100 
	#SEEK_SET
 0

	)

101 
	#SEEK_CUR
 1

	)

102 
	#SEEK_END
 2

	)

110 
f˙é
 (
__fd
, 
__cmd
, ...);

118 #i‚de‡
__USE_FILE_OFFSET64


119 
	$›í
 (
__c⁄°
 *
__fûe
, 
__oÊag
, ...Ë
	`__n⁄nuŒ
 ((1));

121 #ifde‡
__REDIRECT


122 
	`__REDIRECT
 (
›í
, (
__c⁄°
 *
__fûe
, 
__oÊag
, ...), 
›í64
)

123 
	`__n⁄nuŒ
 ((1));

125 
	#›í
 
›í64


	)

128 #ifde‡
__USE_LARGEFILE64


129 
	$›í64
 (
__c⁄°
 *
__fûe
, 
__oÊag
, ...Ë
	`__n⁄nuŒ
 ((1));

132 #ifde‡
__USE_ATFILE


142 #i‚de‡
__USE_FILE_OFFSET64


143 
	$›í©
 (
__fd
, 
__c⁄°
 *
__fûe
, 
__oÊag
, ...)

144 
	`__n⁄nuŒ
 ((2));

146 #ifde‡
__REDIRECT


147 
	`__REDIRECT
 (
›í©
, (
__fd
, 
__c⁄°
 *
__fûe
, 
__oÊag
,

148 ...), 
›í©64
Ë
	`__n⁄nuŒ
 ((2));

150 
	#›í©
 
›í©64


	)

153 #ifde‡
__USE_LARGEFILE64


154 
	$›í©64
 (
__fd
, 
__c⁄°
 *
__fûe
, 
__oÊag
, ...)

155 
	`__n⁄nuŒ
 ((2));

164 #i‚de‡
__USE_FILE_OFFSET64


165 
	$¸ót
 (
__c⁄°
 *
__fûe
, 
__mode_t
 
__mode
Ë
	`__n⁄nuŒ
 ((1));

167 #ifde‡
__REDIRECT


168 
	`__REDIRECT
 (
¸ót
, (
__c⁄°
 *
__fûe
, 
__mode_t
 
__mode
),

169 
¸ót64
Ë
	`__n⁄nuŒ
 ((1));

171 
	#¸ót
 
¸ót64


	)

174 #ifde‡
__USE_LARGEFILE64


175 
	$¸ót64
 (
__c⁄°
 *
__fûe
, 
__mode_t
 
__mode
Ë
	`__n⁄nuŒ
 ((1));

178 #i‡!
deföed
 
F_LOCK
 && (deföed 
__USE_MISC
 || (deföed 
__USE_XOPEN_EXTENDED
 \

179 && !
deföed
 
__USE_POSIX
))

188 
	#F_ULOCK
 0

	)

189 
	#F_LOCK
 1

	)

190 
	#F_TLOCK
 2

	)

191 
	#F_TEST
 3

	)

193 #i‚de‡
__USE_FILE_OFFSET64


194 
	`lockf
 (
__fd
, 
__cmd
, 
__off_t
 
__Àn
);

196 #ifde‡
__REDIRECT


197 
	`__REDIRECT
 (
lockf
, (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
), 
lockf64
);

199 
	#lockf
 
lockf64


	)

202 #ifde‡
__USE_LARGEFILE64


203 
	`lockf64
 (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
);

207 #ifde‡
__USE_XOPEN2K


210 #i‚de‡
__USE_FILE_OFFSET64


211 
	$posix_Ádvi£
 (
__fd
, 
__off_t
 
__off£t
, __off_à
__Àn
,

212 
__advi£
Ë
__THROW
;

214 #ifde‡
__REDIRECT_NTH


215 
	`__REDIRECT_NTH
 (
posix_Ádvi£
, (
__fd
, 
__off64_t
 
__off£t
,

216 
__off64_t
 
__Àn
, 
__advi£
),

217 
posix_Ádvi£64
);

219 
	#posix_Ádvi£
 
posix_Ádvi£64


	)

222 #ifde‡
__USE_LARGEFILE64


223 
	$posix_Ádvi£64
 (
__fd
, 
__off64_t
 
__off£t
, __off64_à
__Àn
,

224 
__advi£
Ë
__THROW
;

232 #i‚de‡
__USE_FILE_OFFSET64


233 
	`posix_ÁŒoˇã
 (
__fd
, 
__off_t
 
__off£t
, __off_à
__Àn
);

235 #ifde‡
__REDIRECT


236 
	`__REDIRECT
 (
posix_ÁŒoˇã
, (
__fd
, 
__off64_t
 
__off£t
,

237 
__off64_t
 
__Àn
),

238 
posix_ÁŒoˇã64
);

240 
	#posix_ÁŒoˇã
 
posix_ÁŒoˇã64


	)

243 #ifde‡
__USE_LARGEFILE64


244 
	`posix_ÁŒoˇã64
 (
__fd
, 
__off64_t
 
__off£t
, __off64_à
__Àn
);

250 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe
 \

251 && 
deföed
 
__va_¨g_∑ck_Àn


252 
	~<bôs/f˙é2.h
>

255 
__END_DECLS


	@/usr/include/ifaddrs.h

20 #i‚de‡
_IFADDRS_H


21 
	#_IFADDRS_H
 1

	)

23 
	~<„©uªs.h
>

24 
	~<sys/sockë.h
>

26 
__BEGIN_DECLS


30 
	siÁddrs


32 
iÁddrs
 *
	miÁ_√xt
;

34 *
	miÁ_«me
;

35 
	miÁ_Êags
;

37 
sockaddr
 *
	miÁ_addr
;

38 
sockaddr
 *
	miÁ_√tmask
;

45 
sockaddr
 *
	mifu_brﬂdaddr
;

46 
sockaddr
 *
	mifu_d°addr
;

47 } 
	miÁ_ifu
;

50 #i‚de‡
iÁ_brﬂdaddr


51 
	#iÁ_brﬂdaddr
 
iÁ_ifu
.
ifu_brﬂdaddr


	)

53 #i‚de‡
iÁ_d°addr


54 
	#iÁ_d°addr
 
iÁ_ifu
.
ifu_d°addr


	)

57 *
	miÁ_d©a
;

67 
	$gëiÁddrs
 (
iÁddrs
 **
__iÁp
Ë
__THROW
;

70 
	$‰ìiÁddrs
 (
iÁddrs
 *
__iÁ
Ë
__THROW
;

72 
__END_DECLS


	@/usr/include/inttypes.h

23 #i‚de‡
_INTTYPES_H


24 
	#_INTTYPES_H
 1

	)

26 
	~<„©uªs.h
>

28 
	~<°döt.h
>

31 #i‚de‡
____gwch¨_t_deföed


32 #ifde‡
__˝lu•lus


33 
	#__gwch¨_t
 
wch¨_t


	)

34 #ñi‡
deföed
 
__WCHAR_TYPE__


35 
__WCHAR_TYPE__
 
	t__gwch¨_t
;

37 
	#__√ed_wch¨_t


	)

38 
	~<°ddef.h
>

39 
wch¨_t
 
	t__gwch¨_t
;

41 
	#____gwch¨_t_deföed
 1

	)

47 #i‡!
deföed
 
__˝lu•lus
 || deföed 
__STDC_FORMAT_MACROS


49 #i‡
__WORDSIZE
 == 64

50 
	#__PRI64_PREFIX
 "l"

	)

51 
	#__PRIPTR_PREFIX
 "l"

	)

53 
	#__PRI64_PREFIX
 "Œ"

	)

54 
	#__PRIPTR_PREFIX


	)

60 
	#PRId8
 "d"

	)

61 
	#PRId16
 "d"

	)

62 
	#PRId32
 "d"

	)

63 
	#PRId64
 
__PRI64_PREFIX
 "d"

	)

65 
	#PRIdLEAST8
 "d"

	)

66 
	#PRIdLEAST16
 "d"

	)

67 
	#PRIdLEAST32
 "d"

	)

68 
	#PRIdLEAST64
 
__PRI64_PREFIX
 "d"

	)

70 
	#PRIdFAST8
 "d"

	)

71 
	#PRIdFAST16
 
__PRIPTR_PREFIX
 "d"

	)

72 
	#PRIdFAST32
 
__PRIPTR_PREFIX
 "d"

	)

73 
	#PRIdFAST64
 
__PRI64_PREFIX
 "d"

	)

76 
	#PRIi8
 "i"

	)

77 
	#PRIi16
 "i"

	)

78 
	#PRIi32
 "i"

	)

79 
	#PRIi64
 
__PRI64_PREFIX
 "i"

	)

81 
	#PRIiLEAST8
 "i"

	)

82 
	#PRIiLEAST16
 "i"

	)

83 
	#PRIiLEAST32
 "i"

	)

84 
	#PRIiLEAST64
 
__PRI64_PREFIX
 "i"

	)

86 
	#PRIiFAST8
 "i"

	)

87 
	#PRIiFAST16
 
__PRIPTR_PREFIX
 "i"

	)

88 
	#PRIiFAST32
 
__PRIPTR_PREFIX
 "i"

	)

89 
	#PRIiFAST64
 
__PRI64_PREFIX
 "i"

	)

92 
	#PRIo8
 "o"

	)

93 
	#PRIo16
 "o"

	)

94 
	#PRIo32
 "o"

	)

95 
	#PRIo64
 
__PRI64_PREFIX
 "o"

	)

97 
	#PRIoLEAST8
 "o"

	)

98 
	#PRIoLEAST16
 "o"

	)

99 
	#PRIoLEAST32
 "o"

	)

100 
	#PRIoLEAST64
 
__PRI64_PREFIX
 "o"

	)

102 
	#PRIoFAST8
 "o"

	)

103 
	#PRIoFAST16
 
__PRIPTR_PREFIX
 "o"

	)

104 
	#PRIoFAST32
 
__PRIPTR_PREFIX
 "o"

	)

105 
	#PRIoFAST64
 
__PRI64_PREFIX
 "o"

	)

108 
	#PRIu8
 "u"

	)

109 
	#PRIu16
 "u"

	)

110 
	#PRIu32
 "u"

	)

111 
	#PRIu64
 
__PRI64_PREFIX
 "u"

	)

113 
	#PRIuLEAST8
 "u"

	)

114 
	#PRIuLEAST16
 "u"

	)

115 
	#PRIuLEAST32
 "u"

	)

116 
	#PRIuLEAST64
 
__PRI64_PREFIX
 "u"

	)

118 
	#PRIuFAST8
 "u"

	)

119 
	#PRIuFAST16
 
__PRIPTR_PREFIX
 "u"

	)

120 
	#PRIuFAST32
 
__PRIPTR_PREFIX
 "u"

	)

121 
	#PRIuFAST64
 
__PRI64_PREFIX
 "u"

	)

124 
	#PRIx8
 "x"

	)

125 
	#PRIx16
 "x"

	)

126 
	#PRIx32
 "x"

	)

127 
	#PRIx64
 
__PRI64_PREFIX
 "x"

	)

129 
	#PRIxLEAST8
 "x"

	)

130 
	#PRIxLEAST16
 "x"

	)

131 
	#PRIxLEAST32
 "x"

	)

132 
	#PRIxLEAST64
 
__PRI64_PREFIX
 "x"

	)

134 
	#PRIxFAST8
 "x"

	)

135 
	#PRIxFAST16
 
__PRIPTR_PREFIX
 "x"

	)

136 
	#PRIxFAST32
 
__PRIPTR_PREFIX
 "x"

	)

137 
	#PRIxFAST64
 
__PRI64_PREFIX
 "x"

	)

140 
	#PRIX8
 "X"

	)

141 
	#PRIX16
 "X"

	)

142 
	#PRIX32
 "X"

	)

143 
	#PRIX64
 
__PRI64_PREFIX
 "X"

	)

145 
	#PRIXLEAST8
 "X"

	)

146 
	#PRIXLEAST16
 "X"

	)

147 
	#PRIXLEAST32
 "X"

	)

148 
	#PRIXLEAST64
 
__PRI64_PREFIX
 "X"

	)

150 
	#PRIXFAST8
 "X"

	)

151 
	#PRIXFAST16
 
__PRIPTR_PREFIX
 "X"

	)

152 
	#PRIXFAST32
 
__PRIPTR_PREFIX
 "X"

	)

153 
	#PRIXFAST64
 
__PRI64_PREFIX
 "X"

	)

157 
	#PRIdMAX
 
__PRI64_PREFIX
 "d"

	)

158 
	#PRIiMAX
 
__PRI64_PREFIX
 "i"

	)

159 
	#PRIoMAX
 
__PRI64_PREFIX
 "o"

	)

160 
	#PRIuMAX
 
__PRI64_PREFIX
 "u"

	)

161 
	#PRIxMAX
 
__PRI64_PREFIX
 "x"

	)

162 
	#PRIXMAX
 
__PRI64_PREFIX
 "X"

	)

166 
	#PRIdPTR
 
__PRIPTR_PREFIX
 "d"

	)

167 
	#PRIiPTR
 
__PRIPTR_PREFIX
 "i"

	)

168 
	#PRIoPTR
 
__PRIPTR_PREFIX
 "o"

	)

169 
	#PRIuPTR
 
__PRIPTR_PREFIX
 "u"

	)

170 
	#PRIxPTR
 
__PRIPTR_PREFIX
 "x"

	)

171 
	#PRIXPTR
 
__PRIPTR_PREFIX
 "X"

	)

177 
	#SCNd8
 "hhd"

	)

178 
	#SCNd16
 "hd"

	)

179 
	#SCNd32
 "d"

	)

180 
	#SCNd64
 
__PRI64_PREFIX
 "d"

	)

182 
	#SCNdLEAST8
 "hhd"

	)

183 
	#SCNdLEAST16
 "hd"

	)

184 
	#SCNdLEAST32
 "d"

	)

185 
	#SCNdLEAST64
 
__PRI64_PREFIX
 "d"

	)

187 
	#SCNdFAST8
 "hhd"

	)

188 
	#SCNdFAST16
 
__PRIPTR_PREFIX
 "d"

	)

189 
	#SCNdFAST32
 
__PRIPTR_PREFIX
 "d"

	)

190 
	#SCNdFAST64
 
__PRI64_PREFIX
 "d"

	)

193 
	#SCNi8
 "hhi"

	)

194 
	#SCNi16
 "hi"

	)

195 
	#SCNi32
 "i"

	)

196 
	#SCNi64
 
__PRI64_PREFIX
 "i"

	)

198 
	#SCNiLEAST8
 "hhi"

	)

199 
	#SCNiLEAST16
 "hi"

	)

200 
	#SCNiLEAST32
 "i"

	)

201 
	#SCNiLEAST64
 
__PRI64_PREFIX
 "i"

	)

203 
	#SCNiFAST8
 "hhi"

	)

204 
	#SCNiFAST16
 
__PRIPTR_PREFIX
 "i"

	)

205 
	#SCNiFAST32
 
__PRIPTR_PREFIX
 "i"

	)

206 
	#SCNiFAST64
 
__PRI64_PREFIX
 "i"

	)

209 
	#SCNu8
 "hhu"

	)

210 
	#SCNu16
 "hu"

	)

211 
	#SCNu32
 "u"

	)

212 
	#SCNu64
 
__PRI64_PREFIX
 "u"

	)

214 
	#SCNuLEAST8
 "hhu"

	)

215 
	#SCNuLEAST16
 "hu"

	)

216 
	#SCNuLEAST32
 "u"

	)

217 
	#SCNuLEAST64
 
__PRI64_PREFIX
 "u"

	)

219 
	#SCNuFAST8
 "hhu"

	)

220 
	#SCNuFAST16
 
__PRIPTR_PREFIX
 "u"

	)

221 
	#SCNuFAST32
 
__PRIPTR_PREFIX
 "u"

	)

222 
	#SCNuFAST64
 
__PRI64_PREFIX
 "u"

	)

225 
	#SCNo8
 "hho"

	)

226 
	#SCNo16
 "ho"

	)

227 
	#SCNo32
 "o"

	)

228 
	#SCNo64
 
__PRI64_PREFIX
 "o"

	)

230 
	#SCNoLEAST8
 "hho"

	)

231 
	#SCNoLEAST16
 "ho"

	)

232 
	#SCNoLEAST32
 "o"

	)

233 
	#SCNoLEAST64
 
__PRI64_PREFIX
 "o"

	)

235 
	#SCNoFAST8
 "hho"

	)

236 
	#SCNoFAST16
 
__PRIPTR_PREFIX
 "o"

	)

237 
	#SCNoFAST32
 
__PRIPTR_PREFIX
 "o"

	)

238 
	#SCNoFAST64
 
__PRI64_PREFIX
 "o"

	)

241 
	#SCNx8
 "hhx"

	)

242 
	#SCNx16
 "hx"

	)

243 
	#SCNx32
 "x"

	)

244 
	#SCNx64
 
__PRI64_PREFIX
 "x"

	)

246 
	#SCNxLEAST8
 "hhx"

	)

247 
	#SCNxLEAST16
 "hx"

	)

248 
	#SCNxLEAST32
 "x"

	)

249 
	#SCNxLEAST64
 
__PRI64_PREFIX
 "x"

	)

251 
	#SCNxFAST8
 "hhx"

	)

252 
	#SCNxFAST16
 
__PRIPTR_PREFIX
 "x"

	)

253 
	#SCNxFAST32
 
__PRIPTR_PREFIX
 "x"

	)

254 
	#SCNxFAST64
 
__PRI64_PREFIX
 "x"

	)

258 
	#SCNdMAX
 
__PRI64_PREFIX
 "d"

	)

259 
	#SCNiMAX
 
__PRI64_PREFIX
 "i"

	)

260 
	#SCNoMAX
 
__PRI64_PREFIX
 "o"

	)

261 
	#SCNuMAX
 
__PRI64_PREFIX
 "u"

	)

262 
	#SCNxMAX
 
__PRI64_PREFIX
 "x"

	)

265 
	#SCNdPTR
 
__PRIPTR_PREFIX
 "d"

	)

266 
	#SCNiPTR
 
__PRIPTR_PREFIX
 "i"

	)

267 
	#SCNoPTR
 
__PRIPTR_PREFIX
 "o"

	)

268 
	#SCNuPTR
 
__PRIPTR_PREFIX
 "u"

	)

269 
	#SCNxPTR
 
__PRIPTR_PREFIX
 "x"

	)

274 
	g__BEGIN_DECLS


276 #i‡
__WORDSIZE
 == 64

281 
	mquŸ
;

282 
	mªm
;

283 } 
	timaxdiv_t
;

290 
	mquŸ
;

291 
	mªm
;

292 } 
	timaxdiv_t
;

298 
ötmax_t
 
	$imaxabs
 (
ötmax_t
 
__n
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

301 
imaxdiv_t
 
	$imaxdiv
 (
ötmax_t
 
__numî
, i¡max_à
__díom
)

302 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

305 
ötmax_t
 
	$°πoimax
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

306 **
__ª°ri˘
 
__íd±r
, 
__ba£
Ë
__THROW
;

309 
uötmax_t
 
	$°πoumax
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

310 ** 
__ª°ri˘
 
__íd±r
, 
__ba£
Ë
__THROW
;

313 
ötmax_t
 
	$wc°oimax
 (
__c⁄°
 
__gwch¨_t
 *
__ª°ri˘
 
__≈å
,

314 
__gwch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

315 
__THROW
;

318 
uötmax_t
 
	$wc°oumax
 (
__c⁄°
 
__gwch¨_t
 *
__ª°ri˘
 
__≈å
,

319 
__gwch¨_t
 ** 
__ª°ri˘
 
__íd±r
, 
__ba£
)

320 
__THROW
;

322 #ifde‡
__USE_EXTERN_INLINES


324 #i‡
__WORDSIZE
 == 64

326 
	$__°πﬁ_öã∫Æ
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

327 **
__ª°ri˘
 
__íd±r
,

328 
__ba£
, 
__group
)

329 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

331 
__exã∫_ölöe
 
ötmax_t


332 
	`__NTH
 (
	$°πoimax
 (
__c⁄°
 *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

333 
ba£
))

335  
	`__°πﬁ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

336 
	}
}

338 
	$__°πoul_öã∫Æ
 (
__c⁄°
 *

339 
__ª°ri˘
 
__≈å
,

340 ** 
__ª°ri˘
 
__íd±r
,

341 
__ba£
, 
__group
)

342 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

344 
__exã∫_ölöe
 
uötmax_t


345 
	`__NTH
 (
	$°πoumax
 (
__c⁄°
 *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

346 
ba£
))

348  
	`__°πoul_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

349 
	}
}

351 
	$__wc°ﬁ_öã∫Æ
 (
__c⁄°
 
__gwch¨_t
 * 
__ª°ri˘
 
__≈å
,

352 
__gwch¨_t
 **
__ª°ri˘
 
__íd±r
,

353 
__ba£
, 
__group
)

354 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

356 
__exã∫_ölöe
 
ötmax_t


357 
	`__NTH
 (
	$wc°oimax
 (
__c⁄°
 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

358 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

360  
	`__wc°ﬁ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

361 
	}
}

363 
	$__wc°oul_öã∫Æ
 (
__c⁄°
 
__gwch¨_t
 *

364 
__ª°ri˘
 
__≈å
,

365 
__gwch¨_t
 **

366 
__ª°ri˘
 
__íd±r
,

367 
__ba£
, 
__group
)

368 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

370 
__exã∫_ölöe
 
uötmax_t


371 
	`__NTH
 (
	$wc°oumax
 (
__c⁄°
 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

372 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

374  
	`__wc°oul_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

375 
	}
}

379 
__exãnsi⁄__


380 
	$__°πﬁl_öã∫Æ
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

381 **
__ª°ri˘
 
__íd±r
,

382 
__ba£
, 
__group
)

383 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

385 
__exã∫_ölöe
 
ötmax_t


386 
	`__NTH
 (
	$°πoimax
 (
__c⁄°
 *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

387 
ba£
))

389  
	`__°πﬁl_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

390 
	}
}

392 
__exãnsi⁄__


393 
	$__°πouŒ_öã∫Æ
 (
__c⁄°
 *

394 
__ª°ri˘
 
__≈å
,

396 
__ª°ri˘
 
__íd±r
,

397 
__ba£
,

398 
__group
)

399 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

401 
__exã∫_ölöe
 
uötmax_t


402 
	`__NTH
 (
	$°πoumax
 (
__c⁄°
 *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

403 
ba£
))

405  
	`__°πouŒ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

406 
	}
}

408 
__exãnsi⁄__


409 
	$__wc°ﬁl_öã∫Æ
 (
__c⁄°
 
__gwch¨_t
 *

410 
__ª°ri˘
 
__≈å
,

411 
__gwch¨_t
 **
__ª°ri˘
 
__íd±r
,

412 
__ba£
, 
__group
)

413 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

415 
__exã∫_ölöe
 
ötmax_t


416 
	`__NTH
 (
	$wc°oimax
 (
__c⁄°
 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

417 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

419  
	`__wc°ﬁl_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

420 
	}
}

423 
__exãnsi⁄__


424 
	$__wc°ouŒ_öã∫Æ
 (
__c⁄°
 
__gwch¨_t
 *

425 
__ª°ri˘
 
__≈å
,

426 
__gwch¨_t
 **

427 
__ª°ri˘
 
__íd±r
,

428 
__ba£
,

429 
__group
)

430 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

432 
__exã∫_ölöe
 
uötmax_t


433 
	`__NTH
 (
	$wc°oumax
 (
__c⁄°
 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

434 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

436  
	`__wc°ouŒ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

437 
	}
}

442 
	g__END_DECLS


	@/usr/include/libintl.h

21 #i‚de‡
_LIBINTL_H


22 
	#_LIBINTL_H
 1

	)

24 
	~<„©uªs.h
>

28 
	#__USE_GNU_GETTEXT
 1

	)

32 
	#__GNU_GETTEXT_SUPPORTED_REVISION
(
maj‹
) \

33 ((
maj‹
Ë=0 ? 1 : -1)

	)

35 
__BEGIN_DECLS


40 *
	$gëãxt
 (
__c⁄°
 *
__msgid
)

41 
__THROW
 
	`__©åibuã_f‹m©_¨g__
 (1);

45 *
	$dgëãxt
 (
__c⁄°
 *
__domaö«me
, __c⁄° *
__msgid
)

46 
__THROW
 
	`__©åibuã_f‹m©_¨g__
 (2);

47 *
	$__dgëãxt
 (
__c⁄°
 *
__domaö«me
, __c⁄° *
__msgid
)

48 
__THROW
 
	`__©åibuã_f‹m©_¨g__
 (2);

52 *
	$dcgëãxt
 (
__c⁄°
 *
__domaö«me
,

53 
__c⁄°
 *
__msgid
, 
__ˇãg‹y
)

54 
__THROW
 
	`__©åibuã_f‹m©_¨g__
 (2);

55 *
	$__dcgëãxt
 (
__c⁄°
 *
__domaö«me
,

56 
__c⁄°
 *
__msgid
, 
__ˇãg‹y
)

57 
__THROW
 
	`__©åibuã_f‹m©_¨g__
 (2);

62 *
	$ngëãxt
 (
__c⁄°
 *
__msgid1
, __c⁄° *
__msgid2
,

63 
__n
)

64 
__THROW
 
	$__©åibuã_f‹m©_¨g__
 (1Ë
	`__©åibuã_f‹m©_¨g__
 (2);

68 *
	$dngëãxt
 (
__c⁄°
 *
__domaö«me
, __c⁄° *
__msgid1
,

69 
__c⁄°
 *
__msgid2
, 
__n
)

70 
__THROW
 
	$__©åibuã_f‹m©_¨g__
 (2Ë
	`__©åibuã_f‹m©_¨g__
 (3);

74 *
	$d˙gëãxt
 (
__c⁄°
 *
__domaö«me
, __c⁄° *
__msgid1
,

75 
__c⁄°
 *
__msgid2
, 
__n
,

76 
__ˇãg‹y
)

77 
__THROW
 
	$__©åibuã_f‹m©_¨g__
 (2Ë
	`__©åibuã_f‹m©_¨g__
 (3);

83 *
	$ãxtdomaö
 (
__c⁄°
 *
__domaö«me
Ë
__THROW
;

87 *
	$bödãxtdomaö
 (
__c⁄°
 *
__domaö«me
,

88 
__c⁄°
 *
__dú«me
Ë
__THROW
;

92 *
	$böd_ãxtdomaö_code£t
 (
__c⁄°
 *
__domaö«me
,

93 
__c⁄°
 *
__code£t
Ë
__THROW
;

97 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__˝lu•lus


100 
	#__√ed_NULL


	)

101 
	~<°ddef.h
>

104 
	~<loˇÀ.h
>

110 
	#gëãxt
(
msgid
Ë
	`dgëãxt
 (
NULL
, msgid)

	)

112 
	#dgëãxt
(
domaö«me
, 
msgid
) \

113 
	`dcgëãxt
 (
domaö«me
, 
msgid
, 
LC_MESSAGES
)

	)

115 
	#ngëãxt
(
msgid1
, 
msgid2
, 
n
Ë
	`dngëãxt
 (
NULL
, msgid1, msgid2,Ç)

	)

117 
	#dngëãxt
(
domaö«me
, 
msgid1
, 
msgid2
, 
n
) \

118 
	`d˙gëãxt
 (
domaö«me
, 
msgid1
, 
msgid2
, 
n
, 
LC_MESSAGES
)

	)

122 
__END_DECLS


	@/usr/include/limits.h

24 #i‚de‡
_LIBC_LIMITS_H_


25 
	#_LIBC_LIMITS_H_
 1

	)

27 
	~<„©uªs.h
>

33 
	#MB_LEN_MAX
 16

	)

38 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2

43 #i‚de‡
_LIMITS_H


44 
	#_LIMITS_H
 1

	)

46 
	~<bôs/w‹dsize.h
>

55 
	#CHAR_BIT
 8

	)

58 
	#SCHAR_MIN
 (-128)

	)

59 
	#SCHAR_MAX
 127

	)

62 
	#UCHAR_MAX
 255

	)

65 #ifde‡
__CHAR_UNSIGNED__


66 
	#CHAR_MIN
 0

	)

67 
	#CHAR_MAX
 
UCHAR_MAX


	)

69 
	#CHAR_MIN
 
SCHAR_MIN


	)

70 
	#CHAR_MAX
 
SCHAR_MAX


	)

74 
	#SHRT_MIN
 (-32768)

	)

75 
	#SHRT_MAX
 32767

	)

78 
	#USHRT_MAX
 65535

	)

81 
	#INT_MIN
 (-
INT_MAX
 - 1)

	)

82 
	#INT_MAX
 2147483647

	)

85 
	#UINT_MAX
 4294967295U

	)

88 #i‡
__WORDSIZE
 == 64

89 
	#LONG_MAX
 9223372036854775807L

	)

91 
	#LONG_MAX
 2147483647L

	)

93 
	#LONG_MIN
 (-
LONG_MAX
 - 1L)

	)

96 #i‡
__WORDSIZE
 == 64

97 
	#ULONG_MAX
 18446744073709551615UL

	)

99 
	#ULONG_MAX
 4294967295UL

	)

102 #ifde‡
__USE_ISOC99


105 
	#LLONG_MAX
 9223372036854775807LL

	)

106 
	#LLONG_MIN
 (-
LLONG_MAX
 - 1LL)

	)

109 
	#ULLONG_MAX
 18446744073709551615ULL

	)

123 #i‡
deföed
 
__GNUC__
 && !deföed 
_GCC_LIMITS_H_


125 #ö˛ude_√xà<
limôs
.
h
>

131 #i‡
deföed
 
__USE_ISOC99
 && deföed 
__GNUC__


132 #i‚de‡
LLONG_MIN


133 
	#LLONG_MIN
 (-
LLONG_MAX
-1)

	)

135 #i‚de‡
LLONG_MAX


136 
	#LLONG_MAX
 
__LONG_LONG_MAX__


	)

138 #i‚de‡
ULLONG_MAX


139 
	#ULLONG_MAX
 (
LLONG_MAX
 * 2ULL + 1)

	)

143 #ifdef 
__USE_POSIX


145 
	~<bôs/posix1_lim.h
>

148 #ifdef 
__USE_POSIX2


149 
	~<bôs/posix2_lim.h
>

152 #ifdef 
__USE_XOPEN


153 
	~<bôs/x›í_lim.h
>

	@/usr/include/link.h

21 #i‚def 
_LINK_H


22 
	#_LINK_H
 1

	)

24 
	~<„©uªs.h
>

25 
	~<ñf.h
>

26 
	~<dlf˙.h
>

27 
	~<sys/ty≥s.h
>

31 
	#ElfW
(
ty≥
Ë
	`_ElfW
 (
Elf
, 
__ELF_NATIVE_CLASS
,Åy≥)

	)

32 
	#_ElfW
(
e
,
w
,
t
Ë
	`_ElfW_1
 (e, w, 
_
##t)

	)

33 
	#_ElfW_1
(
e
,
w
,
t
Ëe##w##
	)
t

35 
	~<bôs/ñf˛ass.h
>

36 
	~<bôs/lök.h
>

43 
	sr_debug


45 
	mr_vîsi⁄
;

47 
lök_m≠
 *
	mr_m≠
;

54 
ElfW
(
Addr
Ë
	mr_brk
;

59 
	mRT_CONSISTENT
,

60 
	mRT_ADD
,

61 
	mRT_DELETE


62 } 
	mr_°©e
;

64 
ElfW
(
Addr
Ë
	mr_ldba£
;

68 
r_debug
 
_r_debug
;

77 
	$ElfW
(
Dyn
Ë
_DYNAMIC
[];

85 
	slök_m≠


90 
	`ElfW
(
Addr
Ë
l_addr
;

91 *
l_«me
;

92 
	`ElfW
(
Dyn
Ë*
l_ld
;

93 
lök_m≠
 *
l_√xt
, *
l_¥ev
;

96 #ifde‡
__USE_GNU


99 
	#LAV_CURRENT
 1

	)

104 
LA_ACT_CONSISTENT
,

105 
LA_ACT_ADD
,

106 
LA_ACT_DELETE


112 
LA_SER_ORIG
 = 0x01,

113 
LA_SER_LIBPATH
 = 0x02,

114 
LA_SER_RUNPATH
 = 0x04,

115 
LA_SER_CONFIG
 = 0x08,

116 
LA_SER_DEFAULT
 = 0x40,

117 
LA_SER_SECURE
 = 0x80

123 
LA_FLG_BINDTO
 = 0x01,

124 
LA_FLG_BINDFROM
 = 0x02

130 
LA_SYMB_NOPLTENTER
 = 0x01,

131 
LA_SYMB_NOPLTEXIT
 = 0x02,

132 
LA_SYMB_STRUCTCALL
 = 0x04,

133 
LA_SYMB_DLSYM
 = 0x08,

134 
LA_SYMB_ALTVALUE
 = 0x10

138 
	sdl_phdr_öfo


140 
	`ElfW
(
Addr
Ë
dÕi_addr
;

141 c⁄° *
dÕi_«me
;

142 c⁄° 
	`ElfW
(
Phdr
Ë*
dÕi_phdr
;

143 
	`ElfW
(
HÆf
Ë
dÕi_phnum
;

151 
dÕi_adds
;

153 
dÕi_subs
;

157 
size_t
 
dÕi_és_modid
;

162 *
dÕi_és_d©a
;

165 
__BEGIN_DECLS


167 
	`dl_ôî©e_phdr
 ((*
__ˇŒback
Ë(
dl_phdr_öfo
 *,

168 
size_t
, *),

169 *
__d©a
);

175 
	`œ_vîsi⁄
 (
__vîsi⁄
);

176 
	`œ_a˘ivôy
 (
uöçå_t
 *
__cookõ
, 
__Êag
);

177 *
	`œ_obj£¨ch
 (c⁄° *
__«me
, 
uöçå_t
 *
__cookõ
,

178 
__Êag
);

179 
	`œ_obj›í
 (
lök_m≠
 *
__m≠
, 
Lmid_t
 
__lmid
,

180 
uöçå_t
 *
__cookõ
);

181 
	`œ_¥eöô
 (
uöçå_t
 *
__cookõ
);

182 
uöçå_t
 
	`œ_symböd32
 (
Elf32_Sym
 *
__sym
, 
__ndx
,

183 
uöçå_t
 *
__ªfcook
, uöçå_à*
__defcook
,

184 *
__Êags
, c⁄° *
__sym«me
);

185 
uöçå_t
 
	`œ_symböd64
 (
Elf64_Sym
 *
__sym
, 
__ndx
,

186 
uöçå_t
 *
__ªfcook
, uöçå_à*
__defcook
,

187 *
__Êags
, c⁄° *
__sym«me
);

188 
	`œ_obj˛o£
 (
uöçå_t
 *
__cookõ
);

190 
__END_DECLS


	@/usr/include/linux/filter.h

5 #i‚de‡
__LINUX_FILTER_H__


6 
	#__LINUX_FILTER_H__


	)

9 
	~<löux/ty≥s.h
>

15 
	#BPF_MAJOR_VERSION
 1

	)

16 
	#BPF_MINOR_VERSION
 1

	)

23 
	ssock_fûãr
 {

24 
__u16
 
	mcode
;

25 
__u8
 
	mjt
;

26 
__u8
 
	mjf
;

27 
__u32
 
	mk
;

30 
	ssock_Ârog
 {

31 
	mÀn
;

32 
sock_fûãr
 *
	mfûãr
;

39 
	#BPF_CLASS
(
code
Ë((codeË& 0x07)

	)

40 
	#BPF_LD
 0x00

	)

41 
	#BPF_LDX
 0x01

	)

42 
	#BPF_ST
 0x02

	)

43 
	#BPF_STX
 0x03

	)

44 
	#BPF_ALU
 0x04

	)

45 
	#BPF_JMP
 0x05

	)

46 
	#BPF_RET
 0x06

	)

47 
	#BPF_MISC
 0x07

	)

50 
	#BPF_SIZE
(
code
Ë((codeË& 0x18)

	)

51 
	#BPF_W
 0x00

	)

52 
	#BPF_H
 0x08

	)

53 
	#BPF_B
 0x10

	)

54 
	#BPF_MODE
(
code
Ë((codeË& 0xe0)

	)

55 
	#BPF_IMM
 0x00

	)

56 
	#BPF_ABS
 0x20

	)

57 
	#BPF_IND
 0x40

	)

58 
	#BPF_MEM
 0x60

	)

59 
	#BPF_LEN
 0x80

	)

60 
	#BPF_MSH
 0xa0

	)

63 
	#BPF_OP
(
code
Ë((codeË& 0xf0)

	)

64 
	#BPF_ADD
 0x00

	)

65 
	#BPF_SUB
 0x10

	)

66 
	#BPF_MUL
 0x20

	)

67 
	#BPF_DIV
 0x30

	)

68 
	#BPF_OR
 0x40

	)

69 
	#BPF_AND
 0x50

	)

70 
	#BPF_LSH
 0x60

	)

71 
	#BPF_RSH
 0x70

	)

72 
	#BPF_NEG
 0x80

	)

73 
	#BPF_JA
 0x00

	)

74 
	#BPF_JEQ
 0x10

	)

75 
	#BPF_JGT
 0x20

	)

76 
	#BPF_JGE
 0x30

	)

77 
	#BPF_JSET
 0x40

	)

78 
	#BPF_SRC
(
code
Ë((codeË& 0x08)

	)

79 
	#BPF_K
 0x00

	)

80 
	#BPF_X
 0x08

	)

83 
	#BPF_RVAL
(
code
Ë((codeË& 0x18)

	)

84 
	#BPF_A
 0x10

	)

87 
	#BPF_MISCOP
(
code
Ë((codeË& 0xf8)

	)

88 
	#BPF_TAX
 0x00

	)

89 
	#BPF_TXA
 0x80

	)

91 #i‚de‡
BPF_MAXINSNS


92 
	#BPF_MAXINSNS
 4096

	)

98 #i‚de‡
BPF_STMT


99 
	#BPF_STMT
(
code
, 
k
Ë{ ()(code), 0, 0, k }

	)

101 #i‚de‡
BPF_JUMP


102 
	#BPF_JUMP
(
code
, 
k
, 
jt
, 
jf
Ë{ ()(code), jt, jf, k }

	)

108 
	#BPF_MEMWORDS
 16

	)

115 
	#SKF_AD_OFF
 (-0x1000)

	)

116 
	#SKF_AD_PROTOCOL
 0

	)

117 
	#SKF_AD_PKTTYPE
 4

	)

118 
	#SKF_AD_IFINDEX
 8

	)

119 
	#SKF_AD_NLATTR
 12

	)

120 
	#SKF_AD_NLATTR_NEST
 16

	)

121 
	#SKF_AD_MARK
 20

	)

122 
	#SKF_AD_QUEUE
 24

	)

123 
	#SKF_AD_HATYPE
 28

	)

124 
	#SKF_AD_RXHASH
 32

	)

125 
	#SKF_AD_CPU
 36

	)

126 
	#SKF_AD_MAX
 40

	)

127 
	#SKF_NET_OFF
 (-0x100000)

	)

128 
	#SKF_LL_OFF
 (-0x200000)

	)

	@/usr/include/linux/icmp.h

17 #i‚de‡
_LINUX_ICMP_H


18 
	#_LINUX_ICMP_H


	)

20 
	~<löux/ty≥s.h
>

22 
	#ICMP_ECHOREPLY
 0

	)

23 
	#ICMP_DEST_UNREACH
 3

	)

24 
	#ICMP_SOURCE_QUENCH
 4

	)

25 
	#ICMP_REDIRECT
 5

	)

26 
	#ICMP_ECHO
 8

	)

27 
	#ICMP_TIME_EXCEEDED
 11

	)

28 
	#ICMP_PARAMETERPROB
 12

	)

29 
	#ICMP_TIMESTAMP
 13

	)

30 
	#ICMP_TIMESTAMPREPLY
 14

	)

31 
	#ICMP_INFO_REQUEST
 15

	)

32 
	#ICMP_INFO_REPLY
 16

	)

33 
	#ICMP_ADDRESS
 17

	)

34 
	#ICMP_ADDRESSREPLY
 18

	)

35 
	#NR_ICMP_TYPES
 18

	)

39 
	#ICMP_NET_UNREACH
 0

	)

40 
	#ICMP_HOST_UNREACH
 1

	)

41 
	#ICMP_PROT_UNREACH
 2

	)

42 
	#ICMP_PORT_UNREACH
 3

	)

43 
	#ICMP_FRAG_NEEDED
 4

	)

44 
	#ICMP_SR_FAILED
 5

	)

45 
	#ICMP_NET_UNKNOWN
 6

	)

46 
	#ICMP_HOST_UNKNOWN
 7

	)

47 
	#ICMP_HOST_ISOLATED
 8

	)

48 
	#ICMP_NET_ANO
 9

	)

49 
	#ICMP_HOST_ANO
 10

	)

50 
	#ICMP_NET_UNR_TOS
 11

	)

51 
	#ICMP_HOST_UNR_TOS
 12

	)

52 
	#ICMP_PKT_FILTERED
 13

	)

53 
	#ICMP_PREC_VIOLATION
 14

	)

54 
	#ICMP_PREC_CUTOFF
 15

	)

55 
	#NR_ICMP_UNREACH
 15

	)

58 
	#ICMP_REDIR_NET
 0

	)

59 
	#ICMP_REDIR_HOST
 1

	)

60 
	#ICMP_REDIR_NETTOS
 2

	)

61 
	#ICMP_REDIR_HOSTTOS
 3

	)

64 
	#ICMP_EXC_TTL
 0

	)

65 
	#ICMP_EXC_FRAGTIME
 1

	)

68 
	sicmphdr
 {

69 
__u8
 
	mty≥
;

70 
__u8
 
	mcode
;

71 
__sum16
 
	mchecksum
;

74 
__be16
 
	mid
;

75 
__be16
 
	m£quí˚
;

76 } 
	mecho
;

77 
__be32
 
	mg©eway
;

79 
__be16
 
	m__unu£d
;

80 
__be16
 
	mmtu
;

81 } 
	m‰ag
;

82 } 
	mun
;

90 
	#ICMP_FILTER
 1

	)

92 
	sicmp_fûãr
 {

93 
__u32
 
	md©a
;

	@/usr/include/linux/if_ether.h

21 #i‚de‡
_LINUX_IF_ETHER_H


22 
	#_LINUX_IF_ETHER_H


	)

24 
	~<löux/ty≥s.h
>

31 
	#ETH_ALEN
 6

	)

32 
	#ETH_HLEN
 14

	)

33 
	#ETH_ZLEN
 60

	)

34 
	#ETH_DATA_LEN
 1500

	)

35 
	#ETH_FRAME_LEN
 1514

	)

36 
	#ETH_FCS_LEN
 4

	)

42 
	#ETH_P_LOOP
 0x0060

	)

43 
	#ETH_P_PUP
 0x0200

	)

44 
	#ETH_P_PUPAT
 0x0201

	)

45 
	#ETH_P_IP
 0x0800

	)

46 
	#ETH_P_X25
 0x0805

	)

47 
	#ETH_P_ARP
 0x0806

	)

48 
	#ETH_P_BPQ
 0x08FF

	)

49 
	#ETH_P_IEEEPUP
 0x0a00

	)

50 
	#ETH_P_IEEEPUPAT
 0x0a01

	)

51 
	#ETH_P_DEC
 0x6000

	)

52 
	#ETH_P_DNA_DL
 0x6001

	)

53 
	#ETH_P_DNA_RC
 0x6002

	)

54 
	#ETH_P_DNA_RT
 0x6003

	)

55 
	#ETH_P_LAT
 0x6004

	)

56 
	#ETH_P_DIAG
 0x6005

	)

57 
	#ETH_P_CUST
 0x6006

	)

58 
	#ETH_P_SCA
 0x6007

	)

59 
	#ETH_P_TEB
 0x6558

	)

60 
	#ETH_P_RARP
 0x8035

	)

61 
	#ETH_P_ATALK
 0x809B

	)

62 
	#ETH_P_AARP
 0x80F3

	)

63 
	#ETH_P_8021Q
 0x8100

	)

64 
	#ETH_P_IPX
 0x8137

	)

65 
	#ETH_P_IPV6
 0x86DD

	)

66 
	#ETH_P_PAUSE
 0x8808

	)

67 
	#ETH_P_SLOW
 0x8809

	)

68 
	#ETH_P_WCCP
 0x883E

	)

70 
	#ETH_P_PPP_DISC
 0x8863

	)

71 
	#ETH_P_PPP_SES
 0x8864

	)

72 
	#ETH_P_MPLS_UC
 0x8847

	)

73 
	#ETH_P_MPLS_MC
 0x8848

	)

74 
	#ETH_P_ATMMPOA
 0x884¯

	)

75 
	#ETH_P_LINK_CTL
 0x886¯

	)

76 
	#ETH_P_ATMFATE
 0x8884

	)

79 
	#ETH_P_PAE
 0x888E

	)

80 
	#ETH_P_AOE
 0x88A2

	)

81 
	#ETH_P_8021AD
 0x88A8

	)

82 
	#ETH_P_TIPC
 0x88CA

	)

83 
	#ETH_P_8021AH
 0x88E7

	)

84 
	#ETH_P_1588
 0x88F7

	)

85 
	#ETH_P_FCOE
 0x8906

	)

86 
	#ETH_P_TDLS
 0x890D

	)

87 
	#ETH_P_FIP
 0x8914

	)

88 
	#ETH_P_QINQ1
 0x9100

	)

89 
	#ETH_P_QINQ2
 0x9200

	)

90 
	#ETH_P_QINQ3
 0x9300

	)

91 
	#ETH_P_EDSA
 0xDADA

	)

92 
	#ETH_P_AF_IUCV
 0xFBFB

	)

98 
	#ETH_P_802_3
 0x0001

	)

99 
	#ETH_P_AX25
 0x0002

	)

100 
	#ETH_P_ALL
 0x0003

	)

101 
	#ETH_P_802_2
 0x0004

	)

102 
	#ETH_P_SNAP
 0x0005

	)

103 
	#ETH_P_DDCMP
 0x0006

	)

104 
	#ETH_P_WAN_PPP
 0x0007

	)

105 
	#ETH_P_PPP_MP
 0x0008

	)

106 
	#ETH_P_LOCALTALK
 0x0009

	)

107 
	#ETH_P_CAN
 0x000C

	)

108 
	#ETH_P_PPPTALK
 0x0010

	)

109 
	#ETH_P_TR_802_2
 0x0011

	)

110 
	#ETH_P_MOBITEX
 0x0015

	)

111 
	#ETH_P_CONTROL
 0x0016

	)

112 
	#ETH_P_IRDA
 0x0017

	)

113 
	#ETH_P_ECONET
 0x0018

	)

114 
	#ETH_P_HDLC
 0x0019

	)

115 
	#ETH_P_ARCNET
 0x001A

	)

116 
	#ETH_P_DSA
 0x001B

	)

117 
	#ETH_P_TRAILER
 0x001C

	)

118 
	#ETH_P_PHONET
 0x00F5

	)

119 
	#ETH_P_IEEE802154
 0x00F6

	)

120 
	#ETH_P_CAIF
 0x00F7

	)

126 
	sëhhdr
 {

127 
	mh_de°
[
ETH_ALEN
];

128 
	mh_sour˚
[
ETH_ALEN
];

129 
__be16
 
	mh_¥Ÿo
;

130 } 
__©åibuã__
((
∑cked
));

	@/usr/include/linux/if_packet.h

1 #i‚de‡
__LINUX_IF_PACKET_H


2 
	#__LINUX_IF_PACKET_H


	)

4 
	~<löux/ty≥s.h
>

6 
	ssockaddr_pkt
 {

7 
	m•kt_Ámûy
;

8 
	m•kt_devi˚
[14];

9 
__be16
 
	m•kt_¥Ÿocﬁ
;

12 
	ssockaddr_Œ
 {

13 
	m¶l_Ámûy
;

14 
__be16
 
	m¶l_¥Ÿocﬁ
;

15 
	m¶l_ifödex
;

16 
	m¶l_h©y≥
;

17 
	m¶l_pkây≥
;

18 
	m¶l_hÆí
;

19 
	m¶l_addr
[8];

24 
	#PACKET_HOST
 0

	)

25 
	#PACKET_BROADCAST
 1

	)

26 
	#PACKET_MULTICAST
 2

	)

27 
	#PACKET_OTHERHOST
 3

	)

28 
	#PACKET_OUTGOING
 4

	)

30 
	#PACKET_LOOPBACK
 5

	)

31 
	#PACKET_FASTROUTE
 6

	)

35 
	#PACKET_ADD_MEMBERSHIP
 1

	)

36 
	#PACKET_DROP_MEMBERSHIP
 2

	)

37 
	#PACKET_RECV_OUTPUT
 3

	)

39 
	#PACKET_RX_RING
 5

	)

40 
	#PACKET_STATISTICS
 6

	)

41 
	#PACKET_COPY_THRESH
 7

	)

42 
	#PACKET_AUXDATA
 8

	)

43 
	#PACKET_ORIGDEV
 9

	)

44 
	#PACKET_VERSION
 10

	)

45 
	#PACKET_HDRLEN
 11

	)

46 
	#PACKET_RESERVE
 12

	)

47 
	#PACKET_TX_RING
 13

	)

48 
	#PACKET_LOSS
 14

	)

49 
	#PACKET_VNET_HDR
 15

	)

50 
	#PACKET_TX_TIMESTAMP
 16

	)

51 
	#PACKET_TIMESTAMP
 17

	)

52 
	#PACKET_FANOUT
 18

	)

54 
	#PACKET_FANOUT_HASH
 0

	)

55 
	#PACKET_FANOUT_LB
 1

	)

56 
	#PACKET_FANOUT_CPU
 2

	)

57 
	#PACKET_FANOUT_FLAG_DEFRAG
 0x8000

	)

59 
	sçackë_°©s
 {

60 
	mç_∑ckës
;

61 
	mç_dr›s
;

64 
	sçackë_°©s_v3
 {

65 
	mç_∑ckës
;

66 
	mç_dr›s
;

67 
	mç_‰ìze_q_˙t
;

70 
	uçackë_°©s_u
 {

71 
çackë_°©s
 
	m°©s1
;

72 
çackë_°©s_v3
 
	m°©s3
;

75 
	sçackë_auxd©a
 {

76 
__u32
 
	mç_°©us
;

77 
__u32
 
	mç_Àn
;

78 
__u32
 
	mç_¢≠Àn
;

79 
__u16
 
	mç_mac
;

80 
__u16
 
	mç_√t
;

81 
__u16
 
	mç_vœn_tci
;

82 
__u16
 
	mç_∑ddög
;

86 
	#TP_STATUS_KERNEL
 0x0

	)

87 
	#TP_STATUS_USER
 0x1

	)

88 
	#TP_STATUS_COPY
 0x2

	)

89 
	#TP_STATUS_LOSING
 0x4

	)

90 
	#TP_STATUS_CSUMNOTREADY
 0x8

	)

91 
	#TP_STATUS_VLAN_VALID
 0x10

	)

92 
	#TP_STATUS_BLK_TMO
 0x20

	)

95 
	#TP_STATUS_AVAILABLE
 0x0

	)

96 
	#TP_STATUS_SEND_REQUEST
 0x1

	)

97 
	#TP_STATUS_SENDING
 0x2

	)

98 
	#TP_STATUS_WRONG_FORMAT
 0x4

	)

101 
	#TP_FT_REQ_FILL_RXHASH
 0x1

	)

103 
	sçackë_hdr
 {

104 
	mç_°©us
;

105 
	mç_Àn
;

106 
	mç_¢≠Àn
;

107 
	mç_mac
;

108 
	mç_√t
;

109 
	mç_£c
;

110 
	mç_u£c
;

113 
	#TPACKET_ALIGNMENT
 16

	)

114 
	#TPACKET_ALIGN
(
x
Ë(((x)+
TPACKET_ALIGNMENT
-1)&~(TPACKET_ALIGNMENT-1))

	)

115 
	#TPACKET_HDRLEN
 (
	`TPACKET_ALIGN
((
çackë_hdr
)Ë+ (
sockaddr_Œ
))

	)

117 
	sçackë2_hdr
 {

118 
__u32
 
	mç_°©us
;

119 
__u32
 
	mç_Àn
;

120 
__u32
 
	mç_¢≠Àn
;

121 
__u16
 
	mç_mac
;

122 
__u16
 
	mç_√t
;

123 
__u32
 
	mç_£c
;

124 
__u32
 
	mç_n£c
;

125 
__u16
 
	mç_vœn_tci
;

126 
__u16
 
	mç_∑ddög
;

129 
	sçackë_hdr_v¨ü¡1
 {

130 
__u32
 
	mç_rxhash
;

131 
__u32
 
	mç_vœn_tci
;

134 
	sçackë3_hdr
 {

135 
__u32
 
	mç_√xt_off£t
;

136 
__u32
 
	mç_£c
;

137 
__u32
 
	mç_n£c
;

138 
__u32
 
	mç_¢≠Àn
;

139 
__u32
 
	mç_Àn
;

140 
__u32
 
	mç_°©us
;

141 
__u16
 
	mç_mac
;

142 
__u16
 
	mç_√t
;

145 
çackë_hdr_v¨ü¡1
 
	mhv1
;

149 
	sçackë_bd_ts
 {

150 
	mts_£c
;

152 
	mts_u£c
;

153 
	mts_n£c
;

157 
	sçackë_hdr_v1
 {

158 
__u32
 
	mblock_°©us
;

159 
__u32
 
	mnum_pkts
;

160 
__u32
 
	moff£t_to_fú°_pkt
;

165 
__u32
 
	mblk_Àn
;

176 
__Æig√d_u64
 
	m£q_num
;

203 
çackë_bd_ts
 
	mts_fú°_pkt
, 
	mts_œ°_pkt
;

206 
	uçackë_bd_hódî_u
 {

207 
çackë_hdr_v1
 
	mbh1
;

210 
	sçackë_block_desc
 {

211 
__u32
 
	mvîsi⁄
;

212 
__u32
 
	moff£t_to_¥iv
;

213 
çackë_bd_hódî_u
 
	mhdr
;

216 
	#TPACKET2_HDRLEN
 (
	`TPACKET_ALIGN
((
çackë2_hdr
)Ë+ (
sockaddr_Œ
))

	)

217 
	#TPACKET3_HDRLEN
 (
	`TPACKET_ALIGN
((
çackë3_hdr
)Ë+ (
sockaddr_Œ
))

	)

219 
	eçackë_vîsi⁄s
 {

220 
	mTPACKET_V1
,

221 
	mTPACKET_V2
,

222 
	mTPACKET_V3


238 
	sçackë_ªq
 {

239 
	mç_block_size
;

240 
	mç_block_ƒ
;

241 
	mç_‰ame_size
;

242 
	mç_‰ame_ƒ
;

245 
	sçackë_ªq3
 {

246 
	mç_block_size
;

247 
	mç_block_ƒ
;

248 
	mç_‰ame_size
;

249 
	mç_‰ame_ƒ
;

250 
	mç_ªtúe_blk_tov
;

251 
	mç_sizeof_¥iv
;

252 
	mç_„©uª_ªq_w‹d
;

255 
	uçackë_ªq_u
 {

256 
çackë_ªq
 
	mªq
;

257 
çackë_ªq3
 
	mªq3
;

260 
	s∑ckë_mªq
 {

261 
	mmr_ifödex
;

262 
	mmr_ty≥
;

263 
	mmr_Æí
;

264 
	mmr_addªss
[8];

267 
	#PACKET_MR_MULTICAST
 0

	)

268 
	#PACKET_MR_PROMISC
 1

	)

269 
	#PACKET_MR_ALLMULTI
 2

	)

270 
	#PACKET_MR_UNICAST
 3

	)

	@/usr/include/linux/if_tun.h

16 #i‚de‡
__IF_TUN_H


17 
	#__IF_TUN_H


	)

19 
	~<löux/ty≥s.h
>

20 
	~<löux/if_ëhî.h
>

21 
	~<löux/fûãr.h
>

24 
	#TUN_READQ_SIZE
 500

	)

27 
	#TUN_TUN_DEV
 0x0001

	)

28 
	#TUN_TAP_DEV
 0x0002

	)

29 
	#TUN_TYPE_MASK
 0x000f

	)

31 
	#TUN_FASYNC
 0x0010

	)

32 
	#TUN_NOCHECKSUM
 0x0020

	)

33 
	#TUN_NO_PI
 0x0040

	)

34 
	#TUN_ONE_QUEUE
 0x0080

	)

35 
	#TUN_PERSIST
 0x0100

	)

36 
	#TUN_VNET_HDR
 0x0200

	)

39 
	#TUNSETNOCSUM
 
	`_IOW
('T', 200, )

	)

40 
	#TUNSETDEBUG
 
	`_IOW
('T', 201, )

	)

41 
	#TUNSETIFF
 
	`_IOW
('T', 202, )

	)

42 
	#TUNSETPERSIST
 
	`_IOW
('T', 203, )

	)

43 
	#TUNSETOWNER
 
	`_IOW
('T', 204, )

	)

44 
	#TUNSETLINK
 
	`_IOW
('T', 205, )

	)

45 
	#TUNSETGROUP
 
	`_IOW
('T', 206, )

	)

46 
	#TUNGETFEATURES
 
	`_IOR
('T', 207, )

	)

47 
	#TUNSETOFFLOAD
 
	`_IOW
('T', 208, )

	)

48 
	#TUNSETTXFILTER
 
	`_IOW
('T', 209, )

	)

49 
	#TUNGETIFF
 
	`_IOR
('T', 210, )

	)

50 
	#TUNGETSNDBUF
 
	`_IOR
('T', 211, )

	)

51 
	#TUNSETSNDBUF
 
	`_IOW
('T', 212, )

	)

52 
	#TUNATTACHFILTER
 
	`_IOW
('T', 213, 
sock_Ârog
)

	)

53 
	#TUNDETACHFILTER
 
	`_IOW
('T', 214, 
sock_Ârog
)

	)

54 
	#TUNGETVNETHDRSZ
 
	`_IOR
('T', 215, )

	)

55 
	#TUNSETVNETHDRSZ
 
	`_IOW
('T', 216, )

	)

58 
	#IFF_TUN
 0x0001

	)

59 
	#IFF_TAP
 0x0002

	)

60 
	#IFF_NO_PI
 0x1000

	)

61 
	#IFF_ONE_QUEUE
 0x2000

	)

62 
	#IFF_VNET_HDR
 0x4000

	)

63 
	#IFF_TUN_EXCL
 0x8000

	)

66 
	#TUN_F_CSUM
 0x01

	)

67 
	#TUN_F_TSO4
 0x02

	)

68 
	#TUN_F_TSO6
 0x04

	)

69 
	#TUN_F_TSO_ECN
 0x08

	)

70 
	#TUN_F_UFO
 0x10

	)

73 
	#TUN_PKT_STRIP
 0x0001

	)

74 
	stun_pi
 {

75 
__u16
 
	mÊags
;

76 
__be16
 
	m¥Ÿo
;

87 
	#TUN_FLT_ALLMULTI
 0x0001

	)

88 
	stun_fûãr
 {

89 
__u16
 
	mÊags
;

90 
__u16
 
	mcou¡
;

91 
__u8
 
	maddr
[0][
ETH_ALEN
];

	@/usr/include/linux/if_tunnel.h

1 #i‚de‡
_IF_TUNNEL_H_


2 
	#_IF_TUNNEL_H_


	)

4 
	~<löux/ty≥s.h
>

5 
	~<asm/byã‹dî.h
>

8 
	#SIOCGETTUNNEL
 (
SIOCDEVPRIVATE
 + 0)

	)

9 
	#SIOCADDTUNNEL
 (
SIOCDEVPRIVATE
 + 1)

	)

10 
	#SIOCDELTUNNEL
 (
SIOCDEVPRIVATE
 + 2)

	)

11 
	#SIOCCHGTUNNEL
 (
SIOCDEVPRIVATE
 + 3)

	)

12 
	#SIOCGETPRL
 (
SIOCDEVPRIVATE
 + 4)

	)

13 
	#SIOCADDPRL
 (
SIOCDEVPRIVATE
 + 5)

	)

14 
	#SIOCDELPRL
 (
SIOCDEVPRIVATE
 + 6)

	)

15 
	#SIOCCHGPRL
 (
SIOCDEVPRIVATE
 + 7)

	)

16 
	#SIOCGET6RD
 (
SIOCDEVPRIVATE
 + 8)

	)

17 
	#SIOCADD6RD
 (
SIOCDEVPRIVATE
 + 9)

	)

18 
	#SIOCDEL6RD
 (
SIOCDEVPRIVATE
 + 10)

	)

19 
	#SIOCCHG6RD
 (
SIOCDEVPRIVATE
 + 11)

	)

21 
	#GRE_CSUM
 
	`__˝u_to_be16
(0x8000)

	)

22 
	#GRE_ROUTING
 
	`__˝u_to_be16
(0x4000)

	)

23 
	#GRE_KEY
 
	`__˝u_to_be16
(0x2000)

	)

24 
	#GRE_SEQ
 
	`__˝u_to_be16
(0x1000)

	)

25 
	#GRE_STRICT
 
	`__˝u_to_be16
(0x0800)

	)

26 
	#GRE_REC
 
	`__˝u_to_be16
(0x0700)

	)

27 
	#GRE_FLAGS
 
	`__˝u_to_be16
(0x00F8)

	)

28 
	#GRE_VERSION
 
	`__˝u_to_be16
(0x0007)

	)

30 
	sù_tu¬ñ_∑rm
 {

31 
	m«me
[
IFNAMSIZ
];

32 
	mlök
;

33 
__be16
 
	mi_Êags
;

34 
__be16
 
	mo_Êags
;

35 
__be32
 
	mi_key
;

36 
__be32
 
	mo_key
;

37 
ùhdr
 
	mùh
;

41 
	#SIT_ISATAP
 0x0001

	)

43 
	sù_tu¬ñ_¥l
 {

44 
__be32
 
	maddr
;

45 
__u16
 
	mÊags
;

46 
__u16
 
	m__ª£rved
;

47 
__u32
 
	md©Æí
;

48 
__u32
 
	m__ª£rved2
;

53 
	#PRL_DEFAULT
 0x0001

	)

55 
	sù_tu¬ñ_6rd
 {

56 
ö6_addr
 
	m¥efix
;

57 
__be32
 
	mªœy_¥efix
;

58 
__u16
 
	m¥efixÀn
;

59 
__u16
 
	mªœy_¥efixÀn
;

63 
	mIFLA_GRE_UNSPEC
,

64 
	mIFLA_GRE_LINK
,

65 
	mIFLA_GRE_IFLAGS
,

66 
	mIFLA_GRE_OFLAGS
,

67 
	mIFLA_GRE_IKEY
,

68 
	mIFLA_GRE_OKEY
,

69 
	mIFLA_GRE_LOCAL
,

70 
	mIFLA_GRE_REMOTE
,

71 
	mIFLA_GRE_TTL
,

72 
	mIFLA_GRE_TOS
,

73 
	mIFLA_GRE_PMTUDISC
,

74 
	m__IFLA_GRE_MAX
,

77 
	#IFLA_GRE_MAX
 (
__IFLA_GRE_MAX
 - 1)

	)

	@/usr/include/linux/in6.h

21 #i‚de‡
_LINUX_IN6_H


22 
	#_LINUX_IN6_H


	)

24 
	~<löux/ty≥s.h
>

30 
	sö6_addr
 {

32 
__u8
 
	mu6_addr8
[16];

33 
__be16
 
	mu6_addr16
[8];

34 
__be32
 
	mu6_addr32
[4];

35 } 
	mö6_u
;

36 
	#s6_addr
 
ö6_u
.
u6_addr8


	)

37 
	#s6_addr16
 
ö6_u
.
u6_addr16


	)

38 
	#s6_addr32
 
ö6_u
.
u6_addr32


	)

46 
	ssockaddr_ö6
 {

47 
	msö6_Ámûy
;

48 
__be16
 
	msö6_p‹t
;

49 
__be32
 
	msö6_Êowöfo
;

50 
ö6_addr
 
	msö6_addr
;

51 
__u32
 
	msö6_sc›e_id
;

54 
	sùv6_mªq
 {

56 
ö6_addr
 
	mùv6mr_mu…üddr
;

59 
	mùv6mr_ifödex
;

62 
	#ùv6mr_aˇddr
 
ùv6mr_mu…üddr


	)

64 
	sö6_Êowœbñ_ªq
 {

65 
ö6_addr
 
	mÊr_d°
;

66 
__be32
 
	mÊr_œbñ
;

67 
__u8
 
	mÊr_a˘i⁄
;

68 
__u8
 
	mÊr_sh¨e
;

69 
__u16
 
	mÊr_Êags
;

70 
__u16
 
	mÊr_expúes
;

71 
__u16
 
	mÊr_lögî
;

72 
__u32
 
	m__Êr_∑d
;

76 
	#IPV6_FL_A_GET
 0

	)

77 
	#IPV6_FL_A_PUT
 1

	)

78 
	#IPV6_FL_A_RENEW
 2

	)

80 
	#IPV6_FL_F_CREATE
 1

	)

81 
	#IPV6_FL_F_EXCL
 2

	)

83 
	#IPV6_FL_S_NONE
 0

	)

84 
	#IPV6_FL_S_EXCL
 1

	)

85 
	#IPV6_FL_S_PROCESS
 2

	)

86 
	#IPV6_FL_S_USER
 3

	)

87 
	#IPV6_FL_S_ANY
 255

	)

98 
	#IPV6_FLOWINFO_FLOWLABEL
 0x000fffff

	)

99 
	#IPV6_FLOWINFO_PRIORITY
 0x0ff00000

	)

102 
	#IPV6_PRIORITY_UNCHARACTERIZED
 0x0000

	)

103 
	#IPV6_PRIORITY_FILLER
 0x0100

	)

104 
	#IPV6_PRIORITY_UNATTENDED
 0x0200

	)

105 
	#IPV6_PRIORITY_RESERVED1
 0x0300

	)

106 
	#IPV6_PRIORITY_BULK
 0x0400

	)

107 
	#IPV6_PRIORITY_RESERVED2
 0x0500

	)

108 
	#IPV6_PRIORITY_INTERACTIVE
 0x0600

	)

109 
	#IPV6_PRIORITY_CONTROL
 0x0700

	)

110 
	#IPV6_PRIORITY_8
 0x0800

	)

111 
	#IPV6_PRIORITY_9
 0x0900

	)

112 
	#IPV6_PRIORITY_10
 0x0a00

	)

113 
	#IPV6_PRIORITY_11
 0x0b00

	)

114 
	#IPV6_PRIORITY_12
 0x0c00

	)

115 
	#IPV6_PRIORITY_13
 0x0d00

	)

116 
	#IPV6_PRIORITY_14
 0x0e00

	)

117 
	#IPV6_PRIORITY_15
 0x0f00

	)

122 
	#IPPROTO_HOPOPTS
 0

	)

123 
	#IPPROTO_ROUTING
 43

	)

124 
	#IPPROTO_FRAGMENT
 44

	)

125 
	#IPPROTO_ICMPV6
 58

	)

126 
	#IPPROTO_NONE
 59

	)

127 
	#IPPROTO_DSTOPTS
 60

	)

128 
	#IPPROTO_MH
 135

	)

133 
	#IPV6_TLV_PAD0
 0

	)

134 
	#IPV6_TLV_PADN
 1

	)

135 
	#IPV6_TLV_ROUTERALERT
 5

	)

136 
	#IPV6_TLV_JUMBO
 194

	)

137 
	#IPV6_TLV_HAO
 201

	)

143 
	#IPV6_ADDRFORM
 1

	)

144 
	#IPV6_2292PKTINFO
 2

	)

145 
	#IPV6_2292HOPOPTS
 3

	)

146 
	#IPV6_2292DSTOPTS
 4

	)

147 
	#IPV6_2292RTHDR
 5

	)

148 
	#IPV6_2292PKTOPTIONS
 6

	)

149 
	#IPV6_CHECKSUM
 7

	)

150 
	#IPV6_2292HOPLIMIT
 8

	)

151 
	#IPV6_NEXTHOP
 9

	)

152 
	#IPV6_AUTHHDR
 10

	)

153 
	#IPV6_FLOWINFO
 11

	)

155 
	#IPV6_UNICAST_HOPS
 16

	)

156 
	#IPV6_MULTICAST_IF
 17

	)

157 
	#IPV6_MULTICAST_HOPS
 18

	)

158 
	#IPV6_MULTICAST_LOOP
 19

	)

159 
	#IPV6_ADD_MEMBERSHIP
 20

	)

160 
	#IPV6_DROP_MEMBERSHIP
 21

	)

161 
	#IPV6_ROUTER_ALERT
 22

	)

162 
	#IPV6_MTU_DISCOVER
 23

	)

163 
	#IPV6_MTU
 24

	)

164 
	#IPV6_RECVERR
 25

	)

165 
	#IPV6_V6ONLY
 26

	)

166 
	#IPV6_JOIN_ANYCAST
 27

	)

167 
	#IPV6_LEAVE_ANYCAST
 28

	)

170 
	#IPV6_PMTUDISC_DONT
 0

	)

171 
	#IPV6_PMTUDISC_WANT
 1

	)

172 
	#IPV6_PMTUDISC_DO
 2

	)

173 
	#IPV6_PMTUDISC_PROBE
 3

	)

176 
	#IPV6_FLOWLABEL_MGR
 32

	)

177 
	#IPV6_FLOWINFO_SEND
 33

	)

179 
	#IPV6_IPSEC_POLICY
 34

	)

180 
	#IPV6_XFRM_POLICY
 35

	)

201 
	#IPV6_RECVPKTINFO
 49

	)

202 
	#IPV6_PKTINFO
 50

	)

203 
	#IPV6_RECVHOPLIMIT
 51

	)

204 
	#IPV6_HOPLIMIT
 52

	)

205 
	#IPV6_RECVHOPOPTS
 53

	)

206 
	#IPV6_HOPOPTS
 54

	)

207 
	#IPV6_RTHDRDSTOPTS
 55

	)

208 
	#IPV6_RECVRTHDR
 56

	)

209 
	#IPV6_RTHDR
 57

	)

210 
	#IPV6_RECVDSTOPTS
 58

	)

211 
	#IPV6_DSTOPTS
 59

	)

212 
	#IPV6_RECVPATHMTU
 60

	)

213 
	#IPV6_PATHMTU
 61

	)

214 
	#IPV6_DONTFRAG
 62

	)

216 
	#IPV6_USE_MIN_MTU
 63

	)

232 
	#IPV6_RECVTCLASS
 66

	)

233 
	#IPV6_TCLASS
 67

	)

246 
	#IPV6_ADDR_PREFERENCES
 72

	)

248 
	#IPV6_PREFER_SRC_TMP
 0x0001

	)

249 
	#IPV6_PREFER_SRC_PUBLIC
 0x0002

	)

250 
	#IPV6_PREFER_SRC_PUBTMP_DEFAULT
 0x0100

	)

251 
	#IPV6_PREFER_SRC_COA
 0x0004

	)

252 
	#IPV6_PREFER_SRC_HOME
 0x0400

	)

253 
	#IPV6_PREFER_SRC_CGA
 0x0008

	)

254 
	#IPV6_PREFER_SRC_NONCGA
 0x0800

	)

257 
	#IPV6_MINHOPCOUNT
 73

	)

259 
	#IPV6_ORIGDSTADDR
 74

	)

260 
	#IPV6_RECVORIGDSTADDR
 
IPV6_ORIGDSTADDR


	)

261 
	#IPV6_TRANSPARENT
 75

	)

	@/usr/include/linux/in_route.h

1 #i‚de‡
_LINUX_IN_ROUTE_H


2 
	#_LINUX_IN_ROUTE_H


	)

6 
	#RTCF_DEAD
 
RTNH_F_DEAD


	)

7 
	#RTCF_ONLINK
 
RTNH_F_ONLINK


	)

10 
	#RTCF_NOPMTUDISC
 
RTM_F_NOPMTUDISC


	)

12 
	#RTCF_NOTIFY
 0x00010000

	)

13 
	#RTCF_DIRECTDST
 0x00020000

	)

14 
	#RTCF_REDIRECTED
 0x00040000

	)

15 
	#RTCF_TPROXY
 0x00080000

	)

17 
	#RTCF_FAST
 0x00200000

	)

18 
	#RTCF_MASQ
 0x00400000

	)

19 
	#RTCF_SNAT
 0x00800000

	)

20 
	#RTCF_DOREDIRECT
 0x01000000

	)

21 
	#RTCF_DIRECTSRC
 0x04000000

	)

22 
	#RTCF_DNAT
 0x08000000

	)

23 
	#RTCF_BROADCAST
 0x10000000

	)

24 
	#RTCF_MULTICAST
 0x20000000

	)

25 
	#RTCF_REJECT
 0x40000000

	)

26 
	#RTCF_LOCAL
 0x80000000

	)

28 
	#RTCF_NAT
 (
RTCF_DNAT
|
RTCF_SNAT
)

	)

30 
	#RT_TOS
(
tos
Ë(—os)&
IPTOS_TOS_MASK
)

	)

	@/usr/include/linux/ip.h

17 #i‚de‡
_LINUX_IP_H


18 
	#_LINUX_IP_H


	)

19 
	~<löux/ty≥s.h
>

20 
	~<asm/byã‹dî.h
>

22 
	#IPTOS_TOS_MASK
 0x1E

	)

23 
	#IPTOS_TOS
(
tos
Ë(—os)&
IPTOS_TOS_MASK
)

	)

24 
	#IPTOS_LOWDELAY
 0x10

	)

25 
	#IPTOS_THROUGHPUT
 0x08

	)

26 
	#IPTOS_RELIABILITY
 0x04

	)

27 
	#IPTOS_MINCOST
 0x02

	)

29 
	#IPTOS_PREC_MASK
 0xE0

	)

30 
	#IPTOS_PREC
(
tos
Ë(—os)&
IPTOS_PREC_MASK
)

	)

31 
	#IPTOS_PREC_NETCONTROL
 0xe0

	)

32 
	#IPTOS_PREC_INTERNETCONTROL
 0xc0

	)

33 
	#IPTOS_PREC_CRITIC_ECP
 0xa0

	)

34 
	#IPTOS_PREC_FLASHOVERRIDE
 0x80

	)

35 
	#IPTOS_PREC_FLASH
 0x60

	)

36 
	#IPTOS_PREC_IMMEDIATE
 0x40

	)

37 
	#IPTOS_PREC_PRIORITY
 0x20

	)

38 
	#IPTOS_PREC_ROUTINE
 0x00

	)

42 
	#IPOPT_COPY
 0x80

	)

43 
	#IPOPT_CLASS_MASK
 0x60

	)

44 
	#IPOPT_NUMBER_MASK
 0x1f

	)

46 
	#IPOPT_COPIED
(
o
Ë((o)&
IPOPT_COPY
)

	)

47 
	#IPOPT_CLASS
(
o
Ë((o)&
IPOPT_CLASS_MASK
)

	)

48 
	#IPOPT_NUMBER
(
o
Ë((o)&
IPOPT_NUMBER_MASK
)

	)

50 
	#IPOPT_CONTROL
 0x00

	)

51 
	#IPOPT_RESERVED1
 0x20

	)

52 
	#IPOPT_MEASUREMENT
 0x40

	)

53 
	#IPOPT_RESERVED2
 0x60

	)

55 
	#IPOPT_END
 (0 |
IPOPT_CONTROL
)

	)

56 
	#IPOPT_NOOP
 (1 |
IPOPT_CONTROL
)

	)

57 
	#IPOPT_SEC
 (2 |
IPOPT_CONTROL
|
IPOPT_COPY
)

	)

58 
	#IPOPT_LSRR
 (3 |
IPOPT_CONTROL
|
IPOPT_COPY
)

	)

59 
	#IPOPT_TIMESTAMP
 (4 |
IPOPT_MEASUREMENT
)

	)

60 
	#IPOPT_CIPSO
 (6 |
IPOPT_CONTROL
|
IPOPT_COPY
)

	)

61 
	#IPOPT_RR
 (7 |
IPOPT_CONTROL
)

	)

62 
	#IPOPT_SID
 (8 |
IPOPT_CONTROL
|
IPOPT_COPY
)

	)

63 
	#IPOPT_SSRR
 (9 |
IPOPT_CONTROL
|
IPOPT_COPY
)

	)

64 
	#IPOPT_RA
 (20|
IPOPT_CONTROL
|
IPOPT_COPY
)

	)

66 
	#IPVERSION
 4

	)

67 
	#MAXTTL
 255

	)

68 
	#IPDEFTTL
 64

	)

70 
	#IPOPT_OPTVAL
 0

	)

71 
	#IPOPT_OLEN
 1

	)

72 
	#IPOPT_OFFSET
 2

	)

73 
	#IPOPT_MINOFF
 4

	)

74 
	#MAX_IPOPTLEN
 40

	)

75 
	#IPOPT_NOP
 
IPOPT_NOOP


	)

76 
	#IPOPT_EOL
 
IPOPT_END


	)

77 
	#IPOPT_TS
 
IPOPT_TIMESTAMP


	)

79 
	#IPOPT_TS_TSONLY
 0

	)

80 
	#IPOPT_TS_TSANDADDR
 1

	)

81 
	#IPOPT_TS_PRESPEC
 3

	)

83 
	#IPV4_BEET_PHMAXLEN
 8

	)

85 
	sùhdr
 {

86 #i‡
deföed
(
__LITTLE_ENDIAN_BITFIELD
)

87 
__u8
 
	mihl
:4,

88 
	mvîsi⁄
:4;

89 #ñi‡
deföed
 (
__BIG_ENDIAN_BITFIELD
)

90 
__u8
 
	mvîsi⁄
:4,

91 
	mihl
:4;

95 
__u8
 
	mtos
;

96 
__be16
 
	mtŸ_Àn
;

97 
__be16
 
	mid
;

98 
__be16
 
	m‰ag_off
;

99 
__u8
 
	mâl
;

100 
__u8
 
	m¥Ÿocﬁ
;

101 
__sum16
 
	mcheck
;

102 
__be32
 
	mßddr
;

103 
__be32
 
	mdaddr
;

108 
	sù_auth_hdr
 {

109 
__u8
 
	m√xthdr
;

110 
__u8
 
	mhdæí
;

111 
__be16
 
	mª£rved
;

112 
__be32
 
	m•i
;

113 
__be32
 
	m£q_no
;

114 
__u8
 
	mauth_d©a
[0];

117 
	sù_e•_hdr
 {

118 
__be32
 
	m•i
;

119 
__be32
 
	m£q_no
;

120 
__u8
 
	míc_d©a
[0];

123 
	sù_comp_hdr
 {

124 
__u8
 
	m√xthdr
;

125 
__u8
 
	mÊags
;

126 
__be16
 
	m˝i
;

129 
	sù_bìt_phdr
 {

130 
__u8
 
	m√xthdr
;

131 
__u8
 
	mhdæí
;

132 
__u8
 
	m∑dÀn
;

133 
__u8
 
	mª£rved
;

	@/usr/include/linux/ip6_tunnel.h

1 #i‚de‡
_IP6_TUNNEL_H


2 
	#_IP6_TUNNEL_H


	)

4 
	~<löux/ty≥s.h
>

6 
	#IPV6_TLV_TNL_ENCAP_LIMIT
 4

	)

7 
	#IPV6_DEFAULT_TNL_ENCAP_LIMIT
 4

	)

10 
	#IP6_TNL_F_IGN_ENCAP_LIMIT
 0x1

	)

12 
	#IP6_TNL_F_USE_ORIG_TCLASS
 0x2

	)

14 
	#IP6_TNL_F_USE_ORIG_FLOWLABEL
 0x4

	)

16 
	#IP6_TNL_F_MIP6_DEV
 0x8

	)

18 
	#IP6_TNL_F_RCV_DSCP_COPY
 0x10

	)

20 
	#IP6_TNL_F_USE_ORIG_FWMARK
 0x20

	)

22 
	sù6_äl_∑rm
 {

23 
	m«me
[
IFNAMSIZ
];

24 
	mlök
;

25 
__u8
 
	m¥Ÿo
;

26 
__u8
 
	míˇp_limô
;

27 
__u8
 
	mh›_limô
;

28 
__be32
 
	mÊowöfo
;

29 
__u32
 
	mÊags
;

30 
ö6_addr
 
	mœddr
;

31 
ö6_addr
 
	møddr
;

	@/usr/include/linux/rtnetlink.h

1 #i‚de‡
__LINUX_RTNETLINK_H


2 
	#__LINUX_RTNETLINK_H


	)

4 
	~<löux/ty≥s.h
>

5 
	~<löux/√éök.h
>

6 
	~<löux/if_lök.h
>

7 
	~<löux/if_addr.h
>

8 
	~<löux/√ighbour.h
>

13 
	#RTNL_FAMILY_IPMR
 128

	)

14 
	#RTNL_FAMILY_IP6MR
 129

	)

15 
	#RTNL_FAMILY_MAX
 129

	)

24 
	mRTM_BASE
 = 16,

25 
	#RTM_BASE
 
RTM_BASE


	)

27 
	mRTM_NEWLINK
 = 16,

28 
	#RTM_NEWLINK
 
RTM_NEWLINK


	)

29 
	mRTM_DELLINK
,

30 
	#RTM_DELLINK
 
RTM_DELLINK


	)

31 
	mRTM_GETLINK
,

32 
	#RTM_GETLINK
 
RTM_GETLINK


	)

33 
	mRTM_SETLINK
,

34 
	#RTM_SETLINK
 
RTM_SETLINK


	)

36 
	mRTM_NEWADDR
 = 20,

37 
	#RTM_NEWADDR
 
RTM_NEWADDR


	)

38 
	mRTM_DELADDR
,

39 
	#RTM_DELADDR
 
RTM_DELADDR


	)

40 
	mRTM_GETADDR
,

41 
	#RTM_GETADDR
 
RTM_GETADDR


	)

43 
	mRTM_NEWROUTE
 = 24,

44 
	#RTM_NEWROUTE
 
RTM_NEWROUTE


	)

45 
	mRTM_DELROUTE
,

46 
	#RTM_DELROUTE
 
RTM_DELROUTE


	)

47 
	mRTM_GETROUTE
,

48 
	#RTM_GETROUTE
 
RTM_GETROUTE


	)

50 
	mRTM_NEWNEIGH
 = 28,

51 
	#RTM_NEWNEIGH
 
RTM_NEWNEIGH


	)

52 
	mRTM_DELNEIGH
,

53 
	#RTM_DELNEIGH
 
RTM_DELNEIGH


	)

54 
	mRTM_GETNEIGH
,

55 
	#RTM_GETNEIGH
 
RTM_GETNEIGH


	)

57 
	mRTM_NEWRULE
 = 32,

58 
	#RTM_NEWRULE
 
RTM_NEWRULE


	)

59 
	mRTM_DELRULE
,

60 
	#RTM_DELRULE
 
RTM_DELRULE


	)

61 
	mRTM_GETRULE
,

62 
	#RTM_GETRULE
 
RTM_GETRULE


	)

64 
	mRTM_NEWQDISC
 = 36,

65 
	#RTM_NEWQDISC
 
RTM_NEWQDISC


	)

66 
	mRTM_DELQDISC
,

67 
	#RTM_DELQDISC
 
RTM_DELQDISC


	)

68 
	mRTM_GETQDISC
,

69 
	#RTM_GETQDISC
 
RTM_GETQDISC


	)

71 
	mRTM_NEWTCLASS
 = 40,

72 
	#RTM_NEWTCLASS
 
RTM_NEWTCLASS


	)

73 
	mRTM_DELTCLASS
,

74 
	#RTM_DELTCLASS
 
RTM_DELTCLASS


	)

75 
	mRTM_GETTCLASS
,

76 
	#RTM_GETTCLASS
 
RTM_GETTCLASS


	)

78 
	mRTM_NEWTFILTER
 = 44,

79 
	#RTM_NEWTFILTER
 
RTM_NEWTFILTER


	)

80 
	mRTM_DELTFILTER
,

81 
	#RTM_DELTFILTER
 
RTM_DELTFILTER


	)

82 
	mRTM_GETTFILTER
,

83 
	#RTM_GETTFILTER
 
RTM_GETTFILTER


	)

85 
	mRTM_NEWACTION
 = 48,

86 
	#RTM_NEWACTION
 
RTM_NEWACTION


	)

87 
	mRTM_DELACTION
,

88 
	#RTM_DELACTION
 
RTM_DELACTION


	)

89 
	mRTM_GETACTION
,

90 
	#RTM_GETACTION
 
RTM_GETACTION


	)

92 
	mRTM_NEWPREFIX
 = 52,

93 
	#RTM_NEWPREFIX
 
RTM_NEWPREFIX


	)

95 
	mRTM_GETMULTICAST
 = 58,

96 
	#RTM_GETMULTICAST
 
RTM_GETMULTICAST


	)

98 
	mRTM_GETANYCAST
 = 62,

99 
	#RTM_GETANYCAST
 
RTM_GETANYCAST


	)

101 
	mRTM_NEWNEIGHTBL
 = 64,

102 
	#RTM_NEWNEIGHTBL
 
RTM_NEWNEIGHTBL


	)

103 
	mRTM_GETNEIGHTBL
 = 66,

104 
	#RTM_GETNEIGHTBL
 
RTM_GETNEIGHTBL


	)

105 
	mRTM_SETNEIGHTBL
,

106 
	#RTM_SETNEIGHTBL
 
RTM_SETNEIGHTBL


	)

108 
	mRTM_NEWNDUSEROPT
 = 68,

109 
	#RTM_NEWNDUSEROPT
 
RTM_NEWNDUSEROPT


	)

111 
	mRTM_NEWADDRLABEL
 = 72,

112 
	#RTM_NEWADDRLABEL
 
RTM_NEWADDRLABEL


	)

113 
	mRTM_DELADDRLABEL
,

114 
	#RTM_DELADDRLABEL
 
RTM_DELADDRLABEL


	)

115 
	mRTM_GETADDRLABEL
,

116 
	#RTM_GETADDRLABEL
 
RTM_GETADDRLABEL


	)

118 
	mRTM_GETDCB
 = 78,

119 
	#RTM_GETDCB
 
RTM_GETDCB


	)

120 
	mRTM_SETDCB
,

121 
	#RTM_SETDCB
 
RTM_SETDCB


	)

123 
	m__RTM_MAX
,

124 
	#RTM_MAX
 (((
__RTM_MAX
 + 3Ë& ~3Ë- 1)

	)

127 
	#RTM_NR_MSGTYPES
 (
RTM_MAX
 + 1 - 
RTM_BASE
)

	)

128 
	#RTM_NR_FAMILIES
 (
RTM_NR_MSGTYPES
 >> 2)

	)

129 
	#RTM_FAM
(
cmd
Ë(((cmdË- 
RTM_BASE
Ë>> 2)

	)

137 
	sπ©å
 {

138 
	mπa_Àn
;

139 
	mπa_ty≥
;

144 
	#RTA_ALIGNTO
 4

	)

145 
	#RTA_ALIGN
(
Àn
Ë–(÷í)+
RTA_ALIGNTO
-1Ë& ~(RTA_ALIGNTO-1Ë)

	)

146 
	#RTA_OK
(
πa
,
Àn
Ë(÷íË>()(
π©å
) && \

147 (
πa
)->
πa_Àn
 >(
π©å
) && \

148 (
πa
)->
πa_Àn
 <(
Àn
))

	)

149 
	#RTA_NEXT
(
πa
,
©åÀn
Ë(◊âæíË-
	`RTA_ALIGN
(‘è)->
πa_Àn
), \

150 (
π©å
*)(((*)(
πa
)Ë+ 
	`RTA_ALIGN
(‘è)->
πa_Àn
)))

	)

151 
	#RTA_LENGTH
(
Àn
Ë(
	`RTA_ALIGN
((
π©å
)Ë+ (Àn))

	)

152 
	#RTA_SPACE
(
Àn
Ë
	`RTA_ALIGN
(
	`RTA_LENGTH
÷í))

	)

153 
	#RTA_DATA
(
πa
Ë((*)(((*)‘è)Ë+ 
	`RTA_LENGTH
(0)))

	)

154 
	#RTA_PAYLOAD
(
πa
Ë(()(‘è)->
πa_Àn
Ë- 
	`RTA_LENGTH
(0))

	)

163 
	sπmsg
 {

164 
	mπm_Ámûy
;

165 
	mπm_d°_Àn
;

166 
	mπm_§c_Àn
;

167 
	mπm_tos
;

169 
	mπm_èbÀ
;

170 
	mπm_¥Ÿocﬁ
;

171 
	mπm_sc›e
;

172 
	mπm_ty≥
;

174 
	mπm_Êags
;

180 
	mRTN_UNSPEC
,

181 
	mRTN_UNICAST
,

182 
	mRTN_LOCAL
,

183 
	mRTN_BROADCAST
,

185 
	mRTN_ANYCAST
,

187 
	mRTN_MULTICAST
,

188 
	mRTN_BLACKHOLE
,

189 
	mRTN_UNREACHABLE
,

190 
	mRTN_PROHIBIT
,

191 
	mRTN_THROW
,

192 
	mRTN_NAT
,

193 
	mRTN_XRESOLVE
,

194 
	m__RTN_MAX


197 
	#RTN_MAX
 (
__RTN_MAX
 - 1)

	)

202 
	#RTPROT_UNSPEC
 0

	)

203 
	#RTPROT_REDIRECT
 1

	)

205 
	#RTPROT_KERNEL
 2

	)

206 
	#RTPROT_BOOT
 3

	)

207 
	#RTPROT_STATIC
 4

	)

216 
	#RTPROT_GATED
 8

	)

217 
	#RTPROT_RA
 9

	)

218 
	#RTPROT_MRT
 10

	)

219 
	#RTPROT_ZEBRA
 11

	)

220 
	#RTPROT_BIRD
 12

	)

221 
	#RTPROT_DNROUTED
 13

	)

222 
	#RTPROT_XORP
 14

	)

223 
	#RTPROT_NTK
 15

	)

224 
	#RTPROT_DHCP
 16

	)

237 
	eπ_sc›e_t
 {

238 
	mRT_SCOPE_UNIVERSE
=0,

240 
	mRT_SCOPE_SITE
=200,

241 
	mRT_SCOPE_LINK
=253,

242 
	mRT_SCOPE_HOST
=254,

243 
	mRT_SCOPE_NOWHERE
=255

248 
	#RTM_F_NOTIFY
 0x100

	)

249 
	#RTM_F_CLONED
 0x200

	)

250 
	#RTM_F_EQUALIZE
 0x400

	)

251 
	#RTM_F_PREFIX
 0x800

	)

255 
	eπ_˛ass_t
 {

256 
	mRT_TABLE_UNSPEC
=0,

258 
	mRT_TABLE_COMPAT
=252,

259 
	mRT_TABLE_DEFAULT
=253,

260 
	mRT_TABLE_MAIN
=254,

261 
	mRT_TABLE_LOCAL
=255,

262 
	mRT_TABLE_MAX
=0xFFFFFFFF

268 
	eπ©å_ty≥_t
 {

269 
	mRTA_UNSPEC
,

270 
	mRTA_DST
,

271 
	mRTA_SRC
,

272 
	mRTA_IIF
,

273 
	mRTA_OIF
,

274 
	mRTA_GATEWAY
,

275 
	mRTA_PRIORITY
,

276 
	mRTA_PREFSRC
,

277 
	mRTA_METRICS
,

278 
	mRTA_MULTIPATH
,

279 
	mRTA_PROTOINFO
,

280 
	mRTA_FLOW
,

281 
	mRTA_CACHEINFO
,

282 
	mRTA_SESSION
,

283 
	mRTA_MP_ALGO
,

284 
	mRTA_TABLE
,

285 
	mRTA_MARK
,

286 
	m__RTA_MAX


289 
	#RTA_MAX
 (
__RTA_MAX
 - 1)

	)

291 
	#RTM_RTA
(
r
Ë((
π©å
*)(((*)‘)Ë+ 
	`NLMSG_ALIGN
((
πmsg
))))

	)

292 
	#RTM_PAYLOAD
(
n
Ë
	`NLMSG_PAYLOAD
“,(
πmsg
))

	)

303 
	sπ√xth›
 {

304 
	mπnh_Àn
;

305 
	mπnh_Êags
;

306 
	mπnh_h›s
;

307 
	mπnh_ifödex
;

312 
	#RTNH_F_DEAD
 1

	)

313 
	#RTNH_F_PERVASIVE
 2

	)

314 
	#RTNH_F_ONLINK
 4

	)

318 
	#RTNH_ALIGNTO
 4

	)

319 
	#RTNH_ALIGN
(
Àn
Ë–(÷í)+
RTNH_ALIGNTO
-1Ë& ~(RTNH_ALIGNTO-1Ë)

	)

320 
	#RTNH_OK
(
πnh
,
Àn
Ë(‘äh)->
πnh_Àn
 >(
π√xth›
) && \

321 (()(
πnh
)->
πnh_Àn
Ë<(
Àn
))

	)

322 
	#RTNH_NEXT
(
πnh
Ë((
π√xth›
*)(((*)‘äh)Ë+ 
	`RTNH_ALIGN
(‘äh)->
πnh_Àn
)))

	)

323 
	#RTNH_LENGTH
(
Àn
Ë(
	`RTNH_ALIGN
((
π√xth›
)Ë+ (Àn))

	)

324 
	#RTNH_SPACE
(
Àn
Ë
	`RTNH_ALIGN
(
	`RTNH_LENGTH
÷í))

	)

325 
	#RTNH_DATA
(
πnh
Ë((
π©å
*)(((*)‘äh)Ë+ 
	`RTNH_LENGTH
(0)))

	)

329 
	sπa_ˇcheöfo
 {

330 
__u32
 
	mπa_˛¡ªf
;

331 
__u32
 
	mπa_œ°u£
;

332 
__s32
 
	mπa_expúes
;

333 
__u32
 
	mπa_îr‹
;

334 
__u32
 
	mπa_u£d
;

336 
	#RTNETLINK_HAVE_PEERINFO
 1

	)

337 
__u32
 
	mπa_id
;

338 
__u32
 
	mπa_ts
;

339 
__u32
 
	mπa_tßge
;

345 
	mRTAX_UNSPEC
,

346 
	#RTAX_UNSPEC
 
RTAX_UNSPEC


	)

347 
	mRTAX_LOCK
,

348 
	#RTAX_LOCK
 
RTAX_LOCK


	)

349 
	mRTAX_MTU
,

350 
	#RTAX_MTU
 
RTAX_MTU


	)

351 
	mRTAX_WINDOW
,

352 
	#RTAX_WINDOW
 
RTAX_WINDOW


	)

353 
	mRTAX_RTT
,

354 
	#RTAX_RTT
 
RTAX_RTT


	)

355 
	mRTAX_RTTVAR
,

356 
	#RTAX_RTTVAR
 
RTAX_RTTVAR


	)

357 
	mRTAX_SSTHRESH
,

358 
	#RTAX_SSTHRESH
 
RTAX_SSTHRESH


	)

359 
	mRTAX_CWND
,

360 
	#RTAX_CWND
 
RTAX_CWND


	)

361 
	mRTAX_ADVMSS
,

362 
	#RTAX_ADVMSS
 
RTAX_ADVMSS


	)

363 
	mRTAX_REORDERING
,

364 
	#RTAX_REORDERING
 
RTAX_REORDERING


	)

365 
	mRTAX_HOPLIMIT
,

366 
	#RTAX_HOPLIMIT
 
RTAX_HOPLIMIT


	)

367 
	mRTAX_INITCWND
,

368 
	#RTAX_INITCWND
 
RTAX_INITCWND


	)

369 
	mRTAX_FEATURES
,

370 
	#RTAX_FEATURES
 
RTAX_FEATURES


	)

371 
	mRTAX_RTO_MIN
,

372 
	#RTAX_RTO_MIN
 
RTAX_RTO_MIN


	)

373 
	mRTAX_INITRWND
,

374 
	#RTAX_INITRWND
 
RTAX_INITRWND


	)

375 
	m__RTAX_MAX


378 
	#RTAX_MAX
 (
__RTAX_MAX
 - 1)

	)

380 
	#RTAX_FEATURE_ECN
 0x00000001

	)

381 
	#RTAX_FEATURE_SACK
 0x00000002

	)

382 
	#RTAX_FEATURE_TIMESTAMP
 0x00000004

	)

383 
	#RTAX_FEATURE_ALLFRAG
 0x00000008

	)

385 
	sπa_£ssi⁄
 {

386 
__u8
 
	m¥Ÿo
;

387 
__u8
 
	m∑d1
;

388 
__u16
 
	m∑d2
;

392 
__u16
 
	m•‹t
;

393 
__u16
 
	mdp‹t
;

394 } 
	mp‹ts
;

397 
__u8
 
	mty≥
;

398 
__u8
 
	mcode
;

399 
__u16
 
	midít
;

400 } 
	micm±
;

402 
__u32
 
	m•i
;

403 } 
	mu
;

410 
	sπgímsg
 {

411 
	mπgí_Ámûy
;

423 
	siföfomsg
 {

424 
	mifi_Ámûy
;

425 
	m__ifi_∑d
;

426 
	mifi_ty≥
;

427 
	mifi_ödex
;

428 
	mifi_Êags
;

429 
	mifi_ch™ge
;

436 
	s¥efixmsg
 {

437 
	m¥efix_Ámûy
;

438 
	m¥efix_∑d1
;

439 
	m¥efix_∑d2
;

440 
	m¥efix_ifödex
;

441 
	m¥efix_ty≥
;

442 
	m¥efix_Àn
;

443 
	m¥efix_Êags
;

444 
	m¥efix_∑d3
;

449 
	mPREFIX_UNSPEC
,

450 
	mPREFIX_ADDRESS
,

451 
	mPREFIX_CACHEINFO
,

452 
	m__PREFIX_MAX


455 
	#PREFIX_MAX
 (
__PREFIX_MAX
 - 1)

	)

457 
	s¥efix_ˇcheöfo
 {

458 
__u32
 
	m¥e„ºed_time
;

459 
__u32
 
	mvÆid_time
;

467 
	stcmsg
 {

468 
	mtcm_Ámûy
;

469 
	mtcm__∑d1
;

470 
	mtcm__∑d2
;

471 
	mtcm_ifödex
;

472 
__u32
 
	mtcm_h™dÀ
;

473 
__u32
 
	mtcm_∑ª¡
;

474 
__u32
 
	mtcm_öfo
;

478 
	mTCA_UNSPEC
,

479 
	mTCA_KIND
,

480 
	mTCA_OPTIONS
,

481 
	mTCA_STATS
,

482 
	mTCA_XSTATS
,

483 
	mTCA_RATE
,

484 
	mTCA_FCNT
,

485 
	mTCA_STATS2
,

486 
	mTCA_STAB
,

487 
	m__TCA_MAX


490 
	#TCA_MAX
 (
__TCA_MAX
 - 1)

	)

492 
	#TCA_RTA
(
r
Ë((
π©å
*)(((*)‘)Ë+ 
	`NLMSG_ALIGN
((
tcmsg
))))

	)

493 
	#TCA_PAYLOAD
(
n
Ë
	`NLMSG_PAYLOAD
“,(
tcmsg
))

	)

499 
	sndu£r›tmsg
 {

500 
	mndu£r›t_Ámûy
;

501 
	mndu£r›t_∑d1
;

502 
	mndu£r›t_›ts_Àn
;

503 
	mndu£r›t_ifödex
;

504 
__u8
 
	mndu£r›t_icmp_ty≥
;

505 
__u8
 
	mndu£r›t_icmp_code
;

506 
	mndu£r›t_∑d2
;

507 
	mndu£r›t_∑d3
;

512 
	mNDUSEROPT_UNSPEC
,

513 
	mNDUSEROPT_SRCADDR
,

514 
	m__NDUSEROPT_MAX


517 
	#NDUSEROPT_MAX
 (
__NDUSEROPT_MAX
 - 1)

	)

520 
	#RTMGRP_LINK
 1

	)

521 
	#RTMGRP_NOTIFY
 2

	)

522 
	#RTMGRP_NEIGH
 4

	)

523 
	#RTMGRP_TC
 8

	)

525 
	#RTMGRP_IPV4_IFADDR
 0x10

	)

526 
	#RTMGRP_IPV4_MROUTE
 0x20

	)

527 
	#RTMGRP_IPV4_ROUTE
 0x40

	)

528 
	#RTMGRP_IPV4_RULE
 0x80

	)

530 
	#RTMGRP_IPV6_IFADDR
 0x100

	)

531 
	#RTMGRP_IPV6_MROUTE
 0x200

	)

532 
	#RTMGRP_IPV6_ROUTE
 0x400

	)

533 
	#RTMGRP_IPV6_IFINFO
 0x800

	)

535 
	#RTMGRP_DEC√t_IFADDR
 0x1000

	)

536 
	#RTMGRP_DEC√t_ROUTE
 0x4000

	)

538 
	#RTMGRP_IPV6_PREFIX
 0x20000

	)

541 
	eπ√éök_groups
 {

542 
	mRTNLGRP_NONE
,

543 
	#RTNLGRP_NONE
 
RTNLGRP_NONE


	)

544 
	mRTNLGRP_LINK
,

545 
	#RTNLGRP_LINK
 
RTNLGRP_LINK


	)

546 
	mRTNLGRP_NOTIFY
,

547 
	#RTNLGRP_NOTIFY
 
RTNLGRP_NOTIFY


	)

548 
	mRTNLGRP_NEIGH
,

549 
	#RTNLGRP_NEIGH
 
RTNLGRP_NEIGH


	)

550 
	mRTNLGRP_TC
,

551 
	#RTNLGRP_TC
 
RTNLGRP_TC


	)

552 
	mRTNLGRP_IPV4_IFADDR
,

553 
	#RTNLGRP_IPV4_IFADDR
 
RTNLGRP_IPV4_IFADDR


	)

554 
	mRTNLGRP_IPV4_MROUTE
,

555 
	#RTNLGRP_IPV4_MROUTE
 
RTNLGRP_IPV4_MROUTE


	)

556 
	mRTNLGRP_IPV4_ROUTE
,

557 
	#RTNLGRP_IPV4_ROUTE
 
RTNLGRP_IPV4_ROUTE


	)

558 
	mRTNLGRP_IPV4_RULE
,

559 
	#RTNLGRP_IPV4_RULE
 
RTNLGRP_IPV4_RULE


	)

560 
	mRTNLGRP_IPV6_IFADDR
,

561 
	#RTNLGRP_IPV6_IFADDR
 
RTNLGRP_IPV6_IFADDR


	)

562 
	mRTNLGRP_IPV6_MROUTE
,

563 
	#RTNLGRP_IPV6_MROUTE
 
RTNLGRP_IPV6_MROUTE


	)

564 
	mRTNLGRP_IPV6_ROUTE
,

565 
	#RTNLGRP_IPV6_ROUTE
 
RTNLGRP_IPV6_ROUTE


	)

566 
	mRTNLGRP_IPV6_IFINFO
,

567 
	#RTNLGRP_IPV6_IFINFO
 
RTNLGRP_IPV6_IFINFO


	)

568 
	mRTNLGRP_DEC√t_IFADDR
,

569 
	#RTNLGRP_DEC√t_IFADDR
 
RTNLGRP_DEC√t_IFADDR


	)

570 
	mRTNLGRP_NOP2
,

571 
	mRTNLGRP_DEC√t_ROUTE
,

572 
	#RTNLGRP_DEC√t_ROUTE
 
RTNLGRP_DEC√t_ROUTE


	)

573 
	mRTNLGRP_DEC√t_RULE
,

574 
	#RTNLGRP_DEC√t_RULE
 
RTNLGRP_DEC√t_RULE


	)

575 
	mRTNLGRP_NOP4
,

576 
	mRTNLGRP_IPV6_PREFIX
,

577 
	#RTNLGRP_IPV6_PREFIX
 
RTNLGRP_IPV6_PREFIX


	)

578 
	mRTNLGRP_IPV6_RULE
,

579 
	#RTNLGRP_IPV6_RULE
 
RTNLGRP_IPV6_RULE


	)

580 
	mRTNLGRP_ND_USEROPT
,

581 
	#RTNLGRP_ND_USEROPT
 
RTNLGRP_ND_USEROPT


	)

582 
	mRTNLGRP_PHONET_IFADDR
,

583 
	#RTNLGRP_PHONET_IFADDR
 
RTNLGRP_PHONET_IFADDR


	)

584 
	mRTNLGRP_PHONET_ROUTE
,

585 
	#RTNLGRP_PHONET_ROUTE
 
RTNLGRP_PHONET_ROUTE


	)

586 
	mRTNLGRP_DCB
,

587 
	#RTNLGRP_DCB
 
RTNLGRP_DCB


	)

588 
	m__RTNLGRP_MAX


590 
	#RTNLGRP_MAX
 (
__RTNLGRP_MAX
 - 1)

	)

593 
	stˇmsg
 {

594 
	mtˇ_Ámûy
;

595 
	mtˇ__∑d1
;

596 
	mtˇ__∑d2
;

598 
	#TA_RTA
(
r
Ë((
π©å
*)(((*)‘)Ë+ 
	`NLMSG_ALIGN
((
tˇmsg
))))

	)

599 
	#TA_PAYLOAD
(
n
Ë
	`NLMSG_PAYLOAD
“,(
tˇmsg
))

	)

600 
	#TCA_ACT_TAB
 1

	)

601 
	#TCAA_MAX
 1

	)

	@/usr/include/linux/sockios.h

18 #i‚de‡
_LINUX_SOCKIOS_H


19 
	#_LINUX_SOCKIOS_H


	)

21 
	~<asm/sockios.h
>

24 
	#SIOCINQ
 
FIONREAD


	)

25 
	#SIOCOUTQ
 
TIOCOUTQ


	)

28 
	#SIOCADDRT
 0x890B

	)

29 
	#SIOCDELRT
 0x890C

	)

30 
	#SIOCRTMSG
 0x890D

	)

33 
	#SIOCGIFNAME
 0x8910

	)

34 
	#SIOCSIFLINK
 0x8911

	)

35 
	#SIOCGIFCONF
 0x8912

	)

36 
	#SIOCGIFFLAGS
 0x8913

	)

37 
	#SIOCSIFFLAGS
 0x8914

	)

38 
	#SIOCGIFADDR
 0x8915

	)

39 
	#SIOCSIFADDR
 0x8916

	)

40 
	#SIOCGIFDSTADDR
 0x8917

	)

41 
	#SIOCSIFDSTADDR
 0x8918

	)

42 
	#SIOCGIFBRDADDR
 0x8919

	)

43 
	#SIOCSIFBRDADDR
 0x891®

	)

44 
	#SIOCGIFNETMASK
 0x891b

	)

45 
	#SIOCSIFNETMASK
 0x891¯

	)

46 
	#SIOCGIFMETRIC
 0x891d

	)

47 
	#SIOCSIFMETRIC
 0x891ê

	)

48 
	#SIOCGIFMEM
 0x891‡

	)

49 
	#SIOCSIFMEM
 0x8920

	)

50 
	#SIOCGIFMTU
 0x8921

	)

51 
	#SIOCSIFMTU
 0x8922

	)

52 
	#SIOCSIFNAME
 0x8923

	)

53 
	#SIOCSIFHWADDR
 0x8924

	)

54 
	#SIOCGIFENCAP
 0x8925

	)

55 
	#SIOCSIFENCAP
 0x8926

	)

56 
	#SIOCGIFHWADDR
 0x8927

	)

57 
	#SIOCGIFSLAVE
 0x8929

	)

58 
	#SIOCSIFSLAVE
 0x8930

	)

59 
	#SIOCADDMULTI
 0x8931

	)

60 
	#SIOCDELMULTI
 0x8932

	)

61 
	#SIOCGIFINDEX
 0x8933

	)

62 
	#SIOGIFINDEX
 
SIOCGIFINDEX


	)

63 
	#SIOCSIFPFLAGS
 0x8934

	)

64 
	#SIOCGIFPFLAGS
 0x8935

	)

65 
	#SIOCDIFADDR
 0x8936

	)

66 
	#SIOCSIFHWBROADCAST
 0x8937

	)

67 
	#SIOCGIFCOUNT
 0x8938

	)

69 
	#SIOCGIFBR
 0x8940

	)

70 
	#SIOCSIFBR
 0x8941

	)

72 
	#SIOCGIFTXQLEN
 0x8942

	)

73 
	#SIOCSIFTXQLEN
 0x8943

	)

78 
	#SIOCETHTOOL
 0x8946

	)

80 
	#SIOCGMIIPHY
 0x8947

	)

81 
	#SIOCGMIIREG
 0x8948

	)

82 
	#SIOCSMIIREG
 0x8949

	)

84 
	#SIOCWANDEV
 0x894A

	)

86 
	#SIOCOUTQNSD
 0x894B

	)

90 
	#SIOCDARP
 0x8953

	)

91 
	#SIOCGARP
 0x8954

	)

92 
	#SIOCSARP
 0x8955

	)

95 
	#SIOCDRARP
 0x8960

	)

96 
	#SIOCGRARP
 0x8961

	)

97 
	#SIOCSRARP
 0x8962

	)

101 
	#SIOCGIFMAP
 0x8970

	)

102 
	#SIOCSIFMAP
 0x8971

	)

106 
	#SIOCADDDLCI
 0x8980

	)

107 
	#SIOCDELDLCI
 0x8981

	)

109 
	#SIOCGIFVLAN
 0x8982

	)

110 
	#SIOCSIFVLAN
 0x8983

	)

114 
	#SIOCBONDENSLAVE
 0x8990

	)

115 
	#SIOCBONDRELEASE
 0x8991

	)

116 
	#SIOCBONDSETHWADDR
 0x8992

	)

117 
	#SIOCBONDSLAVEINFOQUERY
 0x8993

	)

118 
	#SIOCBONDINFOQUERY
 0x8994

	)

119 
	#SIOCBONDCHANGEACTIVE
 0x8995

	)

122 
	#SIOCBRADDBR
 0x89a0

	)

123 
	#SIOCBRDELBR
 0x89a1

	)

124 
	#SIOCBRADDIF
 0x89a2

	)

125 
	#SIOCBRDELIF
 0x89a3

	)

128 
	#SIOCSHWTSTAMP
 0x89b0

	)

141 
	#SIOCDEVPRIVATE
 0x89F0

	)

147 
	#SIOCPROTOPRIVATE
 0x89E0

	)

	@/usr/include/linux/types.h

1 #i‚de‡
_LINUX_TYPES_H


2 
	#_LINUX_TYPES_H


	)

4 
	~<asm/ty≥s.h
>

6 #i‚de‡
__ASSEMBLY__


8 
	~<löux/posix_ty≥s.h
>

16 #ifde‡
__CHECKER__


17 
	#__bôwi£__
 
	`__©åibuã__
((
bôwi£
))

	)

19 
	#__bôwi£__


	)

21 #ifde‡
__CHECK_ENDIAN__


22 
	#__bôwi£
 
__bôwi£__


	)

24 
	#__bôwi£


	)

27 
__u16
 
	t__bôwi£
 
	t__À16
;

28 
__u16
 
	t__bôwi£
 
	t__be16
;

29 
__u32
 
	t__bôwi£
 
	t__À32
;

30 
__u32
 
	t__bôwi£
 
	t__be32
;

31 
__u64
 
	t__bôwi£
 
	t__À64
;

32 
__u64
 
	t__bôwi£
 
	t__be64
;

34 
__u16
 
	t__bôwi£
 
	t__sum16
;

35 
__u32
 
	t__bôwi£
 
	t__wsum
;

46 
	#__Æig√d_u64
 
__u64
 
	`__©åibuã__
((
	`Æig√d
(8)))

	)

47 
	#__Æig√d_be64
 
__be64
 
	`__©åibuã__
((
	`Æig√d
(8)))

	)

48 
	#__Æig√d_À64
 
__À64
 
	`__©åibuã__
((
	`Æig√d
(8)))

	)

	@/usr/include/linux/version.h

1 
	#LINUX_VERSION_CODE
 197135

	)

2 
	#KERNEL_VERSION
(
a
,
b
,
c
Ë((◊Ë<< 16Ë+ ((bË<< 8Ë+ (c))

	)

	@/usr/include/linux/wireless.h

10 #i‚de‡
_LINUX_WIRELESS_H


11 
	#_LINUX_WIRELESS_H


	)

72 
	~<löux/ty≥s.h
>

73 
	~<löux/sockë.h
>

74 
	~<löux/if.h
>

83 
	#WIRELESS_EXT
 22

	)

230 
	#SIOCSIWCOMMIT
 0x8B00

	)

231 
	#SIOCGIWNAME
 0x8B01

	)

237 
	#SIOCSIWNWID
 0x8B02

	)

238 
	#SIOCGIWNWID
 0x8B03

	)

239 
	#SIOCSIWFREQ
 0x8B04

	)

240 
	#SIOCGIWFREQ
 0x8B05

	)

241 
	#SIOCSIWMODE
 0x8B06

	)

242 
	#SIOCGIWMODE
 0x8B07

	)

243 
	#SIOCSIWSENS
 0x8B08

	)

244 
	#SIOCGIWSENS
 0x8B09

	)

247 
	#SIOCSIWRANGE
 0x8B0A

	)

248 
	#SIOCGIWRANGE
 0x8B0B

	)

249 
	#SIOCSIWPRIV
 0x8B0C

	)

250 
	#SIOCGIWPRIV
 0x8B0D

	)

251 
	#SIOCSIWSTATS
 0x8B0E

	)

252 
	#SIOCGIWSTATS
 0x8B0F

	)

257 
	#SIOCSIWSPY
 0x8B10

	)

258 
	#SIOCGIWSPY
 0x8B11

	)

259 
	#SIOCSIWTHRSPY
 0x8B12

	)

260 
	#SIOCGIWTHRSPY
 0x8B13

	)

263 
	#SIOCSIWAP
 0x8B14

	)

264 
	#SIOCGIWAP
 0x8B15

	)

265 
	#SIOCGIWAPLIST
 0x8B17

	)

266 
	#SIOCSIWSCAN
 0x8B18

	)

267 
	#SIOCGIWSCAN
 0x8B19

	)

270 
	#SIOCSIWESSID
 0x8B1A

	)

271 
	#SIOCGIWESSID
 0x8B1B

	)

272 
	#SIOCSIWNICKN
 0x8B1C

	)

273 
	#SIOCGIWNICKN
 0x8B1D

	)

279 
	#SIOCSIWRATE
 0x8B20

	)

280 
	#SIOCGIWRATE
 0x8B21

	)

281 
	#SIOCSIWRTS
 0x8B22

	)

282 
	#SIOCGIWRTS
 0x8B23

	)

283 
	#SIOCSIWFRAG
 0x8B24

	)

284 
	#SIOCGIWFRAG
 0x8B25

	)

285 
	#SIOCSIWTXPOW
 0x8B26

	)

286 
	#SIOCGIWTXPOW
 0x8B27

	)

287 
	#SIOCSIWRETRY
 0x8B28

	)

288 
	#SIOCGIWRETRY
 0x8B29

	)

291 
	#SIOCSIWENCODE
 0x8B2A

	)

292 
	#SIOCGIWENCODE
 0x8B2B

	)

294 
	#SIOCSIWPOWER
 0x8B2C

	)

295 
	#SIOCGIWPOWER
 0x8B2D

	)

304 
	#SIOCSIWGENIE
 0x8B30

	)

305 
	#SIOCGIWGENIE
 0x8B31

	)

308 
	#SIOCSIWMLME
 0x8B16

	)

311 
	#SIOCSIWAUTH
 0x8B32

	)

312 
	#SIOCGIWAUTH
 0x8B33

	)

315 
	#SIOCSIWENCODEEXT
 0x8B34

	)

316 
	#SIOCGIWENCODEEXT
 0x8B35

	)

319 
	#SIOCSIWPMKSA
 0x8B36

	)

330 
	#SIOCIWFIRSTPRIV
 0x8BE0

	)

331 
	#SIOCIWLASTPRIV
 0x8BFF

	)

346 
	#SIOCIWFIRST
 0x8B00

	)

347 
	#SIOCIWLAST
 
SIOCIWLASTPRIV


	)

348 
	#IW_IOCTL_IDX
(
cmd
Ë((cmdË- 
SIOCIWFIRST
)

	)

349 
	#IW_HANDLER
(
id
, 
func
) \

350 [
	`IW_IOCTL_IDX
(
id
)] = 
func


	)

353 
	#IW_IS_SET
(
cmd
Ë(!((cmdË& 0x1))

	)

354 
	#IW_IS_GET
(
cmd
Ë((cmdË& 0x1)

	)

360 
	#IWEVTXDROP
 0x8C00

	)

361 
	#IWEVQUAL
 0x8C01

	)

362 
	#IWEVCUSTOM
 0x8C02

	)

363 
	#IWEVREGISTERED
 0x8C03

	)

364 
	#IWEVEXPIRED
 0x8C04

	)

365 
	#IWEVGENIE
 0x8C05

	)

371 
	#IWEVMICHAELMICFAILURE
 0x8C06

	)

374 
	#IWEVASSOCREQIE
 0x8C07

	)

383 
	#IWEVASSOCRESPIE
 0x8C08

	)

390 
	#IWEVPMKIDCAND
 0x8C09

	)

394 
	#IWEVFIRST
 0x8C00

	)

395 
	#IW_EVENT_IDX
(
cmd
Ë((cmdË- 
IWEVFIRST
)

	)

404 
	#IW_PRIV_TYPE_MASK
 0x7000

	)

405 
	#IW_PRIV_TYPE_NONE
 0x0000

	)

406 
	#IW_PRIV_TYPE_BYTE
 0x1000

	)

407 
	#IW_PRIV_TYPE_CHAR
 0x2000

	)

408 
	#IW_PRIV_TYPE_INT
 0x4000

	)

409 
	#IW_PRIV_TYPE_FLOAT
 0x5000

	)

410 
	#IW_PRIV_TYPE_ADDR
 0x6000

	)

412 
	#IW_PRIV_SIZE_FIXED
 0x0800

	)

414 
	#IW_PRIV_SIZE_MASK
 0x07FF

	)

424 
	#IW_MAX_FREQUENCIES
 32

	)

430 
	#IW_MAX_BITRATES
 32

	)

433 
	#IW_MAX_TXPOWER
 8

	)

438 
	#IW_MAX_SPY
 8

	)

442 
	#IW_MAX_AP
 64

	)

445 
	#IW_ESSID_MAX_SIZE
 32

	)

448 
	#IW_MODE_AUTO
 0

	)

449 
	#IW_MODE_ADHOC
 1

	)

450 
	#IW_MODE_INFRA
 2

	)

451 
	#IW_MODE_MASTER
 3

	)

452 
	#IW_MODE_REPEAT
 4

	)

453 
	#IW_MODE_SECOND
 5

	)

454 
	#IW_MODE_MONITOR
 6

	)

455 
	#IW_MODE_MESH
 7

	)

458 
	#IW_QUAL_QUAL_UPDATED
 0x01

	)

459 
	#IW_QUAL_LEVEL_UPDATED
 0x02

	)

460 
	#IW_QUAL_NOISE_UPDATED
 0x04

	)

461 
	#IW_QUAL_ALL_UPDATED
 0x07

	)

462 
	#IW_QUAL_DBM
 0x08

	)

463 
	#IW_QUAL_QUAL_INVALID
 0x10

	)

464 
	#IW_QUAL_LEVEL_INVALID
 0x20

	)

465 
	#IW_QUAL_NOISE_INVALID
 0x40

	)

466 
	#IW_QUAL_RCPI
 0x80

	)

467 
	#IW_QUAL_ALL_INVALID
 0x70

	)

470 
	#IW_FREQ_AUTO
 0x00

	)

471 
	#IW_FREQ_FIXED
 0x01

	)

475 
	#IW_MAX_ENCODING_SIZES
 8

	)

478 
	#IW_ENCODING_TOKEN_MAX
 64

	)

481 
	#IW_ENCODE_INDEX
 0x00FF

	)

482 
	#IW_ENCODE_FLAGS
 0xFF00

	)

483 
	#IW_ENCODE_MODE
 0xF000

	)

484 
	#IW_ENCODE_DISABLED
 0x8000

	)

485 
	#IW_ENCODE_ENABLED
 0x0000

	)

486 
	#IW_ENCODE_RESTRICTED
 0x4000

	)

487 
	#IW_ENCODE_OPEN
 0x2000

	)

488 
	#IW_ENCODE_NOKEY
 0x0800

	)

489 
	#IW_ENCODE_TEMP
 0x0400

	)

492 
	#IW_POWER_ON
 0x0000

	)

493 
	#IW_POWER_TYPE
 0xF000

	)

494 
	#IW_POWER_PERIOD
 0x1000

	)

495 
	#IW_POWER_TIMEOUT
 0x2000

	)

496 
	#IW_POWER_MODE
 0x0F00

	)

497 
	#IW_POWER_UNICAST_R
 0x0100

	)

498 
	#IW_POWER_MULTICAST_R
 0x0200

	)

499 
	#IW_POWER_ALL_R
 0x0300

	)

500 
	#IW_POWER_FORCE_S
 0x0400

	)

501 
	#IW_POWER_REPEATER
 0x0800

	)

502 
	#IW_POWER_MODIFIER
 0x000F

	)

503 
	#IW_POWER_MIN
 0x0001

	)

504 
	#IW_POWER_MAX
 0x0002

	)

505 
	#IW_POWER_RELATIVE
 0x0004

	)

508 
	#IW_TXPOW_TYPE
 0x00FF

	)

509 
	#IW_TXPOW_DBM
 0x0000

	)

510 
	#IW_TXPOW_MWATT
 0x0001

	)

511 
	#IW_TXPOW_RELATIVE
 0x0002

	)

512 
	#IW_TXPOW_RANGE
 0x1000

	)

515 
	#IW_RETRY_ON
 0x0000

	)

516 
	#IW_RETRY_TYPE
 0xF000

	)

517 
	#IW_RETRY_LIMIT
 0x1000

	)

518 
	#IW_RETRY_LIFETIME
 0x2000

	)

519 
	#IW_RETRY_MODIFIER
 0x00FF

	)

520 
	#IW_RETRY_MIN
 0x0001

	)

521 
	#IW_RETRY_MAX
 0x0002

	)

522 
	#IW_RETRY_RELATIVE
 0x0004

	)

523 
	#IW_RETRY_SHORT
 0x0010

	)

524 
	#IW_RETRY_LONG
 0x0020

	)

527 
	#IW_SCAN_DEFAULT
 0x0000

	)

528 
	#IW_SCAN_ALL_ESSID
 0x0001

	)

529 
	#IW_SCAN_THIS_ESSID
 0x0002

	)

530 
	#IW_SCAN_ALL_FREQ
 0x0004

	)

531 
	#IW_SCAN_THIS_FREQ
 0x0008

	)

532 
	#IW_SCAN_ALL_MODE
 0x0010

	)

533 
	#IW_SCAN_THIS_MODE
 0x0020

	)

534 
	#IW_SCAN_ALL_RATE
 0x0040

	)

535 
	#IW_SCAN_THIS_RATE
 0x0080

	)

537 
	#IW_SCAN_TYPE_ACTIVE
 0

	)

538 
	#IW_SCAN_TYPE_PASSIVE
 1

	)

540 
	#IW_SCAN_MAX_DATA
 4096

	)

543 
	#IW_SCAN_CAPA_NONE
 0x00

	)

544 
	#IW_SCAN_CAPA_ESSID
 0x01

	)

545 
	#IW_SCAN_CAPA_BSSID
 0x02

	)

546 
	#IW_SCAN_CAPA_CHANNEL
 0x04

	)

547 
	#IW_SCAN_CAPA_MODE
 0x08

	)

548 
	#IW_SCAN_CAPA_RATE
 0x10

	)

549 
	#IW_SCAN_CAPA_TYPE
 0x20

	)

550 
	#IW_SCAN_CAPA_TIME
 0x40

	)

553 
	#IW_CUSTOM_MAX
 256

	)

556 
	#IW_GENERIC_IE_MAX
 1024

	)

559 
	#IW_MLME_DEAUTH
 0

	)

560 
	#IW_MLME_DISASSOC
 1

	)

561 
	#IW_MLME_AUTH
 2

	)

562 
	#IW_MLME_ASSOC
 3

	)

565 
	#IW_AUTH_INDEX
 0x0FFF

	)

566 
	#IW_AUTH_FLAGS
 0xF000

	)

571 
	#IW_AUTH_WPA_VERSION
 0

	)

572 
	#IW_AUTH_CIPHER_PAIRWISE
 1

	)

573 
	#IW_AUTH_CIPHER_GROUP
 2

	)

574 
	#IW_AUTH_KEY_MGMT
 3

	)

575 
	#IW_AUTH_TKIP_COUNTERMEASURES
 4

	)

576 
	#IW_AUTH_DROP_UNENCRYPTED
 5

	)

577 
	#IW_AUTH_80211_AUTH_ALG
 6

	)

578 
	#IW_AUTH_WPA_ENABLED
 7

	)

579 
	#IW_AUTH_RX_UNENCRYPTED_EAPOL
 8

	)

580 
	#IW_AUTH_ROAMING_CONTROL
 9

	)

581 
	#IW_AUTH_PRIVACY_INVOKED
 10

	)

582 
	#IW_AUTH_CIPHER_GROUP_MGMT
 11

	)

583 
	#IW_AUTH_MFP
 12

	)

586 
	#IW_AUTH_WPA_VERSION_DISABLED
 0x00000001

	)

587 
	#IW_AUTH_WPA_VERSION_WPA
 0x00000002

	)

588 
	#IW_AUTH_WPA_VERSION_WPA2
 0x00000004

	)

592 
	#IW_AUTH_CIPHER_NONE
 0x00000001

	)

593 
	#IW_AUTH_CIPHER_WEP40
 0x00000002

	)

594 
	#IW_AUTH_CIPHER_TKIP
 0x00000004

	)

595 
	#IW_AUTH_CIPHER_CCMP
 0x00000008

	)

596 
	#IW_AUTH_CIPHER_WEP104
 0x00000010

	)

597 
	#IW_AUTH_CIPHER_AES_CMAC
 0x00000020

	)

600 
	#IW_AUTH_KEY_MGMT_802_1X
 1

	)

601 
	#IW_AUTH_KEY_MGMT_PSK
 2

	)

604 
	#IW_AUTH_ALG_OPEN_SYSTEM
 0x00000001

	)

605 
	#IW_AUTH_ALG_SHARED_KEY
 0x00000002

	)

606 
	#IW_AUTH_ALG_LEAP
 0x00000004

	)

609 
	#IW_AUTH_ROAMING_ENABLE
 0

	)

610 
	#IW_AUTH_ROAMING_DISABLE
 1

	)

614 
	#IW_AUTH_MFP_DISABLED
 0

	)

615 
	#IW_AUTH_MFP_OPTIONAL
 1

	)

616 
	#IW_AUTH_MFP_REQUIRED
 2

	)

619 
	#IW_ENCODE_SEQ_MAX_SIZE
 8

	)

621 
	#IW_ENCODE_ALG_NONE
 0

	)

622 
	#IW_ENCODE_ALG_WEP
 1

	)

623 
	#IW_ENCODE_ALG_TKIP
 2

	)

624 
	#IW_ENCODE_ALG_CCMP
 3

	)

625 
	#IW_ENCODE_ALG_PMK
 4

	)

626 
	#IW_ENCODE_ALG_AES_CMAC
 5

	)

628 
	#IW_ENCODE_EXT_TX_SEQ_VALID
 0x00000001

	)

629 
	#IW_ENCODE_EXT_RX_SEQ_VALID
 0x00000002

	)

630 
	#IW_ENCODE_EXT_GROUP_KEY
 0x00000004

	)

631 
	#IW_ENCODE_EXT_SET_TX_KEY
 0x00000008

	)

634 
	#IW_MICFAILURE_KEY_ID
 0x00000003

	)

635 
	#IW_MICFAILURE_GROUP
 0x00000004

	)

636 
	#IW_MICFAILURE_PAIRWISE
 0x00000008

	)

637 
	#IW_MICFAILURE_STAKEY
 0x00000010

	)

638 
	#IW_MICFAILURE_COUNT
 0x00000060

	)

642 
	#IW_ENC_CAPA_WPA
 0x00000001

	)

643 
	#IW_ENC_CAPA_WPA2
 0x00000002

	)

644 
	#IW_ENC_CAPA_CIPHER_TKIP
 0x00000004

	)

645 
	#IW_ENC_CAPA_CIPHER_CCMP
 0x00000008

	)

646 
	#IW_ENC_CAPA_4WAY_HANDSHAKE
 0x00000010

	)

651 
	#IW_EVENT_CAPA_BASE
(
cmd
Ë((cmd >
SIOCIWFIRSTPRIV
) ? \

652 (
cmd
 - 
SIOCIWFIRSTPRIV
 + 0x60) : \

653 (
cmd
 - 
SIOCIWFIRST
))

	)

654 
	#IW_EVENT_CAPA_INDEX
(
cmd
Ë(
	`IW_EVENT_CAPA_BASE
(cmdË>> 5)

	)

655 
	#IW_EVENT_CAPA_MASK
(
cmd
Ë(1 << (
	`IW_EVENT_CAPA_BASE
(cmdË& 0x1F))

	)

658 
	#IW_EVENT_CAPA_K_0
 (
	`IW_EVENT_CAPA_MASK
(0x8B04) | \

659 
	`IW_EVENT_CAPA_MASK
(0x8B06) | \

660 
	`IW_EVENT_CAPA_MASK
(0x8B1A))

	)

661 
	#IW_EVENT_CAPA_K_1
 (
	`IW_EVENT_CAPA_MASK
(0x8B2A))

	)

663 
	#IW_EVENT_CAPA_SET
(
evít_ˇ∑
, 
cmd
Ë”vít_ˇ∑[
	`IW_EVENT_CAPA_INDEX
(cmd)] |
	`IW_EVENT_CAPA_MASK
(cmd))

	)

664 
	#IW_EVENT_CAPA_SET_KERNEL
(
evít_ˇ∑
Ë{evít_ˇ∑[0] |
IW_EVENT_CAPA_K_0
;Évít_ˇ∑[1] |
IW_EVENT_CAPA_K_1
; }

	)

673 
	siw_∑øm


675 
__s32
 
	mvÆue
;

676 
__u8
 
	mfixed
;

677 
__u8
 
	mdißbÀd
;

678 
__u16
 
	mÊags
;

685 
	siw_poöt


687 *
	mpoöãr
;

688 
__u16
 
	mÀngth
;

689 
__u16
 
	mÊags
;

701 
	siw_‰eq


703 
__s32
 
	mm
;

704 
__s16
 
	me
;

705 
__u8
 
	mi
;

706 
__u8
 
	mÊags
;

712 
	siw_quÆôy


714 
__u8
 
	mquÆ
;

716 
__u8
 
	mÀvñ
;

717 
__u8
 
	mnoi£
;

718 
__u8
 
	mupd©ed
;

728 
	siw_disˇrded


730 
__u32
 
	mnwid
;

731 
__u32
 
	mcode
;

732 
__u32
 
	m‰agmít
;

733 
__u32
 
	mªåõs
;

734 
__u32
 
	mmisc
;

741 
	siw_mis£d


743 
__u32
 
	mbóc⁄
;

749 
	siw_thr•y


751 
sockaddr
 
	maddr
;

752 
iw_quÆôy
 
	mquÆ
;

753 
iw_quÆôy
 
	mlow
;

754 
iw_quÆôy
 
	mhigh
;

768 
	siw_sˇn_ªq


770 
__u8
 
	msˇn_ty≥
;

771 
__u8
 
	messid_Àn
;

772 
__u8
 
	mnum_ch™√ls
;

774 
__u8
 
	mÊags
;

777 
sockaddr
 
	mbssid
;

786 
__u8
 
	messid
[
IW_ESSID_MAX_SIZE
];

798 
__u32
 
	mmö_ch™√l_time
;

799 
__u32
 
	mmax_ch™√l_time
;

801 
iw_‰eq
 
	mch™√l_li°
[
IW_MAX_FREQUENCIES
];

830 
	siw_ícode_ext


832 
__u32
 
	mext_Êags
;

833 
__u8
 
	mtx_£q
[
IW_ENCODE_SEQ_MAX_SIZE
];

834 
__u8
 
	mrx_£q
[
IW_ENCODE_SEQ_MAX_SIZE
];

835 
sockaddr
 
	maddr
;

838 
__u16
 
	mÆg
;

839 
__u16
 
	mkey_Àn
;

840 
__u8
 
	mkey
[0];

844 
	siw_mlme


846 
__u16
 
	mcmd
;

847 
__u16
 
	mªas⁄_code
;

848 
sockaddr
 
	maddr
;

852 
	#IW_PMKSA_ADD
 1

	)

853 
	#IW_PMKSA_REMOVE
 2

	)

854 
	#IW_PMKSA_FLUSH
 3

	)

856 
	#IW_PMKID_LEN
 16

	)

858 
	siw_pmkß


860 
__u32
 
	mcmd
;

861 
sockaddr
 
	mbssid
;

862 
__u8
 
	mpmkid
[
IW_PMKID_LEN
];

866 
	siw_mich´lmicÁûuª


868 
__u32
 
	mÊags
;

869 
sockaddr
 
	m§c_addr
;

870 
__u8
 
	mtsc
[
IW_ENCODE_SEQ_MAX_SIZE
];

874 
	#IW_PMKID_CAND_PREAUTH
 0x00000001

	)

875 
	siw_pmkid_ˇnd


877 
__u32
 
	mÊags
;

878 
__u32
 
	mödex
;

880 
sockaddr
 
	mbssid
;

887 
	siw_°©i°ics


889 
__u16
 
	m°©us
;

892 
iw_quÆôy
 
	mquÆ
;

894 
iw_disˇrded
 
	mdisˇrd
;

895 
iw_mis£d
 
	mmiss
;

909 
	uiwªq_d©a


912 
	m«me
[
IFNAMSIZ
];

916 
iw_poöt
 
	messid
;

917 
iw_∑øm
 
	mnwid
;

918 
iw_‰eq
 
	m‰eq
;

922 
iw_∑øm
 
	m£ns
;

923 
iw_∑øm
 
	mbôøã
;

924 
iw_∑øm
 
	mtxpowî
;

925 
iw_∑øm
 
	mπs
;

926 
iw_∑øm
 
	m‰ag
;

927 
__u32
 
	mmode
;

928 
iw_∑øm
 
	mªåy
;

930 
iw_poöt
 
	mícodög
;

931 
iw_∑øm
 
	mpowî
;

932 
iw_quÆôy
 
	mquÆ
;

934 
sockaddr
 
	m≠_addr
;

935 
sockaddr
 
	maddr
;

937 
iw_∑øm
 
	m∑øm
;

938 
iw_poöt
 
	md©a
;

947 
	siwªq


951 
	mi‰n_«me
[
IFNAMSIZ
];

952 } 
	mi‰_i‰n
;

955 
iwªq_d©a
 
	mu
;

968 
	siw_ønge


971 
__u32
 
	mthroughput
;

980 
__u32
 
	mmö_nwid
;

981 
__u32
 
	mmax_nwid
;

984 
__u16
 
	mﬁd_num_ch™√ls
;

985 
__u8
 
	mﬁd_num_‰equícy
;

988 
__u8
 
	msˇn_ˇ∑
;

991 
__u32
 
	mevít_ˇ∑
[6];

994 
__s32
 
	m£nsôivôy
;

1001 
iw_quÆôy
 
	mmax_quÆ
;

1011 
iw_quÆôy
 
	mavg_quÆ
;

1014 
__u8
 
	mnum_bôøãs
;

1015 
__s32
 
	mbôøã
[
IW_MAX_BITRATES
];

1018 
__s32
 
	mmö_πs
;

1019 
__s32
 
	mmax_πs
;

1022 
__s32
 
	mmö_‰ag
;

1023 
__s32
 
	mmax_‰ag
;

1026 
__s32
 
	mmö_pmp
;

1027 
__s32
 
	mmax_pmp
;

1028 
__s32
 
	mmö_pmt
;

1029 
__s32
 
	mmax_pmt
;

1030 
__u16
 
	mpmp_Êags
;

1031 
__u16
 
	mpmt_Êags
;

1032 
__u16
 
	mpm_ˇ∑
;

1035 
__u16
 
	mícodög_size
[
IW_MAX_ENCODING_SIZES
];

1036 
__u8
 
	mnum_ícodög_sizes
;

1037 
__u8
 
	mmax_ícodög_tokís
;

1039 
__u8
 
	mícodög_logö_ödex
;

1042 
__u16
 
	mtxpowî_ˇ∑
;

1043 
__u8
 
	mnum_txpowî
;

1044 
__s32
 
	mtxpowî
[
IW_MAX_TXPOWER
];

1047 
__u8
 
	mwe_vîsi⁄_compûed
;

1048 
__u8
 
	mwe_vîsi⁄_sour˚
;

1051 
__u16
 
	mªåy_ˇ∑
;

1052 
__u16
 
	mªåy_Êags
;

1053 
__u16
 
	mr_time_Êags
;

1054 
__s32
 
	mmö_ªåy
;

1055 
__s32
 
	mmax_ªåy
;

1056 
__s32
 
	mmö_r_time
;

1057 
__s32
 
	mmax_r_time
;

1060 
__u16
 
	mnum_ch™√ls
;

1061 
__u8
 
	mnum_‰equícy
;

1062 
iw_‰eq
 
	m‰eq
[
IW_MAX_FREQUENCIES
];

1066 
__u32
 
	míc_ˇ∑
;

1073 
	siw_¥iv_¨gs


1075 
__u32
 
	mcmd
;

1076 
__u16
 
	m£t_¨gs
;

1077 
__u16
 
	mgë_¨gs
;

1078 
	m«me
[
IFNAMSIZ
];

1091 
	siw_evít


1093 
__u16
 
	mÀn
;

1094 
__u16
 
	mcmd
;

1095 
iwªq_d©a
 
	mu
;

1099 
	#IW_EV_LCP_LEN
 ((
iw_evít
Ë- (
iwªq_d©a
))

	)

1101 
	#IW_EV_CHAR_LEN
 (
IW_EV_LCP_LEN
 + 
IFNAMSIZ
)

	)

1102 
	#IW_EV_UINT_LEN
 (
IW_EV_LCP_LEN
 + (
__u32
))

	)

1103 
	#IW_EV_FREQ_LEN
 (
IW_EV_LCP_LEN
 + (
iw_‰eq
))

	)

1104 
	#IW_EV_PARAM_LEN
 (
IW_EV_LCP_LEN
 + (
iw_∑øm
))

	)

1105 
	#IW_EV_ADDR_LEN
 (
IW_EV_LCP_LEN
 + (
sockaddr
))

	)

1106 
	#IW_EV_QUAL_LEN
 (
IW_EV_LCP_LEN
 + (
iw_quÆôy
))

	)

1111 
	#IW_EV_POINT_OFF
 (((*Ë&(((
iw_poöt
 *Ë
NULL
)->
Àngth
)) - \

1112 (*Ë
NULL
)

	)

1113 
	#IW_EV_POINT_LEN
 (
IW_EV_LCP_LEN
 + (
iw_poöt
) - \

1114 
IW_EV_POINT_OFF
)

	)

1118 
	#IW_EV_LCP_PK_LEN
 (4)

	)

1120 
	#IW_EV_CHAR_PK_LEN
 (
IW_EV_LCP_PK_LEN
 + 
IFNAMSIZ
)

	)

1121 
	#IW_EV_UINT_PK_LEN
 (
IW_EV_LCP_PK_LEN
 + (
__u32
))

	)

1122 
	#IW_EV_FREQ_PK_LEN
 (
IW_EV_LCP_PK_LEN
 + (
iw_‰eq
))

	)

1123 
	#IW_EV_PARAM_PK_LEN
 (
IW_EV_LCP_PK_LEN
 + (
iw_∑øm
))

	)

1124 
	#IW_EV_ADDR_PK_LEN
 (
IW_EV_LCP_PK_LEN
 + (
sockaddr
))

	)

1125 
	#IW_EV_QUAL_PK_LEN
 (
IW_EV_LCP_PK_LEN
 + (
iw_quÆôy
))

	)

1126 
	#IW_EV_POINT_PK_LEN
 (
IW_EV_LCP_PK_LEN
 + 4)

	)

	@/usr/include/locale.h

23 #i‚def 
_LOCALE_H


24 
	#_LOCALE_H
 1

	)

26 
	~<„©uªs.h
>

28 
	#__√ed_NULL


	)

29 
	~<°ddef.h
>

30 
	~<bôs/loˇÀ.h
>

32 
	g__BEGIN_DECLS


36 
	#LC_CTYPE
 
__LC_CTYPE


	)

37 
	#LC_NUMERIC
 
__LC_NUMERIC


	)

38 
	#LC_TIME
 
__LC_TIME


	)

39 
	#LC_COLLATE
 
__LC_COLLATE


	)

40 
	#LC_MONETARY
 
__LC_MONETARY


	)

41 
	#LC_MESSAGES
 
__LC_MESSAGES


	)

42 
	#LC_ALL
 
__LC_ALL


	)

43 
	#LC_PAPER
 
__LC_PAPER


	)

44 
	#LC_NAME
 
__LC_NAME


	)

45 
	#LC_ADDRESS
 
__LC_ADDRESS


	)

46 
	#LC_TELEPHONE
 
__LC_TELEPHONE


	)

47 
	#LC_MEASUREMENT
 
__LC_MEASUREMENT


	)

48 
	#LC_IDENTIFICATION
 
__LC_IDENTIFICATION


	)

51 
__BEGIN_NAMESPACE_STD


54 
	slc⁄v


58 *
	mdecimÆ_poöt
;

59 *
	mthoußnds_£p
;

65 *
	mgroupög
;

71 *
	möt_cuº_symbﬁ
;

72 *
	mcuºícy_symbﬁ
;

73 *
	mm⁄_decimÆ_poöt
;

74 *
	mm⁄_thoußnds_£p
;

75 *
	mm⁄_groupög
;

76 *
	mposôive_sign
;

77 *
	m√g©ive_sign
;

78 
	möt_‰ac_digôs
;

79 
	m‰ac_digôs
;

81 
	mp_cs_¥e˚des
;

83 
	mp_£p_by_•a˚
;

85 
	mn_cs_¥e˚des
;

87 
	mn_£p_by_•a˚
;

94 
	mp_sign_po¢
;

95 
	mn_sign_po¢
;

96 #ifde‡
__USE_ISOC99


98 
	möt_p_cs_¥e˚des
;

100 
	möt_p_£p_by_•a˚
;

102 
	möt_n_cs_¥e˚des
;

104 
	möt_n_£p_by_•a˚
;

111 
	möt_p_sign_po¢
;

112 
	möt_n_sign_po¢
;

114 
	m__öt_p_cs_¥e˚des
;

115 
	m__öt_p_£p_by_•a˚
;

116 
	m__öt_n_cs_¥e˚des
;

117 
	m__öt_n_£p_by_•a˚
;

118 
	m__öt_p_sign_po¢
;

119 
	m__öt_n_sign_po¢
;

125 *
	$£éoˇÀ
 (
__ˇãg‹y
, 
__c⁄°
 *
__loˇÀ
Ë
__THROW
;

128 
lc⁄v
 *
	$loˇÀc⁄v
 (Ë
__THROW
;

130 
__END_NAMESPACE_STD


133 #ifdef 
__USE_XOPEN2K8


146 
	~<xloˇÀ.h
>

152 
__loˇÀ_t
 
	$√wloˇÀ
 (
__ˇãg‹y_mask
, 
__c⁄°
 *
__loˇÀ
,

153 
__loˇÀ_t
 
__ba£
Ë
__THROW
;

159 
	#LC_CTYPE_MASK
 (1 << 
__LC_CTYPE
)

	)

160 
	#LC_NUMERIC_MASK
 (1 << 
__LC_NUMERIC
)

	)

161 
	#LC_TIME_MASK
 (1 << 
__LC_TIME
)

	)

162 
	#LC_COLLATE_MASK
 (1 << 
__LC_COLLATE
)

	)

163 
	#LC_MONETARY_MASK
 (1 << 
__LC_MONETARY
)

	)

164 
	#LC_MESSAGES_MASK
 (1 << 
__LC_MESSAGES
)

	)

165 
	#LC_PAPER_MASK
 (1 << 
__LC_PAPER
)

	)

166 
	#LC_NAME_MASK
 (1 << 
__LC_NAME
)

	)

167 
	#LC_ADDRESS_MASK
 (1 << 
__LC_ADDRESS
)

	)

168 
	#LC_TELEPHONE_MASK
 (1 << 
__LC_TELEPHONE
)

	)

169 
	#LC_MEASUREMENT_MASK
 (1 << 
__LC_MEASUREMENT
)

	)

170 
	#LC_IDENTIFICATION_MASK
 (1 << 
__LC_IDENTIFICATION
)

	)

171 
	#LC_ALL_MASK
 (
LC_CTYPE_MASK
 \

172 | 
LC_NUMERIC_MASK
 \

173 | 
LC_TIME_MASK
 \

174 | 
LC_COLLATE_MASK
 \

175 | 
LC_MONETARY_MASK
 \

176 | 
LC_MESSAGES_MASK
 \

177 | 
LC_PAPER_MASK
 \

178 | 
LC_NAME_MASK
 \

179 | 
LC_ADDRESS_MASK
 \

180 | 
LC_TELEPHONE_MASK
 \

181 | 
LC_MEASUREMENT_MASK
 \

182 | 
LC_IDENTIFICATION_MASK
 \

183 )

	)

187 
__loˇÀ_t
 
	$du∂oˇÀ
 (
__loˇÀ_t
 
__d©a£t
Ë
__THROW
;

191 
	$‰ìloˇÀ
 (
__loˇÀ_t
 
__d©a£t
Ë
__THROW
;

198 
__loˇÀ_t
 
	$u£loˇÀ
 (
__loˇÀ_t
 
__d©a£t
Ë
__THROW
;

202 
	#LC_GLOBAL_LOCALE
 ((
__loˇÀ_t
Ë-1L)

	)

206 
__END_DECLS


	@/usr/include/malloc.h

21 #i‚de‡
_MALLOC_H


22 
	#_MALLOC_H
 1

	)

24 
	~<„©uªs.h
>

25 
	~<°ddef.h
>

26 
	~<°dio.h
>

27 
	#__mÆloc_±r_t
 *

	)

30 
	#__mÆloc_size_t
 
size_t


	)

31 
	#__mÆloc_±rdiff_t
 
±rdiff_t


	)

33 #ifde‡
__GNUC__


35 
	#__MALLOC_P
(
¨gs
Ë¨g†
__THROW


	)

38 
	#__MALLOC_PMT
(
¨gs
Ë
	)
args

42 
	#__MALLOC_P
(
¨gs
Ë
	)
args

43 
	#__MALLOC_PMT
(
¨gs
Ë
	)
args

48 
__BEGIN_DECLS


51 *
mÆloc
 
__MALLOC_P
 ((
size_t
 
__size
)Ë
__©åibuã_mÆloc__
 
__wur
;

54 *
ˇŒoc
 
__MALLOC_P
 ((
size_t
 
__nmemb
, size_à
__size
))

55 
__©åibuã_mÆloc__
 
__wur
;

62 *
ªÆloc
 
__MALLOC_P
 ((*
__±r
, 
size_t
 
__size
))

63 
__©åibuã_w¨n_unu£d_ªsu…__
;

66 
‰ì
 
__MALLOC_P
 ((*
__±r
));

69 
c‰ì
 
__MALLOC_P
 ((*
__±r
));

72 *
memÆign
 
__MALLOC_P
 ((
size_t
 
__Æignmít
, size_à
__size
))

73 
__©åibuã_mÆloc__
 
__wur
;

76 *
vÆloc
 
__MALLOC_P
 ((
size_t
 
__size
))

77 
__©åibuã_mÆloc__
 
__wur
;

81 * 
pvÆloc
 
__MALLOC_P
 ((
size_t
 
__size
))

82 
__©åibuã_mÆloc__
 
__wur
;

86 *(*
__m‹ec‹e
Ë
__MALLOC_PMT
 ((
±rdiff_t
 
__size
));

89 *
__deÁu…_m‹ec‹e
 
__MALLOC_P
 ((
±rdiff_t
 
__size
))

90 
__©åibuã_mÆloc__
;

94 
	smÆlöfo
 {

95 
	m¨ía
;

96 
	m‹dblks
;

97 
	msmblks
;

98 
	mhblks
;

99 
	mhblkhd
;

100 
	musmblks
;

101 
	mfsmblks
;

102 
	mu‹dblks
;

103 
	mf‹dblks
;

104 
	mkìpco°
;

108 
mÆlöfo
 mÆlöfÿ
__MALLOC_P
 (());

111 #i‚de‡
M_MXFAST


112 
	#M_MXFAST
 1

	)

114 #i‚de‡
M_NLBLKS


115 
	#M_NLBLKS
 2

	)

117 #i‚de‡
M_GRAIN


118 
	#M_GRAIN
 3

	)

120 #i‚de‡
M_KEEP


121 
	#M_KEEP
 4

	)

125 
	#M_TRIM_THRESHOLD
 -1

	)

126 
	#M_TOP_PAD
 -2

	)

127 
	#M_MMAP_THRESHOLD
 -3

	)

128 
	#M_MMAP_MAX
 -4

	)

129 
	#M_CHECK_ACTION
 -5

	)

130 
	#M_PERTURB
 -6

	)

131 
	#M_ARENA_TEST
 -7

	)

132 
	#M_ARENA_MAX
 -8

	)

135 
mÆl›t
 
__MALLOC_P
 ((
__∑øm
, 
__vÆ
));

139 
mÆloc_åim
 
__MALLOC_P
 ((
size_t
 
__∑d
));

143 
size_t
 
mÆloc_ußbÀ_size
 
__MALLOC_P
 ((*
__±r
));

146 
mÆloc_°©s
 
__MALLOC_P
 (());

149 
mÆloc_öfo
 (
__›ti⁄s
, 
FILE
 *
__Â
);

152 *
mÆloc_gë_°©e
 
__MALLOC_P
 (());

156 
mÆloc_£t_°©e
 
__MALLOC_P
 ((*
__±r
));

161 (*
__mÆloc_öôülize_hook
Ë
	`__MALLOC_PMT
 (());

163 (*
__‰ì_hook
Ë
	`__MALLOC_PMT
 ((*
__±r
,

164 
__c⁄°
 
__mÆloc_±r_t
));

165 *(*
__mÆloc_hook
Ë
	`__MALLOC_PMT
 ((
size_t
 
__size
,

166 
__c⁄°
 
__mÆloc_±r_t
));

167 *(*
__ªÆloc_hook
Ë
	`__MALLOC_PMT
 ((*
__±r
, 
size_t
 
__size
,

168 
__c⁄°
 
__mÆloc_±r_t
));

169 *(*
__memÆign_hook
Ë
	`__MALLOC_PMT
 ((
size_t
 
__Æignmít
,

170 
size_t
 
__size
,

171 
__c⁄°
 
__mÆloc_±r_t
));

172 (*
__a·î_m‹ec‹e_hook
Ë
	`__MALLOC_PMT
 (());

175 
__mÆloc_check_öô
 
	`__MALLOC_P
 (());

178 
__END_DECLS


	@/usr/include/math.h

25 #i‚def 
_MATH_H


26 
	#_MATH_H
 1

	)

28 
	~<„©uªs.h
>

30 
	g__BEGIN_DECLS


34 
	~<bôs/huge_vÆ.h
>

35 #ifde‡
__USE_ISOC99


36 
	~<bôs/huge_vÆf.h
>

37 
	~<bôs/huge_vÆl.h
>

40 
	~<bôs/öf.h
>

43 
	~<bôs/«n.h
>

47 
	~<bôs/m©hdef.h
>

54 
	#__MATHCALL
(
fun˘i⁄
,
suffix
, 
¨gs
) \

55 
	`__MATHDECL
 (
_MdoubÀ_
,
fun˘i⁄
,
suffix
, 
¨gs
)

	)

56 
	#__MATHDECL
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
) \

57 
	`__MATHDECL_1
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
); \

58 
	`__MATHDECL_1
(
ty≥
, 
	`__CONCAT
(
__
,
fun˘i⁄
),
suffix
, 
¨gs
)

	)

59 
	#__MATHCALLX
(
fun˘i⁄
,
suffix
, 
¨gs
, 
©åib
) \

60 
	`__MATHDECLX
 (
_MdoubÀ_
,
fun˘i⁄
,
suffix
, 
¨gs
, 
©åib
)

	)

61 
	#__MATHDECLX
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
, 
©åib
) \

62 
	`__MATHDECL_1
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
Ë
	`__©åibuã__
 (
©åib
); \

63 
	`__MATHDECL_1
(
ty≥
, 
	`__CONCAT
(
__
,
fun˘i⁄
),
suffix
, 
¨gs
Ë
	`__©åibuã__
 (
©åib
)

	)

64 
	#__MATHDECL_1
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
) \

65 
ty≥
 
	`__MATH_PRECNAME
(
fun˘i⁄
,
suffix
Ë
¨gs
 
__THROW


	)

67 
	#_MdoubÀ_
 

	)

68 
	#__MATH_PRECNAME
(
«me
,
r
Ë
	`__CONCAT
“ame,r)

	)

69 
	#_MdoubÀ_BEGIN_NAMESPACE
 
__BEGIN_NAMESPACE_STD


	)

70 
	#_MdoubÀ_END_NAMESPACE
 
__END_NAMESPACE_STD


	)

71 
	~<bôs/m©hˇŒs.h
>

72 #unde‡
_MdoubÀ_


73 #unde‡
_MdoubÀ_BEGIN_NAMESPACE


74 #unde‡
_MdoubÀ_END_NAMESPACE


75 #unde‡
__MATH_PRECNAME


77 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_ISOC99


83 #i‚de‡
_MÊﬂt_


84 
	#_MÊﬂt_
 

	)

86 
	#_MdoubÀ_
 
_MÊﬂt_


	)

87 #ifde‡
__STDC__


88 
	#__MATH_PRECNAME
(
«me
,
r
Ë«me##
f
##
	)
r

90 
	#__MATH_PRECNAME
(
«me
,
r
Ë«mê
f
 
	)
r

92 
	#_MdoubÀ_BEGIN_NAMESPACE
 
__BEGIN_NAMESPACE_C99


	)

93 
	#_MdoubÀ_END_NAMESPACE
 
__END_NAMESPACE_C99


	)

94 
	~<bôs/m©hˇŒs.h
>

95 #unde‡
_MdoubÀ_


96 #unde‡
_MdoubÀ_BEGIN_NAMESPACE


97 #unde‡
_MdoubÀ_END_NAMESPACE


98 #unde‡
__MATH_PRECNAME


100 #i‡(
__STDC__
 - 0 || 
__GNUC__
 - 0) \

101 && (!
deföed
 
__NO_LONG_DOUBLE_MATH
 \

102 || 
deföed
 
__LDBL_COMPAT
 \

103 || !
deföed
 
_LIBC
)

104 #ifde‡
__LDBL_COMPAT


106 #ifde‡
__USE_ISOC99


107 
	$__∆dbl_√xâow¨df
 (
__x
, 
__y
)

108 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

109 #ifde‡
__REDIRECT_NTH


110 
	`__REDIRECT_NTH
 (
√xâow¨df
, (
__x
, 
__y
),

111 
__∆dbl_√xâow¨df
)

112 
	`__©åibuã__
 ((
__c⁄°__
));

113 
	`__REDIRECT_NTH
 (
√xâow¨d
, (
__x
, 
__y
),

114 
√xè·î
Ë
	`__©åibuã__
 ((
__c⁄°__
));

115 
	`__REDIRECT_NTH
 (
√xâow¨dl
,

116 (
__x
, 
__y
),

117 
√xè·î
Ë
	`__©åibuã__
 ((
__c⁄°__
));

122 #i‡
deföed
 
__LDBL_COMPAT
 || deföed 
__NO_LONG_DOUBLE_MATH


124 #unde‡
__MATHDECL_1


125 
	#__MATHDECL_2
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
, 
Æüs
) \

126 
ty≥
 
	`__REDIRECT_NTH
(
	`__MATH_PRECNAME
(
fun˘i⁄
,
suffix
), \

127 
¨gs
, 
Æüs
)

	)

128 
	#__MATHDECL_1
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
) \

129 
	`__MATHDECL_2
(
ty≥
, 
fun˘i⁄
,
suffix
, 
¨gs
, 
	`__CONCAT
(fun˘i⁄,suffix))

	)

134 #i‚de‡
_Ml⁄g_doubÀ_


135 
	#_Ml⁄g_doubÀ_
 

	)

137 
	#_MdoubÀ_
 
_Ml⁄g_doubÀ_


	)

138 #ifde‡
__STDC__


139 
	#__MATH_PRECNAME
(
«me
,
r
Ë«me##
l
##
	)
r

141 
	#__MATH_PRECNAME
(
«me
,
r
Ë«mê
l
 
	)
r

143 
	#_MdoubÀ_BEGIN_NAMESPACE
 
__BEGIN_NAMESPACE_C99


	)

144 
	#_MdoubÀ_END_NAMESPACE
 
__END_NAMESPACE_C99


	)

145 
	~<bôs/m©hˇŒs.h
>

146 #unde‡
_MdoubÀ_


147 #unde‡
_MdoubÀ_BEGIN_NAMESPACE


148 #unde‡
_MdoubÀ_END_NAMESPACE


149 #unde‡
__MATH_PRECNAME


154 #unde‡
__MATHDECL_1


155 #unde‡
__MATHDECL


156 #unde‡
__MATHCALL


159 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


161 
signgam
;

166 #ifde‡
__USE_ISOC99


204 
FP_NAN
,

205 
	#FP_NAN
 
FP_NAN


	)

206 
FP_INFINITE
,

207 
	#FP_INFINITE
 
FP_INFINITE


	)

208 
FP_ZERO
,

209 
	#FP_ZERO
 
FP_ZERO


	)

210 
FP_SUBNORMAL
,

211 
	#FP_SUBNORMAL
 
FP_SUBNORMAL


	)

212 
FP_NORMAL


213 
	#FP_NORMAL
 
FP_NORMAL


	)

217 #ifde‡
__NO_LONG_DOUBLE_MATH


218 
	#Â˛assify
(
x
) \

219 ( (
x
Ë= (Ë? 
	`__Â˛assifyf
 (xË: 
	`__Â˛assify
 (x))

	)

221 
	#Â˛assify
(
x
) \

222 ( (
x
) ==  () \

223 ? 
	`__Â˛assifyf
 (
x
) \

224 :  (
x
) ==  () \

225 ? 
	`__Â˛assify
 (
x
Ë: 
	`__Â˛assifyl
 (x))

	)

229 #ifde‡
__NO_LONG_DOUBLE_MATH


230 
	#signbô
(
x
) \

231 ( (
x
Ë= (Ë? 
	`__signbôf
 (xË: 
	`__signbô
 (x))

	)

233 
	#signbô
(
x
) \

234 ( (
x
) ==  () \

235 ? 
	`__signbôf
 (
x
) \

236 :  (
x
) ==  () \

237 ? 
	`__signbô
 (
x
Ë: 
	`__signbôl
 (x))

	)

241 #ifde‡
__NO_LONG_DOUBLE_MATH


242 
	#isföôe
(
x
) \

243 ( (
x
Ë= (Ë? 
	`__föôef
 (xË: 
	`__föôe
 (x))

	)

245 
	#isföôe
(
x
) \

246 ( (
x
) ==  () \

247 ? 
	`__föôef
 (
x
) \

248 :  (
x
) ==  () \

249 ? 
	`__föôe
 (
x
Ë: 
	`__föôñ
 (x))

	)

253 
	#i¢‹mÆ
(
x
Ë(
	`Â˛assify
 (xË=
FP_NORMAL
)

	)

257 #ifde‡
__NO_LONG_DOUBLE_MATH


258 
	#i¢™
(
x
) \

259 ( (
x
Ë= (Ë? 
	`__i¢™f
 (xË: 
	`__i¢™
 (x))

	)

261 
	#i¢™
(
x
) \

262 ( (
x
) ==  () \

263 ? 
	`__i¢™f
 (
x
) \

264 :  (
x
) ==  () \

265 ? 
	`__i¢™
 (
x
Ë: 
	`__i¢™l
 (x))

	)

269 #ifde‡
__NO_LONG_DOUBLE_MATH


270 
	#isöf
(
x
) \

271 ( (
x
Ë= (Ë? 
	`__isöff
 (xË: 
	`__isöf
 (x))

	)

273 
	#isöf
(
x
) \

274 ( (
x
) ==  () \

275 ? 
	`__isöff
 (
x
) \

276 :  (
x
) ==  () \

277 ? 
	`__isöf
 (
x
Ë: 
	`__isöÊ
 (x))

	)

281 
	#MATH_ERRNO
 1

	)

282 
	#MATH_ERREXCEPT
 2

	)

287 #i‚de‡
__FAST_MATH__


288 
	#m©h_îrh™dlög
 (
MATH_ERRNO
 | 
MATH_ERREXCEPT
)

	)

293 #ifdef 
__USE_MISC


297 
_IEEE_
 = -1,

298 
_SVID_
,

299 
_XOPEN_
,

300 
_POSIX_
,

301 
_ISOC_


302 } 
	t_LIB_VERSION_TYPE
;

307 
_LIB_VERSION_TYPE
 
_LIB_VERSION
;

311 #ifde‡
__USE_SVID


317 #ifde‡
__˝lu•lus


318 
__ex˚±i⁄


320 
ex˚±i⁄


323 
ty≥
;

324 *
«me
;

325 
¨g1
;

326 
¨g2
;

327 
ªtvÆ
;

328 
	}
};

330 #ifde‡
__˝lu•lus


331 
	$m©hîr
 (
__ex˚±i⁄
 *
__exc
Ë
	`throw
 ();

333 
	`m©hîr
 (
ex˚±i⁄
 *
__exc
);

336 
	#X_TLOSS
 1.41484755040568800000e+16

	)

339 
	#DOMAIN
 1

	)

340 
	#SING
 2

	)

341 
	#OVERFLOW
 3

	)

342 
	#UNDERFLOW
 4

	)

343 
	#TLOSS
 5

	)

344 
	#PLOSS
 6

	)

347 
	#HUGE
 3.40282347e+38F

	)

351 #ifde‡
__USE_XOPEN


353 
	#MAXFLOAT
 3.40282347e+38F

	)

360 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN


361 
	#M_E
 2.7182818284590452354

	)

362 
	#M_LOG2E
 1.4426950408889634074

	)

363 
	#M_LOG10E
 0.43429448190325182765

	)

364 
	#M_LN2
 0.69314718055994530942

	)

365 
	#M_LN10
 2.30258509299404568402

	)

366 
	#M_PI
 3.14159265358979323846

	)

367 
	#M_PI_2
 1.57079632679489661923

	)

368 
	#M_PI_4
 0.78539816339744830962

	)

369 
	#M_1_PI
 0.31830988618379067154

	)

370 
	#M_2_PI
 0.63661977236758134308

	)

371 
	#M_2_SQRTPI
 1.12837916709551257390

	)

372 
	#M_SQRT2
 1.41421356237309504880

	)

373 
	#M_SQRT1_2
 0.70710678118654752440

	)

379 #ifde‡
__USE_GNU


380 
	#M_El
 2.7182818284590452353602874713526625L

	)

381 
	#M_LOG2El
 1.4426950408889634073599246810018921L

	)

382 
	#M_LOG10El
 0.4342944819032518276511289189166051L

	)

383 
	#M_LN2l
 0.6931471805599453094172321214581766L

	)

384 
	#M_LN10l
 2.3025850929940456840179914546843642L

	)

385 
	#M_PIl
 3.1415926535897932384626433832795029L

	)

386 
	#M_PI_2l
 1.5707963267948966192313216916397514L

	)

387 
	#M_PI_4l
 0.7853981633974483096156608458198757L

	)

388 
	#M_1_PIl
 0.3183098861837906715377675267450287L

	)

389 
	#M_2_PIl
 0.6366197723675813430755350534900574L

	)

390 
	#M_2_SQRTPIl
 1.1283791670955125738961589031215452L

	)

391 
	#M_SQRT2l
 1.4142135623730950488016887242096981L

	)

392 
	#M_SQRT1_2l
 0.7071067811865475244008443621048490L

	)

399 #i‡
deföed
 
__STRICT_ANSI__
 && !deföed 
__NO_MATH_INLINES


400 
	#__NO_MATH_INLINES
 1

	)

403 #i‡
deföed
 
__USE_ISOC99
 && 
	`__GNUC_PREREQ
(2,97)

410 
	#isgª©î
(
x
, 
y
Ë
	`__buûtö_isgª©î
(x, y)

	)

411 
	#isgª©îequÆ
(
x
, 
y
Ë
	`__buûtö_isgª©îequÆ
(x, y)

	)

412 
	#i¶ess
(
x
, 
y
Ë
	`__buûtö_i¶ess
(x, y)

	)

413 
	#i¶es£quÆ
(
x
, 
y
Ë
	`__buûtö_i¶es£quÆ
(x, y)

	)

414 
	#i¶essgª©î
(
x
, 
y
Ë
	`__buûtö_i¶essgª©î
(x, y)

	)

415 
	#isun‹dîed
(
u
, 
v
Ë
	`__buûtö_isun‹dîed
(u, v)

	)

419 #ifde‡
__USE_EXTERN_INLINES


420 
	~<bôs/m©hölöe.h
>

423 #ifde‡
__USE_ISOC99


427 #i‚de‡
isgª©î


428 
	#isgª©î
(
x
, 
y
) \

429 (
__exãnsi⁄__
 \

430 ({ 
	`__ty≥of__
(
x
Ë
__x
 = (x); __ty≥of__(
y
Ë
__y
 = (y); \

431 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& __x > __y; 
	}
}))

	)

435 #i‚de‡
isgª©îequÆ


436 
	#isgª©îequÆ
(
x
, 
y
) \

437 (
__exãnsi⁄__
 \

438 ({ 
	`__ty≥of__
(
x
Ë
__x
 = (x); __ty≥of__(
y
Ë
__y
 = (y); \

439 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& __x >__y; }))

	)

443 #i‚de‡
i¶ess


444 
	#i¶ess
(
x
, 
y
) \

445 (
__exãnsi⁄__
 \

446 ({ 
	`__ty≥of__
(
x
Ë
__x
 = (x); __ty≥of__(
y
Ë
__y
 = (y); \

447 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& __x < __y; }))

	)

451 #i‚de‡
i¶es£quÆ


452 
	#i¶es£quÆ
(
x
, 
y
) \

453 (
__exãnsi⁄__
 \

454 ({ 
	`__ty≥of__
(
x
Ë
__x
 = (x); __ty≥of__(
y
Ë
__y
 = (y); \

455 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& __x <__y; }))

	)

459 #i‚de‡
i¶essgª©î


460 
	#i¶essgª©î
(
x
, 
y
) \

461 (
__exãnsi⁄__
 \

462 ({ 
	`__ty≥of__
(
x
Ë
__x
 = (x); __ty≥of__(
y
Ë
__y
 = (y); \

463 !
	`isun‹dîed
 (
__x
, 
__y
Ë&& (__x < __y || __y < __x); }))

	)

467 #i‚de‡
isun‹dîed


468 
	#isun‹dîed
(
u
, 
v
) \

469 (
__exãnsi⁄__
 \

470 ({ 
	`__ty≥of__
(
u
Ë
__u
 = (u); __ty≥of__(
v
Ë
__v
 = (v); \

471 
	`Â˛assify
 (
__u
Ë=
FP_NAN
 || fp˛assify (
__v
Ë=FP_NAN; }))

	)

476 
	g__END_DECLS


	@/usr/include/net/ethernet.h

22 #i‚de‡
__NET_ETHERNET_H


23 
	#__NET_ETHERNET_H
 1

	)

25 
	~<sys/cdefs.h
>

26 
	~<sys/ty≥s.h
>

27 
	~<löux/if_ëhî.h
>

29 
__BEGIN_DECLS


33 
	sëhî_addr


35 
u_öt8_t
 
	mëhî_addr_o˘ë
[
ETH_ALEN
];

36 } 
__©åibuã__
 ((
__∑cked__
));

39 
	sëhî_hódî


41 
u_öt8_t
 
	mëhî_dho°
[
ETH_ALEN
];

42 
u_öt8_t
 
	mëhî_sho°
[
ETH_ALEN
];

43 
u_öt16_t
 
	mëhî_ty≥
;

44 } 
__©åibuã__
 ((
__∑cked__
));

47 
	#ETHERTYPE_PUP
 0x0200

	)

48 
	#ETHERTYPE_SPRITE
 0x0500

	)

49 
	#ETHERTYPE_IP
 0x0800

	)

50 
	#ETHERTYPE_ARP
 0x0806

	)

51 
	#ETHERTYPE_REVARP
 0x8035

	)

52 
	#ETHERTYPE_AT
 0x809B

	)

53 
	#ETHERTYPE_AARP
 0x80F3

	)

54 
	#ETHERTYPE_VLAN
 0x8100

	)

55 
	#ETHERTYPE_IPX
 0x8137

	)

56 
	#ETHERTYPE_IPV6
 0x86dd

	)

57 
	#ETHERTYPE_LOOPBACK
 0x9000

	)

60 
	#ETHER_ADDR_LEN
 
ETH_ALEN


	)

61 
	#ETHER_TYPE_LEN
 2

	)

62 
	#ETHER_CRC_LEN
 4

	)

63 
	#ETHER_HDR_LEN
 
ETH_HLEN


	)

64 
	#ETHER_MIN_LEN
 (
ETH_ZLEN
 + 
ETHER_CRC_LEN
Ë

	)

65 
	#ETHER_MAX_LEN
 (
ETH_FRAME_LEN
 + 
ETHER_CRC_LEN
Ë

	)

68 
	#ETHER_IS_VALID_LEN
(
foo
) \

69 ((
foo
Ë>
ETHER_MIN_LEN
 && (fooË<
ETHER_MAX_LEN
)

	)

76 
	#ETHERTYPE_TRAIL
 0x1000

	)

77 
	#ETHERTYPE_NTRAILER
 16

	)

79 
	#ETHERMTU
 
ETH_DATA_LEN


	)

80 
	#ETHERMIN
 (
ETHER_MIN_LEN
 - 
ETHER_HDR_LEN
 - 
ETHER_CRC_LEN
)

	)

82 
	g__END_DECLS


	@/usr/include/net/if.h

20 #i‚de‡
_NET_IF_H


21 
	#_NET_IF_H
 1

	)

23 
	~<„©uªs.h
>

25 #ifde‡
__USE_MISC


26 
	~<sys/ty≥s.h
>

27 
	~<sys/sockë.h
>

32 
	#IF_NAMESIZE
 16

	)

34 
	sif_«meödex


36 
	mif_ödex
;

37 *
	mif_«me
;

41 #ifde‡
__USE_MISC


45 
	mIFF_UP
 = 0x1,

46 
	#IFF_UP
 
IFF_UP


	)

47 
	mIFF_BROADCAST
 = 0x2,

48 
	#IFF_BROADCAST
 
IFF_BROADCAST


	)

49 
	mIFF_DEBUG
 = 0x4,

50 
	#IFF_DEBUG
 
IFF_DEBUG


	)

51 
	mIFF_LOOPBACK
 = 0x8,

52 
	#IFF_LOOPBACK
 
IFF_LOOPBACK


	)

53 
	mIFF_POINTOPOINT
 = 0x10,

54 
	#IFF_POINTOPOINT
 
IFF_POINTOPOINT


	)

55 
	mIFF_NOTRAILERS
 = 0x20,

56 
	#IFF_NOTRAILERS
 
IFF_NOTRAILERS


	)

57 
	mIFF_RUNNING
 = 0x40,

58 
	#IFF_RUNNING
 
IFF_RUNNING


	)

59 
	mIFF_NOARP
 = 0x80,

60 
	#IFF_NOARP
 
IFF_NOARP


	)

61 
	mIFF_PROMISC
 = 0x100,

62 
	#IFF_PROMISC
 
IFF_PROMISC


	)

65 
	mIFF_ALLMULTI
 = 0x200,

66 
	#IFF_ALLMULTI
 
IFF_ALLMULTI


	)

68 
	mIFF_MASTER
 = 0x400,

69 
	#IFF_MASTER
 
IFF_MASTER


	)

70 
	mIFF_SLAVE
 = 0x800,

71 
	#IFF_SLAVE
 
IFF_SLAVE


	)

73 
	mIFF_MULTICAST
 = 0x1000,

74 
	#IFF_MULTICAST
 
IFF_MULTICAST


	)

76 
	mIFF_PORTSEL
 = 0x2000,

77 
	#IFF_PORTSEL
 
IFF_PORTSEL


	)

78 
	mIFF_AUTOMEDIA
 = 0x4000,

79 
	#IFF_AUTOMEDIA
 
IFF_AUTOMEDIA


	)

80 
	mIFF_DYNAMIC
 = 0x8000

81 
	#IFF_DYNAMIC
 
IFF_DYNAMIC


	)

89 
	siÁddr


91 
sockaddr
 
	miÁ_addr
;

94 
sockaddr
 
	mifu_brﬂdaddr
;

95 
sockaddr
 
	mifu_d°addr
;

96 } 
	miÁ_ifu
;

97 
iÁ˚
 *
	miÁ_iÂ
;

98 
iÁddr
 *
	miÁ_√xt
;

101 
	#iÁ_brﬂdaddr
 
iÁ_ifu
.
ifu_brﬂdaddr


	)

102 
	#iÁ_d°addr
 
iÁ_ifu
.
ifu_d°addr


	)

112 
	sifm≠


114 
	mmem_°¨t
;

115 
	mmem_íd
;

116 
	mba£_addr
;

117 
	múq
;

118 
	mdma
;

119 
	mp‹t
;

127 
	si‰eq


129 
	#IFHWADDRLEN
 6

	)

130 
	#IFNAMSIZ
 
IF_NAMESIZE


	)

133 
	mi‰n_«me
[
IFNAMSIZ
];

134 } 
	mi‰_i‰n
;

138 
sockaddr
 
	mi‰u_addr
;

139 
sockaddr
 
	mi‰u_d°addr
;

140 
sockaddr
 
	mi‰u_brﬂdaddr
;

141 
sockaddr
 
	mi‰u_√tmask
;

142 
sockaddr
 
	mi‰u_hwaddr
;

143 
	mi‰u_Êags
;

144 
	mi‰u_ivÆue
;

145 
	mi‰u_mtu
;

146 
ifm≠
 
	mi‰u_m≠
;

147 
	mi‰u_¶ave
[
IFNAMSIZ
];

148 
	mi‰u_√w«me
[
IFNAMSIZ
];

149 
__ˇddr_t
 
	mi‰u_d©a
;

150 } 
	mi‰_i‰u
;

152 
	#i‰_«me
 
i‰_i‰n
.
i‰n_«me


	)

153 
	#i‰_hwaddr
 
i‰_i‰u
.
i‰u_hwaddr


	)

154 
	#i‰_addr
 
i‰_i‰u
.
i‰u_addr


	)

155 
	#i‰_d°addr
 
i‰_i‰u
.
i‰u_d°addr


	)

156 
	#i‰_brﬂdaddr
 
i‰_i‰u
.
i‰u_brﬂdaddr


	)

157 
	#i‰_√tmask
 
i‰_i‰u
.
i‰u_√tmask


	)

158 
	#i‰_Êags
 
i‰_i‰u
.
i‰u_Êags


	)

159 
	#i‰_mëric
 
i‰_i‰u
.
i‰u_ivÆue


	)

160 
	#i‰_mtu
 
i‰_i‰u
.
i‰u_mtu


	)

161 
	#i‰_m≠
 
i‰_i‰u
.
i‰u_m≠


	)

162 
	#i‰_¶ave
 
i‰_i‰u
.
i‰u_¶ave


	)

163 
	#i‰_d©a
 
i‰_i‰u
.
i‰u_d©a


	)

164 
	#i‰_ifödex
 
i‰_i‰u
.
i‰u_ivÆue


	)

165 
	#i‰_b™dwidth
 
i‰_i‰u
.
i‰u_ivÆue


	)

166 
	#i‰_qÀn
 
i‰_i‰u
.
i‰u_ivÆue


	)

167 
	#i‰_√w«me
 
i‰_i‰u
.
i‰u_√w«me


	)

168 
	#_IOT_i‰eq
 
	`_IOT
(
	`_IOTS
(),
IFNAMSIZ
,_IOTS(),16,0,0)

	)

169 
	#_IOT_i‰eq_sh‹t
 
	`_IOT
(
	`_IOTS
(),
IFNAMSIZ
,_IOTS(),1,0,0)

	)

170 
	#_IOT_i‰eq_öt
 
	`_IOT
(
	`_IOTS
(),
IFNAMSIZ
,_IOTS(),1,0,0)

	)

177 
	sifc⁄f


179 
	mifc_Àn
;

182 
__ˇddr_t
 
	mifcu_buf
;

183 
i‰eq
 *
	mifcu_ªq
;

184 } 
	mifc_ifcu
;

186 
	#ifc_buf
 
ifc_ifcu
.
ifcu_buf


	)

187 
	#ifc_ªq
 
ifc_ifcu
.
ifcu_ªq


	)

188 
	#_IOT_ifc⁄f
 
	`_IOT
(
	`_IOTS
(
ifc⁄f
),1,0,0,0,0Ë

	)

191 
__BEGIN_DECLS


194 
	$if_«mëoödex
 (
__c⁄°
 *
__i‚ame
Ë
__THROW
;

195 *
	$if_ödext⁄ame
 (
__ifödex
, *
__i‚ame
Ë
__THROW
;

198 
if_«meödex
 *
	$if_«meödex
 (Ë
__THROW
;

201 
	$if_‰ì«meödex
 (
if_«meödex
 *
__±r
Ë
__THROW
;

203 
__END_DECLS


	@/usr/include/net/if_arp.h

23 #i‚de‡
_NET_IF_ARP_H


25 
	#_NET_IF_ARP_H
 1

	)

26 
	~<sys/cdefs.h
>

28 
	~<sys/ty≥s.h
>

29 
	~<sys/sockë.h
>

31 
	g__BEGIN_DECLS


34 
	#MAX_ADDR_LEN
 7

	)

40 
	#ARPOP_REQUEST
 1

	)

41 
	#ARPOP_REPLY
 2

	)

42 
	#ARPOP_RREQUEST
 3

	)

43 
	#ARPOP_RREPLY
 4

	)

44 
	#ARPOP_InREQUEST
 8

	)

45 
	#ARPOP_InREPLY
 9

	)

46 
	#ARPOP_NAK
 10

	)

55 
	s¨phdr


57 
	m¨_hrd
;

58 
	m¨_¥o
;

59 
	m¨_h 
;

60 
	m¨_∂n
;

61 
	m¨_›
;

65 
	m__¨_sha
[
ETH_ALEN
];

66 
	m__¨_sù
[4];

67 
	m__¨_tha
[
ETH_ALEN
];

68 
	m__¨_tù
[4];

74 
	#ARPHRD_NETROM
 0

	)

75 
	#ARPHRD_ETHER
 1

	)

76 
	#ARPHRD_EETHER
 2

	)

77 
	#ARPHRD_AX25
 3

	)

78 
	#ARPHRD_PRONET
 4

	)

79 
	#ARPHRD_CHAOS
 5

	)

80 
	#ARPHRD_IEEE802
 6

	)

81 
	#ARPHRD_ARCNET
 7

	)

82 
	#ARPHRD_APPLETLK
 8

	)

83 
	#ARPHRD_DLCI
 15

	)

84 
	#ARPHRD_ATM
 19

	)

85 
	#ARPHRD_METRICOM
 23

	)

86 
	#ARPHRD_IEEE1394
 24

	)

87 
	#ARPHRD_EUI64
 27

	)

88 
	#ARPHRD_INFINIBAND
 32

	)

91 
	#ARPHRD_SLIP
 256

	)

92 
	#ARPHRD_CSLIP
 257

	)

93 
	#ARPHRD_SLIP6
 258

	)

94 
	#ARPHRD_CSLIP6
 259

	)

95 
	#ARPHRD_RSRVD
 260

	)

96 
	#ARPHRD_ADAPT
 264

	)

97 
	#ARPHRD_ROSE
 270

	)

98 
	#ARPHRD_X25
 271

	)

99 
	#ARPHRD_HWX25
 272

	)

100 
	#ARPHRD_PPP
 512

	)

101 
	#ARPHRD_CISCO
 513

	)

102 
	#ARPHRD_HDLC
 
ARPHRD_CISCO


	)

103 
	#ARPHRD_LAPB
 516

	)

104 
	#ARPHRD_DDCMP
 517

	)

105 
	#ARPHRD_RAWHDLC
 518

	)

107 
	#ARPHRD_TUNNEL
 768

	)

108 
	#ARPHRD_TUNNEL6
 769

	)

109 
	#ARPHRD_FRAD
 770

	)

110 
	#ARPHRD_SKIP
 771

	)

111 
	#ARPHRD_LOOPBACK
 772

	)

112 
	#ARPHRD_LOCALTLK
 773

	)

113 
	#ARPHRD_FDDI
 774

	)

114 
	#ARPHRD_BIF
 775

	)

115 
	#ARPHRD_SIT
 776

	)

116 
	#ARPHRD_IPDDP
 777

	)

117 
	#ARPHRD_IPGRE
 778

	)

118 
	#ARPHRD_PIMREG
 779

	)

119 
	#ARPHRD_HIPPI
 780

	)

120 
	#ARPHRD_ASH
 781

	)

121 
	#ARPHRD_ECONET
 782

	)

122 
	#ARPHRD_IRDA
 783

	)

123 
	#ARPHRD_FCPP
 784

	)

124 
	#ARPHRD_FCAL
 785

	)

125 
	#ARPHRD_FCPL
 786

	)

126 
	#ARPHRD_FCFABRIC
 787

	)

127 
	#ARPHRD_IEEE802_TR
 800

	)

128 
	#ARPHRD_IEEE80211
 801

	)

129 
	#ARPHRD_IEEE80211_PRISM
 802

	)

130 
	#ARPHRD_IEEE80211_RADIOTAP
 803

	)

131 
	#ARPHRD_IEEE802154
 804

	)

132 
	#ARPHRD_IEEE802154_PHY
 805

	)

134 
	#ARPHRD_VOID
 0xFFFF

	)

135 
	#ARPHRD_NONE
 0xFFFE

	)

139 
	s¨¥eq


141 
sockaddr
 
	m¨p_∑
;

142 
sockaddr
 
	m¨p_ha
;

143 
	m¨p_Êags
;

144 
sockaddr
 
	m¨p_√tmask
;

145 
	m¨p_dev
[16];

148 
	s¨¥eq_ﬁd


150 
sockaddr
 
	m¨p_∑
;

151 
sockaddr
 
	m¨p_ha
;

152 
	m¨p_Êags
;

153 
sockaddr
 
	m¨p_√tmask
;

157 
	#ATF_COM
 0x02

	)

158 
	#ATF_PERM
 0x04

	)

159 
	#ATF_PUBL
 0x08

	)

160 
	#ATF_USETRAILERS
 0x10

	)

161 
	#ATF_NETMASK
 0x20

	)

163 
	#ATF_DONTPUB
 0x40

	)

164 
	#ATF_MAGIC
 0x80

	)

168 
	#ARPD_UPDATE
 0x01

	)

169 
	#ARPD_LOOKUP
 0x02

	)

170 
	#ARPD_FLUSH
 0x03

	)

172 
	s¨pd_ªque°


174 
	mªq
;

175 
u_öt32_t
 
	mù
;

176 
	mdev
;

177 
	m°amp
;

178 
	mupd©ed
;

179 
	mha
[
MAX_ADDR_LEN
];

182 
	g__END_DECLS


	@/usr/include/net/route.h

21 #i‚de‡
_NET_ROUTE_H


22 
	#_NET_ROUTE_H
 1

	)

24 
	~<„©uªs.h
>

25 
	~<sys/sockë.h
>

26 
	~<sys/ty≥s.h
>

27 
	~<√töë/ö.h
>

28 
	~<bôs/w‹dsize.h
>

32 
	sπíåy


34 
	mπ_∑d1
;

35 
sockaddr
 
	mπ_d°
;

36 
sockaddr
 
	mπ_g©eway
;

37 
sockaddr
 
	mπ_gímask
;

38 
	mπ_Êags
;

39 
	mπ_∑d2
;

40 
	mπ_∑d3
;

41 
	mπ_tos
;

42 
	mπ_˛ass
;

43 #i‡
__WORDSIZE
 == 64

44 
	mπ_∑d4
[3];

46 
	mπ_∑d4
;

48 
	mπ_mëric
;

49 *
	mπ_dev
;

50 
	mπ_mtu
;

51 
	mπ_wödow
;

52 
	mπ_úâ
;

55 
	#π_mss
 
π_mtu


	)

58 
	sö6_πmsg


60 
ö6_addr
 
	mπmsg_d°
;

61 
ö6_addr
 
	mπmsg_§c
;

62 
ö6_addr
 
	mπmsg_g©eway
;

63 
u_öt32_t
 
	mπmsg_ty≥
;

64 
u_öt16_t
 
	mπmsg_d°_Àn
;

65 
u_öt16_t
 
	mπmsg_§c_Àn
;

66 
u_öt32_t
 
	mπmsg_mëric
;

67 
	mπmsg_öfo
;

68 
u_öt32_t
 
	mπmsg_Êags
;

69 
	mπmsg_ifödex
;

73 
	#RTF_UP
 0x0001

	)

74 
	#RTF_GATEWAY
 0x0002

	)

76 
	#RTF_HOST
 0x0004

	)

77 
	#RTF_REINSTATE
 0x0008

	)

78 
	#RTF_DYNAMIC
 0x0010

	)

79 
	#RTF_MODIFIED
 0x0020

	)

80 
	#RTF_MTU
 0x0040

	)

81 
	#RTF_MSS
 
RTF_MTU


	)

82 
	#RTF_WINDOW
 0x0080

	)

83 
	#RTF_IRTT
 0x0100

	)

84 
	#RTF_REJECT
 0x0200

	)

85 
	#RTF_STATIC
 0x0400

	)

86 
	#RTF_XRESOLVE
 0x0800

	)

87 
	#RTF_NOFORWARD
 0x1000

	)

88 
	#RTF_THROW
 0x2000

	)

89 
	#RTF_NOPMTUDISC
 0x4000

	)

92 
	#RTF_DEFAULT
 0x00010000

	)

93 
	#RTF_ALLONLINK
 0x00020000

	)

94 
	#RTF_ADDRCONF
 0x00040000

	)

96 
	#RTF_LINKRT
 0x00100000

	)

97 
	#RTF_NONEXTHOP
 0x00200000

	)

99 
	#RTF_CACHE
 0x01000000

	)

100 
	#RTF_FLOW
 0x02000000

	)

101 
	#RTF_POLICY
 0x04000000

	)

103 
	#RTCF_VALVE
 0x00200000

	)

104 
	#RTCF_MASQ
 0x00400000

	)

105 
	#RTCF_NAT
 0x00800000

	)

106 
	#RTCF_DOREDIRECT
 0x01000000

	)

107 
	#RTCF_LOG
 0x02000000

	)

108 
	#RTCF_DIRECTSRC
 0x04000000

	)

110 
	#RTF_LOCAL
 0x80000000

	)

111 
	#RTF_INTERFACE
 0x40000000

	)

112 
	#RTF_MULTICAST
 0x20000000

	)

113 
	#RTF_BROADCAST
 0x10000000

	)

114 
	#RTF_NAT
 0x08000000

	)

116 
	#RTF_ADDRCLASSMASK
 0xF8000000

	)

117 
	#RT_ADDRCLASS
(
Êags
Ë((
__u_öt32_t
ËÊag†>> 23)

	)

119 
	#RT_TOS
(
tos
Ë(—osË& 
IPTOS_TOS_MASK
)

	)

121 
	#RT_LOCALADDR
(
Êags
Ë((Êag†& 
RTF_ADDRCLASSMASK
) \

122 =(
RTF_LOCAL
|
RTF_INTERFACE
))

	)

124 
	#RT_CLASS_UNSPEC
 0

	)

125 
	#RT_CLASS_DEFAULT
 253

	)

127 
	#RT_CLASS_MAIN
 254

	)

128 
	#RT_CLASS_LOCAL
 255

	)

129 
	#RT_CLASS_MAX
 255

	)

132 
	#RTMSG_ACK
 
NLMSG_ACK


	)

133 
	#RTMSG_OVERRUN
 
NLMSG_OVERRUN


	)

135 
	#RTMSG_NEWDEVICE
 0x11

	)

136 
	#RTMSG_DELDEVICE
 0x12

	)

137 
	#RTMSG_NEWROUTE
 0x21

	)

138 
	#RTMSG_DELROUTE
 0x22

	)

139 
	#RTMSG_NEWRULE
 0x31

	)

140 
	#RTMSG_DELRULE
 0x32

	)

141 
	#RTMSG_CONTROL
 0x40

	)

143 
	#RTMSG_AR_FAILED
 0x51

	)

	@/usr/include/netdb.h

23 #i‚def 
_NETDB_H


24 
	#_NETDB_H
 1

	)

26 
	~<„©uªs.h
>

28 
	~<√töë/ö.h
>

29 
	~<°döt.h
>

30 #ifde‡
__USE_MISC


33 
	~<Ωc/√tdb.h
>

36 #ifde‡
__USE_GNU


37 
	#__√ed_sigevít_t


	)

38 
	~<bôs/sigöfo.h
>

39 
	#__√ed_time•ec


	)

40 
	~<time.h
>

43 
	~<bôs/√tdb.h
>

46 
	#_PATH_HEQUIV
 "/ëc/ho°s.equiv"

	)

47 
	#_PATH_HOSTS
 "/ëc/ho°s"

	)

48 
	#_PATH_NETWORKS
 "/ëc/√tw‹ks"

	)

49 
	#_PATH_NSSWITCH_CONF
 "/ëc/nsswôch.c⁄f"

	)

50 
	#_PATH_PROTOCOLS
 "/ëc/¥Ÿocﬁs"

	)

51 
	#_PATH_SERVICES
 "/ëc/£rvi˚s"

	)

54 
	g__BEGIN_DECLS


56 #i‡
deföed
 
__USE_MISC
 || !deföed 
__USE_XOPEN2K8


59 
	#h_î∫o
 (*
	`__h_î∫o_loˇti⁄
 ())

	)

62 *
	$__h_î∫o_loˇti⁄
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

66 
	#HOST_NOT_FOUND
 1

	)

67 
	#TRY_AGAIN
 2

	)

69 
	#NO_RECOVERY
 3

	)

71 
	#NO_DATA
 4

	)

74 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_GNU


75 
	#NETDB_INTERNAL
 -1

	)

76 
	#NETDB_SUCCESS
 0

	)

77 
	#NO_ADDRESS
 
NO_DATA


	)

80 #ifde‡
__USE_XOPEN2K


82 
	#IPPORT_RESERVED
 1024

	)

85 #ifde‡
__USE_GNU


87 
	#SCOPE_DELIMITER
 '%'

	)

90 #ifde‡
__USE_MISC


93 
	$hîr‹
 (
__c⁄°
 *
__°r
Ë
__THROW
;

96 
__c⁄°
 *
	$h°ªº‹
 (
__îr_num
Ë
__THROW
;

101 
	sho°ít


103 *
h_«me
;

104 **
h_Æü£s
;

105 
h_addπy≥
;

106 
h_Àngth
;

107 **
h_addr_li°
;

108 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_GNU


109 
	#h_addr
 
h_addr_li°
[0]

	)

118 
	`£tho°ít
 (
__°ay_›í
);

124 
	`ídho°ít
 ();

131 
ho°ít
 *
	`gëho°ít
 ();

138 
ho°ít
 *
	`gëho°byaddr
 (
__c⁄°
 *
__addr
, 
__sockÀn_t
 
__Àn
,

139 
__ty≥
);

145 
ho°ít
 *
	`gëho°by«me
 (
__c⁄°
 *
__«me
);

147 #ifde‡
__USE_MISC


156 
ho°ít
 *
	`gëho°by«me2
 (
__c⁄°
 *
__«me
, 
__af
);

168 
	`gëho°ít_r
 (
ho°ít
 *
__ª°ri˘
 
__ªsu…_buf
,

169 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

170 
ho°ít
 **
__ª°ri˘
 
__ªsu…
,

171 *
__ª°ri˘
 
__h_î∫›
);

173 
	`gëho°byaddr_r
 (
__c⁄°
 *
__ª°ri˘
 
__addr
, 
__sockÀn_t
 
__Àn
,

174 
__ty≥
,

175 
ho°ít
 *
__ª°ri˘
 
__ªsu…_buf
,

176 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

177 
ho°ít
 **
__ª°ri˘
 
__ªsu…
,

178 *
__ª°ri˘
 
__h_î∫›
);

180 
	`gëho°by«me_r
 (
__c⁄°
 *
__ª°ri˘
 
__«me
,

181 
ho°ít
 *
__ª°ri˘
 
__ªsu…_buf
,

182 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

183 
ho°ít
 **
__ª°ri˘
 
__ªsu…
,

184 *
__ª°ri˘
 
__h_î∫›
);

186 
	`gëho°by«me2_r
 (
__c⁄°
 *
__ª°ri˘
 
__«me
, 
__af
,

187 
ho°ít
 *
__ª°ri˘
 
__ªsu…_buf
,

188 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

189 
ho°ít
 **
__ª°ri˘
 
__ªsu…
,

190 *
__ª°ri˘
 
__h_î∫›
);

199 
	`£äëít
 (
__°ay_›í
);

205 
	`íd√ã¡
 ();

212 
√ã¡
 *
	`gë√ã¡
 ();

219 
√ã¡
 *
	`gë√tbyaddr
 (
uöt32_t
 
__√t
, 
__ty≥
);

225 
√ã¡
 *
	`gë√tby«me
 (
__c⁄°
 *
__«me
);

227 #ifdef 
__USE_MISC


238 
	`gë√ã¡_r
 (
√ã¡
 *
__ª°ri˘
 
__ªsu…_buf
,

239 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

240 
√ã¡
 **
__ª°ri˘
 
__ªsu…
,

241 *
__ª°ri˘
 
__h_î∫›
);

243 
	`gë√tbyaddr_r
 (
uöt32_t
 
__√t
, 
__ty≥
,

244 
√ã¡
 *
__ª°ri˘
 
__ªsu…_buf
,

245 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

246 
√ã¡
 **
__ª°ri˘
 
__ªsu…
,

247 *
__ª°ri˘
 
__h_î∫›
);

249 
	`gë√tby«me_r
 (
__c⁄°
 *
__ª°ri˘
 
__«me
,

250 
√ã¡
 *
__ª°ri˘
 
__ªsu…_buf
,

251 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

252 
√ã¡
 **
__ª°ri˘
 
__ªsu…
,

253 *
__ª°ri˘
 
__h_î∫›
);

258 
	s£rvít


260 *
s_«me
;

261 **
s_Æü£s
;

262 
s_p‹t
;

263 *
s_¥Ÿo
;

271 
	`£t£rvít
 (
__°ay_›í
);

277 
	`íd£rvít
 ();

284 
£rvít
 *
	`gë£rvít
 ();

291 
£rvít
 *
	`gë£rvby«me
 (
__c⁄°
 *
__«me
,

292 
__c⁄°
 *
__¥Ÿo
);

299 
£rvít
 *
	`gë£rvbyp‹t
 (
__p‹t
, 
__c⁄°
 *
__¥Ÿo
);

302 #ifdef 
__USE_MISC


310 
	`gë£rvít_r
 (
£rvít
 *
__ª°ri˘
 
__ªsu…_buf
,

311 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

312 
£rvít
 **
__ª°ri˘
 
__ªsu…
);

314 
	`gë£rvby«me_r
 (
__c⁄°
 *
__ª°ri˘
 
__«me
,

315 
__c⁄°
 *
__ª°ri˘
 
__¥Ÿo
,

316 
£rvít
 *
__ª°ri˘
 
__ªsu…_buf
,

317 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

318 
£rvít
 **
__ª°ri˘
 
__ªsu…
);

320 
	`gë£rvbyp‹t_r
 (
__p‹t
, 
__c⁄°
 *
__ª°ri˘
 
__¥Ÿo
,

321 
£rvít
 *
__ª°ri˘
 
__ªsu…_buf
,

322 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

323 
£rvít
 **
__ª°ri˘
 
__ªsu…
);

328 
	s¥Ÿ€¡


330 *
p_«me
;

331 **
p_Æü£s
;

332 
p_¥Ÿo
;

340 
	`£çrŸ€¡
 (
__°ay_›í
);

346 
	`íd¥Ÿ€¡
 ();

353 
¥Ÿ€¡
 *
	`gë¥Ÿ€¡
 ();

359 
¥Ÿ€¡
 *
	`gë¥Ÿoby«me
 (
__c⁄°
 *
__«me
);

365 
¥Ÿ€¡
 *
	`gë¥Ÿobynumbî
 (
__¥Ÿo
);

368 #ifdef 
__USE_MISC


376 
	`gë¥Ÿ€¡_r
 (
¥Ÿ€¡
 *
__ª°ri˘
 
__ªsu…_buf
,

377 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

378 
¥Ÿ€¡
 **
__ª°ri˘
 
__ªsu…
);

380 
	`gë¥Ÿoby«me_r
 (
__c⁄°
 *
__ª°ri˘
 
__«me
,

381 
¥Ÿ€¡
 *
__ª°ri˘
 
__ªsu…_buf
,

382 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

383 
¥Ÿ€¡
 **
__ª°ri˘
 
__ªsu…
);

385 
	`gë¥Ÿobynumbî_r
 (
__¥Ÿo
,

386 
¥Ÿ€¡
 *
__ª°ri˘
 
__ªsu…_buf
,

387 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

388 
¥Ÿ€¡
 **
__ª°ri˘
 
__ªsu…
);

397 
	`£äëgª¡
 (
__c⁄°
 *
__√tgroup
);

405 
	`íd√tgª¡
 ();

414 
	`gë√tgª¡
 (**
__ª°ri˘
 
__ho°p
,

415 **
__ª°ri˘
 
__u£Ω
,

416 **
__ª°ri˘
 
__domaöp
);

425 
	`ö√tgr
 (
__c⁄°
 *
__√tgroup
, __c⁄° *
__ho°
,

426 
__c⁄°
 *
__u£r
, __c⁄° *
__domaö
);

434 
	`gë√tgª¡_r
 (**
__ª°ri˘
 
__ho°p
,

435 **
__ª°ri˘
 
__u£Ω
,

436 **
__ª°ri˘
 
__domaöp
,

437 *
__ª°ri˘
 
__buf„r
, 
size_t
 
__buÊí
);

441 #ifde‡
__USE_BSD


453 
	`rcmd
 (**
__ª°ri˘
 
__aho°
, 
__Ω‹t
,

454 
__c⁄°
 *
__ª°ri˘
 
__locu£r
,

455 
__c⁄°
 *
__ª°ri˘
 
__ªmu£r
,

456 
__c⁄°
 *
__ª°ri˘
 
__cmd
, *__ª°ri˘ 
__fd2p
);

465 
	`rcmd_af
 (**
__ª°ri˘
 
__aho°
, 
__Ω‹t
,

466 
__c⁄°
 *
__ª°ri˘
 
__locu£r
,

467 
__c⁄°
 *
__ª°ri˘
 
__ªmu£r
,

468 
__c⁄°
 *
__ª°ri˘
 
__cmd
, *__ª°ri˘ 
__fd2p
,

469 
ß_Ámûy_t
 
__af
);

481 
	`ªxec
 (**
__ª°ri˘
 
__aho°
, 
__Ω‹t
,

482 
__c⁄°
 *
__ª°ri˘
 
__«me
,

483 
__c⁄°
 *
__ª°ri˘
 
__∑ss
,

484 
__c⁄°
 *
__ª°ri˘
 
__cmd
, *__ª°ri˘ 
__fd2p
);

493 
	`ªxec_af
 (**
__ª°ri˘
 
__aho°
, 
__Ω‹t
,

494 
__c⁄°
 *
__ª°ri˘
 
__«me
,

495 
__c⁄°
 *
__ª°ri˘
 
__∑ss
,

496 
__c⁄°
 *
__ª°ri˘
 
__cmd
, *__ª°ri˘ 
__fd2p
,

497 
ß_Ámûy_t
 
__af
);

507 
	`ru£rok
 (
__c⁄°
 *
__rho°
, 
__su£r
,

508 
__c⁄°
 *
__ªmu£r
, __c⁄° *
__locu£r
);

517 
	`ru£rok_af
 (
__c⁄°
 *
__rho°
, 
__su£r
,

518 
__c⁄°
 *
__ªmu£r
, __c⁄° *
__locu£r
,

519 
ß_Ámûy_t
 
__af
);

530 
	`úu£rok
 (
uöt32_t
 
__øddr
, 
__su£r
,

531 
__c⁄°
 *
__ªmu£r
, __c⁄° *
__locu£r
);

541 
	`úu£rok_af
 (
__c⁄°
 *
__øddr
, 
__su£r
,

542 
__c⁄°
 *
__ªmu£r
, __c⁄° *
__locu£r
,

543 
ß_Ámûy_t
 
__af
);

553 
	`ºesvp‹t
 (*
__Æp‹t
);

562 
	`ºesvp‹t_af
 (*
__Æp‹t
, 
ß_Ámûy_t
 
__af
);

567 #ifdef 
__USE_POSIX


569 
	saddröfo


571 
ai_Êags
;

572 
ai_Ámûy
;

573 
ai_sockty≥
;

574 
ai_¥Ÿocﬁ
;

575 
sockÀn_t
 
ai_addæí
;

576 
sockaddr
 *
ai_addr
;

577 *
ai_ˇn⁄«me
;

578 
addröfo
 *
ai_√xt
;

581 #ifde‡
__USE_GNU


583 
	sgaicb


585 c⁄° *
¨_«me
;

586 c⁄° *
¨_£rvi˚
;

587 c⁄° 
addröfo
 *
¨_ªque°
;

588 
addröfo
 *
¨_ªsu…
;

590 
__ªtu∫
;

591 
__unu£d
[5];

595 
	#GAI_WAIT
 0

	)

596 
	#GAI_NOWAIT
 1

	)

600 
	#AI_PASSIVE
 0x0001

	)

601 
	#AI_CANONNAME
 0x0002

	)

602 
	#AI_NUMERICHOST
 0x0004

	)

603 
	#AI_V4MAPPED
 0x0008

	)

604 
	#AI_ALL
 0x0010

	)

605 
	#AI_ADDRCONFIG
 0x0020

	)

607 #ifde‡
__USE_GNU


608 
	#AI_IDN
 0x0040

	)

611 
	#AI_CANONIDN
 0x0080

	)

612 
	#AI_IDN_ALLOW_UNASSIGNED
 0x0100

	)

614 
	#AI_IDN_USE_STD3_ASCII_RULES
 0x0200

	)

617 
	#AI_NUMERICSERV
 0x0400

	)

620 
	#EAI_BADFLAGS
 -1

	)

621 
	#EAI_NONAME
 -2

	)

622 
	#EAI_AGAIN
 -3

	)

623 
	#EAI_FAIL
 -4

	)

624 
	#EAI_FAMILY
 -6

	)

625 
	#EAI_SOCKTYPE
 -7

	)

626 
	#EAI_SERVICE
 -8

	)

627 
	#EAI_MEMORY
 -10

	)

628 
	#EAI_SYSTEM
 -11

	)

629 
	#EAI_OVERFLOW
 -12

	)

630 #ifde‡
__USE_GNU


631 
	#EAI_NODATA
 -5

	)

632 
	#EAI_ADDRFAMILY
 -9

	)

633 
	#EAI_INPROGRESS
 -100

	)

634 
	#EAI_CANCELED
 -101

	)

635 
	#EAI_NOTCANCELED
 -102

	)

636 
	#EAI_ALLDONE
 -103

	)

637 
	#EAI_INTR
 -104

	)

638 
	#EAI_IDN_ENCODE
 -105

	)

641 #ifde‡
__USE_MISC


642 
	#NI_MAXHOST
 1025

	)

643 
	#NI_MAXSERV
 32

	)

646 
	#NI_NUMERICHOST
 1

	)

647 
	#NI_NUMERICSERV
 2

	)

648 
	#NI_NOFQDN
 4

	)

649 
	#NI_NAMEREQD
 8

	)

650 
	#NI_DGRAM
 16

	)

651 #ifde‡
__USE_GNU


652 
	#NI_IDN
 32

	)

653 
	#NI_IDN_ALLOW_UNASSIGNED
 64

	)

655 
	#NI_IDN_USE_STD3_ASCII_RULES
 128

	)

664 
	`gëaddröfo
 (
__c⁄°
 *
__ª°ri˘
 
__«me
,

665 
__c⁄°
 *
__ª°ri˘
 
__£rvi˚
,

666 
__c⁄°
 
addröfo
 *
__ª°ri˘
 
__ªq
,

667 
addröfo
 **
__ª°ri˘
 
__∑i
);

670 
	$‰ìaddröfo
 (
addröfo
 *
__ai
Ë
__THROW
;

673 
__c⁄°
 *
	$gai_°ªº‹
 (
__ecode
Ë
__THROW
;

679 
	`gë«meöfo
 (
__c⁄°
 
sockaddr
 *
__ª°ri˘
 
__ß
,

680 
sockÀn_t
 
__ßÀn
, *
__ª°ri˘
 
__ho°
,

681 
sockÀn_t
 
__ho°Àn
, *
__ª°ri˘
 
__£rv
,

682 
sockÀn_t
 
__£rvÀn
, 
__Êags
);

685 #ifde‡
__USE_GNU


694 
	`gëaddröfo_a
 (
__mode
, 
gaicb
 *
__li°
[
__ª°ri˘_¨r
],

695 
__ít
, 
sigevít
 *
__ª°ri˘
 
__sig
);

705 
	`gai_su•íd
 (
__c⁄°
 
gaicb
 *__c⁄° 
__li°
[], 
__ít
,

706 
__c⁄°
 
time•ec
 *
__timeout
);

709 
	$gai_îr‹
 (
gaicb
 *
__ªq
Ë
__THROW
;

712 
	$gai_ˇn˚l
 (
gaicb
 *
__gaicbp
Ë
__THROW
;

715 
__END_DECLS


	@/usr/include/netinet/icmp6.h

19 #i‚de‡
_NETINET_ICMP6_H


20 
	#_NETINET_ICMP6_H
 1

	)

22 
	~<öây≥s.h
>

23 
	~<°rög.h
>

24 
	~<sys/ty≥s.h
>

25 
	~<√töë/ö.h
>

27 
	#ICMP6_FILTER
 1

	)

29 
	#ICMP6_FILTER_BLOCK
 1

	)

30 
	#ICMP6_FILTER_PASS
 2

	)

31 
	#ICMP6_FILTER_BLOCKOTHERS
 3

	)

32 
	#ICMP6_FILTER_PASSONLY
 4

	)

34 
	sicmp6_fûãr


36 
uöt32_t
 
	micmp6_fût
[8];

39 
	sicmp6_hdr


41 
uöt8_t
 
	micmp6_ty≥
;

42 
uöt8_t
 
	micmp6_code
;

43 
uöt16_t
 
	micmp6_cksum
;

46 
uöt32_t
 
	micmp6_un_d©a32
[1];

47 
uöt16_t
 
	micmp6_un_d©a16
[2];

48 
uöt8_t
 
	micmp6_un_d©a8
[4];

49 } 
	micmp6_d©aun
;

52 
	#icmp6_d©a32
 
icmp6_d©aun
.
icmp6_un_d©a32


	)

53 
	#icmp6_d©a16
 
icmp6_d©aun
.
icmp6_un_d©a16


	)

54 
	#icmp6_d©a8
 
icmp6_d©aun
.
icmp6_un_d©a8


	)

55 
	#icmp6_µå
 
icmp6_d©a32
[0]

	)

56 
	#icmp6_mtu
 
icmp6_d©a32
[0]

	)

57 
	#icmp6_id
 
icmp6_d©a16
[0]

	)

58 
	#icmp6_£q
 
icmp6_d©a16
[1]

	)

59 
	#icmp6_maxdñay
 
icmp6_d©a16
[0]

	)

61 
	#ICMP6_DST_UNREACH
 1

	)

62 
	#ICMP6_PACKET_TOO_BIG
 2

	)

63 
	#ICMP6_TIME_EXCEEDED
 3

	)

64 
	#ICMP6_PARAM_PROB
 4

	)

66 
	#ICMP6_INFOMSG_MASK
 0x80

	)

68 
	#ICMP6_ECHO_REQUEST
 128

	)

69 
	#ICMP6_ECHO_REPLY
 129

	)

70 
	#MLD_LISTENER_QUERY
 130

	)

71 
	#MLD_LISTENER_REPORT
 131

	)

72 
	#MLD_LISTENER_REDUCTION
 132

	)

74 
	#ICMP6_DST_UNREACH_NOROUTE
 0

	)

75 
	#ICMP6_DST_UNREACH_ADMIN
 1

	)

77 
	#ICMP6_DST_UNREACH_BEYONDSCOPE
 2

	)

78 
	#ICMP6_DST_UNREACH_ADDR
 3

	)

79 
	#ICMP6_DST_UNREACH_NOPORT
 4

	)

81 
	#ICMP6_TIME_EXCEED_TRANSIT
 0

	)

82 
	#ICMP6_TIME_EXCEED_REASSEMBLY
 1

	)

84 
	#ICMP6_PARAMPROB_HEADER
 0

	)

85 
	#ICMP6_PARAMPROB_NEXTHEADER
 1

	)

86 
	#ICMP6_PARAMPROB_OPTION
 2

	)

88 
	#ICMP6_FILTER_WILLPASS
(
ty≥
, 
fûãΩ
) \

89 ((((
fûãΩ
)->
icmp6_fût
[(
ty≥
Ë>> 5]Ë& (1 << (—y≥Ë& 31))Ë=0)

	)

91 
	#ICMP6_FILTER_WILLBLOCK
(
ty≥
, 
fûãΩ
) \

92 ((((
fûãΩ
)->
icmp6_fût
[(
ty≥
Ë>> 5]Ë& (1 << (—y≥Ë& 31))Ë!0)

	)

94 
	#ICMP6_FILTER_SETPASS
(
ty≥
, 
fûãΩ
) \

95 ((((
fûãΩ
)->
icmp6_fût
[(
ty≥
Ë>> 5]Ë&~(1 << (—y≥Ë& 31))))

	)

97 
	#ICMP6_FILTER_SETBLOCK
(
ty≥
, 
fûãΩ
) \

98 ((((
fûãΩ
)->
icmp6_fût
[(
ty≥
Ë>> 5]Ë|(1 << (—y≥Ë& 31))))

	)

100 
	#ICMP6_FILTER_SETPASSALL
(
fûãΩ
) \

101 
	`mem£t
 (
fûãΩ
, 0,  (
icmp6_fûãr
));

	)

103 
	#ICMP6_FILTER_SETBLOCKALL
(
fûãΩ
) \

104 
	`mem£t
 (
fûãΩ
, 0xFF,  (
icmp6_fûãr
));

	)

106 
	#ND_ROUTER_SOLICIT
 133

	)

107 
	#ND_ROUTER_ADVERT
 134

	)

108 
	#ND_NEIGHBOR_SOLICIT
 135

	)

109 
	#ND_NEIGHBOR_ADVERT
 136

	)

110 
	#ND_REDIRECT
 137

	)

112 
	snd_rouãr_sﬁicô


114 
icmp6_hdr
 
	mnd_rs_hdr
;

118 
	#nd_rs_ty≥
 
nd_rs_hdr
.
icmp6_ty≥


	)

119 
	#nd_rs_code
 
nd_rs_hdr
.
icmp6_code


	)

120 
	#nd_rs_cksum
 
nd_rs_hdr
.
icmp6_cksum


	)

121 
	#nd_rs_ª£rved
 
nd_rs_hdr
.
icmp6_d©a32
[0]

	)

123 
	snd_rouãr_advît


125 
icmp6_hdr
 
	mnd_ø_hdr
;

126 
uöt32_t
 
	mnd_ø_ªachabÀ
;

127 
uöt32_t
 
	mnd_ø_ªå™smô
;

131 
	#nd_ø_ty≥
 
nd_ø_hdr
.
icmp6_ty≥


	)

132 
	#nd_ø_code
 
nd_ø_hdr
.
icmp6_code


	)

133 
	#nd_ø_cksum
 
nd_ø_hdr
.
icmp6_cksum


	)

134 
	#nd_ø_curh›limô
 
nd_ø_hdr
.
icmp6_d©a8
[0]

	)

135 
	#nd_ø_Êags_ª£rved
 
nd_ø_hdr
.
icmp6_d©a8
[1]

	)

136 
	#ND_RA_FLAG_MANAGED
 0x80

	)

137 
	#ND_RA_FLAG_OTHER
 0x40

	)

138 
	#ND_RA_FLAG_HOME_AGENT
 0x20

	)

139 
	#nd_ø_rouãr_li„time
 
nd_ø_hdr
.
icmp6_d©a16
[1]

	)

141 
	snd_√ighb‹_sﬁicô


143 
icmp6_hdr
 
	mnd_ns_hdr
;

144 
ö6_addr
 
	mnd_ns_èrgë
;

148 
	#nd_ns_ty≥
 
nd_ns_hdr
.
icmp6_ty≥


	)

149 
	#nd_ns_code
 
nd_ns_hdr
.
icmp6_code


	)

150 
	#nd_ns_cksum
 
nd_ns_hdr
.
icmp6_cksum


	)

151 
	#nd_ns_ª£rved
 
nd_ns_hdr
.
icmp6_d©a32
[0]

	)

153 
	snd_√ighb‹_advît


155 
icmp6_hdr
 
	mnd_«_hdr
;

156 
ö6_addr
 
	mnd_«_èrgë
;

160 
	#nd_«_ty≥
 
nd_«_hdr
.
icmp6_ty≥


	)

161 
	#nd_«_code
 
nd_«_hdr
.
icmp6_code


	)

162 
	#nd_«_cksum
 
nd_«_hdr
.
icmp6_cksum


	)

163 
	#nd_«_Êags_ª£rved
 
nd_«_hdr
.
icmp6_d©a32
[0]

	)

164 #i‡ 
BYTE_ORDER
 =
BIG_ENDIAN


165 
	#ND_NA_FLAG_ROUTER
 0x80000000

	)

166 
	#ND_NA_FLAG_SOLICITED
 0x40000000

	)

167 
	#ND_NA_FLAG_OVERRIDE
 0x20000000

	)

169 
	#ND_NA_FLAG_ROUTER
 0x00000080

	)

170 
	#ND_NA_FLAG_SOLICITED
 0x00000040

	)

171 
	#ND_NA_FLAG_OVERRIDE
 0x00000020

	)

174 
	snd_ªdúe˘


176 
icmp6_hdr
 
	mnd_rd_hdr
;

177 
ö6_addr
 
	mnd_rd_èrgë
;

178 
ö6_addr
 
	mnd_rd_d°
;

182 
	#nd_rd_ty≥
 
nd_rd_hdr
.
icmp6_ty≥


	)

183 
	#nd_rd_code
 
nd_rd_hdr
.
icmp6_code


	)

184 
	#nd_rd_cksum
 
nd_rd_hdr
.
icmp6_cksum


	)

185 
	#nd_rd_ª£rved
 
nd_rd_hdr
.
icmp6_d©a32
[0]

	)

187 
	snd_›t_hdr


189 
uöt8_t
 
	mnd_›t_ty≥
;

190 
uöt8_t
 
	mnd_›t_Àn
;

194 
	#ND_OPT_SOURCE_LINKADDR
 1

	)

195 
	#ND_OPT_TARGET_LINKADDR
 2

	)

196 
	#ND_OPT_PREFIX_INFORMATION
 3

	)

197 
	#ND_OPT_REDIRECTED_HEADER
 4

	)

198 
	#ND_OPT_MTU
 5

	)

199 
	#ND_OPT_RTR_ADV_INTERVAL
 7

	)

200 
	#ND_OPT_HOME_AGENT_INFO
 8

	)

202 
	snd_›t_¥efix_öfo


204 
uöt8_t
 
	mnd_›t_pi_ty≥
;

205 
uöt8_t
 
	mnd_›t_pi_Àn
;

206 
uöt8_t
 
	mnd_›t_pi_¥efix_Àn
;

207 
uöt8_t
 
	mnd_›t_pi_Êags_ª£rved
;

208 
uöt32_t
 
	mnd_›t_pi_vÆid_time
;

209 
uöt32_t
 
	mnd_›t_pi_¥e„ºed_time
;

210 
uöt32_t
 
	mnd_›t_pi_ª£rved2
;

211 
ö6_addr
 
	mnd_›t_pi_¥efix
;

214 
	#ND_OPT_PI_FLAG_ONLINK
 0x80

	)

215 
	#ND_OPT_PI_FLAG_AUTO
 0x40

	)

216 
	#ND_OPT_PI_FLAG_RADDR
 0x20

	)

218 
	snd_›t_rd_hdr


220 
uöt8_t
 
	mnd_›t_rh_ty≥
;

221 
uöt8_t
 
	mnd_›t_rh_Àn
;

222 
uöt16_t
 
	mnd_›t_rh_ª£rved1
;

223 
uöt32_t
 
	mnd_›t_rh_ª£rved2
;

227 
	snd_›t_mtu


229 
uöt8_t
 
	mnd_›t_mtu_ty≥
;

230 
uöt8_t
 
	mnd_›t_mtu_Àn
;

231 
uöt16_t
 
	mnd_›t_mtu_ª£rved
;

232 
uöt32_t
 
	mnd_›t_mtu_mtu
;

235 
	smld_hdr


237 
icmp6_hdr
 
	mmld_icmp6_hdr
;

238 
ö6_addr
 
	mmld_addr
;

241 
	#mld_ty≥
 
mld_icmp6_hdr
.
icmp6_ty≥


	)

242 
	#mld_code
 
mld_icmp6_hdr
.
icmp6_code


	)

243 
	#mld_cksum
 
mld_icmp6_hdr
.
icmp6_cksum


	)

244 
	#mld_maxdñay
 
mld_icmp6_hdr
.
icmp6_d©a16
[0]

	)

245 
	#mld_ª£rved
 
mld_icmp6_hdr
.
icmp6_d©a16
[1]

	)

247 
	#ICMP6_ROUTER_RENUMBERING
 138

	)

249 
	sicmp6_rouãr_ªnum


251 
icmp6_hdr
 
	mº_hdr
;

252 
uöt8_t
 
	mº_£gnum
;

253 
uöt8_t
 
	mº_Êags
;

254 
uöt16_t
 
	mº_maxdñay
;

255 
uöt32_t
 
	mº_ª£rved
;

258 
	#º_ty≥
 
º_hdr
.
icmp6_ty≥


	)

259 
	#º_code
 
º_hdr
.
icmp6_code


	)

260 
	#º_cksum
 
º_hdr
.
icmp6_cksum


	)

261 
	#º_£qnum
 
º_hdr
.
icmp6_d©a32
[0]

	)

264 
	#ICMP6_RR_FLAGS_TEST
 0x80

	)

265 
	#ICMP6_RR_FLAGS_REQRESULT
 0x40

	)

266 
	#ICMP6_RR_FLAGS_FORCEAPPLY
 0x20

	)

267 
	#ICMP6_RR_FLAGS_SPECSITE
 0x10

	)

268 
	#ICMP6_RR_FLAGS_PREVDONE
 0x08

	)

270 
	sº_pco_m©ch


272 
uöt8_t
 
	mΩm_code
;

273 
uöt8_t
 
	mΩm_Àn
;

274 
uöt8_t
 
	mΩm_‹döÆ
;

275 
uöt8_t
 
	mΩm_m©chÀn
;

276 
uöt8_t
 
	mΩm_möÀn
;

277 
uöt8_t
 
	mΩm_maxÀn
;

278 
uöt16_t
 
	mΩm_ª£rved
;

279 
ö6_addr
 
	mΩm_¥efix
;

283 
	#RPM_PCO_ADD
 1

	)

284 
	#RPM_PCO_CHANGE
 2

	)

285 
	#RPM_PCO_SETGLOBAL
 3

	)

287 
	sº_pco_u£


289 
uöt8_t
 
	mΩu_u£Àn
;

290 
uöt8_t
 
	mΩu_kì∂í
;

291 
uöt8_t
 
	mΩu_ømask
;

292 
uöt8_t
 
	mΩu_øÊags
;

293 
uöt32_t
 
	mΩu_v…ime
;

294 
uöt32_t
 
	mΩu_∂time
;

295 
uöt32_t
 
	mΩu_Êags
;

296 
ö6_addr
 
	mΩu_¥efix
;

299 
	#ICMP6_RR_PCOUSE_RAFLAGS_ONLINK
 0x20

	)

300 
	#ICMP6_RR_PCOUSE_RAFLAGS_AUTO
 0x10

	)

302 #i‡
BYTE_ORDER
 =
BIG_ENDIAN


303 
	#ICMP6_RR_PCOUSE_FLAGS_DECRVLTIME
 0x80000000

	)

304 
	#ICMP6_RR_PCOUSE_FLAGS_DECRPLTIME
 0x40000000

	)

305 #ñi‡
BYTE_ORDER
 =
LITTLE_ENDIAN


306 
	#ICMP6_RR_PCOUSE_FLAGS_DECRVLTIME
 0x80

	)

307 
	#ICMP6_RR_PCOUSE_FLAGS_DECRPLTIME
 0x40

	)

310 
	sº_ªsu…


312 
uöt16_t
 
	mºr_Êags
;

313 
uöt8_t
 
	mºr_‹döÆ
;

314 
uöt8_t
 
	mºr_m©chedÀn
;

315 
uöt32_t
 
	mºr_ifid
;

316 
ö6_addr
 
	mºr_¥efix
;

319 #i‡
BYTE_ORDER
 =
BIG_ENDIAN


320 
	#ICMP6_RR_RESULT_FLAGS_OOB
 0x0002

	)

321 
	#ICMP6_RR_RESULT_FLAGS_FORBIDDEN
 0x0001

	)

322 #ñi‡
BYTE_ORDER
 =
LITTLE_ENDIAN


323 
	#ICMP6_RR_RESULT_FLAGS_OOB
 0x0200

	)

324 
	#ICMP6_RR_RESULT_FLAGS_FORBIDDEN
 0x0100

	)

328 
	snd_›t_adv_öãrvÆ


330 
uöt8_t
 
	mnd_›t_adv_öãrvÆ_ty≥
;

331 
uöt8_t
 
	mnd_›t_adv_öãrvÆ_Àn
;

332 
uöt16_t
 
	mnd_›t_adv_öãrvÆ_ª£rved
;

333 
uöt32_t
 
	mnd_›t_adv_öãrvÆ_ivÆ
;

337 
	snd_›t_home_agít_öfo


339 
uöt8_t
 
	mnd_›t_home_agít_öfo_ty≥
;

340 
uöt8_t
 
	mnd_›t_home_agít_öfo_Àn
;

341 
uöt16_t
 
	mnd_›t_home_agít_öfo_ª£rved
;

342 
uöt16_t
 
	mnd_›t_home_agít_öfo_¥e„ªn˚
;

343 
uöt16_t
 
	mnd_›t_home_agít_öfo_li„time
;

	@/usr/include/netinet/if_ether.h

19 #i‚de‡
__NETINET_IF_ETHER_H


21 
	#__NETINET_IF_ETHER_H
 1

	)

22 
	~<„©uªs.h
>

23 
	~<sys/ty≥s.h
>

26 
	~<löux/if_ëhî.h
>

28 #ifde‡
__USE_BSD


61 
	~<√t/ëhî√t.h
>

62 
	~<√t/if_¨p.h
>

64 
__BEGIN_DECLS


72 
	sëhî_¨p
 {

73 
¨phdr
 
	mó_hdr
;

74 
u_öt8_t
 
	m¨p_sha
[
ETH_ALEN
];

75 
u_öt8_t
 
	m¨p_•a
[4];

76 
u_öt8_t
 
	m¨p_tha
[
ETH_ALEN
];

77 
u_öt8_t
 
	m¨p_ça
[4];

79 
	#¨p_hrd
 
ó_hdr
.
¨_hrd


	)

80 
	#¨p_¥o
 
ó_hdr
.
¨_¥o


	)

81 
	#¨p_h 
 
ó_hdr
.
¨_h 


	)

82 
	#¨p_∂n
 
ó_hdr
.
¨_∂n


	)

83 
	#¨p_›
 
ó_hdr
.
¨_›


	)

90 
	#ETHER_MAP_IP_MULTICAST
(
ùaddr
, 
íaddr
) \

94 (
íaddr
)[0] = 0x01; \

95 (
íaddr
)[1] = 0x00; \

96 (
íaddr
)[2] = 0x5e; \

97 (
íaddr
)[3] = ((
u_öt8_t
 *)
ùaddr
)[1] & 0x7f; \

98 (
íaddr
)[4] = ((
u_öt8_t
 *)
ùaddr
)[2]; \

99 (
íaddr
)[5] = ((
u_öt8_t
 *)
ùaddr
)[3]; \

100 }

	)

102 
	g__END_DECLS


	@/usr/include/netinet/in.h

20 #i‚def 
_NETINET_IN_H


21 
	#_NETINET_IN_H
 1

	)

23 
	~<„©uªs.h
>

24 
	~<°döt.h
>

25 
	~<sys/sockë.h
>

26 
	~<bôs/ty≥s.h
>

29 
__BEGIN_DECLS


34 
	mIPPROTO_IP
 = 0,

35 
	#IPPROTO_IP
 
IPPROTO_IP


	)

36 
	mIPPROTO_HOPOPTS
 = 0,

37 
	#IPPROTO_HOPOPTS
 
IPPROTO_HOPOPTS


	)

38 
	mIPPROTO_ICMP
 = 1,

39 
	#IPPROTO_ICMP
 
IPPROTO_ICMP


	)

40 
	mIPPROTO_IGMP
 = 2,

41 
	#IPPROTO_IGMP
 
IPPROTO_IGMP


	)

42 
	mIPPROTO_IPIP
 = 4,

43 
	#IPPROTO_IPIP
 
IPPROTO_IPIP


	)

44 
	mIPPROTO_TCP
 = 6,

45 
	#IPPROTO_TCP
 
IPPROTO_TCP


	)

46 
	mIPPROTO_EGP
 = 8,

47 
	#IPPROTO_EGP
 
IPPROTO_EGP


	)

48 
	mIPPROTO_PUP
 = 12,

49 
	#IPPROTO_PUP
 
IPPROTO_PUP


	)

50 
	mIPPROTO_UDP
 = 17,

51 
	#IPPROTO_UDP
 
IPPROTO_UDP


	)

52 
	mIPPROTO_IDP
 = 22,

53 
	#IPPROTO_IDP
 
IPPROTO_IDP


	)

54 
	mIPPROTO_TP
 = 29,

55 
	#IPPROTO_TP
 
IPPROTO_TP


	)

56 
	mIPPROTO_DCCP
 = 33,

57 
	#IPPROTO_DCCP
 
IPPROTO_DCCP


	)

58 
	mIPPROTO_IPV6
 = 41,

59 
	#IPPROTO_IPV6
 
IPPROTO_IPV6


	)

60 
	mIPPROTO_ROUTING
 = 43,

61 
	#IPPROTO_ROUTING
 
IPPROTO_ROUTING


	)

62 
	mIPPROTO_FRAGMENT
 = 44,

63 
	#IPPROTO_FRAGMENT
 
IPPROTO_FRAGMENT


	)

64 
	mIPPROTO_RSVP
 = 46,

65 
	#IPPROTO_RSVP
 
IPPROTO_RSVP


	)

66 
	mIPPROTO_GRE
 = 47,

67 
	#IPPROTO_GRE
 
IPPROTO_GRE


	)

68 
	mIPPROTO_ESP
 = 50,

69 
	#IPPROTO_ESP
 
IPPROTO_ESP


	)

70 
	mIPPROTO_AH
 = 51,

71 
	#IPPROTO_AH
 
IPPROTO_AH


	)

72 
	mIPPROTO_ICMPV6
 = 58,

73 
	#IPPROTO_ICMPV6
 
IPPROTO_ICMPV6


	)

74 
	mIPPROTO_NONE
 = 59,

75 
	#IPPROTO_NONE
 
IPPROTO_NONE


	)

76 
	mIPPROTO_DSTOPTS
 = 60,

77 
	#IPPROTO_DSTOPTS
 
IPPROTO_DSTOPTS


	)

78 
	mIPPROTO_MTP
 = 92,

79 
	#IPPROTO_MTP
 
IPPROTO_MTP


	)

80 
	mIPPROTO_ENCAP
 = 98,

81 
	#IPPROTO_ENCAP
 
IPPROTO_ENCAP


	)

82 
	mIPPROTO_PIM
 = 103,

83 
	#IPPROTO_PIM
 
IPPROTO_PIM


	)

84 
	mIPPROTO_COMP
 = 108,

85 
	#IPPROTO_COMP
 
IPPROTO_COMP


	)

86 
	mIPPROTO_SCTP
 = 132,

87 
	#IPPROTO_SCTP
 
IPPROTO_SCTP


	)

88 
	mIPPROTO_UDPLITE
 = 136,

89 
	#IPPROTO_UDPLITE
 
IPPROTO_UDPLITE


	)

90 
	mIPPROTO_RAW
 = 255,

91 
	#IPPROTO_RAW
 
IPPROTO_RAW


	)

92 
	mIPPROTO_MAX


97 
uöt16_t
 
	tö_p‹t_t
;

102 
	mIPPORT_ECHO
 = 7,

103 
	mIPPORT_DISCARD
 = 9,

104 
	mIPPORT_SYSTAT
 = 11,

105 
	mIPPORT_DAYTIME
 = 13,

106 
	mIPPORT_NETSTAT
 = 15,

107 
	mIPPORT_FTP
 = 21,

108 
	mIPPORT_TELNET
 = 23,

109 
	mIPPORT_SMTP
 = 25,

110 
	mIPPORT_TIMESERVER
 = 37,

111 
	mIPPORT_NAMESERVER
 = 42,

112 
	mIPPORT_WHOIS
 = 43,

113 
	mIPPORT_MTP
 = 57,

115 
	mIPPORT_TFTP
 = 69,

116 
	mIPPORT_RJE
 = 77,

117 
	mIPPORT_FINGER
 = 79,

118 
	mIPPORT_TTYLINK
 = 87,

119 
	mIPPORT_SUPDUP
 = 95,

122 
	mIPPORT_EXECSERVER
 = 512,

123 
	mIPPORT_LOGINSERVER
 = 513,

124 
	mIPPORT_CMDSERVER
 = 514,

125 
	mIPPORT_EFSSERVER
 = 520,

128 
	mIPPORT_BIFFUDP
 = 512,

129 
	mIPPORT_WHOSERVER
 = 513,

130 
	mIPPORT_ROUTESERVER
 = 520,

133 
	mIPPORT_RESERVED
 = 1024,

136 
	mIPPORT_USERRESERVED
 = 5000

141 
uöt32_t
 
	tö_addr_t
;

142 
	sö_addr


144 
ö_addr_t
 
	ms_addr
;

153 
	#IN_CLASSA
(
a
Ë((((
ö_addr_t
)◊)Ë& 0x80000000Ë=0)

	)

154 
	#IN_CLASSA_NET
 0xff000000

	)

155 
	#IN_CLASSA_NSHIFT
 24

	)

156 
	#IN_CLASSA_HOST
 (0xfffffff‡& ~
IN_CLASSA_NET
)

	)

157 
	#IN_CLASSA_MAX
 128

	)

159 
	#IN_CLASSB
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xc0000000Ë=0x80000000)

	)

160 
	#IN_CLASSB_NET
 0xffff0000

	)

161 
	#IN_CLASSB_NSHIFT
 16

	)

162 
	#IN_CLASSB_HOST
 (0xfffffff‡& ~
IN_CLASSB_NET
)

	)

163 
	#IN_CLASSB_MAX
 65536

	)

165 
	#IN_CLASSC
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xe0000000Ë=0xc0000000)

	)

166 
	#IN_CLASSC_NET
 0xffffff00

	)

167 
	#IN_CLASSC_NSHIFT
 8

	)

168 
	#IN_CLASSC_HOST
 (0xfffffff‡& ~
IN_CLASSC_NET
)

	)

170 
	#IN_CLASSD
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xf0000000Ë=0xe0000000)

	)

171 
	#IN_MULTICAST
(
a
Ë
	`IN_CLASSD
◊)

	)

173 
	#IN_EXPERIMENTAL
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xe0000000Ë=0xe0000000)

	)

174 
	#IN_BADCLASS
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xf0000000Ë=0xf0000000)

	)

177 
	#INADDR_ANY
 ((
ö_addr_t
Ë0x00000000)

	)

179 
	#INADDR_BROADCAST
 ((
ö_addr_t
Ë0xffffffff)

	)

181 
	#INADDR_NONE
 ((
ö_addr_t
Ë0xffffffff)

	)

184 
	#IN_LOOPBACKNET
 127

	)

186 #i‚de‡
INADDR_LOOPBACK


187 
	#INADDR_LOOPBACK
 ((
ö_addr_t
Ë0x7f000001Ë

	)

191 
	#INADDR_UNSPEC_GROUP
 ((
ö_addr_t
Ë0xe0000000Ë

	)

192 
	#INADDR_ALLHOSTS_GROUP
 ((
ö_addr_t
Ë0xe0000001Ë

	)

193 
	#INADDR_ALLRTRS_GROUP
 ((
ö_addr_t
Ë0xe0000002Ë

	)

194 
	#INADDR_MAX_LOCAL_GROUP
 ((
ö_addr_t
Ë0xe00000ffË

	)

198 
	sö6_addr


202 
uöt8_t
 
	m__u6_addr8
[16];

203 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_GNU


204 
uöt16_t
 
	m__u6_addr16
[8];

205 
uöt32_t
 
	m__u6_addr32
[4];

207 } 
	m__ö6_u
;

208 
	#s6_addr
 
__ö6_u
.
__u6_addr8


	)

209 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_GNU


210 
	#s6_addr16
 
__ö6_u
.
__u6_addr16


	)

211 
	#s6_addr32
 
__ö6_u
.
__u6_addr32


	)

215 c⁄° 
ö6_addr
 
ö6addr_™y
;

216 c⁄° 
ö6_addr
 
ö6addr_lo›back
;

217 
	#IN6ADDR_ANY_INIT
 { { { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } } }

	)

218 
	#IN6ADDR_LOOPBACK_INIT
 { { { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1 } } }

	)

220 
	#INET_ADDRSTRLEN
 16

	)

221 
	#INET6_ADDRSTRLEN
 46

	)

225 
	ssockaddr_ö


227 
__SOCKADDR_COMMON
 (
sö_
);

228 
ö_p‹t_t
 
	msö_p‹t
;

229 
ö_addr
 
	msö_addr
;

232 
	msö_zîo
[ (
sockaddr
) -

233 
__SOCKADDR_COMMON_SIZE
 -

234  (
ö_p‹t_t
) -

235  (
ö_addr
)];

239 
	ssockaddr_ö6


241 
__SOCKADDR_COMMON
 (
sö6_
);

242 
ö_p‹t_t
 
	msö6_p‹t
;

243 
uöt32_t
 
	msö6_Êowöfo
;

244 
ö6_addr
 
	msö6_addr
;

245 
uöt32_t
 
	msö6_sc›e_id
;

249 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_GNU


251 
	sù_mªq


254 
ö_addr
 
	mimr_mu…üddr
;

257 
ö_addr
 
	mimr_öãrÁ˚
;

260 
	sù_mªq_sour˚


263 
ö_addr
 
	mimr_mu…üddr
;

266 
ö_addr
 
	mimr_öãrÁ˚
;

269 
ö_addr
 
	mimr_sour˚addr
;

275 
	sùv6_mªq


278 
ö6_addr
 
	mùv6mr_mu…üddr
;

281 
	mùv6mr_öãrÁ˚
;

285 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_GNU


287 
	sgroup_ªq


290 
uöt32_t
 
	mgr_öãrÁ˚
;

293 
sockaddr_°‹age
 
	mgr_group
;

296 
	sgroup_sour˚_ªq


299 
uöt32_t
 
	mg§_öãrÁ˚
;

302 
sockaddr_°‹age
 
	mg§_group
;

305 
sockaddr_°‹age
 
	mg§_sour˚
;

310 
	sù_msfûãr


313 
ö_addr
 
	mimsf_mu…üddr
;

316 
ö_addr
 
	mimsf_öãrÁ˚
;

319 
uöt32_t
 
	mimsf_fmode
;

322 
uöt32_t
 
	mimsf_num§c
;

324 
ö_addr
 
	mimsf_¶i°
[1];

327 
	#IP_MSFILTER_SIZE
(
num§c
Ë( (
ù_msfûãr
) \

328 -  (
ö_addr
) \

329 + (
num§c
Ë*  (
ö_addr
))

	)

331 
	sgroup_fûãr


334 
uöt32_t
 
	mgf_öãrÁ˚
;

337 
sockaddr_°‹age
 
	mgf_group
;

340 
uöt32_t
 
	mgf_fmode
;

343 
uöt32_t
 
	mgf_num§c
;

345 
sockaddr_°‹age
 
	mgf_¶i°
[1];

348 
	#GROUP_FILTER_SIZE
(
num§c
Ë( (
group_fûãr
) \

349 -  (
sockaddr_°‹age
) \

350 + ((
num§c
) \

351 *  (
sockaddr_°‹age
)))

	)

356 
	~<bôs/ö.h
>

365 
uöt32_t
 
	$¡ohl
 (
uöt32_t
 
__√é⁄g
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

366 
uöt16_t
 
	$¡ohs
 (
uöt16_t
 
__√tsh‹t
)

367 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

368 
uöt32_t
 
	$ht⁄l
 (
uöt32_t
 
__ho°l⁄g
)

369 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

370 
uöt16_t
 
	$ht⁄s
 (
uöt16_t
 
__ho°sh‹t
)

371 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

373 
	~<ídün.h
>

376 
	~<bôs/byãsw≠.h
>

378 #ifde‡
__OPTIMIZE__


382 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


385 
	#¡ohl
(
x
Ë(x)

	)

386 
	#¡ohs
(
x
Ë(x)

	)

387 
	#ht⁄l
(
x
Ë(x)

	)

388 
	#ht⁄s
(
x
Ë(x)

	)

390 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


391 
	#¡ohl
(
x
Ë
	`__bsw≠_32
 (x)

	)

392 
	#¡ohs
(
x
Ë
	`__bsw≠_16
 (x)

	)

393 
	#ht⁄l
(
x
Ë
	`__bsw≠_32
 (x)

	)

394 
	#ht⁄s
(
x
Ë
	`__bsw≠_16
 (x)

	)

399 
	#IN6_IS_ADDR_UNSPECIFIED
(
a
) \

400 (((
__c⁄°
 
uöt32_t
 *Ë(
a
))[0] == 0 \

401 && ((
__c⁄°
 
uöt32_t
 *Ë(
a
))[1] == 0 \

402 && ((
__c⁄°
 
uöt32_t
 *Ë(
a
))[2] == 0 \

403 && ((
__c⁄°
 
uöt32_t
 *Ë(
a
))[3] =0)

	)

405 
	#IN6_IS_ADDR_LOOPBACK
(
a
) \

406 (((
__c⁄°
 
uöt32_t
 *Ë(
a
))[0] == 0 \

407 && ((
__c⁄°
 
uöt32_t
 *Ë(
a
))[1] == 0 \

408 && ((
__c⁄°
 
uöt32_t
 *Ë(
a
))[2] == 0 \

409 && ((
__c⁄°
 
uöt32_t
 *Ë(
a
))[3] =
	`ht⁄l
 (1))

	)

411 
	#IN6_IS_ADDR_MULTICAST
(
a
Ë(((
__c⁄°
 
uöt8_t
 *Ë◊))[0] =0xff)

	)

413 
	#IN6_IS_ADDR_LINKLOCAL
(
a
) \

414 ((((
__c⁄°
 
uöt32_t
 *Ë(
a
))[0] & 
	`ht⁄l
 (0xffc00000)) \

415 =
	`ht⁄l
 (0x„800000))

	)

417 
	#IN6_IS_ADDR_SITELOCAL
(
a
) \

418 ((((
__c⁄°
 
uöt32_t
 *Ë(
a
))[0] & 
	`ht⁄l
 (0xffc00000)) \

419 =
	`ht⁄l
 (0x„c00000))

	)

421 
	#IN6_IS_ADDR_V4MAPPED
(
a
) \

422 ((((
__c⁄°
 
uöt32_t
 *Ë(
a
))[0] == 0) \

423 && (((
__c⁄°
 
uöt32_t
 *Ë(
a
))[1] == 0) \

424 && (((
__c⁄°
 
uöt32_t
 *Ë(
a
))[2] =
	`ht⁄l
 (0xffff)))

	)

426 
	#IN6_IS_ADDR_V4COMPAT
(
a
) \

427 ((((
__c⁄°
 
uöt32_t
 *Ë(
a
))[0] == 0) \

428 && (((
__c⁄°
 
uöt32_t
 *Ë(
a
))[1] == 0) \

429 && (((
__c⁄°
 
uöt32_t
 *Ë(
a
))[2] == 0) \

430 && (
	`¡ohl
 (((
__c⁄°
 
uöt32_t
 *Ë(
a
))[3]Ë> 1))

	)

432 
	#IN6_ARE_ADDR_EQUAL
(
a
,
b
) \

433 ((((
__c⁄°
 
uöt32_t
 *Ë(
a
))[0] =((__c⁄° uöt32_à*Ë(
b
))[0]) \

434 && (((
__c⁄°
 
uöt32_t
 *Ë(
a
))[1] =((__c⁄° uöt32_à*Ë(
b
))[1]) \

435 && (((
__c⁄°
 
uöt32_t
 *Ë(
a
))[2] =((__c⁄° uöt32_à*Ë(
b
))[2]) \

436 && (((
__c⁄°
 
uöt32_t
 *Ë(
a
))[3] =((__c⁄° uöt32_à*Ë(
b
))[3]))

	)

438 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_GNU


440 
	$bödªsvp‹t
 (
__sockfd
, 
sockaddr_ö
 *
__sock_ö
Ë
__THROW
;

443 
	$bödªsvp‹t6
 (
__sockfd
, 
sockaddr_ö6
 *
__sock_ö
)

444 
__THROW
;

448 
	#IN6_IS_ADDR_MC_NODELOCAL
(
a
) \

449 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

450 && ((((
__c⁄°
 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0x1))

	)

452 
	#IN6_IS_ADDR_MC_LINKLOCAL
(
a
) \

453 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

454 && ((((
__c⁄°
 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0x2))

	)

456 
	#IN6_IS_ADDR_MC_SITELOCAL
(
a
) \

457 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

458 && ((((
__c⁄°
 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0x5))

	)

460 
	#IN6_IS_ADDR_MC_ORGLOCAL
(
a
) \

461 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

462 && ((((
__c⁄°
 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0x8))

	)

464 
	#IN6_IS_ADDR_MC_GLOBAL
(
a
) \

465 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

466 && ((((
__c⁄°
 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0xe))

	)

469 #ifde‡
__USE_GNU


471 
	sö6_pktöfo


473 
ö6_addr
 
ùi6_addr
;

474 
ùi6_ifödex
;

478 
	sù6_mtuöfo


480 
sockaddr_ö6
 
ù6m_addr
;

481 
uöt32_t
 
ù6m_mtu
;

486 
	$öë6_›ti⁄_•a˚
 (
__nbyãs
)

487 
__THROW
 
__©åibuã_dïªˇãd__
;

488 
	$öë6_›ti⁄_öô
 (*
__bp
, 
cmsghdr
 **
__cmsgp
,

489 
__ty≥
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

490 
	$öë6_›ti⁄_≠≥nd
 (
cmsghdr
 *
__cmsg
,

491 
__c⁄°
 
uöt8_t
 *
__ty≥p
, 
__mu…x
,

492 
__∂usy
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

493 
uöt8_t
 *
	$öë6_›ti⁄_Æloc
 (
cmsghdr
 *
__cmsg
, 
__d©Æí
,

494 
__mu…x
, 
__∂usy
)

495 
__THROW
 
__©åibuã_dïªˇãd__
;

496 
	$öë6_›ti⁄_√xt
 (
__c⁄°
 
cmsghdr
 *
__cmsg
,

497 
uöt8_t
 **
__çåp
)

498 
__THROW
 
__©åibuã_dïªˇãd__
;

499 
	$öë6_›ti⁄_föd
 (
__c⁄°
 
cmsghdr
 *
__cmsg
,

500 
uöt8_t
 **
__çåp
, 
__ty≥
)

501 
__THROW
 
__©åibuã_dïªˇãd__
;

505 
	$öë6_›t_öô
 (*
__extbuf
, 
sockÀn_t
 
__exéí
Ë
__THROW
;

506 
	$öë6_›t_≠≥nd
 (*
__extbuf
, 
sockÀn_t
 
__exéí
, 
__off£t
,

507 
uöt8_t
 
__ty≥
, 
sockÀn_t
 
__Àn
, uöt8_à
__Æign
,

508 **
__d©abuÂ
Ë
__THROW
;

509 
	$öë6_›t_föish
 (*
__extbuf
, 
sockÀn_t
 
__exéí
, 
__off£t
)

510 
__THROW
;

511 
	$öë6_›t_£t_vÆ
 (*
__d©abuf
, 
__off£t
, *
__vÆ
,

512 
sockÀn_t
 
__vÆÀn
Ë
__THROW
;

513 
	$öë6_›t_√xt
 (*
__extbuf
, 
sockÀn_t
 
__exéí
, 
__off£t
,

514 
uöt8_t
 *
__ty≥p
, 
sockÀn_t
 *
__À≈
,

515 **
__d©abuÂ
Ë
__THROW
;

516 
	$öë6_›t_föd
 (*
__extbuf
, 
sockÀn_t
 
__exéí
, 
__off£t
,

517 
uöt8_t
 
__ty≥
, 
sockÀn_t
 *
__À≈
,

518 **
__d©abuÂ
Ë
__THROW
;

519 
	$öë6_›t_gë_vÆ
 (*
__d©abuf
, 
__off£t
, *
__vÆ
,

520 
sockÀn_t
 
__vÆÀn
Ë
__THROW
;

524 
sockÀn_t
 
	$öë6_πh_•a˚
 (
__ty≥
, 
__£gmíts
Ë
__THROW
;

525 *
	$öë6_πh_öô
 (*
__bp
, 
sockÀn_t
 
__bp_Àn
, 
__ty≥
,

526 
__£gmíts
Ë
__THROW
;

527 
	$öë6_πh_add
 (*
__bp
, 
__c⁄°
 
ö6_addr
 *
__addr
Ë
__THROW
;

528 
	$öë6_πh_ªvî£
 (
__c⁄°
 *
__ö
, *
__out
Ë
__THROW
;

529 
	$öë6_πh_£gmíts
 (
__c⁄°
 *
__bp
Ë
__THROW
;

530 
ö6_addr
 *
	$öë6_πh_gëaddr
 (
__c⁄°
 *
__bp
, 
__ödex
)

531 
__THROW
;

537 
	$gëùv4sour˚fûãr
 (
__s
, 
ö_addr
 
__öãrÁ˚_addr
,

538 
ö_addr
 
__group
, 
uöt32_t
 *
__fmode
,

539 
uöt32_t
 *
__num§c
, 
ö_addr
 *
__¶i°
)

540 
__THROW
;

543 
	$£tùv4sour˚fûãr
 (
__s
, 
ö_addr
 
__öãrÁ˚_addr
,

544 
ö_addr
 
__group
, 
uöt32_t
 
__fmode
,

545 
uöt32_t
 
__num§c
,

546 
__c⁄°
 
ö_addr
 *
__¶i°
)

547 
__THROW
;

551 
	$gësour˚fûãr
 (
__s
, 
uöt32_t
 
__öãrÁ˚_addr
,

552 
__c⁄°
 
sockaddr
 *
__group
,

553 
sockÀn_t
 
__grou∂í
, 
uöt32_t
 *
__fmode
,

554 
uöt32_t
 *
__num§c
,

555 
sockaddr_°‹age
 *
__¶i°
Ë
__THROW
;

558 
	$£tsour˚fûãr
 (
__s
, 
uöt32_t
 
__öãrÁ˚_addr
,

559 
__c⁄°
 
sockaddr
 *
__group
,

560 
sockÀn_t
 
__grou∂í
, 
uöt32_t
 
__fmode
,

561 
uöt32_t
 
__num§c
,

562 
__c⁄°
 
sockaddr_°‹age
 *
__¶i°
Ë
__THROW
;

565 
__END_DECLS


	@/usr/include/netinet/in_systm.h

20 #i‚de‡
_NETINET_IN_SYSTM_H


21 
	#_NETINET_IN_SYSTM_H
 1

	)

23 
	~<sys/cdefs.h
>

24 
	~<sys/ty≥s.h
>

26 
__BEGIN_DECLS


35 
u_öt16_t
 
	tn_sh‹t
;

36 
u_öt32_t
 
	tn_l⁄g
;

37 
u_öt32_t
 
	tn_time
;

39 
	g__END_DECLS


	@/usr/include/netinet/ip.h

19 #i‚de‡
__NETINET_IP_H


20 
	#__NETINET_IP_H
 1

	)

22 
	~<„©uªs.h
>

23 
	~<sys/ty≥s.h
>

25 
	~<√töë/ö.h
>

27 
__BEGIN_DECLS


29 
	stime°amp


31 
u_öt8_t
 
	mÀn
;

32 
u_öt8_t
 
	m±r
;

33 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


34 
	mÊags
:4;

35 
	movîÊow
:4;

36 #ñi‡
__BYTE_ORDER
 =
__BIG_ENDIAN


37 
	movîÊow
:4;

38 
	mÊags
:4;

42 
u_öt32_t
 
	md©a
[9];

45 
	sùhdr


47 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


48 
	mihl
:4;

49 
	mvîsi⁄
:4;

50 #ñi‡
__BYTE_ORDER
 =
__BIG_ENDIAN


51 
	mvîsi⁄
:4;

52 
	mihl
:4;

56 
u_öt8_t
 
	mtos
;

57 
u_öt16_t
 
	mtŸ_Àn
;

58 
u_öt16_t
 
	mid
;

59 
u_öt16_t
 
	m‰ag_off
;

60 
u_öt8_t
 
	mâl
;

61 
u_öt8_t
 
	m¥Ÿocﬁ
;

62 
u_öt16_t
 
	mcheck
;

63 
u_öt32_t
 
	mßddr
;

64 
u_öt32_t
 
	mdaddr
;

68 #ifde‡
__USE_BSD


108 
	sù


110 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


111 
	mù_hl
:4;

112 
	mù_v
:4;

114 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


115 
	mù_v
:4;

116 
	mù_hl
:4;

118 
u_öt8_t
 
	mù_tos
;

119 
u_sh‹t
 
	mù_Àn
;

120 
u_sh‹t
 
	mù_id
;

121 
u_sh‹t
 
	mù_off
;

122 
	#IP_RF
 0x8000

	)

123 
	#IP_DF
 0x4000

	)

124 
	#IP_MF
 0x2000

	)

125 
	#IP_OFFMASK
 0x1ff‡

	)

126 
u_öt8_t
 
	mù_âl
;

127 
u_öt8_t
 
	mù_p
;

128 
u_sh‹t
 
	mù_sum
;

129 
ö_addr
 
	mù_§c
, 
	mù_d°
;

135 
	sù_time°amp


137 
u_öt8_t
 
	mùt_code
;

138 
u_öt8_t
 
	mùt_Àn
;

139 
u_öt8_t
 
	mùt_±r
;

140 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


141 
	mùt_Êg
:4;

142 
	mùt_oÊw
:4;

144 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


145 
	mùt_oÊw
:4;

146 
	mùt_Êg
:4;

148 
u_öt32_t
 
	md©a
[9];

152 
	#IPVERSION
 4

	)

153 
	#IP_MAXPACKET
 65535

	)

161 
	#IPTOS_ECN_MASK
 0x03

	)

162 
	#IPTOS_ECN
(
x
Ë((xË& 
IPTOS_ECN_MASK
)

	)

163 
	#IPTOS_ECN_NOT_ECT
 0x00

	)

164 
	#IPTOS_ECN_ECT1
 0x01

	)

165 
	#IPTOS_ECN_ECT0
 0x02

	)

166 
	#IPTOS_ECN_CE
 0x03

	)

174 
	#IPTOS_DSCP_MASK
 0xfc

	)

175 
	#IPTOS_DSCP
(
x
Ë((xË& 
IPTOS_DSCP_MASK
)

	)

176 
	#IPTOS_DSCP_AF11
 0x28

	)

177 
	#IPTOS_DSCP_AF12
 0x30

	)

178 
	#IPTOS_DSCP_AF13
 0x38

	)

179 
	#IPTOS_DSCP_AF21
 0x48

	)

180 
	#IPTOS_DSCP_AF22
 0x50

	)

181 
	#IPTOS_DSCP_AF23
 0x58

	)

182 
	#IPTOS_DSCP_AF31
 0x68

	)

183 
	#IPTOS_DSCP_AF32
 0x70

	)

184 
	#IPTOS_DSCP_AF33
 0x78

	)

185 
	#IPTOS_DSCP_AF41
 0x88

	)

186 
	#IPTOS_DSCP_AF42
 0x90

	)

187 
	#IPTOS_DSCP_AF43
 0x98

	)

188 
	#IPTOS_DSCP_EF
 0xb8

	)

195 
	#IPTOS_CLASS_MASK
 0xe0

	)

196 
	#IPTOS_CLASS
(
˛ass
Ë((˛assË& 
IPTOS_CLASS_MASK
)

	)

197 
	#IPTOS_CLASS_CS0
 0x00

	)

198 
	#IPTOS_CLASS_CS1
 0x20

	)

199 
	#IPTOS_CLASS_CS2
 0x40

	)

200 
	#IPTOS_CLASS_CS3
 0x60

	)

201 
	#IPTOS_CLASS_CS4
 0x80

	)

202 
	#IPTOS_CLASS_CS5
 0xa0

	)

203 
	#IPTOS_CLASS_CS6
 0xc0

	)

204 
	#IPTOS_CLASS_CS7
 0xe0

	)

206 
	#IPTOS_CLASS_DEFAULT
 
IPTOS_CLASS_CS0


	)

212 
	#IPTOS_TOS_MASK
 0x1E

	)

213 
	#IPTOS_TOS
(
tos
Ë(—osË& 
IPTOS_TOS_MASK
)

	)

214 
	#IPTOS_LOWDELAY
 0x10

	)

215 
	#IPTOS_THROUGHPUT
 0x08

	)

216 
	#IPTOS_RELIABILITY
 0x04

	)

217 
	#IPTOS_LOWCOST
 0x02

	)

218 
	#IPTOS_MINCOST
 
IPTOS_LOWCOST


	)

223 
	#IPTOS_PREC_MASK
 
IPTOS_CLASS_MASK


	)

224 
	#IPTOS_PREC
(
tos
Ë
	`IPTOS_CLASS
—os)

	)

225 
	#IPTOS_PREC_NETCONTROL
 
IPTOS_CLASS_CS7


	)

226 
	#IPTOS_PREC_INTERNETCONTROL
 
IPTOS_CLASS_CS6


	)

227 
	#IPTOS_PREC_CRITIC_ECP
 
IPTOS_CLASS_CS5


	)

228 
	#IPTOS_PREC_FLASHOVERRIDE
 
IPTOS_CLASS_CS4


	)

229 
	#IPTOS_PREC_FLASH
 
IPTOS_CLASS_CS3


	)

230 
	#IPTOS_PREC_IMMEDIATE
 
IPTOS_CLASS_CS2


	)

231 
	#IPTOS_PREC_PRIORITY
 
IPTOS_CLASS_CS1


	)

232 
	#IPTOS_PREC_ROUTINE
 
IPTOS_CLASS_CS0


	)

237 
	#IPOPT_COPY
 0x80

	)

238 
	#IPOPT_CLASS_MASK
 0x60

	)

239 
	#IPOPT_NUMBER_MASK
 0x1f

	)

241 
	#IPOPT_COPIED
(
o
Ë((oË& 
IPOPT_COPY
)

	)

242 
	#IPOPT_CLASS
(
o
Ë((oË& 
IPOPT_CLASS_MASK
)

	)

243 
	#IPOPT_NUMBER
(
o
Ë((oË& 
IPOPT_NUMBER_MASK
)

	)

245 
	#IPOPT_CONTROL
 0x00

	)

246 
	#IPOPT_RESERVED1
 0x20

	)

247 
	#IPOPT_DEBMEAS
 0x40

	)

248 
	#IPOPT_MEASUREMENT
 
IPOPT_DEBMEAS


	)

249 
	#IPOPT_RESERVED2
 0x60

	)

251 
	#IPOPT_EOL
 0

	)

252 
	#IPOPT_END
 
IPOPT_EOL


	)

253 
	#IPOPT_NOP
 1

	)

254 
	#IPOPT_NOOP
 
IPOPT_NOP


	)

256 
	#IPOPT_RR
 7

	)

257 
	#IPOPT_TS
 68

	)

258 
	#IPOPT_TIMESTAMP
 
IPOPT_TS


	)

259 
	#IPOPT_SECURITY
 130

	)

260 
	#IPOPT_SEC
 
IPOPT_SECURITY


	)

261 
	#IPOPT_LSRR
 131

	)

262 
	#IPOPT_SATID
 136

	)

263 
	#IPOPT_SID
 
IPOPT_SATID


	)

264 
	#IPOPT_SSRR
 137

	)

265 
	#IPOPT_RA
 148

	)

270 
	#IPOPT_OPTVAL
 0

	)

271 
	#IPOPT_OLEN
 1

	)

272 
	#IPOPT_OFFSET
 2

	)

273 
	#IPOPT_MINOFF
 4

	)

275 
	#MAX_IPOPTLEN
 40

	)

278 
	#IPOPT_TS_TSONLY
 0

	)

279 
	#IPOPT_TS_TSANDADDR
 1

	)

280 
	#IPOPT_TS_PRESPEC
 3

	)

283 
	#IPOPT_SECUR_UNCLASS
 0x0000

	)

284 
	#IPOPT_SECUR_CONFID
 0xf135

	)

285 
	#IPOPT_SECUR_EFTO
 0x789a

	)

286 
	#IPOPT_SECUR_MMMM
 0xbc4d

	)

287 
	#IPOPT_SECUR_RESTR
 0xaf13

	)

288 
	#IPOPT_SECUR_SECRET
 0xd788

	)

289 
	#IPOPT_SECUR_TOPSECRET
 0x6bc5

	)

294 
	#MAXTTL
 255

	)

295 
	#IPDEFTTL
 64

	)

296 
	#IPFRAGTTL
 60

	)

297 
	#IPTTLDEC
 1

	)

299 
	#IP_MSS
 576

	)

301 
	g__END_DECLS


	@/usr/include/netinet/ip6.h

19 #i‚de‡
_NETINET_IP6_H


20 
	#_NETINET_IP6_H
 1

	)

22 
	~<öây≥s.h
>

23 
	~<√töë/ö.h
>

25 
	sù6_hdr


29 
	sù6_hdr˘l


31 
uöt32_t
 
	mù6_un1_Êow
;

33 
uöt16_t
 
	mù6_un1_∂í
;

34 
uöt8_t
 
	mù6_un1_nxt
;

35 
uöt8_t
 
	mù6_un1_hlim
;

36 } 
	mù6_un1
;

37 
uöt8_t
 
	mù6_un2_vfc
;

38 } 
	mù6_˘lun
;

39 
ö6_addr
 
	mù6_§c
;

40 
ö6_addr
 
	mù6_d°
;

43 
	#ù6_vfc
 
ù6_˘lun
.
ù6_un2_vfc


	)

44 
	#ù6_Êow
 
ù6_˘lun
.
ù6_un1
.
ù6_un1_Êow


	)

45 
	#ù6_∂í
 
ù6_˘lun
.
ù6_un1
.
ù6_un1_∂í


	)

46 
	#ù6_nxt
 
ù6_˘lun
.
ù6_un1
.
ù6_un1_nxt


	)

47 
	#ù6_hlim
 
ù6_˘lun
.
ù6_un1
.
ù6_un1_hlim


	)

48 
	#ù6_h›s
 
ù6_˘lun
.
ù6_un1
.
ù6_un1_hlim


	)

51 
	sù6_ext


53 
uöt8_t
 
	mù6e_nxt
;

54 
uöt8_t
 
	mù6e_Àn
;

58 
	sù6_hbh


60 
uöt8_t
 
	mù6h_nxt
;

61 
uöt8_t
 
	mù6h_Àn
;

66 
	sù6_de°


68 
uöt8_t
 
	mù6d_nxt
;

69 
uöt8_t
 
	mù6d_Àn
;

74 
	sù6_πhdr


76 
uöt8_t
 
	mù6r_nxt
;

77 
uöt8_t
 
	mù6r_Àn
;

78 
uöt8_t
 
	mù6r_ty≥
;

79 
uöt8_t
 
	mù6r_£gÀ·
;

84 
	sù6_πhdr0


86 
uöt8_t
 
	mù6r0_nxt
;

87 
uöt8_t
 
	mù6r0_Àn
;

88 
uöt8_t
 
	mù6r0_ty≥
;

89 
uöt8_t
 
	mù6r0_£gÀ·
;

90 
uöt8_t
 
	mù6r0_ª£rved
;

91 
uöt8_t
 
	mù6r0_¶m≠
[3];

93 
ö6_addr
 
	mù6r0_addr
[0];

97 
	sù6_‰ag


99 
uöt8_t
 
	mù6f_nxt
;

100 
uöt8_t
 
	mù6f_ª£rved
;

101 
uöt16_t
 
	mù6f_ofÊg
;

102 
uöt32_t
 
	mù6f_idít
;

105 #i‡
BYTE_ORDER
 =
BIG_ENDIAN


106 
	#IP6F_OFF_MASK
 0xfff8

	)

107 
	#IP6F_RESERVED_MASK
 0x0006

	)

108 
	#IP6F_MORE_FRAG
 0x0001

	)

110 
	#IP6F_OFF_MASK
 0xf8f‡

	)

111 
	#IP6F_RESERVED_MASK
 0x0600

	)

112 
	#IP6F_MORE_FRAG
 0x0100

	)

116 
	sù6_›t


118 
uöt8_t
 
	mù6o_ty≥
;

119 
uöt8_t
 
	mù6o_Àn
;

126 
	#IP6OPT_TYPE
(
o
Ë((oË& 0xc0)

	)

127 
	#IP6OPT_TYPE_SKIP
 0x00

	)

128 
	#IP6OPT_TYPE_DISCARD
 0x40

	)

129 
	#IP6OPT_TYPE_FORCEICMP
 0x80

	)

130 
	#IP6OPT_TYPE_ICMP
 0xc0

	)

131 
	#IP6OPT_TYPE_MUTABLE
 0x20

	)

134 
	#IP6OPT_PAD1
 0

	)

135 
	#IP6OPT_PADN
 1

	)

137 
	#IP6OPT_JUMBO
 0xc2

	)

138 
	#IP6OPT_NSAP_ADDR
 0xc3

	)

139 
	#IP6OPT_TUNNEL_LIMIT
 0x04

	)

140 
	#IP6OPT_ROUTER_ALERT
 0x05

	)

143 
	sù6_›t_jumbo


145 
uöt8_t
 
	mù6oj_ty≥
;

146 
uöt8_t
 
	mù6oj_Àn
;

147 
uöt8_t
 
	mù6oj_jumbo_Àn
[4];

149 
	#IP6OPT_JUMBO_LEN
 6

	)

152 
	sù6_›t_nßp


154 
uöt8_t
 
	mù6⁄_ty≥
;

155 
uöt8_t
 
	mù6⁄_Àn
;

156 
uöt8_t
 
	mù6⁄_§c_nßp_Àn
;

157 
uöt8_t
 
	mù6⁄_d°_nßp_Àn
;

163 
	sù6_›t_tu¬ñ


165 
uöt8_t
 
	mù6Ÿ_ty≥
;

166 
uöt8_t
 
	mù6Ÿ_Àn
;

167 
uöt8_t
 
	mù6Ÿ_íˇp_limô
;

171 
	sù6_›t_rouãr


173 
uöt8_t
 
	mù6‹_ty≥
;

174 
uöt8_t
 
	mù6‹_Àn
;

175 
uöt8_t
 
	mù6‹_vÆue
[2];

179 #i‡
BYTE_ORDER
 =
BIG_ENDIAN


180 
	#IP6_ALERT_MLD
 0x0000

	)

181 
	#IP6_ALERT_RSVP
 0x0001

	)

182 
	#IP6_ALERT_AN
 0x0002

	)

184 
	#IP6_ALERT_MLD
 0x0000

	)

185 
	#IP6_ALERT_RSVP
 0x0100

	)

186 
	#IP6_ALERT_AN
 0x0200

	)

	@/usr/include/netinet/ip_icmp.h

19 #i‚de‡
__NETINET_IP_ICMP_H


20 
	#__NETINET_IP_ICMP_H
 1

	)

22 
	~<sys/cdefs.h
>

23 
	~<sys/ty≥s.h
>

25 
__BEGIN_DECLS


27 
	sicmphdr


29 
u_öt8_t
 
	mty≥
;

30 
u_öt8_t
 
	mcode
;

31 
u_öt16_t
 
	mchecksum
;

36 
u_öt16_t
 
	mid
;

37 
u_öt16_t
 
	m£quí˚
;

38 } 
	mecho
;

39 
u_öt32_t
 
	mg©eway
;

42 
u_öt16_t
 
	m__unu£d
;

43 
u_öt16_t
 
	mmtu
;

44 } 
	m‰ag
;

45 } 
	mun
;

48 
	#ICMP_ECHOREPLY
 0

	)

49 
	#ICMP_DEST_UNREACH
 3

	)

50 
	#ICMP_SOURCE_QUENCH
 4

	)

51 
	#ICMP_REDIRECT
 5

	)

52 
	#ICMP_ECHO
 8

	)

53 
	#ICMP_TIME_EXCEEDED
 11

	)

54 
	#ICMP_PARAMETERPROB
 12

	)

55 
	#ICMP_TIMESTAMP
 13

	)

56 
	#ICMP_TIMESTAMPREPLY
 14

	)

57 
	#ICMP_INFO_REQUEST
 15

	)

58 
	#ICMP_INFO_REPLY
 16

	)

59 
	#ICMP_ADDRESS
 17

	)

60 
	#ICMP_ADDRESSREPLY
 18

	)

61 
	#NR_ICMP_TYPES
 18

	)

65 
	#ICMP_NET_UNREACH
 0

	)

66 
	#ICMP_HOST_UNREACH
 1

	)

67 
	#ICMP_PROT_UNREACH
 2

	)

68 
	#ICMP_PORT_UNREACH
 3

	)

69 
	#ICMP_FRAG_NEEDED
 4

	)

70 
	#ICMP_SR_FAILED
 5

	)

71 
	#ICMP_NET_UNKNOWN
 6

	)

72 
	#ICMP_HOST_UNKNOWN
 7

	)

73 
	#ICMP_HOST_ISOLATED
 8

	)

74 
	#ICMP_NET_ANO
 9

	)

75 
	#ICMP_HOST_ANO
 10

	)

76 
	#ICMP_NET_UNR_TOS
 11

	)

77 
	#ICMP_HOST_UNR_TOS
 12

	)

78 
	#ICMP_PKT_FILTERED
 13

	)

79 
	#ICMP_PREC_VIOLATION
 14

	)

80 
	#ICMP_PREC_CUTOFF
 15

	)

81 
	#NR_ICMP_UNREACH
 15

	)

84 
	#ICMP_REDIR_NET
 0

	)

85 
	#ICMP_REDIR_HOST
 1

	)

86 
	#ICMP_REDIR_NETTOS
 2

	)

87 
	#ICMP_REDIR_HOSTTOS
 3

	)

90 
	#ICMP_EXC_TTL
 0

	)

91 
	#ICMP_EXC_FRAGTIME
 1

	)

94 #ifde‡
__USE_BSD


126 
	~<√töë/ö.h
>

127 
	~<√töë/ù.h
>

132 
	sicmp_ø_addr


134 
u_öt32_t
 
	múa_addr
;

135 
u_öt32_t
 
	múa_¥e„ªn˚
;

138 
	sicmp


140 
u_öt8_t
 
	micmp_ty≥
;

141 
u_öt8_t
 
	micmp_code
;

142 
u_öt16_t
 
	micmp_cksum
;

145 
u_ch¨
 
	mih_µå
;

146 
ö_addr
 
	mih_gwaddr
;

147 
	sih_id£q


149 
u_öt16_t
 
	micd_id
;

150 
u_öt16_t
 
	micd_£q
;

151 } 
	mih_id£q
;

152 
u_öt32_t
 
	mih_void
;

155 
	sih_pmtu


157 
u_öt16_t
 
	mùm_void
;

158 
u_öt16_t
 
	mùm_√xtmtu
;

159 } 
	mih_pmtu
;

161 
	sih_πødv


163 
u_öt8_t
 
	mút_num_addrs
;

164 
u_öt8_t
 
	mút_w∑
;

165 
u_öt16_t
 
	mút_li„time
;

166 } 
	mih_πødv
;

167 } 
	micmp_hun
;

168 
	#icmp_µå
 
icmp_hun
.
ih_µå


	)

169 
	#icmp_gwaddr
 
icmp_hun
.
ih_gwaddr


	)

170 
	#icmp_id
 
icmp_hun
.
ih_id£q
.
icd_id


	)

171 
	#icmp_£q
 
icmp_hun
.
ih_id£q
.
icd_£q


	)

172 
	#icmp_void
 
icmp_hun
.
ih_void


	)

173 
	#icmp_pmvoid
 
icmp_hun
.
ih_pmtu
.
ùm_void


	)

174 
	#icmp_√xtmtu
 
icmp_hun
.
ih_pmtu
.
ùm_√xtmtu


	)

175 
	#icmp_num_addrs
 
icmp_hun
.
ih_πødv
.
út_num_addrs


	)

176 
	#icmp_w∑
 
icmp_hun
.
ih_πødv
.
út_w∑


	)

177 
	#icmp_li„time
 
icmp_hun
.
ih_πødv
.
út_li„time


	)

182 
u_öt32_t
 
	môs_Ÿime
;

183 
u_öt32_t
 
	môs_πime
;

184 
u_öt32_t
 
	môs_âime
;

185 } 
	mid_ts
;

188 
ù
 
	midi_ù
;

190 } 
	mid_ù
;

191 
icmp_ø_addr
 
	mid_ødv
;

192 
u_öt32_t
 
	mid_mask
;

193 
u_öt8_t
 
	mid_d©a
[1];

194 } 
	micmp_dun
;

195 
	#icmp_Ÿime
 
icmp_dun
.
id_ts
.
ôs_Ÿime


	)

196 
	#icmp_πime
 
icmp_dun
.
id_ts
.
ôs_πime


	)

197 
	#icmp_âime
 
icmp_dun
.
id_ts
.
ôs_âime


	)

198 
	#icmp_ù
 
icmp_dun
.
id_ù
.
idi_ù


	)

199 
	#icmp_ødv
 
icmp_dun
.
id_ødv


	)

200 
	#icmp_mask
 
icmp_dun
.
id_mask


	)

201 
	#icmp_d©a
 
icmp_dun
.
id_d©a


	)

212 
	#ICMP_MINLEN
 8

	)

213 
	#ICMP_TSLEN
 (8 + 3 *  (
n_time
)Ë

	)

214 
	#ICMP_MASKLEN
 12

	)

215 
	#ICMP_ADVLENMIN
 (8 +  (
ù
Ë+ 8Ë

	)

216 #i‚de‡
_IP_VHL


217 
	#ICMP_ADVLEN
(
p
Ë(8 + (’)->
icmp_ù
.
ù_hl
 << 2Ë+ 8)

	)

220 
	#ICMP_ADVLEN
(
p
Ë(8 + (
	`IP_VHL_HL
(’)->
icmp_ù
.
ù_vhl
Ë<< 2Ë+ 8)

	)

226 
	#ICMP_UNREACH
 3

	)

227 
	#ICMP_SOURCEQUENCH
 4

	)

228 
	#ICMP_ROUTERADVERT
 9

	)

229 
	#ICMP_ROUTERSOLICIT
 10

	)

230 
	#ICMP_TIMXCEED
 11

	)

231 
	#ICMP_PARAMPROB
 12

	)

232 
	#ICMP_TSTAMP
 13

	)

233 
	#ICMP_TSTAMPREPLY
 14

	)

234 
	#ICMP_IREQ
 15

	)

235 
	#ICMP_IREQREPLY
 16

	)

236 
	#ICMP_MASKREQ
 17

	)

237 
	#ICMP_MASKREPLY
 18

	)

239 
	#ICMP_MAXTYPE
 18

	)

242 
	#ICMP_UNREACH_NET
 0

	)

243 
	#ICMP_UNREACH_HOST
 1

	)

244 
	#ICMP_UNREACH_PROTOCOL
 2

	)

245 
	#ICMP_UNREACH_PORT
 3

	)

246 
	#ICMP_UNREACH_NEEDFRAG
 4

	)

247 
	#ICMP_UNREACH_SRCFAIL
 5

	)

248 
	#ICMP_UNREACH_NET_UNKNOWN
 6

	)

249 
	#ICMP_UNREACH_HOST_UNKNOWN
 7

	)

250 
	#ICMP_UNREACH_ISOLATED
 8

	)

251 
	#ICMP_UNREACH_NET_PROHIB
 9

	)

252 
	#ICMP_UNREACH_HOST_PROHIB
 10

	)

253 
	#ICMP_UNREACH_TOSNET
 11

	)

254 
	#ICMP_UNREACH_TOSHOST
 12

	)

255 
	#ICMP_UNREACH_FILTER_PROHIB
 13

	)

256 
	#ICMP_UNREACH_HOST_PRECEDENCE
 14

	)

257 
	#ICMP_UNREACH_PRECEDENCE_CUTOFF
 15

	)

260 
	#ICMP_REDIRECT_NET
 0

	)

261 
	#ICMP_REDIRECT_HOST
 1

	)

262 
	#ICMP_REDIRECT_TOSNET
 2

	)

263 
	#ICMP_REDIRECT_TOSHOST
 3

	)

266 
	#ICMP_TIMXCEED_INTRANS
 0

	)

267 
	#ICMP_TIMXCEED_REASS
 1

	)

270 
	#ICMP_PARAMPROB_OPTABSENT
 1

	)

272 
	#ICMP_INFOTYPE
(
ty≥
) \

273 ((
ty≥
Ë=
ICMP_ECHOREPLY
 || (ty≥Ë=
ICMP_ECHO
 || \

274 (
ty≥
Ë=
ICMP_ROUTERADVERT
 || (ty≥Ë=
ICMP_ROUTERSOLICIT
 || \

275 (
ty≥
Ë=
ICMP_TSTAMP
 || (ty≥Ë=
ICMP_TSTAMPREPLY
 || \

276 (
ty≥
Ë=
ICMP_IREQ
 || (ty≥Ë=
ICMP_IREQREPLY
 || \

277 (
ty≥
Ë=
ICMP_MASKREQ
 || (ty≥Ë=
ICMP_MASKREPLY
)

	)

281 
	g__END_DECLS


	@/usr/include/netinet/udp.h

48 #i‚de‡
__NETINET_UDP_H


49 
	#__NETINET_UDP_H
 1

	)

51 
	~<„©uªs.h
>

52 
	~<sys/ty≥s.h
>

56 #ifde‡
__FAVOR_BSD


58 
	sudphdr


60 
u_öt16_t
 
	muh_•‹t
;

61 
u_öt16_t
 
	muh_dp‹t
;

62 
u_öt16_t
 
	muh_uÀn
;

63 
u_öt16_t
 
	muh_sum
;

68 
	sudphdr


70 
u_öt16_t
 
	msour˚
;

71 
u_öt16_t
 
	mde°
;

72 
u_öt16_t
 
	mÀn
;

73 
u_öt16_t
 
	mcheck
;

78 
	#UDP_CORK
 1

	)

79 
	#UDP_ENCAP
 100

	)

83 
	#UDP_ENCAP_ESPINUDP_NON_IKE
 1

	)

84 
	#UDP_ENCAP_ESPINUDP
 2

	)

85 
	#UDP_ENCAP_L2TPINUDP
 3

	)

87 
	#SOL_UDP
 17

	)

	@/usr/include/netpacket/packet.h

20 #i‚de‡
__NETPACKET_PACKET_H


21 
	#__NETPACKET_PACKET_H
 1

	)

23 
	ssockaddr_Œ


25 
	m¶l_Ámûy
;

26 
	m¶l_¥Ÿocﬁ
;

27 
	m¶l_ifödex
;

28 
	m¶l_h©y≥
;

29 
	m¶l_pkây≥
;

30 
	m¶l_hÆí
;

31 
	m¶l_addr
[8];

36 
	#PACKET_HOST
 0

	)

37 
	#PACKET_BROADCAST
 1

	)

38 
	#PACKET_MULTICAST
 2

	)

39 
	#PACKET_OTHERHOST
 3

	)

40 
	#PACKET_OUTGOING
 4

	)

41 
	#PACKET_LOOPBACK
 5

	)

42 
	#PACKET_FASTROUTE
 6

	)

46 
	#PACKET_ADD_MEMBERSHIP
 1

	)

47 
	#PACKET_DROP_MEMBERSHIP
 2

	)

48 
	#PACKET_RECV_OUTPUT
 3

	)

49 
	#PACKET_RX_RING
 5

	)

50 
	#PACKET_STATISTICS
 6

	)

52 
	s∑ckë_mªq


54 
	mmr_ifödex
;

55 
	mmr_ty≥
;

56 
	mmr_Æí
;

57 
	mmr_addªss
[8];

60 
	#PACKET_MR_MULTICAST
 0

	)

61 
	#PACKET_MR_PROMISC
 1

	)

62 
	#PACKET_MR_ALLMULTI
 2

	)

	@/usr/include/pthread.h

20 #i‚de‡
_PTHREAD_H


21 
	#_PTHREAD_H
 1

	)

23 
	~<„©uªs.h
>

24 
	~<ídün.h
>

25 
	~<sched.h
>

26 
	~<time.h
>

28 
	~<bôs/±hªadty≥s.h
>

29 
	~<bôs/£tjmp.h
>

30 
	~<bôs/w‹dsize.h
>

36 
	mPTHREAD_CREATE_JOINABLE
,

37 
	#PTHREAD_CREATE_JOINABLE
 
PTHREAD_CREATE_JOINABLE


	)

38 
	mPTHREAD_CREATE_DETACHED


39 
	#PTHREAD_CREATE_DETACHED
 
PTHREAD_CREATE_DETACHED


	)

46 
	mPTHREAD_MUTEX_TIMED_NP
,

47 
	mPTHREAD_MUTEX_RECURSIVE_NP
,

48 
	mPTHREAD_MUTEX_ERRORCHECK_NP
,

49 
	mPTHREAD_MUTEX_ADAPTIVE_NP


50 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


52 
	mPTHREAD_MUTEX_NORMAL
 = 
PTHREAD_MUTEX_TIMED_NP
,

53 
	mPTHREAD_MUTEX_RECURSIVE
 = 
PTHREAD_MUTEX_RECURSIVE_NP
,

54 
	mPTHREAD_MUTEX_ERRORCHECK
 = 
PTHREAD_MUTEX_ERRORCHECK_NP
,

55 
	mPTHREAD_MUTEX_DEFAULT
 = 
PTHREAD_MUTEX_NORMAL


57 #ifde‡
__USE_GNU


59 , 
	mPTHREAD_MUTEX_FAST_NP
 = 
PTHREAD_MUTEX_TIMED_NP


64 #ifde‡
__USE_XOPEN2K


68 
	mPTHREAD_MUTEX_STALLED
,

69 
	mPTHREAD_MUTEX_STALLED_NP
 = 
PTHREAD_MUTEX_STALLED
,

70 
	mPTHREAD_MUTEX_ROBUST
,

71 
	mPTHREAD_MUTEX_ROBUST_NP
 = 
PTHREAD_MUTEX_ROBUST


76 #ifde‡
__USE_UNIX98


80 
	mPTHREAD_PRIO_NONE
,

81 
	mPTHREAD_PRIO_INHERIT
,

82 
	mPTHREAD_PRIO_PROTECT


88 #i‡
__WORDSIZE
 == 64

89 
	#PTHREAD_MUTEX_INITIALIZER
 \

90 { { 0, 0, 0, 0, 0, 0, { 0, 0 } } }

	)

91 #ifde‡
__USE_GNU


92 
	#PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
 \

93 { { 0, 0, 0, 0, 
PTHREAD_MUTEX_RECURSIVE_NP
, 0, { 0, 0 } } }

	)

94 
	#PTHREAD_ERRORCHECK_MUTEX_INITIALIZER_NP
 \

95 { { 0, 0, 0, 0, 
PTHREAD_MUTEX_ERRORCHECK_NP
, 0, { 0, 0 } } }

	)

96 
	#PTHREAD_ADAPTIVE_MUTEX_INITIALIZER_NP
 \

97 { { 0, 0, 0, 0, 
PTHREAD_MUTEX_ADAPTIVE_NP
, 0, { 0, 0 } } }

	)

100 
	#PTHREAD_MUTEX_INITIALIZER
 \

101 { { 0, 0, 0, 0, 0, { 0 } } }

	)

102 #ifde‡
__USE_GNU


103 
	#PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
 \

104 { { 0, 0, 0, 
PTHREAD_MUTEX_RECURSIVE_NP
, 0, { 0 } } }

	)

105 
	#PTHREAD_ERRORCHECK_MUTEX_INITIALIZER_NP
 \

106 { { 0, 0, 0, 
PTHREAD_MUTEX_ERRORCHECK_NP
, 0, { 0 } } }

	)

107 
	#PTHREAD_ADAPTIVE_MUTEX_INITIALIZER_NP
 \

108 { { 0, 0, 0, 
PTHREAD_MUTEX_ADAPTIVE_NP
, 0, { 0 } } }

	)

114 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


117 
	mPTHREAD_RWLOCK_PREFER_READER_NP
,

118 
	mPTHREAD_RWLOCK_PREFER_WRITER_NP
,

119 
	mPTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
,

120 
	mPTHREAD_RWLOCK_DEFAULT_NP
 = 
PTHREAD_RWLOCK_PREFER_READER_NP


124 
	#PTHREAD_RWLOCK_INITIALIZER
 \

125 { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }

	)

126 #ifde‡
__USE_GNU


127 #i‡
__WORDSIZE
 == 64

128 
	#PTHREAD_RWLOCK_WRITER_NONRECURSIVE_INITIALIZER_NP
 \

130 
PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
 } }

	)

132 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


133 
	#PTHREAD_RWLOCK_WRITER_NONRECURSIVE_INITIALIZER_NP
 \

134 { { 0, 0, 0, 0, 0, 0, 
PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
, \

135 0, 0, 0, 0 } }

	)

137 
	#PTHREAD_RWLOCK_WRITER_NONRECURSIVE_INITIALIZER_NP
 \

138 { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 
PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
,\

139 0 } }

	)

149 
	mPTHREAD_INHERIT_SCHED
,

150 
	#PTHREAD_INHERIT_SCHED
 
PTHREAD_INHERIT_SCHED


	)

151 
	mPTHREAD_EXPLICIT_SCHED


152 
	#PTHREAD_EXPLICIT_SCHED
 
PTHREAD_EXPLICIT_SCHED


	)

159 
	mPTHREAD_SCOPE_SYSTEM
,

160 
	#PTHREAD_SCOPE_SYSTEM
 
PTHREAD_SCOPE_SYSTEM


	)

161 
	mPTHREAD_SCOPE_PROCESS


162 
	#PTHREAD_SCOPE_PROCESS
 
PTHREAD_SCOPE_PROCESS


	)

169 
	mPTHREAD_PROCESS_PRIVATE
,

170 
	#PTHREAD_PROCESS_PRIVATE
 
PTHREAD_PROCESS_PRIVATE


	)

171 
	mPTHREAD_PROCESS_SHARED


172 
	#PTHREAD_PROCESS_SHARED
 
PTHREAD_PROCESS_SHARED


	)

178 
	#PTHREAD_COND_INITIALIZER
 { { 0, 0, 0, 0, 0, (*Ë0, 0, 0 } }

	)

182 
	s_±hªad_˛ónup_buf„r


184 (*
	m__routöe
) (*);

185 *
	m__¨g
;

186 
	m__ˇn˚…y≥
;

187 
_±hªad_˛ónup_buf„r
 *
	m__¥ev
;

193 
	mPTHREAD_CANCEL_ENABLE
,

194 
	#PTHREAD_CANCEL_ENABLE
 
PTHREAD_CANCEL_ENABLE


	)

195 
	mPTHREAD_CANCEL_DISABLE


196 
	#PTHREAD_CANCEL_DISABLE
 
PTHREAD_CANCEL_DISABLE


	)

200 
	mPTHREAD_CANCEL_DEFERRED
,

201 
	#PTHREAD_CANCEL_DEFERRED
 
PTHREAD_CANCEL_DEFERRED


	)

202 
	mPTHREAD_CANCEL_ASYNCHRONOUS


203 
	#PTHREAD_CANCEL_ASYNCHRONOUS
 
PTHREAD_CANCEL_ASYNCHRONOUS


	)

205 
	#PTHREAD_CANCELED
 ((*Ë-1)

	)

209 
	#PTHREAD_ONCE_INIT
 0

	)

212 #ifde‡
__USE_XOPEN2K


216 
	#PTHREAD_BARRIER_SERIAL_THREAD
 -1

	)

220 
__BEGIN_DECLS


225 
±hªad_¸óã
 (
±hªad_t
 *
__ª°ri˘
 
__√wthªad
,

226 
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

227 *(*
__°¨t_routöe
) (*),

228 *
__ª°ri˘
 
__¨g
Ë
__THROW
 
__n⁄nuŒ
 ((1, 3));

234 
	$±hªad_exô
 (*
__ªtvÆ
Ë
	`__©åibuã__
 ((
__n‹ëu∫__
));

242 
	`±hªad_joö
 (
±hªad_t
 
__th
, **
__thªad_ªtu∫
);

244 #ifde‡
__USE_GNU


247 
	$±hªad_åyjoö_≈
 (
±hªad_t
 
__th
, **
__thªad_ªtu∫
Ë
__THROW
;

255 
	`±hªad_timedjoö_≈
 (
±hªad_t
 
__th
, **
__thªad_ªtu∫
,

256 
__c⁄°
 
time•ec
 *
__ab°ime
);

263 
	$±hªad_dëach
 (
±hªad_t
 
__th
Ë
__THROW
;

267 
±hªad_t
 
	$±hªad_£lf
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

270 
	$±hªad_equÆ
 (
±hªad_t
 
__thªad1
,Öthªad_à
__thªad2
Ë
__THROW
;

278 
	$±hªad_©å_öô
 (
±hªad_©å_t
 *
__©å
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

281 
	$±hªad_©å_de°roy
 (
±hªad_©å_t
 *
__©å
)

282 
__THROW
 
	`__n⁄nuŒ
 ((1));

285 
	$±hªad_©å_gëdëach°©e
 (
__c⁄°
 
±hªad_©å_t
 *
__©å
,

286 *
__dëach°©e
)

287 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

290 
	$±hªad_©å_£tdëach°©e
 (
±hªad_©å_t
 *
__©å
,

291 
__dëach°©e
)

292 
__THROW
 
	`__n⁄nuŒ
 ((1));

296 
	$±hªad_©å_gëgu¨dsize
 (
__c⁄°
 
±hªad_©å_t
 *
__©å
,

297 
size_t
 *
__gu¨dsize
)

298 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

301 
	$±hªad_©å_£tgu¨dsize
 (
±hªad_©å_t
 *
__©å
,

302 
size_t
 
__gu¨dsize
)

303 
__THROW
 
	`__n⁄nuŒ
 ((1));

307 
	$±hªad_©å_gësched∑øm
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘


308 
__©å
,

309 
sched_∑øm
 *
__ª°ri˘
 
__∑øm
)

310 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

313 
	$±hªad_©å_£tsched∑øm
 (
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

314 
__c⁄°
 
sched_∑øm
 *
__ª°ri˘


315 
__∑øm
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

318 
	$±hªad_©å_gëschedpﬁicy
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘


319 
__©å
, *
__ª°ri˘
 
__pﬁicy
)

320 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

323 
	$±hªad_©å_£tschedpﬁicy
 (
±hªad_©å_t
 *
__©å
, 
__pﬁicy
)

324 
__THROW
 
	`__n⁄nuŒ
 ((1));

327 
	$±hªad_©å_gëöhîôsched
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘


328 
__©å
, *
__ª°ri˘
 
__öhîô
)

329 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

332 
	$±hªad_©å_£töhîôsched
 (
±hªad_©å_t
 *
__©å
,

333 
__öhîô
)

334 
__THROW
 
	`__n⁄nuŒ
 ((1));

338 
	$±hªad_©å_gësc›e
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

339 *
__ª°ri˘
 
__sc›e
)

340 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

343 
	$±hªad_©å_£tsc›e
 (
±hªad_©å_t
 *
__©å
, 
__sc›e
)

344 
__THROW
 
	`__n⁄nuŒ
 ((1));

347 
	$±hªad_©å_gë°ackaddr
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘


348 
__©å
, **
__ª°ri˘
 
__°ackaddr
)

349 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__©åibuã_dïªˇãd__
;

355 
	$±hªad_©å_£t°ackaddr
 (
±hªad_©å_t
 *
__©å
,

356 *
__°ackaddr
)

357 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__©åibuã_dïªˇãd__
;

360 
	$±hªad_©å_gë°acksize
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘


361 
__©å
, 
size_t
 *
__ª°ri˘
 
__°acksize
)

362 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

367 
	$±hªad_©å_£t°acksize
 (
±hªad_©å_t
 *
__©å
,

368 
size_t
 
__°acksize
)

369 
__THROW
 
	`__n⁄nuŒ
 ((1));

371 #ifde‡
__USE_XOPEN2K


373 
	$±hªad_©å_gë°ack
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

374 **
__ª°ri˘
 
__°ackaddr
,

375 
size_t
 *
__ª°ri˘
 
__°acksize
)

376 
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

381 
	$±hªad_©å_£t°ack
 (
±hªad_©å_t
 *
__©å
, *
__°ackaddr
,

382 
size_t
 
__°acksize
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

385 #ifde‡
__USE_GNU


388 
	$±hªad_©å_£èfföôy_≈
 (
±hªad_©å_t
 *
__©å
,

389 
size_t
 
__˝u£tsize
,

390 
__c⁄°
 
˝u_£t_t
 *
__˝u£t
)

391 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

395 
	$±hªad_©å_gëafföôy_≈
 (
__c⁄°
 
±hªad_©å_t
 *
__©å
,

396 
size_t
 
__˝u£tsize
,

397 
˝u_£t_t
 *
__˝u£t
)

398 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

404 
	$±hªad_gë©å_≈
 (
±hªad_t
 
__th
, 
±hªad_©å_t
 *
__©å
)

405 
__THROW
 
	`__n⁄nuŒ
 ((2));

413 
	$±hªad_£tsched∑øm
 (
±hªad_t
 
__èrgë_thªad
, 
__pﬁicy
,

414 
__c⁄°
 
sched_∑øm
 *
__∑øm
)

415 
__THROW
 
	`__n⁄nuŒ
 ((3));

418 
	$±hªad_gësched∑øm
 (
±hªad_t
 
__èrgë_thªad
,

419 *
__ª°ri˘
 
__pﬁicy
,

420 
sched_∑øm
 *
__ª°ri˘
 
__∑øm
)

421 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

424 
	$±hªad_£tsched¥io
 (
±hªad_t
 
__èrgë_thªad
, 
__¥io
)

425 
__THROW
;

428 #ifde‡
__USE_GNU


430 
	$±hªad_gë«me_≈
 (
±hªad_t
 
__èrgë_thªad
, *
__buf
,

431 
size_t
 
__buÊí
)

432 
__THROW
 
	`__n⁄nuŒ
 ((2));

435 
	$±hªad_£äame_≈
 (
±hªad_t
 
__èrgë_thªad
, 
__c⁄°
 *
__«me
)

436 
__THROW
 
	`__n⁄nuŒ
 ((2));

440 #ifde‡
__USE_UNIX98


442 
	$±hªad_gëc⁄cuºícy
 (Ë
__THROW
;

445 
	$±hªad_£tc⁄cuºícy
 (
__Àvñ
Ë
__THROW
;

448 #ifde‡
__USE_GNU


453 
	$±hªad_yõld
 (Ë
__THROW
;

458 
	$±hªad_£èfföôy_≈
 (
±hªad_t
 
__th
, 
size_t
 
__˝u£tsize
,

459 
__c⁄°
 
˝u_£t_t
 *
__˝u£t
)

460 
__THROW
 
	`__n⁄nuŒ
 ((3));

463 
	$±hªad_gëafföôy_≈
 (
±hªad_t
 
__th
, 
size_t
 
__˝u£tsize
,

464 
˝u_£t_t
 *
__˝u£t
)

465 
__THROW
 
	`__n⁄nuŒ
 ((3));

478 
	`±hªad_⁄˚
 (
±hªad_⁄˚_t
 *
__⁄˚_c⁄åﬁ
,

479 (*
__öô_routöe
Ë()Ë
	`__n⁄nuŒ
 ((1, 2));

490 
	`±hªad_£tˇn˚l°©e
 (
__°©e
, *
__ﬁd°©e
);

494 
	`±hªad_£tˇn˚…y≥
 (
__ty≥
, *
__ﬁdty≥
);

497 
	`±hªad_ˇn˚l
 (
±hªad_t
 
__th
);

502 
	`±hªad_ã°ˇn˚l
 ();

511 
__jmp_buf
 
__ˇn˚l_jmp_buf
;

512 
__mask_was_ßved
;

513 } 
__ˇn˚l_jmp_buf
[1];

514 *
__∑d
[4];

515 } 
	t__±hªad_unwöd_buf_t
 
	t__©åibuã__
 ((
	t__Æig√d__
));

518 #i‚de‡
__˛ónup_f˘_©åibuã


519 
	#__˛ónup_f˘_©åibuã


	)

524 
	s__±hªad_˛ónup_‰ame


526 (*
__ˇn˚l_routöe
) (*);

527 *
__ˇn˚l_¨g
;

528 
__do_ô
;

529 
__ˇn˚l_ty≥
;

532 #i‡
deföed
 
__GNUC__
 && deföed 
__EXCEPTIONS


533 #ifde‡
__˝lu•lus


535 ˛as†
	c__±hªad_˛ónup_˛ass


537 (*
__ˇn˚l_routöe
) (*);

538 *
__ˇn˚l_¨g
;

539 
__do_ô
;

540 
__ˇn˚l_ty≥
;

542 
public
:

543 
	`__±hªad_˛ónup_˛ass
 ((*
__f˘
Ë(*), *
__¨g
)

544 : 
	`__ˇn˚l_routöe
 (
__f˘
), 
	`__ˇn˚l_¨g
 (
__¨g
), 
	$__do_ô
 (1) { }

545 ~
	$__±hªad_˛ónup_˛ass
 (Ë{ i‡(
__do_ô
Ë
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); 
	}
}

546 
	$__£tdoô
 (
__√wvÆ
Ë{ 
__do_ô
 = __√wvÆ; 
	}
}

547 
	$__de„r
 (Ë{ 
	`±hªad_£tˇn˚…y≥
 (
PTHREAD_CANCEL_DEFERRED
,

548 &
__ˇn˚l_ty≥
); 
	}
}

549 
	$__ª°‹e
 (Ëc⁄° { 
	`±hªad_£tˇn˚…y≥
 (
__ˇn˚l_ty≥
, 0); 
	}
}

559 
	#±hªad_˛ónup_push
(
routöe
, 
¨g
) \

561 
__±hªad_˛ónup_˛ass
 
	`__˛‰ame
 (
routöe
, 
¨g
)

	)

565 
	#±hªad_˛ónup_p›
(
execuã
) \

566 
__˛‰ame
.
	`__£tdoô
 (
execuã
); \

567 } 0)

	)

569 #ifde‡
__USE_GNU


573 
	#±hªad_˛ónup_push_de„r_≈
(
routöe
, 
¨g
) \

575 
__±hªad_˛ónup_˛ass
 
	`__˛‰ame
 (
routöe
, 
¨g
); \

576 
__˛‰ame
.
	`__de„r
 ()

	)

581 
	#±hªad_˛ónup_p›_ª°‹e_≈
(
execuã
) \

582 
__˛‰ame
.
	`__ª°‹e
 (); \

583 
__˛‰ame
.
	`__£tdoô
 (
execuã
); \

584 } 0)

	)

591 
__exã∫_ölöe
 

592 
	$__±hªad_˛ónup_routöe
 (
__±hªad_˛ónup_‰ame
 *
__‰ame
)

594 i‡(
__‰ame
->
__do_ô
)

595 
__‰ame
->
	`__ˇn˚l_routöe
 (__‰ame->
__ˇn˚l_¨g
);

596 
	}
}

605 
	#±hªad_˛ónup_push
(
routöe
, 
¨g
) \

607 
__±hªad_˛ónup_‰ame
 
__˛‰ame
 \

608 
	`__©åibuã__
 ((
	`__˛ónup__
 (
__±hªad_˛ónup_routöe
))) \

609 { .
__ˇn˚l_routöe
 = (
routöe
), .
__ˇn˚l_¨g
 = (
¨g
), \

610 .
__do_ô
 = 1 };

	)

614 
	#±hªad_˛ónup_p›
(
execuã
) \

615 
__˛‰ame
.
__do_ô
 = (
execuã
); \

616 } 0)

	)

618 #ifde‡
__USE_GNU


622 
	#±hªad_˛ónup_push_de„r_≈
(
routöe
, 
¨g
) \

624 
__±hªad_˛ónup_‰ame
 
__˛‰ame
 \

625 
	`__©åibuã__
 ((
	`__˛ónup__
 (
__±hªad_˛ónup_routöe
))) \

626 { .
__ˇn˚l_routöe
 = (
routöe
), .
__ˇn˚l_¨g
 = (
¨g
), \

627 .
__do_ô
 = 1 }; \

628 (Ë
	`±hªad_£tˇn˚…y≥
 (
PTHREAD_CANCEL_DEFERRED
, \

629 &
__˛‰ame
.
__ˇn˚l_ty≥
)

	)

634 
	#±hªad_˛ónup_p›_ª°‹e_≈
(
execuã
) \

635 (Ë
	`±hªad_£tˇn˚…y≥
 (
__˛‰ame
.
__ˇn˚l_ty≥
, 
NULL
); \

636 
__˛‰ame
.
__do_ô
 = (
execuã
); \

637 } 0)

	)

648 
	#±hªad_˛ónup_push
(
routöe
, 
¨g
) \

650 
__±hªad_unwöd_buf_t
 
__ˇn˚l_buf
; \

651 (*
__ˇn˚l_routöe
Ë(*Ë(
routöe
); \

652 *
__ˇn˚l_¨g
 = (
¨g
); \

653 
__nŸ_fú°_ˇŒ
 = 
	`__sig£tjmp
 ((
__jmp_buf_èg
 *) (*) \

654 
__ˇn˚l_buf
.
__ˇn˚l_jmp_buf
, 0); \

655 i‡(
	`__buûtö_ex≥˘
 (
__nŸ_fú°_ˇŒ
, 0)) \

657 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

658 
	`__±hªad_unwöd_√xt
 (&
__ˇn˚l_buf
); \

662 
	`__±hªad_ªgi°î_ˇn˚l
 (&
__ˇn˚l_buf
); \

663 dÿ{

	)

664 
__±hªad_ªgi°î_ˇn˚l
 (
__±hªad_unwöd_buf_t
 *
__buf
)

665 
__˛ónup_f˘_©åibuã
;

669 
	#±hªad_˛ónup_p›
(
execuã
) \

672 
	`__±hªad_uƒegi°î_ˇn˚l
 (&
__ˇn˚l_buf
); \

673 i‡(
execuã
) \

674 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

675 } 0)

	)

676 
	$__±hªad_uƒegi°î_ˇn˚l
 (
__±hªad_unwöd_buf_t
 *
__buf
)

677 
__˛ónup_f˘_©åibuã
;

679 #ifde‡
__USE_GNU


683 
	#±hªad_˛ónup_push_de„r_≈
(
routöe
, 
¨g
) \

685 
__±hªad_unwöd_buf_t
 
__ˇn˚l_buf
; \

686 (*
__ˇn˚l_routöe
Ë(*Ë(
routöe
); \

687 *
__ˇn˚l_¨g
 = (
¨g
); \

688 
__nŸ_fú°_ˇŒ
 = 
	`__sig£tjmp
 ((
__jmp_buf_èg
 *) (*) \

689 
__ˇn˚l_buf
.
__ˇn˚l_jmp_buf
, 0); \

690 i‡(
	`__buûtö_ex≥˘
 (
__nŸ_fú°_ˇŒ
, 0)) \

692 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

693 
	`__±hªad_unwöd_√xt
 (&
__ˇn˚l_buf
); \

697 
	`__±hªad_ªgi°î_ˇn˚l_de„r
 (&
__ˇn˚l_buf
); \

698 dÿ{

	)

699 
	`__±hªad_ªgi°î_ˇn˚l_de„r
 (
__±hªad_unwöd_buf_t
 *
__buf
)

700 
__˛ónup_f˘_©åibuã
;

705 
	#±hªad_˛ónup_p›_ª°‹e_≈
(
execuã
) \

708 
	`__±hªad_uƒegi°î_ˇn˚l_ª°‹e
 (&
__ˇn˚l_buf
); \

709 i‡(
execuã
) \

710 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

711 
	}
} 0)

	)

712 
	$__±hªad_uƒegi°î_ˇn˚l_ª°‹e
 (
__±hªad_unwöd_buf_t
 *
__buf
)

713 
__˛ónup_f˘_©åibuã
;

717 
	$__±hªad_unwöd_√xt
 (
__±hªad_unwöd_buf_t
 *
__buf
)

718 
__˛ónup_f˘_©åibuã
 
	`__©åibuã__
 ((
__n‹ëu∫__
))

719 #i‚de‡
SHARED


720 
	`__©åibuã__
 ((
__wók__
))

726 
__jmp_buf_èg
;

727 
	$__sig£tjmp
 (
__jmp_buf_èg
 *
__ív
, 
__ßvemask
Ë
__THROW
;

733 
	$±hªad_muãx_öô
 (
±hªad_muãx_t
 *
__muãx
,

734 
__c⁄°
 
±hªad_muãx©å_t
 *
__muãx©å
)

735 
__THROW
 
	`__n⁄nuŒ
 ((1));

738 
	$±hªad_muãx_de°roy
 (
±hªad_muãx_t
 *
__muãx
)

739 
__THROW
 
	`__n⁄nuŒ
 ((1));

742 
	$±hªad_muãx_åylock
 (
±hªad_muãx_t
 *
__muãx
)

743 
__THROW
 
	`__n⁄nuŒ
 ((1));

746 
	$±hªad_muãx_lock
 (
±hªad_muãx_t
 *
__muãx
)

747 
__THROW
 
	`__n⁄nuŒ
 ((1));

749 #ifde‡
__USE_XOPEN2K


751 
	$±hªad_muãx_timedlock
 (
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

752 
__c⁄°
 
time•ec
 *
__ª°ri˘


753 
__ab°ime
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

757 
	$±hªad_muãx_u∆ock
 (
±hªad_muãx_t
 *
__muãx
)

758 
__THROW
 
	`__n⁄nuŒ
 ((1));

762 
	$±hªad_muãx_gë¥io˚ûög
 (
__c⁄°
 
±hªad_muãx_t
 *

763 
__ª°ri˘
 
__muãx
,

764 *
__ª°ri˘
 
__¥io˚ûög
)

765 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

769 
	$±hªad_muãx_£çrio˚ûög
 (
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

770 
__¥io˚ûög
,

771 *
__ª°ri˘
 
__ﬁd_˚ûög
)

772 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

775 #ifde‡
__USE_XOPEN2K8


777 
	$±hªad_muãx_c⁄si°ít
 (
±hªad_muãx_t
 *
__muãx
)

778 
__THROW
 
	`__n⁄nuŒ
 ((1));

779 #ifde‡
__USE_GNU


780 
	$±hªad_muãx_c⁄si°ít_≈
 (
±hªad_muãx_t
 *
__muãx
)

781 
__THROW
 
	`__n⁄nuŒ
 ((1));

790 
	$±hªad_muãx©å_öô
 (
±hªad_muãx©å_t
 *
__©å
)

791 
__THROW
 
	`__n⁄nuŒ
 ((1));

794 
	$±hªad_muãx©å_de°roy
 (
±hªad_muãx©å_t
 *
__©å
)

795 
__THROW
 
	`__n⁄nuŒ
 ((1));

798 
	$±hªad_muãx©å_gëpsh¨ed
 (
__c⁄°
 
±hªad_muãx©å_t
 *

799 
__ª°ri˘
 
__©å
,

800 *
__ª°ri˘
 
__psh¨ed
)

801 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

804 
	$±hªad_muãx©å_£çsh¨ed
 (
±hªad_muãx©å_t
 *
__©å
,

805 
__psh¨ed
)

806 
__THROW
 
	`__n⁄nuŒ
 ((1));

808 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


810 
	$±hªad_muãx©å_gëty≥
 (
__c⁄°
 
±hªad_muãx©å_t
 *
__ª°ri˘


811 
__©å
, *
__ª°ri˘
 
__köd
)

812 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

817 
	$±hªad_muãx©å_£ây≥
 (
±hªad_muãx©å_t
 *
__©å
, 
__köd
)

818 
__THROW
 
	`__n⁄nuŒ
 ((1));

822 
	$±hªad_muãx©å_gë¥Ÿocﬁ
 (
__c⁄°
 
±hªad_muãx©å_t
 *

823 
__ª°ri˘
 
__©å
,

824 *
__ª°ri˘
 
__¥Ÿocﬁ
)

825 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

829 
	$±hªad_muãx©å_£çrŸocﬁ
 (
±hªad_muãx©å_t
 *
__©å
,

830 
__¥Ÿocﬁ
)

831 
__THROW
 
	`__n⁄nuŒ
 ((1));

834 
	$±hªad_muãx©å_gë¥io˚ûög
 (
__c⁄°
 
±hªad_muãx©å_t
 *

835 
__ª°ri˘
 
__©å
,

836 *
__ª°ri˘
 
__¥io˚ûög
)

837 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

840 
	$±hªad_muãx©å_£çrio˚ûög
 (
±hªad_muãx©å_t
 *
__©å
,

841 
__¥io˚ûög
)

842 
__THROW
 
	`__n⁄nuŒ
 ((1));

844 #ifde‡
__USE_XOPEN2K


846 
	$±hªad_muãx©å_gërobu°
 (
__c⁄°
 
±hªad_muãx©å_t
 *
__©å
,

847 *
__robu°√ss
)

848 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

849 #ifde‡
__USE_GNU


850 
	$±hªad_muãx©å_gërobu°_≈
 (
__c⁄°
 
±hªad_muãx©å_t
 *
__©å
,

851 *
__robu°√ss
)

852 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

856 
	$±hªad_muãx©å_£åobu°
 (
±hªad_muãx©å_t
 *
__©å
,

857 
__robu°√ss
)

858 
__THROW
 
	`__n⁄nuŒ
 ((1));

859 #ifde‡
__USE_GNU


860 
	$±hªad_muãx©å_£åobu°_≈
 (
±hªad_muãx©å_t
 *
__©å
,

861 
__robu°√ss
)

862 
__THROW
 
	`__n⁄nuŒ
 ((1));

867 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


872 
	$±hªad_rwlock_öô
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

873 
__c⁄°
 
±hªad_rwlock©å_t
 *
__ª°ri˘


874 
__©å
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

877 
	$±hªad_rwlock_de°roy
 (
±hªad_rwlock_t
 *
__rwlock
)

878 
__THROW
 
	`__n⁄nuŒ
 ((1));

881 
	$±hªad_rwlock_rdlock
 (
±hªad_rwlock_t
 *
__rwlock
)

882 
__THROW
 
	`__n⁄nuŒ
 ((1));

885 
	$±hªad_rwlock_åyrdlock
 (
±hªad_rwlock_t
 *
__rwlock
)

886 
__THROW
 
	`__n⁄nuŒ
 ((1));

888 #ifde‡
__USE_XOPEN2K


890 
	$±hªad_rwlock_timedrdlock
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

891 
__c⁄°
 
time•ec
 *
__ª°ri˘


892 
__ab°ime
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

896 
	$±hªad_rwlock_wæock
 (
±hªad_rwlock_t
 *
__rwlock
)

897 
__THROW
 
	`__n⁄nuŒ
 ((1));

900 
	$±hªad_rwlock_åywæock
 (
±hªad_rwlock_t
 *
__rwlock
)

901 
__THROW
 
	`__n⁄nuŒ
 ((1));

903 #ifde‡
__USE_XOPEN2K


905 
	$±hªad_rwlock_timedwæock
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

906 
__c⁄°
 
time•ec
 *
__ª°ri˘


907 
__ab°ime
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

911 
	$±hªad_rwlock_u∆ock
 (
±hªad_rwlock_t
 *
__rwlock
)

912 
__THROW
 
	`__n⁄nuŒ
 ((1));

918 
	$±hªad_rwlock©å_öô
 (
±hªad_rwlock©å_t
 *
__©å
)

919 
__THROW
 
	`__n⁄nuŒ
 ((1));

922 
	$±hªad_rwlock©å_de°roy
 (
±hªad_rwlock©å_t
 *
__©å
)

923 
__THROW
 
	`__n⁄nuŒ
 ((1));

926 
	$±hªad_rwlock©å_gëpsh¨ed
 (
__c⁄°
 
±hªad_rwlock©å_t
 *

927 
__ª°ri˘
 
__©å
,

928 *
__ª°ri˘
 
__psh¨ed
)

929 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

932 
	$±hªad_rwlock©å_£çsh¨ed
 (
±hªad_rwlock©å_t
 *
__©å
,

933 
__psh¨ed
)

934 
__THROW
 
	`__n⁄nuŒ
 ((1));

937 
	$±hªad_rwlock©å_gëköd_≈
 (
__c⁄°
 
±hªad_rwlock©å_t
 *

938 
__ª°ri˘
 
__©å
,

939 *
__ª°ri˘
 
__¥ef
)

940 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

943 
	$±hªad_rwlock©å_£tköd_≈
 (
±hªad_rwlock©å_t
 *
__©å
,

944 
__¥ef
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

952 
	$±hªad_c⁄d_öô
 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

953 
__c⁄°
 
±hªad_c⁄d©å_t
 *
__ª°ri˘


954 
__c⁄d_©å
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

957 
	$±hªad_c⁄d_de°roy
 (
±hªad_c⁄d_t
 *
__c⁄d
)

958 
__THROW
 
	`__n⁄nuŒ
 ((1));

961 
	$±hªad_c⁄d_sig«l
 (
±hªad_c⁄d_t
 *
__c⁄d
)

962 
__THROW
 
	`__n⁄nuŒ
 ((1));

965 
	$±hªad_c⁄d_brﬂdˇ°
 (
±hªad_c⁄d_t
 *
__c⁄d
)

966 
__THROW
 
	`__n⁄nuŒ
 ((1));

973 
	$±hªad_c⁄d_waô
 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

974 
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
)

975 
	`__n⁄nuŒ
 ((1, 2));

984 
	$±hªad_c⁄d_timedwaô
 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

985 
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

986 
__c⁄°
 
time•ec
 *
__ª°ri˘


987 
__ab°ime
Ë
	`__n⁄nuŒ
 ((1, 2, 3));

992 
	$±hªad_c⁄d©å_öô
 (
±hªad_c⁄d©å_t
 *
__©å
)

993 
__THROW
 
	`__n⁄nuŒ
 ((1));

996 
	$±hªad_c⁄d©å_de°roy
 (
±hªad_c⁄d©å_t
 *
__©å
)

997 
__THROW
 
	`__n⁄nuŒ
 ((1));

1000 
	$±hªad_c⁄d©å_gëpsh¨ed
 (
__c⁄°
 
±hªad_c⁄d©å_t
 *

1001 
__ª°ri˘
 
__©å
,

1002 *
__ª°ri˘
 
__psh¨ed
)

1003 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1006 
	$±hªad_c⁄d©å_£çsh¨ed
 (
±hªad_c⁄d©å_t
 *
__©å
,

1007 
__psh¨ed
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

1009 #ifde‡
__USE_XOPEN2K


1011 
	$±hªad_c⁄d©å_gë˛ock
 (
__c⁄°
 
±hªad_c⁄d©å_t
 *

1012 
__ª°ri˘
 
__©å
,

1013 
__˛ockid_t
 *
__ª°ri˘
 
__˛ock_id
)

1014 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1017 
	$±hªad_c⁄d©å_£t˛ock
 (
±hªad_c⁄d©å_t
 *
__©å
,

1018 
__˛ockid_t
 
__˛ock_id
)

1019 
__THROW
 
	`__n⁄nuŒ
 ((1));

1023 #ifde‡
__USE_XOPEN2K


1028 
	$±hªad_•ö_öô
 (
±hªad_•ölock_t
 *
__lock
, 
__psh¨ed
)

1029 
__THROW
 
	`__n⁄nuŒ
 ((1));

1032 
	$±hªad_•ö_de°roy
 (
±hªad_•ölock_t
 *
__lock
)

1033 
__THROW
 
	`__n⁄nuŒ
 ((1));

1036 
	$±hªad_•ö_lock
 (
±hªad_•ölock_t
 *
__lock
)

1037 
__THROW
 
	`__n⁄nuŒ
 ((1));

1040 
	$±hªad_•ö_åylock
 (
±hªad_•ölock_t
 *
__lock
)

1041 
__THROW
 
	`__n⁄nuŒ
 ((1));

1044 
	$±hªad_•ö_u∆ock
 (
±hªad_•ölock_t
 *
__lock
)

1045 
__THROW
 
	`__n⁄nuŒ
 ((1));

1052 
	$±hªad_b¨rõr_öô
 (
±hªad_b¨rõr_t
 *
__ª°ri˘
 
__b¨rõr
,

1053 
__c⁄°
 
±hªad_b¨rõøâr_t
 *
__ª°ri˘


1054 
__©å
, 
__cou¡
)

1055 
__THROW
 
	`__n⁄nuŒ
 ((1));

1058 
	$±hªad_b¨rõr_de°roy
 (
±hªad_b¨rõr_t
 *
__b¨rõr
)

1059 
__THROW
 
	`__n⁄nuŒ
 ((1));

1062 
	$±hªad_b¨rõr_waô
 (
±hªad_b¨rõr_t
 *
__b¨rõr
)

1063 
__THROW
 
	`__n⁄nuŒ
 ((1));

1067 
	$±hªad_b¨rõøâr_öô
 (
±hªad_b¨rõøâr_t
 *
__©å
)

1068 
__THROW
 
	`__n⁄nuŒ
 ((1));

1071 
	$±hªad_b¨rõøâr_de°roy
 (
±hªad_b¨rõøâr_t
 *
__©å
)

1072 
__THROW
 
	`__n⁄nuŒ
 ((1));

1075 
	$±hªad_b¨rõøâr_gëpsh¨ed
 (
__c⁄°
 
±hªad_b¨rõøâr_t
 *

1076 
__ª°ri˘
 
__©å
,

1077 *
__ª°ri˘
 
__psh¨ed
)

1078 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1081 
	$±hªad_b¨rõøâr_£çsh¨ed
 (
±hªad_b¨rõøâr_t
 *
__©å
,

1082 
__psh¨ed
)

1083 
__THROW
 
	`__n⁄nuŒ
 ((1));

1095 
	`±hªad_key_¸óã
 (
±hªad_key_t
 *
__key
,

1096 (*
__de°r_fun˘i⁄
) (*))

1097 
__THROW
 
	`__n⁄nuŒ
 ((1));

1100 
	$±hªad_key_dñëe
 (
±hªad_key_t
 
__key
Ë
__THROW
;

1103 *
	$±hªad_gë•ecific
 (
±hªad_key_t
 
__key
Ë
__THROW
;

1106 
	$±hªad_£t•ecific
 (
±hªad_key_t
 
__key
,

1107 
__c⁄°
 *
__poöãr
Ë
__THROW
 ;

1110 #ifde‡
__USE_XOPEN2K


1112 
	$±hªad_gë˝u˛ockid
 (
±hªad_t
 
__thªad_id
,

1113 
__˛ockid_t
 *
__˛ock_id
)

1114 
__THROW
 
	`__n⁄nuŒ
 ((2));

1129 
	`±hªad_©f‹k
 ((*
__¥ï¨e
) (),

1130 (*
__∑ª¡
) (),

1131 (*
__chûd
Ë()Ë
__THROW
;

1134 #ifde‡
__USE_EXTERN_INLINES


1136 
__exã∫_ölöe
 

1137 
	`__NTH
 (
	$±hªad_equÆ
 (
±hªad_t
 
__thªad1
,Öthªad_à
__thªad2
))

1139  
__thªad1
 =
__thªad2
;

1140 
	}
}

1143 
	g__END_DECLS


	@/usr/include/regex.h

22 #i‚de‡
_REGEX_H


23 
	#_REGEX_H
 1

	)

25 
	~<sys/ty≥s.h
>

26 
	~<gnu/›ti⁄-groups.h
>

29 #ifde‡
__˝lu•lus


37 
	ts_ªg_t
;

38 
	ta˘ive_ªg_t
;

45 
	tªg_sy¡ax_t
;

47 #ifde‡
__USE_GNU


50 
	#RE_BACKSLASH_ESCAPE_IN_LISTS
 ((Ë1)

	)

55 
	#RE_BK_PLUS_QM
 (
RE_BACKSLASH_ESCAPE_IN_LISTS
 << 1)

	)

61 
	#RE_CHAR_CLASSES
 (
RE_BK_PLUS_QM
 << 1)

	)

75 
	#RE_CONTEXT_INDEP_ANCHORS
 (
RE_CHAR_CLASSES
 << 1)

	)

83 
	#RE_CONTEXT_INDEP_OPS
 (
RE_CONTEXT_INDEP_ANCHORS
 << 1)

	)

87 
	#RE_CONTEXT_INVALID_OPS
 (
RE_CONTEXT_INDEP_OPS
 << 1)

	)

91 
	#RE_DOT_NEWLINE
 (
RE_CONTEXT_INVALID_OPS
 << 1)

	)

95 
	#RE_DOT_NOT_NULL
 (
RE_DOT_NEWLINE
 << 1)

	)

99 
	#RE_HAT_LISTS_NOT_NEWLINE
 (
RE_DOT_NOT_NULL
 << 1)

	)

104 
	#RE_INTERVALS
 (
RE_HAT_LISTS_NOT_NEWLINE
 << 1)

	)

108 
	#RE_LIMITED_OPS
 (
RE_INTERVALS
 << 1)

	)

112 
	#RE_NEWLINE_ALT
 (
RE_LIMITED_OPS
 << 1)

	)

117 
	#RE_NO_BK_BRACES
 (
RE_NEWLINE_ALT
 << 1)

	)

121 
	#RE_NO_BK_PARENS
 (
RE_NO_BK_BRACES
 << 1)

	)

125 
	#RE_NO_BK_REFS
 (
RE_NO_BK_PARENS
 << 1)

	)

129 
	#RE_NO_BK_VBAR
 (
RE_NO_BK_REFS
 << 1)

	)

135 
	#RE_NO_EMPTY_RANGES
 (
RE_NO_BK_VBAR
 << 1)

	)

139 
	#RE_UNMATCHED_RIGHT_PAREN_ORD
 (
RE_NO_EMPTY_RANGES
 << 1)

	)

143 
	#RE_NO_POSIX_BACKTRACKING
 (
RE_UNMATCHED_RIGHT_PAREN_ORD
 << 1)

	)

147 
	#RE_NO_GNU_OPS
 (
RE_NO_POSIX_BACKTRACKING
 << 1)

	)

155 
	#RE_DEBUG
 (
RE_NO_GNU_OPS
 << 1)

	)

160 
	#RE_INVALID_INTERVAL_ORD
 (
RE_DEBUG
 << 1)

	)

163 #ifde‡
__OPTION_POSIX_REGEXP_GLIBC


166 
	#RE_ICASE
 (
RE_INVALID_INTERVAL_ORD
 << 1)

	)

171 
	#RE_CARET_ANCHORS_HERE
 (
RE_ICASE
 << 1)

	)

175 
	#RE_CONTEXT_INVALID_DUP
 (
RE_CARET_ANCHORS_HERE
 << 1)

	)

179 
	#RE_NO_SUB
 (
RE_CONTEXT_INVALID_DUP
 << 1)

	)

187 
ªg_sy¡ax_t
 
ª_sy¡ax_›ti⁄s
;

189 #ifde‡
__USE_GNU


194 
	#RE_SYNTAX_EMACS
 0

	)

196 
	#RE_SYNTAX_AWK
 \

197 (
RE_BACKSLASH_ESCAPE_IN_LISTS
 | 
RE_DOT_NOT_NULL
 \

198 | 
RE_NO_BK_PARENS
 | 
RE_NO_BK_REFS
 \

199 | 
RE_NO_BK_VBAR
 | 
RE_NO_EMPTY_RANGES
 \

200 | 
RE_DOT_NEWLINE
 | 
RE_CONTEXT_INDEP_ANCHORS
 \

201 | 
RE_UNMATCHED_RIGHT_PAREN_ORD
 | 
RE_NO_GNU_OPS
)

	)

203 
	#RE_SYNTAX_GNU_AWK
 \

204 ((
RE_SYNTAX_POSIX_EXTENDED
 | 
RE_BACKSLASH_ESCAPE_IN_LISTS
 | 
RE_DEBUG
) \

205 & ~(
RE_DOT_NOT_NULL
 | 
RE_INTERVALS
 | 
RE_CONTEXT_INDEP_OPS
 \

206 | 
RE_CONTEXT_INVALID_OPS
 ))

	)

208 
	#RE_SYNTAX_POSIX_AWK
 \

209 (
RE_SYNTAX_POSIX_EXTENDED
 | 
RE_BACKSLASH_ESCAPE_IN_LISTS
 \

210 | 
RE_INTERVALS
 | 
RE_NO_GNU_OPS
)

	)

212 
	#RE_SYNTAX_GREP
 \

213 (
RE_BK_PLUS_QM
 | 
RE_CHAR_CLASSES
 \

214 | 
RE_HAT_LISTS_NOT_NEWLINE
 | 
RE_INTERVALS
 \

215 | 
RE_NEWLINE_ALT
)

	)

217 
	#RE_SYNTAX_EGREP
 \

218 (
RE_CHAR_CLASSES
 | 
RE_CONTEXT_INDEP_ANCHORS
 \

219 | 
RE_CONTEXT_INDEP_OPS
 | 
RE_HAT_LISTS_NOT_NEWLINE
 \

220 | 
RE_NEWLINE_ALT
 | 
RE_NO_BK_PARENS
 \

221 | 
RE_NO_BK_VBAR
)

	)

223 
	#RE_SYNTAX_POSIX_EGREP
 \

224 (
RE_SYNTAX_EGREP
 | 
RE_INTERVALS
 | 
RE_NO_BK_BRACES
 \

225 | 
RE_INVALID_INTERVAL_ORD
)

	)

228 
	#RE_SYNTAX_ED
 
RE_SYNTAX_POSIX_BASIC


	)

230 
	#RE_SYNTAX_SED
 
RE_SYNTAX_POSIX_BASIC


	)

233 
	#_RE_SYNTAX_POSIX_COMMON
 \

234 (
RE_CHAR_CLASSES
 | 
RE_DOT_NEWLINE
 | 
RE_DOT_NOT_NULL
 \

235 | 
RE_INTERVALS
 | 
RE_NO_EMPTY_RANGES
)

	)

237 #ifde‡
__OPTION_POSIX_REGEXP_GLIBC


238 
	#RE_SYNTAX_POSIX_BASIC
 \

239 (
_RE_SYNTAX_POSIX_COMMON
 | 
RE_BK_PLUS_QM
 | 
RE_CONTEXT_INVALID_DUP
)

	)

241 
	#RE_SYNTAX_POSIX_BASIC
 \

242 (
_RE_SYNTAX_POSIX_COMMON
 | 
RE_BK_PLUS_QM
)

	)

248 
	#RE_SYNTAX_POSIX_MINIMAL_BASIC
 \

249 (
_RE_SYNTAX_POSIX_COMMON
 | 
RE_LIMITED_OPS
)

	)

251 
	#RE_SYNTAX_POSIX_EXTENDED
 \

252 (
_RE_SYNTAX_POSIX_COMMON
 | 
RE_CONTEXT_INDEP_ANCHORS
 \

253 | 
RE_CONTEXT_INDEP_OPS
 | 
RE_NO_BK_BRACES
 \

254 | 
RE_NO_BK_PARENS
 | 
RE_NO_BK_VBAR
 \

255 | 
RE_CONTEXT_INVALID_OPS
 | 
RE_UNMATCHED_RIGHT_PAREN_ORD
)

	)

259 
	#RE_SYNTAX_POSIX_MINIMAL_EXTENDED
 \

260 (
_RE_SYNTAX_POSIX_COMMON
 | 
RE_CONTEXT_INDEP_ANCHORS
 \

261 | 
RE_CONTEXT_INVALID_OPS
 | 
RE_NO_BK_BRACES
 \

262 | 
RE_NO_BK_PARENS
 | 
RE_NO_BK_REFS
 \

263 | 
RE_NO_BK_VBAR
 | 
RE_UNMATCHED_RIGHT_PAREN_ORD
)

	)

269 #ifde‡
RE_DUP_MAX


270 #unde‡
RE_DUP_MAX


273 
	#RE_DUP_MAX
 (0x7fff)

	)

281 
	#REG_EXTENDED
 1

	)

285 
	#REG_ICASE
 (
REG_EXTENDED
 << 1)

	)

290 
	#REG_NEWLINE
 (
REG_ICASE
 << 1)

	)

294 
	#REG_NOSUB
 (
REG_NEWLINE
 << 1)

	)

304 
	#REG_NOTBOL
 1

	)

307 
	#REG_NOTEOL
 (1 << 1)

	)

309 #ifde‡
__OPTION_POSIX_REGEXP_GLIBC


312 
	#REG_STARTEND
 (1 << 2)

	)

320 #i‡
deföed
 
_XOPEN_SOURCE
 || deföed 
__USE_XOPEN2K


321 
	gREG_ENOSYS
 = -1,

324 
	gREG_NOERROR
 = 0,

325 
	gREG_NOMATCH
,

329 
	gREG_BADPAT
,

330 
	gREG_ECOLLATE
,

331 
	gREG_ECTYPE
,

332 
	gREG_EESCAPE
,

333 
	gREG_ESUBREG
,

334 
	gREG_EBRACK
,

335 
	gREG_EPAREN
,

336 
	gREG_EBRACE
,

337 
	gREG_BADBR
,

338 
	gREG_ERANGE
,

339 
	gREG_ESPACE
,

340 
	gREG_BADRPT
,

343 
	gREG_EEND
,

344 
	gREG_ESIZE
,

345 
	gREG_ERPAREN


346 } 
	tªg_îrcode_t
;

354 #i‚de‡
RE_TRANSLATE_TYPE


355 
	#__RE_TRANSLATE_TYPE
 *

	)

356 #ifde‡
__USE_GNU


357 
	#RE_TRANSLATE_TYPE
 
__RE_TRANSLATE_TYPE


	)

361 #ifde‡
__USE_GNU


362 
	#__REPB_PREFIX
(
«me
Ë
	)
name

364 
	#__REPB_PREFIX
(
«me
Ë
__
##
	)
name

367 
	sª_∑âîn_buf„r


372 *
__REPB_PREFIX
(
buf„r
);

375 
__REPB_PREFIX
(
Æloˇãd
);

378 
__REPB_PREFIX
(
u£d
);

381 
ªg_sy¡ax_t
 
__REPB_PREFIX
(
sy¡ax
);

386 *
__REPB_PREFIX
(
Á°m≠
);

392 
__RE_TRANSLATE_TYPE
 
__REPB_PREFIX
(
å™¶©e
);

395 
size_t
 
	gª_nsub
;

401 
__REPB_PREFIX
(
ˇn_be_nuŒ
) : 1;

407 #ifde‡
__USE_GNU


408 
	#REGS_UNALLOCATED
 0

	)

409 
	#REGS_REALLOCATE
 1

	)

410 
	#REGS_FIXED
 2

	)

412 
__REPB_PREFIX
(
ªgs_Æloˇãd
) : 2;

416 
__REPB_PREFIX
(
Á°m≠_accuøã
) : 1;

420 
__REPB_PREFIX
(
no_sub
) : 1;

424 
__REPB_PREFIX
(
nŸ_bﬁ
) : 1;

427 
__REPB_PREFIX
(
nŸ_eﬁ
) : 1;

430 
__REPB_PREFIX
(
√wlöe_™ch‹
) : 1;

433 
ª_∑âîn_buf„r
 
	tªgex_t
;

436 
	tªgoff_t
;

439 #ifde‡
__USE_GNU


442 
	sª_ªgi°îs


444 
	gnum_ªgs
;

445 
ªgoff_t
 *
	g°¨t
;

446 
ªgoff_t
 *
	gíd
;

453 #i‚de‡
RE_NREGS


454 
	#RE_NREGS
 30

	)

464 
ªgoff_t
 
	grm_so
;

465 
ªgoff_t
 
	grm_eo
;

466 } 
	tªgm©ch_t
;

470 #ifde‡
__USE_GNU


473 
ªg_sy¡ax_t
 
ª_£t_sy¡ax
 (ªg_sy¡ax_à
__sy¡ax
);

478 c⁄° *
ª_compûe_∑âîn
 (c⁄° *
__∑âîn
, 
size_t
 
__Àngth
,

479 
ª_∑âîn_buf„r
 *
__buf„r
);

485 
ª_compûe_Á°m≠
 (
ª_∑âîn_buf„r
 *
__buf„r
);

493 
ª_£¨ch
 (
ª_∑âîn_buf„r
 *
__buf„r
, c⁄° *
__°rög
,

494 
__Àngth
, 
__°¨t
, 
__ønge
,

495 
ª_ªgi°îs
 *
__ªgs
);

500 
ª_£¨ch_2
 (
ª_∑âîn_buf„r
 *
__buf„r
,

501 c⁄° *
__°rög1
, 
__Àngth1
,

502 c⁄° *
__°rög2
, 
__Àngth2
, 
__°¨t
,

503 
__ønge
, 
ª_ªgi°îs
 *
__ªgs
, 
__°›
);

508 
ª_m©ch
 (
ª_∑âîn_buf„r
 *
__buf„r
, c⁄° *
__°rög
,

509 
__Àngth
, 
__°¨t
, 
ª_ªgi°îs
 *
__ªgs
);

513 
ª_m©ch_2
 (
ª_∑âîn_buf„r
 *
__buf„r
,

514 c⁄° *
__°rög1
, 
__Àngth1
,

515 c⁄° *
__°rög2
, 
__Àngth2
, 
__°¨t
,

516 
ª_ªgi°îs
 *
__ªgs
, 
__°›
);

531 
ª_£t_ªgi°îs
 (
ª_∑âîn_buf„r
 *
__buf„r
,

532 
ª_ªgi°îs
 *
__ªgs
,

533 
__num_ªgs
,

534 
ªgoff_t
 *
__°¨ts
,Ñegoff_à*
__íds
);

537 #i‡
deföed
 
_REGEX_RE_COMP
 || (deföed 
_LIBC
 && deföed 
__USE_BSD
)

538 #i‚de‡
_CRAY


540 *
ª_comp
 (const *);

541 
ª_exec
 (const *);

547 #i‚de‡
__ª°ri˘


548 #i‡! (2 < 
__GNUC__
 || (2 =__GNUC__ && 95 <
__GNUC_MINOR__
))

549 #i‡
deföed
 
ª°ri˘
 || 199901L <
__STDC_VERSION__


550 
	#__ª°ri˘
 
ª°ri˘


	)

552 
	#__ª°ri˘


	)

557 #i‚de‡
__ª°ri˘_¨r


558 #i‡(
__GNUC__
 > 3 || (__GNUC__ =3 && 
__GNUC_MINOR__
 >= 1)) \

559 && !
deföed
 
	g__GNUG__


560 
	#__ª°ri˘_¨r
 
__ª°ri˘


	)

562 
	#__ª°ri˘_¨r


	)

567 
ªgcomp
 (
ªgex_t
 *
__ª°ri˘
 
__¥eg
,

568 c⁄° *
__ª°ri˘
 
__∑âîn
,

569 
__cÊags
);

571 
ªgexec
 (c⁄° 
ªgex_t
 *
__ª°ri˘
 
__¥eg
,

572 c⁄° *
__ª°ri˘
 
__°rög
, 
size_t
 
__nm©ch
,

573 
ªgm©ch_t
 
__pm©ch
[
__ª°ri˘_¨r
],

574 
__eÊags
);

576 
size_t
 
ªgîr‹
 (
__îrcode
, c⁄° 
ªgex_t
 *
__ª°ri˘
 
__¥eg
,

577 *
__ª°ri˘
 
__îrbuf
, 
size_t
 
__îrbuf_size
);

579 
ªg‰ì
 (
ªgex_t
 *
__¥eg
);

582 #ifde‡
__˝lu•lus


	@/usr/include/setjmp.h

23 #i‚def 
_SETJMP_H


24 
	#_SETJMP_H
 1

	)

26 
	~<„©uªs.h
>

28 
	g__BEGIN_DECLS


30 
	~<bôs/£tjmp.h
>

31 
	~<bôs/sig£t.h
>

35 
	s__jmp_buf_èg


41 
__jmp_buf
 
	m__jmpbuf
;

42 
	m__mask_was_ßved
;

43 
__sig£t_t
 
	m__ßved_mask
;

47 
__BEGIN_NAMESPACE_STD


49 
__jmp_buf_èg
 
	tjmp_buf
[1];

53 
	$£tjmp
 (
jmp_buf
 
__ív
Ë
__THROW
;

55 
__END_NAMESPACE_STD


60 
	$__sig£tjmp
 (
__jmp_buf_èg
 
__ív
[1], 
__ßvemask
Ë
__THROW
;

62 #i‚def 
__FAVOR_BSD


65 
	$_£tjmp
 (
__jmp_buf_èg
 
__ív
[1]Ë
__THROW
;

69 
	#£tjmp
(
ív
Ë
	`_£tjmp
 (ív)

	)

74 
	#£tjmp
(
ív
Ë
	`£tjmp
 (ív)

	)

78 
__BEGIN_NAMESPACE_STD


82 
	$l⁄gjmp
 (
__jmp_buf_èg
 
__ív
[1], 
__vÆ
)

83 
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

85 
__END_NAMESPACE_STD


87 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN


91 
	$_l⁄gjmp
 (
__jmp_buf_èg
 
__ív
[1], 
__vÆ
)

92 
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

96 #ifdef 
__USE_POSIX


100 
__jmp_buf_èg
 
	tsigjmp_buf
[1];

104 
	#sig£tjmp
(
ív
, 
ßvemask
Ë
	`__sig£tjmp
 (ív, savemask)

	)

110 
	$sigl⁄gjmp
 (
sigjmp_buf
 
__ív
, 
__vÆ
)

111 
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

116 #i‡
__USE_FORTIFY_LEVEL
 > 0

117 
	~<bôs/£tjmp2.h
>

120 
__END_DECLS


	@/usr/include/signal.h

23 #i‚def 
_SIGNAL_H


25 #i‡!
deföed
 
__√ed_sig_©omic_t
 && !deföed 
__√ed_sig£t_t


26 
	#_SIGNAL_H


	)

29 
	~<„©uªs.h
>

31 
	g__BEGIN_DECLS


33 
	~<bôs/sig£t.h
>

37 #i‡
deföed
 
__√ed_sig_©omic_t
 || deföed 
_SIGNAL_H


38 #i‚de‡
__sig_©omic_t_deföed


39 
	#__sig_©omic_t_deföed


	)

40 
__BEGIN_NAMESPACE_STD


41 
__sig_©omic_t
 
	tsig_©omic_t
;

42 
	g__END_NAMESPACE_STD


44 #unde‡
__√ed_sig_©omic_t


47 #i‡
deföed
 
__√ed_sig£t_t
 || (deföed 
_SIGNAL_H
 && deföed 
__USE_POSIX
)

48 #i‚de‡
__sig£t_t_deföed


49 
	#__sig£t_t_deföed


	)

50 
__sig£t_t
 
	tsig£t_t
;

52 #unde‡
__√ed_sig£t_t


55 #ifde‡
_SIGNAL_H


57 
	~<bôs/ty≥s.h
>

58 
	~<bôs/signum.h
>

60 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


61 #i‚de‡
__pid_t_deföed


62 
__pid_t
 
	tpid_t
;

63 
	#__pid_t_deföed


	)

65 #ifde‡
__USE_XOPEN


67 #i‚de‡
__uid_t_deföed


68 
__uid_t
 
	tuid_t
;

69 
	#__uid_t_deföed


	)

73 #ifde‡
__USE_POSIX199309


75 
	#__√ed_time•ec


	)

76 
	~<time.h
>

79 
	~<bôs/sigöfo.h
>

84 (*
	t__sigh™dÀr_t
) ();

89 
__sigh™dÀr_t
 
	$__sysv_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

90 
__THROW
;

91 #ifde‡
__USE_GNU


92 
__sigh™dÀr_t
 
	$sysv_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

93 
__THROW
;

99 
__BEGIN_NAMESPACE_STD


100 #ifde‡
__USE_BSD


101 
__sigh™dÀr_t
 
	$sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

102 
__THROW
;

105 #ifde‡
__REDIRECT_NTH


106 
__sigh™dÀr_t
 
	`__REDIRECT_NTH
 (
sig«l
,

107 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
),

108 
__sysv_sig«l
);

110 
	#sig«l
 
__sysv_sig«l


	)

113 
__END_NAMESPACE_STD


115 #ifde‡
__USE_XOPEN


118 
__sigh™dÀr_t
 
	$bsd_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

119 
__THROW
;

125 #ifde‡
__USE_POSIX


126 
	$kûl
 (
__pid_t
 
__pid
, 
__sig
Ë
__THROW
;

129 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


133 
	$kûÕg
 (
__pid_t
 
__pgΩ
, 
__sig
Ë
__THROW
;

136 
__BEGIN_NAMESPACE_STD


138 
	$øi£
 (
__sig
Ë
__THROW
;

139 
__END_NAMESPACE_STD


141 #ifde‡
__USE_SVID


143 
__sigh™dÀr_t
 
	$ssig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

144 
__THROW
;

145 
	$gsig«l
 (
__sig
Ë
__THROW
;

148 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN2K


150 
	`psig«l
 (
__sig
, 
__c⁄°
 *
__s
);

153 #ifde‡
__USE_XOPEN2K


155 
	`psigöfo
 (
__c⁄°
 
sigöfo_t
 *
__pöfo
, __c⁄° *
__s
);

168 
	`__sig∑u£
 (
__sig_‹_mask
, 
__is_sig
);

170 #ifde‡
__FAVOR_BSD


173 
	$sig∑u£
 (
__mask
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

175 #ifde‡
__USE_XOPEN


176 #ifde‡
__GNUC__


177 
	$sig∑u£
 (
__sig
Ë
	`__asm__
 ("__xpg_sigpause");

180 
	#sig∑u£
(
sig
Ë
	`__sig∑u£
 ((sig), 1)

	)

186 #ifde‡
__USE_BSD


193 
	#sigmask
(
sig
Ë
	`__sigmask
(sig)

	)

196 
	$sigblock
 (
__mask
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

199 
	$sig£tmask
 (
__mask
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

202 
	$siggëmask
 (Ë
__THROW
 
__©åibuã_dïªˇãd__
;

206 #ifde‡
__USE_MISC


207 
	#NSIG
 
_NSIG


	)

210 #ifde‡
__USE_GNU


211 
__sigh™dÀr_t
 
	tsigh™dÀr_t
;

215 #ifde‡
__USE_BSD


216 
__sigh™dÀr_t
 
	tsig_t
;

219 #ifde‡
__USE_POSIX


222 
	$sigem±y£t
 (
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

225 
	$sigfûl£t
 (
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

228 
	$sigadd£t
 (
sig£t_t
 *
__£t
, 
__signo
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

231 
	$sigdñ£t
 (
sig£t_t
 *
__£t
, 
__signo
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

234 
	$sigismembî
 (
__c⁄°
 
sig£t_t
 *
__£t
, 
__signo
)

235 
__THROW
 
	`__n⁄nuŒ
 ((1));

237 #ifde‡
__USE_GNU


239 
	$sigi£m±y£t
 (
__c⁄°
 
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

242 
	$sig™d£t
 (
sig£t_t
 *
__£t
, 
__c⁄°
 sig£t_à*
__À·
,

243 
__c⁄°
 
sig£t_t
 *
__right
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

246 
	$sig‹£t
 (
sig£t_t
 *
__£t
, 
__c⁄°
 sig£t_à*
__À·
,

247 
__c⁄°
 
sig£t_t
 *
__right
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

252 
	~<bôs/siga˘i⁄.h
>

255 
	$sig¥ocmask
 (
__how
, 
__c⁄°
 
sig£t_t
 *
__ª°ri˘
 
__£t
,

256 
sig£t_t
 *
__ª°ri˘
 
__o£t
Ë
__THROW
;

263 
	$sigsu•íd
 (
__c⁄°
 
sig£t_t
 *
__£t
Ë
	`__n⁄nuŒ
 ((1));

266 
	$siga˘i⁄
 (
__sig
, 
__c⁄°
 
siga˘i⁄
 *
__ª°ri˘
 
__a˘
,

267 
siga˘i⁄
 *
__ª°ri˘
 
__ﬂ˘
Ë
__THROW
;

270 
	$sig≥ndög
 (
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

277 
	$sigwaô
 (
__c⁄°
 
sig£t_t
 *
__ª°ri˘
 
__£t
, *__ª°ri˘ 
__sig
)

278 
	`__n⁄nuŒ
 ((1, 2));

280 #ifde‡
__USE_POSIX199309


285 
	$sigwaôöfo
 (
__c⁄°
 
sig£t_t
 *
__ª°ri˘
 
__£t
,

286 
sigöfo_t
 *
__ª°ri˘
 
__öfo
Ë
	`__n⁄nuŒ
 ((1));

293 
	$sigtimedwaô
 (
__c⁄°
 
sig£t_t
 *
__ª°ri˘
 
__£t
,

294 
sigöfo_t
 *
__ª°ri˘
 
__öfo
,

295 
__c⁄°
 
time•ec
 *
__ª°ri˘
 
__timeout
)

296 
	`__n⁄nuŒ
 ((1));

300 
	$sigqueue
 (
__pid_t
 
__pid
, 
__sig
, 
__c⁄°
 
sigvÆ
 
__vÆ
)

301 
__THROW
;

306 #ifde‡
__USE_BSD


310 
__c⁄°
 *__c⁄° 
_sys_sigli°
[
_NSIG
];

311 
__c⁄°
 *__c⁄° 
sys_sigli°
[
_NSIG
];

314 
	ssigvec


316 
__sigh™dÀr_t
 
sv_h™dÀr
;

317 
sv_mask
;

319 
sv_Êags
;

320 
	#sv_⁄°ack
 
sv_Êags


	)

324 
	#SV_ONSTACK
 (1 << 0)

	)

325 
	#SV_INTERRUPT
 (1 << 1)

	)

326 
	#SV_RESETHAND
 (1 << 2)

	)

334 
	$sigvec
 (
__sig
, 
__c⁄°
 
sigvec
 *
__vec
,

335 
sigvec
 *
__ovec
Ë
__THROW
;

339 
	~<bôs/sigc⁄ãxt.h
>

342 
	$sigªtu∫
 (
sigc⁄ãxt
 *
__s˝
Ë
__THROW
;

347 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


348 
	#__√ed_size_t


	)

349 
	~<°ddef.h
>

354 
	$sigöãºu±
 (
__sig
, 
__öãºu±
Ë
__THROW
;

356 
	~<bôs/sig°ack.h
>

357 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


359 
	~<sys/uc⁄ãxt.h
>

365 
	$sig°ack
 (
sig°ack
 *
__ss
, sig°ack *
__oss
)

366 
__THROW
 
__©åibuã_dïªˇãd__
;

370 
	$sigÆt°ack
 (
__c⁄°
 
sigÆt°ack
 *
__ª°ri˘
 
__ss
,

371 
sigÆt°ack
 *
__ª°ri˘
 
__oss
Ë
__THROW
;

375 #ifde‡
__USE_XOPEN_EXTENDED


379 
	$sighﬁd
 (
__sig
Ë
__THROW
;

382 
	$sigªl£
 (
__sig
Ë
__THROW
;

385 
	$sigign‹e
 (
__sig
Ë
__THROW
;

388 
__sigh™dÀr_t
 
	$sig£t
 (
__sig
, 
__sigh™dÀr_t
 
__di•
Ë
__THROW
;

391 #i‡
deföed
 
__USE_POSIX199506
 || deföed 
__USE_UNIX98


394 
	~<bôs/±hªadty≥s.h
>

395 
	~<bôs/sigthªad.h
>

402 
	$__libc_cuºít_sigπmö
 (Ë
__THROW
;

404 
	$__libc_cuºít_sigπmax
 (Ë
__THROW
;

408 
__END_DECLS


	@/usr/include/stdint.h

23 #i‚de‡
_STDINT_H


24 
	#_STDINT_H
 1

	)

26 
	~<„©uªs.h
>

27 
	~<bôs/wch¨.h
>

28 
	~<bôs/w‹dsize.h
>

35 #i‚de‡
__öt8_t_deföed


36 
	#__öt8_t_deföed


	)

37 sig√d 
	töt8_t
;

38 
	töt16_t
;

39 
	töt32_t
;

40 #i‡
__WORDSIZE
 == 64

41 
	töt64_t
;

43 
__exãnsi⁄__


44 
	töt64_t
;

49 
	tuöt8_t
;

50 
	tuöt16_t
;

51 #i‚de‡
__uöt32_t_deföed


52 
	tuöt32_t
;

53 
	#__uöt32_t_deföed


	)

55 #i‡
__WORDSIZE
 == 64

56 
	tuöt64_t
;

58 
__exãnsi⁄__


59 
	tuöt64_t
;

66 sig√d 
	töt_Àa°8_t
;

67 
	töt_Àa°16_t
;

68 
	töt_Àa°32_t
;

69 #i‡
__WORDSIZE
 == 64

70 
	töt_Àa°64_t
;

72 
__exãnsi⁄__


73 
	töt_Àa°64_t
;

77 
	tuöt_Àa°8_t
;

78 
	tuöt_Àa°16_t
;

79 
	tuöt_Àa°32_t
;

80 #i‡
__WORDSIZE
 == 64

81 
	tuöt_Àa°64_t
;

83 
__exãnsi⁄__


84 
	tuöt_Àa°64_t
;

91 sig√d 
	töt_Á°8_t
;

92 #i‡
__WORDSIZE
 == 64

93 
	töt_Á°16_t
;

94 
	töt_Á°32_t
;

95 
	töt_Á°64_t
;

97 
	töt_Á°16_t
;

98 
	töt_Á°32_t
;

99 
__exãnsi⁄__


100 
	töt_Á°64_t
;

104 
	tuöt_Á°8_t
;

105 #i‡
__WORDSIZE
 == 64

106 
	tuöt_Á°16_t
;

107 
	tuöt_Á°32_t
;

108 
	tuöt_Á°64_t
;

110 
	tuöt_Á°16_t
;

111 
	tuöt_Á°32_t
;

112 
__exãnsi⁄__


113 
	tuöt_Á°64_t
;

118 #i‡
__WORDSIZE
 == 64

119 #i‚de‡
__öçå_t_deföed


120 
	töçå_t
;

121 
	#__öçå_t_deföed


	)

123 
	tuöçå_t
;

125 #i‚de‡
__öçå_t_deföed


126 
	töçå_t
;

127 
	#__öçå_t_deföed


	)

129 
	tuöçå_t
;

134 #i‡
__WORDSIZE
 == 64

135 
	tötmax_t
;

136 
	tuötmax_t
;

138 
__exãnsi⁄__


139 
	tötmax_t
;

140 
__exãnsi⁄__


141 
	tuötmax_t
;

147 #i‡!
deföed
 
__˝lu•lus
 || deföed 
__STDC_LIMIT_MACROS


149 #i‡
__WORDSIZE
 == 64

150 
	#__INT64_C
(
c
Ë¯## 
L


	)

151 
	#__UINT64_C
(
c
Ë¯## 
UL


	)

153 
	#__INT64_C
(
c
Ë¯## 
LL


	)

154 
	#__UINT64_C
(
c
Ë¯## 
ULL


	)

160 
	#INT8_MIN
 (-128)

	)

161 
	#INT16_MIN
 (-32767-1)

	)

162 
	#INT32_MIN
 (-2147483647-1)

	)

163 
	#INT64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

165 
	#INT8_MAX
 (127)

	)

166 
	#INT16_MAX
 (32767)

	)

167 
	#INT32_MAX
 (2147483647)

	)

168 
	#INT64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

171 
	#UINT8_MAX
 (255)

	)

172 
	#UINT16_MAX
 (65535)

	)

173 
	#UINT32_MAX
 (4294967295U)

	)

174 
	#UINT64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

178 
	#INT_LEAST8_MIN
 (-128)

	)

179 
	#INT_LEAST16_MIN
 (-32767-1)

	)

180 
	#INT_LEAST32_MIN
 (-2147483647-1)

	)

181 
	#INT_LEAST64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

183 
	#INT_LEAST8_MAX
 (127)

	)

184 
	#INT_LEAST16_MAX
 (32767)

	)

185 
	#INT_LEAST32_MAX
 (2147483647)

	)

186 
	#INT_LEAST64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

189 
	#UINT_LEAST8_MAX
 (255)

	)

190 
	#UINT_LEAST16_MAX
 (65535)

	)

191 
	#UINT_LEAST32_MAX
 (4294967295U)

	)

192 
	#UINT_LEAST64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

196 
	#INT_FAST8_MIN
 (-128)

	)

197 #i‡
__WORDSIZE
 == 64

198 
	#INT_FAST16_MIN
 (-9223372036854775807L-1)

	)

199 
	#INT_FAST32_MIN
 (-9223372036854775807L-1)

	)

201 
	#INT_FAST16_MIN
 (-2147483647-1)

	)

202 
	#INT_FAST32_MIN
 (-2147483647-1)

	)

204 
	#INT_FAST64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

206 
	#INT_FAST8_MAX
 (127)

	)

207 #i‡
__WORDSIZE
 == 64

208 
	#INT_FAST16_MAX
 (9223372036854775807L)

	)

209 
	#INT_FAST32_MAX
 (9223372036854775807L)

	)

211 
	#INT_FAST16_MAX
 (2147483647)

	)

212 
	#INT_FAST32_MAX
 (2147483647)

	)

214 
	#INT_FAST64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

217 
	#UINT_FAST8_MAX
 (255)

	)

218 #i‡
__WORDSIZE
 == 64

219 
	#UINT_FAST16_MAX
 (18446744073709551615UL)

	)

220 
	#UINT_FAST32_MAX
 (18446744073709551615UL)

	)

222 
	#UINT_FAST16_MAX
 (4294967295U)

	)

223 
	#UINT_FAST32_MAX
 (4294967295U)

	)

225 
	#UINT_FAST64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

229 #i‡
__WORDSIZE
 == 64

230 
	#INTPTR_MIN
 (-9223372036854775807L-1)

	)

231 
	#INTPTR_MAX
 (9223372036854775807L)

	)

232 
	#UINTPTR_MAX
 (18446744073709551615UL)

	)

234 
	#INTPTR_MIN
 (-2147483647-1)

	)

235 
	#INTPTR_MAX
 (2147483647)

	)

236 
	#UINTPTR_MAX
 (4294967295U)

	)

241 
	#INTMAX_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

243 
	#INTMAX_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

246 
	#UINTMAX_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

252 #i‡
__WORDSIZE
 == 64

253 
	#PTRDIFF_MIN
 (-9223372036854775807L-1)

	)

254 
	#PTRDIFF_MAX
 (9223372036854775807L)

	)

256 
	#PTRDIFF_MIN
 (-2147483647-1)

	)

257 
	#PTRDIFF_MAX
 (2147483647)

	)

261 
	#SIG_ATOMIC_MIN
 (-2147483647-1)

	)

262 
	#SIG_ATOMIC_MAX
 (2147483647)

	)

265 #i‡
__WORDSIZE
 == 64

266 
	#SIZE_MAX
 (18446744073709551615UL)

	)

268 
	#SIZE_MAX
 (4294967295U)

	)

272 #i‚de‡
WCHAR_MIN


274 
	#WCHAR_MIN
 
__WCHAR_MIN


	)

275 
	#WCHAR_MAX
 
__WCHAR_MAX


	)

279 
	#WINT_MIN
 (0u)

	)

280 
	#WINT_MAX
 (4294967295u)

	)

287 #i‡!
deföed
 
__˝lu•lus
 || deföed 
__STDC_CONSTANT_MACROS


290 
	#INT8_C
(
c
Ë
	)
c

291 
	#INT16_C
(
c
Ë
	)
c

292 
	#INT32_C
(
c
Ë
	)
c

293 #i‡
__WORDSIZE
 == 64

294 
	#INT64_C
(
c
Ë¯## 
L


	)

296 
	#INT64_C
(
c
Ë¯## 
LL


	)

300 
	#UINT8_C
(
c
Ë
	)
c

301 
	#UINT16_C
(
c
Ë
	)
c

302 
	#UINT32_C
(
c
Ë¯## 
U


	)

303 #i‡
__WORDSIZE
 == 64

304 
	#UINT64_C
(
c
Ë¯## 
UL


	)

306 
	#UINT64_C
(
c
Ë¯## 
ULL


	)

310 #i‡
__WORDSIZE
 == 64

311 
	#INTMAX_C
(
c
Ë¯## 
L


	)

312 
	#UINTMAX_C
(
c
Ë¯## 
UL


	)

314 
	#INTMAX_C
(
c
Ë¯## 
LL


	)

315 
	#UINTMAX_C
(
c
Ë¯## 
ULL


	)

	@/usr/include/stdio.h

24 #i‚de‡
_STDIO_H


26 #i‡!
deföed
 
__√ed_FILE
 && !deföed 
__√ed___FILE


27 
	#_STDIO_H
 1

	)

28 
	~<„©uªs.h
>

30 
	g__BEGIN_DECLS


32 
	#__√ed_size_t


	)

33 
	#__√ed_NULL


	)

34 
	~<°ddef.h
>

36 
	~<bôs/ty≥s.h
>

37 
	#__√ed_FILE


	)

38 
	#__√ed___FILE


	)

42 #i‡!
deföed
 
__FILE_deföed
 && deföed 
__√ed_FILE


45 
	g_IO_FILE
;

47 
__BEGIN_NAMESPACE_STD


49 
_IO_FILE
 
	tFILE
;

50 
	g__END_NAMESPACE_STD


51 #i‡
deföed
 
__USE_LARGEFILE64
 || deföed 
__USE_SVID
 || deföed 
__USE_POSIX
 \

52 || 
deföed
 
	g__USE_BSD
 || deföed 
	g__USE_ISOC99
 || deföed 
	g__USE_XOPEN
 \

53 || 
deföed
 
__USE_POSIX2


54 
	$__USING_NAMESPACE_STD
(
FILE
)

57 
	#__FILE_deföed
 1

	)

59 #unde‡
__√ed_FILE


62 #i‡!
deföed
 
____FILE_deföed
 && deföed 
__√ed___FILE


65 
_IO_FILE
 
	t__FILE
;

67 
	#____FILE_deföed
 1

	)

69 #unde‡
__√ed___FILE


72 #ifdef 
_STDIO_H


73 
	#_STDIO_USES_IOSTREAM


	)

75 
	~<libio.h
>

77 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


78 #ifde‡
__GNUC__


79 #i‚de‡
_VA_LIST_DEFINED


80 
_G_va_li°
 
	tva_li°
;

81 
	#_VA_LIST_DEFINED


	)

84 
	~<°d¨g.h
>

88 #ifde‡
__USE_XOPEN2K8


89 #i‚de‡
__off_t_deföed


90 #i‚de‡
__USE_FILE_OFFSET64


91 
__off_t
 
	toff_t
;

93 
__off64_t
 
	toff_t
;

95 
	#__off_t_deföed


	)

97 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


98 
__off64_t
 
	toff64_t
;

99 
	#__off64_t_deföed


	)

102 #i‚de‡
__ssize_t_deföed


103 
__ssize_t
 
	tssize_t
;

104 
	#__ssize_t_deföed


	)

109 
__BEGIN_NAMESPACE_STD


110 #i‚de‡
__USE_FILE_OFFSET64


111 
_G_Âos_t
 
	tÂos_t
;

113 
_G_Âos64_t
 
	tÂos_t
;

115 
__END_NAMESPACE_STD


116 #ifde‡
__USE_LARGEFILE64


117 
_G_Âos64_t
 
	tÂos64_t
;

121 
	#_IOFBF
 0

	)

122 
	#_IOLBF
 1

	)

123 
	#_IONBF
 2

	)

127 #i‚de‡
BUFSIZ


128 
	#BUFSIZ
 
_IO_BUFSIZ


	)

134 #i‚de‡
EOF


135 
	#EOF
 (-1)

	)

141 
	#SEEK_SET
 0

	)

142 
	#SEEK_CUR
 1

	)

143 
	#SEEK_END
 2

	)

146 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


148 
	#P_tmpdú
 "/tmp"

	)

161 
	~<bôs/°dio_lim.h
>

165 
_IO_FILE
 *
°dö
;

166 
_IO_FILE
 *
°dout
;

167 
_IO_FILE
 *
°dîr
;

169 
	#°dö
 
°dö


	)

170 
	#°dout
 
°dout


	)

171 
	#°dîr
 
°dîr


	)

173 
__BEGIN_NAMESPACE_STD


175 
	$ªmove
 (
__c⁄°
 *
__fûíame
Ë
__THROW
;

177 
	$ª«me
 (
__c⁄°
 *
__ﬁd
, __c⁄° *
__√w
Ë
__THROW
;

178 
__END_NAMESPACE_STD


180 #ifde‡
__USE_ATFILE


182 
	$ª«mót
 (
__ﬁdfd
, 
__c⁄°
 *
__ﬁd
, 
__√wfd
,

183 
__c⁄°
 *
__√w
Ë
__THROW
;

186 
__BEGIN_NAMESPACE_STD


191 #i‚de‡
__USE_FILE_OFFSET64


192 
FILE
 *
	$tmpfûe
 (Ë
__wur
;

194 #ifde‡
__REDIRECT


195 
FILE
 *
	`__REDIRECT
 (
tmpfûe
, (), 
tmpfûe64
Ë
__wur
;

197 
	#tmpfûe
 
tmpfûe64


	)

201 #ifde‡
__USE_LARGEFILE64


202 
FILE
 *
	$tmpfûe64
 (Ë
__wur
;

206 *
	$tm≤am
 (*
__s
Ë
__THROW
 
__wur
;

207 
__END_NAMESPACE_STD


209 #ifde‡
__USE_MISC


212 *
	$tm≤am_r
 (*
__s
Ë
__THROW
 
__wur
;

216 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


224 *
	$ãm≤am
 (
__c⁄°
 *
__dú
, __c⁄° *
__pfx
)

225 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

229 
__BEGIN_NAMESPACE_STD


234 
	`f˛o£
 (
FILE
 *
__°ªam
);

239 
	`fÊush
 (
FILE
 *
__°ªam
);

240 
__END_NAMESPACE_STD


242 #ifde‡
__USE_MISC


249 
	`fÊush_u∆ocked
 (
FILE
 *
__°ªam
);

252 #ifde‡
__USE_GNU


259 
	`f˛o£Æl
 ();

263 
__BEGIN_NAMESPACE_STD


264 #i‚de‡
__USE_FILE_OFFSET64


269 
FILE
 *
	$f›í
 (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

270 
__c⁄°
 *
__ª°ri˘
 
__modes
Ë
__wur
;

275 
FILE
 *
	$‰e›í
 (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

276 
__c⁄°
 *
__ª°ri˘
 
__modes
,

277 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

279 #ifde‡
__REDIRECT


280 
FILE
 *
	`__REDIRECT
 (
f›í
, (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

281 
__c⁄°
 *
__ª°ri˘
 
__modes
), 
f›í64
)

282 
__wur
;

283 
FILE
 *
	`__REDIRECT
 (
‰e›í
, (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

284 
__c⁄°
 *
__ª°ri˘
 
__modes
,

285 
FILE
 *
__ª°ri˘
 
__°ªam
), 
‰e›í64
)

286 
__wur
;

288 
	#f›í
 
f›í64


	)

289 
	#‰e›í
 
‰e›í64


	)

292 
__END_NAMESPACE_STD


293 #ifde‡
__USE_LARGEFILE64


294 
FILE
 *
	$f›í64
 (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

295 
__c⁄°
 *
__ª°ri˘
 
__modes
Ë
__wur
;

296 
FILE
 *
	$‰e›í64
 (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

297 
__c⁄°
 *
__ª°ri˘
 
__modes
,

298 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

301 #ifdef 
__USE_POSIX


303 
FILE
 *
	$fd›í
 (
__fd
, 
__c⁄°
 *
__modes
Ë
__THROW
 
__wur
;

306 #ifdef 
__USE_GNU


309 
FILE
 *
	$f›ícookõ
 (*
__ª°ri˘
 
__magic_cookõ
,

310 
__c⁄°
 *
__ª°ri˘
 
__modes
,

311 
_IO_cookõ_io_fun˘i⁄s_t
 
__io_funcs
Ë
__THROW
 
__wur
;

314 #ifde‡
__USE_XOPEN2K8


316 
FILE
 *
	$fmem›í
 (*
__s
, 
size_t
 
__Àn
, 
__c⁄°
 *
__modes
)

317 
__THROW
 
__wur
;

322 
FILE
 *
	$›í_mem°ªam
 (**
__buÊoc
, 
size_t
 *
__sizñoc
Ë
__THROW
 
__wur
;

326 
__BEGIN_NAMESPACE_STD


329 
	$£tbuf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
Ë
__THROW
;

333 
	$£tvbuf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
,

334 
__modes
, 
size_t
 
__n
Ë
__THROW
;

335 
__END_NAMESPACE_STD


337 #ifdef 
__USE_BSD


340 
	$£tbuf„r
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
,

341 
size_t
 
__size
Ë
__THROW
;

344 
	$£éöebuf
 (
FILE
 *
__°ªam
Ë
__THROW
;

348 
__BEGIN_NAMESPACE_STD


353 
	`Ârötf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

354 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...);

359 
	`¥ötf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...);

361 
	$•rötf
 (*
__ª°ri˘
 
__s
,

362 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

368 
	`vÂrötf
 (
FILE
 *
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__f‹m©
,

369 
_G_va_li°
 
__¨g
);

374 
	`v¥ötf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
);

376 
	$v•rötf
 (*
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__f‹m©
,

377 
_G_va_li°
 
__¨g
Ë
__THROW
;

378 
__END_NAMESPACE_STD


380 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_ISOC99
 || deföed 
__USE_UNIX98


381 
__BEGIN_NAMESPACE_C99


383 
	$¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxÀn
,

384 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...)

385 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

387 
	$v¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxÀn
,

388 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

389 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 0)));

390 
__END_NAMESPACE_C99


393 #ifde‡
__USE_GNU


396 
	$va•rötf
 (**
__ª°ri˘
 
__±r
, 
__c⁄°
 *__ª°ri˘ 
__f
,

397 
_G_va_li°
 
__¨g
)

398 
__THROW
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 0))Ë
__wur
;

399 
	$__a•rötf
 (**
__ª°ri˘
 
__±r
,

400 
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...)

401 
__THROW
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 3))Ë
__wur
;

402 
	$a•rötf
 (**
__ª°ri˘
 
__±r
,

403 
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...)

404 
__THROW
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 3))Ë
__wur
;

407 #ifde‡
__USE_XOPEN2K8


414 
	$vd¥ötf
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__fmt
,

415 
_G_va_li°
 
__¨g
)

416 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

417 
	$d¥ötf
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...)

418 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

422 
__BEGIN_NAMESPACE_STD


427 
	$fsˇnf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

428 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

433 
	$sˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

435 
	$ssˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

436 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

438 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

439 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

440 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

441 #ifde‡
__REDIRECT


445 
	`__REDIRECT
 (
fsˇnf
, (
FILE
 *
__ª°ri˘
 
__°ªam
,

446 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...),

447 
__isoc99_fsˇnf
Ë
__wur
;

448 
	`__REDIRECT
 (
sˇnf
, (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...),

449 
__isoc99_sˇnf
Ë
__wur
;

450 
	`__REDIRECT_NTH
 (
ssˇnf
, (
__c⁄°
 *
__ª°ri˘
 
__s
,

451 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...),

452 
__isoc99_ssˇnf
);

454 
	$__isoc99_fsˇnf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

455 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

456 
	$__isoc99_sˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

457 
	$__isoc99_ssˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

458 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

459 
	#fsˇnf
 
__isoc99_fsˇnf


	)

460 
	#sˇnf
 
__isoc99_sˇnf


	)

461 
	#ssˇnf
 
__isoc99_ssˇnf


	)

465 
__END_NAMESPACE_STD


467 #ifdef 
__USE_ISOC99


468 
__BEGIN_NAMESPACE_C99


473 
	$vfsˇnf
 (
FILE
 *
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__f‹m©
,

474 
_G_va_li°
 
__¨g
)

475 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 2, 0))Ë
__wur
;

481 
	$vsˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

482 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 1, 0))Ë
__wur
;

485 
	$vssˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

486 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

487 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__sˇnf__
, 2, 0)));

489 #i‡!
deföed
 
__USE_GNU
 \

490 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

491 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

492 #ifde‡
__REDIRECT


496 
	`__REDIRECT
 (
vfsˇnf
,

497 (
FILE
 *
__ª°ri˘
 
__s
,

498 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
),

499 
__isoc99_vfsˇnf
)

500 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 2, 0))Ë
__wur
;

501 
	`__REDIRECT
 (
vsˇnf
, (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

502 
_G_va_li°
 
__¨g
), 
__isoc99_vsˇnf
)

503 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 1, 0))Ë
__wur
;

504 
	`__REDIRECT_NTH
 (
vssˇnf
,

505 (
__c⁄°
 *
__ª°ri˘
 
__s
,

506 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

507 
_G_va_li°
 
__¨g
), 
__isoc99_vssˇnf
)

508 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__sˇnf__
, 2, 0)));

510 
	$__isoc99_vfsˇnf
 (
FILE
 *
__ª°ri˘
 
__s
,

511 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

512 
_G_va_li°
 
__¨g
Ë
__wur
;

513 
	$__isoc99_vsˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

514 
_G_va_li°
 
__¨g
Ë
__wur
;

515 
	$__isoc99_vssˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

516 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

517 
_G_va_li°
 
__¨g
Ë
__THROW
;

518 
	#vfsˇnf
 
__isoc99_vfsˇnf


	)

519 
	#vsˇnf
 
__isoc99_vsˇnf


	)

520 
	#vssˇnf
 
__isoc99_vssˇnf


	)

524 
__END_NAMESPACE_C99


528 
__BEGIN_NAMESPACE_STD


533 
	`fgëc
 (
FILE
 *
__°ªam
);

534 
	`gëc
 (
FILE
 *
__°ªam
);

540 
	`gëch¨
 ();

541 
__END_NAMESPACE_STD


545 
	#gëc
(
_Â
Ë
	`_IO_gëc
 (_Â)

	)

547 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


552 
	`gëc_u∆ocked
 (
FILE
 *
__°ªam
);

553 
	`gëch¨_u∆ocked
 ();

556 #ifde‡
__USE_MISC


563 
	`fgëc_u∆ocked
 (
FILE
 *
__°ªam
);

567 
__BEGIN_NAMESPACE_STD


575 
	`Âutc
 (
__c
, 
FILE
 *
__°ªam
);

576 
	`putc
 (
__c
, 
FILE
 *
__°ªam
);

582 
	`putch¨
 (
__c
);

583 
__END_NAMESPACE_STD


587 
	#putc
(
_ch
, 
_Â
Ë
	`_IO_putc
 (_ch, _Â)

	)

589 #ifde‡
__USE_MISC


596 
	`Âutc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
);

599 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


604 
	`putc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
);

605 
	`putch¨_u∆ocked
 (
__c
);

609 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC
 \

610 || (
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)

612 
	`gëw
 (
FILE
 *
__°ªam
);

615 
	`putw
 (
__w
, 
FILE
 *
__°ªam
);

619 
__BEGIN_NAMESPACE_STD


624 *
	$fgës
 (*
__ª°ri˘
 
__s
, 
__n
, 
FILE
 *__ª°ri˘ 
__°ªam
)

625 
__wur
;

632 *
	$gës
 (*
__s
Ë
__wur
;

633 
__END_NAMESPACE_STD


635 #ifde‡
__USE_GNU


642 *
	$fgës_u∆ocked
 (*
__ª°ri˘
 
__s
, 
__n
,

643 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

647 #ifdef 
__USE_XOPEN2K8


658 
_IO_ssize_t
 
	$__gëdñim
 (**
__ª°ri˘
 
__löïå
,

659 
size_t
 *
__ª°ri˘
 
__n
, 
__dñimôî
,

660 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

661 
_IO_ssize_t
 
	$gëdñim
 (**
__ª°ri˘
 
__löïå
,

662 
size_t
 *
__ª°ri˘
 
__n
, 
__dñimôî
,

663 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

671 
_IO_ssize_t
 
	$gëlöe
 (**
__ª°ri˘
 
__löïå
,

672 
size_t
 *
__ª°ri˘
 
__n
,

673 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

677 
__BEGIN_NAMESPACE_STD


682 
	`Âuts
 (
__c⁄°
 *
__ª°ri˘
 
__s
, 
FILE
 *__ª°ri˘ 
__°ªam
);

688 
	`puts
 (
__c⁄°
 *
__s
);

695 
	`ungëc
 (
__c
, 
FILE
 *
__°ªam
);

702 
size_t
 
	$‰ód
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

703 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

708 
size_t
 
	`fwrôe
 (
__c⁄°
 *
__ª°ri˘
 
__±r
, size_à
__size
,

709 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__s
);

710 
__END_NAMESPACE_STD


712 #ifde‡
__USE_GNU


719 
	`Âuts_u∆ocked
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

720 
FILE
 *
__ª°ri˘
 
__°ªam
);

723 #ifde‡
__USE_MISC


730 
size_t
 
	$‰ód_u∆ocked
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

731 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

732 
size_t
 
	`fwrôe_u∆ocked
 (
__c⁄°
 *
__ª°ri˘
 
__±r
, size_à
__size
,

733 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
);

737 
__BEGIN_NAMESPACE_STD


742 
	`f£ek
 (
FILE
 *
__°ªam
, 
__off
, 
__whí˚
);

747 
	$·ñl
 (
FILE
 *
__°ªam
Ë
__wur
;

752 
	`ªwöd
 (
FILE
 *
__°ªam
);

753 
__END_NAMESPACE_STD


760 #i‡
deföed
 
__USE_LARGEFILE
 || deföed 
__USE_XOPEN2K


761 #i‚de‡
__USE_FILE_OFFSET64


766 
	`f£eko
 (
FILE
 *
__°ªam
, 
__off_t
 
__off
, 
__whí˚
);

771 
__off_t
 
	$·ñlo
 (
FILE
 *
__°ªam
Ë
__wur
;

773 #ifde‡
__REDIRECT


774 
	`__REDIRECT
 (
f£eko
,

775 (
FILE
 *
__°ªam
, 
__off64_t
 
__off
, 
__whí˚
),

776 
f£eko64
);

777 
__off64_t
 
	`__REDIRECT
 (
·ñlo
, (
FILE
 *
__°ªam
), 
·ñlo64
);

779 
	#f£eko
 
f£eko64


	)

780 
	#·ñlo
 
·ñlo64


	)

785 
__BEGIN_NAMESPACE_STD


786 #i‚de‡
__USE_FILE_OFFSET64


791 
	`fgëpos
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
Âos_t
 *__ª°ri˘ 
__pos
);

796 
	`f£ços
 (
FILE
 *
__°ªam
, 
__c⁄°
 
Âos_t
 *
__pos
);

798 #ifde‡
__REDIRECT


799 
	`__REDIRECT
 (
fgëpos
, (
FILE
 *
__ª°ri˘
 
__°ªam
,

800 
Âos_t
 *
__ª°ri˘
 
__pos
), 
fgëpos64
);

801 
	`__REDIRECT
 (
f£ços
,

802 (
FILE
 *
__°ªam
, 
__c⁄°
 
Âos_t
 *
__pos
), 
f£ços64
);

804 
	#fgëpos
 
fgëpos64


	)

805 
	#f£ços
 
f£ços64


	)

808 
__END_NAMESPACE_STD


810 #ifde‡
__USE_LARGEFILE64


811 
	`f£eko64
 (
FILE
 *
__°ªam
, 
__off64_t
 
__off
, 
__whí˚
);

812 
__off64_t
 
	$·ñlo64
 (
FILE
 *
__°ªam
Ë
__wur
;

813 
	`fgëpos64
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
Âos64_t
 *__ª°ri˘ 
__pos
);

814 
	`f£ços64
 (
FILE
 *
__°ªam
, 
__c⁄°
 
Âos64_t
 *
__pos
);

817 
__BEGIN_NAMESPACE_STD


819 
	$˛óªº
 (
FILE
 *
__°ªam
Ë
__THROW
;

821 
	$„of
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

823 
	$„º‹
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

824 
__END_NAMESPACE_STD


826 #ifde‡
__USE_MISC


828 
	$˛óªº_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
;

829 
	$„of_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

830 
	$„º‹_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

834 
__BEGIN_NAMESPACE_STD


839 
	`≥º‹
 (
__c⁄°
 *
__s
);

840 
__END_NAMESPACE_STD


846 
	~<bôs/sys_îæi°.h
>

849 #ifdef 
__USE_POSIX


851 
	$fûío
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

854 #ifde‡
__USE_MISC


856 
	$fûío_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

860 #i‡(
deföed
 
__USE_POSIX2
 || deföed 
__USE_SVID
 || deföed 
__USE_BSD
 || \

861 
deföed
 
__USE_MISC
)

866 
FILE
 *
	$p›í
 (
__c⁄°
 *
__comm™d
, __c⁄° *
__modes
Ë
__wur
;

872 
	`p˛o£
 (
FILE
 *
__°ªam
);

876 #ifdef 
__USE_POSIX


878 *
	$˘îmid
 (*
__s
Ë
__THROW
;

882 #ifde‡
__USE_XOPEN


884 *
	`cu£rid
 (*
__s
);

888 #ifdef 
__USE_GNU


889 
ob°ack
;

892 
	$ob°ack_¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

893 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...)

894 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

895 
	$ob°ack_v¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

896 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

897 
_G_va_li°
 
__¨gs
)

898 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

902 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


906 
	$Êockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
;

910 
	$·rylockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

913 
	$fu∆ockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
;

916 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
 && !deföed 
__USE_GNU


920 
	#__√ed_gë›t


	)

921 
	~<gë›t.h
>

926 #ifde‡
__USE_EXTERN_INLINES


927 
	~<bôs/°dio.h
>

929 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


930 
	~<bôs/°dio2.h
>

932 #ifde‡
__LDBL_COMPAT


933 
	~<bôs/°dio-ldbl.h
>

936 
__END_DECLS


	@/usr/include/stdlib.h

23 #i‚def 
_STDLIB_H


25 
	~<„©uªs.h
>

28 
	#__√ed_size_t


	)

29 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


30 
	#__√ed_wch¨_t


	)

31 
	#__√ed_NULL


	)

33 
	~<°ddef.h
>

35 
	g__BEGIN_DECLS


37 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


38 
	#_STDLIB_H
 1

	)

40 #i‡(
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8
Ë&& !deföed 
_SYS_WAIT_H


42 
	~<bôs/waôÊags.h
>

43 
	~<bôs/waô°©us.h
>

45 #ifde‡
__USE_BSD


50 #i‡
deföed
 
__GNUC__
 && !deföed 
__˝lu•lus


51 
	#__WAIT_INT
(
°©us
) \

52 (
	`__exãnsi⁄__
 (((uni⁄ { 
	`__ty≥of
(
°©us
Ë
__ö
; 
__i
; }) \

53 { .
__ö
 = (
°©us
Ë}).
__i
))

	)

55 
	#__WAIT_INT
(
°©us
Ë(*(*Ë&(°©us))

	)

63 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2 || deföed 
__˝lu•lus


64 
	#__WAIT_STATUS
 *

	)

65 
	#__WAIT_STATUS_DEFN
 *

	)

70 
waô
 *
	m__u±r
;

71 *
	m__ùå
;

72 } 
	t__WAIT_STATUS
 
	t__©åibuã__
 ((
	t__å™•¨ít_uni⁄__
));

73 
	#__WAIT_STATUS_DEFN
 *

	)

78 
	#__WAIT_INT
(
°©us
Ë(°©us)

	)

79 
	#__WAIT_STATUS
 *

	)

80 
	#__WAIT_STATUS_DEFN
 *

	)

85 
	#WEXITSTATUS
(
°©us
Ë
	`__WEXITSTATUS
 (
	`__WAIT_INT
 (°©us))

	)

86 
	#WTERMSIG
(
°©us
Ë
	`__WTERMSIG
 (
	`__WAIT_INT
 (°©us))

	)

87 
	#WSTOPSIG
(
°©us
Ë
	`__WSTOPSIG
 (
	`__WAIT_INT
 (°©us))

	)

88 
	#WIFEXITED
(
°©us
Ë
	`__WIFEXITED
 (
	`__WAIT_INT
 (°©us))

	)

89 
	#WIFSIGNALED
(
°©us
Ë
	`__WIFSIGNALED
 (
	`__WAIT_INT
 (°©us))

	)

90 
	#WIFSTOPPED
(
°©us
Ë
	`__WIFSTOPPED
 (
	`__WAIT_INT
 (°©us))

	)

91 #ifde‡
__WIFCONTINUED


92 
	#WIFCONTINUED
(
°©us
Ë
	`__WIFCONTINUED
 (
	`__WAIT_INT
 (°©us))

	)

96 
__BEGIN_NAMESPACE_STD


100 
	mquŸ
;

101 
	mªm
;

102 } 
	tdiv_t
;

105 #i‚de‡
__ldiv_t_deföed


108 
	mquŸ
;

109 
	mªm
;

110 } 
	tldiv_t
;

111 
	#__ldiv_t_deföed
 1

	)

113 
	g__END_NAMESPACE_STD


115 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__Œdiv_t_deföed


116 
__BEGIN_NAMESPACE_C99


118 
__exãnsi⁄__
 struct

120 
	mquŸ
;

121 
	mªm
;

122 } 
	tŒdiv_t
;

123 
	#__Œdiv_t_deföed
 1

	)

124 
	g__END_NAMESPACE_C99


129 
	#RAND_MAX
 2147483647

	)

134 
	#EXIT_FAILURE
 1

	)

135 
	#EXIT_SUCCESS
 0

	)

139 
	#MB_CUR_MAX
 (
	`__˘y≥_gë_mb_cur_max
 ())

	)

140 
size_t
 
	$__˘y≥_gë_mb_cur_max
 (Ë
__THROW
 
__wur
;

143 
__BEGIN_NAMESPACE_STD


145 
	$©of
 (
__c⁄°
 *
__≈å
)

146 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

148 
	$©oi
 (
__c⁄°
 *
__≈å
)

149 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

151 
	$©ﬁ
 (
__c⁄°
 *
__≈å
)

152 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

153 
__END_NAMESPACE_STD


155 #i‡
deföed
 
__USE_ISOC99
 || (deföed 
__GLIBC_HAVE_LONG_LONG
 && deföed 
__USE_MISC
)

156 
__BEGIN_NAMESPACE_C99


158 
__exãnsi⁄__
 
	$©ﬁl
 (
__c⁄°
 *
__≈å
)

159 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

160 
__END_NAMESPACE_C99


163 
__BEGIN_NAMESPACE_STD


165 
	$°πod
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

166 **
__ª°ri˘
 
__íd±r
)

167 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

168 
__END_NAMESPACE_STD


170 #ifdef 
__USE_ISOC99


171 
__BEGIN_NAMESPACE_C99


173 
	$°πof
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

174 **
__ª°ri˘
 
__íd±r
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

176 
	$°πﬁd
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

177 **
__ª°ri˘
 
__íd±r
)

178 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

179 
__END_NAMESPACE_C99


182 
__BEGIN_NAMESPACE_STD


184 
	$°πﬁ
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

185 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

186 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

188 
	$°πoul
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

189 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

190 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

191 
__END_NAMESPACE_STD


193 #i‡
deföed
 
__GLIBC_HAVE_LONG_LONG
 && deföed 
__USE_BSD


195 
__exãnsi⁄__


196 
	$°πoq
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

197 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

198 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

200 
__exãnsi⁄__


201 
	$°πouq
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

202 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

203 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

206 #i‡
deföed
 
__USE_ISOC99
 || (deföed 
__GLIBC_HAVE_LONG_LONG
 && deföed 
__USE_MISC
)

207 
__BEGIN_NAMESPACE_C99


209 
__exãnsi⁄__


210 
	$°πﬁl
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

211 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

212 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

214 
__exãnsi⁄__


215 
	$°πouŒ
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

216 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

217 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

218 
__END_NAMESPACE_C99


222 #ifde‡
__USE_GNU


236 
	~<xloˇÀ.h
>

240 
	$°πﬁ_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

241 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

242 
__loˇÀ_t
 
__loc
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 4)Ë
__wur
;

244 
	$°πoul_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

245 **
__ª°ri˘
 
__íd±r
,

246 
__ba£
, 
__loˇÀ_t
 
__loc
)

247 
__THROW
 
	`__n⁄nuŒ
 ((1, 4)Ë
__wur
;

249 
__exãnsi⁄__


250 
	$°πﬁl_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

251 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

252 
__loˇÀ_t
 
__loc
)

253 
__THROW
 
	`__n⁄nuŒ
 ((1, 4)Ë
__wur
;

255 
__exãnsi⁄__


256 
	$°πouŒ_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

257 **
__ª°ri˘
 
__íd±r
,

258 
__ba£
, 
__loˇÀ_t
 
__loc
)

259 
__THROW
 
	`__n⁄nuŒ
 ((1, 4)Ë
__wur
;

261 
	$°πod_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

262 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

263 
__THROW
 
	`__n⁄nuŒ
 ((1, 3)Ë
__wur
;

265 
	$°πof_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

266 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

267 
__THROW
 
	`__n⁄nuŒ
 ((1, 3)Ë
__wur
;

269 
	$°πﬁd_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

270 **
__ª°ri˘
 
__íd±r
,

271 
__loˇÀ_t
 
__loc
)

272 
__THROW
 
	`__n⁄nuŒ
 ((1, 3)Ë
__wur
;

276 #ifde‡
__USE_EXTERN_INLINES


277 
__BEGIN_NAMESPACE_STD


278 
__exã∫_ölöe
 

279 
	`__NTH
 (
	$©of
 (
__c⁄°
 *
__≈å
))

281  
	`°πod
 (
__≈å
, (**Ë
NULL
);

282 
	}
}

283 
__exã∫_ölöe
 

284 
__NTH
 (
	$©oi
 (
__c⁄°
 *
__≈å
))

286  (Ë
	`°πﬁ
 (
__≈å
, (**Ë
NULL
, 10);

287 
	}
}

288 
__exã∫_ölöe
 

289 
__NTH
 (
	$©ﬁ
 (
__c⁄°
 *
__≈å
))

291  
	`°πﬁ
 (
__≈å
, (**Ë
NULL
, 10);

292 
	}
}

293 
	g__END_NAMESPACE_STD


295 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_ISOC99


296 
__BEGIN_NAMESPACE_C99


297 
__exãnsi⁄__
 
__exã∫_ölöe
 

298 
__NTH
 (
	$©ﬁl
 (
__c⁄°
 *
__≈å
))

300  
	`°πﬁl
 (
__≈å
, (**Ë
NULL
, 10);

301 
	}
}

302 
	g__END_NAMESPACE_C99


307 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN_EXTENDED


311 *
	$l64a
 (
__n
Ë
__THROW
 
__wur
;

314 
	$a64l
 (
__c⁄°
 *
__s
)

315 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

319 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_BSD


320 
	~<sys/ty≥s.h
>

327 
	$øndom
 (Ë
__THROW
;

330 
	$§™dom
 (
__£ed
Ë
__THROW
;

336 *
	$öô°©e
 (
__£ed
, *
__°©ebuf
,

337 
size_t
 
__°©ñí
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

341 *
	$£t°©e
 (*
__°©ebuf
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

344 #ifde‡
__USE_MISC


349 
	søndom_d©a


351 
öt32_t
 *
Âå
;

352 
öt32_t
 *
Ωå
;

353 
öt32_t
 *
°©e
;

354 
ønd_ty≥
;

355 
ønd_deg
;

356 
ønd_£p
;

357 
öt32_t
 *
íd_±r
;

360 
	$øndom_r
 (
øndom_d©a
 *
__ª°ri˘
 
__buf
,

361 
öt32_t
 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

363 
	$§™dom_r
 (
__£ed
, 
øndom_d©a
 *
__buf
)

364 
__THROW
 
	`__n⁄nuŒ
 ((2));

366 
	$öô°©e_r
 (
__£ed
, *
__ª°ri˘
 
__°©ebuf
,

367 
size_t
 
__°©ñí
,

368 
øndom_d©a
 *
__ª°ri˘
 
__buf
)

369 
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

371 
	$£t°©e_r
 (*
__ª°ri˘
 
__°©ebuf
,

372 
øndom_d©a
 *
__ª°ri˘
 
__buf
)

373 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

378 
__BEGIN_NAMESPACE_STD


380 
	$ønd
 (Ë
__THROW
;

382 
	$§™d
 (
__£ed
Ë
__THROW
;

383 
__END_NAMESPACE_STD


385 #ifde‡
__USE_POSIX


387 
	$ønd_r
 (*
__£ed
Ë
__THROW
;

391 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


395 
	$dønd48
 (Ë
__THROW
;

396 
	$î™d48
 (
__xsubi
[3]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

399 
	$Ã™d48
 (Ë
__THROW
;

400 
	$ƒ™d48
 (
__xsubi
[3])

401 
__THROW
 
	`__n⁄nuŒ
 ((1));

404 
	$mønd48
 (Ë
__THROW
;

405 
	$jønd48
 (
__xsubi
[3])

406 
__THROW
 
	`__n⁄nuŒ
 ((1));

409 
	$§™d48
 (
__£edvÆ
Ë
__THROW
;

410 *
	$£ed48
 (
__£ed16v
[3])

411 
__THROW
 
	`__n⁄nuŒ
 ((1));

412 
	$lc⁄g48
 (
__∑øm
[7]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

414 #ifde‡
__USE_MISC


418 
	sdønd48_d©a


420 
__x
[3];

421 
__ﬁd_x
[3];

422 
__c
;

423 
__öô
;

424 
__a
;

428 
	$dønd48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

429 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

430 
	$î™d48_r
 (
__xsubi
[3],

431 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

432 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

435 
	$Ã™d48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

436 *
__ª°ri˘
 
__ªsu…
)

437 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

438 
	$ƒ™d48_r
 (
__xsubi
[3],

439 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

440 *
__ª°ri˘
 
__ªsu…
)

441 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

444 
	$mønd48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

445 *
__ª°ri˘
 
__ªsu…
)

446 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

447 
	$jønd48_r
 (
__xsubi
[3],

448 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

449 *
__ª°ri˘
 
__ªsu…
)

450 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

453 
	$§™d48_r
 (
__£edvÆ
, 
dønd48_d©a
 *
__buf„r
)

454 
__THROW
 
	`__n⁄nuŒ
 ((2));

456 
	$£ed48_r
 (
__£ed16v
[3],

457 
dønd48_d©a
 *
__buf„r
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

459 
	$lc⁄g48_r
 (
__∑øm
[7],

460 
dønd48_d©a
 *
__buf„r
)

461 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

467 #i‚de‡
__mÆloc_™d_ˇŒoc_deföed


468 
	#__mÆloc_™d_ˇŒoc_deföed


	)

469 
__BEGIN_NAMESPACE_STD


471 *
	$mÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

473 *
	$ˇŒoc
 (
size_t
 
__nmemb
, size_à
__size
)

474 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

475 
__END_NAMESPACE_STD


478 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


479 
__BEGIN_NAMESPACE_STD


485 *
	$ªÆloc
 (*
__±r
, 
size_t
 
__size
)

486 
__THROW
 
__©åibuã_w¨n_unu£d_ªsu…__
;

488 
	$‰ì
 (*
__±r
Ë
__THROW
;

489 
__END_NAMESPACE_STD


491 #ifdef 
__USE_MISC


493 
	$c‰ì
 (*
__±r
Ë
__THROW
;

496 #i‡
deföed
 
__USE_GNU
 || deföed 
__USE_BSD
 || deföed 
__USE_MISC


497 
	~<Æloˇ.h
>

500 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
) \

501 || 
deföed
 
__USE_BSD


503 *
	$vÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

506 #ifde‡
__USE_XOPEN2K


508 
	$posix_memÆign
 (**
__mem±r
, 
size_t
 
__Æignmít
, size_à
__size
)

509 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

512 
__BEGIN_NAMESPACE_STD


514 
	$ab‹t
 (Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

518 
	`©exô
 ((*
__func
Ë()Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

520 #ifde‡
__USE_GNU


524 #ifde‡
__˝lu•lus


525 "C++" 
	`©_quick_exô
 ((*
__func
) ())

526 
__THROW
 
	`__asm
 ("©_quick_exô"Ë
	`__n⁄nuŒ
 ((1));

528 
	`©_quick_exô
 ((*
__func
Ë()Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

531 
__END_NAMESPACE_STD


533 #ifdef 
__USE_MISC


536 
	`⁄_exô
 ((*
__func
Ë(
__°©us
, *
__¨g
), *__arg)

537 
__THROW
 
	`__n⁄nuŒ
 ((1));

540 
__BEGIN_NAMESPACE_STD


544 
	$exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

546 #ifde‡
__USE_GNU


552 
	$quick_exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

554 
__END_NAMESPACE_STD


556 #ifde‡
__USE_ISOC99


557 
__BEGIN_NAMESPACE_C99


560 
	$_Exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

561 
__END_NAMESPACE_C99


565 
__BEGIN_NAMESPACE_STD


567 *
	$gëív
 (
__c⁄°
 *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

568 
__END_NAMESPACE_STD


572 *
	$__£cuª_gëív
 (
__c⁄°
 *
__«me
)

573 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

575 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


579 
	$puãnv
 (*
__°rög
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

582 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN2K


585 
	$£ãnv
 (
__c⁄°
 *
__«me
, __c⁄° *
__vÆue
, 
__ª∂a˚
)

586 
__THROW
 
	`__n⁄nuŒ
 ((2));

589 
	$un£ãnv
 (
__c⁄°
 *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

592 #ifdef 
__USE_MISC


596 
	$˛óªnv
 (Ë
__THROW
;

600 #i‡
deföed
 
__USE_MISC
 \

601 || (
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
)

606 *
	$mkãmp
 (*
__ãm∂©e
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

609 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
 \

610 || 
deföed
 
__USE_XOPEN2K8


619 #i‚de‡
__USE_FILE_OFFSET64


620 
	$mk°emp
 (*
__ãm∂©e
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

622 #ifde‡
__REDIRECT


623 
	`__REDIRECT
 (
mk°emp
, (*
__ãm∂©e
), 
mk°emp64
)

624 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

626 
	#mk°emp
 
mk°emp64


	)

629 #ifde‡
__USE_LARGEFILE64


630 
	$mk°emp64
 (*
__ãm∂©e
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

634 #ifde‡
__USE_MISC


641 #i‚de‡
__USE_FILE_OFFSET64


642 
	$mk°emps
 (*
__ãm∂©e
, 
__suffixÀn
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

644 #ifde‡
__REDIRECT


645 
	`__REDIRECT
 (
mk°emps
, (*
__ãm∂©e
, 
__suffixÀn
),

646 
mk°emps64
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

648 
	#mk°emps
 
mk°emps64


	)

651 #ifde‡
__USE_LARGEFILE64


652 
	$mk°emps64
 (*
__ãm∂©e
, 
__suffixÀn
)

653 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

657 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN2K8


663 *
	$mkdãmp
 (*
__ãm∂©e
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

666 #ifde‡
__USE_GNU


673 #i‚de‡
__USE_FILE_OFFSET64


674 
	$mko°emp
 (*
__ãm∂©e
, 
__Êags
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

676 #ifde‡
__REDIRECT


677 
	`__REDIRECT
 (
mko°emp
, (*
__ãm∂©e
, 
__Êags
), 
mko°emp64
)

678 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

680 
	#mko°emp
 
mko°emp64


	)

683 #ifde‡
__USE_LARGEFILE64


684 
	$mko°emp64
 (*
__ãm∂©e
, 
__Êags
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

693 #i‚de‡
__USE_FILE_OFFSET64


694 
	$mko°emps
 (*
__ãm∂©e
, 
__suffixÀn
, 
__Êags
)

695 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

697 #ifde‡
__REDIRECT


698 
	`__REDIRECT
 (
mko°emps
, (*
__ãm∂©e
, 
__suffixÀn
,

699 
__Êags
), 
mko°emps64
)

700 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

702 
	#mko°emps
 
mko°emps64


	)

705 #ifde‡
__USE_LARGEFILE64


706 
	$mko°emps64
 (*
__ãm∂©e
, 
__suffixÀn
, 
__Êags
)

707 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

712 
__BEGIN_NAMESPACE_STD


717 
	$sy°em
 (
__c⁄°
 *
__comm™d
Ë
__wur
;

718 
__END_NAMESPACE_STD


721 #ifdef 
__USE_GNU


724 *
	$ˇn⁄iˇlize_fûe_«me
 (
__c⁄°
 *
__«me
)

725 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

728 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


734 *
	$ªÆ∑th
 (
__c⁄°
 *
__ª°ri˘
 
__«me
,

735 *
__ª°ri˘
 
__ªsﬁved
Ë
__THROW
 
__wur
;

740 #i‚de‡
__COMPAR_FN_T


741 
	#__COMPAR_FN_T


	)

742 (*
	t__com∑r_‚_t
Ë(
	t__c⁄°
 *, __const *);

744 #ifdef 
__USE_GNU


745 
__com∑r_‚_t
 
	tcom∑ris⁄_‚_t
;

748 #ifde‡
__USE_GNU


749 (*
	t__com∑r_d_‚_t
Ë(
	t__c⁄°
 *, __const *, *);

752 
__BEGIN_NAMESPACE_STD


755 *
	$b£¨ch
 (
__c⁄°
 *
__key
, __c⁄° *
__ba£
,

756 
size_t
 
__nmemb
, size_à
__size
, 
__com∑r_‚_t
 
__com∑r
)

757 
	`__n⁄nuŒ
 ((1, 2, 5)Ë
__wur
;

761 
	$qs‹t
 (*
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

762 
__com∑r_‚_t
 
__com∑r
Ë
	`__n⁄nuŒ
 ((1, 4));

763 #ifde‡
__USE_GNU


764 
	$qs‹t_r
 (*
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

765 
__com∑r_d_‚_t
 
__com∑r
, *
__¨g
)

766 
	`__n⁄nuŒ
 ((1, 4));

771 
	$abs
 (
__x
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

772 
	$œbs
 (
__x
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

773 
__END_NAMESPACE_STD


775 #ifde‡
__USE_ISOC99


776 
__exãnsi⁄__
 
	$Œabs
 (
__x
)

777 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

781 
__BEGIN_NAMESPACE_STD


785 
div_t
 
	$div
 (
__numî
, 
__díom
)

786 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

787 
ldiv_t
 
	$ldiv
 (
__numî
, 
__díom
)

788 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

789 
__END_NAMESPACE_STD


791 #ifde‡
__USE_ISOC99


792 
__BEGIN_NAMESPACE_C99


793 
__exãnsi⁄__
 
Œdiv_t
 
	$Œdiv
 (
__numî
,

794 
__díom
)

795 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

796 
__END_NAMESPACE_C99


800 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
) \

801 || 
deföed
 
__USE_SVID


808 *
	$ecvt
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

809 *
__ª°ri˘
 
__sign
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

814 *
	$fcvt
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

815 *
__ª°ri˘
 
__sign
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

820 *
	$gcvt
 (
__vÆue
, 
__ndigô
, *
__buf
)

821 
__THROW
 
	`__n⁄nuŒ
 ((3)Ë
__wur
;

824 #ifde‡
__USE_MISC


826 *
	$qecvt
 (
__vÆue
, 
__ndigô
,

827 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
)

828 
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

829 *
	$qfcvt
 (
__vÆue
, 
__ndigô
,

830 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
)

831 
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

832 *
	$qgcvt
 (
__vÆue
, 
__ndigô
, *
__buf
)

833 
__THROW
 
	`__n⁄nuŒ
 ((3)Ë
__wur
;

838 
	$ecvt_r
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

839 *
__ª°ri˘
 
__sign
, *__ª°ri˘ 
__buf
,

840 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

841 
	$fcvt_r
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

842 *
__ª°ri˘
 
__sign
, *__ª°ri˘ 
__buf
,

843 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

845 
	$qecvt_r
 (
__vÆue
, 
__ndigô
,

846 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
,

847 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

848 
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

849 
	$qfcvt_r
 (
__vÆue
, 
__ndigô
,

850 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
,

851 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

852 
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

857 
__BEGIN_NAMESPACE_STD


860 
	$mbÀn
 (
__c⁄°
 *
__s
, 
size_t
 
__n
Ë
__THROW
 
__wur
;

863 
	$mbtowc
 (
wch¨_t
 *
__ª°ri˘
 
__pwc
,

864 
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
Ë
__THROW
 
__wur
;

867 
	$w˘omb
 (*
__s
, 
wch¨_t
 
__wch¨
Ë
__THROW
 
__wur
;

871 
size_t
 
	$mb°owcs
 (
wch¨_t
 *
__ª°ri˘
 
__pwcs
,

872 
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
Ë
__THROW
;

874 
size_t
 
	$wc°ombs
 (*
__ª°ri˘
 
__s
,

875 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__pwcs
, 
size_t
 
__n
)

876 
__THROW
;

877 
__END_NAMESPACE_STD


880 #ifde‡
__USE_SVID


885 
	$Ωm©ch
 (
__c⁄°
 *
__ª•⁄£
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

889 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


896 
	$gësub›t
 (**
__ª°ri˘
 
__›ti⁄p
,

897 *
__c⁄°
 *
__ª°ri˘
 
__tokís
,

898 **
__ª°ri˘
 
__vÆuï
)

899 
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3)Ë
__wur
;

903 #ifde‡
__USE_XOPEN


905 
	$£tkey
 (
__c⁄°
 *
__key
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

911 #ifde‡
__USE_XOPEN2KXSI


913 
	$posix_›í±
 (
__oÊag
Ë
__wur
;

916 #ifde‡
__USE_XOPEN


921 
	$gø¡±
 (
__fd
Ë
__THROW
;

925 
	$u∆ock±
 (
__fd
Ë
__THROW
;

930 *
	$±¢ame
 (
__fd
Ë
__THROW
 
__wur
;

933 #ifde‡
__USE_GNU


937 
	$±¢ame_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
)

938 
__THROW
 
	`__n⁄nuŒ
 ((2));

941 
	`gë±
 ();

944 #ifde‡
__USE_BSD


948 
	$gëlﬂdavg
 (
__lﬂdavg
[], 
__√Àm
)

949 
__THROW
 
	`__n⁄nuŒ
 ((1));

954 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


955 
	~<bôs/°dlib.h
>

957 #ifde‡
__LDBL_COMPAT


958 
	~<bôs/°dlib-ldbl.h
>

962 #unde‡
__√ed_mÆloc_™d_ˇŒoc


964 
__END_DECLS


	@/usr/include/string.h

24 #i‚def 
_STRING_H


25 
	#_STRING_H
 1

	)

27 
	~<„©uªs.h
>

29 
	g__BEGIN_DECLS


32 
	#__√ed_size_t


	)

33 
	#__√ed_NULL


	)

34 
	~<°ddef.h
>

37 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (4, 4)

38 
	#__CORRECT_ISO_CPP_STRING_H_PROTO


	)

42 
__BEGIN_NAMESPACE_STD


44 *
	$mem˝y
 (*
__ª°ri˘
 
__de°
,

45 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

46 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

49 *
	$memmove
 (*
__de°
, 
__c⁄°
 *
__§c
, 
size_t
 
__n
)

50 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

51 
__END_NAMESPACE_STD


56 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN


57 *
	$memc˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
,

58 
__c
, 
size_t
 
__n
)

59 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

63 
__BEGIN_NAMESPACE_STD


65 *
	$mem£t
 (*
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

68 
	$memcmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
size_t
 
__n
)

69 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

72 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


75 *
	`memchr
 (*
__s
, 
__c
, 
size_t
 
__n
)

76 
__THROW
 
	`__asm
 ("memchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

77 
__c⁄°
 *
	`memchr
 (__c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

78 
__THROW
 
	`__asm
 ("memchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

80 #ifde‡
__OPTIMIZE__


81 
__exã∫_Æways_ölöe
 *

82 
	`memchr
 (*
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW


84  
	`__buûtö_memchr
 (
__s
, 
__c
, 
__n
);

87 
__exã∫_Æways_ölöe
 
__c⁄°
 *

88 
	`memchr
 (
__c⁄°
 *
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW


90  
	`__buûtö_memchr
 (
__s
, 
__c
, 
__n
);

93 
	}
}

95 *
	$memchr
 (
__c⁄°
 *
__s
, 
__c
, 
size_t
 
__n
)

96 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

98 
__END_NAMESPACE_STD


100 #ifde‡
__USE_GNU


103 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


104 "C++" *
	$øwmemchr
 (*
__s
, 
__c
)

105 
__THROW
 
	`__asm
 ("øwmemchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

106 "C++" 
__c⁄°
 *
	$øwmemchr
 (
__c⁄°
 *
__s
, 
__c
)

107 
__THROW
 
	`__asm
 ("øwmemchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

109 *
	$øwmemchr
 (
__c⁄°
 *
__s
, 
__c
)

110 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

114 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


115 "C++" *
	$memrchr
 (*
__s
, 
__c
, 
size_t
 
__n
)

116 
__THROW
 
	`__asm
 ("memrchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

117 "C++" 
__c⁄°
 *
	$memrchr
 (
__c⁄°
 *
__s
, 
__c
, 
size_t
 
__n
)

118 
__THROW
 
	`__asm
 ("memrchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

120 *
	$memrchr
 (
__c⁄°
 *
__s
, 
__c
, 
size_t
 
__n
)

121 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

126 
__BEGIN_NAMESPACE_STD


128 *
	$°r˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
)

129 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

131 *
	$°∫˝y
 (*
__ª°ri˘
 
__de°
,

132 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

133 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

136 *
	$°rˇt
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
)

137 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

139 *
	$°∫ˇt
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
,

140 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

143 
	$°rcmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
)

144 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

146 
	$°∫cmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
size_t
 
__n
)

147 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

150 
	$°rcﬁl
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
)

151 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

153 
size_t
 
	$°rx‰m
 (*
__ª°ri˘
 
__de°
,

154 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

155 
__THROW
 
	`__n⁄nuŒ
 ((2));

156 
__END_NAMESPACE_STD


158 #ifde‡
__USE_XOPEN2K8


162 
	~<xloˇÀ.h
>

165 
	$°rcﬁl_l
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
__loˇÀ_t
 
__l
)

166 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

168 
size_t
 
	$°rx‰m_l
 (*
__de°
, 
__c⁄°
 *
__§c
, 
size_t
 
__n
,

169 
__loˇÀ_t
 
__l
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

172 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 \

173 || 
deföed
 
__USE_XOPEN2K8


175 *
	$°rdup
 (
__c⁄°
 *
__s
)

176 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

182 #i‡
deföed
 
__USE_XOPEN2K8


183 *
	$°∫dup
 (
__c⁄°
 *
__°rög
, 
size_t
 
__n
)

184 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

187 #i‡
deföed
 
__USE_GNU
 && deföed 
__GNUC__


189 
	#°rdu∑
(
s
) \

190 (
__exãnsi⁄__
 \

192 
__c⁄°
 *
__ﬁd
 = (
s
); \

193 
size_t
 
__Àn
 = 
	`°æí
 (
__ﬁd
) + 1; \

194 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
); \

195 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

196 
	}
}))

	)

199 
	#°∫du∑
(
s
, 
n
) \

200 (
__exãnsi⁄__
 \

202 
__c⁄°
 *
__ﬁd
 = (
s
); \

203 
size_t
 
__Àn
 = 
	`°∫Àn
 (
__ﬁd
, (
n
)); \

204 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
 + 1); \

205 
__√w
[
__Àn
] = '\0'; \

206 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

207 }))

	)

210 
	g__BEGIN_NAMESPACE_STD


212 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


215 *
°rchr
 (*
__s
, 
__c
)

216 
__THROW
 
__asm
 ("°rchr"Ë
__©åibuã_puª__
 
__n⁄nuŒ
 ((1));

217 
__c⁄°
 *
°rchr
 (__c⁄° *
__s
, 
__c
)

218 
__THROW
 
__asm
 ("°rchr"Ë
__©åibuã_puª__
 
__n⁄nuŒ
 ((1));

220 #ifde‡
__OPTIMIZE__


221 
__exã∫_Æways_ölöe
 *

222 
°rchr
 (*
__s
, 
__c
Ë
	g__THROW


224  
__buûtö_°rchr
 (
__s
, 
__c
);

227 
__exã∫_Æways_ölöe
 
__c⁄°
 *

228 
°rchr
 (
__c⁄°
 *
__s
, 
__c
Ë
	g__THROW


230  
__buûtö_°rchr
 (
__s
, 
__c
);

235 *
	$°rchr
 (
__c⁄°
 *
__s
, 
__c
)

236 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

239 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


242 *
	`°ºchr
 (*
__s
, 
__c
)

243 
__THROW
 
	`__asm
 ("°ºchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

244 
__c⁄°
 *
	`°ºchr
 (__c⁄° *
__s
, 
__c
)

245 
__THROW
 
	`__asm
 ("°ºchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

247 #ifde‡
__OPTIMIZE__


248 
__exã∫_Æways_ölöe
 *

249 
	`°ºchr
 (*
__s
, 
__c
Ë
__THROW


251  
	`__buûtö_°ºchr
 (
__s
, 
__c
);

254 
__exã∫_Æways_ölöe
 
__c⁄°
 *

255 
	`°ºchr
 (
__c⁄°
 *
__s
, 
__c
Ë
__THROW


257  
	`__buûtö_°ºchr
 (
__s
, 
__c
);

260 
	}
}

262 *
	$°ºchr
 (
__c⁄°
 *
__s
, 
__c
)

263 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

265 
__END_NAMESPACE_STD


267 #ifde‡
__USE_GNU


270 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


271 "C++" *
	$°rch∫ul
 (*
__s
, 
__c
)

272 
__THROW
 
	`__asm
 ("°rch∫ul"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

273 "C++" 
__c⁄°
 *
	$°rch∫ul
 (
__c⁄°
 *
__s
, 
__c
)

274 
__THROW
 
	`__asm
 ("°rch∫ul"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

276 *
	$°rch∫ul
 (
__c⁄°
 *
__s
, 
__c
)

277 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

281 
__BEGIN_NAMESPACE_STD


284 
size_t
 
	$°rc•n
 (
__c⁄°
 *
__s
, __c⁄° *
__ªje˘
)

285 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

288 
size_t
 
	$°r•n
 (
__c⁄°
 *
__s
, __c⁄° *
__ac˚±
)

289 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

291 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


294 *
	`°Ωbrk
 (*
__s
, 
__c⁄°
 *
__ac˚±
)

295 
__THROW
 
	`__asm
 ("°Ωbrk"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

296 
__c⁄°
 *
	`°Ωbrk
 (__c⁄° *
__s
, __c⁄° *
__ac˚±
)

297 
__THROW
 
	`__asm
 ("°Ωbrk"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

299 #ifde‡
__OPTIMIZE__


300 
__exã∫_Æways_ölöe
 *

301 
	`°Ωbrk
 (*
__s
, 
__c⁄°
 *
__ac˚±
Ë
__THROW


303  
	`__buûtö_°Ωbrk
 (
__s
, 
__ac˚±
);

306 
__exã∫_Æways_ölöe
 
__c⁄°
 *

307 
	`°Ωbrk
 (
__c⁄°
 *
__s
, __c⁄° *
__ac˚±
Ë
__THROW


309  
	`__buûtö_°Ωbrk
 (
__s
, 
__ac˚±
);

312 
	}
}

314 *
	$°Ωbrk
 (
__c⁄°
 *
__s
, __c⁄° *
__ac˚±
)

315 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

318 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


321 *
	`°r°r
 (*
__hay°ack
, 
__c⁄°
 *
__√edÀ
)

322 
__THROW
 
	`__asm
 ("°r°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

323 
__c⁄°
 *
	`°r°r
 (__c⁄° *
__hay°ack
,

324 
__c⁄°
 *
__√edÀ
)

325 
__THROW
 
	`__asm
 ("°r°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

327 #ifde‡
__OPTIMIZE__


328 
__exã∫_Æways_ölöe
 *

329 
	`°r°r
 (*
__hay°ack
, 
__c⁄°
 *
__√edÀ
Ë
__THROW


331  
	`__buûtö_°r°r
 (
__hay°ack
, 
__√edÀ
);

334 
__exã∫_Æways_ölöe
 
__c⁄°
 *

335 
	`°r°r
 (
__c⁄°
 *
__hay°ack
, __c⁄° *
__√edÀ
Ë
__THROW


337  
	`__buûtö_°r°r
 (
__hay°ack
, 
__√edÀ
);

340 
	}
}

342 *
	$°r°r
 (
__c⁄°
 *
__hay°ack
, __c⁄° *
__√edÀ
)

343 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

348 *
	$°πok
 (*
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__dñim
)

349 
__THROW
 
	`__n⁄nuŒ
 ((2));

350 
__END_NAMESPACE_STD


354 *
	$__°πok_r
 (*
__ª°ri˘
 
__s
,

355 
__c⁄°
 *
__ª°ri˘
 
__dñim
,

356 **
__ª°ri˘
 
__ßve_±r
)

357 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

358 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


359 *
	$°πok_r
 (*
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__dñim
,

360 **
__ª°ri˘
 
__ßve_±r
)

361 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

364 #ifde‡
__USE_GNU


366 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


367 "C++" *
	$°rˇ£°r
 (*
__hay°ack
, 
__c⁄°
 *
__√edÀ
)

368 
__THROW
 
	`__asm
 ("°rˇ£°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

369 "C++" 
__c⁄°
 *
	$°rˇ£°r
 (
__c⁄°
 *
__hay°ack
,

370 
__c⁄°
 *
__√edÀ
)

371 
__THROW
 
	`__asm
 ("°rˇ£°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

373 *
	$°rˇ£°r
 (
__c⁄°
 *
__hay°ack
, __c⁄° *
__√edÀ
)

374 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

378 #ifde‡
__USE_GNU


382 *
	$memmem
 (
__c⁄°
 *
__hay°ack
, 
size_t
 
__hay°ackÀn
,

383 
__c⁄°
 *
__√edÀ
, 
size_t
 
__√edÀÀn
)

384 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 3));

388 *
	$__memp˝y
 (*
__ª°ri˘
 
__de°
,

389 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

390 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

391 *
	$memp˝y
 (*
__ª°ri˘
 
__de°
,

392 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

393 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

397 
__BEGIN_NAMESPACE_STD


399 
size_t
 
	$°æí
 (
__c⁄°
 *
__s
)

400 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

401 
__END_NAMESPACE_STD


403 #ifdef 
__USE_XOPEN2K8


406 
size_t
 
	$°∫Àn
 (
__c⁄°
 *
__°rög
, 
size_t
 
__maxÀn
)

407 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

411 
__BEGIN_NAMESPACE_STD


413 *
	$°ªº‹
 (
__î∫um
Ë
__THROW
;

414 
__END_NAMESPACE_STD


415 #i‡
deföed
 
__USE_XOPEN2K
 || deföed 
__USE_MISC


423 #i‡
deföed
 
__USE_XOPEN2K
 && !deföed 
__USE_GNU


426 #ifde‡
__REDIRECT_NTH


427 
	`__REDIRECT_NTH
 (
°ªº‹_r
,

428 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
),

429 
__xpg_°ªº‹_r
Ë
	`__n⁄nuŒ
 ((2));

431 
	$__xpg_°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

432 
__THROW
 
	`__n⁄nuŒ
 ((2));

433 
	#°ªº‹_r
 
__xpg_°ªº‹_r


	)

438 *
	$°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

439 
__THROW
 
	`__n⁄nuŒ
 ((2));

443 #ifde‡
__USE_XOPEN2K8


445 *
	$°ªº‹_l
 (
__î∫um
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

451 
	$__bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

453 #ifde‡
__USE_BSD


455 
	$bc›y
 (
__c⁄°
 *
__§c
, *
__de°
, 
size_t
 
__n
)

456 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

459 
	$bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

462 
	$bcmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
size_t
 
__n
)

463 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

466 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


469 *
	`ödex
 (*
__s
, 
__c
)

470 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

471 
__c⁄°
 *
	`ödex
 (__c⁄° *
__s
, 
__c
)

472 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

474 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__CORRECT_ISO_CPP_STRINGS_H_PROTO


475 
__exã∫_Æways_ölöe
 *

476 
	`ödex
 (*
__s
, 
__c
Ë
__THROW


478  
	`__buûtö_ödex
 (
__s
, 
__c
);

481 
__exã∫_Æways_ölöe
 
__c⁄°
 *

482 
	`ödex
 (
__c⁄°
 *
__s
, 
__c
Ë
__THROW


484  
	`__buûtö_ödex
 (
__s
, 
__c
);

487 
	}
}

489 *
	$ödex
 (
__c⁄°
 *
__s
, 
__c
)

490 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

494 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


497 *
	`rödex
 (*
__s
, 
__c
)

498 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

499 
__c⁄°
 *
	`rödex
 (__c⁄° *
__s
, 
__c
)

500 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

502 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__CORRECT_ISO_CPP_STRINGS_H_PROTO


503 
__exã∫_Æways_ölöe
 *

504 
	`rödex
 (*
__s
, 
__c
Ë
__THROW


506  
	`__buûtö_rödex
 (
__s
, 
__c
);

509 
__exã∫_Æways_ölöe
 
__c⁄°
 *

510 
	`rödex
 (
__c⁄°
 *
__s
, 
__c
Ë
__THROW


512  
	`__buûtö_rödex
 (
__s
, 
__c
);

515 
	}
}

517 *
	$rödex
 (
__c⁄°
 *
__s
, 
__c
)

518 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

523 
	$ffs
 (
__i
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

527 #ifdef 
__USE_GNU


528 
	$ff¶
 (
__l
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

529 #ifde‡
__GNUC__


530 
__exãnsi⁄__
 
	$ff¶l
 (
__Œ
)

531 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

536 
	$°rˇ£cmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
)

537 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

540 
	$°∫ˇ£cmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
size_t
 
__n
)

541 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

544 #ifdef 
__USE_GNU


547 
	$°rˇ£cmp_l
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
,

548 
__loˇÀ_t
 
__loc
)

549 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

551 
	$°∫ˇ£cmp_l
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
,

552 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
)

553 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 4));

556 #ifdef 
__USE_BSD


559 *
	$°r£p
 (**
__ª°ri˘
 
__°rögp
,

560 
__c⁄°
 *
__ª°ri˘
 
__dñim
)

561 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

564 #ifdef 
__USE_XOPEN2K8


566 *
	$°rsig«l
 (
__sig
Ë
__THROW
;

569 *
	$__°p˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
)

570 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

571 *
	$°p˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
)

572 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

576 *
	$__°≤˝y
 (*
__ª°ri˘
 
__de°
,

577 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

578 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

579 *
	$°≤˝y
 (*
__ª°ri˘
 
__de°
,

580 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

581 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

584 #ifdef 
__USE_GNU


586 
	$°rvîscmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
)

587 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

590 *
	$°r‰y
 (*
__°rög
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

593 *
	$mem‰ob
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

595 #i‚de‡
ba£«me


600 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


601 "C++" *
	$ba£«me
 (*
__fûíame
)

602 
__THROW
 
	`__asm
 ("ba£«me"Ë
	`__n⁄nuŒ
 ((1));

603 "C++" 
__c⁄°
 *
	$ba£«me
 (
__c⁄°
 *
__fûíame
)

604 
__THROW
 
	`__asm
 ("ba£«me"Ë
	`__n⁄nuŒ
 ((1));

606 *
	$ba£«me
 (
__c⁄°
 *
__fûíame
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

612 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

613 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__OPTIMIZE_SIZE__
 \

614 && !
deföed
 
__NO_INLINE__
 && !deföed 
__˝lu•lus


634 
	~<bôs/°rög.h
>

637 
	~<bôs/°rög2.h
>

640 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


642 
	~<bôs/°rög3.h
>

646 
__END_DECLS


	@/usr/include/syslog.h

1 
	~<sys/sy¶og.h
>

	@/usr/include/time.h

23 #i‚def 
_TIME_H


25 #i‡(! 
deföed
 
__√ed_time_t
 && !deföed 
__√ed_˛ock_t
 && \

26 ! 
deföed
 
	g__√ed_time•ec
)

27 
	#_TIME_H
 1

	)

28 
	~<„©uªs.h
>

30 
	g__BEGIN_DECLS


34 #ifdef 
_TIME_H


36 
	#__√ed_size_t


	)

37 
	#__√ed_NULL


	)

38 
	~<°ddef.h
>

42 
	~<bôs/time.h
>

45 #i‡!
deföed
 
__STRICT_ANSI__
 && !deföed 
__USE_XOPEN2K


46 #i‚de‡
CLK_TCK


47 
	#CLK_TCK
 
CLOCKS_PER_SEC


	)

53 #i‡!
deföed
 
__˛ock_t_deföed
 && (deföed 
_TIME_H
 || deföed 
__√ed_˛ock_t
)

54 
	#__˛ock_t_deföed
 1

	)

56 
	~<bôs/ty≥s.h
>

58 
__BEGIN_NAMESPACE_STD


60 
__˛ock_t
 
	t˛ock_t
;

61 
	g__END_NAMESPACE_STD


62 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_POSIX
 || deföed 
__USE_MISC


63 
	$__USING_NAMESPACE_STD
(
˛ock_t
)

67 #unde‡
__√ed_˛ock_t


69 #i‡!
deföed
 
__time_t_deföed
 && (deföed 
_TIME_H
 || deföed 
__√ed_time_t
)

70 
	#__time_t_deföed
 1

	)

72 
	~<bôs/ty≥s.h
>

74 
__BEGIN_NAMESPACE_STD


76 
__time_t
 
	ttime_t
;

77 
__END_NAMESPACE_STD


78 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC
 || deföed 
__USE_SVID


79 
	$__USING_NAMESPACE_STD
(
time_t
)

83 #unde‡
__√ed_time_t


85 #i‡!
deföed
 
__˛ockid_t_deföed
 && \

86 ((
deföed
 
_TIME_H
 && deföed 
__USE_POSIX199309
Ë|| deföed 
__√ed_˛ockid_t
)

87 
	#__˛ockid_t_deföed
 1

	)

89 
	~<bôs/ty≥s.h
>

92 
__˛ockid_t
 
	t˛ockid_t
;

95 #unde‡
__˛ockid_time_t


97 #i‡!
deföed
 
__timî_t_deföed
 && \

98 ((
deföed
 
_TIME_H
 && deföed 
__USE_POSIX199309
Ë|| deföed 
__√ed_timî_t
)

99 
	#__timî_t_deföed
 1

	)

101 
	~<bôs/ty≥s.h
>

104 
__timî_t
 
	ttimî_t
;

107 #unde‡
__√ed_timî_t


110 #i‡!
deföed
 
__time•ec_deföed
 && \

111 ((
deföed
 
_TIME_H
 && \

112 (
deföed
 
__USE_POSIX199309
 || deföed 
__USE_MISC
)) || \

113 
deföed
 
__√ed_time•ec
)

114 
	#__time•ec_deföed
 1

	)

116 
	~<bôs/ty≥s.h
>

120 
	stime•ec


122 
__time_t
 
tv_£c
;

123 
tv_n£c
;

127 #unde‡
__√ed_time•ec


130 #ifdef 
_TIME_H


131 
__BEGIN_NAMESPACE_STD


133 
	stm


135 
tm_£c
;

136 
tm_mö
;

137 
tm_hour
;

138 
tm_mday
;

139 
tm_m⁄
;

140 
tm_yór
;

141 
tm_wday
;

142 
tm_yday
;

143 
tm_isd°
;

145 #ifdef 
__USE_BSD


146 
tm_gmtoff
;

147 
__c⁄°
 *
tm_z⁄e
;

149 
__tm_gmtoff
;

150 
__c⁄°
 *
__tm_z⁄e
;

153 
__END_NAMESPACE_STD


154 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_POSIX
 || deföed 
__USE_MISC


155 
	$__USING_NAMESPACE_STD
(
tm
)

159 #ifde‡
__USE_POSIX199309


161 
	sôimî•ec


163 
time•ec
 
ô_öãrvÆ
;

164 
time•ec
 
ô_vÆue
;

168 
sigevít
;

172 #ifde‡
__USE_XOPEN2K


173 #i‚de‡
__pid_t_deföed


174 
__pid_t
 
	tpid_t
;

175 
	#__pid_t_deföed


	)

180 
__BEGIN_NAMESPACE_STD


183 
˛ock_t
 
	$˛ock
 (Ë
__THROW
;

186 
time_t
 
	$time
 (
time_t
 *
__timî
Ë
__THROW
;

189 
	$dif·ime
 (
time_t
 
__time1
,Åime_à
__time0
)

190 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

193 
time_t
 
	$mktime
 (
tm
 *
__ç
Ë
__THROW
;

199 
size_t
 
	$°r·ime
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

200 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

201 
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

202 
__END_NAMESPACE_STD


204 #ifde‡
__USE_XOPEN


207 *
	$°Ωtime
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

208 
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
tm
 *
__ç
)

209 
__THROW
;

212 #ifde‡
__USE_XOPEN2K8


215 
	~<xloˇÀ.h
>

217 
size_t
 
	$°r·ime_l
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

218 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

219 
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
,

220 
__loˇÀ_t
 
__loc
Ë
__THROW
;

223 #ifde‡
__USE_GNU


224 *
	$°Ωtime_l
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

225 
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
tm
 *
__ç
,

226 
__loˇÀ_t
 
__loc
Ë
__THROW
;

230 
__BEGIN_NAMESPACE_STD


233 
tm
 *
	$gmtime
 (
__c⁄°
 
time_t
 *
__timî
Ë
__THROW
;

237 
tm
 *
	$loˇ…ime
 (
__c⁄°
 
time_t
 *
__timî
Ë
__THROW
;

238 
__END_NAMESPACE_STD


240 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


243 
tm
 *
	$gmtime_r
 (
__c⁄°
 
time_t
 *
__ª°ri˘
 
__timî
,

244 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

248 
tm
 *
	$loˇ…ime_r
 (
__c⁄°
 
time_t
 *
__ª°ri˘
 
__timî
,

249 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

252 
__BEGIN_NAMESPACE_STD


255 *
	$as˘ime
 (
__c⁄°
 
tm
 *
__ç
Ë
__THROW
;

258 *
	$˘ime
 (
__c⁄°
 
time_t
 *
__timî
Ë
__THROW
;

259 
__END_NAMESPACE_STD


261 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


266 *
	$as˘ime_r
 (
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
,

267 *
__ª°ri˘
 
__buf
Ë
__THROW
;

270 *
	$˘ime_r
 (
__c⁄°
 
time_t
 *
__ª°ri˘
 
__timî
,

271 *
__ª°ri˘
 
__buf
Ë
__THROW
;

276 *
__tz«me
[2];

277 
__daylight
;

278 
__timez⁄e
;

281 #ifdef 
__USE_POSIX


283 *
tz«me
[2];

287 
	$tz£t
 (Ë
__THROW
;

290 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


291 
daylight
;

292 
timez⁄e
;

295 #ifde‡
__USE_SVID


298 
	$°ime
 (
__c⁄°
 
time_t
 *
__whí
Ë
__THROW
;

304 
	#__i¶óp
(
yór
) \

305 ((
yór
Ë% 4 =0 && ((yórË% 100 !0 || (yórË% 400 =0))

	)

308 #ifde‡
__USE_MISC


313 
time_t
 
	$timegm
 (
tm
 *
__ç
Ë
__THROW
;

316 
time_t
 
	$timñoˇl
 (
tm
 *
__ç
Ë
__THROW
;

319 
	$dysize
 (
__yór
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

323 #ifde‡
__USE_POSIX199309


328 
	`«no¶ìp
 (
__c⁄°
 
time•ec
 *
__ªque°ed_time
,

329 
time•ec
 *
__ªmaöög
);

333 
	$˛ock_gëªs
 (
˛ockid_t
 
__˛ock_id
, 
time•ec
 *
__ªs
Ë
__THROW
;

336 
	$˛ock_gëtime
 (
˛ockid_t
 
__˛ock_id
, 
time•ec
 *
__ç
Ë
__THROW
;

339 
	$˛ock_£âime
 (
˛ockid_t
 
__˛ock_id
, 
__c⁄°
 
time•ec
 *
__ç
)

340 
__THROW
;

342 #ifde‡
__USE_XOPEN2K


347 
	`˛ock_«no¶ìp
 (
˛ockid_t
 
__˛ock_id
, 
__Êags
,

348 
__c⁄°
 
time•ec
 *
__ªq
,

349 
time•ec
 *
__ªm
);

352 
	$˛ock_gë˝u˛ockid
 (
pid_t
 
__pid
, 
˛ockid_t
 *
__˛ock_id
Ë
__THROW
;

357 
	$timî_¸óã
 (
˛ockid_t
 
__˛ock_id
,

358 
sigevít
 *
__ª°ri˘
 
__evp
,

359 
timî_t
 *
__ª°ri˘
 
__timîid
Ë
__THROW
;

362 
	$timî_dñëe
 (
timî_t
 
__timîid
Ë
__THROW
;

365 
	$timî_£âime
 (
timî_t
 
__timîid
, 
__Êags
,

366 
__c⁄°
 
ôimî•ec
 *
__ª°ri˘
 
__vÆue
,

367 
ôimî•ec
 *
__ª°ri˘
 
__ovÆue
Ë
__THROW
;

370 
	$timî_gëtime
 (
timî_t
 
__timîid
, 
ôimî•ec
 *
__vÆue
)

371 
__THROW
;

374 
	$timî_gëovîrun
 (
timî_t
 
__timîid
Ë
__THROW
;

378 #ifde‡
__USE_XOPEN_EXTENDED


390 
gëd©e_îr
;

399 
tm
 *
	`gëd©e
 (
__c⁄°
 *
__°rög
);

402 #ifde‡
__USE_GNU


413 
	`gëd©e_r
 (
__c⁄°
 *
__ª°ri˘
 
__°rög
,

414 
tm
 *
__ª°ri˘
 
__ªsbuÂ
);

417 
__END_DECLS


	@/usr/include/unistd.h

23 #i‚def 
_UNISTD_H


24 
	#_UNISTD_H
 1

	)

26 
	~<„©uªs.h
>

28 
	g__BEGIN_DECLS


33 #ifde‡
__USE_XOPEN2K8


35 
	#_POSIX_VERSION
 200809L

	)

36 #ñi‡
deföed
 
__USE_XOPEN2K


38 
	#_POSIX_VERSION
 200112L

	)

39 #ñi‡
deföed
 
__USE_POSIX199506


41 
	#_POSIX_VERSION
 199506L

	)

42 #ñi‡
deföed
 
__USE_POSIX199309


44 
	#_POSIX_VERSION
 199309L

	)

47 
	#_POSIX_VERSION
 199009L

	)

53 #ifde‡
__USE_XOPEN2K8


54 
	#__POSIX2_THIS_VERSION
 200809L

	)

56 #ñi‡
deföed
 
__USE_XOPEN2K


58 
	#__POSIX2_THIS_VERSION
 200112L

	)

59 #ñi‡
deföed
 
__USE_POSIX199506


61 
	#__POSIX2_THIS_VERSION
 199506L

	)

64 
	#__POSIX2_THIS_VERSION
 199209L

	)

68 
	#_POSIX2_VERSION
 
__POSIX2_THIS_VERSION


	)

72 
	#_POSIX2_C_BIND
 
__POSIX2_THIS_VERSION


	)

76 
	#_POSIX2_C_DEV
 
__POSIX2_THIS_VERSION


	)

80 
	#_POSIX2_SW_DEV
 
__POSIX2_THIS_VERSION


	)

84 
	#_POSIX2_LOCALEDEF
 
__POSIX2_THIS_VERSION


	)

87 #ifde‡
__USE_XOPEN2K8


88 
	#_XOPEN_VERSION
 700

	)

89 #ñi‡
deföed
 
__USE_XOPEN2K


90 
	#_XOPEN_VERSION
 600

	)

91 #ñi‡
deföed
 
__USE_UNIX98


92 
	#_XOPEN_VERSION
 500

	)

94 
	#_XOPEN_VERSION
 4

	)

98 
	#_XOPEN_XCU_VERSION
 4

	)

101 
	#_XOPEN_XPG2
 1

	)

102 
	#_XOPEN_XPG3
 1

	)

103 
	#_XOPEN_XPG4
 1

	)

106 
	#_XOPEN_UNIX
 1

	)

109 
	#_XOPEN_CRYPT
 1

	)

113 
	#_XOPEN_ENH_I18N
 1

	)

116 
	#_XOPEN_LEGACY
 1

	)

203 
	~<bôs/posix_›t.h
>

206 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


207 
	~<bôs/ívú⁄míts.h
>

211 
	#STDIN_FILENO
 0

	)

212 
	#STDOUT_FILENO
 1

	)

213 
	#STDERR_FILENO
 2

	)

218 
	~<bôs/ty≥s.h
>

220 #i‚def 
__ssize_t_deföed


221 
__ssize_t
 
	tssize_t
;

222 
	#__ssize_t_deföed


	)

225 
	#__√ed_size_t


	)

226 
	#__√ed_NULL


	)

227 
	~<°ddef.h
>

229 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


232 #i‚de‡
__gid_t_deföed


233 
__gid_t
 
	tgid_t
;

234 
	#__gid_t_deföed


	)

237 #i‚de‡
__uid_t_deföed


238 
__uid_t
 
	tuid_t
;

239 
	#__uid_t_deföed


	)

242 #i‚de‡
__off_t_deföed


243 #i‚de‡
__USE_FILE_OFFSET64


244 
__off_t
 
	toff_t
;

246 
__off64_t
 
	toff_t
;

248 
	#__off_t_deföed


	)

250 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


251 
__off64_t
 
	toff64_t
;

252 
	#__off64_t_deföed


	)

255 #i‚de‡
__u£c⁄ds_t_deföed


256 
__u£c⁄ds_t
 
	tu£c⁄ds_t
;

257 
	#__u£c⁄ds_t_deföed


	)

260 #i‚de‡
__pid_t_deföed


261 
__pid_t
 
	tpid_t
;

262 
	#__pid_t_deföed


	)

266 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


267 #i‚de‡
__öçå_t_deföed


268 
__öçå_t
 
	töçå_t
;

269 
	#__öçå_t_deföed


	)

273 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN


274 #i‚de‡
__sockÀn_t_deföed


275 
__sockÀn_t
 
	tsockÀn_t
;

276 
	#__sockÀn_t_deföed


	)

282 
	#R_OK
 4

	)

283 
	#W_OK
 2

	)

284 
	#X_OK
 1

	)

285 
	#F_OK
 0

	)

288 
	$ac˚ss
 (
__c⁄°
 *
__«me
, 
__ty≥
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

290 #ifde‡
__USE_GNU


293 
	$euidac˚ss
 (
__c⁄°
 *
__«me
, 
__ty≥
)

294 
__THROW
 
	`__n⁄nuŒ
 ((1));

297 
	$óc˚ss
 (
__c⁄°
 *
__«me
, 
__ty≥
)

298 
__THROW
 
	`__n⁄nuŒ
 ((1));

301 #ifde‡
__USE_ATFILE


305 
	$Ác˚sßt
 (
__fd
, 
__c⁄°
 *
__fûe
, 
__ty≥
, 
__Êag
)

306 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

311 #i‚def 
_STDIO_H


312 
	#SEEK_SET
 0

	)

313 
	#SEEK_CUR
 1

	)

314 
	#SEEK_END
 2

	)

317 #i‡
deföed
 
__USE_BSD
 && !deföed 
L_SET


319 
	#L_SET
 
SEEK_SET


	)

320 
	#L_INCR
 
SEEK_CUR


	)

321 
	#L_XTND
 
SEEK_END


	)

330 #i‚de‡
__USE_FILE_OFFSET64


331 
__off_t
 
	$l£ek
 (
__fd
, 
__off_t
 
__off£t
, 
__whí˚
Ë
__THROW
;

333 #ifde‡
__REDIRECT_NTH


334 
__off64_t
 
	`__REDIRECT_NTH
 (
l£ek
,

335 (
__fd
, 
__off64_t
 
__off£t
, 
__whí˚
),

336 
l£ek64
);

338 
	#l£ek
 
l£ek64


	)

341 #ifde‡
__USE_LARGEFILE64


342 
__off64_t
 
	$l£ek64
 (
__fd
, 
__off64_t
 
__off£t
, 
__whí˚
)

343 
__THROW
;

350 
	`˛o£
 (
__fd
);

357 
ssize_t
 
	$ªad
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
Ë
__wur
;

363 
ssize_t
 
	$wrôe
 (
__fd
, 
__c⁄°
 *
__buf
, 
size_t
 
__n
Ë
__wur
;

365 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


366 #i‚de‡
__USE_FILE_OFFSET64


373 
ssize_t
 
	$¥ód
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

374 
__off_t
 
__off£t
Ë
__wur
;

381 
ssize_t
 
	$pwrôe
 (
__fd
, 
__c⁄°
 *
__buf
, 
size_t
 
__n
,

382 
__off_t
 
__off£t
Ë
__wur
;

384 #ifde‡
__REDIRECT


385 
ssize_t
 
	`__REDIRECT
 (
¥ód
, (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

386 
__off64_t
 
__off£t
),

387 
¥ód64
Ë
__wur
;

388 
ssize_t
 
	`__REDIRECT
 (
pwrôe
, (
__fd
, 
__c⁄°
 *
__buf
,

389 
size_t
 
__nbyãs
, 
__off64_t
 
__off£t
),

390 
pwrôe64
Ë
__wur
;

392 
	#¥ód
 
¥ód64


	)

393 
	#pwrôe
 
pwrôe64


	)

397 #ifde‡
__USE_LARGEFILE64


401 
ssize_t
 
	$¥ód64
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

402 
__off64_t
 
__off£t
Ë
__wur
;

405 
ssize_t
 
	$pwrôe64
 (
__fd
, 
__c⁄°
 *
__buf
, 
size_t
 
__n
,

406 
__off64_t
 
__off£t
Ë
__wur
;

414 
	$pùe
 (
__pùedes
[2]Ë
__THROW
 
__wur
;

416 #ifde‡
__USE_GNU


419 
	$pùe2
 (
__pùedes
[2], 
__Êags
Ë
__THROW
 
__wur
;

429 
	$Æ¨m
 (
__£c⁄ds
Ë
__THROW
;

441 
	`¶ìp
 (
__£c⁄ds
);

443 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

444 || 
deföed
 
__USE_BSD


449 
__u£c⁄ds_t
 
	$uÆ¨m
 (
__u£c⁄ds_t
 
__vÆue
, __u£c⁄ds_à
__öãrvÆ
)

450 
__THROW
;

457 
	`u¶ìp
 (
__u£c⁄ds_t
 
__u£c⁄ds
);

466 
	`∑u£
 ();

470 
	$chown
 (
__c⁄°
 *
__fûe
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
)

471 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

473 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


475 
	$fchown
 (
__fd
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
Ë
__THROW
 
__wur
;

480 
	$lchown
 (
__c⁄°
 *
__fûe
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
)

481 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

485 #ifde‡
__USE_ATFILE


488 
	$fchow«t
 (
__fd
, 
__c⁄°
 *
__fûe
, 
__uid_t
 
__ow√r
,

489 
__gid_t
 
__group
, 
__Êag
)

490 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

494 
	$chdú
 (
__c⁄°
 *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

496 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


498 
	$fchdú
 (
__fd
Ë
__THROW
 
__wur
;

508 *
	$gëcwd
 (*
__buf
, 
size_t
 
__size
Ë
__THROW
 
__wur
;

510 #ifdef 
__USE_GNU


514 *
	$gë_cuºít_dú_«me
 (Ë
__THROW
;

517 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

518 || 
deföed
 
__USE_BSD


522 *
	$gëwd
 (*
__buf
)

523 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__©åibuã_dïªˇãd__
 
__wur
;

528 
	$dup
 (
__fd
Ë
__THROW
 
__wur
;

531 
	$dup2
 (
__fd
, 
__fd2
Ë
__THROW
;

533 #ifde‡
__USE_GNU


536 
	$dup3
 (
__fd
, 
__fd2
, 
__Êags
Ë
__THROW
;

540 **
__ívú⁄
;

541 #ifde‡
__USE_GNU


542 **
ívú⁄
;

548 
	$execve
 (
__c⁄°
 *
__∑th
, *__c⁄° 
__¨gv
[],

549 *
__c⁄°
 
__ívp
[]Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

551 #ifde‡
__USE_XOPEN2K8


554 
	$„xecve
 (
__fd
, *
__c⁄°
 
__¨gv
[], *__c⁄° 
__ívp
[])

555 
__THROW
 
	`__n⁄nuŒ
 ((2));

560 
	$execv
 (
__c⁄°
 *
__∑th
, *__c⁄° 
__¨gv
[])

561 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

565 
	$exe˛e
 (
__c⁄°
 *
__∑th
, __c⁄° *
__¨g
, ...)

566 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

570 
	$exe˛
 (
__c⁄°
 *
__∑th
, __c⁄° *
__¨g
, ...)

571 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

575 
	$execvp
 (
__c⁄°
 *
__fûe
, *__c⁄° 
__¨gv
[])

576 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

581 
	$exe˛p
 (
__c⁄°
 *
__fûe
, __c⁄° *
__¨g
, ...)

582 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

584 #ifde‡
__USE_GNU


587 
	$execv≥
 (
__c⁄°
 *
__fûe
, *__c⁄° 
__¨gv
[],

588 *
__c⁄°
 
__ívp
[])

589 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

593 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


595 
	$ni˚
 (
__öc
Ë
__THROW
 
__wur
;

600 
	$_exô
 (
__°©us
Ë
	`__©åibuã__
 ((
__n‹ëu∫__
));

606 
	~<bôs/c⁄‚ame.h
>

609 
	$∑thc⁄f
 (
__c⁄°
 *
__∑th
, 
__«me
)

610 
__THROW
 
	`__n⁄nuŒ
 ((1));

613 
	$Â©hc⁄f
 (
__fd
, 
__«me
Ë
__THROW
;

616 
	$sysc⁄f
 (
__«me
Ë
__THROW
;

618 #ifdef 
__USE_POSIX2


620 
size_t
 
	$c⁄f°r
 (
__«me
, *
__buf
, 
size_t
 
__Àn
Ë
__THROW
;

625 
__pid_t
 
	$gëpid
 (Ë
__THROW
;

628 
__pid_t
 
	$gëµid
 (Ë
__THROW
;

632 #i‚de‡
__FAVOR_BSD


633 
__pid_t
 
	$gëpgΩ
 (Ë
__THROW
;

635 #ifde‡
__REDIRECT_NTH


636 
__pid_t
 
	`__REDIRECT_NTH
 (
gëpgΩ
, (__pid_à
__pid
), 
__gëpgid
);

638 
	#gëpgΩ
 
__gëpgid


	)

643 
__pid_t
 
	$__gëpgid
 (
__pid_t
 
__pid
Ë
__THROW
;

644 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


645 
__pid_t
 
	$gëpgid
 (
__pid_t
 
__pid
Ë
__THROW
;

652 
	$£çgid
 (
__pid_t
 
__pid
, __pid_à
__pgid
Ë
__THROW
;

654 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


665 #i‚de‡
__FAVOR_BSD


669 
	$£çgΩ
 (Ë
__THROW
;

674 #ifde‡
__REDIRECT_NTH


675 
	`__REDIRECT_NTH
 (
£çgΩ
, (
__pid_t
 
__pid
, __pid_à
__pgΩ
), 
£çgid
);

677 
	#£çgΩ
 
£çgid


	)

686 
__pid_t
 
	$£tsid
 (Ë
__THROW
;

688 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


690 
__pid_t
 
	$gësid
 (
__pid_t
 
__pid
Ë
__THROW
;

694 
__uid_t
 
	$gëuid
 (Ë
__THROW
;

697 
__uid_t
 
	$gëeuid
 (Ë
__THROW
;

700 
__gid_t
 
	$gëgid
 (Ë
__THROW
;

703 
__gid_t
 
	$gëegid
 (Ë
__THROW
;

708 
	$gëgroups
 (
__size
, 
__gid_t
 
__li°
[]Ë
__THROW
 
__wur
;

710 #ifdef 
__USE_GNU


712 
	$group_membî
 (
__gid_t
 
__gid
Ë
__THROW
;

719 
	$£tuid
 (
__uid_t
 
__uid
Ë
__THROW
;

721 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


724 
	$£åeuid
 (
__uid_t
 
__ruid
, __uid_à
__euid
Ë
__THROW
;

727 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN2K


729 
	$£ãuid
 (
__uid_t
 
__uid
Ë
__THROW
;

736 
	$£tgid
 (
__gid_t
 
__gid
Ë
__THROW
;

738 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


741 
	$£åegid
 (
__gid_t
 
__rgid
, __gid_à
__egid
Ë
__THROW
;

744 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN2K


746 
	$£ãgid
 (
__gid_t
 
__gid
Ë
__THROW
;

749 #ifde‡
__USE_GNU


752 
	$gëªsuid
 (
__uid_t
 *
__ruid
, __uid_à*
__euid
, __uid_à*
__suid
)

753 
__THROW
;

757 
	$gëªsgid
 (
__gid_t
 *
__rgid
, __gid_à*
__egid
, __gid_à*
__sgid
)

758 
__THROW
;

762 
	$£åesuid
 (
__uid_t
 
__ruid
, __uid_à
__euid
, __uid_à
__suid
)

763 
__THROW
;

767 
	$£åesgid
 (
__gid_t
 
__rgid
, __gid_à
__egid
, __gid_à
__sgid
)

768 
__THROW
;

775 
__pid_t
 
	$f‹k
 (Ë
__THROW
;

777 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

778 || 
deföed
 
__USE_BSD


783 
__pid_t
 
	$vf‹k
 (Ë
__THROW
;

789 *
	$ây«me
 (
__fd
Ë
__THROW
;

793 
	$ây«me_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
)

794 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

798 
	$ißây
 (
__fd
Ë
__THROW
;

800 #i‡
deföed
 
__USE_BSD
 \

801 || (
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_UNIX98
)

804 
	$ây¶Ÿ
 (Ë
__THROW
;

809 
	$lök
 (
__c⁄°
 *
__‰om
, __c⁄° *
__to
)

810 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

812 #ifde‡
__USE_ATFILE


815 
	$lök©
 (
__‰omfd
, 
__c⁄°
 *
__‰om
, 
__tofd
,

816 
__c⁄°
 *
__to
, 
__Êags
)

817 
__THROW
 
	`__n⁄nuŒ
 ((2, 4)Ë
__wur
;

820 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


822 
	$symlök
 (
__c⁄°
 *
__‰om
, __c⁄° *
__to
)

823 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

828 
ssize_t
 
	$ªadlök
 (
__c⁄°
 *
__ª°ri˘
 
__∑th
,

829 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

830 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

833 #ifde‡
__USE_ATFILE


835 
	$symlök©
 (
__c⁄°
 *
__‰om
, 
__tofd
,

836 
__c⁄°
 *
__to
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 3)Ë
__wur
;

839 
ssize_t
 
	$ªadlök©
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__∑th
,

840 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

841 
__THROW
 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
;

845 
	$u∆ök
 (
__c⁄°
 *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

847 #ifde‡
__USE_ATFILE


849 
	$u∆ök©
 (
__fd
, 
__c⁄°
 *
__«me
, 
__Êag
)

850 
__THROW
 
	`__n⁄nuŒ
 ((2));

854 
	$rmdú
 (
__c⁄°
 *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

858 
__pid_t
 
	$tcgëpgΩ
 (
__fd
Ë
__THROW
;

861 
	$tc£çgΩ
 (
__fd
, 
__pid_t
 
__pgΩ_id
Ë
__THROW
;

868 *
	`gëlogö
 ();

869 #i‡
deföed
 
__USE_REENTRANT
 || deföed 
__USE_POSIX199506


876 
	$gëlogö_r
 (*
__«me
, 
size_t
 
__«me_Àn
Ë
	`__n⁄nuŒ
 ((1));

879 #ifdef 
__USE_BSD


881 
	$£éogö
 (
__c⁄°
 *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

885 #ifdef 
__USE_POSIX2


889 
	#__√ed_gë›t


	)

890 
	~<gë›t.h
>

894 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


898 
	$gëho°«me
 (*
__«me
, 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

902 #i‡
deföed
 
__USE_BSD
 || (deföed 
__USE_XOPEN
 && !deföed 
__USE_UNIX98
)

905 
	$£tho°«me
 (
__c⁄°
 *
__«me
, 
size_t
 
__Àn
)

906 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

910 
	$£tho°id
 (
__id
Ë
__THROW
 
__wur
;

916 
	$gëdomaö«me
 (*
__«me
, 
size_t
 
__Àn
)

917 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

918 
	$£tdomaö«me
 (
__c⁄°
 *
__«me
, 
size_t
 
__Àn
)

919 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

925 
	$vh™gup
 (Ë
__THROW
;

928 
	$ªvoke
 (
__c⁄°
 *
__fûe
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

936 
	$¥ofû
 (*
__ßm∂e_buf„r
, 
size_t
 
__size
,

937 
size_t
 
__off£t
, 
__sˇÀ
)

938 
__THROW
 
	`__n⁄nuŒ
 ((1));

944 
	$ac˘
 (
__c⁄°
 *
__«me
Ë
__THROW
;

948 *
	$gëu£rshñl
 (Ë
__THROW
;

949 
	$ídu£rshñl
 (Ë
__THROW
;

950 
	$£tu£rshñl
 (Ë
__THROW
;

956 
	$d´m⁄
 (
__nochdú
, 
__no˛o£
Ë
__THROW
 
__wur
;

960 #i‡
deföed
 
__USE_BSD
 || (deföed 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)

963 
	$chroŸ
 (
__c⁄°
 *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

967 *
	$gë∑ss
 (
__c⁄°
 *
__¥om±
Ë
	`__n⁄nuŒ
 ((1));

971 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


976 
	`fsync
 (
__fd
);

980 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


983 
	`gëho°id
 ();

986 
	$sync
 (Ë
__THROW
;

989 #i‡
deföed
 
__USE_BSD
 || !deföed 
__USE_XOPEN2K


992 
	$gë∑gesize
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

997 
	$gëdèbÀsize
 (Ë
__THROW
;

1003 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


1006 #i‚de‡
__USE_FILE_OFFSET64


1007 
	$åunˇã
 (
__c⁄°
 *
__fûe
, 
__off_t
 
__Àngth
)

1008 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

1010 #ifde‡
__REDIRECT_NTH


1011 
	`__REDIRECT_NTH
 (
åunˇã
,

1012 (
__c⁄°
 *
__fûe
, 
__off64_t
 
__Àngth
),

1013 
åunˇã64
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

1015 
	#åunˇã
 
åunˇã64


	)

1018 #ifde‡
__USE_LARGEFILE64


1019 
	$åunˇã64
 (
__c⁄°
 *
__fûe
, 
__off64_t
 
__Àngth
)

1020 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

1025 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


1028 #i‚de‡
__USE_FILE_OFFSET64


1029 
	$·runˇã
 (
__fd
, 
__off_t
 
__Àngth
Ë
__THROW
 
__wur
;

1031 #ifde‡
__REDIRECT_NTH


1032 
	`__REDIRECT_NTH
 (
·runˇã
, (
__fd
, 
__off64_t
 
__Àngth
),

1033 
·runˇã64
Ë
__wur
;

1035 
	#·runˇã
 
·runˇã64


	)

1038 #ifde‡
__USE_LARGEFILE64


1039 
	$·runˇã64
 (
__fd
, 
__off64_t
 
__Àngth
Ë
__THROW
 
__wur
;

1045 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
) \

1046 || 
deföed
 
__USE_MISC


1050 
	$brk
 (*
__addr
Ë
__THROW
 
__wur
;

1056 *
	$sbrk
 (
öçå_t
 
__dñè
Ë
__THROW
;

1060 #ifde‡
__USE_MISC


1071 
	$sysˇŒ
 (
__sy¢o
, ...Ë
__THROW
;

1076 #i‡(
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
Ë&& !deföed 
F_LOCK


1088 
	#F_ULOCK
 0

	)

1089 
	#F_LOCK
 1

	)

1090 
	#F_TLOCK
 2

	)

1091 
	#F_TEST
 3

	)

1093 #i‚de‡
__USE_FILE_OFFSET64


1094 
	$lockf
 (
__fd
, 
__cmd
, 
__off_t
 
__Àn
Ë
__wur
;

1096 #ifde‡
__REDIRECT


1097 
	`__REDIRECT
 (
lockf
, (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
),

1098 
lockf64
Ë
__wur
;

1100 
	#lockf
 
lockf64


	)

1103 #ifde‡
__USE_LARGEFILE64


1104 
	$lockf64
 (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
Ë
__wur
;

1109 #ifde‡
__USE_GNU


1114 
	#TEMP_FAILURE_RETRY
(
ex¥essi⁄
) \

1115 (
__exãnsi⁄__
 \

1116 ({ 
__ªsu…
; \

1117 dÿ
__ªsu…
 = (Ë(
ex¥essi⁄
); \

1118 
__ªsu…
 =-1L && 
î∫o
 =
EINTR
); \

1119 
__ªsu…
; 
	}
}))

	)

1122 #i‡
deföed
 
__USE_POSIX199309
 || deföed 
__USE_UNIX98


1125 
fd©async
 (
__fûdes
);

1131 #ifdef 
__USE_XOPEN


1133 *
	$¸y±
 (
__c⁄°
 *
__key
, __c⁄° *
__ß…
)

1134 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1138 
	$í¸y±
 (*
__libc_block
, 
__edÊag
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

1145 
	$swab
 (
__c⁄°
 *
__ª°ri˘
 
__‰om
, *__ª°ri˘ 
__to
,

1146 
ssize_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1152 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


1154 *
	$˘îmid
 (*
__s
Ë
__THROW
;

1159 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


1160 
	~<bôs/uni°d.h
>

1163 
__END_DECLS


	@/usr/include/arpa/nameser_compat.h

34 #i‚de‡
_ARPA_NAMESER_COMPAT_


35 
	#_ARPA_NAMESER_COMPAT_


	)

37 
	#__BIND
 19950621

	)

39 
	~<ídün.h
>

49 
	mid
 :16;

50 #i‡
BYTE_ORDER
 =
BIG_ENDIAN


52 
	mqr
: 1;

53 
	m›code
: 4;

54 
	mØ
: 1;

55 
	mtc
: 1;

56 
	mrd
: 1;

58 
	mø
: 1;

59 
	munu£d
 :1;

60 
	mad
: 1;

61 
	mcd
: 1;

62 
	mrcode
 :4;

64 #i‡
BYTE_ORDER
 =
LITTLE_ENDIAN
 || BYTE_ORDER =
PDP_ENDIAN


66 
	mrd
 :1;

67 
	mtc
 :1;

68 
	mØ
 :1;

69 
	m›code
 :4;

70 
	mqr
 :1;

72 
	mrcode
 :4;

73 
	mcd
: 1;

74 
	mad
: 1;

75 
	munu£d
 :1;

76 
	mø
 :1;

79 
	mqdcou¡
 :16;

80 
	m™cou¡
 :16;

81 
	mnscou¡
 :16;

82 
	m¨cou¡
 :16;

83 } 
	tHEADER
;

85 
	#PACKETSZ
 
NS_PACKETSZ


	)

86 
	#MAXDNAME
 
NS_MAXDNAME


	)

87 
	#MAXCDNAME
 
NS_MAXCDNAME


	)

88 
	#MAXLABEL
 
NS_MAXLABEL


	)

89 
	#HFIXEDSZ
 
NS_HFIXEDSZ


	)

90 
	#QFIXEDSZ
 
NS_QFIXEDSZ


	)

91 
	#RRFIXEDSZ
 
NS_RRFIXEDSZ


	)

92 
	#INT32SZ
 
NS_INT32SZ


	)

93 
	#INT16SZ
 
NS_INT16SZ


	)

94 
	#INT8SZ
 
NS_INT8SZ


	)

95 
	#INADDRSZ
 
NS_INADDRSZ


	)

96 
	#IN6ADDRSZ
 
NS_IN6ADDRSZ


	)

97 
	#INDIR_MASK
 
NS_CMPRSFLGS


	)

98 
	#NAMESERVER_PORT
 
NS_DEFAULTPORT


	)

100 
	#S_ZONE
 
ns_s_zn


	)

101 
	#S_PREREQ
 
ns_s_¥


	)

102 
	#S_UPDATE
 
ns_s_ud


	)

103 
	#S_ADDT
 
ns_s_¨


	)

105 
	#QUERY
 
ns_o_quîy


	)

106 
	#IQUERY
 
ns_o_iquîy


	)

107 
	#STATUS
 
ns_o_°©us


	)

108 
	#NS_NOTIFY_OP
 
ns_o_nŸify


	)

109 
	#NS_UPDATE_OP
 
ns_o_upd©e


	)

111 
	#NOERROR
 
ns_r_n€º‹


	)

112 
	#FORMERR
 
ns_r_f‹mîr


	)

113 
	#SERVFAIL
 
ns_r_£rvÁû


	)

114 
	#NXDOMAIN
 
ns_r_nxdomaö


	)

115 
	#NOTIMP
 
ns_r_nŸim∂


	)

116 
	#REFUSED
 
ns_r_ªfu£d


	)

117 
	#YXDOMAIN
 
ns_r_yxdomaö


	)

118 
	#YXRRSET
 
ns_r_yxº£t


	)

119 
	#NXRRSET
 
ns_r_nxº£t


	)

120 
	#NOTAUTH
 
ns_r_nŸauth


	)

121 
	#NOTZONE
 
ns_r_nŸz⁄e


	)

127 
	#DELETE
 
ns_u›_dñëe


	)

128 
	#ADD
 
ns_u›_add


	)

130 
	#T_A
 
ns_t_a


	)

131 
	#T_NS
 
ns_t_ns


	)

132 
	#T_MD
 
ns_t_md


	)

133 
	#T_MF
 
ns_t_mf


	)

134 
	#T_CNAME
 
ns_t_˙ame


	)

135 
	#T_SOA
 
ns_t_sﬂ


	)

136 
	#T_MB
 
ns_t_mb


	)

137 
	#T_MG
 
ns_t_mg


	)

138 
	#T_MR
 
ns_t_mr


	)

139 
	#T_NULL
 
ns_t_nuŒ


	)

140 
	#T_WKS
 
ns_t_wks


	)

141 
	#T_PTR
 
ns_t_±r


	)

142 
	#T_HINFO
 
ns_t_höfo


	)

143 
	#T_MINFO
 
ns_t_möfo


	)

144 
	#T_MX
 
ns_t_mx


	)

145 
	#T_TXT
 
ns_t_txt


	)

146 
	#T_RP
 
ns_t_Ω


	)

147 
	#T_AFSDB
 
ns_t_afsdb


	)

148 
	#T_X25
 
ns_t_x25


	)

149 
	#T_ISDN
 
ns_t_isdn


	)

150 
	#T_RT
 
ns_t_π


	)

151 
	#T_NSAP
 
ns_t_nßp


	)

152 
	#T_NSAP_PTR
 
ns_t_nßp_±r


	)

153 
	#T_SIG
 
ns_t_sig


	)

154 
	#T_KEY
 
ns_t_key


	)

155 
	#T_PX
 
ns_t_px


	)

156 
	#T_GPOS
 
ns_t_gpos


	)

157 
	#T_AAAA
 
ns_t_ØØ


	)

158 
	#T_LOC
 
ns_t_loc


	)

159 
	#T_NXT
 
ns_t_nxt


	)

160 
	#T_EID
 
ns_t_eid


	)

161 
	#T_NIMLOC
 
ns_t_nimloc


	)

162 
	#T_SRV
 
ns_t_§v


	)

163 
	#T_ATMA
 
ns_t_©ma


	)

164 
	#T_NAPTR
 
ns_t_«±r


	)

165 
	#T_A6
 
ns_t_a6


	)

166 
	#T_DNAME
 
ns_t_d«me


	)

167 
	#T_TSIG
 
ns_t_tsig


	)

168 
	#T_IXFR
 
ns_t_ix‰


	)

169 
	#T_AXFR
 
ns_t_ax‰


	)

170 
	#T_MAILB
 
ns_t_maûb


	)

171 
	#T_MAILA
 
ns_t_maûa


	)

172 
	#T_ANY
 
ns_t_™y


	)

174 
	#C_IN
 
ns_c_ö


	)

175 
	#C_CHAOS
 
ns_c_chaos


	)

176 
	#C_HS
 
ns_c_hs


	)

178 
	#C_NONE
 
ns_c_n⁄e


	)

179 
	#C_ANY
 
ns_c_™y


	)

181 
	#GETSHORT
 
NS_GET16


	)

182 
	#GETLONG
 
NS_GET32


	)

183 
	#PUTSHORT
 
NS_PUT16


	)

184 
	#PUTLONG
 
NS_PUT32


	)

	@/usr/include/elf.h

21 #i‚de‡
_ELF_H


22 
	#_ELF_H
 1

	)

24 
	~<„©uªs.h
>

26 
	g__BEGIN_DECLS


30 
	~<°döt.h
>

33 
uöt16_t
 
	tElf32_HÆf
;

34 
uöt16_t
 
	tElf64_HÆf
;

37 
uöt32_t
 
	tElf32_W‹d
;

38 
öt32_t
 
	tElf32_Sw‹d
;

39 
uöt32_t
 
	tElf64_W‹d
;

40 
öt32_t
 
	tElf64_Sw‹d
;

43 
uöt64_t
 
	tElf32_Xw‹d
;

44 
öt64_t
 
	tElf32_Sxw‹d
;

45 
uöt64_t
 
	tElf64_Xw‹d
;

46 
öt64_t
 
	tElf64_Sxw‹d
;

49 
uöt32_t
 
	tElf32_Addr
;

50 
uöt64_t
 
	tElf64_Addr
;

53 
uöt32_t
 
	tElf32_Off
;

54 
uöt64_t
 
	tElf64_Off
;

57 
uöt16_t
 
	tElf32_Se˘i⁄
;

58 
uöt16_t
 
	tElf64_Se˘i⁄
;

61 
Elf32_HÆf
 
	tElf32_Vîsym
;

62 
Elf64_HÆf
 
	tElf64_Vîsym
;

67 
	#EI_NIDENT
 (16)

	)

71 
	me_idít
[
EI_NIDENT
];

72 
Elf32_HÆf
 
	me_ty≥
;

73 
Elf32_HÆf
 
	me_machöe
;

74 
Elf32_W‹d
 
	me_vîsi⁄
;

75 
Elf32_Addr
 
	me_íåy
;

76 
Elf32_Off
 
	me_phoff
;

77 
Elf32_Off
 
	me_shoff
;

78 
Elf32_W‹d
 
	me_Êags
;

79 
Elf32_HÆf
 
	me_ehsize
;

80 
Elf32_HÆf
 
	me_phítsize
;

81 
Elf32_HÆf
 
	me_phnum
;

82 
Elf32_HÆf
 
	me_shítsize
;

83 
Elf32_HÆf
 
	me_shnum
;

84 
Elf32_HÆf
 
	me_sh°∫dx
;

85 } 
	tElf32_Ehdr
;

89 
	me_idít
[
EI_NIDENT
];

90 
Elf64_HÆf
 
	me_ty≥
;

91 
Elf64_HÆf
 
	me_machöe
;

92 
Elf64_W‹d
 
	me_vîsi⁄
;

93 
Elf64_Addr
 
	me_íåy
;

94 
Elf64_Off
 
	me_phoff
;

95 
Elf64_Off
 
	me_shoff
;

96 
Elf64_W‹d
 
	me_Êags
;

97 
Elf64_HÆf
 
	me_ehsize
;

98 
Elf64_HÆf
 
	me_phítsize
;

99 
Elf64_HÆf
 
	me_phnum
;

100 
Elf64_HÆf
 
	me_shítsize
;

101 
Elf64_HÆf
 
	me_shnum
;

102 
Elf64_HÆf
 
	me_sh°∫dx
;

103 } 
	tElf64_Ehdr
;

109 
	#EI_MAG0
 0

	)

110 
	#ELFMAG0
 0x7‡

	)

112 
	#EI_MAG1
 1

	)

113 
	#ELFMAG1
 'E'

	)

115 
	#EI_MAG2
 2

	)

116 
	#ELFMAG2
 'L'

	)

118 
	#EI_MAG3
 3

	)

119 
	#ELFMAG3
 'F'

	)

122 
	#ELFMAG
 "\177ELF"

	)

123 
	#SELFMAG
 4

	)

125 
	#EI_CLASS
 4

	)

126 
	#ELFCLASSNONE
 0

	)

127 
	#ELFCLASS32
 1

	)

128 
	#ELFCLASS64
 2

	)

129 
	#ELFCLASSNUM
 3

	)

131 
	#EI_DATA
 5

	)

132 
	#ELFDATANONE
 0

	)

133 
	#ELFDATA2LSB
 1

	)

134 
	#ELFDATA2MSB
 2

	)

135 
	#ELFDATANUM
 3

	)

137 
	#EI_VERSION
 6

	)

140 
	#EI_OSABI
 7

	)

141 
	#ELFOSABI_NONE
 0

	)

142 
	#ELFOSABI_SYSV
 0

	)

143 
	#ELFOSABI_HPUX
 1

	)

144 
	#ELFOSABI_NETBSD
 2

	)

145 
	#ELFOSABI_GNU
 3

	)

146 
	#ELFOSABI_LINUX
 3

	)

147 
	#ELFOSABI_SOLARIS
 6

	)

148 
	#ELFOSABI_AIX
 7

	)

149 
	#ELFOSABI_IRIX
 8

	)

150 
	#ELFOSABI_FREEBSD
 9

	)

151 
	#ELFOSABI_TRU64
 10

	)

152 
	#ELFOSABI_MODESTO
 11

	)

153 
	#ELFOSABI_OPENBSD
 12

	)

154 
	#ELFOSABI_ARM_AEABI
 64

	)

155 
	#ELFOSABI_ARM
 97

	)

156 
	#ELFOSABI_STANDALONE
 255

	)

158 
	#EI_ABIVERSION
 8

	)

160 
	#EI_PAD
 9

	)

164 
	#ET_NONE
 0

	)

165 
	#ET_REL
 1

	)

166 
	#ET_EXEC
 2

	)

167 
	#ET_DYN
 3

	)

168 
	#ET_CORE
 4

	)

169 
	#ET_NUM
 5

	)

170 
	#ET_LOOS
 0x„00

	)

171 
	#ET_HIOS
 0x„f‡

	)

172 
	#ET_LOPROC
 0xff00

	)

173 
	#ET_HIPROC
 0xfff‡

	)

177 
	#EM_NONE
 0

	)

178 
	#EM_M32
 1

	)

179 
	#EM_SPARC
 2

	)

180 
	#EM_386
 3

	)

181 
	#EM_68K
 4

	)

182 
	#EM_88K
 5

	)

183 
	#EM_860
 7

	)

184 
	#EM_MIPS
 8

	)

185 
	#EM_S370
 9

	)

186 
	#EM_MIPS_RS3_LE
 10

	)

188 
	#EM_PARISC
 15

	)

189 
	#EM_VPP500
 17

	)

190 
	#EM_SPARC32PLUS
 18

	)

191 
	#EM_960
 19

	)

192 
	#EM_PPC
 20

	)

193 
	#EM_PPC64
 21

	)

194 
	#EM_S390
 22

	)

196 
	#EM_V800
 36

	)

197 
	#EM_FR20
 37

	)

198 
	#EM_RH32
 38

	)

199 
	#EM_RCE
 39

	)

200 
	#EM_ARM
 40

	)

201 
	#EM_FAKE_ALPHA
 41

	)

202 
	#EM_SH
 42

	)

203 
	#EM_SPARCV9
 43

	)

204 
	#EM_TRICORE
 44

	)

205 
	#EM_ARC
 45

	)

206 
	#EM_H8_300
 46

	)

207 
	#EM_H8_300H
 47

	)

208 
	#EM_H8S
 48

	)

209 
	#EM_H8_500
 49

	)

210 
	#EM_IA_64
 50

	)

211 
	#EM_MIPS_X
 51

	)

212 
	#EM_COLDFIRE
 52

	)

213 
	#EM_68HC12
 53

	)

214 
	#EM_MMA
 54

	)

215 
	#EM_PCP
 55

	)

216 
	#EM_NCPU
 56

	)

217 
	#EM_NDR1
 57

	)

218 
	#EM_STARCORE
 58

	)

219 
	#EM_ME16
 59

	)

220 
	#EM_ST100
 60

	)

221 
	#EM_TINYJ
 61

	)

222 
	#EM_X86_64
 62

	)

223 
	#EM_PDSP
 63

	)

225 
	#EM_FX66
 66

	)

226 
	#EM_ST9PLUS
 67

	)

227 
	#EM_ST7
 68

	)

228 
	#EM_68HC16
 69

	)

229 
	#EM_68HC11
 70

	)

230 
	#EM_68HC08
 71

	)

231 
	#EM_68HC05
 72

	)

232 
	#EM_SVX
 73

	)

233 
	#EM_ST19
 74

	)

234 
	#EM_VAX
 75

	)

235 
	#EM_CRIS
 76

	)

236 
	#EM_JAVELIN
 77

	)

237 
	#EM_FIREPATH
 78

	)

238 
	#EM_ZSP
 79

	)

239 
	#EM_MMIX
 80

	)

240 
	#EM_HUANY
 81

	)

241 
	#EM_PRISM
 82

	)

242 
	#EM_AVR
 83

	)

243 
	#EM_FR30
 84

	)

244 
	#EM_D10V
 85

	)

245 
	#EM_D30V
 86

	)

246 
	#EM_V850
 87

	)

247 
	#EM_M32R
 88

	)

248 
	#EM_MN10300
 89

	)

249 
	#EM_MN10200
 90

	)

250 
	#EM_PJ
 91

	)

251 
	#EM_OPENRISC
 92

	)

252 
	#EM_ARC_A5
 93

	)

253 
	#EM_XTENSA
 94

	)

254 
	#EM_NUM
 95

	)

260 
	#EM_ALPHA
 0x9026

	)

264 
	#EV_NONE
 0

	)

265 
	#EV_CURRENT
 1

	)

266 
	#EV_NUM
 2

	)

272 
Elf32_W‹d
 
	msh_«me
;

273 
Elf32_W‹d
 
	msh_ty≥
;

274 
Elf32_W‹d
 
	msh_Êags
;

275 
Elf32_Addr
 
	msh_addr
;

276 
Elf32_Off
 
	msh_off£t
;

277 
Elf32_W‹d
 
	msh_size
;

278 
Elf32_W‹d
 
	msh_lök
;

279 
Elf32_W‹d
 
	msh_öfo
;

280 
Elf32_W‹d
 
	msh_addølign
;

281 
Elf32_W‹d
 
	msh_ítsize
;

282 } 
	tElf32_Shdr
;

286 
Elf64_W‹d
 
	msh_«me
;

287 
Elf64_W‹d
 
	msh_ty≥
;

288 
Elf64_Xw‹d
 
	msh_Êags
;

289 
Elf64_Addr
 
	msh_addr
;

290 
Elf64_Off
 
	msh_off£t
;

291 
Elf64_Xw‹d
 
	msh_size
;

292 
Elf64_W‹d
 
	msh_lök
;

293 
Elf64_W‹d
 
	msh_öfo
;

294 
Elf64_Xw‹d
 
	msh_addølign
;

295 
Elf64_Xw‹d
 
	msh_ítsize
;

296 } 
	tElf64_Shdr
;

300 
	#SHN_UNDEF
 0

	)

301 
	#SHN_LORESERVE
 0xff00

	)

302 
	#SHN_LOPROC
 0xff00

	)

303 
	#SHN_BEFORE
 0xff00

	)

305 
	#SHN_AFTER
 0xff01

	)

307 
	#SHN_HIPROC
 0xff1‡

	)

308 
	#SHN_LOOS
 0xff20

	)

309 
	#SHN_HIOS
 0xff3‡

	)

310 
	#SHN_ABS
 0xfff1

	)

311 
	#SHN_COMMON
 0xfff2

	)

312 
	#SHN_XINDEX
 0xfff‡

	)

313 
	#SHN_HIRESERVE
 0xfff‡

	)

317 
	#SHT_NULL
 0

	)

318 
	#SHT_PROGBITS
 1

	)

319 
	#SHT_SYMTAB
 2

	)

320 
	#SHT_STRTAB
 3

	)

321 
	#SHT_RELA
 4

	)

322 
	#SHT_HASH
 5

	)

323 
	#SHT_DYNAMIC
 6

	)

324 
	#SHT_NOTE
 7

	)

325 
	#SHT_NOBITS
 8

	)

326 
	#SHT_REL
 9

	)

327 
	#SHT_SHLIB
 10

	)

328 
	#SHT_DYNSYM
 11

	)

329 
	#SHT_INIT_ARRAY
 14

	)

330 
	#SHT_FINI_ARRAY
 15

	)

331 
	#SHT_PREINIT_ARRAY
 16

	)

332 
	#SHT_GROUP
 17

	)

333 
	#SHT_SYMTAB_SHNDX
 18

	)

334 
	#SHT_NUM
 19

	)

335 
	#SHT_LOOS
 0x60000000

	)

336 
	#SHT_GNU_ATTRIBUTES
 0x6ffffff5

	)

337 
	#SHT_GNU_HASH
 0x6ffffff6

	)

338 
	#SHT_GNU_LIBLIST
 0x6ffffff7

	)

339 
	#SHT_CHECKSUM
 0x6ffffff8

	)

340 
	#SHT_LOSUNW
 0x6fffffÁ

	)

341 
	#SHT_SUNW_move
 0x6fffffÁ

	)

342 
	#SHT_SUNW_COMDAT
 0x6ffffffb

	)

343 
	#SHT_SUNW_symöfo
 0x6ffffffc

	)

344 
	#SHT_GNU_vîdef
 0x6ffffffd

	)

345 
	#SHT_GNU_vî√ed
 0x6fffff„

	)

346 
	#SHT_GNU_vîsym
 0x6ffffff‡

	)

347 
	#SHT_HISUNW
 0x6ffffff‡

	)

348 
	#SHT_HIOS
 0x6ffffff‡

	)

349 
	#SHT_LOPROC
 0x70000000

	)

350 
	#SHT_HIPROC
 0x7ffffff‡

	)

351 
	#SHT_LOUSER
 0x80000000

	)

352 
	#SHT_HIUSER
 0x8ffffff‡

	)

356 
	#SHF_WRITE
 (1 << 0Ë

	)

357 
	#SHF_ALLOC
 (1 << 1Ë

	)

358 
	#SHF_EXECINSTR
 (1 << 2Ë

	)

359 
	#SHF_MERGE
 (1 << 4Ë

	)

360 
	#SHF_STRINGS
 (1 << 5Ë

	)

361 
	#SHF_INFO_LINK
 (1 << 6Ë

	)

362 
	#SHF_LINK_ORDER
 (1 << 7Ë

	)

363 
	#SHF_OS_NONCONFORMING
 (1 << 8Ë

	)

365 
	#SHF_GROUP
 (1 << 9Ë

	)

366 
	#SHF_TLS
 (1 << 10Ë

	)

367 
	#SHF_MASKOS
 0x0ff00000

	)

368 
	#SHF_MASKPROC
 0xf0000000

	)

369 
	#SHF_ORDERED
 (1 << 30Ë

	)

371 
	#SHF_EXCLUDE
 (1 << 31Ë

	)

375 
	#GRP_COMDAT
 0x1

	)

381 
Elf32_W‹d
 
	m°_«me
;

382 
Elf32_Addr
 
	m°_vÆue
;

383 
Elf32_W‹d
 
	m°_size
;

384 
	m°_öfo
;

385 
	m°_Ÿhî
;

386 
Elf32_Se˘i⁄
 
	m°_shndx
;

387 } 
	tElf32_Sym
;

391 
Elf64_W‹d
 
	m°_«me
;

392 
	m°_öfo
;

393 
	m°_Ÿhî
;

394 
Elf64_Se˘i⁄
 
	m°_shndx
;

395 
Elf64_Addr
 
	m°_vÆue
;

396 
Elf64_Xw‹d
 
	m°_size
;

397 } 
	tElf64_Sym
;

404 
Elf32_HÆf
 
	msi_boundto
;

405 
Elf32_HÆf
 
	msi_Êags
;

406 } 
	tElf32_Symöfo
;

410 
Elf64_HÆf
 
	msi_boundto
;

411 
Elf64_HÆf
 
	msi_Êags
;

412 } 
	tElf64_Symöfo
;

415 
	#SYMINFO_BT_SELF
 0xfff‡

	)

416 
	#SYMINFO_BT_PARENT
 0xff„

	)

417 
	#SYMINFO_BT_LOWRESERVE
 0xff00

	)

420 
	#SYMINFO_FLG_DIRECT
 0x0001

	)

421 
	#SYMINFO_FLG_PASSTHRU
 0x0002

	)

422 
	#SYMINFO_FLG_COPY
 0x0004

	)

423 
	#SYMINFO_FLG_LAZYLOAD
 0x0008

	)

426 
	#SYMINFO_NONE
 0

	)

427 
	#SYMINFO_CURRENT
 1

	)

428 
	#SYMINFO_NUM
 2

	)

433 
	#ELF32_ST_BIND
(
vÆ
Ë(((Ë(vÆ)Ë>> 4)

	)

434 
	#ELF32_ST_TYPE
(
vÆ
Ë((vÆË& 0xf)

	)

435 
	#ELF32_ST_INFO
(
böd
, 
ty≥
Ë(((bödË<< 4Ë+ (—y≥Ë& 0xf))

	)

438 
	#ELF64_ST_BIND
(
vÆ
Ë
	`ELF32_ST_BIND
 (vÆ)

	)

439 
	#ELF64_ST_TYPE
(
vÆ
Ë
	`ELF32_ST_TYPE
 (vÆ)

	)

440 
	#ELF64_ST_INFO
(
böd
, 
ty≥
Ë
	`ELF32_ST_INFO
 ((böd), (ty≥))

	)

444 
	#STB_LOCAL
 0

	)

445 
	#STB_GLOBAL
 1

	)

446 
	#STB_WEAK
 2

	)

447 
	#STB_NUM
 3

	)

448 
	#STB_LOOS
 10

	)

449 
	#STB_GNU_UNIQUE
 10

	)

450 
	#STB_HIOS
 12

	)

451 
	#STB_LOPROC
 13

	)

452 
	#STB_HIPROC
 15

	)

456 
	#STT_NOTYPE
 0

	)

457 
	#STT_OBJECT
 1

	)

458 
	#STT_FUNC
 2

	)

459 
	#STT_SECTION
 3

	)

460 
	#STT_FILE
 4

	)

461 
	#STT_COMMON
 5

	)

462 
	#STT_TLS
 6

	)

463 
	#STT_NUM
 7

	)

464 
	#STT_LOOS
 10

	)

465 
	#STT_GNU_IFUNC
 10

	)

466 
	#STT_HIOS
 12

	)

467 
	#STT_LOPROC
 13

	)

468 
	#STT_HIPROC
 15

	)

475 
	#STN_UNDEF
 0

	)

480 
	#ELF32_ST_VISIBILITY
(
o
Ë((oË& 0x03)

	)

483 
	#ELF64_ST_VISIBILITY
(
o
Ë
	`ELF32_ST_VISIBILITY
 (o)

	)

486 
	#STV_DEFAULT
 0

	)

487 
	#STV_INTERNAL
 1

	)

488 
	#STV_HIDDEN
 2

	)

489 
	#STV_PROTECTED
 3

	)

496 
Elf32_Addr
 
	mr_off£t
;

497 
Elf32_W‹d
 
	mr_öfo
;

498 } 
	tElf32_Rñ
;

507 
Elf64_Addr
 
	mr_off£t
;

508 
Elf64_Xw‹d
 
	mr_öfo
;

509 } 
	tElf64_Rñ
;

515 
Elf32_Addr
 
	mr_off£t
;

516 
Elf32_W‹d
 
	mr_öfo
;

517 
Elf32_Sw‹d
 
	mr_addíd
;

518 } 
	tElf32_Rña
;

522 
Elf64_Addr
 
	mr_off£t
;

523 
Elf64_Xw‹d
 
	mr_öfo
;

524 
Elf64_Sxw‹d
 
	mr_addíd
;

525 } 
	tElf64_Rña
;

529 
	#ELF32_R_SYM
(
vÆ
Ë((vÆË>> 8)

	)

530 
	#ELF32_R_TYPE
(
vÆ
Ë((vÆË& 0xff)

	)

531 
	#ELF32_R_INFO
(
sym
, 
ty≥
Ë(((symË<< 8Ë+ (—y≥Ë& 0xff))

	)

533 
	#ELF64_R_SYM
(
i
Ë((iË>> 32)

	)

534 
	#ELF64_R_TYPE
(
i
Ë((iË& 0xffffffff)

	)

535 
	#ELF64_R_INFO
(
sym
,
ty≥
Ë((((
Elf64_Xw‹d
Ë(sym)Ë<< 32Ë+ (ty≥))

	)

541 
Elf32_W‹d
 
	mp_ty≥
;

542 
Elf32_Off
 
	mp_off£t
;

543 
Elf32_Addr
 
	mp_vaddr
;

544 
Elf32_Addr
 
	mp_∑ddr
;

545 
Elf32_W‹d
 
	mp_fûesz
;

546 
Elf32_W‹d
 
	mp_memsz
;

547 
Elf32_W‹d
 
	mp_Êags
;

548 
Elf32_W‹d
 
	mp_Æign
;

549 } 
	tElf32_Phdr
;

553 
Elf64_W‹d
 
	mp_ty≥
;

554 
Elf64_W‹d
 
	mp_Êags
;

555 
Elf64_Off
 
	mp_off£t
;

556 
Elf64_Addr
 
	mp_vaddr
;

557 
Elf64_Addr
 
	mp_∑ddr
;

558 
Elf64_Xw‹d
 
	mp_fûesz
;

559 
Elf64_Xw‹d
 
	mp_memsz
;

560 
Elf64_Xw‹d
 
	mp_Æign
;

561 } 
	tElf64_Phdr
;

567 
	#PN_XNUM
 0xffff

	)

571 
	#PT_NULL
 0

	)

572 
	#PT_LOAD
 1

	)

573 
	#PT_DYNAMIC
 2

	)

574 
	#PT_INTERP
 3

	)

575 
	#PT_NOTE
 4

	)

576 
	#PT_SHLIB
 5

	)

577 
	#PT_PHDR
 6

	)

578 
	#PT_TLS
 7

	)

579 
	#PT_NUM
 8

	)

580 
	#PT_LOOS
 0x60000000

	)

581 
	#PT_GNU_EH_FRAME
 0x6474e550

	)

582 
	#PT_GNU_STACK
 0x6474e551

	)

583 
	#PT_GNU_RELRO
 0x6474e552

	)

584 
	#PT_LOSUNW
 0x6fffffÁ

	)

585 
	#PT_SUNWBSS
 0x6fffffÁ

	)

586 
	#PT_SUNWSTACK
 0x6ffffffb

	)

587 
	#PT_HISUNW
 0x6fffffff

	)

588 
	#PT_HIOS
 0x6ffffff‡

	)

589 
	#PT_LOPROC
 0x70000000

	)

590 
	#PT_HIPROC
 0x7ffffff‡

	)

594 
	#PF_X
 (1 << 0Ë

	)

595 
	#PF_W
 (1 << 1Ë

	)

596 
	#PF_R
 (1 << 2Ë

	)

597 
	#PF_MASKOS
 0x0ff00000

	)

598 
	#PF_MASKPROC
 0xf0000000

	)

602 
	#NT_PRSTATUS
 1

	)

603 
	#NT_FPREGSET
 2

	)

604 
	#NT_PRPSINFO
 3

	)

605 
	#NT_PRXREG
 4

	)

606 
	#NT_TASKSTRUCT
 4

	)

607 
	#NT_PLATFORM
 5

	)

608 
	#NT_AUXV
 6

	)

609 
	#NT_GWINDOWS
 7

	)

610 
	#NT_ASRS
 8

	)

611 
	#NT_PSTATUS
 10

	)

612 
	#NT_PSINFO
 13

	)

613 
	#NT_PRCRED
 14

	)

614 
	#NT_UTSNAME
 15

	)

615 
	#NT_LWPSTATUS
 16

	)

616 
	#NT_LWPSINFO
 17

	)

617 
	#NT_PRFPXREG
 20

	)

618 
	#NT_PRXFPREG
 0x46e62b7‡

	)

619 
	#NT_PPC_VMX
 0x100

	)

620 
	#NT_PPC_SPE
 0x101

	)

621 
	#NT_PPC_VSX
 0x102

	)

622 
	#NT_386_TLS
 0x200

	)

623 
	#NT_386_IOPERM
 0x201

	)

624 
	#NT_X86_XSTATE
 0x202

	)

628 
	#NT_VERSION
 1

	)

635 
Elf32_Sw‹d
 
	md_èg
;

638 
Elf32_W‹d
 
	md_vÆ
;

639 
Elf32_Addr
 
	md_±r
;

640 } 
	md_un
;

641 } 
	tElf32_Dyn
;

645 
Elf64_Sxw‹d
 
	md_èg
;

648 
Elf64_Xw‹d
 
	md_vÆ
;

649 
Elf64_Addr
 
	md_±r
;

650 } 
	md_un
;

651 } 
	tElf64_Dyn
;

655 
	#DT_NULL
 0

	)

656 
	#DT_NEEDED
 1

	)

657 
	#DT_PLTRELSZ
 2

	)

658 
	#DT_PLTGOT
 3

	)

659 
	#DT_HASH
 4

	)

660 
	#DT_STRTAB
 5

	)

661 
	#DT_SYMTAB
 6

	)

662 
	#DT_RELA
 7

	)

663 
	#DT_RELASZ
 8

	)

664 
	#DT_RELAENT
 9

	)

665 
	#DT_STRSZ
 10

	)

666 
	#DT_SYMENT
 11

	)

667 
	#DT_INIT
 12

	)

668 
	#DT_FINI
 13

	)

669 
	#DT_SONAME
 14

	)

670 
	#DT_RPATH
 15

	)

671 
	#DT_SYMBOLIC
 16

	)

672 
	#DT_REL
 17

	)

673 
	#DT_RELSZ
 18

	)

674 
	#DT_RELENT
 19

	)

675 
	#DT_PLTREL
 20

	)

676 
	#DT_DEBUG
 21

	)

677 
	#DT_TEXTREL
 22

	)

678 
	#DT_JMPREL
 23

	)

679 
	#DT_BIND_NOW
 24

	)

680 
	#DT_INIT_ARRAY
 25

	)

681 
	#DT_FINI_ARRAY
 26

	)

682 
	#DT_INIT_ARRAYSZ
 27

	)

683 
	#DT_FINI_ARRAYSZ
 28

	)

684 
	#DT_RUNPATH
 29

	)

685 
	#DT_FLAGS
 30

	)

686 
	#DT_ENCODING
 32

	)

687 
	#DT_PREINIT_ARRAY
 32

	)

688 
	#DT_PREINIT_ARRAYSZ
 33

	)

689 
	#DT_NUM
 34

	)

690 
	#DT_LOOS
 0x6000000d

	)

691 
	#DT_HIOS
 0x6ffff000

	)

692 
	#DT_LOPROC
 0x70000000

	)

693 
	#DT_HIPROC
 0x7ffffff‡

	)

694 
	#DT_PROCNUM
 
DT_MIPS_NUM


	)

699 
	#DT_VALRNGLO
 0x6ffffd00

	)

700 
	#DT_GNU_PRELINKED
 0x6ffffdf5

	)

701 
	#DT_GNU_CONFLICTSZ
 0x6ffffdf6

	)

702 
	#DT_GNU_LIBLISTSZ
 0x6ffffdf7

	)

703 
	#DT_CHECKSUM
 0x6ffffdf8

	)

704 
	#DT_PLTPADSZ
 0x6ffffdf9

	)

705 
	#DT_MOVEENT
 0x6ffffdÁ

	)

706 
	#DT_MOVESZ
 0x6ffffdfb

	)

707 
	#DT_FEATURE_1
 0x6ffffdf¯

	)

708 
	#DT_POSFLAG_1
 0x6ffffdfd

	)

710 
	#DT_SYMINSZ
 0x6ffffd„

	)

711 
	#DT_SYMINENT
 0x6ffffdf‡

	)

712 
	#DT_VALRNGHI
 0x6ffffdff

	)

713 
	#DT_VALTAGIDX
(
èg
Ë(
DT_VALRNGHI
 - (èg)Ë

	)

714 
	#DT_VALNUM
 12

	)

721 
	#DT_ADDRRNGLO
 0x6fff„00

	)

722 
	#DT_GNU_HASH
 0x6fff„f5

	)

723 
	#DT_TLSDESC_PLT
 0x6fff„f6

	)

724 
	#DT_TLSDESC_GOT
 0x6fff„f7

	)

725 
	#DT_GNU_CONFLICT
 0x6fff„f8

	)

726 
	#DT_GNU_LIBLIST
 0x6fff„f9

	)

727 
	#DT_CONFIG
 0x6fff„Á

	)

728 
	#DT_DEPAUDIT
 0x6fff„fb

	)

729 
	#DT_AUDIT
 0x6fff„f¯

	)

730 
	#DT_PLTPAD
 0x6fff„fd

	)

731 
	#DT_MOVETAB
 0x6fff„„

	)

732 
	#DT_SYMINFO
 0x6fff„f‡

	)

733 
	#DT_ADDRRNGHI
 0x6fff„ff

	)

734 
	#DT_ADDRTAGIDX
(
èg
Ë(
DT_ADDRRNGHI
 - (èg)Ë

	)

735 
	#DT_ADDRNUM
 11

	)

739 
	#DT_VERSYM
 0x6ffffff0

	)

741 
	#DT_RELACOUNT
 0x6ffffff9

	)

742 
	#DT_RELCOUNT
 0x6fffffÁ

	)

745 
	#DT_FLAGS_1
 0x6ffffffb

	)

746 
	#DT_VERDEF
 0x6ffffff¯

	)

748 
	#DT_VERDEFNUM
 0x6ffffffd

	)

749 
	#DT_VERNEED
 0x6fffff„

	)

751 
	#DT_VERNEEDNUM
 0x6ffffff‡

	)

752 
	#DT_VERSIONTAGIDX
(
èg
Ë(
DT_VERNEEDNUM
 - (èg)Ë

	)

753 
	#DT_VERSIONTAGNUM
 16

	)

757 
	#DT_AUXILIARY
 0x7ffffffd

	)

758 
	#DT_FILTER
 0x7ffffff‡

	)

759 
	#DT_EXTRATAGIDX
(
èg
Ë((
Elf32_W‹d
)-((
Elf32_Sw‹d
Ë—agË<<1>>1)-1)

	)

760 
	#DT_EXTRANUM
 3

	)

763 
	#DF_ORIGIN
 0x00000001

	)

764 
	#DF_SYMBOLIC
 0x00000002

	)

765 
	#DF_TEXTREL
 0x00000004

	)

766 
	#DF_BIND_NOW
 0x00000008

	)

767 
	#DF_STATIC_TLS
 0x00000010

	)

771 
	#DF_1_NOW
 0x00000001

	)

772 
	#DF_1_GLOBAL
 0x00000002

	)

773 
	#DF_1_GROUP
 0x00000004

	)

774 
	#DF_1_NODELETE
 0x00000008

	)

775 
	#DF_1_LOADFLTR
 0x00000010

	)

776 
	#DF_1_INITFIRST
 0x00000020

	)

777 
	#DF_1_NOOPEN
 0x00000040

	)

778 
	#DF_1_ORIGIN
 0x00000080

	)

779 
	#DF_1_DIRECT
 0x00000100

	)

780 
	#DF_1_TRANS
 0x00000200

	)

781 
	#DF_1_INTERPOSE
 0x00000400

	)

782 
	#DF_1_NODEFLIB
 0x00000800

	)

783 
	#DF_1_NODUMP
 0x00001000

	)

784 
	#DF_1_CONFALT
 0x00002000

	)

785 
	#DF_1_ENDFILTEE
 0x00004000

	)

786 
	#DF_1_DISPRELDNE
 0x00008000

	)

787 
	#DF_1_DISPRELPND
 0x00010000

	)

790 
	#DTF_1_PARINIT
 0x00000001

	)

791 
	#DTF_1_CONFEXP
 0x00000002

	)

794 
	#DF_P1_LAZYLOAD
 0x00000001

	)

795 
	#DF_P1_GROUPPERM
 0x00000002

	)

802 
Elf32_HÆf
 
	mvd_vîsi⁄
;

803 
Elf32_HÆf
 
	mvd_Êags
;

804 
Elf32_HÆf
 
	mvd_ndx
;

805 
Elf32_HÆf
 
	mvd_˙t
;

806 
Elf32_W‹d
 
	mvd_hash
;

807 
Elf32_W‹d
 
	mvd_aux
;

808 
Elf32_W‹d
 
	mvd_√xt
;

810 } 
	tElf32_Vîdef
;

814 
Elf64_HÆf
 
	mvd_vîsi⁄
;

815 
Elf64_HÆf
 
	mvd_Êags
;

816 
Elf64_HÆf
 
	mvd_ndx
;

817 
Elf64_HÆf
 
	mvd_˙t
;

818 
Elf64_W‹d
 
	mvd_hash
;

819 
Elf64_W‹d
 
	mvd_aux
;

820 
Elf64_W‹d
 
	mvd_√xt
;

822 } 
	tElf64_Vîdef
;

826 
	#VER_DEF_NONE
 0

	)

827 
	#VER_DEF_CURRENT
 1

	)

828 
	#VER_DEF_NUM
 2

	)

831 
	#VER_FLG_BASE
 0x1

	)

832 
	#VER_FLG_WEAK
 0x2

	)

835 
	#VER_NDX_LOCAL
 0

	)

836 
	#VER_NDX_GLOBAL
 1

	)

837 
	#VER_NDX_LORESERVE
 0xff00

	)

838 
	#VER_NDX_ELIMINATE
 0xff01

	)

844 
Elf32_W‹d
 
	mvda_«me
;

845 
Elf32_W‹d
 
	mvda_√xt
;

847 } 
	tElf32_Vîdaux
;

851 
Elf64_W‹d
 
	mvda_«me
;

852 
Elf64_W‹d
 
	mvda_√xt
;

854 } 
	tElf64_Vîdaux
;

861 
Elf32_HÆf
 
	mvn_vîsi⁄
;

862 
Elf32_HÆf
 
	mvn_˙t
;

863 
Elf32_W‹d
 
	mvn_fûe
;

865 
Elf32_W‹d
 
	mvn_aux
;

866 
Elf32_W‹d
 
	mvn_√xt
;

868 } 
	tElf32_Vî√ed
;

872 
Elf64_HÆf
 
	mvn_vîsi⁄
;

873 
Elf64_HÆf
 
	mvn_˙t
;

874 
Elf64_W‹d
 
	mvn_fûe
;

876 
Elf64_W‹d
 
	mvn_aux
;

877 
Elf64_W‹d
 
	mvn_√xt
;

879 } 
	tElf64_Vî√ed
;

883 
	#VER_NEED_NONE
 0

	)

884 
	#VER_NEED_CURRENT
 1

	)

885 
	#VER_NEED_NUM
 2

	)

891 
Elf32_W‹d
 
	mv«_hash
;

892 
Elf32_HÆf
 
	mv«_Êags
;

893 
Elf32_HÆf
 
	mv«_Ÿhî
;

894 
Elf32_W‹d
 
	mv«_«me
;

895 
Elf32_W‹d
 
	mv«_√xt
;

897 } 
	tElf32_Vî«ux
;

901 
Elf64_W‹d
 
	mv«_hash
;

902 
Elf64_HÆf
 
	mv«_Êags
;

903 
Elf64_HÆf
 
	mv«_Ÿhî
;

904 
Elf64_W‹d
 
	mv«_«me
;

905 
Elf64_W‹d
 
	mv«_√xt
;

907 } 
	tElf64_Vî«ux
;

911 
	#VER_FLG_WEAK
 0x2

	)

925 
uöt32_t
 
	ma_ty≥
;

928 
uöt32_t
 
	ma_vÆ
;

932 } 
	ma_un
;

933 } 
	tElf32_auxv_t
;

937 
uöt64_t
 
	ma_ty≥
;

940 
uöt64_t
 
	ma_vÆ
;

944 } 
	ma_un
;

945 } 
	tElf64_auxv_t
;

949 
	#AT_NULL
 0

	)

950 
	#AT_IGNORE
 1

	)

951 
	#AT_EXECFD
 2

	)

952 
	#AT_PHDR
 3

	)

953 
	#AT_PHENT
 4

	)

954 
	#AT_PHNUM
 5

	)

955 
	#AT_PAGESZ
 6

	)

956 
	#AT_BASE
 7

	)

957 
	#AT_FLAGS
 8

	)

958 
	#AT_ENTRY
 9

	)

959 
	#AT_NOTELF
 10

	)

960 
	#AT_UID
 11

	)

961 
	#AT_EUID
 12

	)

962 
	#AT_GID
 13

	)

963 
	#AT_EGID
 14

	)

964 
	#AT_CLKTCK
 17

	)

967 
	#AT_PLATFORM
 15

	)

968 
	#AT_HWCAP
 16

	)

973 
	#AT_FPUCW
 18

	)

976 
	#AT_DCACHEBSIZE
 19

	)

977 
	#AT_ICACHEBSIZE
 20

	)

978 
	#AT_UCACHEBSIZE
 21

	)

982 
	#AT_IGNOREPPC
 22

	)

984 
	#AT_SECURE
 23

	)

986 
	#AT_BASE_PLATFORM
 24

	)

988 
	#AT_RANDOM
 25

	)

990 
	#AT_EXECFN
 31

	)

994 
	#AT_SYSINFO
 32

	)

995 
	#AT_SYSINFO_EHDR
 33

	)

999 
	#AT_L1I_CACHESHAPE
 34

	)

1000 
	#AT_L1D_CACHESHAPE
 35

	)

1001 
	#AT_L2_CACHESHAPE
 36

	)

1002 
	#AT_L3_CACHESHAPE
 37

	)

1009 
Elf32_W‹d
 
	mn_«mesz
;

1010 
Elf32_W‹d
 
	mn_descsz
;

1011 
Elf32_W‹d
 
	mn_ty≥
;

1012 } 
	tElf32_Nhdr
;

1016 
Elf64_W‹d
 
	mn_«mesz
;

1017 
Elf64_W‹d
 
	mn_descsz
;

1018 
Elf64_W‹d
 
	mn_ty≥
;

1019 } 
	tElf64_Nhdr
;

1024 
	#ELF_NOTE_SOLARIS
 "SUNW Sﬁ¨is"

	)

1027 
	#ELF_NOTE_GNU
 "GNU"

	)

1033 
	#ELF_NOTE_PAGESIZE_HINT
 1

	)

1044 
	#NT_GNU_ABI_TAG
 1

	)

1045 
	#ELF_NOTE_ABI
 
NT_GNU_ABI_TAG


	)

1049 
	#ELF_NOTE_OS_LINUX
 0

	)

1050 
	#ELF_NOTE_OS_GNU
 1

	)

1051 
	#ELF_NOTE_OS_SOLARIS2
 2

	)

1052 
	#ELF_NOTE_OS_FREEBSD
 3

	)

1060 
	#NT_GNU_HWCAP
 2

	)

1064 
	#NT_GNU_BUILD_ID
 3

	)

1067 
	#NT_GNU_GOLD_VERSION
 4

	)

1073 
Elf32_Xw‹d
 
	mm_vÆue
;

1074 
Elf32_W‹d
 
	mm_öfo
;

1075 
Elf32_W‹d
 
	mm_poff£t
;

1076 
Elf32_HÆf
 
	mm_ª≥©
;

1077 
Elf32_HÆf
 
	mm_°ride
;

1078 } 
	tElf32_Move
;

1082 
Elf64_Xw‹d
 
	mm_vÆue
;

1083 
Elf64_Xw‹d
 
	mm_öfo
;

1084 
Elf64_Xw‹d
 
	mm_poff£t
;

1085 
Elf64_HÆf
 
	mm_ª≥©
;

1086 
Elf64_HÆf
 
	mm_°ride
;

1087 } 
	tElf64_Move
;

1090 
	#ELF32_M_SYM
(
öfo
Ë((öfoË>> 8)

	)

1091 
	#ELF32_M_SIZE
(
öfo
Ë((Ë(öfo))

	)

1092 
	#ELF32_M_INFO
(
sym
, 
size
Ë(((symË<< 8Ë+ (Ë(size))

	)

1094 
	#ELF64_M_SYM
(
öfo
Ë
	`ELF32_M_SYM
 (öfo)

	)

1095 
	#ELF64_M_SIZE
(
öfo
Ë
	`ELF32_M_SIZE
 (öfo)

	)

1096 
	#ELF64_M_INFO
(
sym
, 
size
Ë
	`ELF32_M_INFO
 (sym, size)

	)

1102 
	#EF_CPU32
 0x00810000

	)

1106 
	#R_68K_NONE
 0

	)

1107 
	#R_68K_32
 1

	)

1108 
	#R_68K_16
 2

	)

1109 
	#R_68K_8
 3

	)

1110 
	#R_68K_PC32
 4

	)

1111 
	#R_68K_PC16
 5

	)

1112 
	#R_68K_PC8
 6

	)

1113 
	#R_68K_GOT32
 7

	)

1114 
	#R_68K_GOT16
 8

	)

1115 
	#R_68K_GOT8
 9

	)

1116 
	#R_68K_GOT32O
 10

	)

1117 
	#R_68K_GOT16O
 11

	)

1118 
	#R_68K_GOT8O
 12

	)

1119 
	#R_68K_PLT32
 13

	)

1120 
	#R_68K_PLT16
 14

	)

1121 
	#R_68K_PLT8
 15

	)

1122 
	#R_68K_PLT32O
 16

	)

1123 
	#R_68K_PLT16O
 17

	)

1124 
	#R_68K_PLT8O
 18

	)

1125 
	#R_68K_COPY
 19

	)

1126 
	#R_68K_GLOB_DAT
 20

	)

1127 
	#R_68K_JMP_SLOT
 21

	)

1128 
	#R_68K_RELATIVE
 22

	)

1129 
	#R_68K_TLS_GD32
 25

	)

1130 
	#R_68K_TLS_GD16
 26

	)

1131 
	#R_68K_TLS_GD8
 27

	)

1132 
	#R_68K_TLS_LDM32
 28

	)

1133 
	#R_68K_TLS_LDM16
 29

	)

1134 
	#R_68K_TLS_LDM8
 30

	)

1135 
	#R_68K_TLS_LDO32
 31

	)

1136 
	#R_68K_TLS_LDO16
 32

	)

1137 
	#R_68K_TLS_LDO8
 33

	)

1138 
	#R_68K_TLS_IE32
 34

	)

1139 
	#R_68K_TLS_IE16
 35

	)

1140 
	#R_68K_TLS_IE8
 36

	)

1141 
	#R_68K_TLS_LE32
 37

	)

1143 
	#R_68K_TLS_LE16
 38

	)

1145 
	#R_68K_TLS_LE8
 39

	)

1147 
	#R_68K_TLS_DTPMOD32
 40

	)

1148 
	#R_68K_TLS_DTPREL32
 41

	)

1149 
	#R_68K_TLS_TPREL32
 42

	)

1151 
	#R_68K_NUM
 43

	)

1157 
	#R_386_NONE
 0

	)

1158 
	#R_386_32
 1

	)

1159 
	#R_386_PC32
 2

	)

1160 
	#R_386_GOT32
 3

	)

1161 
	#R_386_PLT32
 4

	)

1162 
	#R_386_COPY
 5

	)

1163 
	#R_386_GLOB_DAT
 6

	)

1164 
	#R_386_JMP_SLOT
 7

	)

1165 
	#R_386_RELATIVE
 8

	)

1166 
	#R_386_GOTOFF
 9

	)

1167 
	#R_386_GOTPC
 10

	)

1168 
	#R_386_32PLT
 11

	)

1169 
	#R_386_TLS_TPOFF
 14

	)

1170 
	#R_386_TLS_IE
 15

	)

1172 
	#R_386_TLS_GOTIE
 16

	)

1174 
	#R_386_TLS_LE
 17

	)

1176 
	#R_386_TLS_GD
 18

	)

1178 
	#R_386_TLS_LDM
 19

	)

1181 
	#R_386_16
 20

	)

1182 
	#R_386_PC16
 21

	)

1183 
	#R_386_8
 22

	)

1184 
	#R_386_PC8
 23

	)

1185 
	#R_386_TLS_GD_32
 24

	)

1187 
	#R_386_TLS_GD_PUSH
 25

	)

1188 
	#R_386_TLS_GD_CALL
 26

	)

1190 
	#R_386_TLS_GD_POP
 27

	)

1191 
	#R_386_TLS_LDM_32
 28

	)

1193 
	#R_386_TLS_LDM_PUSH
 29

	)

1194 
	#R_386_TLS_LDM_CALL
 30

	)

1196 
	#R_386_TLS_LDM_POP
 31

	)

1197 
	#R_386_TLS_LDO_32
 32

	)

1198 
	#R_386_TLS_IE_32
 33

	)

1200 
	#R_386_TLS_LE_32
 34

	)

1202 
	#R_386_TLS_DTPMOD32
 35

	)

1203 
	#R_386_TLS_DTPOFF32
 36

	)

1204 
	#R_386_TLS_TPOFF32
 37

	)

1206 
	#R_386_TLS_GOTDESC
 39

	)

1207 
	#R_386_TLS_DESC_CALL
 40

	)

1210 
	#R_386_TLS_DESC
 41

	)

1214 
	#R_386_IRELATIVE
 42

	)

1216 
	#R_386_NUM
 43

	)

1222 
	#STT_SPARC_REGISTER
 13

	)

1226 
	#EF_SPARCV9_MM
 3

	)

1227 
	#EF_SPARCV9_TSO
 0

	)

1228 
	#EF_SPARCV9_PSO
 1

	)

1229 
	#EF_SPARCV9_RMO
 2

	)

1230 
	#EF_SPARC_LEDATA
 0x800000

	)

1231 
	#EF_SPARC_EXT_MASK
 0xFFFF00

	)

1232 
	#EF_SPARC_32PLUS
 0x000100

	)

1233 
	#EF_SPARC_SUN_US1
 0x000200

	)

1234 
	#EF_SPARC_HAL_R1
 0x000400

	)

1235 
	#EF_SPARC_SUN_US3
 0x000800

	)

1239 
	#R_SPARC_NONE
 0

	)

1240 
	#R_SPARC_8
 1

	)

1241 
	#R_SPARC_16
 2

	)

1242 
	#R_SPARC_32
 3

	)

1243 
	#R_SPARC_DISP8
 4

	)

1244 
	#R_SPARC_DISP16
 5

	)

1245 
	#R_SPARC_DISP32
 6

	)

1246 
	#R_SPARC_WDISP30
 7

	)

1247 
	#R_SPARC_WDISP22
 8

	)

1248 
	#R_SPARC_HI22
 9

	)

1249 
	#R_SPARC_22
 10

	)

1250 
	#R_SPARC_13
 11

	)

1251 
	#R_SPARC_LO10
 12

	)

1252 
	#R_SPARC_GOT10
 13

	)

1253 
	#R_SPARC_GOT13
 14

	)

1254 
	#R_SPARC_GOT22
 15

	)

1255 
	#R_SPARC_PC10
 16

	)

1256 
	#R_SPARC_PC22
 17

	)

1257 
	#R_SPARC_WPLT30
 18

	)

1258 
	#R_SPARC_COPY
 19

	)

1259 
	#R_SPARC_GLOB_DAT
 20

	)

1260 
	#R_SPARC_JMP_SLOT
 21

	)

1261 
	#R_SPARC_RELATIVE
 22

	)

1262 
	#R_SPARC_UA32
 23

	)

1266 
	#R_SPARC_PLT32
 24

	)

1267 
	#R_SPARC_HIPLT22
 25

	)

1268 
	#R_SPARC_LOPLT10
 26

	)

1269 
	#R_SPARC_PCPLT32
 27

	)

1270 
	#R_SPARC_PCPLT22
 28

	)

1271 
	#R_SPARC_PCPLT10
 29

	)

1272 
	#R_SPARC_10
 30

	)

1273 
	#R_SPARC_11
 31

	)

1274 
	#R_SPARC_64
 32

	)

1275 
	#R_SPARC_OLO10
 33

	)

1276 
	#R_SPARC_HH22
 34

	)

1277 
	#R_SPARC_HM10
 35

	)

1278 
	#R_SPARC_LM22
 36

	)

1279 
	#R_SPARC_PC_HH22
 37

	)

1280 
	#R_SPARC_PC_HM10
 38

	)

1281 
	#R_SPARC_PC_LM22
 39

	)

1282 
	#R_SPARC_WDISP16
 40

	)

1283 
	#R_SPARC_WDISP19
 41

	)

1284 
	#R_SPARC_GLOB_JMP
 42

	)

1285 
	#R_SPARC_7
 43

	)

1286 
	#R_SPARC_5
 44

	)

1287 
	#R_SPARC_6
 45

	)

1288 
	#R_SPARC_DISP64
 46

	)

1289 
	#R_SPARC_PLT64
 47

	)

1290 
	#R_SPARC_HIX22
 48

	)

1291 
	#R_SPARC_LOX10
 49

	)

1292 
	#R_SPARC_H44
 50

	)

1293 
	#R_SPARC_M44
 51

	)

1294 
	#R_SPARC_L44
 52

	)

1295 
	#R_SPARC_REGISTER
 53

	)

1296 
	#R_SPARC_UA64
 54

	)

1297 
	#R_SPARC_UA16
 55

	)

1298 
	#R_SPARC_TLS_GD_HI22
 56

	)

1299 
	#R_SPARC_TLS_GD_LO10
 57

	)

1300 
	#R_SPARC_TLS_GD_ADD
 58

	)

1301 
	#R_SPARC_TLS_GD_CALL
 59

	)

1302 
	#R_SPARC_TLS_LDM_HI22
 60

	)

1303 
	#R_SPARC_TLS_LDM_LO10
 61

	)

1304 
	#R_SPARC_TLS_LDM_ADD
 62

	)

1305 
	#R_SPARC_TLS_LDM_CALL
 63

	)

1306 
	#R_SPARC_TLS_LDO_HIX22
 64

	)

1307 
	#R_SPARC_TLS_LDO_LOX10
 65

	)

1308 
	#R_SPARC_TLS_LDO_ADD
 66

	)

1309 
	#R_SPARC_TLS_IE_HI22
 67

	)

1310 
	#R_SPARC_TLS_IE_LO10
 68

	)

1311 
	#R_SPARC_TLS_IE_LD
 69

	)

1312 
	#R_SPARC_TLS_IE_LDX
 70

	)

1313 
	#R_SPARC_TLS_IE_ADD
 71

	)

1314 
	#R_SPARC_TLS_LE_HIX22
 72

	)

1315 
	#R_SPARC_TLS_LE_LOX10
 73

	)

1316 
	#R_SPARC_TLS_DTPMOD32
 74

	)

1317 
	#R_SPARC_TLS_DTPMOD64
 75

	)

1318 
	#R_SPARC_TLS_DTPOFF32
 76

	)

1319 
	#R_SPARC_TLS_DTPOFF64
 77

	)

1320 
	#R_SPARC_TLS_TPOFF32
 78

	)

1321 
	#R_SPARC_TLS_TPOFF64
 79

	)

1322 
	#R_SPARC_GOTDATA_HIX22
 80

	)

1323 
	#R_SPARC_GOTDATA_LOX10
 81

	)

1324 
	#R_SPARC_GOTDATA_OP_HIX22
 82

	)

1325 
	#R_SPARC_GOTDATA_OP_LOX10
 83

	)

1326 
	#R_SPARC_GOTDATA_OP
 84

	)

1327 
	#R_SPARC_H34
 85

	)

1328 
	#R_SPARC_SIZE32
 86

	)

1329 
	#R_SPARC_SIZE64
 87

	)

1330 
	#R_SPARC_JMP_IREL
 248

	)

1331 
	#R_SPARC_IRELATIVE
 249

	)

1332 
	#R_SPARC_GNU_VTINHERIT
 250

	)

1333 
	#R_SPARC_GNU_VTENTRY
 251

	)

1334 
	#R_SPARC_REV32
 252

	)

1336 
	#R_SPARC_NUM
 253

	)

1340 
	#DT_SPARC_REGISTER
 0x70000001

	)

1341 
	#DT_SPARC_NUM
 2

	)

1345 
	#HWCAP_SPARC_FLUSH
 1

	)

1346 
	#HWCAP_SPARC_STBAR
 2

	)

1347 
	#HWCAP_SPARC_SWAP
 4

	)

1348 
	#HWCAP_SPARC_MULDIV
 8

	)

1349 
	#HWCAP_SPARC_V9
 16

	)

1350 
	#HWCAP_SPARC_ULTRA3
 32

	)

1351 
	#HWCAP_SPARC_BLKINIT
 64

	)

1352 
	#HWCAP_SPARC_N2
 128

	)

1358 
	#EF_MIPS_NOREORDER
 1

	)

1359 
	#EF_MIPS_PIC
 2

	)

1360 
	#EF_MIPS_CPIC
 4

	)

1361 
	#EF_MIPS_XGOT
 8

	)

1362 
	#EF_MIPS_64BIT_WHIRL
 16

	)

1363 
	#EF_MIPS_ABI2
 32

	)

1364 
	#EF_MIPS_ABI_ON32
 64

	)

1365 
	#EF_MIPS_ARCH
 0xf0000000

	)

1369 
	#EF_MIPS_ARCH_1
 0x00000000

	)

1370 
	#EF_MIPS_ARCH_2
 0x10000000

	)

1371 
	#EF_MIPS_ARCH_3
 0x20000000

	)

1372 
	#EF_MIPS_ARCH_4
 0x30000000

	)

1373 
	#EF_MIPS_ARCH_5
 0x40000000

	)

1374 
	#EF_MIPS_ARCH_32
 0x60000000

	)

1375 
	#EF_MIPS_ARCH_64
 0x70000000

	)

1379 
	#E_MIPS_ARCH_1
 0x00000000

	)

1380 
	#E_MIPS_ARCH_2
 0x10000000

	)

1381 
	#E_MIPS_ARCH_3
 0x20000000

	)

1382 
	#E_MIPS_ARCH_4
 0x30000000

	)

1383 
	#E_MIPS_ARCH_5
 0x40000000

	)

1384 
	#E_MIPS_ARCH_32
 0x60000000

	)

1385 
	#E_MIPS_ARCH_64
 0x70000000

	)

1389 
	#SHN_MIPS_ACOMMON
 0xff00

	)

1390 
	#SHN_MIPS_TEXT
 0xff01

	)

1391 
	#SHN_MIPS_DATA
 0xff02

	)

1392 
	#SHN_MIPS_SCOMMON
 0xff03

	)

1393 
	#SHN_MIPS_SUNDEFINED
 0xff04

	)

1397 
	#SHT_MIPS_LIBLIST
 0x70000000

	)

1398 
	#SHT_MIPS_MSYM
 0x70000001

	)

1399 
	#SHT_MIPS_CONFLICT
 0x70000002

	)

1400 
	#SHT_MIPS_GPTAB
 0x70000003

	)

1401 
	#SHT_MIPS_UCODE
 0x70000004

	)

1402 
	#SHT_MIPS_DEBUG
 0x70000005

	)

1403 
	#SHT_MIPS_REGINFO
 0x70000006

	)

1404 
	#SHT_MIPS_PACKAGE
 0x70000007

	)

1405 
	#SHT_MIPS_PACKSYM
 0x70000008

	)

1406 
	#SHT_MIPS_RELD
 0x70000009

	)

1407 
	#SHT_MIPS_IFACE
 0x7000000b

	)

1408 
	#SHT_MIPS_CONTENT
 0x7000000c

	)

1409 
	#SHT_MIPS_OPTIONS
 0x7000000d

	)

1410 
	#SHT_MIPS_SHDR
 0x70000010

	)

1411 
	#SHT_MIPS_FDESC
 0x70000011

	)

1412 
	#SHT_MIPS_EXTSYM
 0x70000012

	)

1413 
	#SHT_MIPS_DENSE
 0x70000013

	)

1414 
	#SHT_MIPS_PDESC
 0x70000014

	)

1415 
	#SHT_MIPS_LOCSYM
 0x70000015

	)

1416 
	#SHT_MIPS_AUXSYM
 0x70000016

	)

1417 
	#SHT_MIPS_OPTSYM
 0x70000017

	)

1418 
	#SHT_MIPS_LOCSTR
 0x70000018

	)

1419 
	#SHT_MIPS_LINE
 0x70000019

	)

1420 
	#SHT_MIPS_RFDESC
 0x7000001a

	)

1421 
	#SHT_MIPS_DELTASYM
 0x7000001b

	)

1422 
	#SHT_MIPS_DELTAINST
 0x7000001c

	)

1423 
	#SHT_MIPS_DELTACLASS
 0x7000001d

	)

1424 
	#SHT_MIPS_DWARF
 0x7000001ê

	)

1425 
	#SHT_MIPS_DELTADECL
 0x7000001f

	)

1426 
	#SHT_MIPS_SYMBOL_LIB
 0x70000020

	)

1427 
	#SHT_MIPS_EVENTS
 0x70000021

	)

1428 
	#SHT_MIPS_TRANSLATE
 0x70000022

	)

1429 
	#SHT_MIPS_PIXIE
 0x70000023

	)

1430 
	#SHT_MIPS_XLATE
 0x70000024

	)

1431 
	#SHT_MIPS_XLATE_DEBUG
 0x70000025

	)

1432 
	#SHT_MIPS_WHIRL
 0x70000026

	)

1433 
	#SHT_MIPS_EH_REGION
 0x70000027

	)

1434 
	#SHT_MIPS_XLATE_OLD
 0x70000028

	)

1435 
	#SHT_MIPS_PDR_EXCEPTION
 0x70000029

	)

1439 
	#SHF_MIPS_GPREL
 0x10000000

	)

1440 
	#SHF_MIPS_MERGE
 0x20000000

	)

1441 
	#SHF_MIPS_ADDR
 0x40000000

	)

1442 
	#SHF_MIPS_STRINGS
 0x80000000

	)

1443 
	#SHF_MIPS_NOSTRIP
 0x08000000

	)

1444 
	#SHF_MIPS_LOCAL
 0x04000000

	)

1445 
	#SHF_MIPS_NAMES
 0x02000000

	)

1446 
	#SHF_MIPS_NODUPE
 0x01000000

	)

1452 
	#STO_MIPS_DEFAULT
 0x0

	)

1453 
	#STO_MIPS_INTERNAL
 0x1

	)

1454 
	#STO_MIPS_HIDDEN
 0x2

	)

1455 
	#STO_MIPS_PROTECTED
 0x3

	)

1456 
	#STO_MIPS_PLT
 0x8

	)

1457 
	#STO_MIPS_SC_ALIGN_UNUSED
 0xff

	)

1460 
	#STB_MIPS_SPLIT_COMMON
 13

	)

1468 
Elf32_W‹d
 
	mgt_cuºít_g_vÆue
;

1469 
Elf32_W‹d
 
	mgt_unu£d
;

1470 } 
	mgt_hódî
;

1473 
Elf32_W‹d
 
	mgt_g_vÆue
;

1474 
Elf32_W‹d
 
	mgt_byãs
;

1475 } 
	mgt_íåy
;

1476 } 
	tElf32_g±ab
;

1482 
Elf32_W‹d
 
	mri_g¥mask
;

1483 
Elf32_W‹d
 
	mri_˝rmask
[4];

1484 
Elf32_Sw‹d
 
	mri_gp_vÆue
;

1485 } 
	tElf32_RegInfo
;

1491 
	mköd
;

1493 
	msize
;

1494 
Elf32_Se˘i⁄
 
	m£˘i⁄
;

1496 
Elf32_W‹d
 
	möfo
;

1497 } 
	tElf_O±i⁄s
;

1501 
	#ODK_NULL
 0

	)

1502 
	#ODK_REGINFO
 1

	)

1503 
	#ODK_EXCEPTIONS
 2

	)

1504 
	#ODK_PAD
 3

	)

1505 
	#ODK_HWPATCH
 4

	)

1506 
	#ODK_FILL
 5

	)

1507 
	#ODK_TAGS
 6

	)

1508 
	#ODK_HWAND
 7

	)

1509 
	#ODK_HWOR
 8

	)

1513 
	#OEX_FPU_MIN
 0x1‡

	)

1514 
	#OEX_FPU_MAX
 0x1f00

	)

1515 
	#OEX_PAGE0
 0x10000

	)

1516 
	#OEX_SMM
 0x20000

	)

1517 
	#OEX_FPDBUG
 0x40000

	)

1518 
	#OEX_PRECISEFP
 
OEX_FPDBUG


	)

1519 
	#OEX_DISMISS
 0x80000

	)

1521 
	#OEX_FPU_INVAL
 0x10

	)

1522 
	#OEX_FPU_DIV0
 0x08

	)

1523 
	#OEX_FPU_OFLO
 0x04

	)

1524 
	#OEX_FPU_UFLO
 0x02

	)

1525 
	#OEX_FPU_INEX
 0x01

	)

1529 
	#OHW_R4KEOP
 0x1

	)

1530 
	#OHW_R8KPFETCH
 0x2

	)

1531 
	#OHW_R5KEOP
 0x4

	)

1532 
	#OHW_R5KCVTL
 0x8

	)

1534 
	#OPAD_PREFIX
 0x1

	)

1535 
	#OPAD_POSTFIX
 0x2

	)

1536 
	#OPAD_SYMBOL
 0x4

	)

1542 
Elf32_W‹d
 
	mhwp_Êags1
;

1543 
Elf32_W‹d
 
	mhwp_Êags2
;

1544 } 
	tElf_O±i⁄s_Hw
;

1548 
	#OHWA0_R4KEOP_CHECKED
 0x00000001

	)

1549 
	#OHWA1_R4KEOP_CLEAN
 0x00000002

	)

1553 
	#R_MIPS_NONE
 0

	)

1554 
	#R_MIPS_16
 1

	)

1555 
	#R_MIPS_32
 2

	)

1556 
	#R_MIPS_REL32
 3

	)

1557 
	#R_MIPS_26
 4

	)

1558 
	#R_MIPS_HI16
 5

	)

1559 
	#R_MIPS_LO16
 6

	)

1560 
	#R_MIPS_GPREL16
 7

	)

1561 
	#R_MIPS_LITERAL
 8

	)

1562 
	#R_MIPS_GOT16
 9

	)

1563 
	#R_MIPS_PC16
 10

	)

1564 
	#R_MIPS_CALL16
 11

	)

1565 
	#R_MIPS_GPREL32
 12

	)

1567 
	#R_MIPS_SHIFT5
 16

	)

1568 
	#R_MIPS_SHIFT6
 17

	)

1569 
	#R_MIPS_64
 18

	)

1570 
	#R_MIPS_GOT_DISP
 19

	)

1571 
	#R_MIPS_GOT_PAGE
 20

	)

1572 
	#R_MIPS_GOT_OFST
 21

	)

1573 
	#R_MIPS_GOT_HI16
 22

	)

1574 
	#R_MIPS_GOT_LO16
 23

	)

1575 
	#R_MIPS_SUB
 24

	)

1576 
	#R_MIPS_INSERT_A
 25

	)

1577 
	#R_MIPS_INSERT_B
 26

	)

1578 
	#R_MIPS_DELETE
 27

	)

1579 
	#R_MIPS_HIGHER
 28

	)

1580 
	#R_MIPS_HIGHEST
 29

	)

1581 
	#R_MIPS_CALL_HI16
 30

	)

1582 
	#R_MIPS_CALL_LO16
 31

	)

1583 
	#R_MIPS_SCN_DISP
 32

	)

1584 
	#R_MIPS_REL16
 33

	)

1585 
	#R_MIPS_ADD_IMMEDIATE
 34

	)

1586 
	#R_MIPS_PJUMP
 35

	)

1587 
	#R_MIPS_RELGOT
 36

	)

1588 
	#R_MIPS_JALR
 37

	)

1589 
	#R_MIPS_TLS_DTPMOD32
 38

	)

1590 
	#R_MIPS_TLS_DTPREL32
 39

	)

1591 
	#R_MIPS_TLS_DTPMOD64
 40

	)

1592 
	#R_MIPS_TLS_DTPREL64
 41

	)

1593 
	#R_MIPS_TLS_GD
 42

	)

1594 
	#R_MIPS_TLS_LDM
 43

	)

1595 
	#R_MIPS_TLS_DTPREL_HI16
 44

	)

1596 
	#R_MIPS_TLS_DTPREL_LO16
 45

	)

1597 
	#R_MIPS_TLS_GOTTPREL
 46

	)

1598 
	#R_MIPS_TLS_TPREL32
 47

	)

1599 
	#R_MIPS_TLS_TPREL64
 48

	)

1600 
	#R_MIPS_TLS_TPREL_HI16
 49

	)

1601 
	#R_MIPS_TLS_TPREL_LO16
 50

	)

1602 
	#R_MIPS_GLOB_DAT
 51

	)

1603 
	#R_MIPS_COPY
 126

	)

1604 
	#R_MIPS_JUMP_SLOT
 127

	)

1606 
	#R_MIPS_NUM
 128

	)

1610 
	#PT_MIPS_REGINFO
 0x70000000

	)

1611 
	#PT_MIPS_RTPROC
 0x70000001

	)

1612 
	#PT_MIPS_OPTIONS
 0x70000002

	)

1616 
	#PF_MIPS_LOCAL
 0x10000000

	)

1620 
	#DT_MIPS_RLD_VERSION
 0x70000001

	)

1621 
	#DT_MIPS_TIME_STAMP
 0x70000002

	)

1622 
	#DT_MIPS_ICHECKSUM
 0x70000003

	)

1623 
	#DT_MIPS_IVERSION
 0x70000004

	)

1624 
	#DT_MIPS_FLAGS
 0x70000005

	)

1625 
	#DT_MIPS_BASE_ADDRESS
 0x70000006

	)

1626 
	#DT_MIPS_MSYM
 0x70000007

	)

1627 
	#DT_MIPS_CONFLICT
 0x70000008

	)

1628 
	#DT_MIPS_LIBLIST
 0x70000009

	)

1629 
	#DT_MIPS_LOCAL_GOTNO
 0x7000000®

	)

1630 
	#DT_MIPS_CONFLICTNO
 0x7000000b

	)

1631 
	#DT_MIPS_LIBLISTNO
 0x70000010

	)

1632 
	#DT_MIPS_SYMTABNO
 0x70000011

	)

1633 
	#DT_MIPS_UNREFEXTNO
 0x70000012

	)

1634 
	#DT_MIPS_GOTSYM
 0x70000013

	)

1635 
	#DT_MIPS_HIPAGENO
 0x70000014

	)

1636 
	#DT_MIPS_RLD_MAP
 0x70000016

	)

1637 
	#DT_MIPS_DELTA_CLASS
 0x70000017

	)

1638 
	#DT_MIPS_DELTA_CLASS_NO
 0x70000018

	)

1640 
	#DT_MIPS_DELTA_INSTANCE
 0x70000019

	)

1641 
	#DT_MIPS_DELTA_INSTANCE_NO
 0x7000001®

	)

1643 
	#DT_MIPS_DELTA_RELOC
 0x7000001b

	)

1644 
	#DT_MIPS_DELTA_RELOC_NO
 0x7000001¯

	)

1646 
	#DT_MIPS_DELTA_SYM
 0x7000001d

	)

1648 
	#DT_MIPS_DELTA_SYM_NO
 0x7000001ê

	)

1650 
	#DT_MIPS_DELTA_CLASSSYM
 0x70000020

	)

1652 
	#DT_MIPS_DELTA_CLASSSYM_NO
 0x70000021

	)

1654 
	#DT_MIPS_CXX_FLAGS
 0x70000022

	)

1655 
	#DT_MIPS_PIXIE_INIT
 0x70000023

	)

1656 
	#DT_MIPS_SYMBOL_LIB
 0x70000024

	)

1657 
	#DT_MIPS_LOCALPAGE_GOTIDX
 0x70000025

	)

1658 
	#DT_MIPS_LOCAL_GOTIDX
 0x70000026

	)

1659 
	#DT_MIPS_HIDDEN_GOTIDX
 0x70000027

	)

1660 
	#DT_MIPS_PROTECTED_GOTIDX
 0x70000028

	)

1661 
	#DT_MIPS_OPTIONS
 0x70000029

	)

1662 
	#DT_MIPS_INTERFACE
 0x7000002®

	)

1663 
	#DT_MIPS_DYNSTR_ALIGN
 0x7000002b

	)

1664 
	#DT_MIPS_INTERFACE_SIZE
 0x7000002¯

	)

1665 
	#DT_MIPS_RLD_TEXT_RESOLVE_ADDR
 0x7000002d

	)

1667 
	#DT_MIPS_PERF_SUFFIX
 0x7000002ê

	)

1669 
	#DT_MIPS_COMPACT_SIZE
 0x7000002‡

	)

1670 
	#DT_MIPS_GP_VALUE
 0x70000030

	)

1671 
	#DT_MIPS_AUX_DYNAMIC
 0x70000031

	)

1673 
	#DT_MIPS_PLTGOT
 0x70000032

	)

1677 
	#DT_MIPS_RWPLT
 0x70000034

	)

1678 
	#DT_MIPS_NUM
 0x35

	)

1682 
	#RHF_NONE
 0

	)

1683 
	#RHF_QUICKSTART
 (1 << 0Ë

	)

1684 
	#RHF_NOTPOT
 (1 << 1Ë

	)

1685 
	#RHF_NO_LIBRARY_REPLACEMENT
 (1 << 2Ë

	)

1686 
	#RHF_NO_MOVE
 (1 << 3)

	)

1687 
	#RHF_SGI_ONLY
 (1 << 4)

	)

1688 
	#RHF_GUARANTEE_INIT
 (1 << 5)

	)

1689 
	#RHF_DELTA_C_PLUS_PLUS
 (1 << 6)

	)

1690 
	#RHF_GUARANTEE_START_INIT
 (1 << 7)

	)

1691 
	#RHF_PIXIE
 (1 << 8)

	)

1692 
	#RHF_DEFAULT_DELAY_LOAD
 (1 << 9)

	)

1693 
	#RHF_REQUICKSTART
 (1 << 10)

	)

1694 
	#RHF_REQUICKSTARTED
 (1 << 11)

	)

1695 
	#RHF_CORD
 (1 << 12)

	)

1696 
	#RHF_NO_UNRES_UNDEF
 (1 << 13)

	)

1697 
	#RHF_RLD_ORDER_SAFE
 (1 << 14)

	)

1703 
Elf32_W‹d
 
	ml_«me
;

1704 
Elf32_W‹d
 
	ml_time_°amp
;

1705 
Elf32_W‹d
 
	ml_checksum
;

1706 
Elf32_W‹d
 
	ml_vîsi⁄
;

1707 
Elf32_W‹d
 
	ml_Êags
;

1708 } 
	tElf32_Lib
;

1712 
Elf64_W‹d
 
	ml_«me
;

1713 
Elf64_W‹d
 
	ml_time_°amp
;

1714 
Elf64_W‹d
 
	ml_checksum
;

1715 
Elf64_W‹d
 
	ml_vîsi⁄
;

1716 
Elf64_W‹d
 
	ml_Êags
;

1717 } 
	tElf64_Lib
;

1722 
	#LL_NONE
 0

	)

1723 
	#LL_EXACT_MATCH
 (1 << 0Ë

	)

1724 
	#LL_IGNORE_INT_VER
 (1 << 1Ë

	)

1725 
	#LL_REQUIRE_MINOR
 (1 << 2)

	)

1726 
	#LL_EXPORTS
 (1 << 3)

	)

1727 
	#LL_DELAY_LOAD
 (1 << 4)

	)

1728 
	#LL_DELTA
 (1 << 5)

	)

1732 
Elf32_Addr
 
	tElf32_C⁄Êi˘
;

1739 
	#EF_PARISC_TRAPNIL
 0x00010000

	)

1740 
	#EF_PARISC_EXT
 0x00020000

	)

1741 
	#EF_PARISC_LSB
 0x00040000

	)

1742 
	#EF_PARISC_WIDE
 0x00080000

	)

1743 
	#EF_PARISC_NO_KABP
 0x00100000

	)

1745 
	#EF_PARISC_LAZYSWAP
 0x00400000

	)

1746 
	#EF_PARISC_ARCH
 0x0000fff‡

	)

1750 
	#EFA_PARISC_1_0
 0x020b

	)

1751 
	#EFA_PARISC_1_1
 0x0210

	)

1752 
	#EFA_PARISC_2_0
 0x0214

	)

1756 
	#SHN_PARISC_ANSI_COMMON
 0xff00

	)

1758 
	#SHN_PARISC_HUGE_COMMON
 0xff01

	)

1762 
	#SHT_PARISC_EXT
 0x70000000

	)

1763 
	#SHT_PARISC_UNWIND
 0x70000001

	)

1764 
	#SHT_PARISC_DOC
 0x70000002

	)

1768 
	#SHF_PARISC_SHORT
 0x20000000

	)

1769 
	#SHF_PARISC_HUGE
 0x40000000

	)

1770 
	#SHF_PARISC_SBP
 0x80000000

	)

1774 
	#STT_PARISC_MILLICODE
 13

	)

1776 
	#STT_HP_OPAQUE
 (
STT_LOOS
 + 0x1)

	)

1777 
	#STT_HP_STUB
 (
STT_LOOS
 + 0x2)

	)

1781 
	#R_PARISC_NONE
 0

	)

1782 
	#R_PARISC_DIR32
 1

	)

1783 
	#R_PARISC_DIR21L
 2

	)

1784 
	#R_PARISC_DIR17R
 3

	)

1785 
	#R_PARISC_DIR17F
 4

	)

1786 
	#R_PARISC_DIR14R
 6

	)

1787 
	#R_PARISC_PCREL32
 9

	)

1788 
	#R_PARISC_PCREL21L
 10

	)

1789 
	#R_PARISC_PCREL17R
 11

	)

1790 
	#R_PARISC_PCREL17F
 12

	)

1791 
	#R_PARISC_PCREL14R
 14

	)

1792 
	#R_PARISC_DPREL21L
 18

	)

1793 
	#R_PARISC_DPREL14R
 22

	)

1794 
	#R_PARISC_GPREL21L
 26

	)

1795 
	#R_PARISC_GPREL14R
 30

	)

1796 
	#R_PARISC_LTOFF21L
 34

	)

1797 
	#R_PARISC_LTOFF14R
 38

	)

1798 
	#R_PARISC_SECREL32
 41

	)

1799 
	#R_PARISC_SEGBASE
 48

	)

1800 
	#R_PARISC_SEGREL32
 49

	)

1801 
	#R_PARISC_PLTOFF21L
 50

	)

1802 
	#R_PARISC_PLTOFF14R
 54

	)

1803 
	#R_PARISC_LTOFF_FPTR32
 57

	)

1804 
	#R_PARISC_LTOFF_FPTR21L
 58

	)

1805 
	#R_PARISC_LTOFF_FPTR14R
 62

	)

1806 
	#R_PARISC_FPTR64
 64

	)

1807 
	#R_PARISC_PLABEL32
 65

	)

1808 
	#R_PARISC_PLABEL21L
 66

	)

1809 
	#R_PARISC_PLABEL14R
 70

	)

1810 
	#R_PARISC_PCREL64
 72

	)

1811 
	#R_PARISC_PCREL22F
 74

	)

1812 
	#R_PARISC_PCREL14WR
 75

	)

1813 
	#R_PARISC_PCREL14DR
 76

	)

1814 
	#R_PARISC_PCREL16F
 77

	)

1815 
	#R_PARISC_PCREL16WF
 78

	)

1816 
	#R_PARISC_PCREL16DF
 79

	)

1817 
	#R_PARISC_DIR64
 80

	)

1818 
	#R_PARISC_DIR14WR
 83

	)

1819 
	#R_PARISC_DIR14DR
 84

	)

1820 
	#R_PARISC_DIR16F
 85

	)

1821 
	#R_PARISC_DIR16WF
 86

	)

1822 
	#R_PARISC_DIR16DF
 87

	)

1823 
	#R_PARISC_GPREL64
 88

	)

1824 
	#R_PARISC_GPREL14WR
 91

	)

1825 
	#R_PARISC_GPREL14DR
 92

	)

1826 
	#R_PARISC_GPREL16F
 93

	)

1827 
	#R_PARISC_GPREL16WF
 94

	)

1828 
	#R_PARISC_GPREL16DF
 95

	)

1829 
	#R_PARISC_LTOFF64
 96

	)

1830 
	#R_PARISC_LTOFF14WR
 99

	)

1831 
	#R_PARISC_LTOFF14DR
 100

	)

1832 
	#R_PARISC_LTOFF16F
 101

	)

1833 
	#R_PARISC_LTOFF16WF
 102

	)

1834 
	#R_PARISC_LTOFF16DF
 103

	)

1835 
	#R_PARISC_SECREL64
 104

	)

1836 
	#R_PARISC_SEGREL64
 112

	)

1837 
	#R_PARISC_PLTOFF14WR
 115

	)

1838 
	#R_PARISC_PLTOFF14DR
 116

	)

1839 
	#R_PARISC_PLTOFF16F
 117

	)

1840 
	#R_PARISC_PLTOFF16WF
 118

	)

1841 
	#R_PARISC_PLTOFF16DF
 119

	)

1842 
	#R_PARISC_LTOFF_FPTR64
 120

	)

1843 
	#R_PARISC_LTOFF_FPTR14WR
 123

	)

1844 
	#R_PARISC_LTOFF_FPTR14DR
 124

	)

1845 
	#R_PARISC_LTOFF_FPTR16F
 125

	)

1846 
	#R_PARISC_LTOFF_FPTR16WF
 126

	)

1847 
	#R_PARISC_LTOFF_FPTR16DF
 127

	)

1848 
	#R_PARISC_LORESERVE
 128

	)

1849 
	#R_PARISC_COPY
 128

	)

1850 
	#R_PARISC_IPLT
 129

	)

1851 
	#R_PARISC_EPLT
 130

	)

1852 
	#R_PARISC_TPREL32
 153

	)

1853 
	#R_PARISC_TPREL21L
 154

	)

1854 
	#R_PARISC_TPREL14R
 158

	)

1855 
	#R_PARISC_LTOFF_TP21L
 162

	)

1856 
	#R_PARISC_LTOFF_TP14R
 166

	)

1857 
	#R_PARISC_LTOFF_TP14F
 167

	)

1858 
	#R_PARISC_TPREL64
 216

	)

1859 
	#R_PARISC_TPREL14WR
 219

	)

1860 
	#R_PARISC_TPREL14DR
 220

	)

1861 
	#R_PARISC_TPREL16F
 221

	)

1862 
	#R_PARISC_TPREL16WF
 222

	)

1863 
	#R_PARISC_TPREL16DF
 223

	)

1864 
	#R_PARISC_LTOFF_TP64
 224

	)

1865 
	#R_PARISC_LTOFF_TP14WR
 227

	)

1866 
	#R_PARISC_LTOFF_TP14DR
 228

	)

1867 
	#R_PARISC_LTOFF_TP16F
 229

	)

1868 
	#R_PARISC_LTOFF_TP16WF
 230

	)

1869 
	#R_PARISC_LTOFF_TP16DF
 231

	)

1870 
	#R_PARISC_GNU_VTENTRY
 232

	)

1871 
	#R_PARISC_GNU_VTINHERIT
 233

	)

1872 
	#R_PARISC_TLS_GD21L
 234

	)

1873 
	#R_PARISC_TLS_GD14R
 235

	)

1874 
	#R_PARISC_TLS_GDCALL
 236

	)

1875 
	#R_PARISC_TLS_LDM21L
 237

	)

1876 
	#R_PARISC_TLS_LDM14R
 238

	)

1877 
	#R_PARISC_TLS_LDMCALL
 239

	)

1878 
	#R_PARISC_TLS_LDO21L
 240

	)

1879 
	#R_PARISC_TLS_LDO14R
 241

	)

1880 
	#R_PARISC_TLS_DTPMOD32
 242

	)

1881 
	#R_PARISC_TLS_DTPMOD64
 243

	)

1882 
	#R_PARISC_TLS_DTPOFF32
 244

	)

1883 
	#R_PARISC_TLS_DTPOFF64
 245

	)

1884 
	#R_PARISC_TLS_LE21L
 
R_PARISC_TPREL21L


	)

1885 
	#R_PARISC_TLS_LE14R
 
R_PARISC_TPREL14R


	)

1886 
	#R_PARISC_TLS_IE21L
 
R_PARISC_LTOFF_TP21L


	)

1887 
	#R_PARISC_TLS_IE14R
 
R_PARISC_LTOFF_TP14R


	)

1888 
	#R_PARISC_TLS_TPREL32
 
R_PARISC_TPREL32


	)

1889 
	#R_PARISC_TLS_TPREL64
 
R_PARISC_TPREL64


	)

1890 
	#R_PARISC_HIRESERVE
 255

	)

1894 
	#PT_HP_TLS
 (
PT_LOOS
 + 0x0)

	)

1895 
	#PT_HP_CORE_NONE
 (
PT_LOOS
 + 0x1)

	)

1896 
	#PT_HP_CORE_VERSION
 (
PT_LOOS
 + 0x2)

	)

1897 
	#PT_HP_CORE_KERNEL
 (
PT_LOOS
 + 0x3)

	)

1898 
	#PT_HP_CORE_COMM
 (
PT_LOOS
 + 0x4)

	)

1899 
	#PT_HP_CORE_PROC
 (
PT_LOOS
 + 0x5)

	)

1900 
	#PT_HP_CORE_LOADABLE
 (
PT_LOOS
 + 0x6)

	)

1901 
	#PT_HP_CORE_STACK
 (
PT_LOOS
 + 0x7)

	)

1902 
	#PT_HP_CORE_SHM
 (
PT_LOOS
 + 0x8)

	)

1903 
	#PT_HP_CORE_MMF
 (
PT_LOOS
 + 0x9)

	)

1904 
	#PT_HP_PARALLEL
 (
PT_LOOS
 + 0x10)

	)

1905 
	#PT_HP_FASTBIND
 (
PT_LOOS
 + 0x11)

	)

1906 
	#PT_HP_OPT_ANNOT
 (
PT_LOOS
 + 0x12)

	)

1907 
	#PT_HP_HSL_ANNOT
 (
PT_LOOS
 + 0x13)

	)

1908 
	#PT_HP_STACK
 (
PT_LOOS
 + 0x14)

	)

1910 
	#PT_PARISC_ARCHEXT
 0x70000000

	)

1911 
	#PT_PARISC_UNWIND
 0x70000001

	)

1915 
	#PF_PARISC_SBP
 0x08000000

	)

1917 
	#PF_HP_PAGE_SIZE
 0x00100000

	)

1918 
	#PF_HP_FAR_SHARED
 0x00200000

	)

1919 
	#PF_HP_NEAR_SHARED
 0x00400000

	)

1920 
	#PF_HP_CODE
 0x01000000

	)

1921 
	#PF_HP_MODIFY
 0x02000000

	)

1922 
	#PF_HP_LAZYSWAP
 0x04000000

	)

1923 
	#PF_HP_SBP
 0x08000000

	)

1930 
	#EF_ALPHA_32BIT
 1

	)

1931 
	#EF_ALPHA_CANRELAX
 2

	)

1936 
	#SHT_ALPHA_DEBUG
 0x70000001

	)

1937 
	#SHT_ALPHA_REGINFO
 0x70000002

	)

1941 
	#SHF_ALPHA_GPREL
 0x10000000

	)

1944 
	#STO_ALPHA_NOPV
 0x80

	)

1945 
	#STO_ALPHA_STD_GPLOAD
 0x88

	)

1949 
	#R_ALPHA_NONE
 0

	)

1950 
	#R_ALPHA_REFLONG
 1

	)

1951 
	#R_ALPHA_REFQUAD
 2

	)

1952 
	#R_ALPHA_GPREL32
 3

	)

1953 
	#R_ALPHA_LITERAL
 4

	)

1954 
	#R_ALPHA_LITUSE
 5

	)

1955 
	#R_ALPHA_GPDISP
 6

	)

1956 
	#R_ALPHA_BRADDR
 7

	)

1957 
	#R_ALPHA_HINT
 8

	)

1958 
	#R_ALPHA_SREL16
 9

	)

1959 
	#R_ALPHA_SREL32
 10

	)

1960 
	#R_ALPHA_SREL64
 11

	)

1961 
	#R_ALPHA_GPRELHIGH
 17

	)

1962 
	#R_ALPHA_GPRELLOW
 18

	)

1963 
	#R_ALPHA_GPREL16
 19

	)

1964 
	#R_ALPHA_COPY
 24

	)

1965 
	#R_ALPHA_GLOB_DAT
 25

	)

1966 
	#R_ALPHA_JMP_SLOT
 26

	)

1967 
	#R_ALPHA_RELATIVE
 27

	)

1968 
	#R_ALPHA_TLS_GD_HI
 28

	)

1969 
	#R_ALPHA_TLSGD
 29

	)

1970 
	#R_ALPHA_TLS_LDM
 30

	)

1971 
	#R_ALPHA_DTPMOD64
 31

	)

1972 
	#R_ALPHA_GOTDTPREL
 32

	)

1973 
	#R_ALPHA_DTPREL64
 33

	)

1974 
	#R_ALPHA_DTPRELHI
 34

	)

1975 
	#R_ALPHA_DTPRELLO
 35

	)

1976 
	#R_ALPHA_DTPREL16
 36

	)

1977 
	#R_ALPHA_GOTTPREL
 37

	)

1978 
	#R_ALPHA_TPREL64
 38

	)

1979 
	#R_ALPHA_TPRELHI
 39

	)

1980 
	#R_ALPHA_TPRELLO
 40

	)

1981 
	#R_ALPHA_TPREL16
 41

	)

1983 
	#R_ALPHA_NUM
 46

	)

1986 
	#LITUSE_ALPHA_ADDR
 0

	)

1987 
	#LITUSE_ALPHA_BASE
 1

	)

1988 
	#LITUSE_ALPHA_BYTOFF
 2

	)

1989 
	#LITUSE_ALPHA_JSR
 3

	)

1990 
	#LITUSE_ALPHA_TLS_GD
 4

	)

1991 
	#LITUSE_ALPHA_TLS_LDM
 5

	)

1994 
	#DT_ALPHA_PLTRO
 (
DT_LOPROC
 + 0)

	)

1995 
	#DT_ALPHA_NUM
 1

	)

2000 
	#EF_PPC_EMB
 0x80000000

	)

2003 
	#EF_PPC_RELOCATABLE
 0x00010000

	)

2004 
	#EF_PPC_RELOCATABLE_LIB
 0x00008000

	)

2008 
	#R_PPC_NONE
 0

	)

2009 
	#R_PPC_ADDR32
 1

	)

2010 
	#R_PPC_ADDR24
 2

	)

2011 
	#R_PPC_ADDR16
 3

	)

2012 
	#R_PPC_ADDR16_LO
 4

	)

2013 
	#R_PPC_ADDR16_HI
 5

	)

2014 
	#R_PPC_ADDR16_HA
 6

	)

2015 
	#R_PPC_ADDR14
 7

	)

2016 
	#R_PPC_ADDR14_BRTAKEN
 8

	)

2017 
	#R_PPC_ADDR14_BRNTAKEN
 9

	)

2018 
	#R_PPC_REL24
 10

	)

2019 
	#R_PPC_REL14
 11

	)

2020 
	#R_PPC_REL14_BRTAKEN
 12

	)

2021 
	#R_PPC_REL14_BRNTAKEN
 13

	)

2022 
	#R_PPC_GOT16
 14

	)

2023 
	#R_PPC_GOT16_LO
 15

	)

2024 
	#R_PPC_GOT16_HI
 16

	)

2025 
	#R_PPC_GOT16_HA
 17

	)

2026 
	#R_PPC_PLTREL24
 18

	)

2027 
	#R_PPC_COPY
 19

	)

2028 
	#R_PPC_GLOB_DAT
 20

	)

2029 
	#R_PPC_JMP_SLOT
 21

	)

2030 
	#R_PPC_RELATIVE
 22

	)

2031 
	#R_PPC_LOCAL24PC
 23

	)

2032 
	#R_PPC_UADDR32
 24

	)

2033 
	#R_PPC_UADDR16
 25

	)

2034 
	#R_PPC_REL32
 26

	)

2035 
	#R_PPC_PLT32
 27

	)

2036 
	#R_PPC_PLTREL32
 28

	)

2037 
	#R_PPC_PLT16_LO
 29

	)

2038 
	#R_PPC_PLT16_HI
 30

	)

2039 
	#R_PPC_PLT16_HA
 31

	)

2040 
	#R_PPC_SDAREL16
 32

	)

2041 
	#R_PPC_SECTOFF
 33

	)

2042 
	#R_PPC_SECTOFF_LO
 34

	)

2043 
	#R_PPC_SECTOFF_HI
 35

	)

2044 
	#R_PPC_SECTOFF_HA
 36

	)

2047 
	#R_PPC_TLS
 67

	)

2048 
	#R_PPC_DTPMOD32
 68

	)

2049 
	#R_PPC_TPREL16
 69

	)

2050 
	#R_PPC_TPREL16_LO
 70

	)

2051 
	#R_PPC_TPREL16_HI
 71

	)

2052 
	#R_PPC_TPREL16_HA
 72

	)

2053 
	#R_PPC_TPREL32
 73

	)

2054 
	#R_PPC_DTPREL16
 74

	)

2055 
	#R_PPC_DTPREL16_LO
 75

	)

2056 
	#R_PPC_DTPREL16_HI
 76

	)

2057 
	#R_PPC_DTPREL16_HA
 77

	)

2058 
	#R_PPC_DTPREL32
 78

	)

2059 
	#R_PPC_GOT_TLSGD16
 79

	)

2060 
	#R_PPC_GOT_TLSGD16_LO
 80

	)

2061 
	#R_PPC_GOT_TLSGD16_HI
 81

	)

2062 
	#R_PPC_GOT_TLSGD16_HA
 82

	)

2063 
	#R_PPC_GOT_TLSLD16
 83

	)

2064 
	#R_PPC_GOT_TLSLD16_LO
 84

	)

2065 
	#R_PPC_GOT_TLSLD16_HI
 85

	)

2066 
	#R_PPC_GOT_TLSLD16_HA
 86

	)

2067 
	#R_PPC_GOT_TPREL16
 87

	)

2068 
	#R_PPC_GOT_TPREL16_LO
 88

	)

2069 
	#R_PPC_GOT_TPREL16_HI
 89

	)

2070 
	#R_PPC_GOT_TPREL16_HA
 90

	)

2071 
	#R_PPC_GOT_DTPREL16
 91

	)

2072 
	#R_PPC_GOT_DTPREL16_LO
 92

	)

2073 
	#R_PPC_GOT_DTPREL16_HI
 93

	)

2074 
	#R_PPC_GOT_DTPREL16_HA
 94

	)

2078 
	#R_PPC_EMB_NADDR32
 101

	)

2079 
	#R_PPC_EMB_NADDR16
 102

	)

2080 
	#R_PPC_EMB_NADDR16_LO
 103

	)

2081 
	#R_PPC_EMB_NADDR16_HI
 104

	)

2082 
	#R_PPC_EMB_NADDR16_HA
 105

	)

2083 
	#R_PPC_EMB_SDAI16
 106

	)

2084 
	#R_PPC_EMB_SDA2I16
 107

	)

2085 
	#R_PPC_EMB_SDA2REL
 108

	)

2086 
	#R_PPC_EMB_SDA21
 109

	)

2087 
	#R_PPC_EMB_MRKREF
 110

	)

2088 
	#R_PPC_EMB_RELSEC16
 111

	)

2089 
	#R_PPC_EMB_RELST_LO
 112

	)

2090 
	#R_PPC_EMB_RELST_HI
 113

	)

2091 
	#R_PPC_EMB_RELST_HA
 114

	)

2092 
	#R_PPC_EMB_BIT_FLD
 115

	)

2093 
	#R_PPC_EMB_RELSDA
 116

	)

2096 
	#R_PPC_DIAB_SDA21_LO
 180

	)

2097 
	#R_PPC_DIAB_SDA21_HI
 181

	)

2098 
	#R_PPC_DIAB_SDA21_HA
 182

	)

2099 
	#R_PPC_DIAB_RELSDA_LO
 183

	)

2100 
	#R_PPC_DIAB_RELSDA_HI
 184

	)

2101 
	#R_PPC_DIAB_RELSDA_HA
 185

	)

2104 
	#R_PPC_IRELATIVE
 248

	)

2107 
	#R_PPC_REL16
 249

	)

2108 
	#R_PPC_REL16_LO
 250

	)

2109 
	#R_PPC_REL16_HI
 251

	)

2110 
	#R_PPC_REL16_HA
 252

	)

2114 
	#R_PPC_TOC16
 255

	)

2117 
	#DT_PPC_GOT
 (
DT_LOPROC
 + 0)

	)

2118 
	#DT_PPC_NUM
 1

	)

2121 
	#R_PPC64_NONE
 
R_PPC_NONE


	)

2122 
	#R_PPC64_ADDR32
 
R_PPC_ADDR32


	)

2123 
	#R_PPC64_ADDR24
 
R_PPC_ADDR24


	)

2124 
	#R_PPC64_ADDR16
 
R_PPC_ADDR16


	)

2125 
	#R_PPC64_ADDR16_LO
 
R_PPC_ADDR16_LO


	)

2126 
	#R_PPC64_ADDR16_HI
 
R_PPC_ADDR16_HI


	)

2127 
	#R_PPC64_ADDR16_HA
 
R_PPC_ADDR16_HA


	)

2128 
	#R_PPC64_ADDR14
 
R_PPC_ADDR14


	)

2129 
	#R_PPC64_ADDR14_BRTAKEN
 
R_PPC_ADDR14_BRTAKEN


	)

2130 
	#R_PPC64_ADDR14_BRNTAKEN
 
R_PPC_ADDR14_BRNTAKEN


	)

2131 
	#R_PPC64_REL24
 
R_PPC_REL24


	)

2132 
	#R_PPC64_REL14
 
R_PPC_REL14


	)

2133 
	#R_PPC64_REL14_BRTAKEN
 
R_PPC_REL14_BRTAKEN


	)

2134 
	#R_PPC64_REL14_BRNTAKEN
 
R_PPC_REL14_BRNTAKEN


	)

2135 
	#R_PPC64_GOT16
 
R_PPC_GOT16


	)

2136 
	#R_PPC64_GOT16_LO
 
R_PPC_GOT16_LO


	)

2137 
	#R_PPC64_GOT16_HI
 
R_PPC_GOT16_HI


	)

2138 
	#R_PPC64_GOT16_HA
 
R_PPC_GOT16_HA


	)

2140 
	#R_PPC64_COPY
 
R_PPC_COPY


	)

2141 
	#R_PPC64_GLOB_DAT
 
R_PPC_GLOB_DAT


	)

2142 
	#R_PPC64_JMP_SLOT
 
R_PPC_JMP_SLOT


	)

2143 
	#R_PPC64_RELATIVE
 
R_PPC_RELATIVE


	)

2145 
	#R_PPC64_UADDR32
 
R_PPC_UADDR32


	)

2146 
	#R_PPC64_UADDR16
 
R_PPC_UADDR16


	)

2147 
	#R_PPC64_REL32
 
R_PPC_REL32


	)

2148 
	#R_PPC64_PLT32
 
R_PPC_PLT32


	)

2149 
	#R_PPC64_PLTREL32
 
R_PPC_PLTREL32


	)

2150 
	#R_PPC64_PLT16_LO
 
R_PPC_PLT16_LO


	)

2151 
	#R_PPC64_PLT16_HI
 
R_PPC_PLT16_HI


	)

2152 
	#R_PPC64_PLT16_HA
 
R_PPC_PLT16_HA


	)

2154 
	#R_PPC64_SECTOFF
 
R_PPC_SECTOFF


	)

2155 
	#R_PPC64_SECTOFF_LO
 
R_PPC_SECTOFF_LO


	)

2156 
	#R_PPC64_SECTOFF_HI
 
R_PPC_SECTOFF_HI


	)

2157 
	#R_PPC64_SECTOFF_HA
 
R_PPC_SECTOFF_HA


	)

2158 
	#R_PPC64_ADDR30
 37

	)

2159 
	#R_PPC64_ADDR64
 38

	)

2160 
	#R_PPC64_ADDR16_HIGHER
 39

	)

2161 
	#R_PPC64_ADDR16_HIGHERA
 40

	)

2162 
	#R_PPC64_ADDR16_HIGHEST
 41

	)

2163 
	#R_PPC64_ADDR16_HIGHESTA
 42

	)

2164 
	#R_PPC64_UADDR64
 43

	)

2165 
	#R_PPC64_REL64
 44

	)

2166 
	#R_PPC64_PLT64
 45

	)

2167 
	#R_PPC64_PLTREL64
 46

	)

2168 
	#R_PPC64_TOC16
 47

	)

2169 
	#R_PPC64_TOC16_LO
 48

	)

2170 
	#R_PPC64_TOC16_HI
 49

	)

2171 
	#R_PPC64_TOC16_HA
 50

	)

2172 
	#R_PPC64_TOC
 51

	)

2173 
	#R_PPC64_PLTGOT16
 52

	)

2174 
	#R_PPC64_PLTGOT16_LO
 53

	)

2175 
	#R_PPC64_PLTGOT16_HI
 54

	)

2176 
	#R_PPC64_PLTGOT16_HA
 55

	)

2178 
	#R_PPC64_ADDR16_DS
 56

	)

2179 
	#R_PPC64_ADDR16_LO_DS
 57

	)

2180 
	#R_PPC64_GOT16_DS
 58

	)

2181 
	#R_PPC64_GOT16_LO_DS
 59

	)

2182 
	#R_PPC64_PLT16_LO_DS
 60

	)

2183 
	#R_PPC64_SECTOFF_DS
 61

	)

2184 
	#R_PPC64_SECTOFF_LO_DS
 62

	)

2185 
	#R_PPC64_TOC16_DS
 63

	)

2186 
	#R_PPC64_TOC16_LO_DS
 64

	)

2187 
	#R_PPC64_PLTGOT16_DS
 65

	)

2188 
	#R_PPC64_PLTGOT16_LO_DS
 66

	)

2191 
	#R_PPC64_TLS
 67

	)

2192 
	#R_PPC64_DTPMOD64
 68

	)

2193 
	#R_PPC64_TPREL16
 69

	)

2194 
	#R_PPC64_TPREL16_LO
 70

	)

2195 
	#R_PPC64_TPREL16_HI
 71

	)

2196 
	#R_PPC64_TPREL16_HA
 72

	)

2197 
	#R_PPC64_TPREL64
 73

	)

2198 
	#R_PPC64_DTPREL16
 74

	)

2199 
	#R_PPC64_DTPREL16_LO
 75

	)

2200 
	#R_PPC64_DTPREL16_HI
 76

	)

2201 
	#R_PPC64_DTPREL16_HA
 77

	)

2202 
	#R_PPC64_DTPREL64
 78

	)

2203 
	#R_PPC64_GOT_TLSGD16
 79

	)

2204 
	#R_PPC64_GOT_TLSGD16_LO
 80

	)

2205 
	#R_PPC64_GOT_TLSGD16_HI
 81

	)

2206 
	#R_PPC64_GOT_TLSGD16_HA
 82

	)

2207 
	#R_PPC64_GOT_TLSLD16
 83

	)

2208 
	#R_PPC64_GOT_TLSLD16_LO
 84

	)

2209 
	#R_PPC64_GOT_TLSLD16_HI
 85

	)

2210 
	#R_PPC64_GOT_TLSLD16_HA
 86

	)

2211 
	#R_PPC64_GOT_TPREL16_DS
 87

	)

2212 
	#R_PPC64_GOT_TPREL16_LO_DS
 88

	)

2213 
	#R_PPC64_GOT_TPREL16_HI
 89

	)

2214 
	#R_PPC64_GOT_TPREL16_HA
 90

	)

2215 
	#R_PPC64_GOT_DTPREL16_DS
 91

	)

2216 
	#R_PPC64_GOT_DTPREL16_LO_DS
 92

	)

2217 
	#R_PPC64_GOT_DTPREL16_HI
 93

	)

2218 
	#R_PPC64_GOT_DTPREL16_HA
 94

	)

2219 
	#R_PPC64_TPREL16_DS
 95

	)

2220 
	#R_PPC64_TPREL16_LO_DS
 96

	)

2221 
	#R_PPC64_TPREL16_HIGHER
 97

	)

2222 
	#R_PPC64_TPREL16_HIGHERA
 98

	)

2223 
	#R_PPC64_TPREL16_HIGHEST
 99

	)

2224 
	#R_PPC64_TPREL16_HIGHESTA
 100

	)

2225 
	#R_PPC64_DTPREL16_DS
 101

	)

2226 
	#R_PPC64_DTPREL16_LO_DS
 102

	)

2227 
	#R_PPC64_DTPREL16_HIGHER
 103

	)

2228 
	#R_PPC64_DTPREL16_HIGHERA
 104

	)

2229 
	#R_PPC64_DTPREL16_HIGHEST
 105

	)

2230 
	#R_PPC64_DTPREL16_HIGHESTA
 106

	)

2233 
	#R_PPC64_JMP_IREL
 247

	)

2234 
	#R_PPC64_IRELATIVE
 248

	)

2235 
	#R_PPC64_REL16
 249

	)

2236 
	#R_PPC64_REL16_LO
 250

	)

2237 
	#R_PPC64_REL16_HI
 251

	)

2238 
	#R_PPC64_REL16_HA
 252

	)

2241 
	#DT_PPC64_GLINK
 (
DT_LOPROC
 + 0)

	)

2242 
	#DT_PPC64_OPD
 (
DT_LOPROC
 + 1)

	)

2243 
	#DT_PPC64_OPDSZ
 (
DT_LOPROC
 + 2)

	)

2244 
	#DT_PPC64_NUM
 3

	)

2250 
	#EF_ARM_RELEXEC
 0x01

	)

2251 
	#EF_ARM_HASENTRY
 0x02

	)

2252 
	#EF_ARM_INTERWORK
 0x04

	)

2253 
	#EF_ARM_APCS_26
 0x08

	)

2254 
	#EF_ARM_APCS_FLOAT
 0x10

	)

2255 
	#EF_ARM_PIC
 0x20

	)

2256 
	#EF_ARM_ALIGN8
 0x40

	)

2257 
	#EF_ARM_NEW_ABI
 0x80

	)

2258 
	#EF_ARM_OLD_ABI
 0x100

	)

2259 
	#EF_ARM_SOFT_FLOAT
 0x200

	)

2260 
	#EF_ARM_VFP_FLOAT
 0x400

	)

2261 
	#EF_ARM_MAVERICK_FLOAT
 0x800

	)

2266 
	#EF_ARM_SYMSARESORTED
 0x04

	)

2267 
	#EF_ARM_DYNSYMSUSESEGIDX
 0x08

	)

2268 
	#EF_ARM_MAPSYMSFIRST
 0x10

	)

2269 
	#EF_ARM_EABIMASK
 0XFF000000

	)

2272 
	#EF_ARM_BE8
 0x00800000

	)

2273 
	#EF_ARM_LE8
 0x00400000

	)

2275 
	#EF_ARM_EABI_VERSION
(
Êags
Ë((ÊagsË& 
EF_ARM_EABIMASK
)

	)

2276 
	#EF_ARM_EABI_UNKNOWN
 0x00000000

	)

2277 
	#EF_ARM_EABI_VER1
 0x01000000

	)

2278 
	#EF_ARM_EABI_VER2
 0x02000000

	)

2279 
	#EF_ARM_EABI_VER3
 0x03000000

	)

2280 
	#EF_ARM_EABI_VER4
 0x04000000

	)

2281 
	#EF_ARM_EABI_VER5
 0x05000000

	)

2284 
	#STT_ARM_TFUNC
 
STT_LOPROC


	)

2285 
	#STT_ARM_16BIT
 
STT_HIPROC


	)

2288 
	#SHF_ARM_ENTRYSECT
 0x10000000

	)

2289 
	#SHF_ARM_COMDEF
 0x80000000

	)

2293 
	#PF_ARM_SB
 0x10000000

	)

2295 
	#PF_ARM_PI
 0x20000000

	)

2296 
	#PF_ARM_ABS
 0x40000000

	)

2299 
	#PT_ARM_EXIDX
 (
PT_LOPROC
 + 1Ë

	)

2302 
	#SHT_ARM_EXIDX
 (
SHT_LOPROC
 + 1Ë

	)

2303 
	#SHT_ARM_PREEMPTMAP
 (
SHT_LOPROC
 + 2Ë

	)

2304 
	#SHT_ARM_ATTRIBUTES
 (
SHT_LOPROC
 + 3Ë

	)

2309 
	#R_ARM_NONE
 0

	)

2310 
	#R_ARM_PC24
 1

	)

2311 
	#R_ARM_ABS32
 2

	)

2312 
	#R_ARM_REL32
 3

	)

2313 
	#R_ARM_PC13
 4

	)

2314 
	#R_ARM_ABS16
 5

	)

2315 
	#R_ARM_ABS12
 6

	)

2316 
	#R_ARM_THM_ABS5
 7

	)

2317 
	#R_ARM_ABS8
 8

	)

2318 
	#R_ARM_SBREL32
 9

	)

2319 
	#R_ARM_THM_PC22
 10

	)

2320 
	#R_ARM_THM_PC8
 11

	)

2321 
	#R_ARM_AMP_VCALL9
 12

	)

2322 
	#R_ARM_SWI24
 13

	)

2323 
	#R_ARM_THM_SWI8
 14

	)

2324 
	#R_ARM_XPC25
 15

	)

2325 
	#R_ARM_THM_XPC22
 16

	)

2326 
	#R_ARM_TLS_DTPMOD32
 17

	)

2327 
	#R_ARM_TLS_DTPOFF32
 18

	)

2328 
	#R_ARM_TLS_TPOFF32
 19

	)

2329 
	#R_ARM_COPY
 20

	)

2330 
	#R_ARM_GLOB_DAT
 21

	)

2331 
	#R_ARM_JUMP_SLOT
 22

	)

2332 
	#R_ARM_RELATIVE
 23

	)

2333 
	#R_ARM_GOTOFF
 24

	)

2334 
	#R_ARM_GOTPC
 25

	)

2335 
	#R_ARM_GOT32
 26

	)

2336 
	#R_ARM_PLT32
 27

	)

2337 
	#R_ARM_ALU_PCREL_7_0
 32

	)

2338 
	#R_ARM_ALU_PCREL_15_8
 33

	)

2339 
	#R_ARM_ALU_PCREL_23_15
 34

	)

2340 
	#R_ARM_LDR_SBREL_11_0
 35

	)

2341 
	#R_ARM_ALU_SBREL_19_12
 36

	)

2342 
	#R_ARM_ALU_SBREL_27_20
 37

	)

2343 
	#R_ARM_GNU_VTENTRY
 100

	)

2344 
	#R_ARM_GNU_VTINHERIT
 101

	)

2345 
	#R_ARM_THM_PC11
 102

	)

2346 
	#R_ARM_THM_PC9
 103

	)

2347 
	#R_ARM_TLS_GD32
 104

	)

2349 
	#R_ARM_TLS_LDM32
 105

	)

2351 
	#R_ARM_TLS_LDO32
 106

	)

2353 
	#R_ARM_TLS_IE32
 107

	)

2355 
	#R_ARM_TLS_LE32
 108

	)

2357 
	#R_ARM_RXPC25
 249

	)

2358 
	#R_ARM_RSBREL32
 250

	)

2359 
	#R_ARM_THM_RPC22
 251

	)

2360 
	#R_ARM_RREL32
 252

	)

2361 
	#R_ARM_RABS22
 253

	)

2362 
	#R_ARM_RPC24
 254

	)

2363 
	#R_ARM_RBASE
 255

	)

2365 
	#R_ARM_NUM
 256

	)

2370 
	#EF_IA_64_MASKOS
 0x0000000‡

	)

2371 
	#EF_IA_64_ABI64
 0x00000010

	)

2372 
	#EF_IA_64_ARCH
 0xff000000

	)

2375 
	#PT_IA_64_ARCHEXT
 (
PT_LOPROC
 + 0Ë

	)

2376 
	#PT_IA_64_UNWIND
 (
PT_LOPROC
 + 1Ë

	)

2377 
	#PT_IA_64_HP_OPT_ANOT
 (
PT_LOOS
 + 0x12)

	)

2378 
	#PT_IA_64_HP_HSL_ANOT
 (
PT_LOOS
 + 0x13)

	)

2379 
	#PT_IA_64_HP_STACK
 (
PT_LOOS
 + 0x14)

	)

2382 
	#PF_IA_64_NORECOV
 0x80000000

	)

2385 
	#SHT_IA_64_EXT
 (
SHT_LOPROC
 + 0Ë

	)

2386 
	#SHT_IA_64_UNWIND
 (
SHT_LOPROC
 + 1Ë

	)

2389 
	#SHF_IA_64_SHORT
 0x10000000

	)

2390 
	#SHF_IA_64_NORECOV
 0x20000000

	)

2393 
	#DT_IA_64_PLT_RESERVE
 (
DT_LOPROC
 + 0)

	)

2394 
	#DT_IA_64_NUM
 1

	)

2397 
	#R_IA64_NONE
 0x00

	)

2398 
	#R_IA64_IMM14
 0x21

	)

2399 
	#R_IA64_IMM22
 0x22

	)

2400 
	#R_IA64_IMM64
 0x23

	)

2401 
	#R_IA64_DIR32MSB
 0x24

	)

2402 
	#R_IA64_DIR32LSB
 0x25

	)

2403 
	#R_IA64_DIR64MSB
 0x26

	)

2404 
	#R_IA64_DIR64LSB
 0x27

	)

2405 
	#R_IA64_GPREL22
 0x2®

	)

2406 
	#R_IA64_GPREL64I
 0x2b

	)

2407 
	#R_IA64_GPREL32MSB
 0x2¯

	)

2408 
	#R_IA64_GPREL32LSB
 0x2d

	)

2409 
	#R_IA64_GPREL64MSB
 0x2ê

	)

2410 
	#R_IA64_GPREL64LSB
 0x2‡

	)

2411 
	#R_IA64_LTOFF22
 0x32

	)

2412 
	#R_IA64_LTOFF64I
 0x33

	)

2413 
	#R_IA64_PLTOFF22
 0x3®

	)

2414 
	#R_IA64_PLTOFF64I
 0x3b

	)

2415 
	#R_IA64_PLTOFF64MSB
 0x3ê

	)

2416 
	#R_IA64_PLTOFF64LSB
 0x3‡

	)

2417 
	#R_IA64_FPTR64I
 0x43

	)

2418 
	#R_IA64_FPTR32MSB
 0x44

	)

2419 
	#R_IA64_FPTR32LSB
 0x45

	)

2420 
	#R_IA64_FPTR64MSB
 0x46

	)

2421 
	#R_IA64_FPTR64LSB
 0x47

	)

2422 
	#R_IA64_PCREL60B
 0x48

	)

2423 
	#R_IA64_PCREL21B
 0x49

	)

2424 
	#R_IA64_PCREL21M
 0x4®

	)

2425 
	#R_IA64_PCREL21F
 0x4b

	)

2426 
	#R_IA64_PCREL32MSB
 0x4¯

	)

2427 
	#R_IA64_PCREL32LSB
 0x4d

	)

2428 
	#R_IA64_PCREL64MSB
 0x4ê

	)

2429 
	#R_IA64_PCREL64LSB
 0x4‡

	)

2430 
	#R_IA64_LTOFF_FPTR22
 0x52

	)

2431 
	#R_IA64_LTOFF_FPTR64I
 0x53

	)

2432 
	#R_IA64_LTOFF_FPTR32MSB
 0x54

	)

2433 
	#R_IA64_LTOFF_FPTR32LSB
 0x55

	)

2434 
	#R_IA64_LTOFF_FPTR64MSB
 0x56

	)

2435 
	#R_IA64_LTOFF_FPTR64LSB
 0x57

	)

2436 
	#R_IA64_SEGREL32MSB
 0x5¯

	)

2437 
	#R_IA64_SEGREL32LSB
 0x5d

	)

2438 
	#R_IA64_SEGREL64MSB
 0x5ê

	)

2439 
	#R_IA64_SEGREL64LSB
 0x5‡

	)

2440 
	#R_IA64_SECREL32MSB
 0x64

	)

2441 
	#R_IA64_SECREL32LSB
 0x65

	)

2442 
	#R_IA64_SECREL64MSB
 0x66

	)

2443 
	#R_IA64_SECREL64LSB
 0x67

	)

2444 
	#R_IA64_REL32MSB
 0x6¯

	)

2445 
	#R_IA64_REL32LSB
 0x6d

	)

2446 
	#R_IA64_REL64MSB
 0x6ê

	)

2447 
	#R_IA64_REL64LSB
 0x6‡

	)

2448 
	#R_IA64_LTV32MSB
 0x74

	)

2449 
	#R_IA64_LTV32LSB
 0x75

	)

2450 
	#R_IA64_LTV64MSB
 0x76

	)

2451 
	#R_IA64_LTV64LSB
 0x77

	)

2452 
	#R_IA64_PCREL21BI
 0x79

	)

2453 
	#R_IA64_PCREL22
 0x7®

	)

2454 
	#R_IA64_PCREL64I
 0x7b

	)

2455 
	#R_IA64_IPLTMSB
 0x80

	)

2456 
	#R_IA64_IPLTLSB
 0x81

	)

2457 
	#R_IA64_COPY
 0x84

	)

2458 
	#R_IA64_SUB
 0x85

	)

2459 
	#R_IA64_LTOFF22X
 0x86

	)

2460 
	#R_IA64_LDXMOV
 0x87

	)

2461 
	#R_IA64_TPREL14
 0x91

	)

2462 
	#R_IA64_TPREL22
 0x92

	)

2463 
	#R_IA64_TPREL64I
 0x93

	)

2464 
	#R_IA64_TPREL64MSB
 0x96

	)

2465 
	#R_IA64_TPREL64LSB
 0x97

	)

2466 
	#R_IA64_LTOFF_TPREL22
 0x9®

	)

2467 
	#R_IA64_DTPMOD64MSB
 0xa6

	)

2468 
	#R_IA64_DTPMOD64LSB
 0xa7

	)

2469 
	#R_IA64_LTOFF_DTPMOD22
 0xØ

	)

2470 
	#R_IA64_DTPREL14
 0xb1

	)

2471 
	#R_IA64_DTPREL22
 0xb2

	)

2472 
	#R_IA64_DTPREL64I
 0xb3

	)

2473 
	#R_IA64_DTPREL32MSB
 0xb4

	)

2474 
	#R_IA64_DTPREL32LSB
 0xb5

	)

2475 
	#R_IA64_DTPREL64MSB
 0xb6

	)

2476 
	#R_IA64_DTPREL64LSB
 0xb7

	)

2477 
	#R_IA64_LTOFF_DTPREL22
 0xb®

	)

2482 
	#EF_SH_MACH_MASK
 0x1f

	)

2483 
	#EF_SH_UNKNOWN
 0x0

	)

2484 
	#EF_SH1
 0x1

	)

2485 
	#EF_SH2
 0x2

	)

2486 
	#EF_SH3
 0x3

	)

2487 
	#EF_SH_DSP
 0x4

	)

2488 
	#EF_SH3_DSP
 0x5

	)

2489 
	#EF_SH4AL_DSP
 0x6

	)

2490 
	#EF_SH3E
 0x8

	)

2491 
	#EF_SH4
 0x9

	)

2492 
	#EF_SH2E
 0xb

	)

2493 
	#EF_SH4A
 0xc

	)

2494 
	#EF_SH2A
 0xd

	)

2495 
	#EF_SH4_NOFPU
 0x10

	)

2496 
	#EF_SH4A_NOFPU
 0x11

	)

2497 
	#EF_SH4_NOMMU_NOFPU
 0x12

	)

2498 
	#EF_SH2A_NOFPU
 0x13

	)

2499 
	#EF_SH3_NOMMU
 0x14

	)

2500 
	#EF_SH2A_SH4_NOFPU
 0x15

	)

2501 
	#EF_SH2A_SH3_NOFPU
 0x16

	)

2502 
	#EF_SH2A_SH4
 0x17

	)

2503 
	#EF_SH2A_SH3E
 0x18

	)

2506 
	#R_SH_NONE
 0

	)

2507 
	#R_SH_DIR32
 1

	)

2508 
	#R_SH_REL32
 2

	)

2509 
	#R_SH_DIR8WPN
 3

	)

2510 
	#R_SH_IND12W
 4

	)

2511 
	#R_SH_DIR8WPL
 5

	)

2512 
	#R_SH_DIR8WPZ
 6

	)

2513 
	#R_SH_DIR8BP
 7

	)

2514 
	#R_SH_DIR8W
 8

	)

2515 
	#R_SH_DIR8L
 9

	)

2516 
	#R_SH_SWITCH16
 25

	)

2517 
	#R_SH_SWITCH32
 26

	)

2518 
	#R_SH_USES
 27

	)

2519 
	#R_SH_COUNT
 28

	)

2520 
	#R_SH_ALIGN
 29

	)

2521 
	#R_SH_CODE
 30

	)

2522 
	#R_SH_DATA
 31

	)

2523 
	#R_SH_LABEL
 32

	)

2524 
	#R_SH_SWITCH8
 33

	)

2525 
	#R_SH_GNU_VTINHERIT
 34

	)

2526 
	#R_SH_GNU_VTENTRY
 35

	)

2527 
	#R_SH_TLS_GD_32
 144

	)

2528 
	#R_SH_TLS_LD_32
 145

	)

2529 
	#R_SH_TLS_LDO_32
 146

	)

2530 
	#R_SH_TLS_IE_32
 147

	)

2531 
	#R_SH_TLS_LE_32
 148

	)

2532 
	#R_SH_TLS_DTPMOD32
 149

	)

2533 
	#R_SH_TLS_DTPOFF32
 150

	)

2534 
	#R_SH_TLS_TPOFF32
 151

	)

2535 
	#R_SH_GOT32
 160

	)

2536 
	#R_SH_PLT32
 161

	)

2537 
	#R_SH_COPY
 162

	)

2538 
	#R_SH_GLOB_DAT
 163

	)

2539 
	#R_SH_JMP_SLOT
 164

	)

2540 
	#R_SH_RELATIVE
 165

	)

2541 
	#R_SH_GOTOFF
 166

	)

2542 
	#R_SH_GOTPC
 167

	)

2544 
	#R_SH_NUM
 256

	)

2550 
	#EF_S390_HIGH_GPRS
 0x00000001

	)

2554 
	#R_390_NONE
 0

	)

2555 
	#R_390_8
 1

	)

2556 
	#R_390_12
 2

	)

2557 
	#R_390_16
 3

	)

2558 
	#R_390_32
 4

	)

2559 
	#R_390_PC32
 5

	)

2560 
	#R_390_GOT12
 6

	)

2561 
	#R_390_GOT32
 7

	)

2562 
	#R_390_PLT32
 8

	)

2563 
	#R_390_COPY
 9

	)

2564 
	#R_390_GLOB_DAT
 10

	)

2565 
	#R_390_JMP_SLOT
 11

	)

2566 
	#R_390_RELATIVE
 12

	)

2567 
	#R_390_GOTOFF32
 13

	)

2568 
	#R_390_GOTPC
 14

	)

2569 
	#R_390_GOT16
 15

	)

2570 
	#R_390_PC16
 16

	)

2571 
	#R_390_PC16DBL
 17

	)

2572 
	#R_390_PLT16DBL
 18

	)

2573 
	#R_390_PC32DBL
 19

	)

2574 
	#R_390_PLT32DBL
 20

	)

2575 
	#R_390_GOTPCDBL
 21

	)

2576 
	#R_390_64
 22

	)

2577 
	#R_390_PC64
 23

	)

2578 
	#R_390_GOT64
 24

	)

2579 
	#R_390_PLT64
 25

	)

2580 
	#R_390_GOTENT
 26

	)

2581 
	#R_390_GOTOFF16
 27

	)

2582 
	#R_390_GOTOFF64
 28

	)

2583 
	#R_390_GOTPLT12
 29

	)

2584 
	#R_390_GOTPLT16
 30

	)

2585 
	#R_390_GOTPLT32
 31

	)

2586 
	#R_390_GOTPLT64
 32

	)

2587 
	#R_390_GOTPLTENT
 33

	)

2588 
	#R_390_PLTOFF16
 34

	)

2589 
	#R_390_PLTOFF32
 35

	)

2590 
	#R_390_PLTOFF64
 36

	)

2591 
	#R_390_TLS_LOAD
 37

	)

2592 
	#R_390_TLS_GDCALL
 38

	)

2594 
	#R_390_TLS_LDCALL
 39

	)

2596 
	#R_390_TLS_GD32
 40

	)

2598 
	#R_390_TLS_GD64
 41

	)

2600 
	#R_390_TLS_GOTIE12
 42

	)

2602 
	#R_390_TLS_GOTIE32
 43

	)

2604 
	#R_390_TLS_GOTIE64
 44

	)

2606 
	#R_390_TLS_LDM32
 45

	)

2608 
	#R_390_TLS_LDM64
 46

	)

2610 
	#R_390_TLS_IE32
 47

	)

2612 
	#R_390_TLS_IE64
 48

	)

2614 
	#R_390_TLS_IEENT
 49

	)

2616 
	#R_390_TLS_LE32
 50

	)

2618 
	#R_390_TLS_LE64
 51

	)

2620 
	#R_390_TLS_LDO32
 52

	)

2622 
	#R_390_TLS_LDO64
 53

	)

2624 
	#R_390_TLS_DTPMOD
 54

	)

2625 
	#R_390_TLS_DTPOFF
 55

	)

2626 
	#R_390_TLS_TPOFF
 56

	)

2628 
	#R_390_20
 57

	)

2629 
	#R_390_GOT20
 58

	)

2630 
	#R_390_GOTPLT20
 59

	)

2631 
	#R_390_TLS_GOTIE20
 60

	)

2634 
	#R_390_NUM
 61

	)

2638 
	#R_CRIS_NONE
 0

	)

2639 
	#R_CRIS_8
 1

	)

2640 
	#R_CRIS_16
 2

	)

2641 
	#R_CRIS_32
 3

	)

2642 
	#R_CRIS_8_PCREL
 4

	)

2643 
	#R_CRIS_16_PCREL
 5

	)

2644 
	#R_CRIS_32_PCREL
 6

	)

2645 
	#R_CRIS_GNU_VTINHERIT
 7

	)

2646 
	#R_CRIS_GNU_VTENTRY
 8

	)

2647 
	#R_CRIS_COPY
 9

	)

2648 
	#R_CRIS_GLOB_DAT
 10

	)

2649 
	#R_CRIS_JUMP_SLOT
 11

	)

2650 
	#R_CRIS_RELATIVE
 12

	)

2651 
	#R_CRIS_16_GOT
 13

	)

2652 
	#R_CRIS_32_GOT
 14

	)

2653 
	#R_CRIS_16_GOTPLT
 15

	)

2654 
	#R_CRIS_32_GOTPLT
 16

	)

2655 
	#R_CRIS_32_GOTREL
 17

	)

2656 
	#R_CRIS_32_PLT_GOTREL
 18

	)

2657 
	#R_CRIS_32_PLT_PCREL
 19

	)

2659 
	#R_CRIS_NUM
 20

	)

2663 
	#R_X86_64_NONE
 0

	)

2664 
	#R_X86_64_64
 1

	)

2665 
	#R_X86_64_PC32
 2

	)

2666 
	#R_X86_64_GOT32
 3

	)

2667 
	#R_X86_64_PLT32
 4

	)

2668 
	#R_X86_64_COPY
 5

	)

2669 
	#R_X86_64_GLOB_DAT
 6

	)

2670 
	#R_X86_64_JUMP_SLOT
 7

	)

2671 
	#R_X86_64_RELATIVE
 8

	)

2672 
	#R_X86_64_GOTPCREL
 9

	)

2674 
	#R_X86_64_32
 10

	)

2675 
	#R_X86_64_32S
 11

	)

2676 
	#R_X86_64_16
 12

	)

2677 
	#R_X86_64_PC16
 13

	)

2678 
	#R_X86_64_8
 14

	)

2679 
	#R_X86_64_PC8
 15

	)

2680 
	#R_X86_64_DTPMOD64
 16

	)

2681 
	#R_X86_64_DTPOFF64
 17

	)

2682 
	#R_X86_64_TPOFF64
 18

	)

2683 
	#R_X86_64_TLSGD
 19

	)

2685 
	#R_X86_64_TLSLD
 20

	)

2687 
	#R_X86_64_DTPOFF32
 21

	)

2688 
	#R_X86_64_GOTTPOFF
 22

	)

2690 
	#R_X86_64_TPOFF32
 23

	)

2691 
	#R_X86_64_PC64
 24

	)

2692 
	#R_X86_64_GOTOFF64
 25

	)

2693 
	#R_X86_64_GOTPC32
 26

	)

2695 
	#R_X86_64_GOT64
 27

	)

2696 
	#R_X86_64_GOTPCREL64
 28

	)

2698 
	#R_X86_64_GOTPC64
 29

	)

2699 
	#R_X86_64_GOTPLT64
 30

	)

2700 
	#R_X86_64_PLTOFF64
 31

	)

2702 
	#R_X86_64_SIZE32
 32

	)

2703 
	#R_X86_64_SIZE64
 33

	)

2704 
	#R_X86_64_GOTPC32_TLSDESC
 34

	)

2705 
	#R_X86_64_TLSDESC_CALL
 35

	)

2707 
	#R_X86_64_TLSDESC
 36

	)

2708 
	#R_X86_64_IRELATIVE
 37

	)

2710 
	#R_X86_64_NUM
 38

	)

2714 
	#R_MN10300_NONE
 0

	)

2715 
	#R_MN10300_32
 1

	)

2716 
	#R_MN10300_16
 2

	)

2717 
	#R_MN10300_8
 3

	)

2718 
	#R_MN10300_PCREL32
 4

	)

2719 
	#R_MN10300_PCREL16
 5

	)

2720 
	#R_MN10300_PCREL8
 6

	)

2721 
	#R_MN10300_GNU_VTINHERIT
 7

	)

2722 
	#R_MN10300_GNU_VTENTRY
 8

	)

2723 
	#R_MN10300_24
 9

	)

2724 
	#R_MN10300_GOTPC32
 10

	)

2725 
	#R_MN10300_GOTPC16
 11

	)

2726 
	#R_MN10300_GOTOFF32
 12

	)

2727 
	#R_MN10300_GOTOFF24
 13

	)

2728 
	#R_MN10300_GOTOFF16
 14

	)

2729 
	#R_MN10300_PLT32
 15

	)

2730 
	#R_MN10300_PLT16
 16

	)

2731 
	#R_MN10300_GOT32
 17

	)

2732 
	#R_MN10300_GOT24
 18

	)

2733 
	#R_MN10300_GOT16
 19

	)

2734 
	#R_MN10300_COPY
 20

	)

2735 
	#R_MN10300_GLOB_DAT
 21

	)

2736 
	#R_MN10300_JMP_SLOT
 22

	)

2737 
	#R_MN10300_RELATIVE
 23

	)

2739 
	#R_MN10300_NUM
 24

	)

2743 
	#R_M32R_NONE
 0

	)

2744 
	#R_M32R_16
 1

	)

2745 
	#R_M32R_32
 2

	)

2746 
	#R_M32R_24
 3

	)

2747 
	#R_M32R_10_PCREL
 4

	)

2748 
	#R_M32R_18_PCREL
 5

	)

2749 
	#R_M32R_26_PCREL
 6

	)

2750 
	#R_M32R_HI16_ULO
 7

	)

2751 
	#R_M32R_HI16_SLO
 8

	)

2752 
	#R_M32R_LO16
 9

	)

2753 
	#R_M32R_SDA16
 10

	)

2754 
	#R_M32R_GNU_VTINHERIT
 11

	)

2755 
	#R_M32R_GNU_VTENTRY
 12

	)

2757 
	#R_M32R_16_RELA
 33

	)

2758 
	#R_M32R_32_RELA
 34

	)

2759 
	#R_M32R_24_RELA
 35

	)

2760 
	#R_M32R_10_PCREL_RELA
 36

	)

2761 
	#R_M32R_18_PCREL_RELA
 37

	)

2762 
	#R_M32R_26_PCREL_RELA
 38

	)

2763 
	#R_M32R_HI16_ULO_RELA
 39

	)

2764 
	#R_M32R_HI16_SLO_RELA
 40

	)

2765 
	#R_M32R_LO16_RELA
 41

	)

2766 
	#R_M32R_SDA16_RELA
 42

	)

2767 
	#R_M32R_RELA_GNU_VTINHERIT
 43

	)

2768 
	#R_M32R_RELA_GNU_VTENTRY
 44

	)

2769 
	#R_M32R_REL32
 45

	)

2771 
	#R_M32R_GOT24
 48

	)

2772 
	#R_M32R_26_PLTREL
 49

	)

2773 
	#R_M32R_COPY
 50

	)

2774 
	#R_M32R_GLOB_DAT
 51

	)

2775 
	#R_M32R_JMP_SLOT
 52

	)

2776 
	#R_M32R_RELATIVE
 53

	)

2777 
	#R_M32R_GOTOFF
 54

	)

2778 
	#R_M32R_GOTPC24
 55

	)

2779 
	#R_M32R_GOT16_HI_ULO
 56

	)

2781 
	#R_M32R_GOT16_HI_SLO
 57

	)

2783 
	#R_M32R_GOT16_LO
 58

	)

2784 
	#R_M32R_GOTPC_HI_ULO
 59

	)

2786 
	#R_M32R_GOTPC_HI_SLO
 60

	)

2788 
	#R_M32R_GOTPC_LO
 61

	)

2790 
	#R_M32R_GOTOFF_HI_ULO
 62

	)

2792 
	#R_M32R_GOTOFF_HI_SLO
 63

	)

2794 
	#R_M32R_GOTOFF_LO
 64

	)

2795 
	#R_M32R_NUM
 256

	)

2798 
	g__END_DECLS


	@/usr/include/endian.h

19 #i‚def 
_ENDIAN_H


20 
	#_ENDIAN_H
 1

	)

22 
	~<„©uªs.h
>

32 
	#__LITTLE_ENDIAN
 1234

	)

33 
	#__BIG_ENDIAN
 4321

	)

34 
	#__PDP_ENDIAN
 3412

	)

37 
	~<bôs/ídün.h
>

41 #i‚de‡
__FLOAT_WORD_ORDER


42 
	#__FLOAT_WORD_ORDER
 
__BYTE_ORDER


	)

45 #ifdef 
__USE_BSD


46 
	#LITTLE_ENDIAN
 
__LITTLE_ENDIAN


	)

47 
	#BIG_ENDIAN
 
__BIG_ENDIAN


	)

48 
	#PDP_ENDIAN
 
__PDP_ENDIAN


	)

49 
	#BYTE_ORDER
 
__BYTE_ORDER


	)

52 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


53 
	#__LONG_LONG_PAIR
(
HI
, 
LO
ËLO, 
	)
HI

54 #ñi‡
__BYTE_ORDER
 =
__BIG_ENDIAN


55 
	#__LONG_LONG_PAIR
(
HI
, 
LO
ËHI, 
	)
LO

59 #ifde‡
__USE_BSD


61 
	~<bôs/byãsw≠.h
>

63 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


64 
	#htobe16
(
x
Ë
	`__bsw≠_16
 (x)

	)

65 
	#htﬁe16
(
x
Ë(x)

	)

66 
	#be16toh
(
x
Ë
	`__bsw≠_16
 (x)

	)

67 
	#À16toh
(
x
Ë(x)

	)

69 
	#htobe32
(
x
Ë
	`__bsw≠_32
 (x)

	)

70 
	#htﬁe32
(
x
Ë(x)

	)

71 
	#be32toh
(
x
Ë
	`__bsw≠_32
 (x)

	)

72 
	#À32toh
(
x
Ë(x)

	)

74 
	#htobe64
(
x
Ë
	`__bsw≠_64
 (x)

	)

75 
	#htﬁe64
(
x
Ë(x)

	)

76 
	#be64toh
(
x
Ë
	`__bsw≠_64
 (x)

	)

77 
	#À64toh
(
x
Ë(x)

	)

79 
	#htobe16
(
x
Ë(x)

	)

80 
	#htﬁe16
(
x
Ë
	`__bsw≠_16
 (x)

	)

81 
	#be16toh
(
x
Ë(x)

	)

82 
	#À16toh
(
x
Ë
	`__bsw≠_16
 (x)

	)

84 
	#htobe32
(
x
Ë(x)

	)

85 
	#htﬁe32
(
x
Ë
	`__bsw≠_32
 (x)

	)

86 
	#be32toh
(
x
Ë(x)

	)

87 
	#À32toh
(
x
Ë
	`__bsw≠_32
 (x)

	)

89 
	#htobe64
(
x
Ë(x)

	)

90 
	#htﬁe64
(
x
Ë
	`__bsw≠_64
 (x)

	)

91 
	#be64toh
(
x
Ë(x)

	)

92 
	#À64toh
(
x
Ë
	`__bsw≠_64
 (x)

	)

	@/usr/include/features.h

20 #i‚def 
_FEATURES_H


21 
	#_FEATURES_H
 1

	)

97 #unde‡
__USE_ISOC99


98 #unde‡
__USE_ISOC95


99 #unde‡
__USE_POSIX


100 #unde‡
__USE_POSIX2


101 #unde‡
__USE_POSIX199309


102 #unde‡
__USE_POSIX199506


103 #unde‡
__USE_XOPEN


104 #unde‡
__USE_XOPEN_EXTENDED


105 #unde‡
__USE_UNIX98


106 #unde‡
__USE_XOPEN2K


107 #unde‡
__USE_XOPEN2KXSI


108 #unde‡
__USE_XOPEN2K8


109 #unde‡
__USE_XOPEN2K8XSI


110 #unde‡
__USE_LARGEFILE


111 #unde‡
__USE_LARGEFILE64


112 #unde‡
__USE_FILE_OFFSET64


113 #unde‡
__USE_BSD


114 #unde‡
__USE_SVID


115 #unde‡
__USE_MISC


116 #unde‡
__USE_ATFILE


117 #unde‡
__USE_GNU


118 #unde‡
__USE_REENTRANT


119 #unde‡
__USE_FORTIFY_LEVEL


120 #unde‡
__FAVOR_BSD


121 #unde‡
__KERNEL_STRICT_NAMES


125 #i‚de‡
_LOOSE_KERNEL_NAMES


126 
	#__KERNEL_STRICT_NAMES


	)

130 
	#__USE_ANSI
 1

	)

139 #i‡
deföed
 
__GNUC__
 && deföed 
__GNUC_MINOR__


140 
	#__GNUC_PREREQ
(
maj
, 
mö
) \

141 ((
__GNUC__
 << 16Ë+ 
__GNUC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

143 
	#__GNUC_PREREQ
(
maj
, 
mö
Ë0

	)

148 #i‡
deföed
 
_BSD_SOURCE
 && \

149 !(
deföed
 
	g_POSIX_SOURCE
 || deföed 
	g_POSIX_C_SOURCE
 || \

150 
deföed
 
	g_XOPEN_SOURCE
 || deföed 
	g_GNU_SOURCE
 || deföed 
	g_SVID_SOURCE
)

151 
	#__FAVOR_BSD
 1

	)

155 #ifde‡
_GNU_SOURCE


156 #unde‡
_ISOC95_SOURCE


157 
	#_ISOC95_SOURCE
 1

	)

158 #unde‡
_ISOC99_SOURCE


159 
	#_ISOC99_SOURCE
 1

	)

160 #unde‡
_POSIX_SOURCE


161 
	#_POSIX_SOURCE
 1

	)

162 #unde‡
_POSIX_C_SOURCE


163 
	#_POSIX_C_SOURCE
 200809L

	)

164 #unde‡
_XOPEN_SOURCE


165 
	#_XOPEN_SOURCE
 700

	)

166 #unde‡
_XOPEN_SOURCE_EXTENDED


167 
	#_XOPEN_SOURCE_EXTENDED
 1

	)

168 #unde‡
_LARGEFILE64_SOURCE


169 
	#_LARGEFILE64_SOURCE
 1

	)

170 #unde‡
_BSD_SOURCE


171 
	#_BSD_SOURCE
 1

	)

172 #unde‡
_SVID_SOURCE


173 
	#_SVID_SOURCE
 1

	)

174 #unde‡
_ATFILE_SOURCE


175 
	#_ATFILE_SOURCE
 1

	)

180 #i‡(!
deföed
 
__STRICT_ANSI__
 && !deföed 
_ISOC99_SOURCE
 && \

181 !
deföed
 
	g_POSIX_SOURCE
 && !deföed 
	g_POSIX_C_SOURCE
 && \

182 !
deföed
 
	g_XOPEN_SOURCE
 && !deföed 
	g_BSD_SOURCE
 && !deföed 
	g_SVID_SOURCE
)

183 
	#_BSD_SOURCE
 1

	)

184 
	#_SVID_SOURCE
 1

	)

191 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC9X_SOURCE
 \

192 || (
deföed
 
	g__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L))

193 
	#__USE_ISOC99
 1

	)

197 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC9X_SOURCE
 \

198 || (
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199409L))

199 
	#__USE_ISOC95
 1

	)

204 #i‡((!
deföed
 
__STRICT_ANSI__
 || (
_XOPEN_SOURCE
 - 0) >= 500) && \

205 !
deföed
 
_POSIX_SOURCE
 && !deföed 
_POSIX_C_SOURCE
)

206 
	#_POSIX_SOURCE
 1

	)

207 #i‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 500

208 
	#_POSIX_C_SOURCE
 2

	)

209 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 600

210 
	#_POSIX_C_SOURCE
 199506L

	)

211 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 700

212 
	#_POSIX_C_SOURCE
 200112L

	)

214 
	#_POSIX_C_SOURCE
 200809L

	)

216 
	#__USE_POSIX_IMPLICITLY
 1

	)

219 #i‡
deföed
 
_POSIX_SOURCE
 || 
_POSIX_C_SOURCE
 >1 || deföed 
_XOPEN_SOURCE


220 
	#__USE_POSIX
 1

	)

223 #i‡
deföed
 
_POSIX_C_SOURCE
 && _POSIX_C_SOURCE >2 || deföed 
_XOPEN_SOURCE


224 
	#__USE_POSIX2
 1

	)

227 #i‡(
_POSIX_C_SOURCE
 - 0) >= 199309L

228 
	#__USE_POSIX199309
 1

	)

231 #i‡(
_POSIX_C_SOURCE
 - 0) >= 199506L

232 
	#__USE_POSIX199506
 1

	)

235 #i‡(
_POSIX_C_SOURCE
 - 0) >= 200112L

236 
	#__USE_XOPEN2K
 1

	)

237 #unde‡
__USE_ISOC95


238 
	#__USE_ISOC95
 1

	)

239 #unde‡
__USE_ISOC99


240 
	#__USE_ISOC99
 1

	)

243 #i‡(
_POSIX_C_SOURCE
 - 0) >= 200809L

244 
	#__USE_XOPEN2K8
 1

	)

245 #unde‡
_ATFILE_SOURCE


246 
	#_ATFILE_SOURCE
 1

	)

249 #ifdef 
_XOPEN_SOURCE


250 
	#__USE_XOPEN
 1

	)

251 #i‡(
_XOPEN_SOURCE
 - 0) >= 500

252 
	#__USE_XOPEN_EXTENDED
 1

	)

253 
	#__USE_UNIX98
 1

	)

254 #unde‡
_LARGEFILE_SOURCE


255 
	#_LARGEFILE_SOURCE
 1

	)

256 #i‡(
_XOPEN_SOURCE
 - 0) >= 600

257 #i‡(
_XOPEN_SOURCE
 - 0) >= 700

258 
	#__USE_XOPEN2K8
 1

	)

259 
	#__USE_XOPEN2K8XSI
 1

	)

261 
	#__USE_XOPEN2K
 1

	)

262 
	#__USE_XOPEN2KXSI
 1

	)

263 #unde‡
__USE_ISOC95


264 
	#__USE_ISOC95
 1

	)

265 #unde‡
__USE_ISOC99


266 
	#__USE_ISOC99
 1

	)

269 #ifde‡
_XOPEN_SOURCE_EXTENDED


270 
	#__USE_XOPEN_EXTENDED
 1

	)

275 #ifde‡
_LARGEFILE_SOURCE


276 
	#__USE_LARGEFILE
 1

	)

279 #ifde‡
_LARGEFILE64_SOURCE


280 
	#__USE_LARGEFILE64
 1

	)

283 #i‡
deföed
 
_FILE_OFFSET_BITS
 && _FILE_OFFSET_BITS == 64

284 
	#__USE_FILE_OFFSET64
 1

	)

287 #i‡
deföed
 
_BSD_SOURCE
 || deföed 
_SVID_SOURCE


288 
	#__USE_MISC
 1

	)

291 #ifdef 
_BSD_SOURCE


292 
	#__USE_BSD
 1

	)

295 #ifdef 
_SVID_SOURCE


296 
	#__USE_SVID
 1

	)

299 #ifdef 
_ATFILE_SOURCE


300 
	#__USE_ATFILE
 1

	)

303 #ifdef 
_GNU_SOURCE


304 
	#__USE_GNU
 1

	)

307 #i‡
deföed
 
_REENTRANT
 || deföed 
_THREAD_SAFE


308 
	#__USE_REENTRANT
 1

	)

311 #i‡
deföed
 
_FORTIFY_SOURCE
 && _FORTIFY_SOURCE > 0 \

312 && 
__GNUC_PREREQ
 (4, 1Ë&& 
deföed
 
	g__OPTIMIZE__
 && __OPTIMIZE__ > 0

313 #i‡
_FORTIFY_SOURCE
 > 1

314 
	#__USE_FORTIFY_LEVEL
 2

	)

316 
	#__USE_FORTIFY_LEVEL
 1

	)

319 
	#__USE_FORTIFY_LEVEL
 0

	)

323 
	~<bôs/¥edefs.h
>

326 
	#__STDC_ISO_10646__
 200009L

	)

334 #unde‡
__GNU_LIBRARY__


335 
	#__GNU_LIBRARY__
 6

	)

339 
	#__GLIBC__
 2

	)

340 
	#__GLIBC_MINOR__
 13

	)

342 
	#__GLIBC_PREREQ
(
maj
, 
mö
) \

343 ((
__GLIBC__
 << 16Ë+ 
__GLIBC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

346 #i‡
deföed
 
__GNUC__
 \

347 || (
deföed
 
	g__PGI
 && deföed 
	g__i386__
 ) \

348 || (
deföed
 
	g__INTEL_COMPILER
 && (deföed 
	g__i386__
 || deföed 
	g__ü64__
)) \

349 || (
deföed
 
	g__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L)

350 
	#__GLIBC_HAVE_LONG_LONG
 1

	)

354 #i‚de‡
__ASSEMBLER__


355 #i‚de‡
_SYS_CDEFS_H


356 
	~<sys/cdefs.h
>

361 #i‡
deföed
 
__USE_FILE_OFFSET64
 && !deföed 
__REDIRECT


362 
	#__USE_LARGEFILE
 1

	)

363 
	#__USE_LARGEFILE64
 1

	)

369 #i‡
__GNUC_PREREQ
 (2, 7Ë&& 
deföed
 
__OPTIMIZE__
 \

370 && !
deföed
 
	g__OPTIMIZE_SIZE__
 && !deföed 
	g__NO_INLINE__
 \

371 && 
deföed
 
	g__exã∫_ölöe


372 
	#__USE_EXTERN_INLINES
 1

	)

377 #i‡
__GNUC_PREREQ
 (2, 7Ë&& 
deföed
 
__OPTIMIZE__
 \

378 && (
deföed
 
	g_LIBC
 || !deföed 
	g__OPTIMIZE_SIZE__
Ë&& !deföed 
	g__NO_INLINE__
 \

379 && 
deföed
 
	g__exã∫_ölöe


380 
	#__USE_EXTERN_INLINES_IN_LIBC
 1

	)

388 
	~<gnu/°ubs.h
>

	@/usr/include/getopt.h

21 #i‚de‡
_GETOPT_H


23 #i‚de‡
__√ed_gë›t


24 
	#_GETOPT_H
 1

	)

34 #i‡!
deföed
 
__GNU_LIBRARY__


35 
	~<˘y≥.h
>

38 #i‚de‡
__THROW


39 #i‚de‡
__GNUC_PREREQ


40 
	#__GNUC_PREREQ
(
maj
, 
mö
Ë(0)

	)

42 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (2,8)

43 
	#__THROW
 
	`throw
 ()

	)

45 
	#__THROW


	)

49 #ifdef 
__˝lu•lus


59 *
›èrg
;

73 
›töd
;

78 
›ãº
;

82 
›t›t
;

84 #i‚de‡
__√ed_gë›t


106 
	s›ti⁄


108 c⁄° *
	g«me
;

111 
	ghas_¨g
;

112 *
	gÊag
;

113 
	gvÆ
;

118 
	#no_¨gumít
 0

	)

119 
	#ªquúed_¨gumít
 1

	)

120 
	#›ti⁄Æ_¨gumít
 2

	)

148 #ifde‡
__GNU_LIBRARY__


152 
gë›t
 (
___¨gc
, *c⁄° *
___¨gv
, c⁄° *
__sh‹t›ts
)

153 
__THROW
;

155 #i‡
deföed
 
__√ed_gë›t
 && deföed 
__USE_POSIX2
 \

156 && !
deföed
 
	g__USE_POSIX_IMPLICITLY
 && !deföed 
	g__USE_GNU


160 #ifde‡
__REDIRECT


161 
__REDIRECT_NTH
 (
gë›t
, (
___¨gc
, *c⁄° *
___¨gv
,

162 c⁄° *
__sh‹t›ts
),

163 
__posix_gë›t
);

165 
__posix_gë›t
 (
___¨gc
, *c⁄° *
___¨gv
,

166 c⁄° *
__sh‹t›ts
Ë
__THROW
;

167 
	#gë›t
 
__posix_gë›t


	)

171 
gë›t
 ();

174 #i‚de‡
__√ed_gë›t


175 
gë›t_l⁄g
 (
___¨gc
, *c⁄° *
___¨gv
,

176 c⁄° *
__sh‹t›ts
,

177 c⁄° 
›ti⁄
 *
__l⁄g›ts
, *
__l⁄göd
)

178 
__THROW
;

179 
gë›t_l⁄g_⁄ly
 (
___¨gc
, *c⁄° *
___¨gv
,

180 c⁄° *
__sh‹t›ts
,

181 c⁄° 
›ti⁄
 *
__l⁄g›ts
, *
__l⁄göd
)

182 
__THROW
;

186 #ifdef 
__˝lu•lus


191 #unde‡
__√ed_gë›t


	@/usr/include/libio.h

29 #i‚de‡
_IO_STDIO_H


30 
	#_IO_STDIO_H


	)

32 
	~<_G_c⁄fig.h
>

34 
	#_IO_pos_t
 
_G_Âos_t


	)

35 
	#_IO_Âos_t
 
_G_Âos_t


	)

36 
	#_IO_Âos64_t
 
_G_Âos64_t


	)

37 
	#_IO_size_t
 
_G_size_t


	)

38 
	#_IO_ssize_t
 
_G_ssize_t


	)

39 
	#_IO_off_t
 
_G_off_t


	)

40 
	#_IO_off64_t
 
_G_off64_t


	)

41 
	#_IO_pid_t
 
_G_pid_t


	)

42 
	#_IO_uid_t
 
_G_uid_t


	)

43 
	#_IO_ic⁄v_t
 
_G_ic⁄v_t


	)

44 
	#_IO_HAVE_SYS_WAIT
 
_G_HAVE_SYS_WAIT


	)

45 
	#_IO_HAVE_ST_BLKSIZE
 
_G_HAVE_ST_BLKSIZE


	)

46 
	#_IO_BUFSIZ
 
_G_BUFSIZ


	)

47 
	#_IO_va_li°
 
_G_va_li°


	)

48 
	#_IO_wöt_t
 
_G_wöt_t


	)

50 #ifde‡
_G_NEED_STDARG_H


52 
	#__√ed___va_li°


	)

53 
	~<°d¨g.h
>

54 #ifde‡
__GNUC_VA_LIST


55 #unde‡
_IO_va_li°


56 
	#_IO_va_li°
 
__gnuc_va_li°


	)

60 #i‚de‡
__P


61 #i‡
_G_HAVE_SYS_CDEFS


62 
	~<sys/cdefs.h
>

64 #ifde‡
__STDC__


65 
	#__P
(
p
Ë
	)
p

66 
	#__PMT
(
p
Ë
	)
p

68 
	#__P
(
p
Ë()

	)

69 
	#__PMT
(
p
Ë()

	)

75 #i‚de‡
_PARAMS


76 
	#_PARAMS
(
¥Ÿos
Ë
	`__P
’rŸos)

	)

79 #i‚de‡
__STDC__


81 c⁄°

	)

84 
	#_IO_UNIFIED_JUMPTABLES
 1

	)

85 #i‚de‡
_G_HAVE_PRINTF_FP


86 
	#_IO_USE_DTOA
 1

	)

89 #i‚de‡
EOF


90 
	#EOF
 (-1)

	)

92 #i‚de‡
NULL


93 #i‡
deföed
 
__GNUG__
 && \

94 (
	g__GNUC__
 > 2 || (__GNUC__ =2 && 
__GNUC_MINOR__
 >= 8))

95 
	#NULL
 (
__nuŒ
)

	)

97 #i‡!
deföed
(
__˝lu•lus
)

98 
	#NULL
 ((*)0)

	)

100 
	#NULL
 (0)

	)

105 
	#_IOS_INPUT
 1

	)

106 
	#_IOS_OUTPUT
 2

	)

107 
	#_IOS_ATEND
 4

	)

108 
	#_IOS_APPEND
 8

	)

109 
	#_IOS_TRUNC
 16

	)

110 
	#_IOS_NOCREATE
 32

	)

111 
	#_IOS_NOREPLACE
 64

	)

112 
	#_IOS_BIN
 128

	)

120 
	#_IO_MAGIC
 0xFBAD0000

	)

121 
	#_OLD_STDIO_MAGIC
 0xFABC0000

	)

122 
	#_IO_MAGIC_MASK
 0xFFFF0000

	)

123 
	#_IO_USER_BUF
 1

	)

124 
	#_IO_UNBUFFERED
 2

	)

125 
	#_IO_NO_READS
 4

	)

126 
	#_IO_NO_WRITES
 8

	)

127 
	#_IO_EOF_SEEN
 0x10

	)

128 
	#_IO_ERR_SEEN
 0x20

	)

129 
	#_IO_DELETE_DONT_CLOSE
 0x40

	)

130 
	#_IO_LINKED
 0x80

	)

131 
	#_IO_IN_BACKUP
 0x100

	)

132 
	#_IO_LINE_BUF
 0x200

	)

133 
	#_IO_TIED_PUT_GET
 0x400

	)

134 
	#_IO_CURRENTLY_PUTTING
 0x800

	)

135 
	#_IO_IS_APPENDING
 0x1000

	)

136 
	#_IO_IS_FILEBUF
 0x2000

	)

137 
	#_IO_BAD_SEEN
 0x4000

	)

138 
	#_IO_USER_LOCK
 0x8000

	)

140 
	#_IO_FLAGS2_MMAP
 1

	)

141 
	#_IO_FLAGS2_NOTCANCEL
 2

	)

142 #ifde‡
_LIBC


143 
	#_IO_FLAGS2_FORTIFY
 4

	)

145 
	#_IO_FLAGS2_USER_WBUF
 8

	)

146 #ifde‡
_LIBC


147 
	#_IO_FLAGS2_SCANF_STD
 16

	)

151 
	#_IO_SKIPWS
 01

	)

152 
	#_IO_LEFT
 02

	)

153 
	#_IO_RIGHT
 04

	)

154 
	#_IO_INTERNAL
 010

	)

155 
	#_IO_DEC
 020

	)

156 
	#_IO_OCT
 040

	)

157 
	#_IO_HEX
 0100

	)

158 
	#_IO_SHOWBASE
 0200

	)

159 
	#_IO_SHOWPOINT
 0400

	)

160 
	#_IO_UPPERCASE
 01000

	)

161 
	#_IO_SHOWPOS
 02000

	)

162 
	#_IO_SCIENTIFIC
 04000

	)

163 
	#_IO_FIXED
 010000

	)

164 
	#_IO_UNITBUF
 020000

	)

165 
	#_IO_STDIO
 040000

	)

166 
	#_IO_DONT_CLOSE
 0100000

	)

167 
	#_IO_BOOLALPHA
 0200000

	)

170 
_IO_jump_t
; 
	g_IO_FILE
;

173 #ifde‡
_IO_MTSAFE_IO


174 #i‡
deföed
 
__GLIBC__
 && __GLIBC__ >= 2

175 
	~<bôs/°dio-lock.h
>

180 
	t_IO_lock_t
;

186 
	s_IO_m¨kî
 {

187 
_IO_m¨kî
 *
	m_√xt
;

188 
_IO_FILE
 *
	m_sbuf
;

192 
	m_pos
;

194 
£t_°ªampos
(
°ªampos
 
•
Ë{ 
	m_•os
 = sp; }

195 
£t_off£t
(
off£t
Ë{ 
	m_pos
 = off£t; 
	m_•os
 = (
°ªampos
)(-2); }

196 
	mpublic
:

197 
°ªamm¨kî
(
°ªambuf
 *
sb
);

198 ~
°ªamm¨kî
();

199 
ßvög
(Ë{  
	m_•os
 == -2; }

200 
dñè
(
°ªamm¨kî
&);

201 
dñè
();

206 
	e__codecvt_ªsu…


208 
	m__codecvt_ok
,

209 
	m__codecvt_∑πül
,

210 
	m__codecvt_îr‹
,

211 
	m__codecvt_noc⁄v


214 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


217 
	s_IO_codecvt


219 (*
	m__codecvt_de°r
Ë(
	m_IO_codecvt
 *);

220 
__codecvt_ªsu…
 (*
__codecvt_do_out
Ë(
	m_IO_codecvt
 *,

221 
	m__mb°©e_t
 *,

222 c⁄° 
	mwch¨_t
 *,

223 c⁄° 
	mwch¨_t
 *,

224 c⁄° 
	mwch¨_t
 **, *,

226 
__codecvt_ªsu…
 (*
__codecvt_do_unshi·
Ë(
	m_IO_codecvt
 *,

227 
	m__mb°©e_t
 *, *,

229 
__codecvt_ªsu…
 (*
__codecvt_do_ö
Ë(
	m_IO_codecvt
 *,

230 
	m__mb°©e_t
 *,

232 c⁄° **, 
	mwch¨_t
 *,

233 
	mwch¨_t
 *, wchar_t **);

234 (*
	m__codecvt_do_ícodög
Ë(
	m_IO_codecvt
 *);

235 (*
	m__codecvt_do_Æways_noc⁄v
Ë(
	m_IO_codecvt
 *);

236 (*
	m__codecvt_do_Àngth
Ë(
	m_IO_codecvt
 *, 
	m__mb°©e_t
 *,

237 c⁄° *, c⁄° *, 
	m_IO_size_t
);

238 (*
	m__codecvt_do_max_Àngth
Ë(
	m_IO_codecvt
 *);

240 
_IO_ic⁄v_t
 
	m__cd_ö
;

241 
_IO_ic⁄v_t
 
	m__cd_out
;

245 
	s_IO_wide_d©a


247 
wch¨_t
 *
	m_IO_ªad_±r
;

248 
wch¨_t
 *
	m_IO_ªad_íd
;

249 
wch¨_t
 *
	m_IO_ªad_ba£
;

250 
wch¨_t
 *
	m_IO_wrôe_ba£
;

251 
wch¨_t
 *
	m_IO_wrôe_±r
;

252 
wch¨_t
 *
	m_IO_wrôe_íd
;

253 
wch¨_t
 *
	m_IO_buf_ba£
;

254 
wch¨_t
 *
	m_IO_buf_íd
;

256 
wch¨_t
 *
	m_IO_ßve_ba£
;

257 
wch¨_t
 *
	m_IO_backup_ba£
;

259 
wch¨_t
 *
	m_IO_ßve_íd
;

261 
__mb°©e_t
 
	m_IO_°©e
;

262 
__mb°©e_t
 
	m_IO_œ°_°©e
;

263 
_IO_codecvt
 
	m_codecvt
;

265 
wch¨_t
 
	m_sh‹tbuf
[1];

267 c⁄° 
_IO_jump_t
 *
	m_wide_vèbÀ
;

271 
	s_IO_FILE
 {

272 
	m_Êags
;

273 
	#_IO_fûe_Êags
 
_Êags


	)

277 * 
	m_IO_ªad_±r
;

278 * 
	m_IO_ªad_íd
;

279 * 
	m_IO_ªad_ba£
;

280 * 
	m_IO_wrôe_ba£
;

281 * 
	m_IO_wrôe_±r
;

282 * 
	m_IO_wrôe_íd
;

283 * 
	m_IO_buf_ba£
;

284 * 
	m_IO_buf_íd
;

286 *
	m_IO_ßve_ba£
;

287 *
	m_IO_backup_ba£
;

288 *
	m_IO_ßve_íd
;

290 
_IO_m¨kî
 *
	m_m¨kîs
;

292 
_IO_FILE
 *
	m_chaö
;

294 
	m_fûío
;

296 
	m_blksize
;

298 
	m_Êags2
;

300 
_IO_off_t
 
	m_ﬁd_off£t
;

302 
	#__HAVE_COLUMN


	)

304 
	m_cur_cﬁumn
;

305 sig√d 
	m_vèbÀ_off£t
;

306 
	m_sh‹tbuf
[1];

310 
_IO_lock_t
 *
	m_lock
;

311 #ifde‡
_IO_USE_OLD_IO_FILE


314 
	s_IO_FILE_com∂ëe


316 
_IO_FILE
 
	m_fûe
;

318 #i‡
deföed
 
_G_IO_IO_FILE_VERSION
 && _G_IO_IO_FILE_VERSION == 0x20001

319 
_IO_off64_t
 
	m_off£t
;

320 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


322 
_IO_codecvt
 *
	m_codecvt
;

323 
_IO_wide_d©a
 *
	m_wide_d©a
;

324 
_IO_FILE
 *
	m_‰ìªs_li°
;

325 *
	m_‰ìªs_buf
;

326 
size_t
 
	m_‰ìªs_size
;

328 *
	m__∑d1
;

329 *
	m__∑d2
;

330 *
	m__∑d3
;

331 *
	m__∑d4
;

332 
size_t
 
	m__∑d5
;

334 
	m_mode
;

336 
	m_unu£d2
[15 *  (Ë- 4 *  (*Ë-  (
size_t
)];

340 #i‚de‡
__˝lu•lus


341 
_IO_FILE
 
	t_IO_FILE
;

344 
	g_IO_FILE_∂us
;

346 
_IO_FILE_∂us
 
_IO_2_1_°dö_
;

347 
_IO_FILE_∂us
 
_IO_2_1_°dout_
;

348 
_IO_FILE_∂us
 
_IO_2_1_°dîr_
;

349 #i‚de‡
_LIBC


350 
	#_IO_°dö
 ((
_IO_FILE
*)(&
_IO_2_1_°dö_
))

	)

351 
	#_IO_°dout
 ((
_IO_FILE
*)(&
_IO_2_1_°dout_
))

	)

352 
	#_IO_°dîr
 ((
_IO_FILE
*)(&
_IO_2_1_°dîr_
))

	)

354 
_IO_FILE
 *
_IO_°dö
 
©åibuã_hiddí
;

355 
_IO_FILE
 *
_IO_°dout
 
©åibuã_hiddí
;

356 
_IO_FILE
 *
_IO_°dîr
 
©åibuã_hiddí
;

364 
__ssize_t
 
	t__io_ªad_‚
 (*
	t__cookõ
, *
	t__buf
, 
	tsize_t
 
	t__nbyãs
);

372 
__ssize_t
 
	t__io_wrôe_‚
 (*
	t__cookõ
, 
	t__c⁄°
 *
	t__buf
,

373 
	tsize_t
 
	t__n
);

381 
	t__io_£ek_‚
 (*
	t__cookõ
, 
	t_IO_off64_t
 *
	t__pos
, 
	t__w
);

384 
	t__io_˛o£_‚
 (*
	t__cookõ
);

387 #ifde‡
_GNU_SOURCE


389 
__io_ªad_‚
 
	tcookõ_ªad_fun˘i⁄_t
;

390 
__io_wrôe_‚
 
	tcookõ_wrôe_fun˘i⁄_t
;

391 
__io_£ek_‚
 
	tcookõ_£ek_fun˘i⁄_t
;

392 
__io_˛o£_‚
 
	tcookõ_˛o£_fun˘i⁄_t
;

397 
__io_ªad_‚
 *
	mªad
;

398 
__io_wrôe_‚
 *
	mwrôe
;

399 
__io_£ek_‚
 *
	m£ek
;

400 
__io_˛o£_‚
 *
	m˛o£
;

401 } 
	t_IO_cookõ_io_fun˘i⁄s_t
;

402 
_IO_cookõ_io_fun˘i⁄s_t
 
	tcookõ_io_fun˘i⁄s_t
;

404 
	g_IO_cookõ_fûe
;

407 
_IO_cookõ_öô
 (
_IO_cookõ_fûe
 *
__cfûe
, 
__ªad_wrôe
,

408 *
__cookõ
, 
_IO_cookõ_io_fun˘i⁄s_t
 
__‚s
);

412 #ifde‡
__˝lu•lus


416 
__undîÊow
 (
_IO_FILE
 *);

417 
__uÊow
 (
_IO_FILE
 *);

418 
__ovîÊow
 (
_IO_FILE
 *, );

419 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


420 
_IO_wöt_t
 
__wundîÊow
 (
_IO_FILE
 *);

421 
_IO_wöt_t
 
__wuÊow
 (
_IO_FILE
 *);

422 
_IO_wöt_t
 
__wovîÊow
 (
_IO_FILE
 *, _IO_wint_t);

425 #i‡ 
__GNUC__
 >= 3

426 
	#_IO_BE
(
ex¥
, 
ªs
Ë
	`__buûtö_ex≥˘
 (”x¥),Ñes)

	)

428 
	#_IO_BE
(
ex¥
, 
ªs
Ë”x¥)

	)

431 
	#_IO_gëc_u∆ocked
(
_Â
) \

432 (
	`_IO_BE
 ((
_Â
)->
_IO_ªad_±r
 >(_Â)->
_IO_ªad_íd
, 0) \

433 ? 
	`__uÊow
 (
_Â
Ë: *(*Ë(_Â)->
_IO_ªad_±r
++)

	)

434 
	#_IO_≥ekc_u∆ocked
(
_Â
) \

435 (
	`_IO_BE
 ((
_Â
)->
_IO_ªad_±r
 >(_Â)->
_IO_ªad_íd
, 0) \

436 && 
	`__undîÊow
 (
_Â
Ë=
EOF
 ? EOF \

437 : *(*Ë(
_Â
)->
_IO_ªad_±r
)

	)

438 
	#_IO_putc_u∆ocked
(
_ch
, 
_Â
) \

439 (
	`_IO_BE
 ((
_Â
)->
_IO_wrôe_±r
 >(_Â)->
_IO_wrôe_íd
, 0) \

440 ? 
	`__ovîÊow
 (
_Â
, (Ë(
_ch
)) \

441 : (Ë(*(
_Â
)->
_IO_wrôe_±r
++ = (
_ch
)))

	)

443 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


444 
	#_IO_gëwc_u∆ocked
(
_Â
) \

445 (
	`_IO_BE
 ((
_Â
)->
_wide_d©a
 =
NULL
 \

446 || ((
_Â
)->
_wide_d©a
->
_IO_ªad_±r
 \

447 >(
_Â
)->
_wide_d©a
->
_IO_ªad_íd
), 0) \

448 ? 
	`__wuÊow
 (
_Â
Ë: (
_IO_wöt_t
Ë*(_Â)->
_wide_d©a
->
_IO_ªad_±r
++)

	)

449 
	#_IO_putwc_u∆ocked
(
_wch
, 
_Â
) \

450 (
	`_IO_BE
 ((
_Â
)->
_wide_d©a
 =
NULL
 \

451 || ((
_Â
)->
_wide_d©a
->
_IO_wrôe_±r
 \

452 >(
_Â
)->
_wide_d©a
->
_IO_wrôe_íd
), 0) \

453 ? 
	`__wovîÊow
 (
_Â
, 
_wch
) \

454 : (
_IO_wöt_t
Ë(*(
_Â
)->
_wide_d©a
->
_IO_wrôe_±r
++ = (
_wch
)))

	)

457 
	#_IO_„of_u∆ocked
(
__Â
Ë(((__Â)->
_Êags
 & 
_IO_EOF_SEEN
Ë!0)

	)

458 
	#_IO_„º‹_u∆ocked
(
__Â
Ë(((__Â)->
_Êags
 & 
_IO_ERR_SEEN
Ë!0)

	)

460 
_IO_gëc
 (
_IO_FILE
 *
__Â
);

461 
_IO_putc
 (
__c
, 
_IO_FILE
 *
__Â
);

462 
_IO_„of
 (
_IO_FILE
 *
__Â
Ë
__THROW
;

463 
_IO_„º‹
 (
_IO_FILE
 *
__Â
Ë
__THROW
;

465 
_IO_≥ekc_locked
 (
_IO_FILE
 *
__Â
);

468 
	#_IO_PENDING_OUTPUT_COUNT
(
_Â
) \

469 ((
_Â
)->
_IO_wrôe_±r
 - (_Â)->
_IO_wrôe_ba£
)

	)

471 
_IO_Êockfûe
 (
_IO_FILE
 *Ë
__THROW
;

472 
_IO_fu∆ockfûe
 (
_IO_FILE
 *Ë
__THROW
;

473 
_IO_·rylockfûe
 (
_IO_FILE
 *Ë
__THROW
;

475 #ifde‡
_IO_MTSAFE_IO


476 
	#_IO_≥ekc
(
_Â
Ë
	`_IO_≥ekc_locked
 (_Â)

	)

477 
	#_IO_Êockfûe
(
_Â
) \

478 i‡(((
_Â
)->
_Êags
 & 
_IO_USER_LOCK
Ë=0Ë
	`_IO_Êockfûe
 (_Â)

	)

479 
	#_IO_fu∆ockfûe
(
_Â
) \

480 i‡(((
_Â
)->
_Êags
 & 
_IO_USER_LOCK
Ë=0Ë
	`_IO_fu∆ockfûe
 (_Â)

	)

482 
	#_IO_≥ekc
(
_Â
Ë
	`_IO_≥ekc_u∆ocked
 (_Â)

	)

483 
	#_IO_Êockfûe
(
_Â
Ë

	)

484 
	#_IO_fu∆ockfûe
(
_Â
Ë

	)

485 
	#_IO_·rylockfûe
(
_Â
Ë

	)

486 
	#_IO_˛ónup_ªgi⁄_°¨t
(
_f˘
, 
_Â
Ë

	)

487 
	#_IO_˛ónup_ªgi⁄_íd
(
_Doô
Ë

	)

490 
_IO_vfsˇnf
 (
_IO_FILE
 * 
__ª°ri˘
, const * __restrict,

491 
_IO_va_li°
, *
__ª°ri˘
);

492 
_IO_vÂrötf
 (
_IO_FILE
 *
__ª°ri˘
, const *__restrict,

493 
_IO_va_li°
);

494 
_IO_ssize_t
 
_IO_∑dn
 (
_IO_FILE
 *, , _IO_ssize_t);

495 
_IO_size_t
 
_IO_sgën
 (
_IO_FILE
 *, *, _IO_size_t);

497 
_IO_off64_t
 
_IO_£ekoff
 (
_IO_FILE
 *, _IO_off64_t, , );

498 
_IO_off64_t
 
_IO_£ekpos
 (
_IO_FILE
 *, _IO_off64_t, );

500 
_IO_‰ì_backup_¨ó
 (
_IO_FILE
 *Ë
__THROW
;

502 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


503 
_IO_wöt_t
 
_IO_gëwc
 (
_IO_FILE
 *
__Â
);

504 
_IO_wöt_t
 
_IO_putwc
 (
wch¨_t
 
__wc
, 
_IO_FILE
 *
__Â
);

505 
_IO_fwide
 (
_IO_FILE
 *
__Â
, 
__mode
Ë
__THROW
;

506 #i‡
__GNUC__
 >= 2

509 #i‡
deföed
 
_LIBC
 && deföed 
SHARED


510 
	~<shlib-com∑t.h
>

511 #i‡
SHLIB_COMPAT
 (
libc
, 
GLIBC_2_0
, 
GLIBC_2_1
)

512 
	#_IO_fwide_maybe_öcom∑tibÀ
 \

513 (
	`__buûtö_ex≥˘
 (&
_IO_°dö_u£d
 =
NULL
, 0))

	)

514 c⁄° 
_IO_°dö_u£d
;

515 
wók_exã∫
 (
_IO_°dö_u£d
);

518 #i‚de‡
_IO_fwide_maybe_öcom∑tibÀ


519 
	#_IO_fwide_maybe_öcom∑tibÀ
 (0)

	)

523 
	#_IO_fwide
(
__Â
, 
__mode
) \

524 ({ 
__ªsu…
 = (
__mode
); \

525 i‡(
__ªsu…
 < 0 && ! 
_IO_fwide_maybe_öcom∑tibÀ
) \

527 i‡((
__Â
)->
_mode
 == 0) \

529 (
__Â
)->
_mode
 = -1; \

530 
__ªsu…
 = (
__Â
)->
_mode
; \

532 i‡(
	`__buûtö_c⁄°™t_p
 (
__mode
) && (__mode) == 0) \

533 
__ªsu…
 = 
_IO_fwide_maybe_öcom∑tibÀ
 ? -1 : (
__Â
)->
_mode
; \

535 
__ªsu…
 = 
	`_IO_fwide
 (
__Â
, __result); \

536 
__ªsu…
; })

	)

539 
_IO_vfwsˇnf
 (
_IO_FILE
 * 
__ª°ri˘
, c⁄° 
wch¨_t
 * __restrict,

540 
_IO_va_li°
, *
__ª°ri˘
);

541 
_IO_vfw¥ötf
 (
_IO_FILE
 *
__ª°ri˘
, c⁄° 
wch¨_t
 *__restrict,

542 
_IO_va_li°
);

543 
_IO_ssize_t
 
_IO_w∑dn
 (
_IO_FILE
 *, 
wöt_t
, _IO_ssize_t);

544 
_IO_‰ì_wbackup_¨ó
 (
_IO_FILE
 *Ë
__THROW
;

547 #ifde‡
__LDBL_COMPAT


548 
	~<bôs/libio-ldbl.h
>

551 #ifde‡
__˝lu•lus


	@/usr/include/linux/if.h

19 #i‚de‡
_LINUX_IF_H


20 
	#_LINUX_IF_H


	)

22 
	~<löux/ty≥s.h
>

23 
	~<löux/sockë.h
>

26 
	#IFNAMSIZ
 16

	)

27 
	#IFALIASZ
 256

	)

28 
	~<löux/hdlc/io˘l.h
>

31 
	#IFF_UP
 0x1

	)

32 
	#IFF_BROADCAST
 0x2

	)

33 
	#IFF_DEBUG
 0x4

	)

34 
	#IFF_LOOPBACK
 0x8

	)

35 
	#IFF_POINTOPOINT
 0x10

	)

36 
	#IFF_NOTRAILERS
 0x20

	)

37 
	#IFF_RUNNING
 0x40

	)

38 
	#IFF_NOARP
 0x80

	)

39 
	#IFF_PROMISC
 0x100

	)

40 
	#IFF_ALLMULTI
 0x200

	)

42 
	#IFF_MASTER
 0x400

	)

43 
	#IFF_SLAVE
 0x800

	)

45 
	#IFF_MULTICAST
 0x1000

	)

47 
	#IFF_PORTSEL
 0x2000

	)

48 
	#IFF_AUTOMEDIA
 0x4000

	)

49 
	#IFF_DYNAMIC
 0x8000

	)

51 
	#IFF_LOWER_UP
 0x10000

	)

52 
	#IFF_DORMANT
 0x20000

	)

54 
	#IFF_ECHO
 0x40000

	)

56 
	#IFF_VOLATILE
 (
IFF_LOOPBACK
|
IFF_POINTOPOINT
|
IFF_BROADCAST
|
IFF_ECHO
|\

57 
IFF_MASTER
|
IFF_SLAVE
|
IFF_RUNNING
|
IFF_LOWER_UP
|
IFF_DORMANT
)

	)

60 
	#IFF_802_1Q_VLAN
 0x1

	)

61 
	#IFF_EBRIDGE
 0x2

	)

62 
	#IFF_SLAVE_INACTIVE
 0x4

	)

63 
	#IFF_MASTER_8023AD
 0x8

	)

64 
	#IFF_MASTER_ALB
 0x10

	)

65 
	#IFF_BONDING
 0x20

	)

66 
	#IFF_SLAVE_NEEDARP
 0x40

	)

67 
	#IFF_ISATAP
 0x80

	)

68 
	#IFF_MASTER_ARPMON
 0x100

	)

69 
	#IFF_WAN_HDLC
 0x200

	)

70 
	#IFF_XMIT_DST_RELEASE
 0x400

	)

73 
	#IFF_DONT_BRIDGE
 0x800

	)

74 
	#IFF_DISABLE_NETPOLL
 0x1000

	)

75 
	#IFF_MACVLAN_PORT
 0x2000

	)

76 
	#IFF_BRIDGE_PORT
 0x4000

	)

77 
	#IFF_OVS_DATAPATH
 0x8000

	)

79 
	#IFF_TX_SKB_SHARING
 0x10000

	)

81 
	#IFF_UNICAST_FLT
 0x20000

	)

83 
	#IF_GET_IFACE
 0x0001

	)

84 
	#IF_GET_PROTO
 0x0002

	)

87 
	#IF_IFACE_V35
 0x1000

	)

88 
	#IF_IFACE_V24
 0x1001

	)

89 
	#IF_IFACE_X21
 0x1002

	)

90 
	#IF_IFACE_T1
 0x1003

	)

91 
	#IF_IFACE_E1
 0x1004

	)

92 
	#IF_IFACE_SYNC_SERIAL
 0x1005

	)

93 
	#IF_IFACE_X21D
 0x1006

	)

96 
	#IF_PROTO_HDLC
 0x2000

	)

97 
	#IF_PROTO_PPP
 0x2001

	)

98 
	#IF_PROTO_CISCO
 0x2002

	)

99 
	#IF_PROTO_FR
 0x2003

	)

100 
	#IF_PROTO_FR_ADD_PVC
 0x2004

	)

101 
	#IF_PROTO_FR_DEL_PVC
 0x2005

	)

102 
	#IF_PROTO_X25
 0x2006

	)

103 
	#IF_PROTO_HDLC_ETH
 0x2007

	)

104 
	#IF_PROTO_FR_ADD_ETH_PVC
 0x2008

	)

105 
	#IF_PROTO_FR_DEL_ETH_PVC
 0x2009

	)

106 
	#IF_PROTO_FR_PVC
 0x200A

	)

107 
	#IF_PROTO_FR_ETH_PVC
 0x200B

	)

108 
	#IF_PROTO_RAW
 0x200C

	)

112 
	mIF_OPER_UNKNOWN
,

113 
	mIF_OPER_NOTPRESENT
,

114 
	mIF_OPER_DOWN
,

115 
	mIF_OPER_LOWERLAYERDOWN
,

116 
	mIF_OPER_TESTING
,

117 
	mIF_OPER_DORMANT
,

118 
	mIF_OPER_UP
,

123 
	mIF_LINK_MODE_DEFAULT
,

124 
	mIF_LINK_MODE_DORMANT
,

137 
	sifm≠
 {

138 
	mmem_°¨t
;

139 
	mmem_íd
;

140 
	mba£_addr
;

141 
	múq
;

142 
	mdma
;

143 
	mp‹t
;

147 
	sif_£âögs
 {

148 
	mty≥
;

149 
	msize
;

152 
øw_hdlc_¥Ÿo
 *
	møw_hdlc
;

153 
cisco_¥Ÿo
 *
	mcisco
;

154 
‰_¥Ÿo
 *
	m‰
;

155 
‰_¥Ÿo_pvc
 *
	m‰_pvc
;

156 
‰_¥Ÿo_pvc_öfo
 *
	m‰_pvc_öfo
;

159 
sync_£rül_£âögs
 *
	msync
;

160 
ã1_£âögs
 *
	mã1
;

161 } 
	mifs_ifsu
;

171 
	si‰eq
 {

172 
	#IFHWADDRLEN
 6

	)

175 
	mi‰n_«me
[
IFNAMSIZ
];

176 } 
	mi‰_i‰n
;

179 
sockaddr
 
	mi‰u_addr
;

180 
sockaddr
 
	mi‰u_d°addr
;

181 
sockaddr
 
	mi‰u_brﬂdaddr
;

182 
sockaddr
 
	mi‰u_√tmask
;

183 
sockaddr
 
	mi‰u_hwaddr
;

184 
	mi‰u_Êags
;

185 
	mi‰u_ivÆue
;

186 
	mi‰u_mtu
;

187 
ifm≠
 
	mi‰u_m≠
;

188 
	mi‰u_¶ave
[
IFNAMSIZ
];

189 
	mi‰u_√w«me
[
IFNAMSIZ
];

190 * 
	mi‰u_d©a
;

191 
if_£âögs
 
	mi‰u_£âögs
;

192 } 
	mi‰_i‰u
;

195 
	#i‰_«me
 
i‰_i‰n
.
i‰n_«me


	)

196 
	#i‰_hwaddr
 
i‰_i‰u
.
i‰u_hwaddr


	)

197 
	#i‰_addr
 
i‰_i‰u
.
i‰u_addr


	)

198 
	#i‰_d°addr
 
i‰_i‰u
.
i‰u_d°addr


	)

199 
	#i‰_brﬂdaddr
 
i‰_i‰u
.
i‰u_brﬂdaddr


	)

200 
	#i‰_√tmask
 
i‰_i‰u
.
i‰u_√tmask


	)

201 
	#i‰_Êags
 
i‰_i‰u
.
i‰u_Êags


	)

202 
	#i‰_mëric
 
i‰_i‰u
.
i‰u_ivÆue


	)

203 
	#i‰_mtu
 
i‰_i‰u
.
i‰u_mtu


	)

204 
	#i‰_m≠
 
i‰_i‰u
.
i‰u_m≠


	)

205 
	#i‰_¶ave
 
i‰_i‰u
.
i‰u_¶ave


	)

206 
	#i‰_d©a
 
i‰_i‰u
.
i‰u_d©a


	)

207 
	#i‰_ifödex
 
i‰_i‰u
.
i‰u_ivÆue


	)

208 
	#i‰_b™dwidth
 
i‰_i‰u
.
i‰u_ivÆue


	)

209 
	#i‰_qÀn
 
i‰_i‰u
.
i‰u_ivÆue


	)

210 
	#i‰_√w«me
 
i‰_i‰u
.
i‰u_√w«me


	)

211 
	#i‰_£âögs
 
i‰_i‰u
.
i‰u_£âögs


	)

220 
	sifc⁄f
 {

221 
	mifc_Àn
;

223 *
	mifcu_buf
;

224 
i‰eq
 *
	mifcu_ªq
;

225 } 
	mifc_ifcu
;

227 
	#ifc_buf
 
ifc_ifcu
.
ifcu_buf


	)

228 
	#ifc_ªq
 
ifc_ifcu
.
ifcu_ªq


	)

	@/usr/include/linux/if_addr.h

1 #i‚de‡
__LINUX_IF_ADDR_H


2 
	#__LINUX_IF_ADDR_H


	)

4 
	~<löux/ty≥s.h
>

5 
	~<löux/√éök.h
>

7 
	siÁddrmsg
 {

8 
__u8
 
	miÁ_Ámûy
;

9 
__u8
 
	miÁ_¥efixÀn
;

10 
__u8
 
	miÁ_Êags
;

11 
__u8
 
	miÁ_sc›e
;

12 
__u32
 
	miÁ_ödex
;

23 
	mIFA_UNSPEC
,

24 
	mIFA_ADDRESS
,

25 
	mIFA_LOCAL
,

26 
	mIFA_LABEL
,

27 
	mIFA_BROADCAST
,

28 
	mIFA_ANYCAST
,

29 
	mIFA_CACHEINFO
,

30 
	mIFA_MULTICAST
,

31 
	m__IFA_MAX
,

34 
	#IFA_MAX
 (
__IFA_MAX
 - 1)

	)

37 
	#IFA_F_SECONDARY
 0x01

	)

38 
	#IFA_F_TEMPORARY
 
IFA_F_SECONDARY


	)

40 
	#IFA_F_NODAD
 0x02

	)

41 
	#IFA_F_OPTIMISTIC
 0x04

	)

42 
	#IFA_F_DADFAILED
 0x08

	)

43 
	#IFA_F_HOMEADDRESS
 0x10

	)

44 
	#IFA_F_DEPRECATED
 0x20

	)

45 
	#IFA_F_TENTATIVE
 0x40

	)

46 
	#IFA_F_PERMANENT
 0x80

	)

48 
	siÁ_ˇcheöfo
 {

49 
__u32
 
	miÁ_¥e„ªd
;

50 
__u32
 
	miÁ_vÆid
;

51 
__u32
 
	mc°amp
;

52 
__u32
 
	mt°amp
;

56 
	#IFA_RTA
(
r
Ë((
π©å
*)(((*)‘)Ë+ 
	`NLMSG_ALIGN
((
iÁddrmsg
))))

	)

57 
	#IFA_PAYLOAD
(
n
Ë
	`NLMSG_PAYLOAD
“,(
iÁddrmsg
))

	)

	@/usr/include/linux/if_link.h

1 #i‚de‡
_LINUX_IF_LINK_H


2 
	#_LINUX_IF_LINK_H


	)

4 
	~<löux/ty≥s.h
>

5 
	~<löux/√éök.h
>

8 
	sπ∆_lök_°©s
 {

9 
__u32
 
	mrx_∑ckës
;

10 
__u32
 
	mtx_∑ckës
;

11 
__u32
 
	mrx_byãs
;

12 
__u32
 
	mtx_byãs
;

13 
__u32
 
	mrx_îr‹s
;

14 
__u32
 
	mtx_îr‹s
;

15 
__u32
 
	mrx_dr›≥d
;

16 
__u32
 
	mtx_dr›≥d
;

17 
__u32
 
	mmu…iˇ°
;

18 
__u32
 
	mcﬁlisi⁄s
;

21 
__u32
 
	mrx_Àngth_îr‹s
;

22 
__u32
 
	mrx_ovî_îr‹s
;

23 
__u32
 
	mrx_¸c_îr‹s
;

24 
__u32
 
	mrx_‰ame_îr‹s
;

25 
__u32
 
	mrx_fifo_îr‹s
;

26 
__u32
 
	mrx_mis£d_îr‹s
;

29 
__u32
 
	mtx_ab‹ãd_îr‹s
;

30 
__u32
 
	mtx_ˇºõr_îr‹s
;

31 
__u32
 
	mtx_fifo_îr‹s
;

32 
__u32
 
	mtx_hóπbót_îr‹s
;

33 
__u32
 
	mtx_wödow_îr‹s
;

36 
__u32
 
	mrx_com¥es£d
;

37 
__u32
 
	mtx_com¥es£d
;

41 
	sπ∆_lök_°©s64
 {

42 
__u64
 
	mrx_∑ckës
;

43 
__u64
 
	mtx_∑ckës
;

44 
__u64
 
	mrx_byãs
;

45 
__u64
 
	mtx_byãs
;

46 
__u64
 
	mrx_îr‹s
;

47 
__u64
 
	mtx_îr‹s
;

48 
__u64
 
	mrx_dr›≥d
;

49 
__u64
 
	mtx_dr›≥d
;

50 
__u64
 
	mmu…iˇ°
;

51 
__u64
 
	mcﬁlisi⁄s
;

54 
__u64
 
	mrx_Àngth_îr‹s
;

55 
__u64
 
	mrx_ovî_îr‹s
;

56 
__u64
 
	mrx_¸c_îr‹s
;

57 
__u64
 
	mrx_‰ame_îr‹s
;

58 
__u64
 
	mrx_fifo_îr‹s
;

59 
__u64
 
	mrx_mis£d_îr‹s
;

62 
__u64
 
	mtx_ab‹ãd_îr‹s
;

63 
__u64
 
	mtx_ˇºõr_îr‹s
;

64 
__u64
 
	mtx_fifo_îr‹s
;

65 
__u64
 
	mtx_hóπbót_îr‹s
;

66 
__u64
 
	mtx_wödow_îr‹s
;

69 
__u64
 
	mrx_com¥es£d
;

70 
__u64
 
	mtx_com¥es£d
;

74 
	sπ∆_lök_ifm≠
 {

75 
__u64
 
	mmem_°¨t
;

76 
__u64
 
	mmem_íd
;

77 
__u64
 
	mba£_addr
;

78 
__u16
 
	múq
;

79 
__u8
 
	mdma
;

80 
__u8
 
	mp‹t
;

102 
	mIFLA_UNSPEC
,

103 
	mIFLA_ADDRESS
,

104 
	mIFLA_BROADCAST
,

105 
	mIFLA_IFNAME
,

106 
	mIFLA_MTU
,

107 
	mIFLA_LINK
,

108 
	mIFLA_QDISC
,

109 
	mIFLA_STATS
,

110 
	mIFLA_COST
,

111 
	#IFLA_COST
 
IFLA_COST


	)

112 
	mIFLA_PRIORITY
,

113 
	#IFLA_PRIORITY
 
IFLA_PRIORITY


	)

114 
	mIFLA_MASTER
,

115 
	#IFLA_MASTER
 
IFLA_MASTER


	)

116 
	mIFLA_WIRELESS
,

117 
	#IFLA_WIRELESS
 
IFLA_WIRELESS


	)

118 
	mIFLA_PROTINFO
,

119 
	#IFLA_PROTINFO
 
IFLA_PROTINFO


	)

120 
	mIFLA_TXQLEN
,

121 
	#IFLA_TXQLEN
 
IFLA_TXQLEN


	)

122 
	mIFLA_MAP
,

123 
	#IFLA_MAP
 
IFLA_MAP


	)

124 
	mIFLA_WEIGHT
,

125 
	#IFLA_WEIGHT
 
IFLA_WEIGHT


	)

126 
	mIFLA_OPERSTATE
,

127 
	mIFLA_LINKMODE
,

128 
	mIFLA_LINKINFO
,

129 
	#IFLA_LINKINFO
 
IFLA_LINKINFO


	)

130 
	mIFLA_NET_NS_PID
,

131 
	mIFLA_IFALIAS
,

132 
	mIFLA_NUM_VF
,

133 
	mIFLA_VFINFO_LIST
,

134 
	mIFLA_STATS64
,

135 
	mIFLA_VF_PORTS
,

136 
	mIFLA_PORT_SELF
,

137 
	mIFLA_AF_SPEC
,

138 
	mIFLA_GROUP
,

139 
	mIFLA_NET_NS_FD
,

140 
	m__IFLA_MAX


144 
	#IFLA_MAX
 (
__IFLA_MAX
 - 1)

	)

147 
	#IFLA_RTA
(
r
Ë((
π©å
*)(((*)‘)Ë+ 
	`NLMSG_ALIGN
((
iföfomsg
))))

	)

148 
	#IFLA_PAYLOAD
(
n
Ë
	`NLMSG_PAYLOAD
“,(
iföfomsg
))

	)

151 
	mIFLA_INET_UNSPEC
,

152 
	mIFLA_INET_CONF
,

153 
	m__IFLA_INET_MAX
,

156 
	#IFLA_INET_MAX
 (
__IFLA_INET_MAX
 - 1)

	)

189 
	mIFLA_INET6_UNSPEC
,

190 
	mIFLA_INET6_FLAGS
,

191 
	mIFLA_INET6_CONF
,

192 
	mIFLA_INET6_STATS
,

193 
	mIFLA_INET6_MCAST
,

194 
	mIFLA_INET6_CACHEINFO
,

195 
	mIFLA_INET6_ICMP6STATS
,

196 
	m__IFLA_INET6_MAX


199 
	#IFLA_INET6_MAX
 (
__IFLA_INET6_MAX
 - 1)

	)

201 
	siÊa_ˇcheöfo
 {

202 
__u32
 
	mmax_ªasm_Àn
;

203 
__u32
 
	mt°amp
;

204 
__u32
 
	mªachabÀ_time
;

205 
__u32
 
	mªå™s_time
;

209 
	mIFLA_INFO_UNSPEC
,

210 
	mIFLA_INFO_KIND
,

211 
	mIFLA_INFO_DATA
,

212 
	mIFLA_INFO_XSTATS
,

213 
	m__IFLA_INFO_MAX
,

216 
	#IFLA_INFO_MAX
 (
__IFLA_INFO_MAX
 - 1)

	)

221 
	mIFLA_VLAN_UNSPEC
,

222 
	mIFLA_VLAN_ID
,

223 
	mIFLA_VLAN_FLAGS
,

224 
	mIFLA_VLAN_EGRESS_QOS
,

225 
	mIFLA_VLAN_INGRESS_QOS
,

226 
	m__IFLA_VLAN_MAX
,

229 
	#IFLA_VLAN_MAX
 (
__IFLA_VLAN_MAX
 - 1)

	)

231 
	siÊa_vœn_Êags
 {

232 
__u32
 
	mÊags
;

233 
__u32
 
	mmask
;

237 
	mIFLA_VLAN_QOS_UNSPEC
,

238 
	mIFLA_VLAN_QOS_MAPPING
,

239 
	m__IFLA_VLAN_QOS_MAX


242 
	#IFLA_VLAN_QOS_MAX
 (
__IFLA_VLAN_QOS_MAX
 - 1)

	)

244 
	siÊa_vœn_qos_m≠pög
 {

245 
__u32
 
	m‰om
;

246 
__u32
 
	mto
;

251 
	mIFLA_MACVLAN_UNSPEC
,

252 
	mIFLA_MACVLAN_MODE
,

253 
	m__IFLA_MACVLAN_MAX
,

256 
	#IFLA_MACVLAN_MAX
 (
__IFLA_MACVLAN_MAX
 - 1)

	)

258 
	emacvœn_mode
 {

259 
	mMACVLAN_MODE_PRIVATE
 = 1,

260 
	mMACVLAN_MODE_VEPA
 = 2,

261 
	mMACVLAN_MODE_BRIDGE
 = 4,

262 
	mMACVLAN_MODE_PASSTHRU
 = 8,

268 
	mIFLA_VF_INFO_UNSPEC
,

269 
	mIFLA_VF_INFO
,

270 
	m__IFLA_VF_INFO_MAX
,

273 
	#IFLA_VF_INFO_MAX
 (
__IFLA_VF_INFO_MAX
 - 1)

	)

276 
	mIFLA_VF_UNSPEC
,

277 
	mIFLA_VF_MAC
,

278 
	mIFLA_VF_VLAN
,

279 
	mIFLA_VF_TX_RATE
,

280 
	mIFLA_VF_SPOOFCHK
,

281 
	m__IFLA_VF_MAX
,

284 
	#IFLA_VF_MAX
 (
__IFLA_VF_MAX
 - 1)

	)

286 
	siÊa_vf_mac
 {

287 
__u32
 
	mvf
;

288 
__u8
 
	mmac
[32];

291 
	siÊa_vf_vœn
 {

292 
__u32
 
	mvf
;

293 
__u32
 
	mvœn
;

294 
__u32
 
	mqos
;

297 
	siÊa_vf_tx_øã
 {

298 
__u32
 
	mvf
;

299 
__u32
 
	møã
;

302 
	siÊa_vf_•oofchk
 {

303 
__u32
 
	mvf
;

304 
__u32
 
	m£âög
;

323 
	mIFLA_VF_PORT_UNSPEC
,

324 
	mIFLA_VF_PORT
,

325 
	m__IFLA_VF_PORT_MAX
,

328 
	#IFLA_VF_PORT_MAX
 (
__IFLA_VF_PORT_MAX
 - 1)

	)

331 
	mIFLA_PORT_UNSPEC
,

332 
	mIFLA_PORT_VF
,

333 
	mIFLA_PORT_PROFILE
,

334 
	mIFLA_PORT_VSI_TYPE
,

335 
	mIFLA_PORT_INSTANCE_UUID
,

336 
	mIFLA_PORT_HOST_UUID
,

337 
	mIFLA_PORT_REQUEST
,

338 
	mIFLA_PORT_RESPONSE
,

339 
	m__IFLA_PORT_MAX
,

342 
	#IFLA_PORT_MAX
 (
__IFLA_PORT_MAX
 - 1)

	)

344 
	#PORT_PROFILE_MAX
 40

	)

345 
	#PORT_UUID_MAX
 16

	)

346 
	#PORT_SELF_VF
 -1

	)

349 
	mPORT_REQUEST_PREASSOCIATE
 = 0,

350 
	mPORT_REQUEST_PREASSOCIATE_RR
,

351 
	mPORT_REQUEST_ASSOCIATE
,

352 
	mPORT_REQUEST_DISASSOCIATE
,

356 
	mPORT_VDP_RESPONSE_SUCCESS
 = 0,

357 
	mPORT_VDP_RESPONSE_INVALID_FORMAT
,

358 
	mPORT_VDP_RESPONSE_INSUFFICIENT_RESOURCES
,

359 
	mPORT_VDP_RESPONSE_UNUSED_VTID
,

360 
	mPORT_VDP_RESPONSE_VTID_VIOLATION
,

361 
	mPORT_VDP_RESPONSE_VTID_VERSION_VIOALTION
,

362 
	mPORT_VDP_RESPONSE_OUT_OF_SYNC
,

364 
	mPORT_PROFILE_RESPONSE_SUCCESS
 = 0x100,

365 
	mPORT_PROFILE_RESPONSE_INPROGRESS
,

366 
	mPORT_PROFILE_RESPONSE_INVALID
,

367 
	mPORT_PROFILE_RESPONSE_BADSTATE
,

368 
	mPORT_PROFILE_RESPONSE_INSUFFICIENT_RESOURCES
,

369 
	mPORT_PROFILE_RESPONSE_ERROR
,

372 
	siÊa_p‹t_vsi
 {

373 
__u8
 
	mvsi_mgr_id
;

374 
__u8
 
	mvsi_ty≥_id
[3];

375 
__u8
 
	mvsi_ty≥_vîsi⁄
;

376 
__u8
 
	m∑d
[3];

	@/usr/include/linux/neighbour.h

1 #i‚de‡
__LINUX_NEIGHBOUR_H


2 
	#__LINUX_NEIGHBOUR_H


	)

4 
	~<löux/ty≥s.h
>

5 
	~<löux/√éök.h
>

7 
	sndmsg
 {

8 
__u8
 
	mndm_Ámûy
;

9 
__u8
 
	mndm_∑d1
;

10 
__u16
 
	mndm_∑d2
;

11 
__s32
 
	mndm_ifödex
;

12 
__u16
 
	mndm_°©e
;

13 
__u8
 
	mndm_Êags
;

14 
__u8
 
	mndm_ty≥
;

18 
	mNDA_UNSPEC
,

19 
	mNDA_DST
,

20 
	mNDA_LLADDR
,

21 
	mNDA_CACHEINFO
,

22 
	mNDA_PROBES
,

23 
	m__NDA_MAX


26 
	#NDA_MAX
 (
__NDA_MAX
 - 1)

	)

32 
	#NTF_USE
 0x01

	)

33 
	#NTF_PROXY
 0x08

	)

34 
	#NTF_ROUTER
 0x80

	)

40 
	#NUD_INCOMPLETE
 0x01

	)

41 
	#NUD_REACHABLE
 0x02

	)

42 
	#NUD_STALE
 0x04

	)

43 
	#NUD_DELAY
 0x08

	)

44 
	#NUD_PROBE
 0x10

	)

45 
	#NUD_FAILED
 0x20

	)

48 
	#NUD_NOARP
 0x40

	)

49 
	#NUD_PERMANENT
 0x80

	)

50 
	#NUD_NONE
 0x00

	)

57 
	snda_ˇcheöfo
 {

58 
__u32
 
	mndm_c⁄fúmed
;

59 
__u32
 
	mndm_u£d
;

60 
__u32
 
	mndm_upd©ed
;

61 
__u32
 
	mndm_ªf˙t
;

89 
	sndt_°©s
 {

90 
__u64
 
	mndts_Ælocs
;

91 
__u64
 
	mndts_de°roys
;

92 
__u64
 
	mndts_hash_grows
;

93 
__u64
 
	mndts_ªs_Áûed
;

94 
__u64
 
	mndts_lookups
;

95 
__u64
 
	mndts_hôs
;

96 
__u64
 
	mndts_rcv_¥obes_mˇ°
;

97 
__u64
 
	mndts_rcv_¥obes_uˇ°
;

98 
__u64
 
	mndts_≥riodic_gc_runs
;

99 
__u64
 
	mndts_f‹˚d_gc_runs
;

103 
	mNDTPA_UNSPEC
,

104 
	mNDTPA_IFINDEX
,

105 
	mNDTPA_REFCNT
,

106 
	mNDTPA_REACHABLE_TIME
,

107 
	mNDTPA_BASE_REACHABLE_TIME
,

108 
	mNDTPA_RETRANS_TIME
,

109 
	mNDTPA_GC_STALETIME
,

110 
	mNDTPA_DELAY_PROBE_TIME
,

111 
	mNDTPA_QUEUE_LEN
,

112 
	mNDTPA_APP_PROBES
,

113 
	mNDTPA_UCAST_PROBES
,

114 
	mNDTPA_MCAST_PROBES
,

115 
	mNDTPA_ANYCAST_DELAY
,

116 
	mNDTPA_PROXY_DELAY
,

117 
	mNDTPA_PROXY_QLEN
,

118 
	mNDTPA_LOCKTIME
,

119 
	m__NDTPA_MAX


121 
	#NDTPA_MAX
 (
__NDTPA_MAX
 - 1)

	)

123 
	sndtmsg
 {

124 
__u8
 
	mndtm_Ámûy
;

125 
__u8
 
	mndtm_∑d1
;

126 
__u16
 
	mndtm_∑d2
;

129 
	sndt_c⁄fig
 {

130 
__u16
 
	mndtc_key_Àn
;

131 
__u16
 
	mndtc_íåy_size
;

132 
__u32
 
	mndtc_íåõs
;

133 
__u32
 
	mndtc_œ°_Êush
;

134 
__u32
 
	mndtc_œ°_ønd
;

135 
__u32
 
	mndtc_hash_∫d
;

136 
__u32
 
	mndtc_hash_mask
;

137 
__u32
 
	mndtc_hash_chaö_gc
;

138 
__u32
 
	mndtc_¥oxy_qÀn
;

142 
	mNDTA_UNSPEC
,

143 
	mNDTA_NAME
,

144 
	mNDTA_THRESH1
,

145 
	mNDTA_THRESH2
,

146 
	mNDTA_THRESH3
,

147 
	mNDTA_CONFIG
,

148 
	mNDTA_PARMS
,

149 
	mNDTA_STATS
,

150 
	mNDTA_GC_INTERVAL
,

151 
	m__NDTA_MAX


153 
	#NDTA_MAX
 (
__NDTA_MAX
 - 1)

	)

	@/usr/include/linux/netlink.h

1 #i‚de‡
__LINUX_NETLINK_H


2 
	#__LINUX_NETLINK_H


	)

4 
	~<löux/sockë.h
>

5 
	~<löux/ty≥s.h
>

7 
	#NETLINK_ROUTE
 0

	)

8 
	#NETLINK_UNUSED
 1

	)

9 
	#NETLINK_USERSOCK
 2

	)

10 
	#NETLINK_FIREWALL
 3

	)

11 
	#NETLINK_INET_DIAG
 4

	)

12 
	#NETLINK_NFLOG
 5

	)

13 
	#NETLINK_XFRM
 6

	)

14 
	#NETLINK_SELINUX
 7

	)

15 
	#NETLINK_ISCSI
 8

	)

16 
	#NETLINK_AUDIT
 9

	)

17 
	#NETLINK_FIB_LOOKUP
 10

	)

18 
	#NETLINK_CONNECTOR
 11

	)

19 
	#NETLINK_NETFILTER
 12

	)

20 
	#NETLINK_IP6_FW
 13

	)

21 
	#NETLINK_DNRTMSG
 14

	)

22 
	#NETLINK_KOBJECT_UEVENT
 15

	)

23 
	#NETLINK_GENERIC
 16

	)

25 
	#NETLINK_SCSITRANSPORT
 18

	)

26 
	#NETLINK_ECRYPTFS
 19

	)

27 
	#NETLINK_RDMA
 20

	)

28 
	#NETLINK_CRYPTO
 21

	)

30 
	#MAX_LINKS
 32

	)

32 
	ssockaddr_∆
 {

33 
__kî√l_ß_Ámûy_t
 
	m∆_Ámûy
;

34 
	m∆_∑d
;

35 
__u32
 
	m∆_pid
;

36 
__u32
 
	m∆_groups
;

39 
	s∆msghdr
 {

40 
__u32
 
	m∆msg_Àn
;

41 
__u16
 
	m∆msg_ty≥
;

42 
__u16
 
	m∆msg_Êags
;

43 
__u32
 
	m∆msg_£q
;

44 
__u32
 
	m∆msg_pid
;

49 
	#NLM_F_REQUEST
 1

	)

50 
	#NLM_F_MULTI
 2

	)

51 
	#NLM_F_ACK
 4

	)

52 
	#NLM_F_ECHO
 8

	)

53 
	#NLM_F_DUMP_INTR
 16

	)

56 
	#NLM_F_ROOT
 0x100

	)

57 
	#NLM_F_MATCH
 0x200

	)

58 
	#NLM_F_ATOMIC
 0x400

	)

59 
	#NLM_F_DUMP
 (
NLM_F_ROOT
|
NLM_F_MATCH
)

	)

62 
	#NLM_F_REPLACE
 0x100

	)

63 
	#NLM_F_EXCL
 0x200

	)

64 
	#NLM_F_CREATE
 0x400

	)

65 
	#NLM_F_APPEND
 0x800

	)

76 
	#NLMSG_ALIGNTO
 4U

	)

77 
	#NLMSG_ALIGN
(
Àn
Ë–(÷í)+
NLMSG_ALIGNTO
-1Ë& ~(NLMSG_ALIGNTO-1Ë)

	)

78 
	#NLMSG_HDRLEN
 ((Ë
	`NLMSG_ALIGN
((
∆msghdr
)))

	)

79 
	#NLMSG_LENGTH
(
Àn
Ë(÷í)+
	`NLMSG_ALIGN
(
NLMSG_HDRLEN
))

	)

80 
	#NLMSG_SPACE
(
Àn
Ë
	`NLMSG_ALIGN
(
	`NLMSG_LENGTH
÷í))

	)

81 
	#NLMSG_DATA
(
∆h
Ë((*)(((*ÍlhË+ 
	`NLMSG_LENGTH
(0)))

	)

82 
	#NLMSG_NEXT
(
∆h
,
Àn
Ë(÷íË-
	`NLMSG_ALIGN
(“lh)->
∆msg_Àn
), \

83 (
∆msghdr
*)(((*)(
∆h
)Ë+ 
	`NLMSG_ALIGN
(“lh)->
∆msg_Àn
)))

	)

84 
	#NLMSG_OK
(
∆h
,
Àn
Ë(÷íË>()(
∆msghdr
) && \

85 (
∆h
)->
∆msg_Àn
 >(
∆msghdr
) && \

86 (
∆h
)->
∆msg_Àn
 <(
Àn
))

	)

87 
	#NLMSG_PAYLOAD
(
∆h
,
Àn
Ë(“lh)->
∆msg_Àn
 - 
	`NLMSG_SPACE
(÷í)))

	)

89 
	#NLMSG_NOOP
 0x1

	)

90 
	#NLMSG_ERROR
 0x2

	)

91 
	#NLMSG_DONE
 0x3

	)

92 
	#NLMSG_OVERRUN
 0x4

	)

94 
	#NLMSG_MIN_TYPE
 0x10

	)

96 
	s∆msgîr
 {

97 
	mîr‹
;

98 
∆msghdr
 
	mmsg
;

101 
	#NETLINK_ADD_MEMBERSHIP
 1

	)

102 
	#NETLINK_DROP_MEMBERSHIP
 2

	)

103 
	#NETLINK_PKTINFO
 3

	)

104 
	#NETLINK_BROADCAST_ERROR
 4

	)

105 
	#NETLINK_NO_ENOBUFS
 5

	)

107 
	s∆_pktöfo
 {

108 
__u32
 
	mgroup
;

111 
	#NET_MAJOR
 36

	)

114 
	mNETLINK_UNCONNECTED
 = 0,

115 
	mNETLINK_CONNECTED
,

127 
	s∆©å
 {

128 
__u16
 
	m∆a_Àn
;

129 
__u16
 
	m∆a_ty≥
;

142 
	#NLA_F_NESTED
 (1 << 15)

	)

143 
	#NLA_F_NET_BYTEORDER
 (1 << 14)

	)

144 
	#NLA_TYPE_MASK
 ~(
NLA_F_NESTED
 | 
NLA_F_NET_BYTEORDER
)

	)

146 
	#NLA_ALIGNTO
 4

	)

147 
	#NLA_ALIGN
(
Àn
Ë((÷íË+ 
NLA_ALIGNTO
 - 1Ë& ~(NLA_ALIGNTO - 1))

	)

148 
	#NLA_HDRLEN
 ((Ë
	`NLA_ALIGN
((
∆©å
)))

	)

	@/usr/include/linux/posix_types.h

1 #i‚de‡
_LINUX_POSIX_TYPES_H


2 
	#_LINUX_POSIX_TYPES_H


	)

4 
	~<löux/°ddef.h
>

21 #unde‡
__NFDBITS


22 
	#__NFDBITS
 (8 * ())

	)

24 #unde‡
__FD_SETSIZE


25 
	#__FD_SETSIZE
 1024

	)

27 #unde‡
__FDSET_LONGS


28 
	#__FDSET_LONGS
 (
__FD_SETSIZE
/
__NFDBITS
)

	)

30 #unde‡
__FDELT


31 
	#__FDELT
(
d
Ë((dË/ 
__NFDBITS
)

	)

33 #unde‡
__FDMASK


34 
	#__FDMASK
(
d
Ë(1UL << ((dË% 
__NFDBITS
))

	)

37 
	mfds_bôs
 [
__FDSET_LONGS
];

38 } 
	t__kî√l_fd_£t
;

41 (*
	t__kî√l_sigh™dÀr_t
)();

44 
	t__kî√l_key_t
;

45 
	t__kî√l_mqd_t
;

47 
	~<asm/posix_ty≥s.h
>

	@/usr/include/linux/socket.h

1 #i‚de‡
_LINUX_SOCKET_H


2 
	#_LINUX_SOCKET_H


	)

7 
	#_K_SS_MAXSIZE
 128

	)

8 
	#_K_SS_ALIGNSIZE
 (
	`__Æignof__
 (
sockaddr
 *))

	)

11 
	t__kî√l_ß_Ámûy_t
;

13 
	s__kî√l_sockaddr_°‹age
 {

14 
__kî√l_ß_Ámûy_t
 
	mss_Ámûy
;

16 
	m__d©a
[
_K_SS_MAXSIZE
 - ()];

19 } 
__©åibuã__
 ((
Æig√d
(
_K_SS_ALIGNSIZE
)));

	@/usr/include/rpc/netdb.h

36 #i‚de‡
_RPC_NETDB_H


37 
	#_RPC_NETDB_H
 1

	)

39 
	~<„©uªs.h
>

41 
	#__√ed_size_t


	)

42 
	~<°ddef.h
>

44 
__BEGIN_DECLS


46 
	sΩ˚¡


48 *
	mr_«me
;

49 **
	mr_Æü£s
;

50 
	mr_numbî
;

53 
	$£åp˚¡
 (
__°ay›í
Ë
__THROW
;

54 
	$ídΩ˚¡
 (Ë
__THROW
;

55 
Ω˚¡
 *
	$gëΩcby«me
 (
__c⁄°
 *
__«me
Ë
__THROW
;

56 
Ω˚¡
 *
	$gëΩcbynumbî
 (
__numbî
Ë
__THROW
;

57 
Ω˚¡
 *
	$gëΩ˚¡
 (Ë
__THROW
;

59 #ifde‡
__USE_MISC


60 
	$gëΩcby«me_r
 (
__c⁄°
 *
__«me
, 
Ω˚¡
 *
__ªsu…_buf
,

61 *
__buf„r
, 
size_t
 
__buÊí
,

62 
Ω˚¡
 **
__ªsu…
Ë
__THROW
;

64 
	$gëΩcbynumbî_r
 (
__numbî
, 
Ω˚¡
 *
__ªsu…_buf
,

65 *
__buf„r
, 
size_t
 
__buÊí
,

66 
Ω˚¡
 **
__ªsu…
Ë
__THROW
;

68 
	$gëΩ˚¡_r
 (
Ω˚¡
 *
__ªsu…_buf
, *
__buf„r
,

69 
size_t
 
__buÊí
, 
Ω˚¡
 **
__ªsu…
Ë
__THROW
;

72 
__END_DECLS


	@/usr/include/sched.h

21 #i‚def 
_SCHED_H


22 
	#_SCHED_H
 1

	)

24 
	~<„©uªs.h
>

27 
	~<bôs/ty≥s.h
>

29 
	#__√ed_size_t


	)

30 
	~<°ddef.h
>

32 
	#__√ed_time_t


	)

33 
	#__√ed_time•ec


	)

34 
	~<time.h
>

36 #i‚de‡
__pid_t_deföed


37 
__pid_t
 
	tpid_t
;

38 
	#__pid_t_deföed


	)

43 
	~<bôs/sched.h
>

45 
	#sched_¥i‹ôy
 
__sched_¥i‹ôy


	)

48 
__BEGIN_DECLS


51 
	$sched_£ç¨am
 (
__pid_t
 
__pid
, 
__c⁄°
 
sched_∑øm
 *
__∑øm
)

52 
__THROW
;

55 
	$sched_gë∑øm
 (
__pid_t
 
__pid
, 
sched_∑øm
 *
__∑øm
Ë
__THROW
;

58 
	$sched_£tscheduÀr
 (
__pid_t
 
__pid
, 
__pﬁicy
,

59 
__c⁄°
 
sched_∑øm
 *
__∑øm
Ë
__THROW
;

62 
	$sched_gëscheduÀr
 (
__pid_t
 
__pid
Ë
__THROW
;

65 
	$sched_yõld
 (Ë
__THROW
;

68 
	$sched_gë_¥i‹ôy_max
 (
__Æg‹ôhm
Ë
__THROW
;

71 
	$sched_gë_¥i‹ôy_mö
 (
__Æg‹ôhm
Ë
__THROW
;

74 
	$sched_º_gë_öãrvÆ
 (
__pid_t
 
__pid
, 
time•ec
 *
__t
Ë
__THROW
;

77 #ifde‡
__USE_GNU


79 
	#CPU_SETSIZE
 
__CPU_SETSIZE


	)

80 
	#CPU_SET
(
˝u
, 
˝u£ç
Ë
	`__CPU_SET_S
 (˝u,  (
˝u_£t_t
), cpu£ç)

	)

81 
	#CPU_CLR
(
˝u
, 
˝u£ç
Ë
	`__CPU_CLR_S
 (˝u,  (
˝u_£t_t
), cpu£ç)

	)

82 
	#CPU_ISSET
(
˝u
, 
˝u£ç
Ë
	`__CPU_ISSET_S
 (˝u,  (
˝u_£t_t
), \

83 
˝u£ç
)

	)

84 
	#CPU_ZERO
(
˝u£ç
Ë
	`__CPU_ZERO_S
 ( (
˝u_£t_t
), cpu£ç)

	)

85 
	#CPU_COUNT
(
˝u£ç
Ë
	`__CPU_COUNT_S
 ( (
˝u_£t_t
), cpu£ç)

	)

87 
	#CPU_SET_S
(
˝u
, 
£tsize
, 
˝u£ç
Ë
	`__CPU_SET_S
 (˝u, sësize, cpu£ç)

	)

88 
	#CPU_CLR_S
(
˝u
, 
£tsize
, 
˝u£ç
Ë
	`__CPU_CLR_S
 (˝u, sësize, cpu£ç)

	)

89 
	#CPU_ISSET_S
(
˝u
, 
£tsize
, 
˝u£ç
Ë
	`__CPU_ISSET_S
 (cpu, setsize, \

90 
˝u£ç
)

	)

91 
	#CPU_ZERO_S
(
£tsize
, 
˝u£ç
Ë
	`__CPU_ZERO_S
 (£tsize, cpu£ç)

	)

92 
	#CPU_COUNT_S
(
£tsize
, 
˝u£ç
Ë
	`__CPU_COUNT_S
 (£tsize, cpu£ç)

	)

94 
	#CPU_EQUAL
(
˝u£ç1
, 
˝u£ç2
) \

95 
	`__CPU_EQUAL_S
 ( (
˝u_£t_t
), 
˝u£ç1
, 
˝u£ç2
)

	)

96 
	#CPU_EQUAL_S
(
£tsize
, 
˝u£ç1
, 
˝u£ç2
) \

97 
	`__CPU_EQUAL_S
 (
£tsize
, 
˝u£ç1
, 
˝u£ç2
)

	)

99 
	#CPU_AND
(
de°£t
, 
§c£t1
, 
§c£t2
) \

100 
	`__CPU_OP_S
 ( (
˝u_£t_t
), 
de°£t
, 
§c£t1
, 
§c£t2
, &)

	)

101 
	#CPU_OR
(
de°£t
, 
§c£t1
, 
§c£t2
) \

102 
	`__CPU_OP_S
 ( (
˝u_£t_t
), 
de°£t
, 
§c£t1
, 
§c£t2
, |)

	)

103 
	#CPU_XOR
(
de°£t
, 
§c£t1
, 
§c£t2
) \

104 
	`__CPU_OP_S
 ( (
˝u_£t_t
), 
de°£t
, 
§c£t1
, 
§c£t2
, ^)

	)

105 
	#CPU_AND_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
) \

106 
	`__CPU_OP_S
 (
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, &)

	)

107 
	#CPU_OR_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
) \

108 
	`__CPU_OP_S
 (
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, |)

	)

109 
	#CPU_XOR_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
) \

110 
	`__CPU_OP_S
 (
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, ^)

	)

112 
	#CPU_ALLOC_SIZE
(
cou¡
Ë
	`__CPU_ALLOC_SIZE
 (cou¡)

	)

113 
	#CPU_ALLOC
(
cou¡
Ë
	`__CPU_ALLOC
 (cou¡)

	)

114 
	#CPU_FREE
(
˝u£t
Ë
	`__CPU_FREE
 (˝u£t)

	)

118 
	$sched_£èfföôy
 (
__pid_t
 
__pid
, 
size_t
 
__˝u£tsize
,

119 
__c⁄°
 
˝u_£t_t
 *
__˝u£t
Ë
__THROW
;

122 
	$sched_gëafföôy
 (
__pid_t
 
__pid
, 
size_t
 
__˝u£tsize
,

123 
˝u_£t_t
 *
__˝u£t
Ë
__THROW
;

126 
__END_DECLS


	@/usr/include/xlocale.h

21 #i‚de‡
_XLOCALE_H


22 
	#_XLOCALE_H
 1

	)

28 
	s__loˇÀ_°ru˘


31 
__loˇÀ_d©a
 *
	m__loˇÀs
[13];

34 c⁄° *
	m__˘y≥_b
;

35 c⁄° *
	m__˘y≥_tﬁowî
;

36 c⁄° *
	m__˘y≥_touµî
;

39 c⁄° *
	m__«mes
[13];

40 } *
	t__loˇÀ_t
;

43 
__loˇÀ_t
 
	tloˇÀ_t
;

	@/usr/include/_G_config.h

4 #i‚de‡
_G_c⁄fig_h


5 
	#_G_c⁄fig_h
 1

	)

9 
	~<bôs/ty≥s.h
>

10 
	#__√ed_size_t


	)

11 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


12 
	#__√ed_wch¨_t


	)

14 
	#__√ed_NULL


	)

15 
	~<°ddef.h
>

16 
	#__√ed_mb°©e_t


	)

17 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


18 
	#__√ed_wöt_t


	)

20 
	~<wch¨.h
>

21 
	#_G_size_t
 
size_t


	)

24 
__off_t
 
	m__pos
;

25 
__mb°©e_t
 
	m__°©e
;

26 } 
	t_G_Âos_t
;

29 
__off64_t
 
	m__pos
;

30 
__mb°©e_t
 
	m__°©e
;

31 } 
	t_G_Âos64_t
;

32 
	#_G_ssize_t
 
__ssize_t


	)

33 
	#_G_off_t
 
__off_t


	)

34 
	#_G_off64_t
 
__off64_t


	)

35 
	#_G_pid_t
 
__pid_t


	)

36 
	#_G_uid_t
 
__uid_t


	)

37 
	#_G_wch¨_t
 
wch¨_t


	)

38 
	#_G_wöt_t
 
wöt_t


	)

39 
	#_G_°©64
 
°©64


	)

40 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


41 
	~<gc⁄v.h
>

44 
__gc⁄v_öfo
 
	m__cd
;

47 
__gc⁄v_öfo
 
	m__cd
;

48 
__gc⁄v_°ï_d©a
 
	m__d©a
;

49 } 
	m__comböed
;

50 } 
	t_G_ic⁄v_t
;

53 
	t_G_öt16_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__HI__
)));

54 
	t_G_öt32_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__SI__
)));

55 
	t_G_uöt16_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__HI__
)));

56 
	t_G_uöt32_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__SI__
)));

58 
	#_G_HAVE_BOOL
 1

	)

62 
	#_G_HAVE_ATEXIT
 1

	)

63 
	#_G_HAVE_SYS_CDEFS
 1

	)

64 
	#_G_HAVE_SYS_WAIT
 1

	)

65 
	#_G_NEED_STDARG_H
 1

	)

66 
	#_G_va_li°
 
__gnuc_va_li°


	)

68 
	#_G_HAVE_PRINTF_FP
 1

	)

69 
	#_G_HAVE_MMAP
 1

	)

70 
	#_G_HAVE_MREMAP
 1

	)

71 
	#_G_HAVE_LONG_DOUBLE_IO
 1

	)

72 
	#_G_HAVE_IO_FILE_OPEN
 1

	)

73 
	#_G_HAVE_IO_GETLINE_INFO
 1

	)

75 
	#_G_IO_IO_FILE_VERSION
 0x20001

	)

77 
	#_G_OPEN64
 
__›í64


	)

78 
	#_G_LSEEK64
 
__l£ek64


	)

79 
	#_G_MMAP64
 
__mm≠64


	)

80 
	#_G_FSTAT64
(
fd
,
buf
Ë
	`__fx°©64
 (
_STAT_VER
, fd, buf)

	)

83 
	#_G_HAVE_ST_BLKSIZE
 
	`deföed
 (
_STATBUF_ST_BLKSIZE
)

	)

85 
	#_G_BUFSIZ
 8192

	)

88 
	#_G_NAMES_HAVE_UNDERSCORE
 0

	)

89 
	#_G_VTABLE_LABEL_HAS_LENGTH
 1

	)

90 
	#_G_USING_THUNKS
 1

	)

91 
	#_G_VTABLE_LABEL_PREFIX
 "__vt_"

	)

92 
	#_G_VTABLE_LABEL_PREFIX_ID
 
__vt_


	)

95 #i‡
deföed
 
__˝lu•lus
 || deföed 
__STDC__


96 
	#_G_ARGS
(
ARGLIST
Ë
	)
ARGLIST

98 
	#_G_ARGS
(
ARGLIST
Ë()

	)

	@/usr/include/linux/hdlc/ioctl.h

1 #i‚de‡
__HDLC_IOCTL_H__


2 
	#__HDLC_IOCTL_H__


	)

5 
	#GENERIC_HDLC_VERSION
 4

	)

7 
	#CLOCK_DEFAULT
 0

	)

8 
	#CLOCK_EXT
 1

	)

9 
	#CLOCK_INT
 2

	)

10 
	#CLOCK_TXINT
 3

	)

11 
	#CLOCK_TXFROMRX
 4

	)

14 
	#ENCODING_DEFAULT
 0

	)

15 
	#ENCODING_NRZ
 1

	)

16 
	#ENCODING_NRZI
 2

	)

17 
	#ENCODING_FM_MARK
 3

	)

18 
	#ENCODING_FM_SPACE
 4

	)

19 
	#ENCODING_MANCHESTER
 5

	)

22 
	#PARITY_DEFAULT
 0

	)

23 
	#PARITY_NONE
 1

	)

24 
	#PARITY_CRC16_PR0
 2

	)

25 
	#PARITY_CRC16_PR1
 3

	)

26 
	#PARITY_CRC16_PR0_CCITT
 4

	)

27 
	#PARITY_CRC16_PR1_CCITT
 5

	)

28 
	#PARITY_CRC32_PR0_CCITT
 6

	)

29 
	#PARITY_CRC32_PR1_CCITT
 7

	)

31 
	#LMI_DEFAULT
 0

	)

32 
	#LMI_NONE
 1

	)

33 
	#LMI_ANSI
 2

	)

34 
	#LMI_CCITT
 3

	)

35 
	#LMI_CISCO
 4

	)

38 
	m˛ock_øã
;

39 
	m˛ock_ty≥
;

40 
	mlo›back
;

41 } 
	tsync_£rül_£âögs
;

44 
	m˛ock_øã
;

45 
	m˛ock_ty≥
;

46 
	mlo›back
;

47 
	m¶Ÿ_m≠
;

48 } 
	tã1_£âögs
;

51 
	mícodög
;

52 
	m∑rôy
;

53 } 
	tøw_hdlc_¥Ÿo
;

56 
	mt391
;

57 
	mt392
;

58 
	mn391
;

59 
	mn392
;

60 
	mn393
;

61 
	mlmi
;

62 
	md˚
;

63 } 
	t‰_¥Ÿo
;

66 
	mdlci
;

67 } 
	t‰_¥Ÿo_pvc
;

70 
	mdlci
;

71 
	mma°î
[
IFNAMSIZ
];

72 }
	t‰_¥Ÿo_pvc_öfo
;

75 
	möãrvÆ
;

76 
	mtimeout
;

77 } 
	tcisco_¥Ÿo
;

	@/usr/include/linux/stddef.h

1 #i‚de‡
_LINUX_STDDEF_H


2 
	#_LINUX_STDDEF_H


	)

6 #unde‡
NULL


7 #i‡
deföed
(
__˝lu•lus
)

8 
	#NULL
 0

	)

10 
	#NULL
 ((*)0)

	)

	@/usr/include/gconv.h

23 #i‚de‡
_GCONV_H


24 
	#_GCONV_H
 1

	)

26 
	~<„©uªs.h
>

27 
	#__√ed_mb°©e_t


	)

28 
	#__√ed_wöt_t


	)

29 
	~<wch¨.h
>

30 
	#__√ed_size_t


	)

31 
	#__√ed_wch¨_t


	)

32 
	~<°ddef.h
>

35 
	#__UNKNOWN_10646_CHAR
 ((
wch¨_t
Ë0xfffd)

	)

40 
	m__GCONV_OK
 = 0,

41 
	m__GCONV_NOCONV
,

42 
	m__GCONV_NODB
,

43 
	m__GCONV_NOMEM
,

45 
	m__GCONV_EMPTY_INPUT
,

46 
	m__GCONV_FULL_OUTPUT
,

47 
	m__GCONV_ILLEGAL_INPUT
,

48 
	m__GCONV_INCOMPLETE_INPUT
,

50 
	m__GCONV_ILLEGAL_DESCRIPTOR
,

51 
	m__GCONV_INTERNAL_ERROR


58 
	m__GCONV_IS_LAST
 = 0x0001,

59 
	m__GCONV_IGNORE_ERRORS
 = 0x0002

64 
	g__gc⁄v_°ï
;

65 
	g__gc⁄v_°ï_d©a
;

66 
	g__gc⁄v_lﬂded_obje˘
;

67 
	g__gc⁄v_å™s_d©a
;

71 (*
	t__gc⁄v_f˘
Ë(
	t__gc⁄v_°ï
 *, 
	t__gc⁄v_°ï_d©a
 *,

72 
	t__c⁄°
 **, __const *,

73 **, 
	tsize_t
 *, , );

76 
	$wöt_t
 (*
	t__gc⁄v_btowc_f˘
Ë(
	t__gc⁄v_°ï
 *, );

79 (*
	t__gc⁄v_öô_f˘
Ë(
	t__gc⁄v_°ï
 *);

80 (*
	t__gc⁄v_íd_f˘
Ë(
	t__gc⁄v_°ï
 *);

84 (*
	t__gc⁄v_å™s_f˘
Ë(
	t__gc⁄v_°ï
 *,

85 
	t__gc⁄v_°ï_d©a
 *, *,

86 
	t__c⁄°
 *,

87 
	t__c⁄°
 **,

88 
	t__c⁄°
 *, **,

89 
	tsize_t
 *);

92 (*
	t__gc⁄v_å™s_c⁄ãxt_f˘
Ë(*, 
	t__c⁄°
 *,

93 
	t__c⁄°
 *,

97 (*
	t__gc⁄v_å™s_quîy_f˘
Ë(
	t__c⁄°
 *, __const ***,

98 
	tsize_t
 *);

101 (*
	t__gc⁄v_å™s_öô_f˘
) (**, const *);

102 (*
	t__gc⁄v_å™s_íd_f˘
) (*);

104 
	s__gc⁄v_å™s_d©a


107 
__gc⁄v_å™s_f˘
 
__å™s_f˘
;

108 
__gc⁄v_å™s_c⁄ãxt_f˘
 
__å™s_c⁄ãxt_f˘
;

109 
__gc⁄v_å™s_íd_f˘
 
__å™s_íd_f˘
;

110 *
__d©a
;

111 
__gc⁄v_å™s_d©a
 *
__√xt
;

116 
	s__gc⁄v_°ï


118 
__gc⁄v_lﬂded_obje˘
 *
__shlib_h™dÀ
;

119 
__c⁄°
 *
__mod«me
;

121 
__cou¡î
;

123 *
__‰om_«me
;

124 *
__to_«me
;

126 
__gc⁄v_f˘
 
__f˘
;

127 
__gc⁄v_btowc_f˘
 
__btowc_f˘
;

128 
__gc⁄v_öô_f˘
 
__öô_f˘
;

129 
__gc⁄v_íd_f˘
 
__íd_f˘
;

133 
__mö_√eded_‰om
;

134 
__max_√eded_‰om
;

135 
__mö_√eded_to
;

136 
__max_√eded_to
;

139 
__°©eful
;

141 *
__d©a
;

146 
	s__gc⁄v_°ï_d©a


148 *
__outbuf
;

149 *
__outbu„nd
;

153 
__Êags
;

157 
__övoˇti⁄_cou¡î
;

161 
__öã∫Æ_u£
;

163 
__mb°©e_t
 *
__°©ï
;

164 
__mb°©e_t
 
__°©e
;

168 
__gc⁄v_å™s_d©a
 *
__å™s
;

173 
	s__gc⁄v_öfo


175 
size_t
 
__n°ïs
;

176 
__gc⁄v_°ï
 *
__°ïs
;

177 
__exãnsi⁄__
 
__gc⁄v_°ï_d©a
 
__d©a
 
__Êex¨r
;

178 } *
	t__gc⁄v_t
;

	@/usr/include/wchar.h

24 #i‚de‡
_WCHAR_H


26 #i‡!
deföed
 
__√ed_mb°©e_t
 && !deföed 
__√ed_wöt_t


27 
	#_WCHAR_H
 1

	)

28 
	~<„©uªs.h
>

31 #ifde‡
_WCHAR_H


33 
	#__√ed___FILE


	)

34 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


35 
	#__√ed_FILE


	)

37 
	~<°dio.h
>

39 
	#__√ed___va_li°


	)

40 
	~<°d¨g.h
>

42 
	~<bôs/wch¨.h
>

45 
	#__√ed_size_t


	)

46 
	#__√ed_wch¨_t


	)

47 
	#__√ed_NULL


	)

49 #i‡
deföed
 
_WCHAR_H
 || deföed 
__√ed_wöt_t
 || !deföed 
__WINT_TYPE__


50 #unde‡
__√ed_wöt_t


51 
	#__√ed_wöt_t


	)

52 
	~<°ddef.h
>

56 #i‚de‡
_WINT_T


61 
	#_WINT_T


	)

62 
	twöt_t
;

66 #i‡
deföed
 
__˝lu•lus
 && deföed 
_GLIBCPP_USE_NAMESPACES
 \

67 && 
deföed
 
__WINT_TYPE__


68 
__BEGIN_NAMESPACE_STD


69 
__WINT_TYPE__
 
	twöt_t
;

70 
	g__END_NAMESPACE_STD


75 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (4, 4)

76 
	#__CORRECT_ISO_CPP_WCHAR_H_PROTO


	)

80 #i‡(
deföed
 
_WCHAR_H
 || deföed 
__√ed_mb°©e_t
Ë&& !deföed 
__mb°©e_t_deföed


81 
	#__mb°©e_t_deföed
 1

	)

85 
	m__cou¡
;

88 #ifde‡
__WINT_TYPE__


89 
__WINT_TYPE__
 
	m__wch
;

91 
wöt_t
 
	m__wch
;

93 
	m__wchb
[4];

94 } 
	m__vÆue
;

95 } 
	t__mb°©e_t
;

97 #unde‡
__√ed_mb°©e_t


102 #ifde‡
_WCHAR_H


104 
__BEGIN_NAMESPACE_C99


106 
__mb°©e_t
 
	tmb°©e_t
;

107 
	g__END_NAMESPACE_C99


108 #ifde‡
__USE_GNU


109 
	$__USING_NAMESPACE_C99
(
mb°©e_t
)

112 #i‚de‡
WCHAR_MIN


114 
	#WCHAR_MIN
 
__WCHAR_MIN


	)

115 
	#WCHAR_MAX
 
__WCHAR_MAX


	)

118 #i‚de‡
WEOF


119 
	#WEOF
 (0xffffffffu)

	)

124 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_UNIX98


125 
	~<w˘y≥.h
>

129 
__BEGIN_DECLS


131 
__BEGIN_NAMESPACE_STD


134 
tm
;

135 
__END_NAMESPACE_STD


139 
	$__USING_NAMESPACE_STD
(
tm
)

142 
__BEGIN_NAMESPACE_STD


144 
wch¨_t
 *
	$wcs˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

145 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
Ë
__THROW
;

147 
wch¨_t
 *
	$wc¢˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

148 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

149 
__THROW
;

152 
wch¨_t
 *
	$wcsˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

153 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
Ë
__THROW
;

155 
wch¨_t
 *
	$wc¢ˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

156 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

157 
__THROW
;

160 
	$wcscmp
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
)

161 
__THROW
 
__©åibuã_puª__
;

163 
	$wc¢cmp
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
, 
size_t
 
__n
)

164 
__THROW
 
__©åibuã_puª__
;

165 
__END_NAMESPACE_STD


167 #ifde‡
__USE_XOPEN2K8


169 
	$wcsˇ£cmp
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
Ë
__THROW
;

172 
	$wc¢ˇ£cmp
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
,

173 
size_t
 
__n
Ë
__THROW
;

177 
	~<xloˇÀ.h
>

179 
	$wcsˇ£cmp_l
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
,

180 
__loˇÀ_t
 
__loc
Ë
__THROW
;

182 
	$wc¢ˇ£cmp_l
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
,

183 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

186 
__BEGIN_NAMESPACE_STD


189 
	$wcscﬁl
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
Ë
__THROW
;

193 
size_t
 
	$wcsx‰m
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

194 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
Ë
__THROW
;

195 
__END_NAMESPACE_STD


197 #ifde‡
__USE_XOPEN2K8


203 
	$wcscﬁl_l
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
,

204 
__loˇÀ_t
 
__loc
Ë
__THROW
;

209 
size_t
 
	$wcsx‰m_l
 (
wch¨_t
 *
__s1
, 
__c⁄°
 wch¨_à*
__s2
,

210 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

213 
wch¨_t
 *
	$wcsdup
 (
__c⁄°
 
wch¨_t
 *
__s
Ë
__THROW
 
__©åibuã_mÆloc__
;

216 
__BEGIN_NAMESPACE_STD


218 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


219 "C++" 
wch¨_t
 *
	$wcschr
 (
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

220 
__THROW
 
	`__asm
 ("wcschr"Ë
__©åibuã_puª__
;

221 "C++" 
__c⁄°
 
wch¨_t
 *
	$wcschr
 (
__c⁄°
 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

222 
__THROW
 
	`__asm
 ("wcschr"Ë
__©åibuã_puª__
;

224 
wch¨_t
 *
	$wcschr
 (
__c⁄°
 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

225 
__THROW
 
__©åibuã_puª__
;

228 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


229 "C++" 
wch¨_t
 *
	$wc§chr
 (
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

230 
__THROW
 
	`__asm
 ("wc§chr"Ë
__©åibuã_puª__
;

231 "C++" 
__c⁄°
 
wch¨_t
 *
	$wc§chr
 (
__c⁄°
 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

232 
__THROW
 
	`__asm
 ("wc§chr"Ë
__©åibuã_puª__
;

234 
wch¨_t
 *
	$wc§chr
 (
__c⁄°
 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

235 
__THROW
 
__©åibuã_puª__
;

237 
__END_NAMESPACE_STD


239 #ifde‡
__USE_GNU


242 
wch¨_t
 *
	$wcsch∫ul
 (
__c⁄°
 
wch¨_t
 *
__s
, wch¨_à
__wc
)

243 
__THROW
 
__©åibuã_puª__
;

246 
__BEGIN_NAMESPACE_STD


249 
size_t
 
	$wcsc•n
 (
__c⁄°
 
wch¨_t
 *
__wcs
, __c⁄° wch¨_à*
__ªje˘
)

250 
__THROW
 
__©åibuã_puª__
;

253 
size_t
 
	$wcs•n
 (
__c⁄°
 
wch¨_t
 *
__wcs
, __c⁄° wch¨_à*
__ac˚±
)

254 
__THROW
 
__©åibuã_puª__
;

256 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


257 "C++" 
wch¨_t
 *
	$wc•brk
 (
wch¨_t
 *
__wcs
, 
__c⁄°
 wch¨_à*
__ac˚±
)

258 
__THROW
 
	`__asm
 ("wc•brk"Ë
__©åibuã_puª__
;

259 "C++" 
__c⁄°
 
wch¨_t
 *
	$wc•brk
 (
__c⁄°
 
wch¨_t
 *
__wcs
,

260 
__c⁄°
 
wch¨_t
 *
__ac˚±
)

261 
__THROW
 
	`__asm
 ("wc•brk"Ë
__©åibuã_puª__
;

263 
wch¨_t
 *
	$wc•brk
 (
__c⁄°
 
wch¨_t
 *
__wcs
, __c⁄° wch¨_à*
__ac˚±
)

264 
__THROW
 
__©åibuã_puª__
;

267 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


268 "C++" 
wch¨_t
 *
	$wcs°r
 (
wch¨_t
 *
__hay°ack
, 
__c⁄°
 wch¨_à*
__√edÀ
)

269 
__THROW
 
	`__asm
 ("wcs°r"Ë
__©åibuã_puª__
;

270 "C++" 
__c⁄°
 
wch¨_t
 *
	$wcs°r
 (
__c⁄°
 
wch¨_t
 *
__hay°ack
,

271 
__c⁄°
 
wch¨_t
 *
__√edÀ
)

272 
__THROW
 
	`__asm
 ("wcs°r"Ë
__©åibuã_puª__
;

274 
wch¨_t
 *
	$wcs°r
 (
__c⁄°
 
wch¨_t
 *
__hay°ack
, __c⁄° wch¨_à*
__√edÀ
)

275 
__THROW
 
__©åibuã_puª__
;

279 
wch¨_t
 *
	$wc°ok
 (
wch¨_t
 *
__ª°ri˘
 
__s
,

280 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__dñim
,

281 
wch¨_t
 **
__ª°ri˘
 
__±r
Ë
__THROW
;

284 
size_t
 
	$wc¶í
 (
__c⁄°
 
wch¨_t
 *
__s
Ë
__THROW
 
__©åibuã_puª__
;

285 
__END_NAMESPACE_STD


287 #ifde‡
__USE_XOPEN


289 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


290 "C++" 
wch¨_t
 *
	$wcswcs
 (
wch¨_t
 *
__hay°ack
, 
__c⁄°
 wch¨_à*
__√edÀ
)

291 
__THROW
 
	`__asm
 ("wcswcs"Ë
__©åibuã_puª__
;

292 "C++" 
__c⁄°
 
wch¨_t
 *
	$wcswcs
 (
__c⁄°
 
wch¨_t
 *
__hay°ack
,

293 
__c⁄°
 
wch¨_t
 *
__√edÀ
)

294 
__THROW
 
	`__asm
 ("wcswcs"Ë
__©åibuã_puª__
;

296 
wch¨_t
 *
	$wcswcs
 (
__c⁄°
 
wch¨_t
 *
__hay°ack
, __c⁄° wch¨_à*
__√edÀ
)

297 
__THROW
 
__©åibuã_puª__
;

301 #ifde‡
__USE_XOPEN2K8


303 
size_t
 
	$wc¢Àn
 (
__c⁄°
 
wch¨_t
 *
__s
, 
size_t
 
__maxÀn
)

304 
__THROW
 
__©åibuã_puª__
;

308 
__BEGIN_NAMESPACE_STD


310 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


311 "C++" 
wch¨_t
 *
	$wmemchr
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
)

312 
__THROW
 
	`__asm
 ("wmemchr"Ë
__©åibuã_puª__
;

313 "C++" 
__c⁄°
 
wch¨_t
 *
	$wmemchr
 (
__c⁄°
 
wch¨_t
 *
__s
, wch¨_à
__c
,

314 
size_t
 
__n
)

315 
__THROW
 
	`__asm
 ("wmemchr"Ë
__©åibuã_puª__
;

317 
wch¨_t
 *
	$wmemchr
 (
__c⁄°
 
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
)

318 
__THROW
 
__©åibuã_puª__
;

322 
	$wmemcmp
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s1
,

323 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
)

324 
__THROW
 
__©åibuã_puª__
;

327 
wch¨_t
 *
	$wmem˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

328 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
Ë
__THROW
;

332 
wch¨_t
 *
	$wmemmove
 (
wch¨_t
 *
__s1
, 
__c⁄°
 wch¨_à*
__s2
, 
size_t
 
__n
)

333 
__THROW
;

336 
wch¨_t
 *
	$wmem£t
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
Ë
__THROW
;

337 
__END_NAMESPACE_STD


339 #ifde‡
__USE_GNU


342 
wch¨_t
 *
	$wmemp˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

343 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
)

344 
__THROW
;

348 
__BEGIN_NAMESPACE_STD


351 
wöt_t
 
	$btowc
 (
__c
Ë
__THROW
;

355 
	$w˘ob
 (
wöt_t
 
__c
Ë
__THROW
;

359 
	$mbsöô
 (
__c⁄°
 
mb°©e_t
 *
__ps
Ë
__THROW
 
__©åibuã_puª__
;

363 
size_t
 
	$mbπowc
 (
wch¨_t
 *
__ª°ri˘
 
__pwc
,

364 
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

365 
mb°©e_t
 *
__p
Ë
__THROW
;

368 
size_t
 
	$w¸tomb
 (*
__ª°ri˘
 
__s
, 
wch¨_t
 
__wc
,

369 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

372 
size_t
 
	$__mbæí
 (
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

373 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

374 
size_t
 
	$mbæí
 (
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

375 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

376 
__END_NAMESPACE_STD


378 #ifde‡
__USE_EXTERN_INLINES


384 
wöt_t
 
	$__btowc_Æüs
 (
__c
Ë
	`__asm
 ("btowc");

385 
__exã∫_ölöe
 
wöt_t


386 
	`__NTH
 (
	$btowc
 (
__c
))

387 {  (
	`__buûtö_c⁄°™t_p
 (
__c
) && __c >= '\0' && __c <= '\x7f'

388 ? (
wöt_t
Ë
__c
 : 
	`__btowc_Æüs
 (__c)); 
	}
}

390 
	$__w˘ob_Æüs
 (
wöt_t
 
__c
Ë
	`__asm
 ("wctob");

391 
__exã∫_ölöe
 

392 
	`__NTH
 (
	$w˘ob
 (
wöt_t
 
__wc
))

393 {  (
	`__buûtö_c⁄°™t_p
 (
__wc
Ë&& __w¯>
L
'\0' && __wc <= L'\x7f'

394 ? (Ë
__wc
 : 
	`__w˘ob_Æüs
 (__wc)); 
	}
}

396 
__exã∫_ölöe
 
size_t


397 
__NTH
 (
	$mbæí
 (
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

398 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

399 {  (
__ps
 !
NULL


400 ? 
	`mbπowc
 (
NULL
, 
__s
, 
__n
, 
__ps
Ë: 
	`__mbæí
 (__s, __n, NULL)); 
	}
}

403 
__BEGIN_NAMESPACE_STD


406 
size_t
 
	$mb§towcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

407 
__c⁄°
 **
__ª°ri˘
 
__§c
, 
size_t
 
__Àn
,

408 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

412 
size_t
 
	$wc§tombs
 (*
__ª°ri˘
 
__d°
,

413 
__c⁄°
 
wch¨_t
 **
__ª°ri˘
 
__§c
, 
size_t
 
__Àn
,

414 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

415 
__END_NAMESPACE_STD


418 #ifdef 
__USE_XOPEN2K8


421 
size_t
 
	$mb¢πowcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

422 
__c⁄°
 **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

423 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

427 
size_t
 
	$wc¢πombs
 (*
__ª°ri˘
 
__d°
,

428 
__c⁄°
 
wch¨_t
 **
__ª°ri˘
 
__§c
,

429 
size_t
 
__nwc
, size_à
__Àn
,

430 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

435 #ifde‡
__USE_XOPEN


437 
	$wcwidth
 (
wch¨_t
 
__c
Ë
__THROW
;

441 
	$wcswidth
 (
__c⁄°
 
wch¨_t
 *
__s
, 
size_t
 
__n
Ë
__THROW
;

445 
__BEGIN_NAMESPACE_STD


448 
	$wc°od
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

449 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

450 
__END_NAMESPACE_STD


452 #ifde‡
__USE_ISOC99


453 
__BEGIN_NAMESPACE_C99


455 
	$wc°of
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

456 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

457 
	$wc°ﬁd
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

458 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

459 
__END_NAMESPACE_C99


463 
__BEGIN_NAMESPACE_STD


466 
	$wc°ﬁ
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

467 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
Ë
__THROW
;

471 
	$wc°oul
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

472 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

473 
__THROW
;

474 
__END_NAMESPACE_STD


476 #i‡
deföed
 
__USE_ISOC99
 || (deföed 
__GNUC__
 && deföed 
__USE_GNU
)

477 
__BEGIN_NAMESPACE_C99


480 
__exãnsi⁄__


481 
	$wc°ﬁl
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

482 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

483 
__THROW
;

487 
__exãnsi⁄__


488 
	$wc°ouŒ
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

489 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

490 
__ba£
Ë
__THROW
;

491 
__END_NAMESPACE_C99


494 #i‡
deföed
 
__GNUC__
 && deföed 
__USE_GNU


497 
__exãnsi⁄__


498 
	$wc°oq
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

499 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

500 
__THROW
;

504 
__exãnsi⁄__


505 
	$wc°ouq
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

506 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

507 
__ba£
Ë
__THROW
;

510 #ifde‡
__USE_GNU


524 
	~<xloˇÀ.h
>

528 
	$wc°ﬁ_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

529 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

530 
__loˇÀ_t
 
__loc
Ë
__THROW
;

532 
	$wc°oul_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

533 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

534 
__ba£
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

536 
__exãnsi⁄__


537 
	$wc°ﬁl_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

538 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

539 
__ba£
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

541 
__exãnsi⁄__


542 
	$wc°ouŒ_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

543 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

544 
__ba£
, 
__loˇÀ_t
 
__loc
)

545 
__THROW
;

547 
	$wc°od_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

548 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

549 
__THROW
;

551 
	$wc°of_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

552 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

553 
__THROW
;

555 
	$wc°ﬁd_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

556 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

557 
__loˇÀ_t
 
__loc
Ë
__THROW
;

562 
wch¨_t
 *
	$w˝˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

563 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
Ë
__THROW
;

567 
wch¨_t
 *
	$w˝n˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

568 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

569 
__THROW
;

575 #ifdef 
__USE_XOPEN2K8


578 
__FILE
 *
	$›í_wmem°ªam
 (
wch¨_t
 **
__buÊoc
, 
size_t
 *
__sizñoc
Ë
__THROW
;

581 #i‡
deföed
 
__USE_ISOC95
 || deföed 
__USE_UNIX98


582 
__BEGIN_NAMESPACE_STD


585 
	$fwide
 (
__FILE
 *
__Â
, 
__mode
Ë
__THROW
;

592 
	`fw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

593 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

599 
	`w¥ötf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

602 
	$sw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

603 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

604 
__THROW
 ;

610 
	`vfw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__s
,

611 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

612 
__gnuc_va_li°
 
__¨g
)

618 
	`vw¥ötf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

619 
__gnuc_va_li°
 
__¨g
)

623 
	$vsw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

624 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

625 
__gnuc_va_li°
 
__¨g
)

626 
__THROW
 ;

633 
	`fwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

634 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

640 
	`wsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

643 
	$swsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

644 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

645 
__THROW
 ;

647 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

648 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

649 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

650 #ifde‡
__REDIRECT


654 
	`__REDIRECT
 (
fwsˇnf
, (
__FILE
 *
__ª°ri˘
 
__°ªam
,

655 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...),

656 
__isoc99_fwsˇnf
)

658 
	`__REDIRECT
 (
wsˇnf
, (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...),

659 
__isoc99_wsˇnf
)

661 
	`__REDIRECT_NTH
 (
swsˇnf
, (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

662 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

663 ...), 
__isoc99_swsˇnf
)

666 
	`__isoc99_fwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

667 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...);

668 
	`__isoc99_wsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...);

669 
	$__isoc99_swsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

670 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

671 
__THROW
;

672 
	#fwsˇnf
 
__isoc99_fwsˇnf


	)

673 
	#wsˇnf
 
__isoc99_wsˇnf


	)

674 
	#swsˇnf
 
__isoc99_swsˇnf


	)

678 
__END_NAMESPACE_STD


681 #ifde‡
__USE_ISOC99


682 
__BEGIN_NAMESPACE_C99


687 
	`vfwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__s
,

688 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

689 
__gnuc_va_li°
 
__¨g
)

695 
	`vwsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

696 
__gnuc_va_li°
 
__¨g
)

699 
	$vswsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

700 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

701 
__gnuc_va_li°
 
__¨g
)

702 
__THROW
 ;

704 #i‡!
deföed
 
__USE_GNU
 \

705 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

706 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

707 #ifde‡
__REDIRECT


708 
	`__REDIRECT
 (
vfwsˇnf
, (
__FILE
 *
__ª°ri˘
 
__s
,

709 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

710 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vfwsˇnf
)

712 
	`__REDIRECT
 (
vwsˇnf
, (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

713 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vwsˇnf
)

715 
	`__REDIRECT_NTH
 (
vswsˇnf
, (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

716 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

717 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vswsˇnf
)

720 
	`__isoc99_vfwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__s
,

721 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

722 
__gnuc_va_li°
 
__¨g
);

723 
	`__isoc99_vwsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

724 
__gnuc_va_li°
 
__¨g
);

725 
	$__isoc99_vswsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

726 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

727 
__gnuc_va_li°
 
__¨g
Ë
__THROW
;

728 
	#vfwsˇnf
 
__isoc99_vfwsˇnf


	)

729 
	#vwsˇnf
 
__isoc99_vwsˇnf


	)

730 
	#vswsˇnf
 
__isoc99_vswsˇnf


	)

734 
__END_NAMESPACE_C99


738 
__BEGIN_NAMESPACE_STD


743 
wöt_t
 
	`fgëwc
 (
__FILE
 *
__°ªam
);

744 
wöt_t
 
	`gëwc
 (
__FILE
 *
__°ªam
);

750 
wöt_t
 
	`gëwch¨
 ();

757 
wöt_t
 
	`Âutwc
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

758 
wöt_t
 
	`putwc
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

764 
wöt_t
 
	`putwch¨
 (
wch¨_t
 
__wc
);

772 
wch¨_t
 *
	`fgëws
 (wch¨_à*
__ª°ri˘
 
__ws
, 
__n
,

773 
__FILE
 *
__ª°ri˘
 
__°ªam
);

779 
	`Âutws
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__ws
,

780 
__FILE
 *
__ª°ri˘
 
__°ªam
);

787 
wöt_t
 
	`ungëwc
 (wöt_à
__wc
, 
__FILE
 *
__°ªam
);

788 
__END_NAMESPACE_STD


791 #ifde‡
__USE_GNU


799 
wöt_t
 
	`gëwc_u∆ocked
 (
__FILE
 *
__°ªam
);

800 
wöt_t
 
	`gëwch¨_u∆ocked
 ();

808 
wöt_t
 
	`fgëwc_u∆ocked
 (
__FILE
 *
__°ªam
);

816 
wöt_t
 
	`Âutwc_u∆ocked
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

825 
wöt_t
 
	`putwc_u∆ocked
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

826 
wöt_t
 
	`putwch¨_u∆ocked
 (
wch¨_t
 
__wc
);

835 
wch¨_t
 *
	`fgëws_u∆ocked
 (wch¨_à*
__ª°ri˘
 
__ws
, 
__n
,

836 
__FILE
 *
__ª°ri˘
 
__°ªam
);

844 
	`Âutws_u∆ocked
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__ws
,

845 
__FILE
 *
__ª°ri˘
 
__°ªam
);

849 
__BEGIN_NAMESPACE_C99


853 
size_t
 
	$wcs·ime
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

854 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

855 
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

856 
__END_NAMESPACE_C99


858 #ifde‡
__USE_GNU


859 
	~<xloˇÀ.h
>

863 
size_t
 
	$wcs·ime_l
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

864 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

865 
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
,

866 
__loˇÀ_t
 
__loc
Ë
__THROW
;

875 #i‡
deföed
 
__USE_UNIX98
 && !deföed 
__USE_GNU


876 
	#__√ed_iswxxx


	)

877 
	~<w˘y≥.h
>

881 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


882 
	~<bôs/wch¨2.h
>

885 #ifde‡
__LDBL_COMPAT


886 
	~<bôs/wch¨-ldbl.h
>

889 
__END_DECLS


897 #unde‡
__√ed_mb°©e_t


898 #unde‡
__√ed_wöt_t


	@/usr/include/wctype.h

24 #i‚de‡
_WCTYPE_H


26 
	~<„©uªs.h
>

27 
	~<bôs/ty≥s.h
>

29 #i‚de‡
__√ed_iswxxx


30 
	#_WCTYPE_H
 1

	)

33 
	#__√ed_wöt_t


	)

34 
	~<wch¨.h
>

38 #i‚de‡
WEOF


39 
	#WEOF
 (0xffffffffu)

	)

42 #unde‡
__√ed_iswxxx


47 #i‚de‡
__iswxxx_deföed


48 
	#__iswxxx_deföed
 1

	)

50 
__BEGIN_NAMESPACE_C99


53 
	tw˘y≥_t
;

54 
	g__END_NAMESPACE_C99


56 #i‚de‡
_ISwbô


61 
	~<ídün.h
>

62 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


63 
	#_ISwbô
(
bô
Ë(1 << (bô))

	)

65 
	#_ISwbô
(
bô
) \

66 ((
bô
) < 8 ? () ((1UL << (bit)) << 24) \

67 : ((
bô
) < 16 ? () ((1UL << (bit)) << 8) \

68 : ((
bô
) < 24 ? () ((1UL << (bit)) >> 8) \

69 : (Ë((1UL << (
bô
)Ë>> 24))))

	)

74 
	m__ISwuµî
 = 0,

75 
	m__ISwlowî
 = 1,

76 
	m__ISwÆpha
 = 2,

77 
	m__ISwdigô
 = 3,

78 
	m__ISwxdigô
 = 4,

79 
	m__ISw•a˚
 = 5,

80 
	m__ISw¥öt
 = 6,

81 
	m__ISwgøph
 = 7,

82 
	m__ISwbœnk
 = 8,

83 
	m__ISw˙ål
 = 9,

84 
	m__ISwpun˘
 = 10,

85 
	m__ISwÆnum
 = 11,

87 
	m_ISwuµî
 = 
_ISwbô
 (
__ISwuµî
),

88 
	m_ISwlowî
 = 
_ISwbô
 (
__ISwlowî
),

89 
	m_ISwÆpha
 = 
_ISwbô
 (
__ISwÆpha
),

90 
	m_ISwdigô
 = 
_ISwbô
 (
__ISwdigô
),

91 
	m_ISwxdigô
 = 
_ISwbô
 (
__ISwxdigô
),

92 
	m_ISw•a˚
 = 
_ISwbô
 (
__ISw•a˚
),

93 
	m_ISw¥öt
 = 
_ISwbô
 (
__ISw¥öt
),

94 
	m_ISwgøph
 = 
_ISwbô
 (
__ISwgøph
),

95 
	m_ISwbœnk
 = 
_ISwbô
 (
__ISwbœnk
),

96 
	m_ISw˙ål
 = 
_ISwbô
 (
__ISw˙ål
),

97 
	m_ISwpun˘
 = 
_ISwbô
 (
__ISwpun˘
),

98 
	m_ISwÆnum
 = 
_ISwbô
 (
__ISwÆnum
)

103 
__BEGIN_DECLS


105 
__BEGIN_NAMESPACE_C99


112 
	$iswÆnum
 (
wöt_t
 
__wc
Ë
__THROW
;

118 
	$iswÆpha
 (
wöt_t
 
__wc
Ë
__THROW
;

121 
	$isw˙ål
 (
wöt_t
 
__wc
Ë
__THROW
;

125 
	$iswdigô
 (
wöt_t
 
__wc
Ë
__THROW
;

129 
	$iswgøph
 (
wöt_t
 
__wc
Ë
__THROW
;

134 
	$iswlowî
 (
wöt_t
 
__wc
Ë
__THROW
;

137 
	$isw¥öt
 (
wöt_t
 
__wc
Ë
__THROW
;

142 
	$iswpun˘
 (
wöt_t
 
__wc
Ë
__THROW
;

147 
	$isw•a˚
 (
wöt_t
 
__wc
Ë
__THROW
;

152 
	$iswuµî
 (
wöt_t
 
__wc
Ë
__THROW
;

157 
	$iswxdigô
 (
wöt_t
 
__wc
Ë
__THROW
;

162 #ifde‡
__USE_ISOC99


163 
	$iswbœnk
 (
wöt_t
 
__wc
Ë
__THROW
;

172 
w˘y≥_t
 
	$w˘y≥
 (
__c⁄°
 *
__¥›îty
Ë
__THROW
;

176 
	$isw˘y≥
 (
wöt_t
 
__wc
, 
w˘y≥_t
 
__desc
Ë
__THROW
;

177 
__END_NAMESPACE_C99


184 
__BEGIN_NAMESPACE_C99


187 
__c⁄°
 
	t__öt32_t
 *
	tw˘øns_t
;

188 
__END_NAMESPACE_C99


189 #ifde‡
__USE_GNU


190 
	$__USING_NAMESPACE_C99
(
w˘øns_t
)

193 
__BEGIN_NAMESPACE_C99


195 
wöt_t
 
	$towlowî
 (
wöt_t
 
__wc
Ë
__THROW
;

198 
wöt_t
 
	$towuµî
 (
wöt_t
 
__wc
Ë
__THROW
;

199 
__END_NAMESPACE_C99


201 
__END_DECLS


208 #ifde‡
_WCTYPE_H


214 
__BEGIN_DECLS


216 
__BEGIN_NAMESPACE_C99


219 
w˘øns_t
 
	$w˘øns
 (
__c⁄°
 *
__¥›îty
Ë
__THROW
;

222 
wöt_t
 
	$tow˘øns
 (
wöt_t
 
__wc
, 
w˘øns_t
 
__desc
Ë
__THROW
;

223 
__END_NAMESPACE_C99


225 #ifde‡
__USE_XOPEN2K8


227 
	~<xloˇÀ.h
>

231 
	$iswÆnum_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

237 
	$iswÆpha_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

240 
	$isw˙ål_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

244 
	$iswdigô_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

248 
	$iswgøph_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

253 
	$iswlowî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

256 
	$isw¥öt_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

261 
	$iswpun˘_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

266 
	$isw•a˚_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

271 
	$iswuµî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

276 
	$iswxdigô_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

281 
	$iswbœnk_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

285 
w˘y≥_t
 
	$w˘y≥_l
 (
__c⁄°
 *
__¥›îty
, 
__loˇÀ_t
 
__loˇÀ
)

286 
__THROW
;

290 
	$isw˘y≥_l
 (
wöt_t
 
__wc
, 
w˘y≥_t
 
__desc
, 
__loˇÀ_t
 
__loˇÀ
)

291 
__THROW
;

299 
wöt_t
 
	$towlowî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

302 
wöt_t
 
	$towuµî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

306 
w˘øns_t
 
	$w˘øns_l
 (
__c⁄°
 *
__¥›îty
, 
__loˇÀ_t
 
__loˇÀ
)

307 
__THROW
;

310 
wöt_t
 
	$tow˘øns_l
 (
wöt_t
 
__wc
, 
w˘øns_t
 
__desc
,

311 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

315 
__END_DECLS


	@
1
.
1
/usr/include
482
11767
android/arch/syslimits.h
android/linux/if_tunnel.h
android/linux/ip6_tunnel.h
android/regex.h
android/regex/cclass.h
android/regex/cname.h
android/regex/engine.c
android/regex/regcomp.c
android/regex/regerror.c
android/regex/regex2.h
android/regex/regexec.c
android/regex/regfree.c
android/regex/utils.h
contrib/netsimpcap/src/config.c
contrib/netsimpcap/src/config.h
contrib/netsimpcap/src/debug.h
contrib/netsimpcap/src/netsimpcap.c
contrib/netsimpcap/src/network_tap.c
contrib/netsimpcap/src/network_tap.h
gui/linux-gtk/src/callbacks.c
gui/linux-gtk/src/common.h
gui/linux-gtk/src/interface.c
gui/linux-gtk/src/interface.h
gui/linux-gtk/src/ipc.c
gui/linux-gtk/src/ipc.h
gui/linux-gtk/src/main.c
gui/linux-gtk/src/main.h
gui/linux-gtk/src/nodes.c
gui/linux-gtk/src/nodes.h
gui/linux-gtk/src/olsr.c
gui/linux-gtk/src/olsr_protocol.h
gui/linux-gtk/src/packet.c
gui/linux-gtk/src/packet.h
gui/linux-gtk/src/pixmaps.h
gui/linux-gtk/src/routes.c
gui/linux-gtk/src/routes.h
gui/win32/Main/Frontend.cpp
gui/win32/Main/Frontend.h
gui/win32/Main/FrontendDlg.cpp
gui/win32/Main/FrontendDlg.h
gui/win32/Main/HnaEntry.cpp
gui/win32/Main/HnaEntry.h
gui/win32/Main/Ipc.h
gui/win32/Main/MidEntry.cpp
gui/win32/Main/MidEntry.h
gui/win32/Main/MprEntry.cpp
gui/win32/Main/MprEntry.h
gui/win32/Main/MyDialog1.cpp
gui/win32/Main/MyDialog1.h
gui/win32/Main/MyDialog2.cpp
gui/win32/Main/MyDialog2.h
gui/win32/Main/MyDialog3.cpp
gui/win32/Main/MyDialog3.h
gui/win32/Main/MyDialog4.cpp
gui/win32/Main/MyDialog4.h
gui/win32/Main/MyEdit.cpp
gui/win32/Main/MyEdit.h
gui/win32/Main/MyTabCtrl.cpp
gui/win32/Main/MyTabCtrl.h
gui/win32/Main/NodeEntry.cpp
gui/win32/Main/NodeEntry.h
gui/win32/Main/StdAfx.cpp
gui/win32/Main/StdAfx.h
gui/win32/Main/TrayIcon.cpp
gui/win32/Main/TrayIcon.h
gui/win32/Main/resource.h
gui/win32/Shim/shim.c
lib/arprefresh/src/olsrd_arprefresh.c
lib/arprefresh/src/olsrd_arprefresh.h
lib/bmf/src/Address.c
lib/bmf/src/Address.h
lib/bmf/src/Bmf.c
lib/bmf/src/Bmf.h
lib/bmf/src/NetworkInterfaces.c
lib/bmf/src/NetworkInterfaces.h
lib/bmf/src/Packet.c
lib/bmf/src/Packet.h
lib/bmf/src/PacketHistory.c
lib/bmf/src/PacketHistory.h
lib/bmf/src/olsrd_plugin.c
lib/dot_draw/src/olsrd_dot_draw.c
lib/dot_draw/src/olsrd_dot_draw.h
lib/dot_draw/src/olsrd_plugin.c
lib/dyn_gw/src/olsrd_dyn_gw.c
lib/dyn_gw/src/olsrd_dyn_gw.h
lib/dyn_gw/src/olsrd_plugin.c
lib/dyn_gw_plain/src/olsrd_dyn_gw_plain.c
lib/dyn_gw_plain/src/olsrd_dyn_gw_plain.h
lib/httpinfo/src/admin_interface.c
lib/httpinfo/src/admin_interface.h
lib/httpinfo/src/gfx.h
lib/httpinfo/src/olsrd_httpinfo.c
lib/httpinfo/src/olsrd_httpinfo.h
lib/httpinfo/src/olsrd_plugin.c
lib/httpinfo/src/olsrd_plugin.h
lib/mdns/src/Address.c
lib/mdns/src/Address.h
lib/mdns/src/NetworkInterfaces.c
lib/mdns/src/NetworkInterfaces.h
lib/mdns/src/Packet.c
lib/mdns/src/Packet.h
lib/mdns/src/mdns.c
lib/mdns/src/mdns.h
lib/mdns/src/olsrd_plugin.c
lib/mini/src/olsrd_plugin.c
lib/mini/src/olsrd_plugin.h
lib/nameservice/src/compat.c
lib/nameservice/src/compat.h
lib/nameservice/src/mapwrite.c
lib/nameservice/src/mapwrite.h
lib/nameservice/src/nameservice.c
lib/nameservice/src/nameservice.h
lib/nameservice/src/nameservice_msg.h
lib/nameservice/src/olsrd_plugin.c
lib/p2pd/src/NetworkInterfaces.c
lib/p2pd/src/NetworkInterfaces.h
lib/p2pd/src/Packet.c
lib/p2pd/src/Packet.h
lib/p2pd/src/PacketHistory.c
lib/p2pd/src/PacketHistory.h
lib/p2pd/src/dllist.c
lib/p2pd/src/dllist.h
lib/p2pd/src/olsrd_plugin.c
lib/p2pd/src/p2pd.c
lib/p2pd/src/p2pd.h
lib/pgraph/src/olsrd_pgraph.c
lib/pgraph/src/olsrd_pgraph.h
lib/pud/src/compiler.h
lib/pud/src/configuration.c
lib/pud/src/configuration.h
lib/pud/src/dedup.c
lib/pud/src/dedup.h
lib/pud/src/gpsConversion.c
lib/pud/src/gpsConversion.h
lib/pud/src/netTools.c
lib/pud/src/netTools.h
lib/pud/src/networkInterfaces.c
lib/pud/src/networkInterfaces.h
lib/pud/src/posAvg.c
lib/pud/src/posAvg.h
lib/pud/src/posFile.c
lib/pud/src/posFile.h
lib/pud/src/pud.c
lib/pud/src/pud.h
lib/pud/src/pudOlsrdPlugin.c
lib/pud/src/pudOlsrdPlugin.h
lib/pud/src/receiver.c
lib/pud/src/receiver.h
lib/pud/src/state.c
lib/pud/src/state.h
lib/pud/src/timers.c
lib/pud/src/timers.h
lib/pud/src/uplinkGateway.c
lib/pud/src/uplinkGateway.h
lib/pud/wireformat-java/resources/WireFormatConstants.java.h
lib/pud/wireformat-java/src/main/c/org_olsr_plugin_pud_ClusterLeader.c
lib/pud/wireformat-java/src/main/c/org_olsr_plugin_pud_PositionUpdate.c
lib/pud/wireformat-java/src/main/c/org_olsr_plugin_pud_UplinkMessage.c
lib/pud/wireformat-java/src/main/c/util.h
lib/pud/wireformat/include/OlsrdPudWireFormat/compiler.h
lib/pud/wireformat/include/OlsrdPudWireFormat/nodeIdConversion.h
lib/pud/wireformat/include/OlsrdPudWireFormat/wireFormat.h
lib/pud/wireformat/src/nodeIdConversion.c
lib/pud/wireformat/src/wireFormat.c
lib/quagga/src/client.c
lib/quagga/src/client.h
lib/quagga/src/common.h
lib/quagga/src/olsrd_plugin.c
lib/quagga/src/packet.c
lib/quagga/src/packet.h
lib/quagga/src/parse.c
lib/quagga/src/parse.h
lib/quagga/src/plugin.c
lib/quagga/src/plugin.h
lib/quagga/src/quagga.c
lib/quagga/src/quagga.h
lib/secure/src/md5.c
lib/secure/src/md5.h
lib/secure/src/olsrd_plugin.c
lib/secure/src/olsrd_secure.c
lib/secure/src/olsrd_secure.h
lib/secure/src/secure_messages.h
lib/tas/src/glua.c
lib/tas/src/glua.h
lib/tas/src/glua_ext.c
lib/tas/src/glua_ext.h
lib/tas/src/http.c
lib/tas/src/http.h
lib/tas/src/lib.c
lib/tas/src/lib.h
lib/tas/src/link.h
lib/tas/src/lua/lapi.c
lib/tas/src/lua/lapi.h
lib/tas/src/lua/lauxlib.c
lib/tas/src/lua/lauxlib.h
lib/tas/src/lua/lbaselib.c
lib/tas/src/lua/lcode.c
lib/tas/src/lua/lcode.h
lib/tas/src/lua/ldblib.c
lib/tas/src/lua/ldebug.c
lib/tas/src/lua/ldebug.h
lib/tas/src/lua/ldo.c
lib/tas/src/lua/ldo.h
lib/tas/src/lua/ldump.c
lib/tas/src/lua/lfunc.c
lib/tas/src/lua/lfunc.h
lib/tas/src/lua/lgc.c
lib/tas/src/lua/lgc.h
lib/tas/src/lua/liolib.c
lib/tas/src/lua/llex.c
lib/tas/src/lua/llex.h
lib/tas/src/lua/llimits.h
lib/tas/src/lua/lmathlib.c
lib/tas/src/lua/lmem.c
lib/tas/src/lua/lmem.h
lib/tas/src/lua/loadlib.c
lib/tas/src/lua/lobject.c
lib/tas/src/lua/lobject.h
lib/tas/src/lua/lopcodes.c
lib/tas/src/lua/lopcodes.h
lib/tas/src/lua/lparser.c
lib/tas/src/lua/lparser.h
lib/tas/src/lua/lstate.c
lib/tas/src/lua/lstate.h
lib/tas/src/lua/lstring.c
lib/tas/src/lua/lstring.h
lib/tas/src/lua/lstrlib.c
lib/tas/src/lua/ltable.c
lib/tas/src/lua/ltable.h
lib/tas/src/lua/ltablib.c
lib/tas/src/lua/ltests.c
lib/tas/src/lua/ltm.c
lib/tas/src/lua/ltm.h
lib/tas/src/lua/lua.h
lib/tas/src/lua/lualib.h
lib/tas/src/lua/lundump.c
lib/tas/src/lua/lundump.h
lib/tas/src/lua/lvm.c
lib/tas/src/lua/lvm.h
lib/tas/src/lua/lzio.c
lib/tas/src/lua/lzio.h
lib/tas/src/os_unix.c
lib/tas/src/os_unix.h
lib/tas/src/plugin.c
lib/tas/src/plugin.h
lib/tas/test.c
lib/txtinfo/src/olsrd_plugin.c
lib/txtinfo/src/olsrd_txtinfo.c
lib/txtinfo/src/olsrd_txtinfo.h
lib/watchdog/src/olsrd_plugin.c
lib/watchdog/src/olsrd_plugin.h
src/apm.h
src/bsd/apm.c
src/bsd/dummy.c
src/bsd/kernel_routes.c
src/bsd/net.c
src/build_msg.c
src/build_msg.h
src/builddata.c
src/cfgparser/cfgfile_gen.c
src/cfgparser/olsrd_conf.c
src/cfgparser/olsrd_conf.h
src/cfgparser/oparse.c
src/cfgparser/oparse.h
src/cfgparser/oparse.y
src/cfgparser/oscan.c
src/common/autobuf.c
src/common/autobuf.h
src/common/avl.c
src/common/avl.h
src/common/list.c
src/common/list.h
src/defs.h
src/duplicate_handler.c
src/duplicate_handler.h
src/duplicate_set.c
src/duplicate_set.h
src/fpm.c
src/fpm.h
src/gateway.c
src/gateway.h
src/gateway_default_handler.c
src/gateway_default_handler.h
src/generate_msg.c
src/generate_msg.h
src/hashing.c
src/hashing.h
src/hna_set.c
src/hna_set.h
src/hysteresis.c
src/hysteresis.h
src/ifnet.h
src/interfaces.c
src/interfaces.h
src/ipc_frontend.c
src/ipc_frontend.h
src/ipcalc.c
src/ipcalc.h
src/kernel_routes.h
src/kernel_tunnel.h
src/link_set.c
src/link_set.h
src/linux/apm.c
src/linux/kernel_routes_ioctl.c
src/linux/kernel_routes_nl.c
src/linux/kernel_tunnel.c
src/linux/link_layer.c
src/linux/net.c
src/log.h
src/lq_mpr.c
src/lq_mpr.h
src/lq_packet.c
src/lq_packet.h
src/lq_plugin.c
src/lq_plugin.h
src/lq_plugin_default_ff.c
src/lq_plugin_default_ff.h
src/lq_plugin_default_ffeth.c
src/lq_plugin_default_ffeth.h
src/lq_plugin_default_float.c
src/lq_plugin_default_float.h
src/lq_plugin_default_fpm.c
src/lq_plugin_default_fpm.h
src/main.c
src/mantissa.c
src/mantissa.h
src/mid_set.c
src/mid_set.h
src/misc.h
src/mpr.c
src/mpr.h
src/mpr_selector_set.c
src/mpr_selector_set.h
src/neighbor_table.c
src/neighbor_table.h
src/net_olsr.c
src/net_olsr.h
src/net_os.h
src/olsr.c
src/olsr.h
src/olsr_cfg.h
src/olsr_cookie.c
src/olsr_cookie.h
src/olsr_niit.c
src/olsr_niit.h
src/olsr_protocol.h
src/olsr_spf.c
src/olsr_spf.h
src/olsr_switch/commands.h
src/olsr_switch/link_rules.c
src/olsr_switch/link_rules.h
src/olsr_switch/main.c
src/olsr_switch/ohs_cmd.c
src/olsr_switch/ohs_cmd.h
src/olsr_switch/olsr_host_switch.h
src/olsr_types.h
src/olsrd_plugin.h
src/packet.c
src/packet.h
src/parser.c
src/parser.h
src/plugin_loader.c
src/plugin_loader.h
src/plugin_util.c
src/plugin_util.h
src/print_packet.c
src/print_packet.h
src/process_package.c
src/process_package.h
src/process_routes.c
src/process_routes.h
src/rebuild_packet.c
src/rebuild_packet.h
src/routing_table.c
src/routing_table.h
src/scheduler.c
src/scheduler.h
src/tc_set.c
src/tc_set.h
src/two_hop_neighbor_table.c
src/two_hop_neighbor_table.h
src/unix/ifnet.c
src/unix/log.c
src/unix/misc.c
src/win32/apm.c
src/win32/arpa/inet.h
src/win32/ce/ws2tcpip.h
src/win32/compat.c
src/win32/dlfcn.h
src/win32/dummy.c
src/win32/ifnet.c
src/win32/kernel_routes.c
src/win32/log.c
src/win32/misc.c
src/win32/net.c
src/win32/net/if.h
src/win32/net/route.h
src/win32/netinet/in.h
src/win32/sys/ioctl.h
src/win32/sys/socket.h
src/win32/sys/time.h
src/win32/sys/times.h
src/win32/sys/utsname.h
src/win32/unistd.h
/usr/include/alloca.h
/usr/include/arpa/inet.h
/usr/include/arpa/nameser.h
/usr/include/assert.h
/usr/include/ctype.h
/usr/include/dlfcn.h
/usr/include/errno.h
/usr/include/fcntl.h
/usr/include/ifaddrs.h
/usr/include/inttypes.h
/usr/include/libintl.h
/usr/include/limits.h
/usr/include/link.h
/usr/include/linux/filter.h
/usr/include/linux/icmp.h
/usr/include/linux/if_ether.h
/usr/include/linux/if_packet.h
/usr/include/linux/if_tun.h
/usr/include/linux/if_tunnel.h
/usr/include/linux/in6.h
/usr/include/linux/in_route.h
/usr/include/linux/ip.h
/usr/include/linux/ip6_tunnel.h
/usr/include/linux/rtnetlink.h
/usr/include/linux/sockios.h
/usr/include/linux/types.h
/usr/include/linux/version.h
/usr/include/linux/wireless.h
/usr/include/locale.h
/usr/include/malloc.h
/usr/include/math.h
/usr/include/net/ethernet.h
/usr/include/net/if.h
/usr/include/net/if_arp.h
/usr/include/net/route.h
/usr/include/netdb.h
/usr/include/netinet/icmp6.h
/usr/include/netinet/if_ether.h
/usr/include/netinet/in.h
/usr/include/netinet/in_systm.h
/usr/include/netinet/ip.h
/usr/include/netinet/ip6.h
/usr/include/netinet/ip_icmp.h
/usr/include/netinet/udp.h
/usr/include/netpacket/packet.h
/usr/include/pthread.h
/usr/include/regex.h
/usr/include/setjmp.h
/usr/include/signal.h
/usr/include/stdint.h
/usr/include/stdio.h
/usr/include/stdlib.h
/usr/include/string.h
/usr/include/syslog.h
/usr/include/time.h
/usr/include/unistd.h
/usr/include/arpa/nameser_compat.h
/usr/include/elf.h
/usr/include/endian.h
/usr/include/features.h
/usr/include/getopt.h
/usr/include/libio.h
/usr/include/linux/if.h
/usr/include/linux/if_addr.h
/usr/include/linux/if_link.h
/usr/include/linux/neighbour.h
/usr/include/linux/netlink.h
/usr/include/linux/posix_types.h
/usr/include/linux/socket.h
/usr/include/rpc/netdb.h
/usr/include/sched.h
/usr/include/xlocale.h
/usr/include/_G_config.h
/usr/include/linux/hdlc/ioctl.h
/usr/include/linux/stddef.h
/usr/include/gconv.h
/usr/include/wchar.h
/usr/include/wctype.h
